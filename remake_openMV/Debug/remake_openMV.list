
remake_openMV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b854  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f498  0801baf4  0801baf4  0002baf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0804af8c  0804af8c  0005af8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0804af90  0804af90  0005af90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000898  24000000  0804af94  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000744c  24000898  0804b82c  00060898  2**2
                  ALLOC
  7 ._user_heap_stack 00006004  24007ce4  0804b82c  00067ce4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00060898  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000608c6  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ed0e  00000000  00000000  00060909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007767  00000000  00000000  0008f617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002240  00000000  00000000  00096d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019c3  00000000  00000000  00098fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00043fb4  00000000  00000000  0009a983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b972  00000000  00000000  000de937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b061  00000000  00000000  0011a2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000091bc  00000000  00000000  0028530c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  0028e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000898 	.word	0x24000898
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801badc 	.word	0x0801badc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400089c 	.word	0x2400089c
 80002dc:	0801badc 	.word	0x0801badc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <MX_DCMI_Init+0x60>)
 8000386:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <MX_DCMI_Init+0x64>)
 8000388:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_DCMI_Init+0x60>)
 800038c:	2200      	movs	r2, #0
 800038e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_DCMI_Init+0x60>)
 8000392:	2220      	movs	r2, #32
 8000394:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_DCMI_Init+0x60>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MX_DCMI_Init+0x60>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003b0:	2208      	movs	r2, #8
 80003b2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003bc:	2200      	movs	r2, #0
 80003be:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003ce:	f001 f93d 	bl	800164c <HAL_DCMI_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80003d8:	f000 fbe6 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	240008b4 	.word	0x240008b4
 80003e4:	48020000 	.word	0x48020000

080003e8 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08e      	sub	sp, #56	; 0x38
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a79      	ldr	r2, [pc, #484]	; (80005ec <HAL_DCMI_MspInit+0x204>)
 8000406:	4293      	cmp	r3, r2
 8000408:	f040 80ec 	bne.w	80005e4 <HAL_DCMI_MspInit+0x1fc>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800040c:	4b78      	ldr	r3, [pc, #480]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800040e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000412:	4a77      	ldr	r2, [pc, #476]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800041c:	4b74      	ldr	r3, [pc, #464]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800041e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	623b      	str	r3, [r7, #32]
 8000428:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800042a:	4b71      	ldr	r3, [pc, #452]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800042c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000430:	4a6f      	ldr	r2, [pc, #444]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800043a:	4b6d      	ldr	r3, [pc, #436]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	61fb      	str	r3, [r7, #28]
 8000446:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000448:	4b69      	ldr	r3, [pc, #420]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800044a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044e:	4a68      	ldr	r2, [pc, #416]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000450:	f043 0302 	orr.w	r3, r3, #2
 8000454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000458:	4b65      	ldr	r3, [pc, #404]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800045a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045e:	f003 0302 	and.w	r3, r3, #2
 8000462:	61bb      	str	r3, [r7, #24]
 8000464:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000466:	4b62      	ldr	r3, [pc, #392]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046c:	4a60      	ldr	r2, [pc, #384]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800046e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000476:	4b5e      	ldr	r3, [pc, #376]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000480:	617b      	str	r3, [r7, #20]
 8000482:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000484:	4b5a      	ldr	r3, [pc, #360]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800048a:	4a59      	ldr	r2, [pc, #356]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000494:	4b56      	ldr	r3, [pc, #344]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b53      	ldr	r3, [pc, #332]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 80004a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a8:	4a51      	ldr	r2, [pc, #324]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004b2:	4b4f      	ldr	r3, [pc, #316]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 80004b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80004c0:	2370      	movs	r3, #112	; 0x70
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	2302      	movs	r3, #2
 80004c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2300      	movs	r3, #0
 80004ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80004d0:	230d      	movs	r3, #13
 80004d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d8:	4619      	mov	r1, r3
 80004da:	4846      	ldr	r0, [pc, #280]	; (80005f4 <HAL_DCMI_MspInit+0x20c>)
 80004dc:	f004 fee6 	bl	80052ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80004e0:	23c0      	movs	r3, #192	; 0xc0
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e4:	2302      	movs	r3, #2
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2300      	movs	r3, #0
 80004ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80004f0:	230d      	movs	r3, #13
 80004f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f8:	4619      	mov	r1, r3
 80004fa:	483f      	ldr	r0, [pc, #252]	; (80005f8 <HAL_DCMI_MspInit+0x210>)
 80004fc:	f004 fed6 	bl	80052ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000500:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2300      	movs	r3, #0
 8000510:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000512:	230d      	movs	r3, #13
 8000514:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051a:	4619      	mov	r1, r3
 800051c:	4837      	ldr	r0, [pc, #220]	; (80005fc <HAL_DCMI_MspInit+0x214>)
 800051e:	f004 fec5 	bl	80052ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000522:	23c0      	movs	r3, #192	; 0xc0
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000526:	2302      	movs	r3, #2
 8000528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2300      	movs	r3, #0
 8000530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000532:	230d      	movs	r3, #13
 8000534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053a:	4619      	mov	r1, r3
 800053c:	4830      	ldr	r0, [pc, #192]	; (8000600 <HAL_DCMI_MspInit+0x218>)
 800053e:	f004 feb5 	bl	80052ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000542:	2350      	movs	r3, #80	; 0x50
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000546:	2302      	movs	r3, #2
 8000548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000552:	230d      	movs	r3, #13
 8000554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055a:	4619      	mov	r1, r3
 800055c:	4829      	ldr	r0, [pc, #164]	; (8000604 <HAL_DCMI_MspInit+0x21c>)
 800055e:	f004 fea5 	bl	80052ac <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream1;
 8000562:	4b29      	ldr	r3, [pc, #164]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 8000564:	4a29      	ldr	r2, [pc, #164]	; (800060c <HAL_DCMI_MspInit+0x224>)
 8000566:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 800056a:	224b      	movs	r2, #75	; 0x4b
 800056c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800056e:	4b26      	ldr	r3, [pc, #152]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 800057c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000580:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 8000584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000588:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800058a:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 800058c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000590:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 8000594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000598:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800059a:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 800059c:	2200      	movs	r2, #0
 800059e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80005b8:	4813      	ldr	r0, [pc, #76]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005ba:	f001 fb8b 	bl	8001cd4 <HAL_DMA_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 80005c4:	f000 faf0 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005cc:	649a      	str	r2, [r3, #72]	; 0x48
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	204e      	movs	r0, #78	; 0x4e
 80005da:	f001 f802 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80005de:	204e      	movs	r0, #78	; 0x4e
 80005e0:	f001 f819 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80005e4:	bf00      	nop
 80005e6:	3738      	adds	r7, #56	; 0x38
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	48020000 	.word	0x48020000
 80005f0:	58024400 	.word	0x58024400
 80005f4:	58021000 	.word	0x58021000
 80005f8:	58020400 	.word	0x58020400
 80005fc:	58021800 	.word	0x58021800
 8000600:	58020800 	.word	0x58020800
 8000604:	58020000 	.word	0x58020000
 8000608:	24000904 	.word	0x24000904
 800060c:	40020028 	.word	0x40020028

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_DMA_Init+0x4c>)
 8000618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800061c:	4a0f      	ldr	r2, [pc, #60]	; (800065c <MX_DMA_Init+0x4c>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_DMA_Init+0x4c>)
 8000628:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	200c      	movs	r0, #12
 800063a:	f000 ffd2 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800063e:	200c      	movs	r0, #12
 8000640:	f000 ffe9 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	2010      	movs	r0, #16
 800064a:	f000 ffca 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800064e:	2010      	movs	r0, #16
 8000650:	f000 ffe1 	bl	8001616 <HAL_NVIC_EnableIRQ>

}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	58024400 	.word	0x58024400

08000660 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b7b      	ldr	r3, [pc, #492]	; (8000864 <MX_GPIO_Init+0x204>)
 8000678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067c:	4a79      	ldr	r2, [pc, #484]	; (8000864 <MX_GPIO_Init+0x204>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000686:	4b77      	ldr	r3, [pc, #476]	; (8000864 <MX_GPIO_Init+0x204>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000694:	4b73      	ldr	r3, [pc, #460]	; (8000864 <MX_GPIO_Init+0x204>)
 8000696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069a:	4a72      	ldr	r2, [pc, #456]	; (8000864 <MX_GPIO_Init+0x204>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a4:	4b6f      	ldr	r3, [pc, #444]	; (8000864 <MX_GPIO_Init+0x204>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b6c      	ldr	r3, [pc, #432]	; (8000864 <MX_GPIO_Init+0x204>)
 80006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b8:	4a6a      	ldr	r2, [pc, #424]	; (8000864 <MX_GPIO_Init+0x204>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c2:	4b68      	ldr	r3, [pc, #416]	; (8000864 <MX_GPIO_Init+0x204>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b64      	ldr	r3, [pc, #400]	; (8000864 <MX_GPIO_Init+0x204>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d6:	4a63      	ldr	r2, [pc, #396]	; (8000864 <MX_GPIO_Init+0x204>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e0:	4b60      	ldr	r3, [pc, #384]	; (8000864 <MX_GPIO_Init+0x204>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ee:	4b5d      	ldr	r3, [pc, #372]	; (8000864 <MX_GPIO_Init+0x204>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f4:	4a5b      	ldr	r2, [pc, #364]	; (8000864 <MX_GPIO_Init+0x204>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fe:	4b59      	ldr	r3, [pc, #356]	; (8000864 <MX_GPIO_Init+0x204>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	f003 0310 	and.w	r3, r3, #16
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800070c:	4b55      	ldr	r3, [pc, #340]	; (8000864 <MX_GPIO_Init+0x204>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000712:	4a54      	ldr	r2, [pc, #336]	; (8000864 <MX_GPIO_Init+0x204>)
 8000714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071c:	4b51      	ldr	r3, [pc, #324]	; (8000864 <MX_GPIO_Init+0x204>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <MX_GPIO_Init+0x204>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	4a4c      	ldr	r2, [pc, #304]	; (8000864 <MX_GPIO_Init+0x204>)
 8000732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073a:	4b4a      	ldr	r3, [pc, #296]	; (8000864 <MX_GPIO_Init+0x204>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	4846      	ldr	r0, [pc, #280]	; (8000868 <MX_GPIO_Init+0x208>)
 800074e:	f004 ff5d 	bl	800560c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000758:	4844      	ldr	r0, [pc, #272]	; (800086c <MX_GPIO_Init+0x20c>)
 800075a:	f004 ff57 	bl	800560c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2107      	movs	r1, #7
 8000762:	4843      	ldr	r0, [pc, #268]	; (8000870 <MX_GPIO_Init+0x210>)
 8000764:	f004 ff52 	bl	800560c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800076e:	483e      	ldr	r0, [pc, #248]	; (8000868 <MX_GPIO_Init+0x208>)
 8000770:	f004 ff4c 	bl	800560c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2120      	movs	r1, #32
 8000778:	483c      	ldr	r0, [pc, #240]	; (800086c <MX_GPIO_Init+0x20c>)
 800077a:	f004 ff47 	bl	800560c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000784:	483b      	ldr	r0, [pc, #236]	; (8000874 <MX_GPIO_Init+0x214>)
 8000786:	f004 ff41 	bl	800560c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWDN_Pin;
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000792:	2301      	movs	r3, #1
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_PWDN_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4831      	ldr	r0, [pc, #196]	; (8000868 <MX_GPIO_Init+0x208>)
 80007a2:	f004 fd83 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin;
 80007a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RST_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	482b      	ldr	r0, [pc, #172]	; (800086c <MX_GPIO_Init+0x20c>)
 80007c0:	f004 fd74 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80007c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4822      	ldr	r0, [pc, #136]	; (800086c <MX_GPIO_Init+0x20c>)
 80007e2:	f004 fd63 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80007e6:	2307      	movs	r3, #7
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	481c      	ldr	r0, [pc, #112]	; (8000870 <MX_GPIO_Init+0x210>)
 80007fe:	f004 fd55 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RST_Pin;
 8000802:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4813      	ldr	r0, [pc, #76]	; (8000868 <MX_GPIO_Init+0x208>)
 800081c:	f004 fd46 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 8000820:	2320      	movs	r3, #32
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_GPIO_Init+0x20c>)
 8000838:	f004 fd38 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <MX_GPIO_Init+0x214>)
 8000856:	f004 fd29 	bl	80052ac <HAL_GPIO_Init>

}
 800085a:	bf00      	nop
 800085c:	3730      	adds	r7, #48	; 0x30
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	58024400 	.word	0x58024400
 8000868:	58020c00 	.word	0x58020c00
 800086c:	58020000 	.word	0x58020000
 8000870:	58020800 	.word	0x58020800
 8000874:	58020400 	.word	0x58020400

08000878 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_I2C1_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_I2C1_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109093DC;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_I2C1_Init+0x74>)
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x7c>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_I2C1_Init+0x74>)
 8000890:	2201      	movs	r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b2:	480e      	ldr	r0, [pc, #56]	; (80008ec <MX_I2C1_Init+0x74>)
 80008b4:	f004 fec4 	bl	8005640 <HAL_I2C_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008be:	f000 f973 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_I2C1_Init+0x74>)
 80008c6:	f005 fc31 	bl	800612c <HAL_I2CEx_ConfigAnalogFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 f96a 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_I2C1_Init+0x74>)
 80008d8:	f005 fc73 	bl	80061c2 <HAL_I2CEx_ConfigDigitalFilter>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 f961 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2400097c 	.word	0x2400097c
 80008f0:	40005400 	.word	0x40005400
 80008f4:	109093dc 	.word	0x109093dc

080008f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0ba      	sub	sp, #232	; 0xe8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	22c0      	movs	r2, #192	; 0xc0
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f01a fb8f 	bl	801b03c <memset>
  if(i2cHandle->Instance==I2C1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a31      	ldr	r2, [pc, #196]	; (80009e8 <HAL_I2C_MspInit+0xf0>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d15a      	bne.n	80009de <HAL_I2C_MspInit+0xe6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000928:	f04f 0208 	mov.w	r2, #8
 800092c:	f04f 0300 	mov.w	r3, #0
 8000930:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000938:	230c      	movs	r3, #12
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000940:	2303      	movs	r3, #3
 8000942:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000948:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800094e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 4096;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4618      	mov	r0, r3
 8000968:	f007 ffe2 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000972:	f000 f919 	bl	8000ba8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000994:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099c:	2312      	movs	r3, #18
 800099e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ae:	2304      	movs	r3, #4
 80009b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <HAL_I2C_MspInit+0xf8>)
 80009bc:	f004 fc76 	bl	80052ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 80009c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009c6:	4a09      	ldr	r2, [pc, #36]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 80009c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 80009d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009de:	bf00      	nop
 80009e0:	37e8      	adds	r7, #232	; 0xe8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40005400 	.word	0x40005400
 80009ec:	58024400 	.word	0x58024400
 80009f0:	58020400 	.word	0x58020400

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f000 fc56 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f000 f81c 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a00:	f7ff fe2e 	bl	8000660 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a04:	f7ff fe04 	bl	8000610 <MX_DMA_Init>
  MX_SPI2_Init();
 8000a08:	f000 f986 	bl	8000d18 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000a0c:	f017 fd4a 	bl	80184a4 <MX_USB_DEVICE_Init>
  MX_SDMMC1_SD_Init();
 8000a10:	f000 f8d0 	bl	8000bb4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000a14:	f00e ff80 	bl	800f918 <MX_FATFS_Init>
  MX_DCMI_Init();
 8000a18:	f7ff fcb2 	bl	8000380 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000a1c:	f7ff ff2c 	bl	8000878 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000a20:	f017 fa88 	bl	8017f34 <lcd_init>
  FatFs_read_Check();
 8000a24:	f017 f82e 	bl	8017a84 <FatFs_read_Check>
  FatFs_write_Check();
 8000a28:	f017 f876 	bl	8017b18 <FatFs_write_Check>
//  camera_RGB565_init();
  camera_JPEG_init();
 8000a2c:	f018 fb44 	bl	80190b8 <camera_JPEG_init>
//	  HAL_Delay(500);
//	  HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);
//	  HAL_Delay(500);
//	  usb_printf("openmv4 plus board cdc test\r\n");
//	  TFT_LCD_RGB565_run();
	  JPEG_run();
 8000a30:	f018 fc0e 	bl	8019250 <JPEG_run>
 8000a34:	e7fc      	b.n	8000a30 <main+0x3c>
	...

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09e      	sub	sp, #120	; 0x78
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a42:	224c      	movs	r2, #76	; 0x4c
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f01a faf8 	bl	801b03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2220      	movs	r2, #32
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f01a faf1 	bl	801b03c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f006 fee4 	bl	8007828 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b4d      	ldr	r3, [pc, #308]	; (8000b9c <SystemClock_Config+0x164>)
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	4a4c      	ldr	r2, [pc, #304]	; (8000b9c <SystemClock_Config+0x164>)
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a70:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <SystemClock_Config+0x164>)
 8000a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <SystemClock_Config+0x168>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <SystemClock_Config+0x168>)
 8000a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <SystemClock_Config+0x168>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a92:	bf00      	nop
 8000a94:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <SystemClock_Config+0x168>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa0:	d1f8      	bne.n	8000a94 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <SystemClock_Config+0x16c>)
 8000aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa8:	4a3e      	ldr	r2, [pc, #248]	; (8000ba4 <SystemClock_Config+0x16c>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ab2:	4b3c      	ldr	r3, [pc, #240]	; (8000ba4 <SystemClock_Config+0x16c>)
 8000ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	4b36      	ldr	r3, [pc, #216]	; (8000ba0 <SystemClock_Config+0x168>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a35      	ldr	r2, [pc, #212]	; (8000ba0 <SystemClock_Config+0x168>)
 8000aca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <SystemClock_Config+0x168>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <SystemClock_Config+0x164>)
 8000adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <SystemClock_Config+0x164>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <SystemClock_Config+0x164>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af2:	bf00      	nop
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <SystemClock_Config+0x168>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b00:	d1f8      	bne.n	8000af4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b02:	2321      	movs	r3, #33	; 0x21
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	2302      	movs	r3, #2
 8000b12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b14:	2302      	movs	r3, #2
 8000b16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000b1c:	23f0      	movs	r3, #240	; 0xf0
 8000b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b24:	2308      	movs	r3, #8
 8000b26:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f006 febd 	bl	80078bc <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000b48:	f000 f82e 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	233f      	movs	r3, #63	; 0x3f
 8000b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2303      	movs	r3, #3
 8000b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b5c:	2340      	movs	r3, #64	; 0x40
 8000b5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b6a:	2340      	movs	r3, #64	; 0x40
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2104      	movs	r1, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f007 fafb 	bl	8008170 <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000b80:	f000 f812 	bl	8000ba8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 8000b84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b88:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f007 fca5 	bl	80084dc <HAL_RCC_MCOConfig>
}
 8000b92:	bf00      	nop
 8000b94:	3778      	adds	r7, #120	; 0x78
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	58000400 	.word	0x58000400
 8000ba0:	58024800 	.word	0x58024800
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <MX_SDMMC1_SD_Init+0x44>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bd0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bda:	2204      	movs	r2, #4
 8000bdc:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000be0:	f00a fba4 	bl	800b32c <HAL_SD_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000bea:	f7ff ffdd 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	240009d0 	.word	0x240009d0
 8000bf8:	52007000 	.word	0x52007000

08000bfc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0bc      	sub	sp, #240	; 0xf0
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	22c0      	movs	r2, #192	; 0xc0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f01a fa0d 	bl	801b03c <memset>
  if(sdHandle->Instance==SDMMC1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a38      	ldr	r2, [pc, #224]	; (8000d08 <HAL_SD_MspInit+0x10c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d169      	bne.n	8000d00 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3c:	f107 0318 	add.w	r3, r7, #24
 8000c40:	4618      	mov	r0, r3
 8000c42:	f007 fe75 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000c4c:	f7ff ffac 	bl	8000ba8 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000c50:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c56:	4a2d      	ldr	r2, [pc, #180]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8000caa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480f      	ldr	r0, [pc, #60]	; (8000d10 <HAL_SD_MspInit+0x114>)
 8000cd2:	f004 faeb 	bl	80052ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <HAL_SD_MspInit+0x118>)
 8000cfc:	f004 fad6 	bl	80052ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	37f0      	adds	r7, #240	; 0xf0
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	52007000 	.word	0x52007000
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	58020800 	.word	0x58020800
 8000d14:	58020c00 	.word	0x58020c00

08000d18 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d1e:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <MX_SPI2_Init+0xac>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d22:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d30:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000dac:	f00b fe70 	bl	800ca90 <HAL_SPI_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000db6:	f7ff fef7 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	24000a4c 	.word	0x24000a4c
 8000dc4:	40003800 	.word	0x40003800

08000dc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0ba      	sub	sp, #232	; 0xe8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	22c0      	movs	r2, #192	; 0xc0
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f01a f927 	bl	801b03c <memset>
  if(spiHandle->Instance==SPI2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a42      	ldr	r2, [pc, #264]	; (8000efc <HAL_SPI_MspInit+0x134>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d17c      	bne.n	8000ef2 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 fd8f 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000e18:	f7ff fec6 	bl	8000ba8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e22:	4a37      	ldr	r2, [pc, #220]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e58:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e72:	2305      	movs	r3, #5
 8000e74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4821      	ldr	r0, [pc, #132]	; (8000f04 <HAL_SPI_MspInit+0x13c>)
 8000e80:	f004 fa14 	bl	80052ac <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream5;
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000e86:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <HAL_SPI_MspInit+0x144>)
 8000e88:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000e8c:	2228      	movs	r2, #40	; 0x28
 8000e8e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000ec8:	f000 ff04 	bl	8001cd4 <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8000ed2:	f7ff fe69 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000eda:	679a      	str	r2, [r3, #120]	; 0x78
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2024      	movs	r0, #36	; 0x24
 8000ee8:	f000 fb7b 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000eec:	2024      	movs	r0, #36	; 0x24
 8000eee:	f000 fb92 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	37e8      	adds	r7, #232	; 0xe8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40003800 	.word	0x40003800
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020400 	.word	0x58020400
 8000f08:	24000ad4 	.word	0x24000ad4
 8000f0c:	40020088 	.word	0x40020088

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_MspInit+0x30>)
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1c:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_MspInit+0x30>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_MspInit+0x30>)
 8000f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	58024400 	.word	0x58024400

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f9fc 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Stream1_IRQHandler+0x10>)
 8000f9e:	f002 f9c3 	bl	8003328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	24000904 	.word	0x24000904

08000fac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA1_Stream5_IRQHandler+0x10>)
 8000fb2:	f002 f9b9 	bl	8003328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	24000ad4 	.word	0x24000ad4

08000fc0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <SPI2_IRQHandler+0x10>)
 8000fc6:	f00c f883 	bl	800d0d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000a4c 	.word	0x24000a4c

08000fd4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DCMI_IRQHandler+0x10>)
 8000fda:	f000 fd2b 	bl	8001a34 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	240008b4 	.word	0x240008b4

08000fe8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <OTG_FS_IRQHandler+0x10>)
 8000fee:	f005 fa8d 	bl	800650c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	24002668 	.word	0x24002668

08000ffc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e00a      	b.n	8001024 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800100e:	f3af 8000 	nop.w
 8001012:	4601      	mov	r1, r0
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbf0      	blt.n	800100e <_read+0x12>
  }

  return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e009      	b.n	800105c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbf1      	blt.n	8001048 <_write+0x12>
  }
  return len;
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_close>:

int _close(int file)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001096:	605a      	str	r2, [r3, #4]
  return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_isatty>:

int _isatty(int file)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f019 fff6 	bl	801b0f8 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	24080000 	.word	0x24080000
 8001138:	00004000 	.word	0x00004000
 800113c:	24000b4c 	.word	0x24000b4c
 8001140:	24007ce8 	.word	0x24007ce8

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <SystemInit+0xe4>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114e:	4a36      	ldr	r2, [pc, #216]	; (8001228 <SystemInit+0xe4>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001158:	4b34      	ldr	r3, [pc, #208]	; (800122c <SystemInit+0xe8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	2b06      	cmp	r3, #6
 8001162:	d807      	bhi.n	8001174 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <SystemInit+0xe8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 030f 	bic.w	r3, r3, #15
 800116c:	4a2f      	ldr	r2, [pc, #188]	; (800122c <SystemInit+0xe8>)
 800116e:	f043 0307 	orr.w	r3, r3, #7
 8001172:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <SystemInit+0xec>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <SystemInit+0xec>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <SystemInit+0xec>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <SystemInit+0xec>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4929      	ldr	r1, [pc, #164]	; (8001230 <SystemInit+0xec>)
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <SystemInit+0xf0>)
 800118e:	4013      	ands	r3, r2
 8001190:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <SystemInit+0xe8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <SystemInit+0xe8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 030f 	bic.w	r3, r3, #15
 80011a6:	4a21      	ldr	r2, [pc, #132]	; (800122c <SystemInit+0xe8>)
 80011a8:	f043 0307 	orr.w	r3, r3, #7
 80011ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <SystemInit+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <SystemInit+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <SystemInit+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <SystemInit+0xec>)
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <SystemInit+0xf4>)
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <SystemInit+0xec>)
 80011c8:	4a1c      	ldr	r2, [pc, #112]	; (800123c <SystemInit+0xf8>)
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <SystemInit+0xec>)
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <SystemInit+0xfc>)
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <SystemInit+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <SystemInit+0xec>)
 80011da:	4a19      	ldr	r2, [pc, #100]	; (8001240 <SystemInit+0xfc>)
 80011dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <SystemInit+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <SystemInit+0xec>)
 80011e6:	4a16      	ldr	r2, [pc, #88]	; (8001240 <SystemInit+0xfc>)
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <SystemInit+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <SystemInit+0xec>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <SystemInit+0xec>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <SystemInit+0xec>)
 80011fe:	2200      	movs	r2, #0
 8001200:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <SystemInit+0x100>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <SystemInit+0x104>)
 8001208:	4013      	ands	r3, r2
 800120a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800120e:	d202      	bcs.n	8001216 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <SystemInit+0x108>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <SystemInit+0x10c>)
 8001218:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800121c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00
 800122c:	52002000 	.word	0x52002000
 8001230:	58024400 	.word	0x58024400
 8001234:	eaf6ed7f 	.word	0xeaf6ed7f
 8001238:	02020200 	.word	0x02020200
 800123c:	01ff0000 	.word	0x01ff0000
 8001240:	01010280 	.word	0x01010280
 8001244:	5c001000 	.word	0x5c001000
 8001248:	ffff0000 	.word	0xffff0000
 800124c:	51008108 	.word	0x51008108
 8001250:	52004000 	.word	0x52004000

08001254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800128c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001258:	f7ff ff74 	bl	8001144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	; (8001294 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	; (80012a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001282:	f019 ff3f 	bl	801b104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001286:	f7ff fbb5 	bl	80009f4 <main>
  bx  lr
 800128a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001290:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001294:	24000898 	.word	0x24000898
  ldr r2, =_sidata
 8001298:	0804af94 	.word	0x0804af94
  ldr r2, =_sbss
 800129c:	24000898 	.word	0x24000898
  ldr r4, =_ebss
 80012a0:	24007ce4 	.word	0x24007ce4

080012a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC3_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f000 f98c 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012b4:	f007 f97c 	bl	80085b0 <HAL_RCC_GetSysClockFreq>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_Init+0x68>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	4913      	ldr	r1, [pc, #76]	; (8001314 <HAL_Init+0x6c>)
 80012c6:	5ccb      	ldrb	r3, [r1, r3]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_Init+0x68>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_Init+0x6c>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_Init+0x70>)
 80012ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_Init+0x74>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f2:	200f      	movs	r0, #15
 80012f4:	f000 f814 	bl	8001320 <HAL_InitTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e002      	b.n	8001308 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001302:	f7ff fe05 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	58024400 	.word	0x58024400
 8001314:	0801bc04 	.word	0x0801bc04
 8001318:	24000004 	.word	0x24000004
 800131c:	24000000 	.word	0x24000000

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_InitTick+0x60>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e021      	b.n	8001378 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_InitTick+0x64>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_InitTick+0x60>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f971 	bl	8001632 <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f000 f93b 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_InitTick+0x68>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2400000c 	.word	0x2400000c
 8001384:	24000000 	.word	0x24000000
 8001388:	24000008 	.word	0x24000008

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2400000c 	.word	0x2400000c
 80013b0:	24000b50 	.word	0x24000b50

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	24000b50 	.word	0x24000b50

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2400000c 	.word	0x2400000c

08001414 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetREVID+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0c1b      	lsrs	r3, r3, #16
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	5c001000 	.word	0x5c001000

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <__NVIC_SetPriorityGrouping+0x40>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	4313      	orrs	r3, r2
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x40>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	05fa0000 	.word	0x05fa0000

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <__NVIC_EnableIRQ+0x38>)
 80014aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff8e 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff29 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff40 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff90 	bl	8001520 <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5f 	bl	80014cc <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff33 	bl	8001490 <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa4 	bl	8001588 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e069      	b.n	8001732 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe febc 	bl	80003e8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_DCMI_Init+0xf0>)
 8001692:	400b      	ands	r3, r1
 8001694:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80016aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80016b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80016c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80016ce:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80016da:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d112      	bne.n	8001712 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7f1b      	ldrb	r3, [r3, #28]
 80016f0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7f5b      	ldrb	r3, [r3, #29]
 80016f6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80016f8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7f9b      	ldrb	r3, [r3, #30]
 80016fe:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001700:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7fdb      	ldrb	r3, [r3, #31]
 8001708:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800170e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001710:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 021e 	orr.w	r2, r2, #30
 8001720:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	ffe0f007 	.word	0xffe0f007

08001740 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af02      	add	r7, sp, #8
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_DCMI_Start_DMA+0x1c>
 8001758:	2302      	movs	r3, #2
 800175a:	e0ab      	b.n	80018b4 <HAL_DCMI_Start_DMA+0x174>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800177a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0202 	bic.w	r2, r2, #2
 800178a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a0:	4a46      	ldr	r2, [pc, #280]	; (80018bc <HAL_DCMI_Start_DMA+0x17c>)
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a8:	4a45      	ldr	r2, [pc, #276]	; (80018c0 <HAL_DCMI_Start_DMA+0x180>)
 80017aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b0:	2200      	movs	r2, #0
 80017b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d2:	d219      	bcs.n	8001808 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3328      	adds	r3, #40	; 0x28
 80017de:	4619      	mov	r1, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	f000 fdd2 	bl	800238c <HAL_DMA_Start_IT>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d055      	beq.n	800189a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2240      	movs	r2, #64	; 0x40
 80017f2:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e055      	b.n	80018b4 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	4a2b      	ldr	r2, [pc, #172]	; (80018bc <HAL_DCMI_Start_DMA+0x17c>)
 800180e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001822:	e009      	b.n	8001838 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	085a      	lsrs	r2, r3, #1
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	005a      	lsls	r2, r3, #1
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d2f0      	bcs.n	8001824 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001846:	1e9a      	subs	r2, r3, #2
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3328      	adds	r3, #40	; 0x28
 800186a:	4619      	mov	r1, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	f003 f869 	bl	800494c <HAL_DMAEx_MultiBufferStart_IT>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00c      	beq.n	800189a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2240      	movs	r2, #64	; 0x40
 8001884:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e00c      	b.n	80018b4 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0201 	orr.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	08001b75 	.word	0x08001b75
 80018c0:	08001c9b 	.word	0x08001c9b

080018c4 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_DCMI_Stop+0xb8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a2b      	ldr	r2, [pc, #172]	; (8001980 <HAL_DCMI_Stop+0xbc>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0a5b      	lsrs	r3, r3, #9
 80018d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_DCMI_Stop+0x30>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e03f      	b.n	8001974 <HAL_DCMI_Stop+0xb0>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3b01      	subs	r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d108      	bne.n	8001932 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	f043 0220 	orr.w	r2, r3, #32
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	72fb      	strb	r3, [r7, #11]
      break;
 8001930:	e006      	b.n	8001940 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e9      	bne.n	8001914 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800194e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001954:	4618      	mov	r0, r3
 8001956:	f000 ff83 	bl	8002860 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001972:	7afb      	ldrb	r3, [r7, #11]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	24000000 	.word	0x24000000
 8001980:	10624dd3 	.word	0x10624dd3

08001984 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_DCMI_Suspend+0xa8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <HAL_DCMI_Suspend+0xac>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0a5b      	lsrs	r3, r3, #9
 8001998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800199c:	fb02 f303 	mul.w	r3, r2, r3
 80019a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_DCMI_Suspend+0x30>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e034      	b.n	8001a1e <HAL_DCMI_Suspend+0x9a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d125      	bne.n	8001a14 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2205      	movs	r2, #5
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10c      	bne.n	8001a06 <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	f043 0220 	orr.w	r2, r3, #32
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	72fb      	strb	r3, [r7, #11]
        break;
 8001a04:	e006      	b.n	8001a14 <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1e5      	bne.n	80019e0 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001a1c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	24000000 	.word	0x24000000
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d016      	beq.n	8001a7c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2204      	movs	r2, #4
 8001a54:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f043 0202 	orr.w	r2, r3, #2
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2204      	movs	r2, #4
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6e:	4a31      	ldr	r2, [pc, #196]	; (8001b34 <HAL_DCMI_IRQHandler+0x100>)
 8001a70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fa10 	bl	8002e9c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d016      	beq.n	8001ab4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <HAL_DCMI_IRQHandler+0x100>)
 8001aa8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 f9f4 	bl	8002e9c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f840 	bl	8001b4c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2208      	movs	r2, #8
 8001adc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f83e 	bl	8001b60 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01d      	beq.n	8001b2a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d107      	bne.n	8001b0c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 021e 	bic.w	r2, r2, #30
 8001b0a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2201      	movs	r2, #1
 8001b22:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f017 fb2d 	bl	8019184 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	08001c9b 	.word	0x08001c9b

08001b38 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b80:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d043      	beq.n	8001c12 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b96:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d118      	bne.n	8001bd6 <DCMI_DMAXferCplt+0x62>
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d015      	beq.n	8001bd6 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	00da      	lsls	r2, r3, #3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f003 fa1f 	bl	8005008 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bce:	1e5a      	subs	r2, r3, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38
 8001bd4:	e044      	b.n	8001c60 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d13c      	bne.n	8001c60 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf8:	00da      	lsls	r2, r3, #3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4619      	mov	r1, r3
 8001c02:	f003 fa01 	bl	8005008 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
 8001c10:	e026      	b.n	8001c60 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	e017      	b.n	8001c60 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10f      	bne.n	8001c60 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	0099      	lsls	r1, r3, #2
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	440a      	add	r2, r1
 8001c56:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d112      	bne.n	8001c92 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d103      	bne.n	8001c92 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d009      	beq.n	8001cc6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f7ff ff36 	bl	8001b38 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff fb6a 	bl	80013b4 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e316      	b.n	800231a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a66      	ldr	r2, [pc, #408]	; (8001e8c <HAL_DMA_Init+0x1b8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d04a      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a65      	ldr	r2, [pc, #404]	; (8001e90 <HAL_DMA_Init+0x1bc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d045      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a63      	ldr	r2, [pc, #396]	; (8001e94 <HAL_DMA_Init+0x1c0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d040      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a62      	ldr	r2, [pc, #392]	; (8001e98 <HAL_DMA_Init+0x1c4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d03b      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a60      	ldr	r2, [pc, #384]	; (8001e9c <HAL_DMA_Init+0x1c8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d036      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a5f      	ldr	r2, [pc, #380]	; (8001ea0 <HAL_DMA_Init+0x1cc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d031      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a5d      	ldr	r2, [pc, #372]	; (8001ea4 <HAL_DMA_Init+0x1d0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d02c      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a5c      	ldr	r2, [pc, #368]	; (8001ea8 <HAL_DMA_Init+0x1d4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d027      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a5a      	ldr	r2, [pc, #360]	; (8001eac <HAL_DMA_Init+0x1d8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d022      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a59      	ldr	r2, [pc, #356]	; (8001eb0 <HAL_DMA_Init+0x1dc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d01d      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a57      	ldr	r2, [pc, #348]	; (8001eb4 <HAL_DMA_Init+0x1e0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d018      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a56      	ldr	r2, [pc, #344]	; (8001eb8 <HAL_DMA_Init+0x1e4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d013      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a54      	ldr	r2, [pc, #336]	; (8001ebc <HAL_DMA_Init+0x1e8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00e      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a53      	ldr	r2, [pc, #332]	; (8001ec0 <HAL_DMA_Init+0x1ec>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d009      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a51      	ldr	r2, [pc, #324]	; (8001ec4 <HAL_DMA_Init+0x1f0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d004      	beq.n	8001d8c <HAL_DMA_Init+0xb8>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a50      	ldr	r2, [pc, #320]	; (8001ec8 <HAL_DMA_Init+0x1f4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_DMA_Init+0xbc>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_DMA_Init+0xbe>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 813b 	beq.w	800200e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a37      	ldr	r2, [pc, #220]	; (8001e8c <HAL_DMA_Init+0x1b8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d04a      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a36      	ldr	r2, [pc, #216]	; (8001e90 <HAL_DMA_Init+0x1bc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d045      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <HAL_DMA_Init+0x1c0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d040      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a33      	ldr	r2, [pc, #204]	; (8001e98 <HAL_DMA_Init+0x1c4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d03b      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a31      	ldr	r2, [pc, #196]	; (8001e9c <HAL_DMA_Init+0x1c8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d036      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <HAL_DMA_Init+0x1cc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d031      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2e      	ldr	r2, [pc, #184]	; (8001ea4 <HAL_DMA_Init+0x1d0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d02c      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a2d      	ldr	r2, [pc, #180]	; (8001ea8 <HAL_DMA_Init+0x1d4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d027      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <HAL_DMA_Init+0x1d8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d022      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a2a      	ldr	r2, [pc, #168]	; (8001eb0 <HAL_DMA_Init+0x1dc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d01d      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a28      	ldr	r2, [pc, #160]	; (8001eb4 <HAL_DMA_Init+0x1e0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d018      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <HAL_DMA_Init+0x1e4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a25      	ldr	r2, [pc, #148]	; (8001ebc <HAL_DMA_Init+0x1e8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00e      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a24      	ldr	r2, [pc, #144]	; (8001ec0 <HAL_DMA_Init+0x1ec>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <HAL_DMA_Init+0x1f0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_DMA_Init+0x174>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <HAL_DMA_Init+0x1f4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d108      	bne.n	8001e5a <HAL_DMA_Init+0x186>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e007      	b.n	8001e6a <HAL_DMA_Init+0x196>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e6a:	e02f      	b.n	8001ecc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e6c:	f7ff faa2 	bl	80013b4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d928      	bls.n	8001ecc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2203      	movs	r2, #3
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e246      	b.n	800231a <HAL_DMA_Init+0x646>
 8001e8c:	40020010 	.word	0x40020010
 8001e90:	40020028 	.word	0x40020028
 8001e94:	40020040 	.word	0x40020040
 8001e98:	40020058 	.word	0x40020058
 8001e9c:	40020070 	.word	0x40020070
 8001ea0:	40020088 	.word	0x40020088
 8001ea4:	400200a0 	.word	0x400200a0
 8001ea8:	400200b8 	.word	0x400200b8
 8001eac:	40020410 	.word	0x40020410
 8001eb0:	40020428 	.word	0x40020428
 8001eb4:	40020440 	.word	0x40020440
 8001eb8:	40020458 	.word	0x40020458
 8001ebc:	40020470 	.word	0x40020470
 8001ec0:	40020488 	.word	0x40020488
 8001ec4:	400204a0 	.word	0x400204a0
 8001ec8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1c8      	bne.n	8001e6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4b83      	ldr	r3, [pc, #524]	; (80020f4 <HAL_DMA_Init+0x420>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ef2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d107      	bne.n	8001f30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f30:	4b71      	ldr	r3, [pc, #452]	; (80020f8 <HAL_DMA_Init+0x424>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b71      	ldr	r3, [pc, #452]	; (80020fc <HAL_DMA_Init+0x428>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f3c:	d328      	bcc.n	8001f90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b28      	cmp	r3, #40	; 0x28
 8001f44:	d903      	bls.n	8001f4e <HAL_DMA_Init+0x27a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8001f4c:	d917      	bls.n	8001f7e <HAL_DMA_Init+0x2aa>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b3e      	cmp	r3, #62	; 0x3e
 8001f54:	d903      	bls.n	8001f5e <HAL_DMA_Init+0x28a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b42      	cmp	r3, #66	; 0x42
 8001f5c:	d90f      	bls.n	8001f7e <HAL_DMA_Init+0x2aa>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b46      	cmp	r3, #70	; 0x46
 8001f64:	d903      	bls.n	8001f6e <HAL_DMA_Init+0x29a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b48      	cmp	r3, #72	; 0x48
 8001f6c:	d907      	bls.n	8001f7e <HAL_DMA_Init+0x2aa>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b4e      	cmp	r3, #78	; 0x4e
 8001f74:	d905      	bls.n	8001f82 <HAL_DMA_Init+0x2ae>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b52      	cmp	r3, #82	; 0x52
 8001f7c:	d801      	bhi.n	8001f82 <HAL_DMA_Init+0x2ae>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_DMA_Init+0x2b0>
 8001f82:	2300      	movs	r3, #0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0307 	bic.w	r3, r3, #7
 8001fa6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d117      	bne.n	8001fea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00e      	beq.n	8001fea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f002 fb33 	bl	8004638 <DMA_CheckFifoParam>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e197      	b.n	800231a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f002 fa6e 	bl	80044d4 <DMA_CalcBaseAndBitshift>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	223f      	movs	r2, #63	; 0x3f
 8002006:	409a      	lsls	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e0cd      	b.n	80021aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <HAL_DMA_Init+0x42c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d022      	beq.n	800205e <HAL_DMA_Init+0x38a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a39      	ldr	r2, [pc, #228]	; (8002104 <HAL_DMA_Init+0x430>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01d      	beq.n	800205e <HAL_DMA_Init+0x38a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a38      	ldr	r2, [pc, #224]	; (8002108 <HAL_DMA_Init+0x434>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d018      	beq.n	800205e <HAL_DMA_Init+0x38a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a36      	ldr	r2, [pc, #216]	; (800210c <HAL_DMA_Init+0x438>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_DMA_Init+0x38a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a35      	ldr	r2, [pc, #212]	; (8002110 <HAL_DMA_Init+0x43c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00e      	beq.n	800205e <HAL_DMA_Init+0x38a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a33      	ldr	r2, [pc, #204]	; (8002114 <HAL_DMA_Init+0x440>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d009      	beq.n	800205e <HAL_DMA_Init+0x38a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a32      	ldr	r2, [pc, #200]	; (8002118 <HAL_DMA_Init+0x444>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d004      	beq.n	800205e <HAL_DMA_Init+0x38a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a30      	ldr	r2, [pc, #192]	; (800211c <HAL_DMA_Init+0x448>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_DMA_Init+0x38e>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_DMA_Init+0x390>
 8002062:	2300      	movs	r3, #0
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8097 	beq.w	8002198 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_DMA_Init+0x42c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d021      	beq.n	80020b8 <HAL_DMA_Init+0x3e4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a22      	ldr	r2, [pc, #136]	; (8002104 <HAL_DMA_Init+0x430>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01c      	beq.n	80020b8 <HAL_DMA_Init+0x3e4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a21      	ldr	r2, [pc, #132]	; (8002108 <HAL_DMA_Init+0x434>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d017      	beq.n	80020b8 <HAL_DMA_Init+0x3e4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1f      	ldr	r2, [pc, #124]	; (800210c <HAL_DMA_Init+0x438>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d012      	beq.n	80020b8 <HAL_DMA_Init+0x3e4>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1e      	ldr	r2, [pc, #120]	; (8002110 <HAL_DMA_Init+0x43c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00d      	beq.n	80020b8 <HAL_DMA_Init+0x3e4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <HAL_DMA_Init+0x440>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d008      	beq.n	80020b8 <HAL_DMA_Init+0x3e4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <HAL_DMA_Init+0x444>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_Init+0x3e4>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_DMA_Init+0x448>)
 80020b6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_DMA_Init+0x44c>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d021      	beq.n	8002124 <HAL_DMA_Init+0x450>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b80      	cmp	r3, #128	; 0x80
 80020e6:	d102      	bne.n	80020ee <HAL_DMA_Init+0x41a>
 80020e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ec:	e01b      	b.n	8002126 <HAL_DMA_Init+0x452>
 80020ee:	2300      	movs	r3, #0
 80020f0:	e019      	b.n	8002126 <HAL_DMA_Init+0x452>
 80020f2:	bf00      	nop
 80020f4:	fe10803f 	.word	0xfe10803f
 80020f8:	5c001000 	.word	0x5c001000
 80020fc:	ffff0000 	.word	0xffff0000
 8002100:	58025408 	.word	0x58025408
 8002104:	5802541c 	.word	0x5802541c
 8002108:	58025430 	.word	0x58025430
 800210c:	58025444 	.word	0x58025444
 8002110:	58025458 	.word	0x58025458
 8002114:	5802546c 	.word	0x5802546c
 8002118:	58025480 	.word	0x58025480
 800211c:	58025494 	.word	0x58025494
 8002120:	fffe000f 	.word	0xfffe000f
 8002124:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68d2      	ldr	r2, [r2, #12]
 800212a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800212c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002134:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800213c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800214c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002154:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b6e      	ldr	r3, [pc, #440]	; (8002324 <HAL_DMA_Init+0x650>)
 800216c:	4413      	add	r3, r2
 800216e:	4a6e      	ldr	r2, [pc, #440]	; (8002328 <HAL_DMA_Init+0x654>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	009a      	lsls	r2, r3, #2
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f002 f9a9 	bl	80044d4 <DMA_CalcBaseAndBitshift>
 8002182:	4603      	mov	r3, r0
 8002184:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2201      	movs	r2, #1
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	e008      	b.n	80021aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2240      	movs	r2, #64	; 0x40
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2203      	movs	r2, #3
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0b7      	b.n	800231a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a5f      	ldr	r2, [pc, #380]	; (800232c <HAL_DMA_Init+0x658>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d072      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a5d      	ldr	r2, [pc, #372]	; (8002330 <HAL_DMA_Init+0x65c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d06d      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5c      	ldr	r2, [pc, #368]	; (8002334 <HAL_DMA_Init+0x660>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d068      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5a      	ldr	r2, [pc, #360]	; (8002338 <HAL_DMA_Init+0x664>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d063      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a59      	ldr	r2, [pc, #356]	; (800233c <HAL_DMA_Init+0x668>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d05e      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a57      	ldr	r2, [pc, #348]	; (8002340 <HAL_DMA_Init+0x66c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d059      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a56      	ldr	r2, [pc, #344]	; (8002344 <HAL_DMA_Init+0x670>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d054      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a54      	ldr	r2, [pc, #336]	; (8002348 <HAL_DMA_Init+0x674>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d04f      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a53      	ldr	r2, [pc, #332]	; (800234c <HAL_DMA_Init+0x678>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04a      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_DMA_Init+0x67c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d045      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_DMA_Init+0x680>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d040      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a4e      	ldr	r2, [pc, #312]	; (8002358 <HAL_DMA_Init+0x684>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d03b      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a4d      	ldr	r2, [pc, #308]	; (800235c <HAL_DMA_Init+0x688>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d036      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a4b      	ldr	r2, [pc, #300]	; (8002360 <HAL_DMA_Init+0x68c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a4a      	ldr	r2, [pc, #296]	; (8002364 <HAL_DMA_Init+0x690>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d02c      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a48      	ldr	r2, [pc, #288]	; (8002368 <HAL_DMA_Init+0x694>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d027      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a47      	ldr	r2, [pc, #284]	; (800236c <HAL_DMA_Init+0x698>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a45      	ldr	r2, [pc, #276]	; (8002370 <HAL_DMA_Init+0x69c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a44      	ldr	r2, [pc, #272]	; (8002374 <HAL_DMA_Init+0x6a0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d018      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a42      	ldr	r2, [pc, #264]	; (8002378 <HAL_DMA_Init+0x6a4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a41      	ldr	r2, [pc, #260]	; (800237c <HAL_DMA_Init+0x6a8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a3f      	ldr	r2, [pc, #252]	; (8002380 <HAL_DMA_Init+0x6ac>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a3e      	ldr	r2, [pc, #248]	; (8002384 <HAL_DMA_Init+0x6b0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_DMA_Init+0x5c6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a3c      	ldr	r2, [pc, #240]	; (8002388 <HAL_DMA_Init+0x6b4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_DMA_Init+0x5ca>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_DMA_Init+0x5cc>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d032      	beq.n	800230a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f002 fa43 	bl	8004730 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d102      	bne.n	80022b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d010      	beq.n	80022f8 <HAL_DMA_Init+0x624>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d80c      	bhi.n	80022f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f002 fac0 	bl	8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	e008      	b.n	800230a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	a7fdabf8 	.word	0xa7fdabf8
 8002328:	cccccccd 	.word	0xcccccccd
 800232c:	40020010 	.word	0x40020010
 8002330:	40020028 	.word	0x40020028
 8002334:	40020040 	.word	0x40020040
 8002338:	40020058 	.word	0x40020058
 800233c:	40020070 	.word	0x40020070
 8002340:	40020088 	.word	0x40020088
 8002344:	400200a0 	.word	0x400200a0
 8002348:	400200b8 	.word	0x400200b8
 800234c:	40020410 	.word	0x40020410
 8002350:	40020428 	.word	0x40020428
 8002354:	40020440 	.word	0x40020440
 8002358:	40020458 	.word	0x40020458
 800235c:	40020470 	.word	0x40020470
 8002360:	40020488 	.word	0x40020488
 8002364:	400204a0 	.word	0x400204a0
 8002368:	400204b8 	.word	0x400204b8
 800236c:	58025408 	.word	0x58025408
 8002370:	5802541c 	.word	0x5802541c
 8002374:	58025430 	.word	0x58025430
 8002378:	58025444 	.word	0x58025444
 800237c:	58025458 	.word	0x58025458
 8002380:	5802546c 	.word	0x5802546c
 8002384:	58025480 	.word	0x58025480
 8002388:	58025494 	.word	0x58025494

0800238c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e226      	b.n	80027f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_DMA_Start_IT+0x2a>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e21f      	b.n	80027f6 <HAL_DMA_Start_IT+0x46a>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	f040 820a 	bne.w	80027e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a68      	ldr	r2, [pc, #416]	; (8002580 <HAL_DMA_Start_IT+0x1f4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d04a      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a66      	ldr	r2, [pc, #408]	; (8002584 <HAL_DMA_Start_IT+0x1f8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d045      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a65      	ldr	r2, [pc, #404]	; (8002588 <HAL_DMA_Start_IT+0x1fc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d040      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a63      	ldr	r2, [pc, #396]	; (800258c <HAL_DMA_Start_IT+0x200>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d03b      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a62      	ldr	r2, [pc, #392]	; (8002590 <HAL_DMA_Start_IT+0x204>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d036      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a60      	ldr	r2, [pc, #384]	; (8002594 <HAL_DMA_Start_IT+0x208>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d031      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a5f      	ldr	r2, [pc, #380]	; (8002598 <HAL_DMA_Start_IT+0x20c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d02c      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5d      	ldr	r2, [pc, #372]	; (800259c <HAL_DMA_Start_IT+0x210>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d027      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5c      	ldr	r2, [pc, #368]	; (80025a0 <HAL_DMA_Start_IT+0x214>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5a      	ldr	r2, [pc, #360]	; (80025a4 <HAL_DMA_Start_IT+0x218>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01d      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a59      	ldr	r2, [pc, #356]	; (80025a8 <HAL_DMA_Start_IT+0x21c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a57      	ldr	r2, [pc, #348]	; (80025ac <HAL_DMA_Start_IT+0x220>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <HAL_DMA_Start_IT+0x224>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00e      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a54      	ldr	r2, [pc, #336]	; (80025b4 <HAL_DMA_Start_IT+0x228>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a53      	ldr	r2, [pc, #332]	; (80025b8 <HAL_DMA_Start_IT+0x22c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_DMA_Start_IT+0xee>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a51      	ldr	r2, [pc, #324]	; (80025bc <HAL_DMA_Start_IT+0x230>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d108      	bne.n	800248c <HAL_DMA_Start_IT+0x100>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e007      	b.n	800249c <HAL_DMA_Start_IT+0x110>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f001 fe6a 	bl	800417c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a34      	ldr	r2, [pc, #208]	; (8002580 <HAL_DMA_Start_IT+0x1f4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d04a      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a33      	ldr	r2, [pc, #204]	; (8002584 <HAL_DMA_Start_IT+0x1f8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d045      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_DMA_Start_IT+0x1fc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d040      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_DMA_Start_IT+0x200>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d03b      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2e      	ldr	r2, [pc, #184]	; (8002590 <HAL_DMA_Start_IT+0x204>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d036      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2d      	ldr	r2, [pc, #180]	; (8002594 <HAL_DMA_Start_IT+0x208>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d031      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2b      	ldr	r2, [pc, #172]	; (8002598 <HAL_DMA_Start_IT+0x20c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d02c      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2a      	ldr	r2, [pc, #168]	; (800259c <HAL_DMA_Start_IT+0x210>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d027      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <HAL_DMA_Start_IT+0x214>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <HAL_DMA_Start_IT+0x218>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d01d      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <HAL_DMA_Start_IT+0x21c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_DMA_Start_IT+0x220>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_DMA_Start_IT+0x224>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <HAL_DMA_Start_IT+0x228>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_DMA_Start_IT+0x22c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_DMA_Start_IT+0x1bc>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_DMA_Start_IT+0x230>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_DMA_Start_IT+0x1c0>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_DMA_Start_IT+0x1c2>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d036      	beq.n	80025c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 021e 	bic.w	r2, r3, #30
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0216 	orr.w	r2, r2, #22
 8002564:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03e      	beq.n	80025ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0208 	orr.w	r2, r2, #8
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e035      	b.n	80025ec <HAL_DMA_Start_IT+0x260>
 8002580:	40020010 	.word	0x40020010
 8002584:	40020028 	.word	0x40020028
 8002588:	40020040 	.word	0x40020040
 800258c:	40020058 	.word	0x40020058
 8002590:	40020070 	.word	0x40020070
 8002594:	40020088 	.word	0x40020088
 8002598:	400200a0 	.word	0x400200a0
 800259c:	400200b8 	.word	0x400200b8
 80025a0:	40020410 	.word	0x40020410
 80025a4:	40020428 	.word	0x40020428
 80025a8:	40020440 	.word	0x40020440
 80025ac:	40020458 	.word	0x40020458
 80025b0:	40020470 	.word	0x40020470
 80025b4:	40020488 	.word	0x40020488
 80025b8:	400204a0 	.word	0x400204a0
 80025bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 020e 	bic.w	r2, r3, #14
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 020a 	orr.w	r2, r2, #10
 80025d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0204 	orr.w	r2, r2, #4
 80025ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a83      	ldr	r2, [pc, #524]	; (8002800 <HAL_DMA_Start_IT+0x474>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d072      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a82      	ldr	r2, [pc, #520]	; (8002804 <HAL_DMA_Start_IT+0x478>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d06d      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a80      	ldr	r2, [pc, #512]	; (8002808 <HAL_DMA_Start_IT+0x47c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d068      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7f      	ldr	r2, [pc, #508]	; (800280c <HAL_DMA_Start_IT+0x480>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d063      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a7d      	ldr	r2, [pc, #500]	; (8002810 <HAL_DMA_Start_IT+0x484>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d05e      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7c      	ldr	r2, [pc, #496]	; (8002814 <HAL_DMA_Start_IT+0x488>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d059      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7a      	ldr	r2, [pc, #488]	; (8002818 <HAL_DMA_Start_IT+0x48c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d054      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a79      	ldr	r2, [pc, #484]	; (800281c <HAL_DMA_Start_IT+0x490>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d04f      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a77      	ldr	r2, [pc, #476]	; (8002820 <HAL_DMA_Start_IT+0x494>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d04a      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a76      	ldr	r2, [pc, #472]	; (8002824 <HAL_DMA_Start_IT+0x498>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d045      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a74      	ldr	r2, [pc, #464]	; (8002828 <HAL_DMA_Start_IT+0x49c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d040      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a73      	ldr	r2, [pc, #460]	; (800282c <HAL_DMA_Start_IT+0x4a0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d03b      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a71      	ldr	r2, [pc, #452]	; (8002830 <HAL_DMA_Start_IT+0x4a4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d036      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a70      	ldr	r2, [pc, #448]	; (8002834 <HAL_DMA_Start_IT+0x4a8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d031      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a6e      	ldr	r2, [pc, #440]	; (8002838 <HAL_DMA_Start_IT+0x4ac>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d02c      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6d      	ldr	r2, [pc, #436]	; (800283c <HAL_DMA_Start_IT+0x4b0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d027      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6b      	ldr	r2, [pc, #428]	; (8002840 <HAL_DMA_Start_IT+0x4b4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d022      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6a      	ldr	r2, [pc, #424]	; (8002844 <HAL_DMA_Start_IT+0x4b8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d01d      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a68      	ldr	r2, [pc, #416]	; (8002848 <HAL_DMA_Start_IT+0x4bc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d018      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a67      	ldr	r2, [pc, #412]	; (800284c <HAL_DMA_Start_IT+0x4c0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d013      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_DMA_Start_IT+0x4c4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00e      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a64      	ldr	r2, [pc, #400]	; (8002854 <HAL_DMA_Start_IT+0x4c8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a62      	ldr	r2, [pc, #392]	; (8002858 <HAL_DMA_Start_IT+0x4cc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <HAL_DMA_Start_IT+0x350>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a61      	ldr	r2, [pc, #388]	; (800285c <HAL_DMA_Start_IT+0x4d0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d101      	bne.n	80026e0 <HAL_DMA_Start_IT+0x354>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_DMA_Start_IT+0x356>
 80026e0:	2300      	movs	r3, #0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01a      	beq.n	800271c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002702:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a37      	ldr	r2, [pc, #220]	; (8002800 <HAL_DMA_Start_IT+0x474>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d04a      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a36      	ldr	r2, [pc, #216]	; (8002804 <HAL_DMA_Start_IT+0x478>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d045      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a34      	ldr	r2, [pc, #208]	; (8002808 <HAL_DMA_Start_IT+0x47c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d040      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a33      	ldr	r2, [pc, #204]	; (800280c <HAL_DMA_Start_IT+0x480>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d03b      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a31      	ldr	r2, [pc, #196]	; (8002810 <HAL_DMA_Start_IT+0x484>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d036      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a30      	ldr	r2, [pc, #192]	; (8002814 <HAL_DMA_Start_IT+0x488>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d031      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a2e      	ldr	r2, [pc, #184]	; (8002818 <HAL_DMA_Start_IT+0x48c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d02c      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a2d      	ldr	r2, [pc, #180]	; (800281c <HAL_DMA_Start_IT+0x490>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d027      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2b      	ldr	r2, [pc, #172]	; (8002820 <HAL_DMA_Start_IT+0x494>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d022      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <HAL_DMA_Start_IT+0x498>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d01d      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a28      	ldr	r2, [pc, #160]	; (8002828 <HAL_DMA_Start_IT+0x49c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d018      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_DMA_Start_IT+0x4a0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a25      	ldr	r2, [pc, #148]	; (8002830 <HAL_DMA_Start_IT+0x4a4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00e      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a24      	ldr	r2, [pc, #144]	; (8002834 <HAL_DMA_Start_IT+0x4a8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d009      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a22      	ldr	r2, [pc, #136]	; (8002838 <HAL_DMA_Start_IT+0x4ac>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_DMA_Start_IT+0x430>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_DMA_Start_IT+0x4b0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d108      	bne.n	80027ce <HAL_DMA_Start_IT+0x442>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e012      	b.n	80027f4 <HAL_DMA_Start_IT+0x468>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e009      	b.n	80027f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40020010 	.word	0x40020010
 8002804:	40020028 	.word	0x40020028
 8002808:	40020040 	.word	0x40020040
 800280c:	40020058 	.word	0x40020058
 8002810:	40020070 	.word	0x40020070
 8002814:	40020088 	.word	0x40020088
 8002818:	400200a0 	.word	0x400200a0
 800281c:	400200b8 	.word	0x400200b8
 8002820:	40020410 	.word	0x40020410
 8002824:	40020428 	.word	0x40020428
 8002828:	40020440 	.word	0x40020440
 800282c:	40020458 	.word	0x40020458
 8002830:	40020470 	.word	0x40020470
 8002834:	40020488 	.word	0x40020488
 8002838:	400204a0 	.word	0x400204a0
 800283c:	400204b8 	.word	0x400204b8
 8002840:	58025408 	.word	0x58025408
 8002844:	5802541c 	.word	0x5802541c
 8002848:	58025430 	.word	0x58025430
 800284c:	58025444 	.word	0x58025444
 8002850:	58025458 	.word	0x58025458
 8002854:	5802546c 	.word	0x5802546c
 8002858:	58025480 	.word	0x58025480
 800285c:	58025494 	.word	0x58025494

08002860 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002868:	f7fe fda4 	bl	80013b4 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e2dc      	b.n	8002e32 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d008      	beq.n	8002896 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e2cd      	b.n	8002e32 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a76      	ldr	r2, [pc, #472]	; (8002a74 <HAL_DMA_Abort+0x214>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d04a      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a74      	ldr	r2, [pc, #464]	; (8002a78 <HAL_DMA_Abort+0x218>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d045      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a73      	ldr	r2, [pc, #460]	; (8002a7c <HAL_DMA_Abort+0x21c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d040      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a71      	ldr	r2, [pc, #452]	; (8002a80 <HAL_DMA_Abort+0x220>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d03b      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a70      	ldr	r2, [pc, #448]	; (8002a84 <HAL_DMA_Abort+0x224>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d036      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6e      	ldr	r2, [pc, #440]	; (8002a88 <HAL_DMA_Abort+0x228>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d031      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6d      	ldr	r2, [pc, #436]	; (8002a8c <HAL_DMA_Abort+0x22c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d02c      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6b      	ldr	r2, [pc, #428]	; (8002a90 <HAL_DMA_Abort+0x230>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d027      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6a      	ldr	r2, [pc, #424]	; (8002a94 <HAL_DMA_Abort+0x234>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d022      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a68      	ldr	r2, [pc, #416]	; (8002a98 <HAL_DMA_Abort+0x238>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01d      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a67      	ldr	r2, [pc, #412]	; (8002a9c <HAL_DMA_Abort+0x23c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d018      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_DMA_Abort+0x240>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a64      	ldr	r2, [pc, #400]	; (8002aa4 <HAL_DMA_Abort+0x244>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00e      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a62      	ldr	r2, [pc, #392]	; (8002aa8 <HAL_DMA_Abort+0x248>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a61      	ldr	r2, [pc, #388]	; (8002aac <HAL_DMA_Abort+0x24c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d004      	beq.n	8002936 <HAL_DMA_Abort+0xd6>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a5f      	ldr	r2, [pc, #380]	; (8002ab0 <HAL_DMA_Abort+0x250>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_DMA_Abort+0xda>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_DMA_Abort+0xdc>
 800293a:	2300      	movs	r3, #0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d013      	beq.n	8002968 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 021e 	bic.w	r2, r2, #30
 800294e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e00a      	b.n	800297e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 020e 	bic.w	r2, r2, #14
 8002976:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a3c      	ldr	r2, [pc, #240]	; (8002a74 <HAL_DMA_Abort+0x214>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d072      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3a      	ldr	r2, [pc, #232]	; (8002a78 <HAL_DMA_Abort+0x218>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d06d      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a39      	ldr	r2, [pc, #228]	; (8002a7c <HAL_DMA_Abort+0x21c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d068      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a37      	ldr	r2, [pc, #220]	; (8002a80 <HAL_DMA_Abort+0x220>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d063      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a36      	ldr	r2, [pc, #216]	; (8002a84 <HAL_DMA_Abort+0x224>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d05e      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a34      	ldr	r2, [pc, #208]	; (8002a88 <HAL_DMA_Abort+0x228>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d059      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a33      	ldr	r2, [pc, #204]	; (8002a8c <HAL_DMA_Abort+0x22c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d054      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a31      	ldr	r2, [pc, #196]	; (8002a90 <HAL_DMA_Abort+0x230>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d04f      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <HAL_DMA_Abort+0x234>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d04a      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2e      	ldr	r2, [pc, #184]	; (8002a98 <HAL_DMA_Abort+0x238>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d045      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a2d      	ldr	r2, [pc, #180]	; (8002a9c <HAL_DMA_Abort+0x23c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d040      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2b      	ldr	r2, [pc, #172]	; (8002aa0 <HAL_DMA_Abort+0x240>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d03b      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <HAL_DMA_Abort+0x244>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d036      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a28      	ldr	r2, [pc, #160]	; (8002aa8 <HAL_DMA_Abort+0x248>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a27      	ldr	r2, [pc, #156]	; (8002aac <HAL_DMA_Abort+0x24c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02c      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a25      	ldr	r2, [pc, #148]	; (8002ab0 <HAL_DMA_Abort+0x250>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d027      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <HAL_DMA_Abort+0x254>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a22      	ldr	r2, [pc, #136]	; (8002ab8 <HAL_DMA_Abort+0x258>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a21      	ldr	r2, [pc, #132]	; (8002abc <HAL_DMA_Abort+0x25c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_DMA_Abort+0x260>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_DMA_Abort+0x264>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <HAL_DMA_Abort+0x268>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <HAL_DMA_Abort+0x26c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_Abort+0x20e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_DMA_Abort+0x270>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d132      	bne.n	8002ad4 <HAL_DMA_Abort+0x274>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e031      	b.n	8002ad6 <HAL_DMA_Abort+0x276>
 8002a72:	bf00      	nop
 8002a74:	40020010 	.word	0x40020010
 8002a78:	40020028 	.word	0x40020028
 8002a7c:	40020040 	.word	0x40020040
 8002a80:	40020058 	.word	0x40020058
 8002a84:	40020070 	.word	0x40020070
 8002a88:	40020088 	.word	0x40020088
 8002a8c:	400200a0 	.word	0x400200a0
 8002a90:	400200b8 	.word	0x400200b8
 8002a94:	40020410 	.word	0x40020410
 8002a98:	40020428 	.word	0x40020428
 8002a9c:	40020440 	.word	0x40020440
 8002aa0:	40020458 	.word	0x40020458
 8002aa4:	40020470 	.word	0x40020470
 8002aa8:	40020488 	.word	0x40020488
 8002aac:	400204a0 	.word	0x400204a0
 8002ab0:	400204b8 	.word	0x400204b8
 8002ab4:	58025408 	.word	0x58025408
 8002ab8:	5802541c 	.word	0x5802541c
 8002abc:	58025430 	.word	0x58025430
 8002ac0:	58025444 	.word	0x58025444
 8002ac4:	58025458 	.word	0x58025458
 8002ac8:	5802546c 	.word	0x5802546c
 8002acc:	58025480 	.word	0x58025480
 8002ad0:	58025494 	.word	0x58025494
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6d      	ldr	r2, [pc, #436]	; (8002ca4 <HAL_DMA_Abort+0x444>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d04a      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6b      	ldr	r2, [pc, #428]	; (8002ca8 <HAL_DMA_Abort+0x448>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d045      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a6a      	ldr	r2, [pc, #424]	; (8002cac <HAL_DMA_Abort+0x44c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d040      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a68      	ldr	r2, [pc, #416]	; (8002cb0 <HAL_DMA_Abort+0x450>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d03b      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a67      	ldr	r2, [pc, #412]	; (8002cb4 <HAL_DMA_Abort+0x454>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d036      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a65      	ldr	r2, [pc, #404]	; (8002cb8 <HAL_DMA_Abort+0x458>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d031      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a64      	ldr	r2, [pc, #400]	; (8002cbc <HAL_DMA_Abort+0x45c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d02c      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a62      	ldr	r2, [pc, #392]	; (8002cc0 <HAL_DMA_Abort+0x460>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d027      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a61      	ldr	r2, [pc, #388]	; (8002cc4 <HAL_DMA_Abort+0x464>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d022      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a5f      	ldr	r2, [pc, #380]	; (8002cc8 <HAL_DMA_Abort+0x468>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01d      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a5e      	ldr	r2, [pc, #376]	; (8002ccc <HAL_DMA_Abort+0x46c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d018      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a5c      	ldr	r2, [pc, #368]	; (8002cd0 <HAL_DMA_Abort+0x470>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a5b      	ldr	r2, [pc, #364]	; (8002cd4 <HAL_DMA_Abort+0x474>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00e      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a59      	ldr	r2, [pc, #356]	; (8002cd8 <HAL_DMA_Abort+0x478>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d009      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a58      	ldr	r2, [pc, #352]	; (8002cdc <HAL_DMA_Abort+0x47c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_DMA_Abort+0x32a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a56      	ldr	r2, [pc, #344]	; (8002ce0 <HAL_DMA_Abort+0x480>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d108      	bne.n	8002b9c <HAL_DMA_Abort+0x33c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e007      	b.n	8002bac <HAL_DMA_Abort+0x34c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002bac:	e013      	b.n	8002bd6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bae:	f7fe fc01 	bl	80013b4 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d90c      	bls.n	8002bd6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e12d      	b.n	8002e32 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1e5      	bne.n	8002bae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <HAL_DMA_Abort+0x444>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04a      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2d      	ldr	r2, [pc, #180]	; (8002ca8 <HAL_DMA_Abort+0x448>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d045      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2c      	ldr	r2, [pc, #176]	; (8002cac <HAL_DMA_Abort+0x44c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d040      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <HAL_DMA_Abort+0x450>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d03b      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <HAL_DMA_Abort+0x454>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d036      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_DMA_Abort+0x458>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d031      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a26      	ldr	r2, [pc, #152]	; (8002cbc <HAL_DMA_Abort+0x45c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d02c      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <HAL_DMA_Abort+0x460>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d027      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a23      	ldr	r2, [pc, #140]	; (8002cc4 <HAL_DMA_Abort+0x464>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a21      	ldr	r2, [pc, #132]	; (8002cc8 <HAL_DMA_Abort+0x468>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01d      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a20      	ldr	r2, [pc, #128]	; (8002ccc <HAL_DMA_Abort+0x46c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d018      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_DMA_Abort+0x470>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_DMA_Abort+0x474>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <HAL_DMA_Abort+0x478>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <HAL_DMA_Abort+0x47c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_DMA_Abort+0x422>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <HAL_DMA_Abort+0x480>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_DMA_Abort+0x426>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_DMA_Abort+0x428>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d02b      	beq.n	8002ce4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	223f      	movs	r2, #63	; 0x3f
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	e02a      	b.n	8002cfa <HAL_DMA_Abort+0x49a>
 8002ca4:	40020010 	.word	0x40020010
 8002ca8:	40020028 	.word	0x40020028
 8002cac:	40020040 	.word	0x40020040
 8002cb0:	40020058 	.word	0x40020058
 8002cb4:	40020070 	.word	0x40020070
 8002cb8:	40020088 	.word	0x40020088
 8002cbc:	400200a0 	.word	0x400200a0
 8002cc0:	400200b8 	.word	0x400200b8
 8002cc4:	40020410 	.word	0x40020410
 8002cc8:	40020428 	.word	0x40020428
 8002ccc:	40020440 	.word	0x40020440
 8002cd0:	40020458 	.word	0x40020458
 8002cd4:	40020470 	.word	0x40020470
 8002cd8:	40020488 	.word	0x40020488
 8002cdc:	400204a0 	.word	0x400204a0
 8002ce0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a4f      	ldr	r2, [pc, #316]	; (8002e3c <HAL_DMA_Abort+0x5dc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d072      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a4d      	ldr	r2, [pc, #308]	; (8002e40 <HAL_DMA_Abort+0x5e0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d06d      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a4c      	ldr	r2, [pc, #304]	; (8002e44 <HAL_DMA_Abort+0x5e4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d068      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a4a      	ldr	r2, [pc, #296]	; (8002e48 <HAL_DMA_Abort+0x5e8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d063      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a49      	ldr	r2, [pc, #292]	; (8002e4c <HAL_DMA_Abort+0x5ec>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d05e      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a47      	ldr	r2, [pc, #284]	; (8002e50 <HAL_DMA_Abort+0x5f0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d059      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a46      	ldr	r2, [pc, #280]	; (8002e54 <HAL_DMA_Abort+0x5f4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d054      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a44      	ldr	r2, [pc, #272]	; (8002e58 <HAL_DMA_Abort+0x5f8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d04f      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a43      	ldr	r2, [pc, #268]	; (8002e5c <HAL_DMA_Abort+0x5fc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d04a      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a41      	ldr	r2, [pc, #260]	; (8002e60 <HAL_DMA_Abort+0x600>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d045      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a40      	ldr	r2, [pc, #256]	; (8002e64 <HAL_DMA_Abort+0x604>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d040      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a3e      	ldr	r2, [pc, #248]	; (8002e68 <HAL_DMA_Abort+0x608>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d03b      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a3d      	ldr	r2, [pc, #244]	; (8002e6c <HAL_DMA_Abort+0x60c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d036      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a3b      	ldr	r2, [pc, #236]	; (8002e70 <HAL_DMA_Abort+0x610>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d031      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a3a      	ldr	r2, [pc, #232]	; (8002e74 <HAL_DMA_Abort+0x614>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d02c      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <HAL_DMA_Abort+0x618>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d027      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <HAL_DMA_Abort+0x61c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d022      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a35      	ldr	r2, [pc, #212]	; (8002e80 <HAL_DMA_Abort+0x620>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01d      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <HAL_DMA_Abort+0x624>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d018      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a32      	ldr	r2, [pc, #200]	; (8002e88 <HAL_DMA_Abort+0x628>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a31      	ldr	r2, [pc, #196]	; (8002e8c <HAL_DMA_Abort+0x62c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00e      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2f      	ldr	r2, [pc, #188]	; (8002e90 <HAL_DMA_Abort+0x630>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d009      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2e      	ldr	r2, [pc, #184]	; (8002e94 <HAL_DMA_Abort+0x634>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_DMA_Abort+0x58a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <HAL_DMA_Abort+0x638>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_DMA_Abort+0x58e>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_DMA_Abort+0x590>
 8002dee:	2300      	movs	r3, #0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002dfc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e14:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e1e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40020010 	.word	0x40020010
 8002e40:	40020028 	.word	0x40020028
 8002e44:	40020040 	.word	0x40020040
 8002e48:	40020058 	.word	0x40020058
 8002e4c:	40020070 	.word	0x40020070
 8002e50:	40020088 	.word	0x40020088
 8002e54:	400200a0 	.word	0x400200a0
 8002e58:	400200b8 	.word	0x400200b8
 8002e5c:	40020410 	.word	0x40020410
 8002e60:	40020428 	.word	0x40020428
 8002e64:	40020440 	.word	0x40020440
 8002e68:	40020458 	.word	0x40020458
 8002e6c:	40020470 	.word	0x40020470
 8002e70:	40020488 	.word	0x40020488
 8002e74:	400204a0 	.word	0x400204a0
 8002e78:	400204b8 	.word	0x400204b8
 8002e7c:	58025408 	.word	0x58025408
 8002e80:	5802541c 	.word	0x5802541c
 8002e84:	58025430 	.word	0x58025430
 8002e88:	58025444 	.word	0x58025444
 8002e8c:	58025458 	.word	0x58025458
 8002e90:	5802546c 	.word	0x5802546c
 8002e94:	58025480 	.word	0x58025480
 8002e98:	58025494 	.word	0x58025494

08002e9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e237      	b.n	800331e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2280      	movs	r2, #128	; 0x80
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e22c      	b.n	800331e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5c      	ldr	r2, [pc, #368]	; (800303c <HAL_DMA_Abort_IT+0x1a0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04a      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	; (8003040 <HAL_DMA_Abort_IT+0x1a4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d045      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a59      	ldr	r2, [pc, #356]	; (8003044 <HAL_DMA_Abort_IT+0x1a8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d040      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a58      	ldr	r2, [pc, #352]	; (8003048 <HAL_DMA_Abort_IT+0x1ac>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d03b      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a56      	ldr	r2, [pc, #344]	; (800304c <HAL_DMA_Abort_IT+0x1b0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d036      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_DMA_Abort_IT+0x1b4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d031      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a53      	ldr	r2, [pc, #332]	; (8003054 <HAL_DMA_Abort_IT+0x1b8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02c      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a52      	ldr	r2, [pc, #328]	; (8003058 <HAL_DMA_Abort_IT+0x1bc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d027      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a50      	ldr	r2, [pc, #320]	; (800305c <HAL_DMA_Abort_IT+0x1c0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d022      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_DMA_Abort_IT+0x1c4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4d      	ldr	r2, [pc, #308]	; (8003064 <HAL_DMA_Abort_IT+0x1c8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d018      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4c      	ldr	r2, [pc, #304]	; (8003068 <HAL_DMA_Abort_IT+0x1cc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a4a      	ldr	r2, [pc, #296]	; (800306c <HAL_DMA_Abort_IT+0x1d0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a49      	ldr	r2, [pc, #292]	; (8003070 <HAL_DMA_Abort_IT+0x1d4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a47      	ldr	r2, [pc, #284]	; (8003074 <HAL_DMA_Abort_IT+0x1d8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_DMA_Abort_IT+0xc8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a46      	ldr	r2, [pc, #280]	; (8003078 <HAL_DMA_Abort_IT+0x1dc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_DMA_Abort_IT+0xcc>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <HAL_DMA_Abort_IT+0xce>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8086 	beq.w	800307c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2204      	movs	r2, #4
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a2f      	ldr	r2, [pc, #188]	; (800303c <HAL_DMA_Abort_IT+0x1a0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d04a      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2e      	ldr	r2, [pc, #184]	; (8003040 <HAL_DMA_Abort_IT+0x1a4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d045      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2c      	ldr	r2, [pc, #176]	; (8003044 <HAL_DMA_Abort_IT+0x1a8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d040      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2b      	ldr	r2, [pc, #172]	; (8003048 <HAL_DMA_Abort_IT+0x1ac>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d03b      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a29      	ldr	r2, [pc, #164]	; (800304c <HAL_DMA_Abort_IT+0x1b0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d036      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a28      	ldr	r2, [pc, #160]	; (8003050 <HAL_DMA_Abort_IT+0x1b4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d031      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a26      	ldr	r2, [pc, #152]	; (8003054 <HAL_DMA_Abort_IT+0x1b8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d02c      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a25      	ldr	r2, [pc, #148]	; (8003058 <HAL_DMA_Abort_IT+0x1bc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d027      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a23      	ldr	r2, [pc, #140]	; (800305c <HAL_DMA_Abort_IT+0x1c0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d022      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a22      	ldr	r2, [pc, #136]	; (8003060 <HAL_DMA_Abort_IT+0x1c4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d01d      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a20      	ldr	r2, [pc, #128]	; (8003064 <HAL_DMA_Abort_IT+0x1c8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d018      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <HAL_DMA_Abort_IT+0x1cc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_DMA_Abort_IT+0x1d0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00e      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <HAL_DMA_Abort_IT+0x1d4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1a      	ldr	r2, [pc, #104]	; (8003074 <HAL_DMA_Abort_IT+0x1d8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_DMA_Abort_IT+0x17c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_DMA_Abort_IT+0x1dc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <HAL_DMA_Abort_IT+0x18e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e178      	b.n	800331c <HAL_DMA_Abort_IT+0x480>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e16f      	b.n	800331c <HAL_DMA_Abort_IT+0x480>
 800303c:	40020010 	.word	0x40020010
 8003040:	40020028 	.word	0x40020028
 8003044:	40020040 	.word	0x40020040
 8003048:	40020058 	.word	0x40020058
 800304c:	40020070 	.word	0x40020070
 8003050:	40020088 	.word	0x40020088
 8003054:	400200a0 	.word	0x400200a0
 8003058:	400200b8 	.word	0x400200b8
 800305c:	40020410 	.word	0x40020410
 8003060:	40020428 	.word	0x40020428
 8003064:	40020440 	.word	0x40020440
 8003068:	40020458 	.word	0x40020458
 800306c:	40020470 	.word	0x40020470
 8003070:	40020488 	.word	0x40020488
 8003074:	400204a0 	.word	0x400204a0
 8003078:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 020e 	bic.w	r2, r2, #14
 800308a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6c      	ldr	r2, [pc, #432]	; (8003244 <HAL_DMA_Abort_IT+0x3a8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d04a      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6b      	ldr	r2, [pc, #428]	; (8003248 <HAL_DMA_Abort_IT+0x3ac>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d045      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a69      	ldr	r2, [pc, #420]	; (800324c <HAL_DMA_Abort_IT+0x3b0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d040      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a68      	ldr	r2, [pc, #416]	; (8003250 <HAL_DMA_Abort_IT+0x3b4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d03b      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a66      	ldr	r2, [pc, #408]	; (8003254 <HAL_DMA_Abort_IT+0x3b8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d036      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a65      	ldr	r2, [pc, #404]	; (8003258 <HAL_DMA_Abort_IT+0x3bc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d031      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a63      	ldr	r2, [pc, #396]	; (800325c <HAL_DMA_Abort_IT+0x3c0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d02c      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a62      	ldr	r2, [pc, #392]	; (8003260 <HAL_DMA_Abort_IT+0x3c4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d027      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a60      	ldr	r2, [pc, #384]	; (8003264 <HAL_DMA_Abort_IT+0x3c8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d022      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a5f      	ldr	r2, [pc, #380]	; (8003268 <HAL_DMA_Abort_IT+0x3cc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d01d      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5d      	ldr	r2, [pc, #372]	; (800326c <HAL_DMA_Abort_IT+0x3d0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d018      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5c      	ldr	r2, [pc, #368]	; (8003270 <HAL_DMA_Abort_IT+0x3d4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d013      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a5a      	ldr	r2, [pc, #360]	; (8003274 <HAL_DMA_Abort_IT+0x3d8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00e      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a59      	ldr	r2, [pc, #356]	; (8003278 <HAL_DMA_Abort_IT+0x3dc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a57      	ldr	r2, [pc, #348]	; (800327c <HAL_DMA_Abort_IT+0x3e0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <HAL_DMA_Abort_IT+0x290>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a56      	ldr	r2, [pc, #344]	; (8003280 <HAL_DMA_Abort_IT+0x3e4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d108      	bne.n	800313e <HAL_DMA_Abort_IT+0x2a2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e007      	b.n	800314e <HAL_DMA_Abort_IT+0x2b2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3c      	ldr	r2, [pc, #240]	; (8003244 <HAL_DMA_Abort_IT+0x3a8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d072      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3a      	ldr	r2, [pc, #232]	; (8003248 <HAL_DMA_Abort_IT+0x3ac>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d06d      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a39      	ldr	r2, [pc, #228]	; (800324c <HAL_DMA_Abort_IT+0x3b0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d068      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a37      	ldr	r2, [pc, #220]	; (8003250 <HAL_DMA_Abort_IT+0x3b4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d063      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a36      	ldr	r2, [pc, #216]	; (8003254 <HAL_DMA_Abort_IT+0x3b8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d05e      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a34      	ldr	r2, [pc, #208]	; (8003258 <HAL_DMA_Abort_IT+0x3bc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d059      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a33      	ldr	r2, [pc, #204]	; (800325c <HAL_DMA_Abort_IT+0x3c0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d054      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a31      	ldr	r2, [pc, #196]	; (8003260 <HAL_DMA_Abort_IT+0x3c4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d04f      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a30      	ldr	r2, [pc, #192]	; (8003264 <HAL_DMA_Abort_IT+0x3c8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04a      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2e      	ldr	r2, [pc, #184]	; (8003268 <HAL_DMA_Abort_IT+0x3cc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d045      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2d      	ldr	r2, [pc, #180]	; (800326c <HAL_DMA_Abort_IT+0x3d0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <HAL_DMA_Abort_IT+0x3d4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d03b      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <HAL_DMA_Abort_IT+0x3d8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d036      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a28      	ldr	r2, [pc, #160]	; (8003278 <HAL_DMA_Abort_IT+0x3dc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a27      	ldr	r2, [pc, #156]	; (800327c <HAL_DMA_Abort_IT+0x3e0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02c      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a25      	ldr	r2, [pc, #148]	; (8003280 <HAL_DMA_Abort_IT+0x3e4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d027      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a24      	ldr	r2, [pc, #144]	; (8003284 <HAL_DMA_Abort_IT+0x3e8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a22      	ldr	r2, [pc, #136]	; (8003288 <HAL_DMA_Abort_IT+0x3ec>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <HAL_DMA_Abort_IT+0x3f0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_DMA_Abort_IT+0x3f4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <HAL_DMA_Abort_IT+0x3f8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_DMA_Abort_IT+0x3fc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_DMA_Abort_IT+0x400>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_DMA_Abort_IT+0x3a2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <HAL_DMA_Abort_IT+0x404>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d132      	bne.n	80032a4 <HAL_DMA_Abort_IT+0x408>
 800323e:	2301      	movs	r3, #1
 8003240:	e031      	b.n	80032a6 <HAL_DMA_Abort_IT+0x40a>
 8003242:	bf00      	nop
 8003244:	40020010 	.word	0x40020010
 8003248:	40020028 	.word	0x40020028
 800324c:	40020040 	.word	0x40020040
 8003250:	40020058 	.word	0x40020058
 8003254:	40020070 	.word	0x40020070
 8003258:	40020088 	.word	0x40020088
 800325c:	400200a0 	.word	0x400200a0
 8003260:	400200b8 	.word	0x400200b8
 8003264:	40020410 	.word	0x40020410
 8003268:	40020428 	.word	0x40020428
 800326c:	40020440 	.word	0x40020440
 8003270:	40020458 	.word	0x40020458
 8003274:	40020470 	.word	0x40020470
 8003278:	40020488 	.word	0x40020488
 800327c:	400204a0 	.word	0x400204a0
 8003280:	400204b8 	.word	0x400204b8
 8003284:	58025408 	.word	0x58025408
 8003288:	5802541c 	.word	0x5802541c
 800328c:	58025430 	.word	0x58025430
 8003290:	58025444 	.word	0x58025444
 8003294:	58025458 	.word	0x58025458
 8003298:	5802546c 	.word	0x5802546c
 800329c:	58025480 	.word	0x58025480
 80032a0:	58025494 	.word	0x58025494
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d028      	beq.n	80032fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2201      	movs	r2, #1
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00c      	beq.n	80032fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop

08003328 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003334:	4b67      	ldr	r3, [pc, #412]	; (80034d4 <HAL_DMA_IRQHandler+0x1ac>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <HAL_DMA_IRQHandler+0x1b0>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a9b      	lsrs	r3, r3, #10
 8003340:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a5f      	ldr	r2, [pc, #380]	; (80034dc <HAL_DMA_IRQHandler+0x1b4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d04a      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a5d      	ldr	r2, [pc, #372]	; (80034e0 <HAL_DMA_IRQHandler+0x1b8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d045      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5c      	ldr	r2, [pc, #368]	; (80034e4 <HAL_DMA_IRQHandler+0x1bc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d040      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5a      	ldr	r2, [pc, #360]	; (80034e8 <HAL_DMA_IRQHandler+0x1c0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d03b      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a59      	ldr	r2, [pc, #356]	; (80034ec <HAL_DMA_IRQHandler+0x1c4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d036      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a57      	ldr	r2, [pc, #348]	; (80034f0 <HAL_DMA_IRQHandler+0x1c8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d031      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a56      	ldr	r2, [pc, #344]	; (80034f4 <HAL_DMA_IRQHandler+0x1cc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d02c      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a54      	ldr	r2, [pc, #336]	; (80034f8 <HAL_DMA_IRQHandler+0x1d0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d027      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a53      	ldr	r2, [pc, #332]	; (80034fc <HAL_DMA_IRQHandler+0x1d4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a51      	ldr	r2, [pc, #324]	; (8003500 <HAL_DMA_IRQHandler+0x1d8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01d      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a50      	ldr	r2, [pc, #320]	; (8003504 <HAL_DMA_IRQHandler+0x1dc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d018      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a4e      	ldr	r2, [pc, #312]	; (8003508 <HAL_DMA_IRQHandler+0x1e0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a4d      	ldr	r2, [pc, #308]	; (800350c <HAL_DMA_IRQHandler+0x1e4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00e      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a4b      	ldr	r2, [pc, #300]	; (8003510 <HAL_DMA_IRQHandler+0x1e8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a4a      	ldr	r2, [pc, #296]	; (8003514 <HAL_DMA_IRQHandler+0x1ec>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_DMA_IRQHandler+0xd2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a48      	ldr	r2, [pc, #288]	; (8003518 <HAL_DMA_IRQHandler+0x1f0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_DMA_IRQHandler+0xd6>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_DMA_IRQHandler+0xd8>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 842b 	beq.w	8003c5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	2208      	movs	r2, #8
 8003410:	409a      	lsls	r2, r3
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80a2 	beq.w	8003560 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a2e      	ldr	r2, [pc, #184]	; (80034dc <HAL_DMA_IRQHandler+0x1b4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d04a      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a2d      	ldr	r2, [pc, #180]	; (80034e0 <HAL_DMA_IRQHandler+0x1b8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d045      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a2b      	ldr	r2, [pc, #172]	; (80034e4 <HAL_DMA_IRQHandler+0x1bc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d040      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <HAL_DMA_IRQHandler+0x1c0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d03b      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a28      	ldr	r2, [pc, #160]	; (80034ec <HAL_DMA_IRQHandler+0x1c4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d036      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a27      	ldr	r2, [pc, #156]	; (80034f0 <HAL_DMA_IRQHandler+0x1c8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d031      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a25      	ldr	r2, [pc, #148]	; (80034f4 <HAL_DMA_IRQHandler+0x1cc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d02c      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a24      	ldr	r2, [pc, #144]	; (80034f8 <HAL_DMA_IRQHandler+0x1d0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d027      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a22      	ldr	r2, [pc, #136]	; (80034fc <HAL_DMA_IRQHandler+0x1d4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d022      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a21      	ldr	r2, [pc, #132]	; (8003500 <HAL_DMA_IRQHandler+0x1d8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d01d      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <HAL_DMA_IRQHandler+0x1dc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d018      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <HAL_DMA_IRQHandler+0x1e0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d013      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1c      	ldr	r2, [pc, #112]	; (800350c <HAL_DMA_IRQHandler+0x1e4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00e      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <HAL_DMA_IRQHandler+0x1e8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d009      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a19      	ldr	r2, [pc, #100]	; (8003514 <HAL_DMA_IRQHandler+0x1ec>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d004      	beq.n	80034bc <HAL_DMA_IRQHandler+0x194>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_DMA_IRQHandler+0x1f0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d12f      	bne.n	800351c <HAL_DMA_IRQHandler+0x1f4>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e02e      	b.n	8003530 <HAL_DMA_IRQHandler+0x208>
 80034d2:	bf00      	nop
 80034d4:	24000000 	.word	0x24000000
 80034d8:	1b4e81b5 	.word	0x1b4e81b5
 80034dc:	40020010 	.word	0x40020010
 80034e0:	40020028 	.word	0x40020028
 80034e4:	40020040 	.word	0x40020040
 80034e8:	40020058 	.word	0x40020058
 80034ec:	40020070 	.word	0x40020070
 80034f0:	40020088 	.word	0x40020088
 80034f4:	400200a0 	.word	0x400200a0
 80034f8:	400200b8 	.word	0x400200b8
 80034fc:	40020410 	.word	0x40020410
 8003500:	40020428 	.word	0x40020428
 8003504:	40020440 	.word	0x40020440
 8003508:	40020458 	.word	0x40020458
 800350c:	40020470 	.word	0x40020470
 8003510:	40020488 	.word	0x40020488
 8003514:	400204a0 	.word	0x400204a0
 8003518:	400204b8 	.word	0x400204b8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf14      	ite	ne
 800352a:	2301      	movne	r3, #1
 800352c:	2300      	moveq	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d015      	beq.n	8003560 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0204 	bic.w	r2, r2, #4
 8003542:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2208      	movs	r2, #8
 800354e:	409a      	lsls	r2, r3
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d06e      	beq.n	8003654 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a69      	ldr	r2, [pc, #420]	; (8003720 <HAL_DMA_IRQHandler+0x3f8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d04a      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a67      	ldr	r2, [pc, #412]	; (8003724 <HAL_DMA_IRQHandler+0x3fc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d045      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a66      	ldr	r2, [pc, #408]	; (8003728 <HAL_DMA_IRQHandler+0x400>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d040      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a64      	ldr	r2, [pc, #400]	; (800372c <HAL_DMA_IRQHandler+0x404>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d03b      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a63      	ldr	r2, [pc, #396]	; (8003730 <HAL_DMA_IRQHandler+0x408>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d036      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a61      	ldr	r2, [pc, #388]	; (8003734 <HAL_DMA_IRQHandler+0x40c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d031      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a60      	ldr	r2, [pc, #384]	; (8003738 <HAL_DMA_IRQHandler+0x410>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d02c      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a5e      	ldr	r2, [pc, #376]	; (800373c <HAL_DMA_IRQHandler+0x414>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d027      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5d      	ldr	r2, [pc, #372]	; (8003740 <HAL_DMA_IRQHandler+0x418>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d022      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a5b      	ldr	r2, [pc, #364]	; (8003744 <HAL_DMA_IRQHandler+0x41c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01d      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a5a      	ldr	r2, [pc, #360]	; (8003748 <HAL_DMA_IRQHandler+0x420>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d018      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a58      	ldr	r2, [pc, #352]	; (800374c <HAL_DMA_IRQHandler+0x424>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a57      	ldr	r2, [pc, #348]	; (8003750 <HAL_DMA_IRQHandler+0x428>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a55      	ldr	r2, [pc, #340]	; (8003754 <HAL_DMA_IRQHandler+0x42c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a54      	ldr	r2, [pc, #336]	; (8003758 <HAL_DMA_IRQHandler+0x430>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2ee>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a52      	ldr	r2, [pc, #328]	; (800375c <HAL_DMA_IRQHandler+0x434>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10a      	bne.n	800362c <HAL_DMA_IRQHandler+0x304>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e003      	b.n	8003634 <HAL_DMA_IRQHandler+0x30c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00d      	beq.n	8003654 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	2201      	movs	r2, #1
 8003642:	409a      	lsls	r2, r3
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f043 0202 	orr.w	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2204      	movs	r2, #4
 800365e:	409a      	lsls	r2, r3
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 808f 	beq.w	8003788 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2c      	ldr	r2, [pc, #176]	; (8003720 <HAL_DMA_IRQHandler+0x3f8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04a      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a2a      	ldr	r2, [pc, #168]	; (8003724 <HAL_DMA_IRQHandler+0x3fc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d045      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a29      	ldr	r2, [pc, #164]	; (8003728 <HAL_DMA_IRQHandler+0x400>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d040      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a27      	ldr	r2, [pc, #156]	; (800372c <HAL_DMA_IRQHandler+0x404>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d03b      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a26      	ldr	r2, [pc, #152]	; (8003730 <HAL_DMA_IRQHandler+0x408>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d036      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a24      	ldr	r2, [pc, #144]	; (8003734 <HAL_DMA_IRQHandler+0x40c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d031      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a23      	ldr	r2, [pc, #140]	; (8003738 <HAL_DMA_IRQHandler+0x410>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02c      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a21      	ldr	r2, [pc, #132]	; (800373c <HAL_DMA_IRQHandler+0x414>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d027      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a20      	ldr	r2, [pc, #128]	; (8003740 <HAL_DMA_IRQHandler+0x418>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <HAL_DMA_IRQHandler+0x41c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01d      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_DMA_IRQHandler+0x420>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1b      	ldr	r2, [pc, #108]	; (800374c <HAL_DMA_IRQHandler+0x424>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_DMA_IRQHandler+0x428>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_DMA_IRQHandler+0x42c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_DMA_IRQHandler+0x430>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_DMA_IRQHandler+0x3e2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a15      	ldr	r2, [pc, #84]	; (800375c <HAL_DMA_IRQHandler+0x434>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d12a      	bne.n	8003760 <HAL_DMA_IRQHandler+0x438>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e023      	b.n	8003768 <HAL_DMA_IRQHandler+0x440>
 8003720:	40020010 	.word	0x40020010
 8003724:	40020028 	.word	0x40020028
 8003728:	40020040 	.word	0x40020040
 800372c:	40020058 	.word	0x40020058
 8003730:	40020070 	.word	0x40020070
 8003734:	40020088 	.word	0x40020088
 8003738:	400200a0 	.word	0x400200a0
 800373c:	400200b8 	.word	0x400200b8
 8003740:	40020410 	.word	0x40020410
 8003744:	40020428 	.word	0x40020428
 8003748:	40020440 	.word	0x40020440
 800374c:	40020458 	.word	0x40020458
 8003750:	40020470 	.word	0x40020470
 8003754:	40020488 	.word	0x40020488
 8003758:	400204a0 	.word	0x400204a0
 800375c:	400204b8 	.word	0x400204b8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2204      	movs	r2, #4
 8003776:	409a      	lsls	r2, r3
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f043 0204 	orr.w	r2, r3, #4
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	2210      	movs	r2, #16
 8003792:	409a      	lsls	r2, r3
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a6 	beq.w	80038ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a85      	ldr	r2, [pc, #532]	; (80039b8 <HAL_DMA_IRQHandler+0x690>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d04a      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a83      	ldr	r2, [pc, #524]	; (80039bc <HAL_DMA_IRQHandler+0x694>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d045      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a82      	ldr	r2, [pc, #520]	; (80039c0 <HAL_DMA_IRQHandler+0x698>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d040      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a80      	ldr	r2, [pc, #512]	; (80039c4 <HAL_DMA_IRQHandler+0x69c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d03b      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a7f      	ldr	r2, [pc, #508]	; (80039c8 <HAL_DMA_IRQHandler+0x6a0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d036      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7d      	ldr	r2, [pc, #500]	; (80039cc <HAL_DMA_IRQHandler+0x6a4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d031      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7c      	ldr	r2, [pc, #496]	; (80039d0 <HAL_DMA_IRQHandler+0x6a8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d02c      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a7a      	ldr	r2, [pc, #488]	; (80039d4 <HAL_DMA_IRQHandler+0x6ac>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d027      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a79      	ldr	r2, [pc, #484]	; (80039d8 <HAL_DMA_IRQHandler+0x6b0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d022      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a77      	ldr	r2, [pc, #476]	; (80039dc <HAL_DMA_IRQHandler+0x6b4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01d      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a76      	ldr	r2, [pc, #472]	; (80039e0 <HAL_DMA_IRQHandler+0x6b8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d018      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a74      	ldr	r2, [pc, #464]	; (80039e4 <HAL_DMA_IRQHandler+0x6bc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a73      	ldr	r2, [pc, #460]	; (80039e8 <HAL_DMA_IRQHandler+0x6c0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00e      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a71      	ldr	r2, [pc, #452]	; (80039ec <HAL_DMA_IRQHandler+0x6c4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d009      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a70      	ldr	r2, [pc, #448]	; (80039f0 <HAL_DMA_IRQHandler+0x6c8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_DMA_IRQHandler+0x516>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6e      	ldr	r2, [pc, #440]	; (80039f4 <HAL_DMA_IRQHandler+0x6cc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10a      	bne.n	8003854 <HAL_DMA_IRQHandler+0x52c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e009      	b.n	8003868 <HAL_DMA_IRQHandler+0x540>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf14      	ite	ne
 8003862:	2301      	movne	r3, #1
 8003864:	2300      	moveq	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d03e      	beq.n	80038ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2210      	movs	r2, #16
 8003876:	409a      	lsls	r2, r3
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d018      	beq.n	80038bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d108      	bne.n	80038aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d024      	beq.n	80038ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	e01f      	b.n	80038ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01b      	beq.n	80038ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
 80038ba:	e016      	b.n	80038ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d107      	bne.n	80038da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0208 	bic.w	r2, r2, #8
 80038d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	2220      	movs	r2, #32
 80038f4:	409a      	lsls	r2, r3
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8110 	beq.w	8003b20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2c      	ldr	r2, [pc, #176]	; (80039b8 <HAL_DMA_IRQHandler+0x690>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d04a      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2b      	ldr	r2, [pc, #172]	; (80039bc <HAL_DMA_IRQHandler+0x694>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d045      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a29      	ldr	r2, [pc, #164]	; (80039c0 <HAL_DMA_IRQHandler+0x698>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d040      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a28      	ldr	r2, [pc, #160]	; (80039c4 <HAL_DMA_IRQHandler+0x69c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d03b      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a26      	ldr	r2, [pc, #152]	; (80039c8 <HAL_DMA_IRQHandler+0x6a0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d036      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a25      	ldr	r2, [pc, #148]	; (80039cc <HAL_DMA_IRQHandler+0x6a4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d031      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <HAL_DMA_IRQHandler+0x6a8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d02c      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a22      	ldr	r2, [pc, #136]	; (80039d4 <HAL_DMA_IRQHandler+0x6ac>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d027      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <HAL_DMA_IRQHandler+0x6b0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d022      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <HAL_DMA_IRQHandler+0x6b4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d01d      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_DMA_IRQHandler+0x6b8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d018      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <HAL_DMA_IRQHandler+0x6bc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_DMA_IRQHandler+0x6c0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a19      	ldr	r2, [pc, #100]	; (80039ec <HAL_DMA_IRQHandler+0x6c4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <HAL_DMA_IRQHandler+0x6c8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x678>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <HAL_DMA_IRQHandler+0x6cc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d12b      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x6d0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	bf14      	ite	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	2300      	moveq	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	e02a      	b.n	8003a0c <HAL_DMA_IRQHandler+0x6e4>
 80039b6:	bf00      	nop
 80039b8:	40020010 	.word	0x40020010
 80039bc:	40020028 	.word	0x40020028
 80039c0:	40020040 	.word	0x40020040
 80039c4:	40020058 	.word	0x40020058
 80039c8:	40020070 	.word	0x40020070
 80039cc:	40020088 	.word	0x40020088
 80039d0:	400200a0 	.word	0x400200a0
 80039d4:	400200b8 	.word	0x400200b8
 80039d8:	40020410 	.word	0x40020410
 80039dc:	40020428 	.word	0x40020428
 80039e0:	40020440 	.word	0x40020440
 80039e4:	40020458 	.word	0x40020458
 80039e8:	40020470 	.word	0x40020470
 80039ec:	40020488 	.word	0x40020488
 80039f0:	400204a0 	.word	0x400204a0
 80039f4:	400204b8 	.word	0x400204b8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8087 	beq.w	8003b20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d139      	bne.n	8003aa2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0216 	bic.w	r2, r2, #22
 8003a3c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a4c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x736>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0208 	bic.w	r2, r2, #8
 8003a6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	223f      	movs	r2, #63	; 0x3f
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 834a 	beq.w	800412c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
          }
          return;
 8003aa0:	e344      	b.n	800412c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d02c      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4798      	blx	r3
 8003ace:	e027      	b.n	8003b20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d023      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
 8003ae0:	e01e      	b.n	8003b20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10f      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0210 	bic.w	r2, r2, #16
 8003afe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8306 	beq.w	8004136 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8088 	beq.w	8003c48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7a      	ldr	r2, [pc, #488]	; (8003d30 <HAL_DMA_IRQHandler+0xa08>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d04a      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a79      	ldr	r2, [pc, #484]	; (8003d34 <HAL_DMA_IRQHandler+0xa0c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d045      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a77      	ldr	r2, [pc, #476]	; (8003d38 <HAL_DMA_IRQHandler+0xa10>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d040      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a76      	ldr	r2, [pc, #472]	; (8003d3c <HAL_DMA_IRQHandler+0xa14>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d03b      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a74      	ldr	r2, [pc, #464]	; (8003d40 <HAL_DMA_IRQHandler+0xa18>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d036      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a73      	ldr	r2, [pc, #460]	; (8003d44 <HAL_DMA_IRQHandler+0xa1c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d031      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a71      	ldr	r2, [pc, #452]	; (8003d48 <HAL_DMA_IRQHandler+0xa20>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d02c      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a70      	ldr	r2, [pc, #448]	; (8003d4c <HAL_DMA_IRQHandler+0xa24>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d027      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a6e      	ldr	r2, [pc, #440]	; (8003d50 <HAL_DMA_IRQHandler+0xa28>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d022      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6d      	ldr	r2, [pc, #436]	; (8003d54 <HAL_DMA_IRQHandler+0xa2c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d01d      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6b      	ldr	r2, [pc, #428]	; (8003d58 <HAL_DMA_IRQHandler+0xa30>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d018      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6a      	ldr	r2, [pc, #424]	; (8003d5c <HAL_DMA_IRQHandler+0xa34>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a68      	ldr	r2, [pc, #416]	; (8003d60 <HAL_DMA_IRQHandler+0xa38>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a67      	ldr	r2, [pc, #412]	; (8003d64 <HAL_DMA_IRQHandler+0xa3c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a65      	ldr	r2, [pc, #404]	; (8003d68 <HAL_DMA_IRQHandler+0xa40>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x8b8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a64      	ldr	r2, [pc, #400]	; (8003d6c <HAL_DMA_IRQHandler+0xa44>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d108      	bne.n	8003bf2 <HAL_DMA_IRQHandler+0x8ca>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e007      	b.n	8003c02 <HAL_DMA_IRQHandler+0x8da>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d307      	bcc.n	8003c1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f2      	bne.n	8003c02 <HAL_DMA_IRQHandler+0x8da>
 8003c1c:	e000      	b.n	8003c20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c1e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2203      	movs	r2, #3
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003c36:	e003      	b.n	8003c40 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8272 	beq.w	8004136 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
 8003c5a:	e26c      	b.n	8004136 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a43      	ldr	r2, [pc, #268]	; (8003d70 <HAL_DMA_IRQHandler+0xa48>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d022      	beq.n	8003cac <HAL_DMA_IRQHandler+0x984>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a42      	ldr	r2, [pc, #264]	; (8003d74 <HAL_DMA_IRQHandler+0xa4c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d01d      	beq.n	8003cac <HAL_DMA_IRQHandler+0x984>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a40      	ldr	r2, [pc, #256]	; (8003d78 <HAL_DMA_IRQHandler+0xa50>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d018      	beq.n	8003cac <HAL_DMA_IRQHandler+0x984>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <HAL_DMA_IRQHandler+0xa54>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <HAL_DMA_IRQHandler+0x984>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a3d      	ldr	r2, [pc, #244]	; (8003d80 <HAL_DMA_IRQHandler+0xa58>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_DMA_IRQHandler+0x984>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a3c      	ldr	r2, [pc, #240]	; (8003d84 <HAL_DMA_IRQHandler+0xa5c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_DMA_IRQHandler+0x984>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a3a      	ldr	r2, [pc, #232]	; (8003d88 <HAL_DMA_IRQHandler+0xa60>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_DMA_IRQHandler+0x984>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a39      	ldr	r2, [pc, #228]	; (8003d8c <HAL_DMA_IRQHandler+0xa64>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x988>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x98a>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 823f 	beq.w	8004136 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2204      	movs	r2, #4
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80cd 	beq.w	8003e70 <HAL_DMA_IRQHandler+0xb48>
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80c7 	beq.w	8003e70 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2204      	movs	r2, #4
 8003cec:	409a      	lsls	r2, r3
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d049      	beq.n	8003d90 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8210 	beq.w	8004130 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d18:	e20a      	b.n	8004130 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8206 	beq.w	8004130 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d2c:	e200      	b.n	8004130 <HAL_DMA_IRQHandler+0xe08>
 8003d2e:	bf00      	nop
 8003d30:	40020010 	.word	0x40020010
 8003d34:	40020028 	.word	0x40020028
 8003d38:	40020040 	.word	0x40020040
 8003d3c:	40020058 	.word	0x40020058
 8003d40:	40020070 	.word	0x40020070
 8003d44:	40020088 	.word	0x40020088
 8003d48:	400200a0 	.word	0x400200a0
 8003d4c:	400200b8 	.word	0x400200b8
 8003d50:	40020410 	.word	0x40020410
 8003d54:	40020428 	.word	0x40020428
 8003d58:	40020440 	.word	0x40020440
 8003d5c:	40020458 	.word	0x40020458
 8003d60:	40020470 	.word	0x40020470
 8003d64:	40020488 	.word	0x40020488
 8003d68:	400204a0 	.word	0x400204a0
 8003d6c:	400204b8 	.word	0x400204b8
 8003d70:	58025408 	.word	0x58025408
 8003d74:	5802541c 	.word	0x5802541c
 8003d78:	58025430 	.word	0x58025430
 8003d7c:	58025444 	.word	0x58025444
 8003d80:	58025458 	.word	0x58025458
 8003d84:	5802546c 	.word	0x5802546c
 8003d88:	58025480 	.word	0x58025480
 8003d8c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d160      	bne.n	8003e5c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a7f      	ldr	r2, [pc, #508]	; (8003f9c <HAL_DMA_IRQHandler+0xc74>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d04a      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a7d      	ldr	r2, [pc, #500]	; (8003fa0 <HAL_DMA_IRQHandler+0xc78>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d045      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7c      	ldr	r2, [pc, #496]	; (8003fa4 <HAL_DMA_IRQHandler+0xc7c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d040      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a7a      	ldr	r2, [pc, #488]	; (8003fa8 <HAL_DMA_IRQHandler+0xc80>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d03b      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a79      	ldr	r2, [pc, #484]	; (8003fac <HAL_DMA_IRQHandler+0xc84>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d036      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a77      	ldr	r2, [pc, #476]	; (8003fb0 <HAL_DMA_IRQHandler+0xc88>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d031      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a76      	ldr	r2, [pc, #472]	; (8003fb4 <HAL_DMA_IRQHandler+0xc8c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d02c      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a74      	ldr	r2, [pc, #464]	; (8003fb8 <HAL_DMA_IRQHandler+0xc90>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d027      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a73      	ldr	r2, [pc, #460]	; (8003fbc <HAL_DMA_IRQHandler+0xc94>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d022      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a71      	ldr	r2, [pc, #452]	; (8003fc0 <HAL_DMA_IRQHandler+0xc98>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01d      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a70      	ldr	r2, [pc, #448]	; (8003fc4 <HAL_DMA_IRQHandler+0xc9c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d018      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6e      	ldr	r2, [pc, #440]	; (8003fc8 <HAL_DMA_IRQHandler+0xca0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a6d      	ldr	r2, [pc, #436]	; (8003fcc <HAL_DMA_IRQHandler+0xca4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a6b      	ldr	r2, [pc, #428]	; (8003fd0 <HAL_DMA_IRQHandler+0xca8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6a      	ldr	r2, [pc, #424]	; (8003fd4 <HAL_DMA_IRQHandler+0xcac>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xb12>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a68      	ldr	r2, [pc, #416]	; (8003fd8 <HAL_DMA_IRQHandler+0xcb0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <HAL_DMA_IRQHandler+0xb24>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0208 	bic.w	r2, r2, #8
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e007      	b.n	8003e5c <HAL_DMA_IRQHandler+0xb34>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0204 	bic.w	r2, r2, #4
 8003e5a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8165 	beq.w	8004130 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e6e:	e15f      	b.n	8004130 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2202      	movs	r2, #2
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80c5 	beq.w	8004010 <HAL_DMA_IRQHandler+0xce8>
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80bf 	beq.w	8004010 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d018      	beq.n	8003ede <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 813a 	beq.w	8004134 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec8:	e134      	b.n	8004134 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8130 	beq.w	8004134 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003edc:	e12a      	b.n	8004134 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f040 8089 	bne.w	8003ffc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <HAL_DMA_IRQHandler+0xc74>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d04a      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <HAL_DMA_IRQHandler+0xc78>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d045      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a28      	ldr	r2, [pc, #160]	; (8003fa4 <HAL_DMA_IRQHandler+0xc7c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d040      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <HAL_DMA_IRQHandler+0xc80>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d03b      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a25      	ldr	r2, [pc, #148]	; (8003fac <HAL_DMA_IRQHandler+0xc84>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d036      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <HAL_DMA_IRQHandler+0xc88>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d031      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <HAL_DMA_IRQHandler+0xc8c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d02c      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <HAL_DMA_IRQHandler+0xc90>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d027      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <HAL_DMA_IRQHandler+0xc94>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d022      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_DMA_IRQHandler+0xc98>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01d      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_DMA_IRQHandler+0xc9c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d018      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <HAL_DMA_IRQHandler+0xca0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_DMA_IRQHandler+0xca4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00e      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <HAL_DMA_IRQHandler+0xca8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d009      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <HAL_DMA_IRQHandler+0xcac>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xc62>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <HAL_DMA_IRQHandler+0xcb0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d128      	bne.n	8003fdc <HAL_DMA_IRQHandler+0xcb4>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0214 	bic.w	r2, r2, #20
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e027      	b.n	8003fec <HAL_DMA_IRQHandler+0xcc4>
 8003f9c:	40020010 	.word	0x40020010
 8003fa0:	40020028 	.word	0x40020028
 8003fa4:	40020040 	.word	0x40020040
 8003fa8:	40020058 	.word	0x40020058
 8003fac:	40020070 	.word	0x40020070
 8003fb0:	40020088 	.word	0x40020088
 8003fb4:	400200a0 	.word	0x400200a0
 8003fb8:	400200b8 	.word	0x400200b8
 8003fbc:	40020410 	.word	0x40020410
 8003fc0:	40020428 	.word	0x40020428
 8003fc4:	40020440 	.word	0x40020440
 8003fc8:	40020458 	.word	0x40020458
 8003fcc:	40020470 	.word	0x40020470
 8003fd0:	40020488 	.word	0x40020488
 8003fd4:	400204a0 	.word	0x400204a0
 8003fd8:	400204b8 	.word	0x400204b8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 020a 	bic.w	r2, r2, #10
 8003fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8097 	beq.w	8004134 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800400e:	e091      	b.n	8004134 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2208      	movs	r2, #8
 800401a:	409a      	lsls	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4013      	ands	r3, r2
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8088 	beq.w	8004136 <HAL_DMA_IRQHandler+0xe0e>
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8082 	beq.w	8004136 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a41      	ldr	r2, [pc, #260]	; (800413c <HAL_DMA_IRQHandler+0xe14>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d04a      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a3f      	ldr	r2, [pc, #252]	; (8004140 <HAL_DMA_IRQHandler+0xe18>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d045      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3e      	ldr	r2, [pc, #248]	; (8004144 <HAL_DMA_IRQHandler+0xe1c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d040      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a3c      	ldr	r2, [pc, #240]	; (8004148 <HAL_DMA_IRQHandler+0xe20>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d03b      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a3b      	ldr	r2, [pc, #236]	; (800414c <HAL_DMA_IRQHandler+0xe24>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d036      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a39      	ldr	r2, [pc, #228]	; (8004150 <HAL_DMA_IRQHandler+0xe28>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d031      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a38      	ldr	r2, [pc, #224]	; (8004154 <HAL_DMA_IRQHandler+0xe2c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d02c      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a36      	ldr	r2, [pc, #216]	; (8004158 <HAL_DMA_IRQHandler+0xe30>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d027      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a35      	ldr	r2, [pc, #212]	; (800415c <HAL_DMA_IRQHandler+0xe34>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d022      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a33      	ldr	r2, [pc, #204]	; (8004160 <HAL_DMA_IRQHandler+0xe38>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01d      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a32      	ldr	r2, [pc, #200]	; (8004164 <HAL_DMA_IRQHandler+0xe3c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d018      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a30      	ldr	r2, [pc, #192]	; (8004168 <HAL_DMA_IRQHandler+0xe40>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2f      	ldr	r2, [pc, #188]	; (800416c <HAL_DMA_IRQHandler+0xe44>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2d      	ldr	r2, [pc, #180]	; (8004170 <HAL_DMA_IRQHandler+0xe48>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2c      	ldr	r2, [pc, #176]	; (8004174 <HAL_DMA_IRQHandler+0xe4c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xdaa>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2a      	ldr	r2, [pc, #168]	; (8004178 <HAL_DMA_IRQHandler+0xe50>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d108      	bne.n	80040e4 <HAL_DMA_IRQHandler+0xdbc>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 021c 	bic.w	r2, r2, #28
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e007      	b.n	80040f4 <HAL_DMA_IRQHandler+0xdcc>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 020e 	bic.w	r2, r2, #14
 80040f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2201      	movs	r2, #1
 80040fe:	409a      	lsls	r2, r3
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
 800412a:	e004      	b.n	8004136 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800412c:	bf00      	nop
 800412e:	e002      	b.n	8004136 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004130:	bf00      	nop
 8004132:	e000      	b.n	8004136 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004134:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004136:	3728      	adds	r7, #40	; 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40020010 	.word	0x40020010
 8004140:	40020028 	.word	0x40020028
 8004144:	40020040 	.word	0x40020040
 8004148:	40020058 	.word	0x40020058
 800414c:	40020070 	.word	0x40020070
 8004150:	40020088 	.word	0x40020088
 8004154:	400200a0 	.word	0x400200a0
 8004158:	400200b8 	.word	0x400200b8
 800415c:	40020410 	.word	0x40020410
 8004160:	40020428 	.word	0x40020428
 8004164:	40020440 	.word	0x40020440
 8004168:	40020458 	.word	0x40020458
 800416c:	40020470 	.word	0x40020470
 8004170:	40020488 	.word	0x40020488
 8004174:	400204a0 	.word	0x400204a0
 8004178:	400204b8 	.word	0x400204b8

0800417c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7f      	ldr	r2, [pc, #508]	; (8004398 <DMA_SetConfig+0x21c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d072      	beq.n	8004286 <DMA_SetConfig+0x10a>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a7d      	ldr	r2, [pc, #500]	; (800439c <DMA_SetConfig+0x220>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d06d      	beq.n	8004286 <DMA_SetConfig+0x10a>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7c      	ldr	r2, [pc, #496]	; (80043a0 <DMA_SetConfig+0x224>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d068      	beq.n	8004286 <DMA_SetConfig+0x10a>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7a      	ldr	r2, [pc, #488]	; (80043a4 <DMA_SetConfig+0x228>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d063      	beq.n	8004286 <DMA_SetConfig+0x10a>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a79      	ldr	r2, [pc, #484]	; (80043a8 <DMA_SetConfig+0x22c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d05e      	beq.n	8004286 <DMA_SetConfig+0x10a>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a77      	ldr	r2, [pc, #476]	; (80043ac <DMA_SetConfig+0x230>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d059      	beq.n	8004286 <DMA_SetConfig+0x10a>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a76      	ldr	r2, [pc, #472]	; (80043b0 <DMA_SetConfig+0x234>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d054      	beq.n	8004286 <DMA_SetConfig+0x10a>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a74      	ldr	r2, [pc, #464]	; (80043b4 <DMA_SetConfig+0x238>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d04f      	beq.n	8004286 <DMA_SetConfig+0x10a>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a73      	ldr	r2, [pc, #460]	; (80043b8 <DMA_SetConfig+0x23c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d04a      	beq.n	8004286 <DMA_SetConfig+0x10a>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a71      	ldr	r2, [pc, #452]	; (80043bc <DMA_SetConfig+0x240>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d045      	beq.n	8004286 <DMA_SetConfig+0x10a>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a70      	ldr	r2, [pc, #448]	; (80043c0 <DMA_SetConfig+0x244>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d040      	beq.n	8004286 <DMA_SetConfig+0x10a>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6e      	ldr	r2, [pc, #440]	; (80043c4 <DMA_SetConfig+0x248>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d03b      	beq.n	8004286 <DMA_SetConfig+0x10a>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a6d      	ldr	r2, [pc, #436]	; (80043c8 <DMA_SetConfig+0x24c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d036      	beq.n	8004286 <DMA_SetConfig+0x10a>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a6b      	ldr	r2, [pc, #428]	; (80043cc <DMA_SetConfig+0x250>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d031      	beq.n	8004286 <DMA_SetConfig+0x10a>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a6a      	ldr	r2, [pc, #424]	; (80043d0 <DMA_SetConfig+0x254>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d02c      	beq.n	8004286 <DMA_SetConfig+0x10a>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a68      	ldr	r2, [pc, #416]	; (80043d4 <DMA_SetConfig+0x258>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <DMA_SetConfig+0x10a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a67      	ldr	r2, [pc, #412]	; (80043d8 <DMA_SetConfig+0x25c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <DMA_SetConfig+0x10a>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a65      	ldr	r2, [pc, #404]	; (80043dc <DMA_SetConfig+0x260>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <DMA_SetConfig+0x10a>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a64      	ldr	r2, [pc, #400]	; (80043e0 <DMA_SetConfig+0x264>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <DMA_SetConfig+0x10a>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a62      	ldr	r2, [pc, #392]	; (80043e4 <DMA_SetConfig+0x268>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <DMA_SetConfig+0x10a>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a61      	ldr	r2, [pc, #388]	; (80043e8 <DMA_SetConfig+0x26c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <DMA_SetConfig+0x10a>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a5f      	ldr	r2, [pc, #380]	; (80043ec <DMA_SetConfig+0x270>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <DMA_SetConfig+0x10a>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a5e      	ldr	r2, [pc, #376]	; (80043f0 <DMA_SetConfig+0x274>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <DMA_SetConfig+0x10a>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a5c      	ldr	r2, [pc, #368]	; (80043f4 <DMA_SetConfig+0x278>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <DMA_SetConfig+0x10e>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <DMA_SetConfig+0x110>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00d      	beq.n	80042ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004298:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a39      	ldr	r2, [pc, #228]	; (8004398 <DMA_SetConfig+0x21c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d04a      	beq.n	800434c <DMA_SetConfig+0x1d0>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a38      	ldr	r2, [pc, #224]	; (800439c <DMA_SetConfig+0x220>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d045      	beq.n	800434c <DMA_SetConfig+0x1d0>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a36      	ldr	r2, [pc, #216]	; (80043a0 <DMA_SetConfig+0x224>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d040      	beq.n	800434c <DMA_SetConfig+0x1d0>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a35      	ldr	r2, [pc, #212]	; (80043a4 <DMA_SetConfig+0x228>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d03b      	beq.n	800434c <DMA_SetConfig+0x1d0>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <DMA_SetConfig+0x22c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d036      	beq.n	800434c <DMA_SetConfig+0x1d0>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a32      	ldr	r2, [pc, #200]	; (80043ac <DMA_SetConfig+0x230>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d031      	beq.n	800434c <DMA_SetConfig+0x1d0>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a30      	ldr	r2, [pc, #192]	; (80043b0 <DMA_SetConfig+0x234>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d02c      	beq.n	800434c <DMA_SetConfig+0x1d0>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2f      	ldr	r2, [pc, #188]	; (80043b4 <DMA_SetConfig+0x238>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d027      	beq.n	800434c <DMA_SetConfig+0x1d0>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <DMA_SetConfig+0x23c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d022      	beq.n	800434c <DMA_SetConfig+0x1d0>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <DMA_SetConfig+0x240>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d01d      	beq.n	800434c <DMA_SetConfig+0x1d0>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <DMA_SetConfig+0x244>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d018      	beq.n	800434c <DMA_SetConfig+0x1d0>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a29      	ldr	r2, [pc, #164]	; (80043c4 <DMA_SetConfig+0x248>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d013      	beq.n	800434c <DMA_SetConfig+0x1d0>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a27      	ldr	r2, [pc, #156]	; (80043c8 <DMA_SetConfig+0x24c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00e      	beq.n	800434c <DMA_SetConfig+0x1d0>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a26      	ldr	r2, [pc, #152]	; (80043cc <DMA_SetConfig+0x250>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d009      	beq.n	800434c <DMA_SetConfig+0x1d0>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a24      	ldr	r2, [pc, #144]	; (80043d0 <DMA_SetConfig+0x254>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <DMA_SetConfig+0x1d0>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <DMA_SetConfig+0x258>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d101      	bne.n	8004350 <DMA_SetConfig+0x1d4>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <DMA_SetConfig+0x1d6>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d059      	beq.n	800440a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	223f      	movs	r2, #63	; 0x3f
 8004360:	409a      	lsls	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004374:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b40      	cmp	r3, #64	; 0x40
 8004384:	d138      	bne.n	80043f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004396:	e086      	b.n	80044a6 <DMA_SetConfig+0x32a>
 8004398:	40020010 	.word	0x40020010
 800439c:	40020028 	.word	0x40020028
 80043a0:	40020040 	.word	0x40020040
 80043a4:	40020058 	.word	0x40020058
 80043a8:	40020070 	.word	0x40020070
 80043ac:	40020088 	.word	0x40020088
 80043b0:	400200a0 	.word	0x400200a0
 80043b4:	400200b8 	.word	0x400200b8
 80043b8:	40020410 	.word	0x40020410
 80043bc:	40020428 	.word	0x40020428
 80043c0:	40020440 	.word	0x40020440
 80043c4:	40020458 	.word	0x40020458
 80043c8:	40020470 	.word	0x40020470
 80043cc:	40020488 	.word	0x40020488
 80043d0:	400204a0 	.word	0x400204a0
 80043d4:	400204b8 	.word	0x400204b8
 80043d8:	58025408 	.word	0x58025408
 80043dc:	5802541c 	.word	0x5802541c
 80043e0:	58025430 	.word	0x58025430
 80043e4:	58025444 	.word	0x58025444
 80043e8:	58025458 	.word	0x58025458
 80043ec:	5802546c 	.word	0x5802546c
 80043f0:	58025480 	.word	0x58025480
 80043f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	60da      	str	r2, [r3, #12]
}
 8004408:	e04d      	b.n	80044a6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a29      	ldr	r2, [pc, #164]	; (80044b4 <DMA_SetConfig+0x338>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d022      	beq.n	800445a <DMA_SetConfig+0x2de>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <DMA_SetConfig+0x33c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01d      	beq.n	800445a <DMA_SetConfig+0x2de>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a26      	ldr	r2, [pc, #152]	; (80044bc <DMA_SetConfig+0x340>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d018      	beq.n	800445a <DMA_SetConfig+0x2de>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <DMA_SetConfig+0x344>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <DMA_SetConfig+0x2de>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a23      	ldr	r2, [pc, #140]	; (80044c4 <DMA_SetConfig+0x348>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <DMA_SetConfig+0x2de>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <DMA_SetConfig+0x34c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <DMA_SetConfig+0x2de>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a20      	ldr	r2, [pc, #128]	; (80044cc <DMA_SetConfig+0x350>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <DMA_SetConfig+0x2de>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <DMA_SetConfig+0x354>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d101      	bne.n	800445e <DMA_SetConfig+0x2e2>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <DMA_SetConfig+0x2e4>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d020      	beq.n	80044a6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2201      	movs	r2, #1
 800446e:	409a      	lsls	r2, r3
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d108      	bne.n	8004496 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	60da      	str	r2, [r3, #12]
}
 8004494:	e007      	b.n	80044a6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	60da      	str	r2, [r3, #12]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	58025408 	.word	0x58025408
 80044b8:	5802541c 	.word	0x5802541c
 80044bc:	58025430 	.word	0x58025430
 80044c0:	58025444 	.word	0x58025444
 80044c4:	58025458 	.word	0x58025458
 80044c8:	5802546c 	.word	0x5802546c
 80044cc:	58025480 	.word	0x58025480
 80044d0:	58025494 	.word	0x58025494

080044d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a42      	ldr	r2, [pc, #264]	; (80045ec <DMA_CalcBaseAndBitshift+0x118>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d04a      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a41      	ldr	r2, [pc, #260]	; (80045f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d045      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a3f      	ldr	r2, [pc, #252]	; (80045f4 <DMA_CalcBaseAndBitshift+0x120>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d040      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a3e      	ldr	r2, [pc, #248]	; (80045f8 <DMA_CalcBaseAndBitshift+0x124>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d03b      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a3c      	ldr	r2, [pc, #240]	; (80045fc <DMA_CalcBaseAndBitshift+0x128>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d036      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a3b      	ldr	r2, [pc, #236]	; (8004600 <DMA_CalcBaseAndBitshift+0x12c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d031      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a39      	ldr	r2, [pc, #228]	; (8004604 <DMA_CalcBaseAndBitshift+0x130>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d02c      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a38      	ldr	r2, [pc, #224]	; (8004608 <DMA_CalcBaseAndBitshift+0x134>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d027      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a36      	ldr	r2, [pc, #216]	; (800460c <DMA_CalcBaseAndBitshift+0x138>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d022      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a35      	ldr	r2, [pc, #212]	; (8004610 <DMA_CalcBaseAndBitshift+0x13c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d01d      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a33      	ldr	r2, [pc, #204]	; (8004614 <DMA_CalcBaseAndBitshift+0x140>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d018      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a32      	ldr	r2, [pc, #200]	; (8004618 <DMA_CalcBaseAndBitshift+0x144>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a30      	ldr	r2, [pc, #192]	; (800461c <DMA_CalcBaseAndBitshift+0x148>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00e      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a2f      	ldr	r2, [pc, #188]	; (8004620 <DMA_CalcBaseAndBitshift+0x14c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d009      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a2d      	ldr	r2, [pc, #180]	; (8004624 <DMA_CalcBaseAndBitshift+0x150>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <DMA_CalcBaseAndBitshift+0xa8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a2c      	ldr	r2, [pc, #176]	; (8004628 <DMA_CalcBaseAndBitshift+0x154>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d101      	bne.n	8004580 <DMA_CalcBaseAndBitshift+0xac>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <DMA_CalcBaseAndBitshift+0xae>
 8004580:	2300      	movs	r3, #0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d024      	beq.n	80045d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3b10      	subs	r3, #16
 800458e:	4a27      	ldr	r2, [pc, #156]	; (800462c <DMA_CalcBaseAndBitshift+0x158>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	4a24      	ldr	r2, [pc, #144]	; (8004630 <DMA_CalcBaseAndBitshift+0x15c>)
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
 80045a2:	461a      	mov	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d908      	bls.n	80045c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	4b1f      	ldr	r3, [pc, #124]	; (8004634 <DMA_CalcBaseAndBitshift+0x160>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	1d1a      	adds	r2, r3, #4
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	659a      	str	r2, [r3, #88]	; 0x58
 80045be:	e00d      	b.n	80045dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <DMA_CalcBaseAndBitshift+0x160>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6593      	str	r3, [r2, #88]	; 0x58
 80045ce:	e005      	b.n	80045dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40020010 	.word	0x40020010
 80045f0:	40020028 	.word	0x40020028
 80045f4:	40020040 	.word	0x40020040
 80045f8:	40020058 	.word	0x40020058
 80045fc:	40020070 	.word	0x40020070
 8004600:	40020088 	.word	0x40020088
 8004604:	400200a0 	.word	0x400200a0
 8004608:	400200b8 	.word	0x400200b8
 800460c:	40020410 	.word	0x40020410
 8004610:	40020428 	.word	0x40020428
 8004614:	40020440 	.word	0x40020440
 8004618:	40020458 	.word	0x40020458
 800461c:	40020470 	.word	0x40020470
 8004620:	40020488 	.word	0x40020488
 8004624:	400204a0 	.word	0x400204a0
 8004628:	400204b8 	.word	0x400204b8
 800462c:	aaaaaaab 	.word	0xaaaaaaab
 8004630:	0801bc14 	.word	0x0801bc14
 8004634:	fffffc00 	.word	0xfffffc00

08004638 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d120      	bne.n	800468e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	2b03      	cmp	r3, #3
 8004652:	d858      	bhi.n	8004706 <DMA_CheckFifoParam+0xce>
 8004654:	a201      	add	r2, pc, #4	; (adr r2, 800465c <DMA_CheckFifoParam+0x24>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	0800466d 	.word	0x0800466d
 8004660:	0800467f 	.word	0x0800467f
 8004664:	0800466d 	.word	0x0800466d
 8004668:	08004707 	.word	0x08004707
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d048      	beq.n	800470a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800467c:	e045      	b.n	800470a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004686:	d142      	bne.n	800470e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800468c:	e03f      	b.n	800470e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004696:	d123      	bne.n	80046e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	2b03      	cmp	r3, #3
 800469e:	d838      	bhi.n	8004712 <DMA_CheckFifoParam+0xda>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <DMA_CheckFifoParam+0x70>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046b9 	.word	0x080046b9
 80046ac:	080046bf 	.word	0x080046bf
 80046b0:	080046b9 	.word	0x080046b9
 80046b4:	080046d1 	.word	0x080046d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
        break;
 80046bc:	e030      	b.n	8004720 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d025      	beq.n	8004716 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046ce:	e022      	b.n	8004716 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046d8:	d11f      	bne.n	800471a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046de:	e01c      	b.n	800471a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d902      	bls.n	80046ee <DMA_CheckFifoParam+0xb6>
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d003      	beq.n	80046f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80046ec:	e018      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	73fb      	strb	r3, [r7, #15]
        break;
 80046f2:	e015      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
    break;
 8004704:	e00b      	b.n	800471e <DMA_CheckFifoParam+0xe6>
        break;
 8004706:	bf00      	nop
 8004708:	e00a      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
        break;
 800470a:	bf00      	nop
 800470c:	e008      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
        break;
 800470e:	bf00      	nop
 8004710:	e006      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
        break;
 8004712:	bf00      	nop
 8004714:	e004      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
        break;
 8004716:	bf00      	nop
 8004718:	e002      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
        break;
 800471a:	bf00      	nop
 800471c:	e000      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
    break;
 800471e:	bf00      	nop
    }
  }

  return status;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop

08004730 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a38      	ldr	r2, [pc, #224]	; (8004824 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d022      	beq.n	800478e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a36      	ldr	r2, [pc, #216]	; (8004828 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01d      	beq.n	800478e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a35      	ldr	r2, [pc, #212]	; (800482c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d018      	beq.n	800478e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a33      	ldr	r2, [pc, #204]	; (8004830 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a32      	ldr	r2, [pc, #200]	; (8004834 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a30      	ldr	r2, [pc, #192]	; (8004838 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2f      	ldr	r2, [pc, #188]	; (800483c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2d      	ldr	r2, [pc, #180]	; (8004840 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01a      	beq.n	80047ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	3b08      	subs	r3, #8
 80047a0:	4a28      	ldr	r2, [pc, #160]	; (8004844 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4b26      	ldr	r3, [pc, #152]	; (8004848 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	461a      	mov	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a24      	ldr	r2, [pc, #144]	; (800484c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80047bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2201      	movs	r2, #1
 80047c6:	409a      	lsls	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80047cc:	e024      	b.n	8004818 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3b10      	subs	r3, #16
 80047d6:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d806      	bhi.n	80047f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d902      	bls.n	80047f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3308      	adds	r3, #8
 80047f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4b18      	ldr	r3, [pc, #96]	; (800485c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a16      	ldr	r2, [pc, #88]	; (8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004808:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	2201      	movs	r2, #1
 8004812:	409a      	lsls	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	58025408 	.word	0x58025408
 8004828:	5802541c 	.word	0x5802541c
 800482c:	58025430 	.word	0x58025430
 8004830:	58025444 	.word	0x58025444
 8004834:	58025458 	.word	0x58025458
 8004838:	5802546c 	.word	0x5802546c
 800483c:	58025480 	.word	0x58025480
 8004840:	58025494 	.word	0x58025494
 8004844:	cccccccd 	.word	0xcccccccd
 8004848:	16009600 	.word	0x16009600
 800484c:	58025880 	.word	0x58025880
 8004850:	aaaaaaab 	.word	0xaaaaaaab
 8004854:	400204b8 	.word	0x400204b8
 8004858:	4002040f 	.word	0x4002040f
 800485c:	10008200 	.word	0x10008200
 8004860:	40020880 	.word	0x40020880

08004864 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d04a      	beq.n	8004910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d847      	bhi.n	8004910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d022      	beq.n	80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a24      	ldr	r2, [pc, #144]	; (8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d01d      	beq.n	80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a22      	ldr	r2, [pc, #136]	; (8004924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d018      	beq.n	80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a21      	ldr	r2, [pc, #132]	; (8004928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1f      	ldr	r2, [pc, #124]	; (800492c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00e      	beq.n	80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1e      	ldr	r2, [pc, #120]	; (8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d009      	beq.n	80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d101      	bne.n	80048d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80048d4:	2300      	movs	r3, #0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	461a      	mov	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a15      	ldr	r2, [pc, #84]	; (8004940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80048ec:	671a      	str	r2, [r3, #112]	; 0x70
 80048ee:	e009      	b.n	8004904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	461a      	mov	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a11      	ldr	r2, [pc, #68]	; (8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004902:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3b01      	subs	r3, #1
 8004908:	2201      	movs	r2, #1
 800490a:	409a      	lsls	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	58025408 	.word	0x58025408
 8004920:	5802541c 	.word	0x5802541c
 8004924:	58025430 	.word	0x58025430
 8004928:	58025444 	.word	0x58025444
 800492c:	58025458 	.word	0x58025458
 8004930:	5802546c 	.word	0x5802546c
 8004934:	58025480 	.word	0x58025480
 8004938:	58025494 	.word	0x58025494
 800493c:	1600963f 	.word	0x1600963f
 8004940:	58025940 	.word	0x58025940
 8004944:	1000823f 	.word	0x1000823f
 8004948:	40020940 	.word	0x40020940

0800494c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d105      	bne.n	8004972 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e315      	b.n	8004f9e <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 800497c:	2302      	movs	r3, #2
 800497e:	e30e      	b.n	8004f9e <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	f040 82fd 	bne.w	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2202      	movs	r2, #2
 800499a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a82      	ldr	r2, [pc, #520]	; (8004bb4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d04a      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a81      	ldr	r2, [pc, #516]	; (8004bb8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d045      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a7f      	ldr	r2, [pc, #508]	; (8004bbc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d040      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a7e      	ldr	r2, [pc, #504]	; (8004bc0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d03b      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a7c      	ldr	r2, [pc, #496]	; (8004bc4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d036      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a7b      	ldr	r2, [pc, #492]	; (8004bc8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d031      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a79      	ldr	r2, [pc, #484]	; (8004bcc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02c      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a78      	ldr	r2, [pc, #480]	; (8004bd0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d027      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a76      	ldr	r2, [pc, #472]	; (8004bd4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d022      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a75      	ldr	r2, [pc, #468]	; (8004bd8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d01d      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a73      	ldr	r2, [pc, #460]	; (8004bdc <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d018      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a72      	ldr	r2, [pc, #456]	; (8004be0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d013      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a70      	ldr	r2, [pc, #448]	; (8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00e      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6f      	ldr	r2, [pc, #444]	; (8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d009      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a6d      	ldr	r2, [pc, #436]	; (8004bec <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6c      	ldr	r2, [pc, #432]	; (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d018      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004a5c:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	223f      	movs	r2, #63	; 0x3f
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e018      	b.n	8004ab2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	f248 0320 	movw	r3, #32800	; 0x8020
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	2201      	movs	r2, #1
 8004aac:	409a      	lsls	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fb41 	bl	8005140 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a3c      	ldr	r2, [pc, #240]	; (8004bb4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d072      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a3a      	ldr	r2, [pc, #232]	; (8004bb8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d06d      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a39      	ldr	r2, [pc, #228]	; (8004bbc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d068      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a37      	ldr	r2, [pc, #220]	; (8004bc0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d063      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a36      	ldr	r2, [pc, #216]	; (8004bc4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d05e      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a34      	ldr	r2, [pc, #208]	; (8004bc8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d059      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a33      	ldr	r2, [pc, #204]	; (8004bcc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d054      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a31      	ldr	r2, [pc, #196]	; (8004bd0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d04f      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a30      	ldr	r2, [pc, #192]	; (8004bd4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d04a      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a2e      	ldr	r2, [pc, #184]	; (8004bd8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d045      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2d      	ldr	r2, [pc, #180]	; (8004bdc <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d040      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2b      	ldr	r2, [pc, #172]	; (8004be0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d03b      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2a      	ldr	r2, [pc, #168]	; (8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d036      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a28      	ldr	r2, [pc, #160]	; (8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d031      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a27      	ldr	r2, [pc, #156]	; (8004bec <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d02c      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a25      	ldr	r2, [pc, #148]	; (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d027      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a24      	ldr	r2, [pc, #144]	; (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d022      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a22      	ldr	r2, [pc, #136]	; (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d01d      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d018      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00e      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d004      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d132      	bne.n	8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e031      	b.n	8004c16 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8004bb2:	bf00      	nop
 8004bb4:	40020010 	.word	0x40020010
 8004bb8:	40020028 	.word	0x40020028
 8004bbc:	40020040 	.word	0x40020040
 8004bc0:	40020058 	.word	0x40020058
 8004bc4:	40020070 	.word	0x40020070
 8004bc8:	40020088 	.word	0x40020088
 8004bcc:	400200a0 	.word	0x400200a0
 8004bd0:	400200b8 	.word	0x400200b8
 8004bd4:	40020410 	.word	0x40020410
 8004bd8:	40020428 	.word	0x40020428
 8004bdc:	40020440 	.word	0x40020440
 8004be0:	40020458 	.word	0x40020458
 8004be4:	40020470 	.word	0x40020470
 8004be8:	40020488 	.word	0x40020488
 8004bec:	400204a0 	.word	0x400204a0
 8004bf0:	400204b8 	.word	0x400204b8
 8004bf4:	58025408 	.word	0x58025408
 8004bf8:	5802541c 	.word	0x5802541c
 8004bfc:	58025430 	.word	0x58025430
 8004c00:	58025444 	.word	0x58025444
 8004c04:	58025458 	.word	0x58025458
 8004c08:	5802546c 	.word	0x5802546c
 8004c0c:	58025480 	.word	0x58025480
 8004c10:	58025494 	.word	0x58025494
 8004c14:	2300      	movs	r3, #0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00d      	beq.n	8004c36 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c22:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c34:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3b      	ldr	r2, [pc, #236]	; (8004d28 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d04a      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a39      	ldr	r2, [pc, #228]	; (8004d2c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d045      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a38      	ldr	r2, [pc, #224]	; (8004d30 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d040      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a36      	ldr	r2, [pc, #216]	; (8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d03b      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a35      	ldr	r2, [pc, #212]	; (8004d38 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d036      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a33      	ldr	r2, [pc, #204]	; (8004d3c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d031      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a32      	ldr	r2, [pc, #200]	; (8004d40 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d02c      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a30      	ldr	r2, [pc, #192]	; (8004d44 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d027      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2f      	ldr	r2, [pc, #188]	; (8004d48 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d022      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a2d      	ldr	r2, [pc, #180]	; (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01d      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a2c      	ldr	r2, [pc, #176]	; (8004d50 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d018      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a2a      	ldr	r2, [pc, #168]	; (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d013      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a29      	ldr	r2, [pc, #164]	; (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00e      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a27      	ldr	r2, [pc, #156]	; (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d009      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a26      	ldr	r2, [pc, #152]	; (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d004      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d043      	beq.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 021e 	bic.w	r2, r3, #30
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0216 	orr.w	r2, r2, #22
 8004cf2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d02:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d043      	beq.n	8004d9c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0208 	orr.w	r2, r2, #8
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e03a      	b.n	8004d9c <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8004d26:	bf00      	nop
 8004d28:	40020010 	.word	0x40020010
 8004d2c:	40020028 	.word	0x40020028
 8004d30:	40020040 	.word	0x40020040
 8004d34:	40020058 	.word	0x40020058
 8004d38:	40020070 	.word	0x40020070
 8004d3c:	40020088 	.word	0x40020088
 8004d40:	400200a0 	.word	0x400200a0
 8004d44:	400200b8 	.word	0x400200b8
 8004d48:	40020410 	.word	0x40020410
 8004d4c:	40020428 	.word	0x40020428
 8004d50:	40020440 	.word	0x40020440
 8004d54:	40020458 	.word	0x40020458
 8004d58:	40020470 	.word	0x40020470
 8004d5c:	40020488 	.word	0x40020488
 8004d60:	400204a0 	.word	0x400204a0
 8004d64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 020e 	bic.w	r2, r3, #14
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 020a 	orr.w	r2, r2, #10
 8004d7a:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d103      	bne.n	8004d8c <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0204 	orr.w	r2, r2, #4
 8004d9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a81      	ldr	r2, [pc, #516]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d072      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a80      	ldr	r2, [pc, #512]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d06d      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a7e      	ldr	r2, [pc, #504]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d068      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a7d      	ldr	r2, [pc, #500]	; (8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d063      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a7b      	ldr	r2, [pc, #492]	; (8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d05e      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a7a      	ldr	r2, [pc, #488]	; (8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d059      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a78      	ldr	r2, [pc, #480]	; (8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d054      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a77      	ldr	r2, [pc, #476]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d04f      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a75      	ldr	r2, [pc, #468]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d04a      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a74      	ldr	r2, [pc, #464]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d045      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a72      	ldr	r2, [pc, #456]	; (8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d040      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a71      	ldr	r2, [pc, #452]	; (8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d03b      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a6f      	ldr	r2, [pc, #444]	; (8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d036      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6e      	ldr	r2, [pc, #440]	; (8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d031      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a6c      	ldr	r2, [pc, #432]	; (8004fe0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02c      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6b      	ldr	r2, [pc, #428]	; (8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d027      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a69      	ldr	r2, [pc, #420]	; (8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a68      	ldr	r2, [pc, #416]	; (8004fec <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d01d      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a66      	ldr	r2, [pc, #408]	; (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a65      	ldr	r2, [pc, #404]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a63      	ldr	r2, [pc, #396]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a62      	ldr	r2, [pc, #392]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a60      	ldr	r2, [pc, #384]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a5f      	ldr	r2, [pc, #380]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d101      	bne.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01a      	beq.n	8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a35      	ldr	r2, [pc, #212]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d04a      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a34      	ldr	r2, [pc, #208]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d045      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a32      	ldr	r2, [pc, #200]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d040      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a31      	ldr	r2, [pc, #196]	; (8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d03b      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a2f      	ldr	r2, [pc, #188]	; (8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d036      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a2e      	ldr	r2, [pc, #184]	; (8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d031      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d02c      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2b      	ldr	r2, [pc, #172]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d027      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d022      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a28      	ldr	r2, [pc, #160]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d01d      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a26      	ldr	r2, [pc, #152]	; (8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d018      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a25      	ldr	r2, [pc, #148]	; (8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a23      	ldr	r2, [pc, #140]	; (8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00e      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a22      	ldr	r2, [pc, #136]	; (8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d009      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a20      	ldr	r2, [pc, #128]	; (8004fe0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d108      	bne.n	8004f7e <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	e00e      	b.n	8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e005      	b.n	8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40020010 	.word	0x40020010
 8004fac:	40020028 	.word	0x40020028
 8004fb0:	40020040 	.word	0x40020040
 8004fb4:	40020058 	.word	0x40020058
 8004fb8:	40020070 	.word	0x40020070
 8004fbc:	40020088 	.word	0x40020088
 8004fc0:	400200a0 	.word	0x400200a0
 8004fc4:	400200b8 	.word	0x400200b8
 8004fc8:	40020410 	.word	0x40020410
 8004fcc:	40020428 	.word	0x40020428
 8004fd0:	40020440 	.word	0x40020440
 8004fd4:	40020458 	.word	0x40020458
 8004fd8:	40020470 	.word	0x40020470
 8004fdc:	40020488 	.word	0x40020488
 8004fe0:	400204a0 	.word	0x400204a0
 8004fe4:	400204b8 	.word	0x400204b8
 8004fe8:	58025408 	.word	0x58025408
 8004fec:	5802541c 	.word	0x5802541c
 8004ff0:	58025430 	.word	0x58025430
 8004ff4:	58025444 	.word	0x58025444
 8004ff8:	58025458 	.word	0x58025458
 8004ffc:	5802546c 	.word	0x5802546c
 8005000:	58025480 	.word	0x58025480
 8005004:	58025494 	.word	0x58025494

08005008 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a39      	ldr	r2, [pc, #228]	; (8005100 <HAL_DMAEx_ChangeMemory+0xf8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d04a      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a37      	ldr	r2, [pc, #220]	; (8005104 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d045      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a36      	ldr	r2, [pc, #216]	; (8005108 <HAL_DMAEx_ChangeMemory+0x100>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d040      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a34      	ldr	r2, [pc, #208]	; (800510c <HAL_DMAEx_ChangeMemory+0x104>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d03b      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a33      	ldr	r2, [pc, #204]	; (8005110 <HAL_DMAEx_ChangeMemory+0x108>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d036      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a31      	ldr	r2, [pc, #196]	; (8005114 <HAL_DMAEx_ChangeMemory+0x10c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d031      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a30      	ldr	r2, [pc, #192]	; (8005118 <HAL_DMAEx_ChangeMemory+0x110>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d02c      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a2e      	ldr	r2, [pc, #184]	; (800511c <HAL_DMAEx_ChangeMemory+0x114>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d027      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <HAL_DMAEx_ChangeMemory+0x118>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d022      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a2b      	ldr	r2, [pc, #172]	; (8005124 <HAL_DMAEx_ChangeMemory+0x11c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01d      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a2a      	ldr	r2, [pc, #168]	; (8005128 <HAL_DMAEx_ChangeMemory+0x120>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d018      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a28      	ldr	r2, [pc, #160]	; (800512c <HAL_DMAEx_ChangeMemory+0x124>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a27      	ldr	r2, [pc, #156]	; (8005130 <HAL_DMAEx_ChangeMemory+0x128>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a25      	ldr	r2, [pc, #148]	; (8005134 <HAL_DMAEx_ChangeMemory+0x12c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a24      	ldr	r2, [pc, #144]	; (8005138 <HAL_DMAEx_ChangeMemory+0x130>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_DMAEx_ChangeMemory+0xae>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a22      	ldr	r2, [pc, #136]	; (800513c <HAL_DMAEx_ChangeMemory+0x134>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <HAL_DMAEx_ChangeMemory+0xb2>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <HAL_DMAEx_ChangeMemory+0xb4>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00c      	beq.n	80050da <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	60da      	str	r2, [r3, #12]
 80050ce:	e010      	b.n	80050f2 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	611a      	str	r2, [r3, #16]
 80050d8:	e00b      	b.n	80050f2 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	60da      	str	r2, [r3, #12]
 80050e8:	e003      	b.n	80050f2 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40020010 	.word	0x40020010
 8005104:	40020028 	.word	0x40020028
 8005108:	40020040 	.word	0x40020040
 800510c:	40020058 	.word	0x40020058
 8005110:	40020070 	.word	0x40020070
 8005114:	40020088 	.word	0x40020088
 8005118:	400200a0 	.word	0x400200a0
 800511c:	400200b8 	.word	0x400200b8
 8005120:	40020410 	.word	0x40020410
 8005124:	40020428 	.word	0x40020428
 8005128:	40020440 	.word	0x40020440
 800512c:	40020458 	.word	0x40020458
 8005130:	40020470 	.word	0x40020470
 8005134:	40020488 	.word	0x40020488
 8005138:	400204a0 	.word	0x400204a0
 800513c:	400204b8 	.word	0x400204b8

08005140 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a46      	ldr	r2, [pc, #280]	; (800526c <DMA_MultiBufferSetConfig+0x12c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d04a      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a44      	ldr	r2, [pc, #272]	; (8005270 <DMA_MultiBufferSetConfig+0x130>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d045      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a43      	ldr	r2, [pc, #268]	; (8005274 <DMA_MultiBufferSetConfig+0x134>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d040      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a41      	ldr	r2, [pc, #260]	; (8005278 <DMA_MultiBufferSetConfig+0x138>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d03b      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a40      	ldr	r2, [pc, #256]	; (800527c <DMA_MultiBufferSetConfig+0x13c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d036      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a3e      	ldr	r2, [pc, #248]	; (8005280 <DMA_MultiBufferSetConfig+0x140>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d031      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a3d      	ldr	r2, [pc, #244]	; (8005284 <DMA_MultiBufferSetConfig+0x144>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d02c      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a3b      	ldr	r2, [pc, #236]	; (8005288 <DMA_MultiBufferSetConfig+0x148>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d027      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a3a      	ldr	r2, [pc, #232]	; (800528c <DMA_MultiBufferSetConfig+0x14c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d022      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a38      	ldr	r2, [pc, #224]	; (8005290 <DMA_MultiBufferSetConfig+0x150>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01d      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a37      	ldr	r2, [pc, #220]	; (8005294 <DMA_MultiBufferSetConfig+0x154>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d018      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a35      	ldr	r2, [pc, #212]	; (8005298 <DMA_MultiBufferSetConfig+0x158>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d013      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a34      	ldr	r2, [pc, #208]	; (800529c <DMA_MultiBufferSetConfig+0x15c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a32      	ldr	r2, [pc, #200]	; (80052a0 <DMA_MultiBufferSetConfig+0x160>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d009      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a31      	ldr	r2, [pc, #196]	; (80052a4 <DMA_MultiBufferSetConfig+0x164>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <DMA_MultiBufferSetConfig+0xae>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2f      	ldr	r2, [pc, #188]	; (80052a8 <DMA_MultiBufferSetConfig+0x168>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d101      	bne.n	80051f2 <DMA_MultiBufferSetConfig+0xb2>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <DMA_MultiBufferSetConfig+0xb4>
 80051f2:	2300      	movs	r3, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d019      	beq.n	800522c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b40      	cmp	r3, #64	; 0x40
 8005206:	d108      	bne.n	800521a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005218:	e021      	b.n	800525e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	60da      	str	r2, [r3, #12]
}
 800522a:	e018      	b.n	800525e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b40      	cmp	r3, #64	; 0x40
 800523a:	d108      	bne.n	800524e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	60da      	str	r2, [r3, #12]
}
 800524c:	e007      	b.n	800525e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]
}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40020010 	.word	0x40020010
 8005270:	40020028 	.word	0x40020028
 8005274:	40020040 	.word	0x40020040
 8005278:	40020058 	.word	0x40020058
 800527c:	40020070 	.word	0x40020070
 8005280:	40020088 	.word	0x40020088
 8005284:	400200a0 	.word	0x400200a0
 8005288:	400200b8 	.word	0x400200b8
 800528c:	40020410 	.word	0x40020410
 8005290:	40020428 	.word	0x40020428
 8005294:	40020440 	.word	0x40020440
 8005298:	40020458 	.word	0x40020458
 800529c:	40020470 	.word	0x40020470
 80052a0:	40020488 	.word	0x40020488
 80052a4:	400204a0 	.word	0x400204a0
 80052a8:	400204b8 	.word	0x400204b8

080052ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b089      	sub	sp, #36	; 0x24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052ba:	4b89      	ldr	r3, [pc, #548]	; (80054e0 <HAL_GPIO_Init+0x234>)
 80052bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052be:	e194      	b.n	80055ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	2101      	movs	r1, #1
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	fa01 f303 	lsl.w	r3, r1, r3
 80052cc:	4013      	ands	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8186 	beq.w	80055e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d005      	beq.n	80052f0 <HAL_GPIO_Init+0x44>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d130      	bne.n	8005352 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	2203      	movs	r2, #3
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	43db      	mvns	r3, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4313      	orrs	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005326:	2201      	movs	r2, #1
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	43db      	mvns	r3, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4013      	ands	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	f003 0201 	and.w	r2, r3, #1
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4313      	orrs	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b03      	cmp	r3, #3
 800535c:	d017      	beq.n	800538e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	2203      	movs	r2, #3
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4313      	orrs	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d123      	bne.n	80053e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	08da      	lsrs	r2, r3, #3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3208      	adds	r2, #8
 80053a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	220f      	movs	r2, #15
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	08da      	lsrs	r2, r3, #3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3208      	adds	r2, #8
 80053dc:	69b9      	ldr	r1, [r7, #24]
 80053de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	2203      	movs	r2, #3
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	4013      	ands	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f003 0203 	and.w	r2, r3, #3
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4313      	orrs	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80e0 	beq.w	80055e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005424:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <HAL_GPIO_Init+0x238>)
 8005426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800542a:	4a2e      	ldr	r2, [pc, #184]	; (80054e4 <HAL_GPIO_Init+0x238>)
 800542c:	f043 0302 	orr.w	r3, r3, #2
 8005430:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005434:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <HAL_GPIO_Init+0x238>)
 8005436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005442:	4a29      	ldr	r2, [pc, #164]	; (80054e8 <HAL_GPIO_Init+0x23c>)
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	3302      	adds	r3, #2
 800544a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	220f      	movs	r2, #15
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	43db      	mvns	r3, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4013      	ands	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a20      	ldr	r2, [pc, #128]	; (80054ec <HAL_GPIO_Init+0x240>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d052      	beq.n	8005514 <HAL_GPIO_Init+0x268>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <HAL_GPIO_Init+0x244>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d031      	beq.n	80054da <HAL_GPIO_Init+0x22e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <HAL_GPIO_Init+0x248>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d02b      	beq.n	80054d6 <HAL_GPIO_Init+0x22a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <HAL_GPIO_Init+0x24c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d025      	beq.n	80054d2 <HAL_GPIO_Init+0x226>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <HAL_GPIO_Init+0x250>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01f      	beq.n	80054ce <HAL_GPIO_Init+0x222>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <HAL_GPIO_Init+0x254>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d019      	beq.n	80054ca <HAL_GPIO_Init+0x21e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <HAL_GPIO_Init+0x258>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_GPIO_Init+0x21a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <HAL_GPIO_Init+0x25c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00d      	beq.n	80054c2 <HAL_GPIO_Init+0x216>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a18      	ldr	r2, [pc, #96]	; (800550c <HAL_GPIO_Init+0x260>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d007      	beq.n	80054be <HAL_GPIO_Init+0x212>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a17      	ldr	r2, [pc, #92]	; (8005510 <HAL_GPIO_Init+0x264>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d101      	bne.n	80054ba <HAL_GPIO_Init+0x20e>
 80054b6:	2309      	movs	r3, #9
 80054b8:	e02d      	b.n	8005516 <HAL_GPIO_Init+0x26a>
 80054ba:	230a      	movs	r3, #10
 80054bc:	e02b      	b.n	8005516 <HAL_GPIO_Init+0x26a>
 80054be:	2308      	movs	r3, #8
 80054c0:	e029      	b.n	8005516 <HAL_GPIO_Init+0x26a>
 80054c2:	2307      	movs	r3, #7
 80054c4:	e027      	b.n	8005516 <HAL_GPIO_Init+0x26a>
 80054c6:	2306      	movs	r3, #6
 80054c8:	e025      	b.n	8005516 <HAL_GPIO_Init+0x26a>
 80054ca:	2305      	movs	r3, #5
 80054cc:	e023      	b.n	8005516 <HAL_GPIO_Init+0x26a>
 80054ce:	2304      	movs	r3, #4
 80054d0:	e021      	b.n	8005516 <HAL_GPIO_Init+0x26a>
 80054d2:	2303      	movs	r3, #3
 80054d4:	e01f      	b.n	8005516 <HAL_GPIO_Init+0x26a>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e01d      	b.n	8005516 <HAL_GPIO_Init+0x26a>
 80054da:	2301      	movs	r3, #1
 80054dc:	e01b      	b.n	8005516 <HAL_GPIO_Init+0x26a>
 80054de:	bf00      	nop
 80054e0:	58000080 	.word	0x58000080
 80054e4:	58024400 	.word	0x58024400
 80054e8:	58000400 	.word	0x58000400
 80054ec:	58020000 	.word	0x58020000
 80054f0:	58020400 	.word	0x58020400
 80054f4:	58020800 	.word	0x58020800
 80054f8:	58020c00 	.word	0x58020c00
 80054fc:	58021000 	.word	0x58021000
 8005500:	58021400 	.word	0x58021400
 8005504:	58021800 	.word	0x58021800
 8005508:	58021c00 	.word	0x58021c00
 800550c:	58022000 	.word	0x58022000
 8005510:	58022400 	.word	0x58022400
 8005514:	2300      	movs	r3, #0
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	f002 0203 	and.w	r2, r2, #3
 800551c:	0092      	lsls	r2, r2, #2
 800551e:	4093      	lsls	r3, r2
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005526:	4938      	ldr	r1, [pc, #224]	; (8005608 <HAL_GPIO_Init+0x35c>)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	089b      	lsrs	r3, r3, #2
 800552c:	3302      	adds	r3, #2
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	43db      	mvns	r3, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4013      	ands	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800555a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	43db      	mvns	r3, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	43db      	mvns	r3, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4013      	ands	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	43db      	mvns	r3, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4013      	ands	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	3301      	adds	r3, #1
 80055e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f47f ae63 	bne.w	80052c0 <HAL_GPIO_Init+0x14>
  }
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	3724      	adds	r7, #36	; 0x24
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	58000400 	.word	0x58000400

0800560c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	807b      	strh	r3, [r7, #2]
 8005618:	4613      	mov	r3, r2
 800561a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800561c:	787b      	ldrb	r3, [r7, #1]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005622:	887a      	ldrh	r2, [r7, #2]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005628:	e003      	b.n	8005632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800562a:	887b      	ldrh	r3, [r7, #2]
 800562c:	041a      	lsls	r2, r3, #16
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	619a      	str	r2, [r3, #24]
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e07f      	b.n	8005752 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb f946 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2224      	movs	r2, #36	; 0x24
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005690:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d107      	bne.n	80056ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056b6:	609a      	str	r2, [r3, #8]
 80056b8:	e006      	b.n	80056c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d104      	bne.n	80056da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4b1d      	ldr	r3, [pc, #116]	; (800575c <HAL_I2C_Init+0x11c>)
 80056e6:	430b      	orrs	r3, r1
 80056e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69d9      	ldr	r1, [r3, #28]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1a      	ldr	r2, [r3, #32]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	02008000 	.word	0x02008000

08005760 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	4608      	mov	r0, r1
 800576a:	4611      	mov	r1, r2
 800576c:	461a      	mov	r2, r3
 800576e:	4603      	mov	r3, r0
 8005770:	817b      	strh	r3, [r7, #10]
 8005772:	460b      	mov	r3, r1
 8005774:	813b      	strh	r3, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b20      	cmp	r3, #32
 8005784:	f040 80f9 	bne.w	800597a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <HAL_I2C_Mem_Write+0x34>
 800578e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	d105      	bne.n	80057a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e0ed      	b.n	800597c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_I2C_Mem_Write+0x4e>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e0e6      	b.n	800597c <HAL_I2C_Mem_Write+0x21c>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057b6:	f7fb fdfd 	bl	80013b4 <HAL_GetTick>
 80057ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	2319      	movs	r3, #25
 80057c2:	2201      	movs	r2, #1
 80057c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 fac3 	bl	8005d54 <I2C_WaitOnFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0d1      	b.n	800597c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2221      	movs	r2, #33	; 0x21
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2240      	movs	r2, #64	; 0x40
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a3a      	ldr	r2, [r7, #32]
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005800:	88f8      	ldrh	r0, [r7, #6]
 8005802:	893a      	ldrh	r2, [r7, #8]
 8005804:	8979      	ldrh	r1, [r7, #10]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	4603      	mov	r3, r0
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f9d3 	bl	8005bbc <I2C_RequestMemoryWrite>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0a9      	b.n	800597c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2bff      	cmp	r3, #255	; 0xff
 8005830:	d90e      	bls.n	8005850 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	22ff      	movs	r2, #255	; 0xff
 8005836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	b2da      	uxtb	r2, r3
 800583e:	8979      	ldrh	r1, [r7, #10]
 8005840:	2300      	movs	r3, #0
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fc3d 	bl	80060c8 <I2C_TransferConfig>
 800584e:	e00f      	b.n	8005870 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585e:	b2da      	uxtb	r2, r3
 8005860:	8979      	ldrh	r1, [r7, #10]
 8005862:	2300      	movs	r3, #0
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 fc2c 	bl	80060c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fabc 	bl	8005df2 <I2C_WaitOnTXISFlagUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e07b      	b.n	800597c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d034      	beq.n	8005928 <HAL_I2C_Mem_Write+0x1c8>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d130      	bne.n	8005928 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	2200      	movs	r2, #0
 80058ce:	2180      	movs	r1, #128	; 0x80
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fa3f 	bl	8005d54 <I2C_WaitOnFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e04d      	b.n	800597c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2bff      	cmp	r3, #255	; 0xff
 80058e8:	d90e      	bls.n	8005908 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	22ff      	movs	r2, #255	; 0xff
 80058ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	8979      	ldrh	r1, [r7, #10]
 80058f8:	2300      	movs	r3, #0
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fbe1 	bl	80060c8 <I2C_TransferConfig>
 8005906:	e00f      	b.n	8005928 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005916:	b2da      	uxtb	r2, r3
 8005918:	8979      	ldrh	r1, [r7, #10]
 800591a:	2300      	movs	r3, #0
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fbd0 	bl	80060c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d19e      	bne.n	8005870 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 faa2 	bl	8005e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e01a      	b.n	800597c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2220      	movs	r2, #32
 800594c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6859      	ldr	r1, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <HAL_I2C_Mem_Write+0x224>)
 800595a:	400b      	ands	r3, r1
 800595c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	e000      	b.n	800597c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800597a:	2302      	movs	r3, #2
  }
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	fe00e800 	.word	0xfe00e800

08005988 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	4608      	mov	r0, r1
 8005992:	4611      	mov	r1, r2
 8005994:	461a      	mov	r2, r3
 8005996:	4603      	mov	r3, r0
 8005998:	817b      	strh	r3, [r7, #10]
 800599a:	460b      	mov	r3, r1
 800599c:	813b      	strh	r3, [r7, #8]
 800599e:	4613      	mov	r3, r2
 80059a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	f040 80fd 	bne.w	8005baa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_I2C_Mem_Read+0x34>
 80059b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d105      	bne.n	80059c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0f1      	b.n	8005bac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_I2C_Mem_Read+0x4e>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e0ea      	b.n	8005bac <HAL_I2C_Mem_Read+0x224>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059de:	f7fb fce9 	bl	80013b4 <HAL_GetTick>
 80059e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	2319      	movs	r3, #25
 80059ea:	2201      	movs	r2, #1
 80059ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f9af 	bl	8005d54 <I2C_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0d5      	b.n	8005bac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2222      	movs	r2, #34	; 0x22
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2240      	movs	r2, #64	; 0x40
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a3a      	ldr	r2, [r7, #32]
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a28:	88f8      	ldrh	r0, [r7, #6]
 8005a2a:	893a      	ldrh	r2, [r7, #8]
 8005a2c:	8979      	ldrh	r1, [r7, #10]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	9301      	str	r3, [sp, #4]
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	4603      	mov	r3, r0
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f913 	bl	8005c64 <I2C_RequestMemoryRead>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0ad      	b.n	8005bac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2bff      	cmp	r3, #255	; 0xff
 8005a58:	d90e      	bls.n	8005a78 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	22ff      	movs	r2, #255	; 0xff
 8005a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	8979      	ldrh	r1, [r7, #10]
 8005a68:	4b52      	ldr	r3, [pc, #328]	; (8005bb4 <HAL_I2C_Mem_Read+0x22c>)
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fb29 	bl	80060c8 <I2C_TransferConfig>
 8005a76:	e00f      	b.n	8005a98 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	8979      	ldrh	r1, [r7, #10]
 8005a8a:	4b4a      	ldr	r3, [pc, #296]	; (8005bb4 <HAL_I2C_Mem_Read+0x22c>)
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fb18 	bl	80060c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2104      	movs	r1, #4
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f956 	bl	8005d54 <I2C_WaitOnFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e07c      	b.n	8005bac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d034      	beq.n	8005b58 <HAL_I2C_Mem_Read+0x1d0>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d130      	bne.n	8005b58 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	2200      	movs	r2, #0
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f927 	bl	8005d54 <I2C_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e04d      	b.n	8005bac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2bff      	cmp	r3, #255	; 0xff
 8005b18:	d90e      	bls.n	8005b38 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	22ff      	movs	r2, #255	; 0xff
 8005b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	8979      	ldrh	r1, [r7, #10]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 fac9 	bl	80060c8 <I2C_TransferConfig>
 8005b36:	e00f      	b.n	8005b58 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	8979      	ldrh	r1, [r7, #10]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fab8 	bl	80060c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d19a      	bne.n	8005a98 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f98a 	bl	8005e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e01a      	b.n	8005bac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6859      	ldr	r1, [r3, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_I2C_Mem_Read+0x230>)
 8005b8a:	400b      	ands	r3, r1
 8005b8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e000      	b.n	8005bac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005baa:	2302      	movs	r3, #2
  }
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	80002400 	.word	0x80002400
 8005bb8:	fe00e800 	.word	0xfe00e800

08005bbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4603      	mov	r3, r0
 8005bcc:	817b      	strh	r3, [r7, #10]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	813b      	strh	r3, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	8979      	ldrh	r1, [r7, #10]
 8005bdc:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <I2C_RequestMemoryWrite+0xa4>)
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fa6f 	bl	80060c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	69b9      	ldr	r1, [r7, #24]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f8ff 	bl	8005df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e02c      	b.n	8005c58 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d105      	bne.n	8005c10 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c04:	893b      	ldrh	r3, [r7, #8]
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	629a      	str	r2, [r3, #40]	; 0x28
 8005c0e:	e015      	b.n	8005c3c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c10:	893b      	ldrh	r3, [r7, #8]
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	69b9      	ldr	r1, [r7, #24]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f8e5 	bl	8005df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e012      	b.n	8005c58 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c32:	893b      	ldrh	r3, [r7, #8]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2200      	movs	r2, #0
 8005c44:	2180      	movs	r1, #128	; 0x80
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f884 	bl	8005d54 <I2C_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	80002000 	.word	0x80002000

08005c64 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	4611      	mov	r1, r2
 8005c70:	461a      	mov	r2, r3
 8005c72:	4603      	mov	r3, r0
 8005c74:	817b      	strh	r3, [r7, #10]
 8005c76:	460b      	mov	r3, r1
 8005c78:	813b      	strh	r3, [r7, #8]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	8979      	ldrh	r1, [r7, #10]
 8005c84:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <I2C_RequestMemoryRead+0xa4>)
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fa1c 	bl	80060c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	69b9      	ldr	r1, [r7, #24]
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f8ac 	bl	8005df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e02c      	b.n	8005cfe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d105      	bne.n	8005cb6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005caa:	893b      	ldrh	r3, [r7, #8]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8005cb4:	e015      	b.n	8005ce2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cb6:	893b      	ldrh	r3, [r7, #8]
 8005cb8:	0a1b      	lsrs	r3, r3, #8
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	69b9      	ldr	r1, [r7, #24]
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f892 	bl	8005df2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e012      	b.n	8005cfe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cd8:	893b      	ldrh	r3, [r7, #8]
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2140      	movs	r1, #64	; 0x40
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f831 	bl	8005d54 <I2C_WaitOnFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e000      	b.n	8005cfe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	80002000 	.word	0x80002000

08005d0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d103      	bne.n	8005d2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2200      	movs	r2, #0
 8005d28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d007      	beq.n	8005d48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	619a      	str	r2, [r3, #24]
  }
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d64:	e031      	b.n	8005dca <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d02d      	beq.n	8005dca <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6e:	f7fb fb21 	bl	80013b4 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d302      	bcc.n	8005d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d122      	bne.n	8005dca <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	bf0c      	ite	eq
 8005d94:	2301      	moveq	r3, #1
 8005d96:	2300      	movne	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d113      	bne.n	8005dca <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da6:	f043 0220 	orr.w	r2, r3, #32
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e00f      	b.n	8005dea <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699a      	ldr	r2, [r3, #24]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	bf0c      	ite	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	2300      	movne	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d0be      	beq.n	8005d66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dfe:	e033      	b.n	8005e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f87f 	bl	8005f08 <I2C_IsErrorOccurred>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e031      	b.n	8005e78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d025      	beq.n	8005e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1c:	f7fb faca 	bl	80013b4 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d302      	bcc.n	8005e32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d11a      	bne.n	8005e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d013      	beq.n	8005e68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e44:	f043 0220 	orr.w	r2, r3, #32
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e007      	b.n	8005e78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d1c4      	bne.n	8005e00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e8c:	e02f      	b.n	8005eee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f838 	bl	8005f08 <I2C_IsErrorOccurred>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e02d      	b.n	8005efe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea2:	f7fb fa87 	bl	80013b4 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d302      	bcc.n	8005eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d11a      	bne.n	8005eee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d013      	beq.n	8005eee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e007      	b.n	8005efe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d1c8      	bne.n	8005e8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	; 0x28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f003 0310 	and.w	r3, r3, #16
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d068      	beq.n	8006006 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2210      	movs	r2, #16
 8005f3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f3c:	e049      	b.n	8005fd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d045      	beq.n	8005fd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f46:	f7fb fa35 	bl	80013b4 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d302      	bcc.n	8005f5c <I2C_IsErrorOccurred+0x54>
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d13a      	bne.n	8005fd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7e:	d121      	bne.n	8005fc4 <I2C_IsErrorOccurred+0xbc>
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f86:	d01d      	beq.n	8005fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f88:	7cfb      	ldrb	r3, [r7, #19]
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	d01a      	beq.n	8005fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f9e:	f7fb fa09 	bl	80013b4 <HAL_GetTick>
 8005fa2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fa4:	e00e      	b.n	8005fc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005fa6:	f7fb fa05 	bl	80013b4 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b19      	cmp	r3, #25
 8005fb2:	d907      	bls.n	8005fc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	f043 0320 	orr.w	r3, r3, #32
 8005fba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005fc2:	e006      	b.n	8005fd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d1e9      	bne.n	8005fa6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d003      	beq.n	8005fe8 <I2C_IsErrorOccurred+0xe0>
 8005fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0aa      	beq.n	8005f3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d103      	bne.n	8005ff8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	f043 0304 	orr.w	r3, r3, #4
 8005ffe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00b      	beq.n	8006030 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00b      	beq.n	8006052 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	f043 0308 	orr.w	r3, r3, #8
 8006040:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800604a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	f043 0302 	orr.w	r3, r3, #2
 8006062:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01c      	beq.n	80060b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7ff fe45 	bl	8005d0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6859      	ldr	r1, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <I2C_IsErrorOccurred+0x1bc>)
 800608e:	400b      	ands	r3, r1
 8006090:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	431a      	orrs	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80060b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3728      	adds	r7, #40	; 0x28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	fe00e800 	.word	0xfe00e800

080060c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	817b      	strh	r3, [r7, #10]
 80060d6:	4613      	mov	r3, r2
 80060d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060e0:	7a7b      	ldrb	r3, [r7, #9]
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	0d5b      	lsrs	r3, r3, #21
 8006102:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006106:	4b08      	ldr	r3, [pc, #32]	; (8006128 <I2C_TransferConfig+0x60>)
 8006108:	430b      	orrs	r3, r1
 800610a:	43db      	mvns	r3, r3
 800610c:	ea02 0103 	and.w	r1, r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	03ff63ff 	.word	0x03ff63ff

0800612c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b20      	cmp	r3, #32
 8006140:	d138      	bne.n	80061b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800614c:	2302      	movs	r3, #2
 800614e:	e032      	b.n	80061b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2224      	movs	r2, #36	; 0x24
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800617e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6819      	ldr	r1, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	d139      	bne.n	800624c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e033      	b.n	800624e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2224      	movs	r2, #36	; 0x24
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	e000      	b.n	800624e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800624c:	2302      	movs	r3, #2
  }
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800625a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625c:	b08f      	sub	sp, #60	; 0x3c
 800625e:	af0a      	add	r7, sp, #40	; 0x28
 8006260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e116      	b.n	800649a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f012 fbd4 	bl	8018a34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2203      	movs	r2, #3
 8006290:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f008 f8ff 	bl	800e4ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	687e      	ldr	r6, [r7, #4]
 80062b8:	466d      	mov	r5, sp
 80062ba:	f106 0410 	add.w	r4, r6, #16
 80062be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80062ce:	1d33      	adds	r3, r6, #4
 80062d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062d2:	6838      	ldr	r0, [r7, #0]
 80062d4:	f007 ffca 	bl	800e26c <USB_CoreInit>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2202      	movs	r2, #2
 80062e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e0d7      	b.n	800649a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f008 f8ed 	bl	800e4d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
 80062fa:	e04a      	b.n	8006392 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062fc:	7bfa      	ldrb	r2, [r7, #15]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	333d      	adds	r3, #61	; 0x3d
 800630c:	2201      	movs	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006310:	7bfa      	ldrb	r2, [r7, #15]
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	4613      	mov	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	333c      	adds	r3, #60	; 0x3c
 8006320:	7bfa      	ldrb	r2, [r7, #15]
 8006322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006324:	7bfa      	ldrb	r2, [r7, #15]
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	b298      	uxth	r0, r3
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	4613      	mov	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	3356      	adds	r3, #86	; 0x56
 8006338:	4602      	mov	r2, r0
 800633a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800633c:	7bfa      	ldrb	r2, [r7, #15]
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	4613      	mov	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	440b      	add	r3, r1
 800634a:	3340      	adds	r3, #64	; 0x40
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006350:	7bfa      	ldrb	r2, [r7, #15]
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	3344      	adds	r3, #68	; 0x44
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006364:	7bfa      	ldrb	r2, [r7, #15]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	3348      	adds	r3, #72	; 0x48
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006378:	7bfa      	ldrb	r2, [r7, #15]
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	334c      	adds	r3, #76	; 0x4c
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	3301      	adds	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
 8006392:	7bfa      	ldrb	r2, [r7, #15]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	429a      	cmp	r2, r3
 800639a:	d3af      	bcc.n	80062fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]
 80063a0:	e044      	b.n	800642c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80063a2:	7bfa      	ldrb	r2, [r7, #15]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80063b4:	2200      	movs	r2, #0
 80063b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80063b8:	7bfa      	ldrb	r2, [r7, #15]
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	4613      	mov	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	440b      	add	r3, r1
 80063c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80063ca:	7bfa      	ldrb	r2, [r7, #15]
 80063cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063ce:	7bfa      	ldrb	r2, [r7, #15]
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	4613      	mov	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063e4:	7bfa      	ldrb	r2, [r7, #15]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063fa:	7bfa      	ldrb	r2, [r7, #15]
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	4613      	mov	r3, r2
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006410:	7bfa      	ldrb	r2, [r7, #15]
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	3301      	adds	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
 800642c:	7bfa      	ldrb	r2, [r7, #15]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	429a      	cmp	r2, r3
 8006434:	d3b5      	bcc.n	80063a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	687e      	ldr	r6, [r7, #4]
 800643e:	466d      	mov	r5, sp
 8006440:	f106 0410 	add.w	r4, r6, #16
 8006444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800644a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800644c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006450:	e885 0003 	stmia.w	r5, {r0, r1}
 8006454:	1d33      	adds	r3, r6, #4
 8006456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006458:	6838      	ldr	r0, [r7, #0]
 800645a:	f008 f885 	bl	800e568 <USB_DevInit>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e014      	b.n	800649a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	2b01      	cmp	r3, #1
 8006486:	d102      	bne.n	800648e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 f99d 	bl	80077c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f009 f8c7 	bl	800f626 <USB_DevDisconnect>

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_PCD_Start+0x1c>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e022      	b.n	8006504 <HAL_PCD_Start+0x62>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d105      	bne.n	80064e6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f007 ffce 	bl	800e48c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f009 f875 	bl	800f5e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b08d      	sub	sp, #52	; 0x34
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f009 f933 	bl	800f78e <USB_GetMode>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	f040 84b7 	bne.w	8006e9e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f009 f897 	bl	800f668 <USB_ReadInterrupts>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 84ad 	beq.w	8006e9c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f009 f884 	bl	800f668 <USB_ReadInterrupts>
 8006560:	4603      	mov	r3, r0
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b02      	cmp	r3, #2
 8006568:	d107      	bne.n	800657a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695a      	ldr	r2, [r3, #20]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f002 0202 	and.w	r2, r2, #2
 8006578:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f009 f872 	bl	800f668 <USB_ReadInterrupts>
 8006584:	4603      	mov	r3, r0
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b10      	cmp	r3, #16
 800658c:	d161      	bne.n	8006652 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0210 	bic.w	r2, r2, #16
 800659c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	f003 020f 	and.w	r2, r3, #15
 80065aa:	4613      	mov	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	3304      	adds	r3, #4
 80065bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	0c5b      	lsrs	r3, r3, #17
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d124      	bne.n	8006614 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d035      	beq.n	8006642 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	091b      	lsrs	r3, r3, #4
 80065de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	6a38      	ldr	r0, [r7, #32]
 80065ea:	f008 fea9 	bl	800f340 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065fa:	441a      	add	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800660c:	441a      	add	r2, r3
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	615a      	str	r2, [r3, #20]
 8006612:	e016      	b.n	8006642 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	0c5b      	lsrs	r3, r3, #17
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	2b06      	cmp	r3, #6
 800661e:	d110      	bne.n	8006642 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006626:	2208      	movs	r2, #8
 8006628:	4619      	mov	r1, r3
 800662a:	6a38      	ldr	r0, [r7, #32]
 800662c:	f008 fe88 	bl	800f340 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	695a      	ldr	r2, [r3, #20]
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	091b      	lsrs	r3, r3, #4
 8006638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800663c:	441a      	add	r2, r3
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699a      	ldr	r2, [r3, #24]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0210 	orr.w	r2, r2, #16
 8006650:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f009 f806 	bl	800f668 <USB_ReadInterrupts>
 800665c:	4603      	mov	r3, r0
 800665e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006662:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006666:	f040 80a7 	bne.w	80067b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f009 f80b 	bl	800f68e <USB_ReadDevAllOutEpInterrupt>
 8006678:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800667a:	e099      	b.n	80067b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 808e 	beq.w	80067a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	4611      	mov	r1, r2
 8006692:	4618      	mov	r0, r3
 8006694:	f009 f82f 	bl	800f6f6 <USB_ReadDevOutEPInterrupt>
 8006698:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00c      	beq.n	80066be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b0:	461a      	mov	r2, r3
 80066b2:	2301      	movs	r3, #1
 80066b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80066b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 feff 	bl	80074bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00c      	beq.n	80066e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d4:	461a      	mov	r2, r3
 80066d6:	2308      	movs	r3, #8
 80066d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80066da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 ffd5 	bl	800768c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f003 0310 	and.w	r3, r3, #16
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	461a      	mov	r2, r3
 80066fa:	2310      	movs	r3, #16
 80066fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d030      	beq.n	800676a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006710:	2b80      	cmp	r3, #128	; 0x80
 8006712:	d109      	bne.n	8006728 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006726:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672a:	4613      	mov	r3, r2
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	4413      	add	r3, r2
 800673a:	3304      	adds	r3, #4
 800673c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	78db      	ldrb	r3, [r3, #3]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d108      	bne.n	8006758 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2200      	movs	r2, #0
 800674a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	b2db      	uxtb	r3, r3
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f012 fa94 	bl	8018c80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	461a      	mov	r2, r3
 8006766:	2302      	movs	r3, #2
 8006768:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	461a      	mov	r2, r3
 8006782:	2320      	movs	r3, #32
 8006784:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d009      	beq.n	80067a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	461a      	mov	r2, r3
 800679e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	3301      	adds	r3, #1
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f47f af62 	bne.w	800667c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	f008 ff53 	bl	800f668 <USB_ReadInterrupts>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067cc:	f040 80db 	bne.w	8006986 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f008 ff74 	bl	800f6c2 <USB_ReadDevAllInEpInterrupt>
 80067da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80067e0:	e0cd      	b.n	800697e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 80c2 	beq.w	8006972 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	4611      	mov	r1, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f008 ff9a 	bl	800f732 <USB_ReadDevInEPInterrupt>
 80067fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d057      	beq.n	80068ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	2201      	movs	r2, #1
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	43db      	mvns	r3, r3
 8006824:	69f9      	ldr	r1, [r7, #28]
 8006826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800682a:	4013      	ands	r3, r2
 800682c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683a:	461a      	mov	r2, r3
 800683c:	2301      	movs	r3, #1
 800683e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d132      	bne.n	80068ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684c:	4613      	mov	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	3348      	adds	r3, #72	; 0x48
 8006858:	6819      	ldr	r1, [r3, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685e:	4613      	mov	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4403      	add	r3, r0
 8006868:	3344      	adds	r3, #68	; 0x44
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4419      	add	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	4613      	mov	r3, r2
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4403      	add	r3, r0
 800687c:	3348      	adds	r3, #72	; 0x48
 800687e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d113      	bne.n	80068ae <HAL_PCD_IRQHandler+0x3a2>
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	4613      	mov	r3, r2
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	440b      	add	r3, r1
 8006894:	334c      	adds	r3, #76	; 0x4c
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d108      	bne.n	80068ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068a6:	461a      	mov	r2, r3
 80068a8:	2101      	movs	r1, #1
 80068aa:	f008 ffa3 	bl	800f7f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f012 f95e 	bl	8018b76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	461a      	mov	r2, r3
 80068d2:	2308      	movs	r3, #8
 80068d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ec:	461a      	mov	r2, r3
 80068ee:	2310      	movs	r3, #16
 80068f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006908:	461a      	mov	r2, r3
 800690a:	2340      	movs	r3, #64	; 0x40
 800690c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d023      	beq.n	8006960 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800691a:	6a38      	ldr	r0, [r7, #32]
 800691c:	f007 ff82 	bl	800e824 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006922:	4613      	mov	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	3338      	adds	r3, #56	; 0x38
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	4413      	add	r3, r2
 8006930:	3304      	adds	r3, #4
 8006932:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	78db      	ldrb	r3, [r3, #3]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d108      	bne.n	800694e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2200      	movs	r2, #0
 8006940:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	b2db      	uxtb	r3, r3
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f012 f9ab 	bl	8018ca4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695a:	461a      	mov	r2, r3
 800695c:	2302      	movs	r3, #2
 800695e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800696a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fd17 	bl	80073a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	3301      	adds	r3, #1
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	2b00      	cmp	r3, #0
 8006982:	f47f af2e 	bne.w	80067e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f008 fe6c 	bl	800f668 <USB_ReadInterrupts>
 8006990:	4603      	mov	r3, r0
 8006992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800699a:	d122      	bne.n	80069e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d108      	bne.n	80069cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80069c2:	2100      	movs	r1, #0
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 ff23 	bl	8007810 <HAL_PCDEx_LPM_Callback>
 80069ca:	e002      	b.n	80069d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f012 f949 	bl	8018c64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695a      	ldr	r2, [r3, #20]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80069e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f008 fe3e 	bl	800f668 <USB_ReadInterrupts>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f6:	d112      	bne.n	8006a1e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d102      	bne.n	8006a0e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f012 f905 	bl	8018c18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695a      	ldr	r2, [r3, #20]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f008 fe20 	bl	800f668 <USB_ReadInterrupts>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a32:	d121      	bne.n	8006a78 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006a42:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d111      	bne.n	8006a72 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5c:	089b      	lsrs	r3, r3, #2
 8006a5e:	f003 020f 	and.w	r2, r3, #15
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006a68:	2101      	movs	r1, #1
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fed0 	bl	8007810 <HAL_PCDEx_LPM_Callback>
 8006a70:	e002      	b.n	8006a78 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f012 f8d0 	bl	8018c18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f008 fdf3 	bl	800f668 <USB_ReadInterrupts>
 8006a82:	4603      	mov	r3, r0
 8006a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8c:	f040 80b7 	bne.w	8006bfe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	69fa      	ldr	r2, [r7, #28]
 8006a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2110      	movs	r1, #16
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f007 feba 	bl	800e824 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab4:	e046      	b.n	8006b44 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ac8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ae8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af6:	461a      	mov	r2, r3
 8006af8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006afc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	3301      	adds	r3, #1
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d3b3      	bcc.n	8006ab6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b5c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006b60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d016      	beq.n	8006b98 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b7a:	f043 030b 	orr.w	r3, r3, #11
 8006b7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b90:	f043 030b 	orr.w	r3, r3, #11
 8006b94:	6453      	str	r3, [r2, #68]	; 0x44
 8006b96:	e015      	b.n	8006bc4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9e:	695a      	ldr	r2, [r3, #20]
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	f242 032b 	movw	r3, #8235	; 0x202b
 8006bac:	4313      	orrs	r3, r2
 8006bae:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bbe:	f043 030b 	orr.w	r3, r3, #11
 8006bc2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bd2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006bd6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006be8:	461a      	mov	r2, r3
 8006bea:	f008 fe03 	bl	800f7f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695a      	ldr	r2, [r3, #20]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f008 fd30 	bl	800f668 <USB_ReadInterrupts>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c12:	d124      	bne.n	8006c5e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f008 fdc7 	bl	800f7ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f007 fe7b 	bl	800e91e <USB_GetDevSpeed>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681c      	ldr	r4, [r3, #0]
 8006c34:	f001 fe36 	bl	80088a4 <HAL_RCC_GetHCLKFreq>
 8006c38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	4620      	mov	r0, r4
 8006c44:	f007 fb80 	bl	800e348 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f011 ffbc 	bl	8018bc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f008 fd00 	bl	800f668 <USB_ReadInterrupts>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d10a      	bne.n	8006c88 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f011 ff99 	bl	8018baa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695a      	ldr	r2, [r3, #20]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f002 0208 	and.w	r2, r2, #8
 8006c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f008 fceb 	bl	800f668 <USB_ReadInterrupts>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c98:	2b80      	cmp	r3, #128	; 0x80
 8006c9a:	d122      	bne.n	8006ce2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ca8:	2301      	movs	r3, #1
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
 8006cac:	e014      	b.n	8006cd8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d105      	bne.n	8006cd2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fb09 	bl	80072e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d3e5      	bcc.n	8006cae <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f008 fcbe 	bl	800f668 <USB_ReadInterrupts>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf6:	d13b      	bne.n	8006d70 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfc:	e02b      	b.n	8006d56 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d12:	4613      	mov	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3340      	adds	r3, #64	; 0x40
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d115      	bne.n	8006d50 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006d24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da12      	bge.n	8006d50 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2e:	4613      	mov	r3, r2
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	333f      	adds	r3, #63	; 0x3f
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 faca 	bl	80072e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	3301      	adds	r3, #1
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d3ce      	bcc.n	8006cfe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695a      	ldr	r2, [r3, #20]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f008 fc77 	bl	800f668 <USB_ReadInterrupts>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d84:	d155      	bne.n	8006e32 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d86:	2301      	movs	r3, #1
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8a:	e045      	b.n	8006e18 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da0:	4613      	mov	r3, r2
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d12e      	bne.n	8006e12 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006db4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da2b      	bge.n	8006e12 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006dc6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d121      	bne.n	8006e12 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	440b      	add	r3, r1
 8006ddc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006de0:	2201      	movs	r2, #1
 8006de2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e0e:	6053      	str	r3, [r2, #4]
            break;
 8006e10:	e007      	b.n	8006e22 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	3301      	adds	r3, #1
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d3b4      	bcc.n	8006d8c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695a      	ldr	r2, [r3, #20]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f008 fc16 	bl	800f668 <USB_ReadInterrupts>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e46:	d10a      	bne.n	8006e5e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f011 ff3d 	bl	8018cc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695a      	ldr	r2, [r3, #20]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f008 fc00 	bl	800f668 <USB_ReadInterrupts>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d115      	bne.n	8006e9e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f011 ff2d 	bl	8018ce4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6859      	ldr	r1, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	e000      	b.n	8006e9e <HAL_PCD_IRQHandler+0x992>
      return;
 8006e9c:	bf00      	nop
    }
  }
}
 8006e9e:	3734      	adds	r7, #52	; 0x34
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd90      	pop	{r4, r7, pc}

08006ea4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_PCD_SetAddress+0x1a>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e013      	b.n	8006ee6 <HAL_PCD_SetAddress+0x42>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	78fa      	ldrb	r2, [r7, #3]
 8006eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	78fa      	ldrb	r2, [r7, #3]
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f008 fb5e 	bl	800f598 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	4608      	mov	r0, r1
 8006ef8:	4611      	mov	r1, r2
 8006efa:	461a      	mov	r2, r3
 8006efc:	4603      	mov	r3, r0
 8006efe:	70fb      	strb	r3, [r7, #3]
 8006f00:	460b      	mov	r3, r1
 8006f02:	803b      	strh	r3, [r7, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	da0f      	bge.n	8006f34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	f003 020f 	and.w	r2, r3, #15
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	00db      	lsls	r3, r3, #3
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	3338      	adds	r3, #56	; 0x38
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	4413      	add	r3, r2
 8006f28:	3304      	adds	r3, #4
 8006f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	705a      	strb	r2, [r3, #1]
 8006f32:	e00f      	b.n	8006f54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	f003 020f 	and.w	r2, r3, #15
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	4413      	add	r3, r2
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006f60:	883a      	ldrh	r2, [r7, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	78ba      	ldrb	r2, [r7, #2]
 8006f6a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006f7e:	78bb      	ldrb	r3, [r7, #2]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d102      	bne.n	8006f8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_PCD_EP_Open+0xaa>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e00e      	b.n	8006fb6 <HAL_PCD_EP_Open+0xc8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68f9      	ldr	r1, [r7, #12]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f007 fcde 	bl	800e968 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006fb4:	7afb      	ldrb	r3, [r7, #11]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006fca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da0f      	bge.n	8006ff2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	f003 020f 	and.w	r2, r3, #15
 8006fd8:	4613      	mov	r3, r2
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	3338      	adds	r3, #56	; 0x38
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	705a      	strb	r2, [r3, #1]
 8006ff0:	e00f      	b.n	8007012 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	f003 020f 	and.w	r2, r3, #15
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4413      	add	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	4413      	add	r3, r2
 8007008:	3304      	adds	r3, #4
 800700a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	b2da      	uxtb	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_PCD_EP_Close+0x6e>
 8007028:	2302      	movs	r3, #2
 800702a:	e00e      	b.n	800704a <HAL_PCD_EP_Close+0x8c>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68f9      	ldr	r1, [r7, #12]
 800703a:	4618      	mov	r0, r3
 800703c:	f007 fd1c 	bl	800ea78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
 800705e:	460b      	mov	r3, r1
 8007060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007062:	7afb      	ldrb	r3, [r7, #11]
 8007064:	f003 020f 	and.w	r2, r3, #15
 8007068:	4613      	mov	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	3304      	adds	r3, #4
 800707a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2200      	movs	r2, #0
 800708c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2200      	movs	r2, #0
 8007092:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007094:	7afb      	ldrb	r3, [r7, #11]
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	b2da      	uxtb	r2, r3
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d102      	bne.n	80070ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	461a      	mov	r2, r3
 80070ba:	6979      	ldr	r1, [r7, #20]
 80070bc:	f007 fdb8 	bl	800ec30 <USB_EPStartXfer>

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	f003 020f 	and.w	r2, r3, #15
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80070ec:	681b      	ldr	r3, [r3, #0]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b086      	sub	sp, #24
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
 8007106:	460b      	mov	r3, r1
 8007108:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800710a:	7afb      	ldrb	r3, [r7, #11]
 800710c:	f003 020f 	and.w	r2, r3, #15
 8007110:	4613      	mov	r3, r2
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	3338      	adds	r3, #56	; 0x38
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	3304      	adds	r3, #4
 8007120:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2200      	movs	r2, #0
 8007132:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2201      	movs	r2, #1
 8007138:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800713a:	7afb      	ldrb	r3, [r7, #11]
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	b2da      	uxtb	r2, r3
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d102      	bne.n	8007154 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	461a      	mov	r2, r3
 8007160:	6979      	ldr	r1, [r7, #20]
 8007162:	f007 fd65 	bl	800ec30 <USB_EPStartXfer>

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	f003 020f 	and.w	r2, r3, #15
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	429a      	cmp	r2, r3
 8007188:	d901      	bls.n	800718e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e050      	b.n	8007230 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800718e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007192:	2b00      	cmp	r3, #0
 8007194:	da0f      	bge.n	80071b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	f003 020f 	and.w	r2, r3, #15
 800719c:	4613      	mov	r3, r2
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	3338      	adds	r3, #56	; 0x38
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	4413      	add	r3, r2
 80071aa:	3304      	adds	r3, #4
 80071ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	705a      	strb	r2, [r3, #1]
 80071b4:	e00d      	b.n	80071d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80071b6:	78fa      	ldrb	r2, [r7, #3]
 80071b8:	4613      	mov	r3, r2
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4413      	add	r3, r2
 80071c8:	3304      	adds	r3, #4
 80071ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_PCD_EP_SetStall+0x82>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e01e      	b.n	8007230 <HAL_PCD_EP_SetStall+0xc0>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	4618      	mov	r0, r3
 8007202:	f008 f8f5 	bl	800f3f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	b2d9      	uxtb	r1, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007220:	461a      	mov	r2, r3
 8007222:	f008 fae7 	bl	800f7f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	f003 020f 	and.w	r2, r3, #15
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	429a      	cmp	r2, r3
 8007250:	d901      	bls.n	8007256 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e042      	b.n	80072dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800725a:	2b00      	cmp	r3, #0
 800725c:	da0f      	bge.n	800727e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	f003 020f 	and.w	r2, r3, #15
 8007264:	4613      	mov	r3, r2
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	3338      	adds	r3, #56	; 0x38
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	4413      	add	r3, r2
 8007272:	3304      	adds	r3, #4
 8007274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2201      	movs	r2, #1
 800727a:	705a      	strb	r2, [r3, #1]
 800727c:	e00f      	b.n	800729e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	f003 020f 	and.w	r2, r3, #15
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4413      	add	r3, r2
 8007294:	3304      	adds	r3, #4
 8007296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d101      	bne.n	80072be <HAL_PCD_EP_ClrStall+0x86>
 80072ba:	2302      	movs	r3, #2
 80072bc:	e00e      	b.n	80072dc <HAL_PCD_EP_ClrStall+0xa4>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f008 f8fd 	bl	800f4cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80072f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	da0c      	bge.n	8007312 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072f8:	78fb      	ldrb	r3, [r7, #3]
 80072fa:	f003 020f 	and.w	r2, r3, #15
 80072fe:	4613      	mov	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	3338      	adds	r3, #56	; 0x38
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	4413      	add	r3, r2
 800730c:	3304      	adds	r3, #4
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e00c      	b.n	800732c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	f003 020f 	and.w	r2, r3, #15
 8007318:	4613      	mov	r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	3304      	adds	r3, #4
 800732a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68f9      	ldr	r1, [r7, #12]
 8007332:	4618      	mov	r0, r3
 8007334:	f007 ff1c 	bl	800f170 <USB_EPStopXfer>
 8007338:	4603      	mov	r3, r0
 800733a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800733c:	7afb      	ldrb	r3, [r7, #11]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_PCD_EP_Flush+0x1a>
 800735c:	2302      	movs	r3, #2
 800735e:	e01b      	b.n	8007398 <HAL_PCD_EP_Flush+0x52>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800736c:	2b00      	cmp	r3, #0
 800736e:	da09      	bge.n	8007384 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f007 fa51 	bl	800e824 <USB_FlushTxFifo>
 8007382:	e004      	b.n	800738e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4618      	mov	r0, r3
 800738a:	f007 fa7f 	bl	800e88c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	; 0x28
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	3338      	adds	r3, #56	; 0x38
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	3304      	adds	r3, #4
 80073c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	695a      	ldr	r2, [r3, #20]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d901      	bls.n	80073d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e06c      	b.n	80074b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d902      	bls.n	80073f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	3303      	adds	r3, #3
 80073f8:	089b      	lsrs	r3, r3, #2
 80073fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80073fc:	e02b      	b.n	8007456 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	429a      	cmp	r2, r3
 8007412:	d902      	bls.n	800741a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	3303      	adds	r3, #3
 800741e:	089b      	lsrs	r3, r3, #2
 8007420:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	68d9      	ldr	r1, [r3, #12]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	b2da      	uxtb	r2, r3
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007432:	b2db      	uxtb	r3, r3
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	4603      	mov	r3, r0
 8007438:	6978      	ldr	r0, [r7, #20]
 800743a:	f007 ff43 	bl	800f2c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	441a      	add	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	695a      	ldr	r2, [r3, #20]
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	441a      	add	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	429a      	cmp	r2, r3
 800746a:	d809      	bhi.n	8007480 <PCD_WriteEmptyTxFifo+0xe0>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	695a      	ldr	r2, [r3, #20]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007474:	429a      	cmp	r2, r3
 8007476:	d203      	bcs.n	8007480 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1be      	bne.n	80073fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	429a      	cmp	r2, r3
 800748a:	d811      	bhi.n	80074b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	f003 030f 	and.w	r3, r3, #15
 8007492:	2201      	movs	r2, #1
 8007494:	fa02 f303 	lsl.w	r3, r2, r3
 8007498:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	43db      	mvns	r3, r3
 80074a6:	6939      	ldr	r1, [r7, #16]
 80074a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074ac:	4013      	ands	r3, r2
 80074ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3720      	adds	r7, #32
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	333c      	adds	r3, #60	; 0x3c
 80074d4:	3304      	adds	r3, #4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d17b      	bne.n	80075ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d015      	beq.n	8007528 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	4a61      	ldr	r2, [pc, #388]	; (8007684 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	f240 80b9 	bls.w	8007678 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 80b3 	beq.w	8007678 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751e:	461a      	mov	r2, r3
 8007520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007524:	6093      	str	r3, [r2, #8]
 8007526:	e0a7      	b.n	8007678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b00      	cmp	r3, #0
 8007530:	d009      	beq.n	8007546 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753e:	461a      	mov	r2, r3
 8007540:	2320      	movs	r3, #32
 8007542:	6093      	str	r3, [r2, #8]
 8007544:	e098      	b.n	8007678 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 8093 	bne.w	8007678 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	4a4b      	ldr	r2, [pc, #300]	; (8007684 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d90f      	bls.n	800757a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007570:	461a      	mov	r2, r3
 8007572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007576:	6093      	str	r3, [r2, #8]
 8007578:	e07e      	b.n	8007678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4613      	mov	r3, r2
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	4413      	add	r3, r2
 800758c:	3304      	adds	r3, #4
 800758e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a1a      	ldr	r2, [r3, #32]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	0159      	lsls	r1, r3, #5
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	440b      	add	r3, r1
 800759c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075a6:	1ad2      	subs	r2, r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d114      	bne.n	80075dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80075c4:	461a      	mov	r2, r3
 80075c6:	2101      	movs	r1, #1
 80075c8:	f008 f914 	bl	800f7f4 <USB_EP0_OutStart>
 80075cc:	e006      	b.n	80075dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	441a      	add	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f011 faac 	bl	8018b40 <HAL_PCD_DataOutStageCallback>
 80075e8:	e046      	b.n	8007678 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	4a26      	ldr	r2, [pc, #152]	; (8007688 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d124      	bne.n	800763c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007608:	461a      	mov	r2, r3
 800760a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800760e:	6093      	str	r3, [r2, #8]
 8007610:	e032      	b.n	8007678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007628:	461a      	mov	r2, r3
 800762a:	2320      	movs	r3, #32
 800762c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f011 fa83 	bl	8018b40 <HAL_PCD_DataOutStageCallback>
 800763a:	e01d      	b.n	8007678 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d114      	bne.n	800766c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	4613      	mov	r3, r2
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	440b      	add	r3, r1
 8007650:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d108      	bne.n	800766c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007664:	461a      	mov	r2, r3
 8007666:	2100      	movs	r1, #0
 8007668:	f008 f8c4 	bl	800f7f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f011 fa64 	bl	8018b40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3720      	adds	r7, #32
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	4f54300a 	.word	0x4f54300a
 8007688:	4f54310a 	.word	0x4f54310a

0800768c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	333c      	adds	r3, #60	; 0x3c
 80076a4:	3304      	adds	r3, #4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4a15      	ldr	r2, [pc, #84]	; (8007714 <PCD_EP_OutSetupPacket_int+0x88>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d90e      	bls.n	80076e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d009      	beq.n	80076e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d8:	461a      	mov	r2, r3
 80076da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f011 fa1b 	bl	8018b1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4a0a      	ldr	r2, [pc, #40]	; (8007714 <PCD_EP_OutSetupPacket_int+0x88>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d90c      	bls.n	8007708 <PCD_EP_OutSetupPacket_int+0x7c>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d108      	bne.n	8007708 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007700:	461a      	mov	r2, r3
 8007702:	2101      	movs	r1, #1
 8007704:	f008 f876 	bl	800f7f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	4f54300a 	.word	0x4f54300a

08007718 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
 8007724:	4613      	mov	r3, r2
 8007726:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d107      	bne.n	8007746 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007736:	883b      	ldrh	r3, [r7, #0]
 8007738:	0419      	lsls	r1, r3, #16
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	430a      	orrs	r2, r1
 8007742:	629a      	str	r2, [r3, #40]	; 0x28
 8007744:	e028      	b.n	8007798 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4413      	add	r3, r2
 8007752:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	e00d      	b.n	8007776 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	3340      	adds	r3, #64	; 0x40
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	0c1b      	lsrs	r3, r3, #16
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	3301      	adds	r3, #1
 8007774:	73fb      	strb	r3, [r7, #15]
 8007776:	7bfa      	ldrb	r2, [r7, #15]
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	3b01      	subs	r3, #1
 800777c:	429a      	cmp	r2, r3
 800777e:	d3ec      	bcc.n	800775a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007780:	883b      	ldrh	r3, [r7, #0]
 8007782:	0418      	lsls	r0, r3, #16
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6819      	ldr	r1, [r3, #0]
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	3b01      	subs	r3, #1
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	4302      	orrs	r2, r0
 8007790:	3340      	adds	r3, #64	; 0x40
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	887a      	ldrh	r2, [r7, #2]
 80077b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077f6:	4b05      	ldr	r3, [pc, #20]	; (800780c <HAL_PCDEx_ActivateLPM+0x44>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	10000003 	.word	0x10000003

08007810 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007830:	4b19      	ldr	r3, [pc, #100]	; (8007898 <HAL_PWREx_ConfigSupply+0x70>)
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b04      	cmp	r3, #4
 800783a:	d00a      	beq.n	8007852 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800783c:	4b16      	ldr	r3, [pc, #88]	; (8007898 <HAL_PWREx_ConfigSupply+0x70>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	429a      	cmp	r2, r3
 8007848:	d001      	beq.n	800784e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e01f      	b.n	800788e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	e01d      	b.n	800788e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007852:	4b11      	ldr	r3, [pc, #68]	; (8007898 <HAL_PWREx_ConfigSupply+0x70>)
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f023 0207 	bic.w	r2, r3, #7
 800785a:	490f      	ldr	r1, [pc, #60]	; (8007898 <HAL_PWREx_ConfigSupply+0x70>)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4313      	orrs	r3, r2
 8007860:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007862:	f7f9 fda7 	bl	80013b4 <HAL_GetTick>
 8007866:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007868:	e009      	b.n	800787e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800786a:	f7f9 fda3 	bl	80013b4 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007878:	d901      	bls.n	800787e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e007      	b.n	800788e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800787e:	4b06      	ldr	r3, [pc, #24]	; (8007898 <HAL_PWREx_ConfigSupply+0x70>)
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800788a:	d1ee      	bne.n	800786a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	58024800 	.word	0x58024800

0800789c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	4a04      	ldr	r2, [pc, #16]	; (80078b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80078a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078aa:	60d3      	str	r3, [r2, #12]
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	58024800 	.word	0x58024800

080078bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08c      	sub	sp, #48	; 0x30
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d102      	bne.n	80078d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f000 bc48 	b.w	8008160 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 8088 	beq.w	80079ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078de:	4b99      	ldr	r3, [pc, #612]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078e8:	4b96      	ldr	r3, [pc, #600]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 80078ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f0:	2b10      	cmp	r3, #16
 80078f2:	d007      	beq.n	8007904 <HAL_RCC_OscConfig+0x48>
 80078f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f6:	2b18      	cmp	r3, #24
 80078f8:	d111      	bne.n	800791e <HAL_RCC_OscConfig+0x62>
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d10c      	bne.n	800791e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007904:	4b8f      	ldr	r3, [pc, #572]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d06d      	beq.n	80079ec <HAL_RCC_OscConfig+0x130>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d169      	bne.n	80079ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	f000 bc21 	b.w	8008160 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007926:	d106      	bne.n	8007936 <HAL_RCC_OscConfig+0x7a>
 8007928:	4b86      	ldr	r3, [pc, #536]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a85      	ldr	r2, [pc, #532]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 800792e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	e02e      	b.n	8007994 <HAL_RCC_OscConfig+0xd8>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10c      	bne.n	8007958 <HAL_RCC_OscConfig+0x9c>
 800793e:	4b81      	ldr	r3, [pc, #516]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a80      	ldr	r2, [pc, #512]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	4b7e      	ldr	r3, [pc, #504]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a7d      	ldr	r2, [pc, #500]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	e01d      	b.n	8007994 <HAL_RCC_OscConfig+0xd8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007960:	d10c      	bne.n	800797c <HAL_RCC_OscConfig+0xc0>
 8007962:	4b78      	ldr	r3, [pc, #480]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a77      	ldr	r2, [pc, #476]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	4b75      	ldr	r3, [pc, #468]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a74      	ldr	r2, [pc, #464]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	e00b      	b.n	8007994 <HAL_RCC_OscConfig+0xd8>
 800797c:	4b71      	ldr	r3, [pc, #452]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a70      	ldr	r2, [pc, #448]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	4b6e      	ldr	r3, [pc, #440]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a6d      	ldr	r2, [pc, #436]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 800798e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d013      	beq.n	80079c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7f9 fd0a 	bl	80013b4 <HAL_GetTick>
 80079a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079a4:	f7f9 fd06 	bl	80013b4 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b64      	cmp	r3, #100	; 0x64
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e3d4      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079b6:	4b63      	ldr	r3, [pc, #396]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0f0      	beq.n	80079a4 <HAL_RCC_OscConfig+0xe8>
 80079c2:	e014      	b.n	80079ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c4:	f7f9 fcf6 	bl	80013b4 <HAL_GetTick>
 80079c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079cc:	f7f9 fcf2 	bl	80013b4 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b64      	cmp	r3, #100	; 0x64
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e3c0      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079de:	4b59      	ldr	r3, [pc, #356]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f0      	bne.n	80079cc <HAL_RCC_OscConfig+0x110>
 80079ea:	e000      	b.n	80079ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 80ca 	beq.w	8007b90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079fc:	4b51      	ldr	r3, [pc, #324]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a06:	4b4f      	ldr	r3, [pc, #316]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d007      	beq.n	8007a22 <HAL_RCC_OscConfig+0x166>
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	2b18      	cmp	r3, #24
 8007a16:	d156      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x20a>
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d151      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a22:	4b48      	ldr	r3, [pc, #288]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0304 	and.w	r3, r3, #4
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d005      	beq.n	8007a3a <HAL_RCC_OscConfig+0x17e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e392      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a3a:	4b42      	ldr	r3, [pc, #264]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f023 0219 	bic.w	r2, r3, #25
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	493f      	ldr	r1, [pc, #252]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4c:	f7f9 fcb2 	bl	80013b4 <HAL_GetTick>
 8007a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a54:	f7f9 fcae 	bl	80013b4 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e37c      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a66:	4b37      	ldr	r3, [pc, #220]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0f0      	beq.n	8007a54 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a72:	f7f9 fccf 	bl	8001414 <HAL_GetREVID>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d817      	bhi.n	8007ab0 <HAL_RCC_OscConfig+0x1f4>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b40      	cmp	r3, #64	; 0x40
 8007a86:	d108      	bne.n	8007a9a <HAL_RCC_OscConfig+0x1de>
 8007a88:	4b2e      	ldr	r3, [pc, #184]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a90:	4a2c      	ldr	r2, [pc, #176]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a96:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a98:	e07a      	b.n	8007b90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a9a:	4b2a      	ldr	r3, [pc, #168]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	031b      	lsls	r3, r3, #12
 8007aa8:	4926      	ldr	r1, [pc, #152]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007aae:	e06f      	b.n	8007b90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab0:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	061b      	lsls	r3, r3, #24
 8007abe:	4921      	ldr	r1, [pc, #132]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ac4:	e064      	b.n	8007b90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d047      	beq.n	8007b5e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ace:	4b1d      	ldr	r3, [pc, #116]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f023 0219 	bic.w	r2, r3, #25
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	491a      	ldr	r1, [pc, #104]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae0:	f7f9 fc68 	bl	80013b4 <HAL_GetTick>
 8007ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ae8:	f7f9 fc64 	bl	80013b4 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e332      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007afa:	4b12      	ldr	r3, [pc, #72]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0f0      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b06:	f7f9 fc85 	bl	8001414 <HAL_GetREVID>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d819      	bhi.n	8007b48 <HAL_RCC_OscConfig+0x28c>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	2b40      	cmp	r3, #64	; 0x40
 8007b1a:	d108      	bne.n	8007b2e <HAL_RCC_OscConfig+0x272>
 8007b1c:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b24:	4a07      	ldr	r2, [pc, #28]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b2a:	6053      	str	r3, [r2, #4]
 8007b2c:	e030      	b.n	8007b90 <HAL_RCC_OscConfig+0x2d4>
 8007b2e:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	031b      	lsls	r3, r3, #12
 8007b3c:	4901      	ldr	r1, [pc, #4]	; (8007b44 <HAL_RCC_OscConfig+0x288>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	604b      	str	r3, [r1, #4]
 8007b42:	e025      	b.n	8007b90 <HAL_RCC_OscConfig+0x2d4>
 8007b44:	58024400 	.word	0x58024400
 8007b48:	4b9a      	ldr	r3, [pc, #616]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	061b      	lsls	r3, r3, #24
 8007b56:	4997      	ldr	r1, [pc, #604]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	604b      	str	r3, [r1, #4]
 8007b5c:	e018      	b.n	8007b90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b5e:	4b95      	ldr	r3, [pc, #596]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a94      	ldr	r2, [pc, #592]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6a:	f7f9 fc23 	bl	80013b4 <HAL_GetTick>
 8007b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b70:	e008      	b.n	8007b84 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b72:	f7f9 fc1f 	bl	80013b4 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e2ed      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b84:	4b8b      	ldr	r3, [pc, #556]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1f0      	bne.n	8007b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0310 	and.w	r3, r3, #16
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 80a9 	beq.w	8007cf0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b9e:	4b85      	ldr	r3, [pc, #532]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ba6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ba8:	4b82      	ldr	r3, [pc, #520]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d007      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x308>
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	2b18      	cmp	r3, #24
 8007bb8:	d13a      	bne.n	8007c30 <HAL_RCC_OscConfig+0x374>
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f003 0303 	and.w	r3, r3, #3
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d135      	bne.n	8007c30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007bc4:	4b7b      	ldr	r3, [pc, #492]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <HAL_RCC_OscConfig+0x320>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	2b80      	cmp	r3, #128	; 0x80
 8007bd6:	d001      	beq.n	8007bdc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e2c1      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007bdc:	f7f9 fc1a 	bl	8001414 <HAL_GetREVID>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d817      	bhi.n	8007c1a <HAL_RCC_OscConfig+0x35e>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d108      	bne.n	8007c04 <HAL_RCC_OscConfig+0x348>
 8007bf2:	4b70      	ldr	r3, [pc, #448]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007bfa:	4a6e      	ldr	r2, [pc, #440]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c00:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c02:	e075      	b.n	8007cf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c04:	4b6b      	ldr	r3, [pc, #428]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	069b      	lsls	r3, r3, #26
 8007c12:	4968      	ldr	r1, [pc, #416]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c18:	e06a      	b.n	8007cf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c1a:	4b66      	ldr	r3, [pc, #408]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	061b      	lsls	r3, r3, #24
 8007c28:	4962      	ldr	r1, [pc, #392]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c2e:	e05f      	b.n	8007cf0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d042      	beq.n	8007cbe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c38:	4b5e      	ldr	r3, [pc, #376]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a5d      	ldr	r2, [pc, #372]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c44:	f7f9 fbb6 	bl	80013b4 <HAL_GetTick>
 8007c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c4c:	f7f9 fbb2 	bl	80013b4 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e280      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c5e:	4b55      	ldr	r3, [pc, #340]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0f0      	beq.n	8007c4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c6a:	f7f9 fbd3 	bl	8001414 <HAL_GetREVID>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d817      	bhi.n	8007ca8 <HAL_RCC_OscConfig+0x3ec>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	2b20      	cmp	r3, #32
 8007c7e:	d108      	bne.n	8007c92 <HAL_RCC_OscConfig+0x3d6>
 8007c80:	4b4c      	ldr	r3, [pc, #304]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007c88:	4a4a      	ldr	r2, [pc, #296]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c8e:	6053      	str	r3, [r2, #4]
 8007c90:	e02e      	b.n	8007cf0 <HAL_RCC_OscConfig+0x434>
 8007c92:	4b48      	ldr	r3, [pc, #288]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	069b      	lsls	r3, r3, #26
 8007ca0:	4944      	ldr	r1, [pc, #272]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	604b      	str	r3, [r1, #4]
 8007ca6:	e023      	b.n	8007cf0 <HAL_RCC_OscConfig+0x434>
 8007ca8:	4b42      	ldr	r3, [pc, #264]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	061b      	lsls	r3, r3, #24
 8007cb6:	493f      	ldr	r1, [pc, #252]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60cb      	str	r3, [r1, #12]
 8007cbc:	e018      	b.n	8007cf0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007cbe:	4b3d      	ldr	r3, [pc, #244]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a3c      	ldr	r2, [pc, #240]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cca:	f7f9 fb73 	bl	80013b4 <HAL_GetTick>
 8007cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cd0:	e008      	b.n	8007ce4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007cd2:	f7f9 fb6f 	bl	80013b4 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d901      	bls.n	8007ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e23d      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ce4:	4b33      	ldr	r3, [pc, #204]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1f0      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d036      	beq.n	8007d6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d019      	beq.n	8007d38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d04:	4b2b      	ldr	r3, [pc, #172]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d08:	4a2a      	ldr	r2, [pc, #168]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007d0a:	f043 0301 	orr.w	r3, r3, #1
 8007d0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d10:	f7f9 fb50 	bl	80013b4 <HAL_GetTick>
 8007d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d16:	e008      	b.n	8007d2a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d18:	f7f9 fb4c 	bl	80013b4 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e21a      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d2a:	4b22      	ldr	r3, [pc, #136]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0f0      	beq.n	8007d18 <HAL_RCC_OscConfig+0x45c>
 8007d36:	e018      	b.n	8007d6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d38:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d3c:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007d3e:	f023 0301 	bic.w	r3, r3, #1
 8007d42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d44:	f7f9 fb36 	bl	80013b4 <HAL_GetTick>
 8007d48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d4c:	f7f9 fb32 	bl	80013b4 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e200      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d5e:	4b15      	ldr	r3, [pc, #84]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f0      	bne.n	8007d4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0320 	and.w	r3, r3, #32
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d039      	beq.n	8007dea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01c      	beq.n	8007db8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d7e:	4b0d      	ldr	r3, [pc, #52]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a0c      	ldr	r2, [pc, #48]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d8a:	f7f9 fb13 	bl	80013b4 <HAL_GetTick>
 8007d8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d90:	e008      	b.n	8007da4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d92:	f7f9 fb0f 	bl	80013b4 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d901      	bls.n	8007da4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e1dd      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007da4:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <HAL_RCC_OscConfig+0x4f8>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0f0      	beq.n	8007d92 <HAL_RCC_OscConfig+0x4d6>
 8007db0:	e01b      	b.n	8007dea <HAL_RCC_OscConfig+0x52e>
 8007db2:	bf00      	nop
 8007db4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007db8:	4b9b      	ldr	r3, [pc, #620]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a9a      	ldr	r2, [pc, #616]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007dc4:	f7f9 faf6 	bl	80013b4 <HAL_GetTick>
 8007dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dcc:	f7f9 faf2 	bl	80013b4 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e1c0      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dde:	4b92      	ldr	r3, [pc, #584]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1f0      	bne.n	8007dcc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0304 	and.w	r3, r3, #4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 8081 	beq.w	8007efa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007df8:	4b8c      	ldr	r3, [pc, #560]	; (800802c <HAL_RCC_OscConfig+0x770>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a8b      	ldr	r2, [pc, #556]	; (800802c <HAL_RCC_OscConfig+0x770>)
 8007dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e04:	f7f9 fad6 	bl	80013b4 <HAL_GetTick>
 8007e08:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e0c:	f7f9 fad2 	bl	80013b4 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b64      	cmp	r3, #100	; 0x64
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e1a0      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e1e:	4b83      	ldr	r3, [pc, #524]	; (800802c <HAL_RCC_OscConfig+0x770>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f0      	beq.n	8007e0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d106      	bne.n	8007e40 <HAL_RCC_OscConfig+0x584>
 8007e32:	4b7d      	ldr	r3, [pc, #500]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e36:	4a7c      	ldr	r2, [pc, #496]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e38:	f043 0301 	orr.w	r3, r3, #1
 8007e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e3e:	e02d      	b.n	8007e9c <HAL_RCC_OscConfig+0x5e0>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10c      	bne.n	8007e62 <HAL_RCC_OscConfig+0x5a6>
 8007e48:	4b77      	ldr	r3, [pc, #476]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4c:	4a76      	ldr	r2, [pc, #472]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e4e:	f023 0301 	bic.w	r3, r3, #1
 8007e52:	6713      	str	r3, [r2, #112]	; 0x70
 8007e54:	4b74      	ldr	r3, [pc, #464]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e58:	4a73      	ldr	r2, [pc, #460]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e5a:	f023 0304 	bic.w	r3, r3, #4
 8007e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8007e60:	e01c      	b.n	8007e9c <HAL_RCC_OscConfig+0x5e0>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	d10c      	bne.n	8007e84 <HAL_RCC_OscConfig+0x5c8>
 8007e6a:	4b6f      	ldr	r3, [pc, #444]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6e:	4a6e      	ldr	r2, [pc, #440]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e70:	f043 0304 	orr.w	r3, r3, #4
 8007e74:	6713      	str	r3, [r2, #112]	; 0x70
 8007e76:	4b6c      	ldr	r3, [pc, #432]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7a:	4a6b      	ldr	r2, [pc, #428]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e7c:	f043 0301 	orr.w	r3, r3, #1
 8007e80:	6713      	str	r3, [r2, #112]	; 0x70
 8007e82:	e00b      	b.n	8007e9c <HAL_RCC_OscConfig+0x5e0>
 8007e84:	4b68      	ldr	r3, [pc, #416]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e88:	4a67      	ldr	r2, [pc, #412]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e8a:	f023 0301 	bic.w	r3, r3, #1
 8007e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8007e90:	4b65      	ldr	r3, [pc, #404]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e94:	4a64      	ldr	r2, [pc, #400]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007e96:	f023 0304 	bic.w	r3, r3, #4
 8007e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d015      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea4:	f7f9 fa86 	bl	80013b4 <HAL_GetTick>
 8007ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eaa:	e00a      	b.n	8007ec2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eac:	f7f9 fa82 	bl	80013b4 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e14e      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ec2:	4b59      	ldr	r3, [pc, #356]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0ee      	beq.n	8007eac <HAL_RCC_OscConfig+0x5f0>
 8007ece:	e014      	b.n	8007efa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed0:	f7f9 fa70 	bl	80013b4 <HAL_GetTick>
 8007ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ed6:	e00a      	b.n	8007eee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ed8:	f7f9 fa6c 	bl	80013b4 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e138      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007eee:	4b4e      	ldr	r3, [pc, #312]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1ee      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 812d 	beq.w	800815e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f04:	4b48      	ldr	r3, [pc, #288]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f0c:	2b18      	cmp	r3, #24
 8007f0e:	f000 80bd 	beq.w	800808c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	f040 809e 	bne.w	8008058 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f1c:	4b42      	ldr	r3, [pc, #264]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a41      	ldr	r2, [pc, #260]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f28:	f7f9 fa44 	bl	80013b4 <HAL_GetTick>
 8007f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f30:	f7f9 fa40 	bl	80013b4 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e10e      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f42:	4b39      	ldr	r3, [pc, #228]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1f0      	bne.n	8007f30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f4e:	4b36      	ldr	r3, [pc, #216]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f52:	4b37      	ldr	r3, [pc, #220]	; (8008030 <HAL_RCC_OscConfig+0x774>)
 8007f54:	4013      	ands	r3, r2
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f5e:	0112      	lsls	r2, r2, #4
 8007f60:	430a      	orrs	r2, r1
 8007f62:	4931      	ldr	r1, [pc, #196]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	628b      	str	r3, [r1, #40]	; 0x28
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f76:	3b01      	subs	r3, #1
 8007f78:	025b      	lsls	r3, r3, #9
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	3b01      	subs	r3, #1
 8007f84:	041b      	lsls	r3, r3, #16
 8007f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f90:	3b01      	subs	r3, #1
 8007f92:	061b      	lsls	r3, r3, #24
 8007f94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f98:	4923      	ldr	r1, [pc, #140]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007f9e:	4b22      	ldr	r3, [pc, #136]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	4a21      	ldr	r2, [pc, #132]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007fa4:	f023 0301 	bic.w	r3, r3, #1
 8007fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007faa:	4b1f      	ldr	r3, [pc, #124]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fae:	4b21      	ldr	r3, [pc, #132]	; (8008034 <HAL_RCC_OscConfig+0x778>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fb6:	00d2      	lsls	r2, r2, #3
 8007fb8:	491b      	ldr	r1, [pc, #108]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007fbe:	4b1a      	ldr	r3, [pc, #104]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	f023 020c 	bic.w	r2, r3, #12
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	4917      	ldr	r1, [pc, #92]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007fd0:	4b15      	ldr	r3, [pc, #84]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	f023 0202 	bic.w	r2, r3, #2
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fdc:	4912      	ldr	r1, [pc, #72]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fe2:	4b11      	ldr	r3, [pc, #68]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	4a10      	ldr	r2, [pc, #64]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fee:	4b0e      	ldr	r3, [pc, #56]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff2:	4a0d      	ldr	r2, [pc, #52]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ffa:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8007ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffe:	4a0a      	ldr	r2, [pc, #40]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8008000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008006:	4b08      	ldr	r3, [pc, #32]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8008008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800a:	4a07      	ldr	r2, [pc, #28]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 800800c:	f043 0301 	orr.w	r3, r3, #1
 8008010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a04      	ldr	r2, [pc, #16]	; (8008028 <HAL_RCC_OscConfig+0x76c>)
 8008018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800801c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801e:	f7f9 f9c9 	bl	80013b4 <HAL_GetTick>
 8008022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008024:	e011      	b.n	800804a <HAL_RCC_OscConfig+0x78e>
 8008026:	bf00      	nop
 8008028:	58024400 	.word	0x58024400
 800802c:	58024800 	.word	0x58024800
 8008030:	fffffc0c 	.word	0xfffffc0c
 8008034:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008038:	f7f9 f9bc 	bl	80013b4 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e08a      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800804a:	4b47      	ldr	r3, [pc, #284]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0f0      	beq.n	8008038 <HAL_RCC_OscConfig+0x77c>
 8008056:	e082      	b.n	800815e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008058:	4b43      	ldr	r3, [pc, #268]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a42      	ldr	r2, [pc, #264]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 800805e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008064:	f7f9 f9a6 	bl	80013b4 <HAL_GetTick>
 8008068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800806a:	e008      	b.n	800807e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800806c:	f7f9 f9a2 	bl	80013b4 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d901      	bls.n	800807e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e070      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800807e:	4b3a      	ldr	r3, [pc, #232]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1f0      	bne.n	800806c <HAL_RCC_OscConfig+0x7b0>
 800808a:	e068      	b.n	800815e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800808c:	4b36      	ldr	r3, [pc, #216]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008092:	4b35      	ldr	r3, [pc, #212]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 8008094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008096:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	2b01      	cmp	r3, #1
 800809e:	d031      	beq.n	8008104 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f003 0203 	and.w	r2, r3, #3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d12a      	bne.n	8008104 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	091b      	lsrs	r3, r3, #4
 80080b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d122      	bne.n	8008104 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d11a      	bne.n	8008104 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	0a5b      	lsrs	r3, r3, #9
 80080d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080dc:	429a      	cmp	r2, r3
 80080de:	d111      	bne.n	8008104 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	0c1b      	lsrs	r3, r3, #16
 80080e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d108      	bne.n	8008104 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	0e1b      	lsrs	r3, r3, #24
 80080f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008100:	429a      	cmp	r2, r3
 8008102:	d001      	beq.n	8008108 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e02b      	b.n	8008160 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008108:	4b17      	ldr	r3, [pc, #92]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 800810a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810c:	08db      	lsrs	r3, r3, #3
 800810e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008112:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	429a      	cmp	r2, r3
 800811c:	d01f      	beq.n	800815e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800811e:	4b12      	ldr	r3, [pc, #72]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	4a11      	ldr	r2, [pc, #68]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 8008124:	f023 0301 	bic.w	r3, r3, #1
 8008128:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800812a:	f7f9 f943 	bl	80013b4 <HAL_GetTick>
 800812e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008130:	bf00      	nop
 8008132:	f7f9 f93f 	bl	80013b4 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	4293      	cmp	r3, r2
 800813c:	d0f9      	beq.n	8008132 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800813e:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 8008140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008142:	4b0a      	ldr	r3, [pc, #40]	; (800816c <HAL_RCC_OscConfig+0x8b0>)
 8008144:	4013      	ands	r3, r2
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800814a:	00d2      	lsls	r2, r2, #3
 800814c:	4906      	ldr	r1, [pc, #24]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 800814e:	4313      	orrs	r3, r2
 8008150:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 8008154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008156:	4a04      	ldr	r2, [pc, #16]	; (8008168 <HAL_RCC_OscConfig+0x8ac>)
 8008158:	f043 0301 	orr.w	r3, r3, #1
 800815c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3730      	adds	r7, #48	; 0x30
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	58024400 	.word	0x58024400
 800816c:	ffff0007 	.word	0xffff0007

08008170 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e19c      	b.n	80084be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008184:	4b8a      	ldr	r3, [pc, #552]	; (80083b0 <HAL_RCC_ClockConfig+0x240>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d910      	bls.n	80081b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008192:	4b87      	ldr	r3, [pc, #540]	; (80083b0 <HAL_RCC_ClockConfig+0x240>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f023 020f 	bic.w	r2, r3, #15
 800819a:	4985      	ldr	r1, [pc, #532]	; (80083b0 <HAL_RCC_ClockConfig+0x240>)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	4313      	orrs	r3, r2
 80081a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081a2:	4b83      	ldr	r3, [pc, #524]	; (80083b0 <HAL_RCC_ClockConfig+0x240>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d001      	beq.n	80081b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e184      	b.n	80084be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d010      	beq.n	80081e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	4b7b      	ldr	r3, [pc, #492]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d908      	bls.n	80081e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081d0:	4b78      	ldr	r3, [pc, #480]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	4975      	ldr	r1, [pc, #468]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0308 	and.w	r3, r3, #8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d010      	beq.n	8008210 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	695a      	ldr	r2, [r3, #20]
 80081f2:	4b70      	ldr	r3, [pc, #448]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d908      	bls.n	8008210 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80081fe:	4b6d      	ldr	r3, [pc, #436]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	496a      	ldr	r1, [pc, #424]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 800820c:	4313      	orrs	r3, r2
 800820e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b00      	cmp	r3, #0
 800821a:	d010      	beq.n	800823e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699a      	ldr	r2, [r3, #24]
 8008220:	4b64      	ldr	r3, [pc, #400]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008228:	429a      	cmp	r2, r3
 800822a:	d908      	bls.n	800823e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800822c:	4b61      	ldr	r3, [pc, #388]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	495e      	ldr	r1, [pc, #376]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 800823a:	4313      	orrs	r3, r2
 800823c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d010      	beq.n	800826c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69da      	ldr	r2, [r3, #28]
 800824e:	4b59      	ldr	r3, [pc, #356]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008256:	429a      	cmp	r2, r3
 8008258:	d908      	bls.n	800826c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800825a:	4b56      	ldr	r3, [pc, #344]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	4953      	ldr	r1, [pc, #332]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 8008268:	4313      	orrs	r3, r2
 800826a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d010      	beq.n	800829a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68da      	ldr	r2, [r3, #12]
 800827c:	4b4d      	ldr	r3, [pc, #308]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	f003 030f 	and.w	r3, r3, #15
 8008284:	429a      	cmp	r2, r3
 8008286:	d908      	bls.n	800829a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008288:	4b4a      	ldr	r3, [pc, #296]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	f023 020f 	bic.w	r2, r3, #15
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	4947      	ldr	r1, [pc, #284]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 8008296:	4313      	orrs	r3, r2
 8008298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d055      	beq.n	8008352 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80082a6:	4b43      	ldr	r3, [pc, #268]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	4940      	ldr	r1, [pc, #256]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d107      	bne.n	80082d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082c0:	4b3c      	ldr	r3, [pc, #240]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d121      	bne.n	8008310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e0f6      	b.n	80084be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d107      	bne.n	80082e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082d8:	4b36      	ldr	r3, [pc, #216]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d115      	bne.n	8008310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e0ea      	b.n	80084be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d107      	bne.n	8008300 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082f0:	4b30      	ldr	r3, [pc, #192]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d109      	bne.n	8008310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e0de      	b.n	80084be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008300:	4b2c      	ldr	r3, [pc, #176]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e0d6      	b.n	80084be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008310:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	f023 0207 	bic.w	r2, r3, #7
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	4925      	ldr	r1, [pc, #148]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 800831e:	4313      	orrs	r3, r2
 8008320:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008322:	f7f9 f847 	bl	80013b4 <HAL_GetTick>
 8008326:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008328:	e00a      	b.n	8008340 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800832a:	f7f9 f843 	bl	80013b4 <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	f241 3288 	movw	r2, #5000	; 0x1388
 8008338:	4293      	cmp	r3, r2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e0be      	b.n	80084be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008340:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	429a      	cmp	r2, r3
 8008350:	d1eb      	bne.n	800832a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d010      	beq.n	8008380 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	4b14      	ldr	r3, [pc, #80]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	429a      	cmp	r2, r3
 800836c:	d208      	bcs.n	8008380 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800836e:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	f023 020f 	bic.w	r2, r3, #15
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	490e      	ldr	r1, [pc, #56]	; (80083b4 <HAL_RCC_ClockConfig+0x244>)
 800837c:	4313      	orrs	r3, r2
 800837e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008380:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <HAL_RCC_ClockConfig+0x240>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d214      	bcs.n	80083b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800838e:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <HAL_RCC_ClockConfig+0x240>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f023 020f 	bic.w	r2, r3, #15
 8008396:	4906      	ldr	r1, [pc, #24]	; (80083b0 <HAL_RCC_ClockConfig+0x240>)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	4313      	orrs	r3, r2
 800839c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800839e:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <HAL_RCC_ClockConfig+0x240>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 030f 	and.w	r3, r3, #15
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d005      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e086      	b.n	80084be <HAL_RCC_ClockConfig+0x34e>
 80083b0:	52002000 	.word	0x52002000
 80083b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d010      	beq.n	80083e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691a      	ldr	r2, [r3, #16]
 80083c8:	4b3f      	ldr	r3, [pc, #252]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d208      	bcs.n	80083e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083d4:	4b3c      	ldr	r3, [pc, #240]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	4939      	ldr	r1, [pc, #228]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0308 	and.w	r3, r3, #8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d010      	beq.n	8008414 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695a      	ldr	r2, [r3, #20]
 80083f6:	4b34      	ldr	r3, [pc, #208]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083fe:	429a      	cmp	r2, r3
 8008400:	d208      	bcs.n	8008414 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008402:	4b31      	ldr	r3, [pc, #196]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	492e      	ldr	r1, [pc, #184]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 8008410:	4313      	orrs	r3, r2
 8008412:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b00      	cmp	r3, #0
 800841e:	d010      	beq.n	8008442 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699a      	ldr	r2, [r3, #24]
 8008424:	4b28      	ldr	r3, [pc, #160]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800842c:	429a      	cmp	r2, r3
 800842e:	d208      	bcs.n	8008442 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008430:	4b25      	ldr	r3, [pc, #148]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	4922      	ldr	r1, [pc, #136]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 800843e:	4313      	orrs	r3, r2
 8008440:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	2b00      	cmp	r3, #0
 800844c:	d010      	beq.n	8008470 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	69da      	ldr	r2, [r3, #28]
 8008452:	4b1d      	ldr	r3, [pc, #116]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800845a:	429a      	cmp	r2, r3
 800845c:	d208      	bcs.n	8008470 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800845e:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	4917      	ldr	r1, [pc, #92]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 800846c:	4313      	orrs	r3, r2
 800846e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008470:	f000 f89e 	bl	80085b0 <HAL_RCC_GetSysClockFreq>
 8008474:	4602      	mov	r2, r0
 8008476:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	0a1b      	lsrs	r3, r3, #8
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	4912      	ldr	r1, [pc, #72]	; (80084cc <HAL_RCC_ClockConfig+0x35c>)
 8008482:	5ccb      	ldrb	r3, [r1, r3]
 8008484:	f003 031f 	and.w	r3, r3, #31
 8008488:	fa22 f303 	lsr.w	r3, r2, r3
 800848c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800848e:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <HAL_RCC_ClockConfig+0x358>)
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	4a0d      	ldr	r2, [pc, #52]	; (80084cc <HAL_RCC_ClockConfig+0x35c>)
 8008498:	5cd3      	ldrb	r3, [r2, r3]
 800849a:	f003 031f 	and.w	r3, r3, #31
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	fa22 f303 	lsr.w	r3, r2, r3
 80084a4:	4a0a      	ldr	r2, [pc, #40]	; (80084d0 <HAL_RCC_ClockConfig+0x360>)
 80084a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084a8:	4a0a      	ldr	r2, [pc, #40]	; (80084d4 <HAL_RCC_ClockConfig+0x364>)
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80084ae:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <HAL_RCC_ClockConfig+0x368>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7f8 ff34 	bl	8001320 <HAL_InitTick>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	58024400 	.word	0x58024400
 80084cc:	0801bc04 	.word	0x0801bc04
 80084d0:	24000004 	.word	0x24000004
 80084d4:	24000000 	.word	0x24000000
 80084d8:	24000008 	.word	0x24000008

080084dc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08c      	sub	sp, #48	; 0x30
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d12a      	bne.n	8008544 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80084ee:	4b2d      	ldr	r3, [pc, #180]	; (80085a4 <HAL_RCC_MCOConfig+0xc8>)
 80084f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084f4:	4a2b      	ldr	r2, [pc, #172]	; (80085a4 <HAL_RCC_MCOConfig+0xc8>)
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084fe:	4b29      	ldr	r3, [pc, #164]	; (80085a4 <HAL_RCC_MCOConfig+0xc8>)
 8008500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	61bb      	str	r3, [r7, #24]
 800850a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800850c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008512:	2302      	movs	r3, #2
 8008514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008516:	2303      	movs	r3, #3
 8008518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800851a:	2300      	movs	r3, #0
 800851c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800851e:	2300      	movs	r3, #0
 8008520:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008522:	f107 031c 	add.w	r3, r7, #28
 8008526:	4619      	mov	r1, r3
 8008528:	481f      	ldr	r0, [pc, #124]	; (80085a8 <HAL_RCC_MCOConfig+0xcc>)
 800852a:	f7fc febf 	bl	80052ac <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800852e:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <HAL_RCC_MCOConfig+0xc8>)
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8008536:	68b9      	ldr	r1, [r7, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	430b      	orrs	r3, r1
 800853c:	4919      	ldr	r1, [pc, #100]	; (80085a4 <HAL_RCC_MCOConfig+0xc8>)
 800853e:	4313      	orrs	r3, r2
 8008540:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8008542:	e02a      	b.n	800859a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008544:	4b17      	ldr	r3, [pc, #92]	; (80085a4 <HAL_RCC_MCOConfig+0xc8>)
 8008546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800854a:	4a16      	ldr	r2, [pc, #88]	; (80085a4 <HAL_RCC_MCOConfig+0xc8>)
 800854c:	f043 0304 	orr.w	r3, r3, #4
 8008550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008554:	4b13      	ldr	r3, [pc, #76]	; (80085a4 <HAL_RCC_MCOConfig+0xc8>)
 8008556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800855a:	f003 0304 	and.w	r3, r3, #4
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008568:	2302      	movs	r3, #2
 800856a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800856c:	2303      	movs	r3, #3
 800856e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008570:	2300      	movs	r3, #0
 8008572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008574:	2300      	movs	r3, #0
 8008576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008578:	f107 031c 	add.w	r3, r7, #28
 800857c:	4619      	mov	r1, r3
 800857e:	480b      	ldr	r0, [pc, #44]	; (80085ac <HAL_RCC_MCOConfig+0xd0>)
 8008580:	f7fc fe94 	bl	80052ac <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8008584:	4b07      	ldr	r3, [pc, #28]	; (80085a4 <HAL_RCC_MCOConfig+0xc8>)
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	01d9      	lsls	r1, r3, #7
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	430b      	orrs	r3, r1
 8008594:	4903      	ldr	r1, [pc, #12]	; (80085a4 <HAL_RCC_MCOConfig+0xc8>)
 8008596:	4313      	orrs	r3, r2
 8008598:	610b      	str	r3, [r1, #16]
}
 800859a:	bf00      	nop
 800859c:	3730      	adds	r7, #48	; 0x30
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	58024400 	.word	0x58024400
 80085a8:	58020000 	.word	0x58020000
 80085ac:	58020800 	.word	0x58020800

080085b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b089      	sub	sp, #36	; 0x24
 80085b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085b6:	4bb3      	ldr	r3, [pc, #716]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085be:	2b18      	cmp	r3, #24
 80085c0:	f200 8155 	bhi.w	800886e <HAL_RCC_GetSysClockFreq+0x2be>
 80085c4:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	08008631 	.word	0x08008631
 80085d0:	0800886f 	.word	0x0800886f
 80085d4:	0800886f 	.word	0x0800886f
 80085d8:	0800886f 	.word	0x0800886f
 80085dc:	0800886f 	.word	0x0800886f
 80085e0:	0800886f 	.word	0x0800886f
 80085e4:	0800886f 	.word	0x0800886f
 80085e8:	0800886f 	.word	0x0800886f
 80085ec:	08008657 	.word	0x08008657
 80085f0:	0800886f 	.word	0x0800886f
 80085f4:	0800886f 	.word	0x0800886f
 80085f8:	0800886f 	.word	0x0800886f
 80085fc:	0800886f 	.word	0x0800886f
 8008600:	0800886f 	.word	0x0800886f
 8008604:	0800886f 	.word	0x0800886f
 8008608:	0800886f 	.word	0x0800886f
 800860c:	0800865d 	.word	0x0800865d
 8008610:	0800886f 	.word	0x0800886f
 8008614:	0800886f 	.word	0x0800886f
 8008618:	0800886f 	.word	0x0800886f
 800861c:	0800886f 	.word	0x0800886f
 8008620:	0800886f 	.word	0x0800886f
 8008624:	0800886f 	.word	0x0800886f
 8008628:	0800886f 	.word	0x0800886f
 800862c:	08008663 	.word	0x08008663
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008630:	4b94      	ldr	r3, [pc, #592]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0320 	and.w	r3, r3, #32
 8008638:	2b00      	cmp	r3, #0
 800863a:	d009      	beq.n	8008650 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800863c:	4b91      	ldr	r3, [pc, #580]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	08db      	lsrs	r3, r3, #3
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	4a90      	ldr	r2, [pc, #576]	; (8008888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008648:	fa22 f303 	lsr.w	r3, r2, r3
 800864c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800864e:	e111      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008650:	4b8d      	ldr	r3, [pc, #564]	; (8008888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008652:	61bb      	str	r3, [r7, #24]
      break;
 8008654:	e10e      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008656:	4b8d      	ldr	r3, [pc, #564]	; (800888c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008658:	61bb      	str	r3, [r7, #24]
      break;
 800865a:	e10b      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800865c:	4b8c      	ldr	r3, [pc, #560]	; (8008890 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800865e:	61bb      	str	r3, [r7, #24]
      break;
 8008660:	e108      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008662:	4b88      	ldr	r3, [pc, #544]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800866c:	4b85      	ldr	r3, [pc, #532]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	091b      	lsrs	r3, r3, #4
 8008672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008676:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008678:	4b82      	ldr	r3, [pc, #520]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008682:	4b80      	ldr	r3, [pc, #512]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008686:	08db      	lsrs	r3, r3, #3
 8008688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	fb02 f303 	mul.w	r3, r2, r3
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 80e1 	beq.w	8008868 <HAL_RCC_GetSysClockFreq+0x2b8>
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	f000 8083 	beq.w	80087b4 <HAL_RCC_GetSysClockFreq+0x204>
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	f200 80a1 	bhi.w	80087f8 <HAL_RCC_GetSysClockFreq+0x248>
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <HAL_RCC_GetSysClockFreq+0x114>
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d056      	beq.n	8008770 <HAL_RCC_GetSysClockFreq+0x1c0>
 80086c2:	e099      	b.n	80087f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086c4:	4b6f      	ldr	r3, [pc, #444]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0320 	and.w	r3, r3, #32
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d02d      	beq.n	800872c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086d0:	4b6c      	ldr	r3, [pc, #432]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	08db      	lsrs	r3, r3, #3
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	4a6b      	ldr	r2, [pc, #428]	; (8008888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086dc:	fa22 f303 	lsr.w	r3, r2, r3
 80086e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	ee07 3a90 	vmov	s15, r3
 80086e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	4b62      	ldr	r3, [pc, #392]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a02 	vldr	s12, [r7, #8]
 800870e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800872a:	e087      	b.n	800883c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008898 <HAL_RCC_GetSysClockFreq+0x2e8>
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b51      	ldr	r3, [pc, #324]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008752:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800876e:	e065      	b.n	800883c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800889c <HAL_RCC_GetSysClockFreq+0x2ec>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b40      	ldr	r3, [pc, #256]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a02 	vldr	s12, [r7, #8]
 8008796:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008894 <HAL_RCC_GetSysClockFreq+0x2e4>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80087b2:	e043      	b.n	800883c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80088a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c6:	4b2f      	ldr	r3, [pc, #188]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008894 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80087f6:	e021      	b.n	800883c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	eddf 6a26 	vldr	s13, [pc, #152]	; 800889c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880a:	4b1e      	ldr	r3, [pc, #120]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a02 	vldr	s12, [r7, #8]
 800881e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800883a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800883c:	4b11      	ldr	r3, [pc, #68]	; (8008884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	0a5b      	lsrs	r3, r3, #9
 8008842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008846:	3301      	adds	r3, #1
 8008848:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	ee07 3a90 	vmov	s15, r3
 8008850:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008854:	edd7 6a07 	vldr	s13, [r7, #28]
 8008858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800885c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008860:	ee17 3a90 	vmov	r3, s15
 8008864:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008866:	e005      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	61bb      	str	r3, [r7, #24]
      break;
 800886c:	e002      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800886e:	4b07      	ldr	r3, [pc, #28]	; (800888c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008870:	61bb      	str	r3, [r7, #24]
      break;
 8008872:	bf00      	nop
  }

  return sysclockfreq;
 8008874:	69bb      	ldr	r3, [r7, #24]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3724      	adds	r7, #36	; 0x24
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	58024400 	.word	0x58024400
 8008888:	03d09000 	.word	0x03d09000
 800888c:	003d0900 	.word	0x003d0900
 8008890:	00b71b00 	.word	0x00b71b00
 8008894:	46000000 	.word	0x46000000
 8008898:	4c742400 	.word	0x4c742400
 800889c:	4a742400 	.word	0x4a742400
 80088a0:	4b371b00 	.word	0x4b371b00

080088a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088aa:	f7ff fe81 	bl	80085b0 <HAL_RCC_GetSysClockFreq>
 80088ae:	4602      	mov	r2, r0
 80088b0:	4b10      	ldr	r3, [pc, #64]	; (80088f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	0a1b      	lsrs	r3, r3, #8
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	490f      	ldr	r1, [pc, #60]	; (80088f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80088bc:	5ccb      	ldrb	r3, [r1, r3]
 80088be:	f003 031f 	and.w	r3, r3, #31
 80088c2:	fa22 f303 	lsr.w	r3, r2, r3
 80088c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088c8:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	4a09      	ldr	r2, [pc, #36]	; (80088f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80088d2:	5cd3      	ldrb	r3, [r2, r3]
 80088d4:	f003 031f 	and.w	r3, r3, #31
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	fa22 f303 	lsr.w	r3, r2, r3
 80088de:	4a07      	ldr	r2, [pc, #28]	; (80088fc <HAL_RCC_GetHCLKFreq+0x58>)
 80088e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088e2:	4a07      	ldr	r2, [pc, #28]	; (8008900 <HAL_RCC_GetHCLKFreq+0x5c>)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80088e8:	4b04      	ldr	r3, [pc, #16]	; (80088fc <HAL_RCC_GetHCLKFreq+0x58>)
 80088ea:	681b      	ldr	r3, [r3, #0]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	58024400 	.word	0x58024400
 80088f8:	0801bc04 	.word	0x0801bc04
 80088fc:	24000004 	.word	0x24000004
 8008900:	24000000 	.word	0x24000000

08008904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008908:	f7ff ffcc 	bl	80088a4 <HAL_RCC_GetHCLKFreq>
 800890c:	4602      	mov	r2, r0
 800890e:	4b06      	ldr	r3, [pc, #24]	; (8008928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	091b      	lsrs	r3, r3, #4
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	4904      	ldr	r1, [pc, #16]	; (800892c <HAL_RCC_GetPCLK1Freq+0x28>)
 800891a:	5ccb      	ldrb	r3, [r1, r3]
 800891c:	f003 031f 	and.w	r3, r3, #31
 8008920:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008924:	4618      	mov	r0, r3
 8008926:	bd80      	pop	{r7, pc}
 8008928:	58024400 	.word	0x58024400
 800892c:	0801bc04 	.word	0x0801bc04

08008930 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008934:	b0ca      	sub	sp, #296	; 0x128
 8008936:	af00      	add	r7, sp, #0
 8008938:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800893c:	2300      	movs	r3, #0
 800893e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008942:	2300      	movs	r3, #0
 8008944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008954:	2500      	movs	r5, #0
 8008956:	ea54 0305 	orrs.w	r3, r4, r5
 800895a:	d049      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800895c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008962:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008966:	d02f      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008968:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800896c:	d828      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800896e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008972:	d01a      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008978:	d822      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800897e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008982:	d007      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008984:	e01c      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008986:	4bb8      	ldr	r3, [pc, #736]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	4ab7      	ldr	r2, [pc, #732]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800898c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008992:	e01a      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008998:	3308      	adds	r3, #8
 800899a:	2102      	movs	r1, #2
 800899c:	4618      	mov	r0, r3
 800899e:	f002 fb61 	bl	800b064 <RCCEx_PLL2_Config>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089a8:	e00f      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ae:	3328      	adds	r3, #40	; 0x28
 80089b0:	2102      	movs	r1, #2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f002 fc08 	bl	800b1c8 <RCCEx_PLL3_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089be:	e004      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089c6:	e000      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80089c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10a      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80089d2:	4ba5      	ldr	r3, [pc, #660]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e0:	4aa1      	ldr	r2, [pc, #644]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089e2:	430b      	orrs	r3, r1
 80089e4:	6513      	str	r3, [r2, #80]	; 0x50
 80089e6:	e003      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80089f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80089fc:	f04f 0900 	mov.w	r9, #0
 8008a00:	ea58 0309 	orrs.w	r3, r8, r9
 8008a04:	d047      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d82a      	bhi.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a10:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a2d 	.word	0x08008a2d
 8008a1c:	08008a3b 	.word	0x08008a3b
 8008a20:	08008a51 	.word	0x08008a51
 8008a24:	08008a6f 	.word	0x08008a6f
 8008a28:	08008a6f 	.word	0x08008a6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a2c:	4b8e      	ldr	r3, [pc, #568]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a30:	4a8d      	ldr	r2, [pc, #564]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a38:	e01a      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a3e:	3308      	adds	r3, #8
 8008a40:	2100      	movs	r1, #0
 8008a42:	4618      	mov	r0, r3
 8008a44:	f002 fb0e 	bl	800b064 <RCCEx_PLL2_Config>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a4e:	e00f      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a54:	3328      	adds	r3, #40	; 0x28
 8008a56:	2100      	movs	r1, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f002 fbb5 	bl	800b1c8 <RCCEx_PLL3_Config>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a64:	e004      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a6c:	e000      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a78:	4b7b      	ldr	r3, [pc, #492]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7c:	f023 0107 	bic.w	r1, r3, #7
 8008a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	4a78      	ldr	r2, [pc, #480]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	6513      	str	r3, [r2, #80]	; 0x50
 8008a8c:	e003      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008aa2:	f04f 0b00 	mov.w	fp, #0
 8008aa6:	ea5a 030b 	orrs.w	r3, sl, fp
 8008aaa:	d04c      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab6:	d030      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008abc:	d829      	bhi.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008abe:	2bc0      	cmp	r3, #192	; 0xc0
 8008ac0:	d02d      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8008ac4:	d825      	bhi.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ac6:	2b80      	cmp	r3, #128	; 0x80
 8008ac8:	d018      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008aca:	2b80      	cmp	r3, #128	; 0x80
 8008acc:	d821      	bhi.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008ad2:	2b40      	cmp	r3, #64	; 0x40
 8008ad4:	d007      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008ad6:	e01c      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad8:	4b63      	ldr	r3, [pc, #396]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	4a62      	ldr	r2, [pc, #392]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ae4:	e01c      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aea:	3308      	adds	r3, #8
 8008aec:	2100      	movs	r1, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f002 fab8 	bl	800b064 <RCCEx_PLL2_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008afa:	e011      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b00:	3328      	adds	r3, #40	; 0x28
 8008b02:	2100      	movs	r1, #0
 8008b04:	4618      	mov	r0, r3
 8008b06:	f002 fb5f 	bl	800b1c8 <RCCEx_PLL3_Config>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b10:	e006      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b18:	e002      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b1a:	bf00      	nop
 8008b1c:	e000      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b28:	4b4f      	ldr	r3, [pc, #316]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b36:	4a4c      	ldr	r2, [pc, #304]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	6513      	str	r3, [r2, #80]	; 0x50
 8008b3c:	e003      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008b52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008b56:	2300      	movs	r3, #0
 8008b58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008b5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008b60:	460b      	mov	r3, r1
 8008b62:	4313      	orrs	r3, r2
 8008b64:	d053      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b72:	d035      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008b74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b78:	d82e      	bhi.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b7e:	d031      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008b80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b84:	d828      	bhi.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b8a:	d01a      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b90:	d822      	bhi.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b9a:	d007      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008b9c:	e01c      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b9e:	4b32      	ldr	r3, [pc, #200]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba2:	4a31      	ldr	r2, [pc, #196]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008baa:	e01c      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bb0:	3308      	adds	r3, #8
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f002 fa55 	bl	800b064 <RCCEx_PLL2_Config>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008bc0:	e011      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc6:	3328      	adds	r3, #40	; 0x28
 8008bc8:	2100      	movs	r1, #0
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f002 fafc 	bl	800b1c8 <RCCEx_PLL3_Config>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bd6:	e006      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bde:	e002      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008be0:	bf00      	nop
 8008be2:	e000      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008be6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10b      	bne.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008bee:	4b1e      	ldr	r3, [pc, #120]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008bfe:	4a1a      	ldr	r2, [pc, #104]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c00:	430b      	orrs	r3, r1
 8008c02:	6593      	str	r3, [r2, #88]	; 0x58
 8008c04:	e003      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008c1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008c24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	d056      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c3a:	d038      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c40:	d831      	bhi.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c46:	d034      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008c48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c4c:	d82b      	bhi.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c52:	d01d      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c58:	d825      	bhi.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d006      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008c5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c62:	d00a      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008c64:	e01f      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c66:	bf00      	nop
 8008c68:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c6c:	4ba2      	ldr	r3, [pc, #648]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	4aa1      	ldr	r2, [pc, #644]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c78:	e01c      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c7e:	3308      	adds	r3, #8
 8008c80:	2100      	movs	r1, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f002 f9ee 	bl	800b064 <RCCEx_PLL2_Config>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008c8e:	e011      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c94:	3328      	adds	r3, #40	; 0x28
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f002 fa95 	bl	800b1c8 <RCCEx_PLL3_Config>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ca4:	e006      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cac:	e002      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008cae:	bf00      	nop
 8008cb0:	e000      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10b      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008cbc:	4b8e      	ldr	r3, [pc, #568]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ccc:	4a8a      	ldr	r2, [pc, #552]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cce:	430b      	orrs	r3, r1
 8008cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8008cd2:	e003      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008cec:	2300      	movs	r3, #0
 8008cee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008cf2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	d03a      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d02:	2b30      	cmp	r3, #48	; 0x30
 8008d04:	d01f      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008d06:	2b30      	cmp	r3, #48	; 0x30
 8008d08:	d819      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d00c      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d815      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d019      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008d16:	2b10      	cmp	r3, #16
 8008d18:	d111      	bne.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d1a:	4b77      	ldr	r3, [pc, #476]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	4a76      	ldr	r2, [pc, #472]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d26:	e011      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	2102      	movs	r1, #2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f002 f997 	bl	800b064 <RCCEx_PLL2_Config>
 8008d36:	4603      	mov	r3, r0
 8008d38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d3c:	e006      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d44:	e002      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008d46:	bf00      	nop
 8008d48:	e000      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10a      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d54:	4b68      	ldr	r3, [pc, #416]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d58:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d62:	4a65      	ldr	r2, [pc, #404]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d64:	430b      	orrs	r3, r1
 8008d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d68:	e003      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008d7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d82:	2300      	movs	r3, #0
 8008d84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008d88:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	d051      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d9c:	d035      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008da2:	d82e      	bhi.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008da8:	d031      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008daa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dae:	d828      	bhi.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db4:	d01a      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dba:	d822      	bhi.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc4:	d007      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008dc6:	e01c      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dc8:	4b4b      	ldr	r3, [pc, #300]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	4a4a      	ldr	r2, [pc, #296]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008dd4:	e01c      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dda:	3308      	adds	r3, #8
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4618      	mov	r0, r3
 8008de0:	f002 f940 	bl	800b064 <RCCEx_PLL2_Config>
 8008de4:	4603      	mov	r3, r0
 8008de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008dea:	e011      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df0:	3328      	adds	r3, #40	; 0x28
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f002 f9e7 	bl	800b1c8 <RCCEx_PLL3_Config>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e00:	e006      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e08:	e002      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e0a:	bf00      	nop
 8008e0c:	e000      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e18:	4b37      	ldr	r3, [pc, #220]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e1c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e26:	4a34      	ldr	r2, [pc, #208]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	6513      	str	r3, [r2, #80]	; 0x50
 8008e2c:	e003      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e46:	2300      	movs	r3, #0
 8008e48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008e50:	460b      	mov	r3, r1
 8008e52:	4313      	orrs	r3, r2
 8008e54:	d056      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e60:	d033      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008e62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e66:	d82c      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e6c:	d02f      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008e6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e72:	d826      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e78:	d02b      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e7e:	d820      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e84:	d012      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e8a:	d81a      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d022      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e94:	d115      	bne.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f002 f8e0 	bl	800b064 <RCCEx_PLL2_Config>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008eaa:	e015      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb0:	3328      	adds	r3, #40	; 0x28
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f002 f987 	bl	800b1c8 <RCCEx_PLL3_Config>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ec0:	e00a      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ec8:	e006      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008eca:	bf00      	nop
 8008ecc:	e004      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ece:	bf00      	nop
 8008ed0:	e002      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ed2:	bf00      	nop
 8008ed4:	e000      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10d      	bne.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ee0:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eee:	4a02      	ldr	r2, [pc, #8]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ef0:	430b      	orrs	r3, r1
 8008ef2:	6513      	str	r3, [r2, #80]	; 0x50
 8008ef4:	e006      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008ef6:	bf00      	nop
 8008ef8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f1a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4313      	orrs	r3, r2
 8008f22:	d055      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f30:	d033      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f36:	d82c      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3c:	d02f      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f42:	d826      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f48:	d02b      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008f4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f4e:	d820      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f54:	d012      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f5a:	d81a      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d022      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f64:	d115      	bne.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f002 f878 	bl	800b064 <RCCEx_PLL2_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f7a:	e015      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f80:	3328      	adds	r3, #40	; 0x28
 8008f82:	2101      	movs	r1, #1
 8008f84:	4618      	mov	r0, r3
 8008f86:	f002 f91f 	bl	800b1c8 <RCCEx_PLL3_Config>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f90:	e00a      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f98:	e006      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008f9a:	bf00      	nop
 8008f9c:	e004      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008f9e:	bf00      	nop
 8008fa0:	e002      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fa2:	bf00      	nop
 8008fa4:	e000      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10b      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008fb0:	4ba3      	ldr	r3, [pc, #652]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fc0:	4a9f      	ldr	r2, [pc, #636]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8008fc6:	e003      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008fea:	460b      	mov	r3, r1
 8008fec:	4313      	orrs	r3, r2
 8008fee:	d037      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffa:	d00e      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009000:	d816      	bhi.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d018      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800900a:	d111      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800900c:	4b8c      	ldr	r3, [pc, #560]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	4a8b      	ldr	r2, [pc, #556]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009018:	e00f      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800901a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800901e:	3308      	adds	r3, #8
 8009020:	2101      	movs	r1, #1
 8009022:	4618      	mov	r0, r3
 8009024:	f002 f81e 	bl	800b064 <RCCEx_PLL2_Config>
 8009028:	4603      	mov	r3, r0
 800902a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800902e:	e004      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009036:	e000      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800903a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009042:	4b7f      	ldr	r3, [pc, #508]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009046:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800904a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009050:	4a7b      	ldr	r2, [pc, #492]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009052:	430b      	orrs	r3, r1
 8009054:	6513      	str	r3, [r2, #80]	; 0x50
 8009056:	e003      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800905c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800906c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009070:	2300      	movs	r3, #0
 8009072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009076:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800907a:	460b      	mov	r3, r1
 800907c:	4313      	orrs	r3, r2
 800907e:	d039      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009086:	2b03      	cmp	r3, #3
 8009088:	d81c      	bhi.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800908a:	a201      	add	r2, pc, #4	; (adr r2, 8009090 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	080090cd 	.word	0x080090cd
 8009094:	080090a1 	.word	0x080090a1
 8009098:	080090af 	.word	0x080090af
 800909c:	080090cd 	.word	0x080090cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a0:	4b67      	ldr	r3, [pc, #412]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	4a66      	ldr	r2, [pc, #408]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80090ac:	e00f      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b2:	3308      	adds	r3, #8
 80090b4:	2102      	movs	r1, #2
 80090b6:	4618      	mov	r0, r3
 80090b8:	f001 ffd4 	bl	800b064 <RCCEx_PLL2_Config>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80090c2:	e004      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090ca:	e000      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80090cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80090d6:	4b5a      	ldr	r3, [pc, #360]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090da:	f023 0103 	bic.w	r1, r3, #3
 80090de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090e4:	4a56      	ldr	r2, [pc, #344]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090e6:	430b      	orrs	r3, r1
 80090e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090ea:	e003      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009100:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009104:	2300      	movs	r3, #0
 8009106:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800910a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800910e:	460b      	mov	r3, r1
 8009110:	4313      	orrs	r3, r2
 8009112:	f000 809f 	beq.w	8009254 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009116:	4b4b      	ldr	r3, [pc, #300]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a4a      	ldr	r2, [pc, #296]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800911c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009120:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009122:	f7f8 f947 	bl	80013b4 <HAL_GetTick>
 8009126:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800912a:	e00b      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800912c:	f7f8 f942 	bl	80013b4 <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b64      	cmp	r3, #100	; 0x64
 800913a:	d903      	bls.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009142:	e005      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009144:	4b3f      	ldr	r3, [pc, #252]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0ed      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009154:	2b00      	cmp	r3, #0
 8009156:	d179      	bne.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009158:	4b39      	ldr	r3, [pc, #228]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800915a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800915c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009160:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009164:	4053      	eors	r3, r2
 8009166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800916a:	2b00      	cmp	r3, #0
 800916c:	d015      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800916e:	4b34      	ldr	r3, [pc, #208]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009176:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800917a:	4b31      	ldr	r3, [pc, #196]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800917c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917e:	4a30      	ldr	r2, [pc, #192]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009184:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009186:	4b2e      	ldr	r3, [pc, #184]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918a:	4a2d      	ldr	r2, [pc, #180]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800918c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009190:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009192:	4a2b      	ldr	r2, [pc, #172]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009194:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009198:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800919e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a6:	d118      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a8:	f7f8 f904 	bl	80013b4 <HAL_GetTick>
 80091ac:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091b0:	e00d      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091b2:	f7f8 f8ff 	bl	80013b4 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80091bc:	1ad2      	subs	r2, r2, r3
 80091be:	f241 3388 	movw	r3, #5000	; 0x1388
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d903      	bls.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80091cc:	e005      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091ce:	4b1c      	ldr	r3, [pc, #112]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0eb      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80091da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d129      	bne.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091f2:	d10e      	bne.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80091f4:	4b12      	ldr	r3, [pc, #72]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80091fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009200:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009204:	091a      	lsrs	r2, r3, #4
 8009206:	4b10      	ldr	r3, [pc, #64]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009208:	4013      	ands	r3, r2
 800920a:	4a0d      	ldr	r2, [pc, #52]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800920c:	430b      	orrs	r3, r1
 800920e:	6113      	str	r3, [r2, #16]
 8009210:	e005      	b.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009212:	4b0b      	ldr	r3, [pc, #44]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	4a0a      	ldr	r2, [pc, #40]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009218:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800921c:	6113      	str	r3, [r2, #16]
 800921e:	4b08      	ldr	r3, [pc, #32]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009220:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800922a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800922e:	4a04      	ldr	r2, [pc, #16]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009230:	430b      	orrs	r3, r1
 8009232:	6713      	str	r3, [r2, #112]	; 0x70
 8009234:	e00e      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800923a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800923e:	e009      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009240:	58024400 	.word	0x58024400
 8009244:	58024800 	.word	0x58024800
 8009248:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009250:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f002 0301 	and.w	r3, r2, #1
 8009260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009264:	2300      	movs	r3, #0
 8009266:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800926a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800926e:	460b      	mov	r3, r1
 8009270:	4313      	orrs	r3, r2
 8009272:	f000 8089 	beq.w	8009388 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800927a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927c:	2b28      	cmp	r3, #40	; 0x28
 800927e:	d86b      	bhi.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009280:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	08009361 	.word	0x08009361
 800928c:	08009359 	.word	0x08009359
 8009290:	08009359 	.word	0x08009359
 8009294:	08009359 	.word	0x08009359
 8009298:	08009359 	.word	0x08009359
 800929c:	08009359 	.word	0x08009359
 80092a0:	08009359 	.word	0x08009359
 80092a4:	08009359 	.word	0x08009359
 80092a8:	0800932d 	.word	0x0800932d
 80092ac:	08009359 	.word	0x08009359
 80092b0:	08009359 	.word	0x08009359
 80092b4:	08009359 	.word	0x08009359
 80092b8:	08009359 	.word	0x08009359
 80092bc:	08009359 	.word	0x08009359
 80092c0:	08009359 	.word	0x08009359
 80092c4:	08009359 	.word	0x08009359
 80092c8:	08009343 	.word	0x08009343
 80092cc:	08009359 	.word	0x08009359
 80092d0:	08009359 	.word	0x08009359
 80092d4:	08009359 	.word	0x08009359
 80092d8:	08009359 	.word	0x08009359
 80092dc:	08009359 	.word	0x08009359
 80092e0:	08009359 	.word	0x08009359
 80092e4:	08009359 	.word	0x08009359
 80092e8:	08009361 	.word	0x08009361
 80092ec:	08009359 	.word	0x08009359
 80092f0:	08009359 	.word	0x08009359
 80092f4:	08009359 	.word	0x08009359
 80092f8:	08009359 	.word	0x08009359
 80092fc:	08009359 	.word	0x08009359
 8009300:	08009359 	.word	0x08009359
 8009304:	08009359 	.word	0x08009359
 8009308:	08009361 	.word	0x08009361
 800930c:	08009359 	.word	0x08009359
 8009310:	08009359 	.word	0x08009359
 8009314:	08009359 	.word	0x08009359
 8009318:	08009359 	.word	0x08009359
 800931c:	08009359 	.word	0x08009359
 8009320:	08009359 	.word	0x08009359
 8009324:	08009359 	.word	0x08009359
 8009328:	08009361 	.word	0x08009361
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800932c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009330:	3308      	adds	r3, #8
 8009332:	2101      	movs	r1, #1
 8009334:	4618      	mov	r0, r3
 8009336:	f001 fe95 	bl	800b064 <RCCEx_PLL2_Config>
 800933a:	4603      	mov	r3, r0
 800933c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009340:	e00f      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009346:	3328      	adds	r3, #40	; 0x28
 8009348:	2101      	movs	r1, #1
 800934a:	4618      	mov	r0, r3
 800934c:	f001 ff3c 	bl	800b1c8 <RCCEx_PLL3_Config>
 8009350:	4603      	mov	r3, r0
 8009352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009356:	e004      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800935e:	e000      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10a      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800936a:	4bbf      	ldr	r3, [pc, #764]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800936c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800936e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009378:	4abb      	ldr	r2, [pc, #748]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800937a:	430b      	orrs	r3, r1
 800937c:	6553      	str	r3, [r2, #84]	; 0x54
 800937e:	e003      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f002 0302 	and.w	r3, r2, #2
 8009394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009398:	2300      	movs	r3, #0
 800939a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800939e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80093a2:	460b      	mov	r3, r1
 80093a4:	4313      	orrs	r3, r2
 80093a6:	d041      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80093a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ae:	2b05      	cmp	r3, #5
 80093b0:	d824      	bhi.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	08009405 	.word	0x08009405
 80093bc:	080093d1 	.word	0x080093d1
 80093c0:	080093e7 	.word	0x080093e7
 80093c4:	08009405 	.word	0x08009405
 80093c8:	08009405 	.word	0x08009405
 80093cc:	08009405 	.word	0x08009405
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d4:	3308      	adds	r3, #8
 80093d6:	2101      	movs	r1, #1
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 fe43 	bl	800b064 <RCCEx_PLL2_Config>
 80093de:	4603      	mov	r3, r0
 80093e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80093e4:	e00f      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ea:	3328      	adds	r3, #40	; 0x28
 80093ec:	2101      	movs	r1, #1
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 feea 	bl	800b1c8 <RCCEx_PLL3_Config>
 80093f4:	4603      	mov	r3, r0
 80093f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80093fa:	e004      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009402:	e000      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10a      	bne.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800940e:	4b96      	ldr	r3, [pc, #600]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009412:	f023 0107 	bic.w	r1, r3, #7
 8009416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800941a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800941c:	4a92      	ldr	r2, [pc, #584]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800941e:	430b      	orrs	r3, r1
 8009420:	6553      	str	r3, [r2, #84]	; 0x54
 8009422:	e003      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009428:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800942c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f002 0304 	and.w	r3, r2, #4
 8009438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800943c:	2300      	movs	r3, #0
 800943e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009442:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009446:	460b      	mov	r3, r1
 8009448:	4313      	orrs	r3, r2
 800944a:	d044      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800944c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009454:	2b05      	cmp	r3, #5
 8009456:	d825      	bhi.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009458:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800945a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945e:	bf00      	nop
 8009460:	080094ad 	.word	0x080094ad
 8009464:	08009479 	.word	0x08009479
 8009468:	0800948f 	.word	0x0800948f
 800946c:	080094ad 	.word	0x080094ad
 8009470:	080094ad 	.word	0x080094ad
 8009474:	080094ad 	.word	0x080094ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800947c:	3308      	adds	r3, #8
 800947e:	2101      	movs	r1, #1
 8009480:	4618      	mov	r0, r3
 8009482:	f001 fdef 	bl	800b064 <RCCEx_PLL2_Config>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800948c:	e00f      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800948e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009492:	3328      	adds	r3, #40	; 0x28
 8009494:	2101      	movs	r1, #1
 8009496:	4618      	mov	r0, r3
 8009498:	f001 fe96 	bl	800b1c8 <RCCEx_PLL3_Config>
 800949c:	4603      	mov	r3, r0
 800949e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80094a2:	e004      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094aa:	e000      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80094ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10b      	bne.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094b6:	4b6c      	ldr	r3, [pc, #432]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ba:	f023 0107 	bic.w	r1, r3, #7
 80094be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094c6:	4a68      	ldr	r2, [pc, #416]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094c8:	430b      	orrs	r3, r1
 80094ca:	6593      	str	r3, [r2, #88]	; 0x58
 80094cc:	e003      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	f002 0320 	and.w	r3, r2, #32
 80094e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80094e6:	2300      	movs	r3, #0
 80094e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80094f0:	460b      	mov	r3, r1
 80094f2:	4313      	orrs	r3, r2
 80094f4:	d055      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80094f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009502:	d033      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009508:	d82c      	bhi.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800950a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800950e:	d02f      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009514:	d826      	bhi.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009516:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800951a:	d02b      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800951c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009520:	d820      	bhi.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009526:	d012      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800952c:	d81a      	bhi.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d022      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009536:	d115      	bne.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800953c:	3308      	adds	r3, #8
 800953e:	2100      	movs	r1, #0
 8009540:	4618      	mov	r0, r3
 8009542:	f001 fd8f 	bl	800b064 <RCCEx_PLL2_Config>
 8009546:	4603      	mov	r3, r0
 8009548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800954c:	e015      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800954e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009552:	3328      	adds	r3, #40	; 0x28
 8009554:	2102      	movs	r1, #2
 8009556:	4618      	mov	r0, r3
 8009558:	f001 fe36 	bl	800b1c8 <RCCEx_PLL3_Config>
 800955c:	4603      	mov	r3, r0
 800955e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009562:	e00a      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800956a:	e006      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800956c:	bf00      	nop
 800956e:	e004      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009570:	bf00      	nop
 8009572:	e002      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009574:	bf00      	nop
 8009576:	e000      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800957a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10b      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009582:	4b39      	ldr	r3, [pc, #228]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009586:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800958a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009592:	4a35      	ldr	r2, [pc, #212]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009594:	430b      	orrs	r3, r1
 8009596:	6553      	str	r3, [r2, #84]	; 0x54
 8009598:	e003      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800959e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80095ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095b2:	2300      	movs	r3, #0
 80095b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80095b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80095bc:	460b      	mov	r3, r1
 80095be:	4313      	orrs	r3, r2
 80095c0:	d058      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80095c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095ce:	d033      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80095d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095d4:	d82c      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095da:	d02f      	beq.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80095dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e0:	d826      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095e6:	d02b      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80095e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095ec:	d820      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095f2:	d012      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80095f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095f8:	d81a      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d022      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80095fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009602:	d115      	bne.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009608:	3308      	adds	r3, #8
 800960a:	2100      	movs	r1, #0
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fd29 	bl	800b064 <RCCEx_PLL2_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009618:	e015      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961e:	3328      	adds	r3, #40	; 0x28
 8009620:	2102      	movs	r1, #2
 8009622:	4618      	mov	r0, r3
 8009624:	f001 fdd0 	bl	800b1c8 <RCCEx_PLL3_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800962e:	e00a      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009636:	e006      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009638:	bf00      	nop
 800963a:	e004      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800963c:	bf00      	nop
 800963e:	e002      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009640:	bf00      	nop
 8009642:	e000      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10e      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800964e:	4b06      	ldr	r3, [pc, #24]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009652:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800965e:	4a02      	ldr	r2, [pc, #8]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009660:	430b      	orrs	r3, r1
 8009662:	6593      	str	r3, [r2, #88]	; 0x58
 8009664:	e006      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009666:	bf00      	nop
 8009668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009684:	2300      	movs	r3, #0
 8009686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800968a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800968e:	460b      	mov	r3, r1
 8009690:	4313      	orrs	r3, r2
 8009692:	d055      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009698:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800969c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096a0:	d033      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80096a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096a6:	d82c      	bhi.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ac:	d02f      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80096ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b2:	d826      	bhi.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096b8:	d02b      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80096ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096be:	d820      	bhi.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096c4:	d012      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80096c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096ca:	d81a      	bhi.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d022      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80096d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d4:	d115      	bne.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096da:	3308      	adds	r3, #8
 80096dc:	2100      	movs	r1, #0
 80096de:	4618      	mov	r0, r3
 80096e0:	f001 fcc0 	bl	800b064 <RCCEx_PLL2_Config>
 80096e4:	4603      	mov	r3, r0
 80096e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80096ea:	e015      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f0:	3328      	adds	r3, #40	; 0x28
 80096f2:	2102      	movs	r1, #2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f001 fd67 	bl	800b1c8 <RCCEx_PLL3_Config>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009700:	e00a      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009708:	e006      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800970a:	bf00      	nop
 800970c:	e004      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800970e:	bf00      	nop
 8009710:	e002      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009712:	bf00      	nop
 8009714:	e000      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009718:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10b      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009720:	4ba1      	ldr	r3, [pc, #644]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009724:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009730:	4a9d      	ldr	r2, [pc, #628]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009732:	430b      	orrs	r3, r1
 8009734:	6593      	str	r3, [r2, #88]	; 0x58
 8009736:	e003      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800973c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f002 0308 	and.w	r3, r2, #8
 800974c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009750:	2300      	movs	r3, #0
 8009752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009756:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800975a:	460b      	mov	r3, r1
 800975c:	4313      	orrs	r3, r2
 800975e:	d01e      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800976c:	d10c      	bne.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800976e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009772:	3328      	adds	r3, #40	; 0x28
 8009774:	2102      	movs	r1, #2
 8009776:	4618      	mov	r0, r3
 8009778:	f001 fd26 	bl	800b1c8 <RCCEx_PLL3_Config>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009788:	4b87      	ldr	r3, [pc, #540]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800978a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009798:	4a83      	ldr	r2, [pc, #524]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800979a:	430b      	orrs	r3, r1
 800979c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800979e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	f002 0310 	and.w	r3, r2, #16
 80097aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097ae:	2300      	movs	r3, #0
 80097b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80097b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80097b8:	460b      	mov	r3, r1
 80097ba:	4313      	orrs	r3, r2
 80097bc:	d01e      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80097be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ca:	d10c      	bne.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80097cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d0:	3328      	adds	r3, #40	; 0x28
 80097d2:	2102      	movs	r1, #2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 fcf7 	bl	800b1c8 <RCCEx_PLL3_Config>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097e6:	4b70      	ldr	r3, [pc, #448]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80097ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097f6:	4a6c      	ldr	r2, [pc, #432]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097f8:	430b      	orrs	r3, r1
 80097fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800980c:	2300      	movs	r3, #0
 800980e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009812:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009816:	460b      	mov	r3, r1
 8009818:	4313      	orrs	r3, r2
 800981a:	d03e      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800981c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009820:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009828:	d022      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800982a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800982e:	d81b      	bhi.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009838:	d00b      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800983a:	e015      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800983c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009840:	3308      	adds	r3, #8
 8009842:	2100      	movs	r1, #0
 8009844:	4618      	mov	r0, r3
 8009846:	f001 fc0d 	bl	800b064 <RCCEx_PLL2_Config>
 800984a:	4603      	mov	r3, r0
 800984c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009850:	e00f      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009856:	3328      	adds	r3, #40	; 0x28
 8009858:	2102      	movs	r1, #2
 800985a:	4618      	mov	r0, r3
 800985c:	f001 fcb4 	bl	800b1c8 <RCCEx_PLL3_Config>
 8009860:	4603      	mov	r3, r0
 8009862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009866:	e004      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800986e:	e000      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800987a:	4b4b      	ldr	r3, [pc, #300]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800987c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800987e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009886:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800988a:	4a47      	ldr	r2, [pc, #284]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800988c:	430b      	orrs	r3, r1
 800988e:	6593      	str	r3, [r2, #88]	; 0x58
 8009890:	e003      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009896:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800989a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80098a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80098a8:	2300      	movs	r3, #0
 80098aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80098b0:	460b      	mov	r3, r1
 80098b2:	4313      	orrs	r3, r2
 80098b4:	d03b      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80098b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098c2:	d01f      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80098c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098c8:	d818      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80098ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098ce:	d003      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80098d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098d4:	d007      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80098d6:	e011      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d8:	4b33      	ldr	r3, [pc, #204]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	4a32      	ldr	r2, [pc, #200]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80098e4:	e00f      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ea:	3328      	adds	r3, #40	; 0x28
 80098ec:	2101      	movs	r1, #1
 80098ee:	4618      	mov	r0, r3
 80098f0:	f001 fc6a 	bl	800b1c8 <RCCEx_PLL3_Config>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80098fa:	e004      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009902:	e000      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10b      	bne.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800990e:	4b26      	ldr	r3, [pc, #152]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009912:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800991a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991e:	4a22      	ldr	r2, [pc, #136]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009920:	430b      	orrs	r3, r1
 8009922:	6553      	str	r3, [r2, #84]	; 0x54
 8009924:	e003      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800992a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800992e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800993a:	673b      	str	r3, [r7, #112]	; 0x70
 800993c:	2300      	movs	r3, #0
 800993e:	677b      	str	r3, [r7, #116]	; 0x74
 8009940:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009944:	460b      	mov	r3, r1
 8009946:	4313      	orrs	r3, r2
 8009948:	d034      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800994a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800994e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009950:	2b00      	cmp	r3, #0
 8009952:	d003      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009958:	d007      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800995a:	e011      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800995c:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800995e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009960:	4a11      	ldr	r2, [pc, #68]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009968:	e00e      	b.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800996a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996e:	3308      	adds	r3, #8
 8009970:	2102      	movs	r1, #2
 8009972:	4618      	mov	r0, r3
 8009974:	f001 fb76 	bl	800b064 <RCCEx_PLL2_Config>
 8009978:	4603      	mov	r3, r0
 800997a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800997e:	e003      	b.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10d      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009990:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800999c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999e:	4a02      	ldr	r2, [pc, #8]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099a0:	430b      	orrs	r3, r1
 80099a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099a4:	e006      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80099a6:	bf00      	nop
 80099a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80099b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80099c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80099c2:	2300      	movs	r3, #0
 80099c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80099ca:	460b      	mov	r3, r1
 80099cc:	4313      	orrs	r3, r2
 80099ce:	d00c      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d4:	3328      	adds	r3, #40	; 0x28
 80099d6:	2102      	movs	r1, #2
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 fbf5 	bl	800b1c8 <RCCEx_PLL3_Config>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80099ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80099f6:	663b      	str	r3, [r7, #96]	; 0x60
 80099f8:	2300      	movs	r3, #0
 80099fa:	667b      	str	r3, [r7, #100]	; 0x64
 80099fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009a00:	460b      	mov	r3, r1
 8009a02:	4313      	orrs	r3, r2
 8009a04:	d038      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a12:	d018      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a18:	d811      	bhi.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a1e:	d014      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a24:	d80b      	bhi.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d011      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a2e:	d106      	bne.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a30:	4bc3      	ldr	r3, [pc, #780]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	4ac2      	ldr	r2, [pc, #776]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009a3c:	e008      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a44:	e004      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a46:	bf00      	nop
 8009a48:	e002      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10b      	bne.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a58:	4bb9      	ldr	r3, [pc, #740]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a68:	4ab5      	ldr	r2, [pc, #724]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a6a:	430b      	orrs	r3, r1
 8009a6c:	6553      	str	r3, [r2, #84]	; 0x54
 8009a6e:	e003      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009a84:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a86:	2300      	movs	r3, #0
 8009a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4313      	orrs	r3, r2
 8009a92:	d009      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a94:	4baa      	ldr	r3, [pc, #680]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aa2:	4aa7      	ldr	r2, [pc, #668]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009aa4:	430b      	orrs	r3, r1
 8009aa6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009ab4:	653b      	str	r3, [r7, #80]	; 0x50
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	657b      	str	r3, [r7, #84]	; 0x54
 8009aba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	d00a      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009ac4:	4b9e      	ldr	r3, [pc, #632]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009ad4:	4a9a      	ldr	r2, [pc, #616]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ad6:	430b      	orrs	r3, r1
 8009ad8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ae8:	2300      	movs	r3, #0
 8009aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009af0:	460b      	mov	r3, r1
 8009af2:	4313      	orrs	r3, r2
 8009af4:	d009      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009af6:	4b92      	ldr	r3, [pc, #584]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009afa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b04:	4a8e      	ldr	r2, [pc, #568]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b06:	430b      	orrs	r3, r1
 8009b08:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009b16:	643b      	str	r3, [r7, #64]	; 0x40
 8009b18:	2300      	movs	r3, #0
 8009b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b1c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009b20:	460b      	mov	r3, r1
 8009b22:	4313      	orrs	r3, r2
 8009b24:	d00e      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b26:	4b86      	ldr	r3, [pc, #536]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	4a85      	ldr	r2, [pc, #532]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b30:	6113      	str	r3, [r2, #16]
 8009b32:	4b83      	ldr	r3, [pc, #524]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b34:	6919      	ldr	r1, [r3, #16]
 8009b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009b3e:	4a80      	ldr	r2, [pc, #512]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b40:	430b      	orrs	r3, r1
 8009b42:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009b50:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b52:	2300      	movs	r3, #0
 8009b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b56:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	d009      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009b60:	4b77      	ldr	r3, [pc, #476]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b64:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6e:	4a74      	ldr	r2, [pc, #464]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b70:	430b      	orrs	r3, r1
 8009b72:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009b80:	633b      	str	r3, [r7, #48]	; 0x30
 8009b82:	2300      	movs	r3, #0
 8009b84:	637b      	str	r3, [r7, #52]	; 0x34
 8009b86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	d00a      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b90:	4b6b      	ldr	r3, [pc, #428]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b94:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba0:	4a67      	ldr	r2, [pc, #412]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	2100      	movs	r1, #0
 8009bb0:	62b9      	str	r1, [r7, #40]	; 0x28
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bb8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	d011      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f001 fa4a 	bl	800b064 <RCCEx_PLL2_Config>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009be2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	2100      	movs	r1, #0
 8009bf0:	6239      	str	r1, [r7, #32]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	d011      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c06:	3308      	adds	r3, #8
 8009c08:	2101      	movs	r1, #1
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 fa2a 	bl	800b064 <RCCEx_PLL2_Config>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	2100      	movs	r1, #0
 8009c30:	61b9      	str	r1, [r7, #24]
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	61fb      	str	r3, [r7, #28]
 8009c38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	d011      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c46:	3308      	adds	r3, #8
 8009c48:	2102      	movs	r1, #2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 fa0a 	bl	800b064 <RCCEx_PLL2_Config>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	2100      	movs	r1, #0
 8009c70:	6139      	str	r1, [r7, #16]
 8009c72:	f003 0308 	and.w	r3, r3, #8
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	d011      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c86:	3328      	adds	r3, #40	; 0x28
 8009c88:	2100      	movs	r1, #0
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f001 fa9c 	bl	800b1c8 <RCCEx_PLL3_Config>
 8009c90:	4603      	mov	r3, r0
 8009c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	2100      	movs	r1, #0
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	f003 0310 	and.w	r3, r3, #16
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	d011      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc6:	3328      	adds	r3, #40	; 0x28
 8009cc8:	2101      	movs	r1, #1
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f001 fa7c 	bl	800b1c8 <RCCEx_PLL3_Config>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	2100      	movs	r1, #0
 8009cf0:	6039      	str	r1, [r7, #0]
 8009cf2:	f003 0320 	and.w	r3, r3, #32
 8009cf6:	607b      	str	r3, [r7, #4]
 8009cf8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	d011      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d06:	3328      	adds	r3, #40	; 0x28
 8009d08:	2102      	movs	r1, #2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 fa5c 	bl	800b1c8 <RCCEx_PLL3_Config>
 8009d10:	4603      	mov	r3, r0
 8009d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009d26:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e000      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d40:	58024400 	.word	0x58024400

08009d44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b090      	sub	sp, #64	; 0x40
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d52:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009d56:	430b      	orrs	r3, r1
 8009d58:	f040 8094 	bne.w	8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009d5c:	4b9e      	ldr	r3, [pc, #632]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d60:	f003 0307 	and.w	r3, r3, #7
 8009d64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	2b04      	cmp	r3, #4
 8009d6a:	f200 8087 	bhi.w	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009d6e:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d74:	08009d89 	.word	0x08009d89
 8009d78:	08009db1 	.word	0x08009db1
 8009d7c:	08009dd9 	.word	0x08009dd9
 8009d80:	08009e75 	.word	0x08009e75
 8009d84:	08009e01 	.word	0x08009e01
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d88:	4b93      	ldr	r3, [pc, #588]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d94:	d108      	bne.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f001 f810 	bl	800adc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009da4:	f000 bd45 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dac:	f000 bd41 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009db0:	4b89      	ldr	r3, [pc, #548]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dbc:	d108      	bne.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dbe:	f107 0318 	add.w	r3, r7, #24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 fd54 	bl	800a870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dcc:	f000 bd31 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd4:	f000 bd2d 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dd8:	4b7f      	ldr	r3, [pc, #508]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009de4:	d108      	bne.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009de6:	f107 030c 	add.w	r3, r7, #12
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 fe94 	bl	800ab18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009df4:	f000 bd1d 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dfc:	f000 bd19 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e00:	4b75      	ldr	r3, [pc, #468]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e08:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e0a:	4b73      	ldr	r3, [pc, #460]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 0304 	and.w	r3, r3, #4
 8009e12:	2b04      	cmp	r3, #4
 8009e14:	d10c      	bne.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d109      	bne.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e1c:	4b6e      	ldr	r3, [pc, #440]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	08db      	lsrs	r3, r3, #3
 8009e22:	f003 0303 	and.w	r3, r3, #3
 8009e26:	4a6d      	ldr	r2, [pc, #436]	; (8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e28:	fa22 f303 	lsr.w	r3, r2, r3
 8009e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e2e:	e01f      	b.n	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e30:	4b69      	ldr	r3, [pc, #420]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e3c:	d106      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e44:	d102      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e46:	4b66      	ldr	r3, [pc, #408]	; (8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e4a:	e011      	b.n	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e4c:	4b62      	ldr	r3, [pc, #392]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e58:	d106      	bne.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e60:	d102      	bne.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e62:	4b60      	ldr	r3, [pc, #384]	; (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e66:	e003      	b.n	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009e6c:	f000 bce1 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e70:	f000 bcdf 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e74:	4b5c      	ldr	r3, [pc, #368]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e78:	f000 bcdb 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e80:	f000 bcd7 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e88:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009e8c:	430b      	orrs	r3, r1
 8009e8e:	f040 80ad 	bne.w	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009e92:	4b51      	ldr	r3, [pc, #324]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009e9a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ea2:	d056      	beq.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eaa:	f200 8090 	bhi.w	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8009eb2:	f000 8088 	beq.w	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	2bc0      	cmp	r3, #192	; 0xc0
 8009eba:	f200 8088 	bhi.w	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	2b80      	cmp	r3, #128	; 0x80
 8009ec2:	d032      	beq.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	2b80      	cmp	r3, #128	; 0x80
 8009ec8:	f200 8081 	bhi.w	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	2b40      	cmp	r3, #64	; 0x40
 8009ed6:	d014      	beq.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009ed8:	e079      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009eda:	4b3f      	ldr	r3, [pc, #252]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ee6:	d108      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 ff67 	bl	800adc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ef6:	f000 bc9c 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009efe:	f000 bc98 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f02:	4b35      	ldr	r3, [pc, #212]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f0e:	d108      	bne.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f10:	f107 0318 	add.w	r3, r7, #24
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 fcab 	bl	800a870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f1e:	f000 bc88 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f26:	f000 bc84 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f2a:	4b2b      	ldr	r3, [pc, #172]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f36:	d108      	bne.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f38:	f107 030c 	add.w	r3, r7, #12
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fdeb 	bl	800ab18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f46:	f000 bc74 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f4e:	f000 bc70 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f52:	4b21      	ldr	r3, [pc, #132]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f5c:	4b1e      	ldr	r3, [pc, #120]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b04      	cmp	r3, #4
 8009f66:	d10c      	bne.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d109      	bne.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f6e:	4b1a      	ldr	r3, [pc, #104]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	08db      	lsrs	r3, r3, #3
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	4a18      	ldr	r2, [pc, #96]	; (8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f80:	e01f      	b.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f82:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8e:	d106      	bne.n	8009f9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f96:	d102      	bne.n	8009f9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f98:	4b11      	ldr	r3, [pc, #68]	; (8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f9c:	e011      	b.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f9e:	4b0e      	ldr	r3, [pc, #56]	; (8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009faa:	d106      	bne.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fb2:	d102      	bne.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fb4:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fb8:	e003      	b.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009fbe:	f000 bc38 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fc2:	f000 bc36 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fc6:	4b08      	ldr	r3, [pc, #32]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fca:	f000 bc32 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fd2:	f000 bc2e 	b.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fd6:	bf00      	nop
 8009fd8:	58024400 	.word	0x58024400
 8009fdc:	03d09000 	.word	0x03d09000
 8009fe0:	003d0900 	.word	0x003d0900
 8009fe4:	00b71b00 	.word	0x00b71b00
 8009fe8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	f040 809c 	bne.w	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009ffa:	4b9e      	ldr	r3, [pc, #632]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a002:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a00a:	d054      	beq.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a012:	f200 808b 	bhi.w	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a01c:	f000 8083 	beq.w	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a026:	f200 8081 	bhi.w	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a030:	d02f      	beq.n	800a092 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a038:	d878      	bhi.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d004      	beq.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a046:	d012      	beq.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a048:	e070      	b.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a04a:	4b8a      	ldr	r3, [pc, #552]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a056:	d107      	bne.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a05c:	4618      	mov	r0, r3
 800a05e:	f000 feaf 	bl	800adc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a066:	e3e4      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a068:	2300      	movs	r3, #0
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a06c:	e3e1      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a06e:	4b81      	ldr	r3, [pc, #516]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a07a:	d107      	bne.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a07c:	f107 0318 	add.w	r3, r7, #24
 800a080:	4618      	mov	r0, r3
 800a082:	f000 fbf5 	bl	800a870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a08a:	e3d2      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a090:	e3cf      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a092:	4b78      	ldr	r3, [pc, #480]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a09a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a09e:	d107      	bne.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0a0:	f107 030c 	add.w	r3, r7, #12
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 fd37 	bl	800ab18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ae:	e3c0      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0b4:	e3bd      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0b6:	4b6f      	ldr	r3, [pc, #444]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0c0:	4b6c      	ldr	r3, [pc, #432]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 0304 	and.w	r3, r3, #4
 800a0c8:	2b04      	cmp	r3, #4
 800a0ca:	d10c      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d109      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0d2:	4b68      	ldr	r3, [pc, #416]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	08db      	lsrs	r3, r3, #3
 800a0d8:	f003 0303 	and.w	r3, r3, #3
 800a0dc:	4a66      	ldr	r2, [pc, #408]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a0de:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0e4:	e01e      	b.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0e6:	4b63      	ldr	r3, [pc, #396]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0f2:	d106      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0fa:	d102      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0fc:	4b5f      	ldr	r3, [pc, #380]	; (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a100:	e010      	b.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a102:	4b5c      	ldr	r3, [pc, #368]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a10a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a10e:	d106      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a116:	d102      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a118:	4b59      	ldr	r3, [pc, #356]	; (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a11a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a11c:	e002      	b.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a122:	e386      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a124:	e385      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a126:	4b57      	ldr	r3, [pc, #348]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a12a:	e382      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a130:	e37f      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a132:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a136:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a13a:	430b      	orrs	r3, r1
 800a13c:	f040 80a7 	bne.w	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a140:	4b4c      	ldr	r3, [pc, #304]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a144:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a148:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a150:	d055      	beq.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a158:	f200 8096 	bhi.w	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a162:	f000 8084 	beq.w	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a16c:	f200 808c 	bhi.w	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a176:	d030      	beq.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a17e:	f200 8083 	bhi.w	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	2b00      	cmp	r3, #0
 800a186:	d004      	beq.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a18e:	d012      	beq.n	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a190:	e07a      	b.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a192:	4b38      	ldr	r3, [pc, #224]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a19a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a19e:	d107      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 fe0b 	bl	800adc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ae:	e340      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1b4:	e33d      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1b6:	4b2f      	ldr	r3, [pc, #188]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1c2:	d107      	bne.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1c4:	f107 0318 	add.w	r3, r7, #24
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 fb51 	bl	800a870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1d2:	e32e      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1d8:	e32b      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1da:	4b26      	ldr	r3, [pc, #152]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1e6:	d107      	bne.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1e8:	f107 030c 	add.w	r3, r7, #12
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fc93 	bl	800ab18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1f6:	e31c      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1fc:	e319      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1fe:	4b1d      	ldr	r3, [pc, #116]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a202:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a206:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a208:	4b1a      	ldr	r3, [pc, #104]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	2b04      	cmp	r3, #4
 800a212:	d10c      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a216:	2b00      	cmp	r3, #0
 800a218:	d109      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a21a:	4b16      	ldr	r3, [pc, #88]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	08db      	lsrs	r3, r3, #3
 800a220:	f003 0303 	and.w	r3, r3, #3
 800a224:	4a14      	ldr	r2, [pc, #80]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a226:	fa22 f303 	lsr.w	r3, r2, r3
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a22c:	e01e      	b.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a22e:	4b11      	ldr	r3, [pc, #68]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a23a:	d106      	bne.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a242:	d102      	bne.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a244:	4b0d      	ldr	r3, [pc, #52]	; (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a246:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a248:	e010      	b.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a24a:	4b0a      	ldr	r3, [pc, #40]	; (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a256:	d106      	bne.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a25e:	d102      	bne.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a260:	4b07      	ldr	r3, [pc, #28]	; (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a262:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a264:	e002      	b.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a26a:	e2e2      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a26c:	e2e1      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a26e:	4b05      	ldr	r3, [pc, #20]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a272:	e2de      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a274:	58024400 	.word	0x58024400
 800a278:	03d09000 	.word	0x03d09000
 800a27c:	003d0900 	.word	0x003d0900
 800a280:	00b71b00 	.word	0x00b71b00
 800a284:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a28c:	e2d1      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a28e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a292:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a296:	430b      	orrs	r3, r1
 800a298:	f040 809c 	bne.w	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a29c:	4b93      	ldr	r3, [pc, #588]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a2a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2ac:	d054      	beq.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2b4:	f200 808b 	bhi.w	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2be:	f000 8083 	beq.w	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2c8:	f200 8081 	bhi.w	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2d2:	d02f      	beq.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2da:	d878      	bhi.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e8:	d012      	beq.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a2ea:	e070      	b.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ec:	4b7f      	ldr	r3, [pc, #508]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2f8:	d107      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fd5e 	bl	800adc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a308:	e293      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a30e:	e290      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a310:	4b76      	ldr	r3, [pc, #472]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a31c:	d107      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a31e:	f107 0318 	add.w	r3, r7, #24
 800a322:	4618      	mov	r0, r3
 800a324:	f000 faa4 	bl	800a870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a32c:	e281      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a332:	e27e      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a334:	4b6d      	ldr	r3, [pc, #436]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a33c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a340:	d107      	bne.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a342:	f107 030c 	add.w	r3, r7, #12
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fbe6 	bl	800ab18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a350:	e26f      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a356:	e26c      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a358:	4b64      	ldr	r3, [pc, #400]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a35a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a35c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a360:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a362:	4b62      	ldr	r3, [pc, #392]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0304 	and.w	r3, r3, #4
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d10c      	bne.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a370:	2b00      	cmp	r3, #0
 800a372:	d109      	bne.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a374:	4b5d      	ldr	r3, [pc, #372]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	08db      	lsrs	r3, r3, #3
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	4a5c      	ldr	r2, [pc, #368]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a380:	fa22 f303 	lsr.w	r3, r2, r3
 800a384:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a386:	e01e      	b.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a388:	4b58      	ldr	r3, [pc, #352]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a394:	d106      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a39c:	d102      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a39e:	4b55      	ldr	r3, [pc, #340]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a2:	e010      	b.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3a4:	4b51      	ldr	r3, [pc, #324]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3b0:	d106      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3b8:	d102      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3ba:	4b4f      	ldr	r3, [pc, #316]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3be:	e002      	b.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a3c4:	e235      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3c6:	e234      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3c8:	4b4c      	ldr	r3, [pc, #304]	; (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3cc:	e231      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3d2:	e22e      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a3d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a3dc:	430b      	orrs	r3, r1
 800a3de:	f040 808f 	bne.w	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a3e2:	4b42      	ldr	r3, [pc, #264]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a3ea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3f2:	d06b      	beq.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3fa:	d874      	bhi.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a402:	d056      	beq.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a40a:	d86c      	bhi.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a412:	d03b      	beq.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a41a:	d864      	bhi.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a422:	d021      	beq.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a42a:	d85c      	bhi.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d004      	beq.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a438:	d004      	beq.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a43a:	e054      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a43c:	f7fe fa62 	bl	8008904 <HAL_RCC_GetPCLK1Freq>
 800a440:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a442:	e1f6      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a444:	4b29      	ldr	r3, [pc, #164]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a44c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a450:	d107      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a452:	f107 0318 	add.w	r3, r7, #24
 800a456:	4618      	mov	r0, r3
 800a458:	f000 fa0a 	bl	800a870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a460:	e1e7      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a466:	e1e4      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a468:	4b20      	ldr	r3, [pc, #128]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a474:	d107      	bne.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a476:	f107 030c 	add.w	r3, r7, #12
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 fb4c 	bl	800ab18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a484:	e1d5      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a48a:	e1d2      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a48c:	4b17      	ldr	r3, [pc, #92]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b04      	cmp	r3, #4
 800a496:	d109      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a498:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	08db      	lsrs	r3, r3, #3
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	4a13      	ldr	r2, [pc, #76]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a4a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4aa:	e1c2      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4b0:	e1bf      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a4b2:	4b0e      	ldr	r3, [pc, #56]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4be:	d102      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a4c0:	4b0c      	ldr	r3, [pc, #48]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4c4:	e1b5      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ca:	e1b2      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a4cc:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4d8:	d102      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a4da:	4b07      	ldr	r3, [pc, #28]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4de:	e1a8      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4e4:	e1a5      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ea:	e1a2      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4ec:	58024400 	.word	0x58024400
 800a4f0:	03d09000 	.word	0x03d09000
 800a4f4:	003d0900 	.word	0x003d0900
 800a4f8:	00b71b00 	.word	0x00b71b00
 800a4fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a500:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a504:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a508:	430b      	orrs	r3, r1
 800a50a:	d173      	bne.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a50c:	4b9c      	ldr	r3, [pc, #624]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a514:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a51c:	d02f      	beq.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a524:	d863      	bhi.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d004      	beq.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a532:	d012      	beq.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a534:	e05b      	b.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a536:	4b92      	ldr	r3, [pc, #584]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a53e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a542:	d107      	bne.n	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a544:	f107 0318 	add.w	r3, r7, #24
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 f991 	bl	800a870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a552:	e16e      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a558:	e16b      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a55a:	4b89      	ldr	r3, [pc, #548]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a566:	d107      	bne.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a568:	f107 030c 	add.w	r3, r7, #12
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 fad3 	bl	800ab18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a576:	e15c      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a57c:	e159      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a57e:	4b80      	ldr	r3, [pc, #512]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a582:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a586:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a588:	4b7d      	ldr	r3, [pc, #500]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0304 	and.w	r3, r3, #4
 800a590:	2b04      	cmp	r3, #4
 800a592:	d10c      	bne.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a596:	2b00      	cmp	r3, #0
 800a598:	d109      	bne.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a59a:	4b79      	ldr	r3, [pc, #484]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	08db      	lsrs	r3, r3, #3
 800a5a0:	f003 0303 	and.w	r3, r3, #3
 800a5a4:	4a77      	ldr	r2, [pc, #476]	; (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a5a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5ac:	e01e      	b.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5ae:	4b74      	ldr	r3, [pc, #464]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ba:	d106      	bne.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5c2:	d102      	bne.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5c4:	4b70      	ldr	r3, [pc, #448]	; (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5c8:	e010      	b.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5ca:	4b6d      	ldr	r3, [pc, #436]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5d6:	d106      	bne.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5de:	d102      	bne.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5e0:	4b6a      	ldr	r3, [pc, #424]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5e4:	e002      	b.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a5ea:	e122      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5ec:	e121      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5f2:	e11e      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a5f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5f8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a5fc:	430b      	orrs	r3, r1
 800a5fe:	d133      	bne.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a600:	4b5f      	ldr	r3, [pc, #380]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a608:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d004      	beq.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a616:	d012      	beq.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a618:	e023      	b.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a61a:	4b59      	ldr	r3, [pc, #356]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a626:	d107      	bne.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fbc7 	bl	800adc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a636:	e0fc      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a638:	2300      	movs	r3, #0
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a63c:	e0f9      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a63e:	4b50      	ldr	r3, [pc, #320]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a64a:	d107      	bne.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a64c:	f107 0318 	add.w	r3, r7, #24
 800a650:	4618      	mov	r0, r3
 800a652:	f000 f90d 	bl	800a870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a65a:	e0ea      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a660:	e0e7      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a666:	e0e4      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a66c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a670:	430b      	orrs	r3, r1
 800a672:	f040 808d 	bne.w	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a676:	4b42      	ldr	r3, [pc, #264]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a67a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a67e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a686:	d06b      	beq.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a68e:	d874      	bhi.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a696:	d056      	beq.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a69e:	d86c      	bhi.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6a6:	d03b      	beq.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6ae:	d864      	bhi.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6b6:	d021      	beq.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6be:	d85c      	bhi.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d004      	beq.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6cc:	d004      	beq.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a6ce:	e054      	b.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a6d0:	f000 f8b8 	bl	800a844 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6d6:	e0ac      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6d8:	4b29      	ldr	r3, [pc, #164]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6e4:	d107      	bne.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e6:	f107 0318 	add.w	r3, r7, #24
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f8c0 	bl	800a870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f4:	e09d      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6fa:	e09a      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6fc:	4b20      	ldr	r3, [pc, #128]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a708:	d107      	bne.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a70a:	f107 030c 	add.w	r3, r7, #12
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fa02 	bl	800ab18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a718:	e08b      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a71e:	e088      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a720:	4b17      	ldr	r3, [pc, #92]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d109      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a72c:	4b14      	ldr	r3, [pc, #80]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	08db      	lsrs	r3, r3, #3
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	4a13      	ldr	r2, [pc, #76]	; (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a738:	fa22 f303 	lsr.w	r3, r2, r3
 800a73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a73e:	e078      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a744:	e075      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a746:	4b0e      	ldr	r3, [pc, #56]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a752:	d102      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a754:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a758:	e06b      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a75e:	e068      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a76c:	d102      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a76e:	4b07      	ldr	r3, [pc, #28]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a772:	e05e      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a778:	e05b      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a77e:	e058      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a780:	58024400 	.word	0x58024400
 800a784:	03d09000 	.word	0x03d09000
 800a788:	003d0900 	.word	0x003d0900
 800a78c:	00b71b00 	.word	0x00b71b00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a794:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a798:	430b      	orrs	r3, r1
 800a79a:	d148      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a79c:	4b27      	ldr	r3, [pc, #156]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a79e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ac:	d02a      	beq.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7b4:	d838      	bhi.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d004      	beq.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7c2:	d00d      	beq.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a7c4:	e030      	b.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7c6:	4b1d      	ldr	r3, [pc, #116]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7d2:	d102      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a7d4:	4b1a      	ldr	r3, [pc, #104]	; (800a840 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d8:	e02b      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7de:	e028      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7e0:	4b16      	ldr	r3, [pc, #88]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7ec:	d107      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 fae4 	bl	800adc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7fc:	e019      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a802:	e016      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a804:	4b0d      	ldr	r3, [pc, #52]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a80c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a810:	d107      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a812:	f107 0318 	add.w	r3, r7, #24
 800a816:	4618      	mov	r0, r3
 800a818:	f000 f82a 	bl	800a870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a820:	e007      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a826:	e004      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a82c:	e001      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a834:	4618      	mov	r0, r3
 800a836:	3740      	adds	r7, #64	; 0x40
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	58024400 	.word	0x58024400
 800a840:	00b71b00 	.word	0x00b71b00

0800a844 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a848:	f7fe f82c 	bl	80088a4 <HAL_RCC_GetHCLKFreq>
 800a84c:	4602      	mov	r2, r0
 800a84e:	4b06      	ldr	r3, [pc, #24]	; (800a868 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	091b      	lsrs	r3, r3, #4
 800a854:	f003 0307 	and.w	r3, r3, #7
 800a858:	4904      	ldr	r1, [pc, #16]	; (800a86c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a85a:	5ccb      	ldrb	r3, [r1, r3]
 800a85c:	f003 031f 	and.w	r3, r3, #31
 800a860:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a864:	4618      	mov	r0, r3
 800a866:	bd80      	pop	{r7, pc}
 800a868:	58024400 	.word	0x58024400
 800a86c:	0801bc04 	.word	0x0801bc04

0800a870 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a870:	b480      	push	{r7}
 800a872:	b089      	sub	sp, #36	; 0x24
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a878:	4ba1      	ldr	r3, [pc, #644]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87c:	f003 0303 	and.w	r3, r3, #3
 800a880:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a882:	4b9f      	ldr	r3, [pc, #636]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a886:	0b1b      	lsrs	r3, r3, #12
 800a888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a88c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a88e:	4b9c      	ldr	r3, [pc, #624]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a892:	091b      	lsrs	r3, r3, #4
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a89a:	4b99      	ldr	r3, [pc, #612]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89e:	08db      	lsrs	r3, r3, #3
 800a8a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	fb02 f303 	mul.w	r3, r2, r3
 800a8aa:	ee07 3a90 	vmov	s15, r3
 800a8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 8111 	beq.w	800aae0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	f000 8083 	beq.w	800a9cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	f200 80a1 	bhi.w	800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d003      	beq.n	800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d056      	beq.n	800a988 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a8da:	e099      	b.n	800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8dc:	4b88      	ldr	r3, [pc, #544]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f003 0320 	and.w	r3, r3, #32
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d02d      	beq.n	800a944 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8e8:	4b85      	ldr	r3, [pc, #532]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	08db      	lsrs	r3, r3, #3
 800a8ee:	f003 0303 	and.w	r3, r3, #3
 800a8f2:	4a84      	ldr	r2, [pc, #528]	; (800ab04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a8f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	ee07 3a90 	vmov	s15, r3
 800a900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	ee07 3a90 	vmov	s15, r3
 800a90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a912:	4b7b      	ldr	r3, [pc, #492]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a91a:	ee07 3a90 	vmov	s15, r3
 800a91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a922:	ed97 6a03 	vldr	s12, [r7, #12]
 800a926:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a93a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a93e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a942:	e087      	b.n	800aa54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	ee07 3a90 	vmov	s15, r3
 800a94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a956:	4b6a      	ldr	r3, [pc, #424]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95e:	ee07 3a90 	vmov	s15, r3
 800a962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a966:	ed97 6a03 	vldr	s12, [r7, #12]
 800a96a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a986:	e065      	b.n	800aa54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	ee07 3a90 	vmov	s15, r3
 800a98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a992:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a99a:	4b59      	ldr	r3, [pc, #356]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a2:	ee07 3a90 	vmov	s15, r3
 800a9a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9ca:	e043      	b.n	800aa54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	ee07 3a90 	vmov	s15, r3
 800a9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9de:	4b48      	ldr	r3, [pc, #288]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa0e:	e021      	b.n	800aa54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	ee07 3a90 	vmov	s15, r3
 800aa16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa22:	4b37      	ldr	r3, [pc, #220]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa32:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa36:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aa54:	4b2a      	ldr	r3, [pc, #168]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa58:	0a5b      	lsrs	r3, r3, #9
 800aa5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa7a:	ee17 2a90 	vmov	r2, s15
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aa82:	4b1f      	ldr	r3, [pc, #124]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa86:	0c1b      	lsrs	r3, r3, #16
 800aa88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa8c:	ee07 3a90 	vmov	s15, r3
 800aa90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa8:	ee17 2a90 	vmov	r2, s15
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aab0:	4b13      	ldr	r3, [pc, #76]	; (800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab4:	0e1b      	lsrs	r3, r3, #24
 800aab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaca:	edd7 6a07 	vldr	s13, [r7, #28]
 800aace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aad6:	ee17 2a90 	vmov	r2, s15
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aade:	e008      	b.n	800aaf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	609a      	str	r2, [r3, #8]
}
 800aaf2:	bf00      	nop
 800aaf4:	3724      	adds	r7, #36	; 0x24
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	58024400 	.word	0x58024400
 800ab04:	03d09000 	.word	0x03d09000
 800ab08:	46000000 	.word	0x46000000
 800ab0c:	4c742400 	.word	0x4c742400
 800ab10:	4a742400 	.word	0x4a742400
 800ab14:	4b371b00 	.word	0x4b371b00

0800ab18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b089      	sub	sp, #36	; 0x24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab20:	4ba1      	ldr	r3, [pc, #644]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab24:	f003 0303 	and.w	r3, r3, #3
 800ab28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ab2a:	4b9f      	ldr	r3, [pc, #636]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2e:	0d1b      	lsrs	r3, r3, #20
 800ab30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab36:	4b9c      	ldr	r3, [pc, #624]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3a:	0a1b      	lsrs	r3, r3, #8
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ab42:	4b99      	ldr	r3, [pc, #612]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab46:	08db      	lsrs	r3, r3, #3
 800ab48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	fb02 f303 	mul.w	r3, r2, r3
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f000 8111 	beq.w	800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	f000 8083 	beq.w	800ac74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	f200 80a1 	bhi.w	800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d056      	beq.n	800ac30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ab82:	e099      	b.n	800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab84:	4b88      	ldr	r3, [pc, #544]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0320 	and.w	r3, r3, #32
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d02d      	beq.n	800abec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab90:	4b85      	ldr	r3, [pc, #532]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	08db      	lsrs	r3, r3, #3
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	4a84      	ldr	r2, [pc, #528]	; (800adac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ab9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aba0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	ee07 3a90 	vmov	s15, r3
 800aba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abba:	4b7b      	ldr	r3, [pc, #492]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abca:	ed97 6a03 	vldr	s12, [r7, #12]
 800abce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abe6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800abea:	e087      	b.n	800acfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800abfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abfe:	4b6a      	ldr	r3, [pc, #424]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac2e:	e065      	b.n	800acfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac42:	4b59      	ldr	r3, [pc, #356]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac72:	e043      	b.n	800acfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ac82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac86:	4b48      	ldr	r3, [pc, #288]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acb6:	e021      	b.n	800acfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acca:	4b37      	ldr	r3, [pc, #220]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800accc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acda:	ed97 6a03 	vldr	s12, [r7, #12]
 800acde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ace2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800acfc:	4b2a      	ldr	r3, [pc, #168]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad00:	0a5b      	lsrs	r3, r3, #9
 800ad02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad16:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad22:	ee17 2a90 	vmov	r2, s15
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ad2a:	4b1f      	ldr	r3, [pc, #124]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2e:	0c1b      	lsrs	r3, r3, #16
 800ad30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad34:	ee07 3a90 	vmov	s15, r3
 800ad38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad44:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad50:	ee17 2a90 	vmov	r2, s15
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ad58:	4b13      	ldr	r3, [pc, #76]	; (800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5c:	0e1b      	lsrs	r3, r3, #24
 800ad5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad7e:	ee17 2a90 	vmov	r2, s15
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ad86:	e008      	b.n	800ad9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	609a      	str	r2, [r3, #8]
}
 800ad9a:	bf00      	nop
 800ad9c:	3724      	adds	r7, #36	; 0x24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	58024400 	.word	0x58024400
 800adac:	03d09000 	.word	0x03d09000
 800adb0:	46000000 	.word	0x46000000
 800adb4:	4c742400 	.word	0x4c742400
 800adb8:	4a742400 	.word	0x4a742400
 800adbc:	4b371b00 	.word	0x4b371b00

0800adc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b089      	sub	sp, #36	; 0x24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adc8:	4ba0      	ldr	r3, [pc, #640]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adcc:	f003 0303 	and.w	r3, r3, #3
 800add0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800add2:	4b9e      	ldr	r3, [pc, #632]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800add4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add6:	091b      	lsrs	r3, r3, #4
 800add8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800addc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800adde:	4b9b      	ldr	r3, [pc, #620]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ade0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ade8:	4b98      	ldr	r3, [pc, #608]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adec:	08db      	lsrs	r3, r3, #3
 800adee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	fb02 f303 	mul.w	r3, r2, r3
 800adf8:	ee07 3a90 	vmov	s15, r3
 800adfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 8111 	beq.w	800b02e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	f000 8083 	beq.w	800af1a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	f200 80a1 	bhi.w	800af5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d003      	beq.n	800ae2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d056      	beq.n	800aed6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ae28:	e099      	b.n	800af5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae2a:	4b88      	ldr	r3, [pc, #544]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d02d      	beq.n	800ae92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae36:	4b85      	ldr	r3, [pc, #532]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	08db      	lsrs	r3, r3, #3
 800ae3c:	f003 0303 	and.w	r3, r3, #3
 800ae40:	4a83      	ldr	r2, [pc, #524]	; (800b050 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ae42:	fa22 f303 	lsr.w	r3, r2, r3
 800ae46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	ee07 3a90 	vmov	s15, r3
 800ae58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae60:	4b7a      	ldr	r3, [pc, #488]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae68:	ee07 3a90 	vmov	s15, r3
 800ae6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae70:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae74:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae90:	e087      	b.n	800afa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	ee07 3a90 	vmov	s15, r3
 800ae98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea4:	4b69      	ldr	r3, [pc, #420]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeac:	ee07 3a90 	vmov	s15, r3
 800aeb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeb8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aed4:	e065      	b.n	800afa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	ee07 3a90 	vmov	s15, r3
 800aedc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b05c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee8:	4b58      	ldr	r3, [pc, #352]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef0:	ee07 3a90 	vmov	s15, r3
 800aef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aefc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af18:	e043      	b.n	800afa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	ee07 3a90 	vmov	s15, r3
 800af20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af24:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800af28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2c:	4b47      	ldr	r3, [pc, #284]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af34:	ee07 3a90 	vmov	s15, r3
 800af38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800af40:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af5c:	e021      	b.n	800afa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	ee07 3a90 	vmov	s15, r3
 800af64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af68:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af70:	4b36      	ldr	r3, [pc, #216]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af78:	ee07 3a90 	vmov	s15, r3
 800af7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af80:	ed97 6a03 	vldr	s12, [r7, #12]
 800af84:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afa0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800afa2:	4b2a      	ldr	r3, [pc, #168]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa6:	0a5b      	lsrs	r3, r3, #9
 800afa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afac:	ee07 3a90 	vmov	s15, r3
 800afb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800afc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afc8:	ee17 2a90 	vmov	r2, s15
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800afd0:	4b1e      	ldr	r3, [pc, #120]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd4:	0c1b      	lsrs	r3, r3, #16
 800afd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afea:	edd7 6a07 	vldr	s13, [r7, #28]
 800afee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff6:	ee17 2a90 	vmov	r2, s15
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800affe:	4b13      	ldr	r3, [pc, #76]	; (800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b002:	0e1b      	lsrs	r3, r3, #24
 800b004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b008:	ee07 3a90 	vmov	s15, r3
 800b00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b014:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b018:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b024:	ee17 2a90 	vmov	r2, s15
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b02c:	e008      	b.n	800b040 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	609a      	str	r2, [r3, #8]
}
 800b040:	bf00      	nop
 800b042:	3724      	adds	r7, #36	; 0x24
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr
 800b04c:	58024400 	.word	0x58024400
 800b050:	03d09000 	.word	0x03d09000
 800b054:	46000000 	.word	0x46000000
 800b058:	4c742400 	.word	0x4c742400
 800b05c:	4a742400 	.word	0x4a742400
 800b060:	4b371b00 	.word	0x4b371b00

0800b064 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b072:	4b53      	ldr	r3, [pc, #332]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b076:	f003 0303 	and.w	r3, r3, #3
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d101      	bne.n	800b082 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e099      	b.n	800b1b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b082:	4b4f      	ldr	r3, [pc, #316]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a4e      	ldr	r2, [pc, #312]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b088:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b08c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b08e:	f7f6 f991 	bl	80013b4 <HAL_GetTick>
 800b092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b094:	e008      	b.n	800b0a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b096:	f7f6 f98d 	bl	80013b4 <HAL_GetTick>
 800b09a:	4602      	mov	r2, r0
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d901      	bls.n	800b0a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e086      	b.n	800b1b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0a8:	4b45      	ldr	r3, [pc, #276]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1f0      	bne.n	800b096 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0b4:	4b42      	ldr	r3, [pc, #264]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	031b      	lsls	r3, r3, #12
 800b0c2:	493f      	ldr	r1, [pc, #252]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	628b      	str	r3, [r1, #40]	; 0x28
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	025b      	lsls	r3, r3, #9
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	041b      	lsls	r3, r3, #16
 800b0e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0ea:	431a      	orrs	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	061b      	lsls	r3, r3, #24
 800b0f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b0f8:	4931      	ldr	r1, [pc, #196]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b0fe:	4b30      	ldr	r3, [pc, #192]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b102:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	492d      	ldr	r1, [pc, #180]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b10c:	4313      	orrs	r3, r2
 800b10e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b110:	4b2b      	ldr	r3, [pc, #172]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b114:	f023 0220 	bic.w	r2, r3, #32
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	4928      	ldr	r1, [pc, #160]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b11e:	4313      	orrs	r3, r2
 800b120:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b122:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b126:	4a26      	ldr	r2, [pc, #152]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b128:	f023 0310 	bic.w	r3, r3, #16
 800b12c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b12e:	4b24      	ldr	r3, [pc, #144]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b132:	4b24      	ldr	r3, [pc, #144]	; (800b1c4 <RCCEx_PLL2_Config+0x160>)
 800b134:	4013      	ands	r3, r2
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	69d2      	ldr	r2, [r2, #28]
 800b13a:	00d2      	lsls	r2, r2, #3
 800b13c:	4920      	ldr	r1, [pc, #128]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b13e:	4313      	orrs	r3, r2
 800b140:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b142:	4b1f      	ldr	r3, [pc, #124]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b146:	4a1e      	ldr	r2, [pc, #120]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b148:	f043 0310 	orr.w	r3, r3, #16
 800b14c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d106      	bne.n	800b162 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b154:	4b1a      	ldr	r3, [pc, #104]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	4a19      	ldr	r2, [pc, #100]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b15a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b15e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b160:	e00f      	b.n	800b182 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d106      	bne.n	800b176 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b168:	4b15      	ldr	r3, [pc, #84]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16c:	4a14      	ldr	r2, [pc, #80]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b16e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b172:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b174:	e005      	b.n	800b182 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b176:	4b12      	ldr	r3, [pc, #72]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17a:	4a11      	ldr	r2, [pc, #68]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b17c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b180:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b182:	4b0f      	ldr	r3, [pc, #60]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a0e      	ldr	r2, [pc, #56]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b188:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b18c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b18e:	f7f6 f911 	bl	80013b4 <HAL_GetTick>
 800b192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b194:	e008      	b.n	800b1a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b196:	f7f6 f90d 	bl	80013b4 <HAL_GetTick>
 800b19a:	4602      	mov	r2, r0
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d901      	bls.n	800b1a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e006      	b.n	800b1b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1a8:	4b05      	ldr	r3, [pc, #20]	; (800b1c0 <RCCEx_PLL2_Config+0x15c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d0f0      	beq.n	800b196 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	58024400 	.word	0x58024400
 800b1c4:	ffff0007 	.word	0xffff0007

0800b1c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1d6:	4b53      	ldr	r3, [pc, #332]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1da:	f003 0303 	and.w	r3, r3, #3
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	d101      	bne.n	800b1e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e099      	b.n	800b31a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b1e6:	4b4f      	ldr	r3, [pc, #316]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a4e      	ldr	r2, [pc, #312]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b1ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1f2:	f7f6 f8df 	bl	80013b4 <HAL_GetTick>
 800b1f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1f8:	e008      	b.n	800b20c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b1fa:	f7f6 f8db 	bl	80013b4 <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	2b02      	cmp	r3, #2
 800b206:	d901      	bls.n	800b20c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e086      	b.n	800b31a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b20c:	4b45      	ldr	r3, [pc, #276]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1f0      	bne.n	800b1fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b218:	4b42      	ldr	r3, [pc, #264]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	051b      	lsls	r3, r3, #20
 800b226:	493f      	ldr	r1, [pc, #252]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b228:	4313      	orrs	r3, r2
 800b22a:	628b      	str	r3, [r1, #40]	; 0x28
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	3b01      	subs	r3, #1
 800b232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	3b01      	subs	r3, #1
 800b23c:	025b      	lsls	r3, r3, #9
 800b23e:	b29b      	uxth	r3, r3
 800b240:	431a      	orrs	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	3b01      	subs	r3, #1
 800b248:	041b      	lsls	r3, r3, #16
 800b24a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b24e:	431a      	orrs	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	3b01      	subs	r3, #1
 800b256:	061b      	lsls	r3, r3, #24
 800b258:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b25c:	4931      	ldr	r1, [pc, #196]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b25e:	4313      	orrs	r3, r2
 800b260:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b262:	4b30      	ldr	r3, [pc, #192]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	492d      	ldr	r1, [pc, #180]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b270:	4313      	orrs	r3, r2
 800b272:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b274:	4b2b      	ldr	r3, [pc, #172]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	4928      	ldr	r1, [pc, #160]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b282:	4313      	orrs	r3, r2
 800b284:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b286:	4b27      	ldr	r3, [pc, #156]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28a:	4a26      	ldr	r2, [pc, #152]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b28c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b290:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b292:	4b24      	ldr	r3, [pc, #144]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b296:	4b24      	ldr	r3, [pc, #144]	; (800b328 <RCCEx_PLL3_Config+0x160>)
 800b298:	4013      	ands	r3, r2
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	69d2      	ldr	r2, [r2, #28]
 800b29e:	00d2      	lsls	r2, r2, #3
 800b2a0:	4920      	ldr	r1, [pc, #128]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b2a6:	4b1f      	ldr	r3, [pc, #124]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2aa:	4a1e      	ldr	r2, [pc, #120]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d106      	bne.n	800b2c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b2b8:	4b1a      	ldr	r3, [pc, #104]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2bc:	4a19      	ldr	r2, [pc, #100]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b2c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2c4:	e00f      	b.n	800b2e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d106      	bne.n	800b2da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b2cc:	4b15      	ldr	r3, [pc, #84]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	4a14      	ldr	r2, [pc, #80]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b2d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2d8:	e005      	b.n	800b2e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b2da:	4b12      	ldr	r3, [pc, #72]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2de:	4a11      	ldr	r2, [pc, #68]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b2e6:	4b0f      	ldr	r3, [pc, #60]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a0e      	ldr	r2, [pc, #56]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b2ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2f2:	f7f6 f85f 	bl	80013b4 <HAL_GetTick>
 800b2f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2f8:	e008      	b.n	800b30c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2fa:	f7f6 f85b 	bl	80013b4 <HAL_GetTick>
 800b2fe:	4602      	mov	r2, r0
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	2b02      	cmp	r3, #2
 800b306:	d901      	bls.n	800b30c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e006      	b.n	800b31a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b30c:	4b05      	ldr	r3, [pc, #20]	; (800b324 <RCCEx_PLL3_Config+0x15c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d0f0      	beq.n	800b2fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b318:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	58024400 	.word	0x58024400
 800b328:	ffff0007 	.word	0xffff0007

0800b32c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08a      	sub	sp, #40	; 0x28
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e075      	b.n	800b42a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	d105      	bne.n	800b356 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7f5 fc53 	bl	8000bfc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2204      	movs	r2, #4
 800b35a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f868 	bl	800b434 <HAL_SD_InitCard>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	e05d      	b.n	800b42a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b36e:	f107 0308 	add.w	r3, r7, #8
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fdb5 	bl	800bee4 <HAL_SD_GetCardStatus>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	e052      	b.n	800b42a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b384:	7e3b      	ldrb	r3, [r7, #24]
 800b386:	b2db      	uxtb	r3, r3
 800b388:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b38a:	7e7b      	ldrb	r3, [r7, #25]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b394:	2b01      	cmp	r3, #1
 800b396:	d10a      	bne.n	800b3ae <HAL_SD_Init+0x82>
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d102      	bne.n	800b3a4 <HAL_SD_Init+0x78>
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d004      	beq.n	800b3ae <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3aa:	659a      	str	r2, [r3, #88]	; 0x58
 800b3ac:	e00b      	b.n	800b3c6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d104      	bne.n	800b3c0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3bc:	659a      	str	r2, [r3, #88]	; 0x58
 800b3be:	e002      	b.n	800b3c6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fe73 	bl	800c0b8 <HAL_SD_ConfigWideBusOperation>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e026      	b.n	800b42a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b3dc:	f7f5 ffea 	bl	80013b4 <HAL_GetTick>
 800b3e0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b3e2:	e011      	b.n	800b408 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b3e4:	f7f5 ffe6 	bl	80013b4 <HAL_GetTick>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f2:	d109      	bne.n	800b408 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b3fa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800b404:	2303      	movs	r3, #3
 800b406:	e010      	b.n	800b42a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 ff67 	bl	800c2dc <HAL_SD_GetCardState>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b04      	cmp	r3, #4
 800b412:	d1e7      	bne.n	800b3e4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3728      	adds	r7, #40	; 0x28
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
	...

0800b434 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b434:	b590      	push	{r4, r7, lr}
 800b436:	b08d      	sub	sp, #52	; 0x34
 800b438:	af02      	add	r7, sp, #8
 800b43a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b43c:	2300      	movs	r3, #0
 800b43e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b440:	2300      	movs	r3, #0
 800b442:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b444:	2300      	movs	r3, #0
 800b446:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b448:	2300      	movs	r3, #0
 800b44a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b44c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b450:	f04f 0100 	mov.w	r1, #0
 800b454:	f7fe fc76 	bl	8009d44 <HAL_RCCEx_GetPeriphCLKFreq>
 800b458:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d109      	bne.n	800b474 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b46e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e070      	b.n	800b556 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	0a1b      	lsrs	r3, r3, #8
 800b478:	4a39      	ldr	r2, [pc, #228]	; (800b560 <HAL_SD_InitCard+0x12c>)
 800b47a:	fba2 2303 	umull	r2, r3, r2, r3
 800b47e:	091b      	lsrs	r3, r3, #4
 800b480:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681c      	ldr	r4, [r3, #0]
 800b486:	466a      	mov	r2, sp
 800b488:	f107 0318 	add.w	r3, r7, #24
 800b48c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b490:	e882 0003 	stmia.w	r2, {r0, r1}
 800b494:	f107 030c 	add.w	r3, r7, #12
 800b498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b49a:	4620      	mov	r0, r4
 800b49c:	f002 f91c 	bl	800d6d8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f002 f95f 	bl	800d768 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d005      	beq.n	800b4bc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800b4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d007      	beq.n	800b4d2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800b4c2:	4a28      	ldr	r2, [pc, #160]	; (800b564 <HAL_SD_InitCard+0x130>)
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f5 ff7d 	bl	80013cc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fff0 	bl	800c4b8 <SD_PowerON>
 800b4d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4da:	6a3b      	ldr	r3, [r7, #32]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00b      	beq.n	800b4f8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4ec:	6a3b      	ldr	r3, [r7, #32]
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e02e      	b.n	800b556 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 ff0f 	bl	800c31c <SD_InitCard>
 800b4fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00b      	beq.n	800b51e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	431a      	orrs	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e01b      	b.n	800b556 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b526:	4618      	mov	r0, r3
 800b528:	f002 f9b4 	bl	800d894 <SDMMC_CmdBlockLength>
 800b52c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00f      	beq.n	800b554 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a0b      	ldr	r2, [pc, #44]	; (800b568 <HAL_SD_InitCard+0x134>)
 800b53a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	431a      	orrs	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	e000      	b.n	800b556 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	372c      	adds	r7, #44	; 0x2c
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd90      	pop	{r4, r7, pc}
 800b55e:	bf00      	nop
 800b560:	014f8b59 	.word	0x014f8b59
 800b564:	00012110 	.word	0x00012110
 800b568:	1fe00fff 	.word	0x1fe00fff

0800b56c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b092      	sub	sp, #72	; 0x48
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
 800b578:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b57a:	f7f5 ff1b 	bl	80013b4 <HAL_GetTick>
 800b57e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d107      	bne.n	800b59e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b592:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e167      	b.n	800b86e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	f040 815a 	bne.w	800b860 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b5b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	441a      	add	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d907      	bls.n	800b5d0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e14e      	b.n	800b86e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d002      	beq.n	800b5ee <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	025b      	lsls	r3, r3, #9
 800b5ec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b5f2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	025b      	lsls	r3, r3, #9
 800b5f8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b5fa:	2390      	movs	r3, #144	; 0x90
 800b5fc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b5fe:	2302      	movs	r3, #2
 800b600:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b602:	2300      	movs	r3, #0
 800b604:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b606:	2300      	movs	r3, #0
 800b608:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f107 0214 	add.w	r2, r7, #20
 800b612:	4611      	mov	r1, r2
 800b614:	4618      	mov	r0, r3
 800b616:	f002 f911 	bl	800d83c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68da      	ldr	r2, [r3, #12]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b628:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d90a      	bls.n	800b646 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2202      	movs	r2, #2
 800b634:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b63c:	4618      	mov	r0, r3
 800b63e:	f002 f96f 	bl	800d920 <SDMMC_CmdReadMultiBlock>
 800b642:	6478      	str	r0, [r7, #68]	; 0x44
 800b644:	e009      	b.n	800b65a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2201      	movs	r2, #1
 800b64a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b652:	4618      	mov	r0, r3
 800b654:	f002 f941 	bl	800d8da <SDMMC_CmdReadSingleBlock>
 800b658:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d012      	beq.n	800b686 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a84      	ldr	r2, [pc, #528]	; (800b878 <HAL_SD_ReadBlocks+0x30c>)
 800b666:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b66c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66e:	431a      	orrs	r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2200      	movs	r2, #0
 800b680:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e0f3      	b.n	800b86e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b68a:	e058      	b.n	800b73e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b696:	2b00      	cmp	r3, #0
 800b698:	d033      	beq.n	800b702 <HAL_SD_ReadBlocks+0x196>
 800b69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b69c:	2b1f      	cmp	r3, #31
 800b69e:	d930      	bls.n	800b702 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	643b      	str	r3, [r7, #64]	; 0x40
 800b6a4:	e027      	b.n	800b6f6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f002 f83e 	bl	800d72c <SDMMC_ReadFIFO>
 800b6b0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	b2da      	uxtb	r2, r3
 800b6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6bc:	3301      	adds	r3, #1
 800b6be:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	0a1b      	lsrs	r3, r3, #8
 800b6c4:	b2da      	uxtb	r2, r3
 800b6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d2:	0c1b      	lsrs	r3, r3, #16
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6dc:	3301      	adds	r3, #1
 800b6de:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e2:	0e1b      	lsrs	r3, r3, #24
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 800b6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	643b      	str	r3, [r7, #64]	; 0x40
 800b6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6f8:	2b07      	cmp	r3, #7
 800b6fa:	d9d4      	bls.n	800b6a6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800b6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6fe:	3b20      	subs	r3, #32
 800b700:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b702:	f7f5 fe57 	bl	80013b4 <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b70e:	429a      	cmp	r2, r3
 800b710:	d902      	bls.n	800b718 <HAL_SD_ReadBlocks+0x1ac>
 800b712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b714:	2b00      	cmp	r3, #0
 800b716:	d112      	bne.n	800b73e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a56      	ldr	r2, [pc, #344]	; (800b878 <HAL_SD_ReadBlocks+0x30c>)
 800b71e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b724:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800b73a:	2303      	movs	r3, #3
 800b73c:	e097      	b.n	800b86e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b744:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d09f      	beq.n	800b68c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68da      	ldr	r2, [r3, #12]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b75a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b766:	2b00      	cmp	r3, #0
 800b768:	d022      	beq.n	800b7b0 <HAL_SD_ReadBlocks+0x244>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d91f      	bls.n	800b7b0 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b774:	2b03      	cmp	r3, #3
 800b776:	d01b      	beq.n	800b7b0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f002 f939 	bl	800d9f4 <SDMMC_CmdStopTransfer>
 800b782:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800b784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b786:	2b00      	cmp	r3, #0
 800b788:	d012      	beq.n	800b7b0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a3a      	ldr	r2, [pc, #232]	; (800b878 <HAL_SD_ReadBlocks+0x30c>)
 800b790:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b798:	431a      	orrs	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e05e      	b.n	800b86e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b6:	f003 0308 	and.w	r3, r3, #8
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d012      	beq.n	800b7e4 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a2d      	ldr	r2, [pc, #180]	; (800b878 <HAL_SD_ReadBlocks+0x30c>)
 800b7c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ca:	f043 0208 	orr.w	r2, r3, #8
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e044      	b.n	800b86e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d012      	beq.n	800b818 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a20      	ldr	r2, [pc, #128]	; (800b878 <HAL_SD_ReadBlocks+0x30c>)
 800b7f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fe:	f043 0202 	orr.w	r2, r3, #2
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2200      	movs	r2, #0
 800b812:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	e02a      	b.n	800b86e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81e:	f003 0320 	and.w	r3, r3, #32
 800b822:	2b00      	cmp	r3, #0
 800b824:	d012      	beq.n	800b84c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a13      	ldr	r2, [pc, #76]	; (800b878 <HAL_SD_ReadBlocks+0x30c>)
 800b82c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b832:	f043 0220 	orr.w	r2, r3, #32
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	e010      	b.n	800b86e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a0a      	ldr	r2, [pc, #40]	; (800b87c <HAL_SD_ReadBlocks+0x310>)
 800b852:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	e006      	b.n	800b86e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b864:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
  }
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3748      	adds	r7, #72	; 0x48
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	1fe00fff 	.word	0x1fe00fff
 800b87c:	18000f3a 	.word	0x18000f3a

0800b880 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b092      	sub	sp, #72	; 0x48
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b88e:	f7f5 fd91 	bl	80013b4 <HAL_GetTick>
 800b892:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d107      	bne.n	800b8b2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e16b      	b.n	800bb8a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	f040 815e 	bne.w	800bb7c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b8c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	441a      	add	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d907      	bls.n	800b8e4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e152      	b.n	800bb8a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2203      	movs	r2, #3
 800b8e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d002      	beq.n	800b902 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	025b      	lsls	r3, r3, #9
 800b900:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b902:	f04f 33ff 	mov.w	r3, #4294967295
 800b906:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	025b      	lsls	r3, r3, #9
 800b90c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b90e:	2390      	movs	r3, #144	; 0x90
 800b910:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b912:	2300      	movs	r3, #0
 800b914:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b916:	2300      	movs	r3, #0
 800b918:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b91a:	2300      	movs	r3, #0
 800b91c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f107 0218 	add.w	r2, r7, #24
 800b926:	4611      	mov	r1, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 ff87 	bl	800d83c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68da      	ldr	r2, [r3, #12]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b93c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d90a      	bls.n	800b95a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2220      	movs	r2, #32
 800b948:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b950:	4618      	mov	r0, r3
 800b952:	f002 f82b 	bl	800d9ac <SDMMC_CmdWriteMultiBlock>
 800b956:	6478      	str	r0, [r7, #68]	; 0x44
 800b958:	e009      	b.n	800b96e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2210      	movs	r2, #16
 800b95e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b966:	4618      	mov	r0, r3
 800b968:	f001 fffd 	bl	800d966 <SDMMC_CmdWriteSingleBlock>
 800b96c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b96e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b970:	2b00      	cmp	r3, #0
 800b972:	d012      	beq.n	800b99a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a86      	ldr	r2, [pc, #536]	; (800bb94 <HAL_SD_WriteBlocks+0x314>)
 800b97a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b982:	431a      	orrs	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e0f7      	b.n	800bb8a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800b99e:	e05c      	b.n	800ba5a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d037      	beq.n	800ba1e <HAL_SD_WriteBlocks+0x19e>
 800b9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9b0:	2b1f      	cmp	r3, #31
 800b9b2:	d934      	bls.n	800ba1e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b9b8:	e02b      	b.n	800ba12 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800b9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	021a      	lsls	r2, r3, #8
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	041a      	lsls	r2, r3, #16
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b9ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	061a      	lsls	r2, r3, #24
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f107 0214 	add.w	r2, r7, #20
 800ba04:	4611      	mov	r1, r2
 800ba06:	4618      	mov	r0, r3
 800ba08:	f001 fe9d 	bl	800d746 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800ba0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba0e:	3301      	adds	r3, #1
 800ba10:	643b      	str	r3, [r7, #64]	; 0x40
 800ba12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba14:	2b07      	cmp	r3, #7
 800ba16:	d9d0      	bls.n	800b9ba <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ba18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba1a:	3b20      	subs	r3, #32
 800ba1c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800ba1e:	f7f5 fcc9 	bl	80013b4 <HAL_GetTick>
 800ba22:	4602      	mov	r2, r0
 800ba24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d902      	bls.n	800ba34 <HAL_SD_WriteBlocks+0x1b4>
 800ba2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d112      	bne.n	800ba5a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a56      	ldr	r2, [pc, #344]	; (800bb94 <HAL_SD_WriteBlocks+0x314>)
 800ba3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba42:	431a      	orrs	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800ba56:	2303      	movs	r3, #3
 800ba58:	e097      	b.n	800bb8a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba60:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d09b      	beq.n	800b9a0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68da      	ldr	r2, [r3, #12]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba76:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d022      	beq.n	800bacc <HAL_SD_WriteBlocks+0x24c>
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d91f      	bls.n	800bacc <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d01b      	beq.n	800bacc <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f001 ffab 	bl	800d9f4 <SDMMC_CmdStopTransfer>
 800ba9e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800baa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d012      	beq.n	800bacc <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a3a      	ldr	r2, [pc, #232]	; (800bb94 <HAL_SD_WriteBlocks+0x314>)
 800baac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bab4:	431a      	orrs	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e05e      	b.n	800bb8a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad2:	f003 0308 	and.w	r3, r3, #8
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d012      	beq.n	800bb00 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a2d      	ldr	r2, [pc, #180]	; (800bb94 <HAL_SD_WriteBlocks+0x314>)
 800bae0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae6:	f043 0208 	orr.w	r2, r3, #8
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2201      	movs	r2, #1
 800baf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	e044      	b.n	800bb8a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb06:	f003 0302 	and.w	r3, r3, #2
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d012      	beq.n	800bb34 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a20      	ldr	r2, [pc, #128]	; (800bb94 <HAL_SD_WriteBlocks+0x314>)
 800bb14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1a:	f043 0202 	orr.w	r2, r3, #2
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e02a      	b.n	800bb8a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb3a:	f003 0310 	and.w	r3, r3, #16
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d012      	beq.n	800bb68 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a13      	ldr	r2, [pc, #76]	; (800bb94 <HAL_SD_WriteBlocks+0x314>)
 800bb48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4e:	f043 0210 	orr.w	r2, r3, #16
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800bb64:	2301      	movs	r3, #1
 800bb66:	e010      	b.n	800bb8a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a0a      	ldr	r2, [pc, #40]	; (800bb98 <HAL_SD_WriteBlocks+0x318>)
 800bb6e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e006      	b.n	800bb8a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
  }
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3748      	adds	r7, #72	; 0x48
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	1fe00fff 	.word	0x1fe00fff
 800bb98:	18000f3a 	.word	0x18000f3a

0800bb9c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbaa:	0f9b      	lsrs	r3, r3, #30
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbb6:	0e9b      	lsrs	r3, r3, #26
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	f003 030f 	and.w	r3, r3, #15
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbc8:	0e1b      	lsrs	r3, r3, #24
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	f003 0303 	and.w	r3, r3, #3
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbda:	0c1b      	lsrs	r3, r3, #16
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbe6:	0a1b      	lsrs	r3, r3, #8
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbfc:	0d1b      	lsrs	r3, r3, #20
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc08:	0c1b      	lsrs	r3, r3, #16
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	f003 030f 	and.w	r3, r3, #15
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc1a:	0bdb      	lsrs	r3, r3, #15
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc2c:	0b9b      	lsrs	r3, r3, #14
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc3e:	0b5b      	lsrs	r3, r3, #13
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	f003 0301 	and.w	r3, r3, #1
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc50:	0b1b      	lsrs	r3, r3, #12
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	f003 0301 	and.w	r3, r3, #1
 800bc58:	b2da      	uxtb	r2, r3
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2200      	movs	r2, #0
 800bc62:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d163      	bne.n	800bd34 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc70:	009a      	lsls	r2, r3, #2
 800bc72:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bc76:	4013      	ands	r3, r2
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800bc7c:	0f92      	lsrs	r2, r2, #30
 800bc7e:	431a      	orrs	r2, r3
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc88:	0edb      	lsrs	r3, r3, #27
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	f003 0307 	and.w	r3, r3, #7
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc9a:	0e1b      	lsrs	r3, r3, #24
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	f003 0307 	and.w	r3, r3, #7
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcac:	0d5b      	lsrs	r3, r3, #21
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	f003 0307 	and.w	r3, r3, #7
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcbe:	0c9b      	lsrs	r3, r3, #18
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	f003 0307 	and.w	r3, r3, #7
 800bcc6:	b2da      	uxtb	r2, r3
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcd0:	0bdb      	lsrs	r3, r3, #15
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	f003 0307 	and.w	r3, r3, #7
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	1c5a      	adds	r2, r3, #1
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	7e1b      	ldrb	r3, [r3, #24]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f003 0307 	and.w	r3, r3, #7
 800bcf2:	3302      	adds	r3, #2
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bcfe:	fb03 f202 	mul.w	r2, r3, r2
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	7a1b      	ldrb	r3, [r3, #8]
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	f003 030f 	and.w	r3, r3, #15
 800bd10:	2201      	movs	r2, #1
 800bd12:	409a      	lsls	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800bd20:	0a52      	lsrs	r2, r2, #9
 800bd22:	fb03 f202 	mul.w	r2, r3, r2
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd30:	655a      	str	r2, [r3, #84]	; 0x54
 800bd32:	e031      	b.n	800bd98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d11d      	bne.n	800bd78 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd40:	041b      	lsls	r3, r3, #16
 800bd42:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd4a:	0c1b      	lsrs	r3, r3, #16
 800bd4c:	431a      	orrs	r2, r3
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	3301      	adds	r3, #1
 800bd58:	029a      	lsls	r2, r3, #10
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	655a      	str	r2, [r3, #84]	; 0x54
 800bd76:	e00f      	b.n	800bd98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a58      	ldr	r2, [pc, #352]	; (800bee0 <HAL_SD_GetCardCSD+0x344>)
 800bd7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e09d      	b.n	800bed4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd9c:	0b9b      	lsrs	r3, r3, #14
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	f003 0301 	and.w	r3, r3, #1
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdae:	09db      	lsrs	r3, r3, #7
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdd0:	0fdb      	lsrs	r3, r3, #31
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bddc:	0f5b      	lsrs	r3, r3, #29
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	f003 0303 	and.w	r3, r3, #3
 800bde4:	b2da      	uxtb	r2, r3
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdee:	0e9b      	lsrs	r3, r3, #26
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	f003 0307 	and.w	r3, r3, #7
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be00:	0d9b      	lsrs	r3, r3, #22
 800be02:	b2db      	uxtb	r3, r3
 800be04:	f003 030f 	and.w	r3, r3, #15
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be12:	0d5b      	lsrs	r3, r3, #21
 800be14:	b2db      	uxtb	r3, r3
 800be16:	f003 0301 	and.w	r3, r3, #1
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	2200      	movs	r2, #0
 800be26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be2e:	0c1b      	lsrs	r3, r3, #16
 800be30:	b2db      	uxtb	r3, r3
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	b2da      	uxtb	r2, r3
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be42:	0bdb      	lsrs	r3, r3, #15
 800be44:	b2db      	uxtb	r3, r3
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be56:	0b9b      	lsrs	r3, r3, #14
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be6a:	0b5b      	lsrs	r3, r3, #13
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	b2da      	uxtb	r2, r3
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be7e:	0b1b      	lsrs	r3, r3, #12
 800be80:	b2db      	uxtb	r3, r3
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	b2da      	uxtb	r2, r3
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be92:	0a9b      	lsrs	r3, r3, #10
 800be94:	b2db      	uxtb	r3, r3
 800be96:	f003 0303 	and.w	r3, r3, #3
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bea6:	0a1b      	lsrs	r3, r3, #8
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	f003 0303 	and.w	r3, r3, #3
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800beba:	085b      	lsrs	r3, r3, #1
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec2:	b2da      	uxtb	r2, r3
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2201      	movs	r2, #1
 800bece:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	1fe00fff 	.word	0x1fe00fff

0800bee4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b094      	sub	sp, #80	; 0x50
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800befa:	b2db      	uxtb	r3, r3
 800befc:	2b03      	cmp	r3, #3
 800befe:	d101      	bne.n	800bf04 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e0a7      	b.n	800c054 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800bf04:	f107 0308 	add.w	r3, r7, #8
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fb62 	bl	800c5d4 <SD_SendSDStatus>
 800bf10:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d011      	beq.n	800bf3c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a4f      	ldr	r2, [pc, #316]	; (800c05c <HAL_SD_GetCardStatus+0x178>)
 800bf1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf26:	431a      	orrs	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bf3a:	e070      	b.n	800c01e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	099b      	lsrs	r3, r3, #6
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	f003 0303 	and.w	r3, r3, #3
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	095b      	lsrs	r3, r3, #5
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	f003 0301 	and.w	r3, r3, #1
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	0a1b      	lsrs	r3, r3, #8
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	0e1b      	lsrs	r3, r3, #24
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	061a      	lsls	r2, r3, #24
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	021b      	lsls	r3, r3, #8
 800bf7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf82:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	0a1b      	lsrs	r3, r3, #8
 800bf88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bf8c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	0e1b      	lsrs	r3, r3, #24
 800bf92:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	0a1b      	lsrs	r3, r3, #8
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	0d1b      	lsrs	r3, r3, #20
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	f003 030f 	and.w	r3, r3, #15
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	0c1b      	lsrs	r3, r3, #16
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	0a9b      	lsrs	r3, r3, #10
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	0a1b      	lsrs	r3, r3, #8
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	f003 0303 	and.w	r3, r3, #3
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	091b      	lsrs	r3, r3, #4
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	f003 030f 	and.w	r3, r3, #15
 800c000:	b2da      	uxtb	r2, r3
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	f003 030f 	and.w	r3, r3, #15
 800c00e:	b2da      	uxtb	r2, r3
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	0e1b      	lsrs	r3, r3, #24
 800c018:	b2da      	uxtb	r2, r3
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c026:	4618      	mov	r0, r3
 800c028:	f001 fc34 	bl	800d894 <SDMMC_CmdBlockLength>
 800c02c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c02e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00d      	beq.n	800c050 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a08      	ldr	r2, [pc, #32]	; (800c05c <HAL_SD_GetCardStatus+0x178>)
 800c03a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c040:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2201      	movs	r2, #1
 800c046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800c050:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c054:	4618      	mov	r0, r3
 800c056:	3750      	adds	r7, #80	; 0x50
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	1fe00fff 	.word	0x1fe00fff

0800c060 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c0b8:	b590      	push	{r4, r7, lr}
 800c0ba:	b08d      	sub	sp, #52	; 0x34
 800c0bc:	af02      	add	r7, sp, #8
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2203      	movs	r2, #3
 800c0cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d4:	2b03      	cmp	r3, #3
 800c0d6:	d02e      	beq.n	800c136 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0de:	d106      	bne.n	800c0ee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	635a      	str	r2, [r3, #52]	; 0x34
 800c0ec:	e029      	b.n	800c142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0f4:	d10a      	bne.n	800c10c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fb64 	bl	800c7c4 <SD_WideBus_Enable>
 800c0fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	431a      	orrs	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	635a      	str	r2, [r3, #52]	; 0x34
 800c10a:	e01a      	b.n	800c142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10a      	bne.n	800c128 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fba1 	bl	800c85a <SD_WideBus_Disable>
 800c118:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c11e:	6a3b      	ldr	r3, [r7, #32]
 800c120:	431a      	orrs	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	635a      	str	r2, [r3, #52]	; 0x34
 800c126:	e00c      	b.n	800c142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	635a      	str	r2, [r3, #52]	; 0x34
 800c134:	e005      	b.n	800c142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c13a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c146:	2b00      	cmp	r3, #0
 800c148:	d007      	beq.n	800c15a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a5f      	ldr	r2, [pc, #380]	; (800c2cc <HAL_SD_ConfigWideBusOperation+0x214>)
 800c150:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c158:	e096      	b.n	800c288 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c15a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c15e:	f04f 0100 	mov.w	r1, #0
 800c162:	f7fd fdef 	bl	8009d44 <HAL_RCCEx_GetPeriphCLKFreq>
 800c166:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f000 8083 	beq.w	800c276 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	695a      	ldr	r2, [r3, #20]
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	4950      	ldr	r1, [pc, #320]	; (800c2d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c18e:	fba1 1303 	umull	r1, r3, r1, r3
 800c192:	0e1b      	lsrs	r3, r3, #24
 800c194:	429a      	cmp	r2, r3
 800c196:	d303      	bcc.n	800c1a0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	695b      	ldr	r3, [r3, #20]
 800c19c:	61bb      	str	r3, [r7, #24]
 800c19e:	e05a      	b.n	800c256 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1a8:	d103      	bne.n	800c1b2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	61bb      	str	r3, [r7, #24]
 800c1b0:	e051      	b.n	800c256 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ba:	d126      	bne.n	800c20a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	695b      	ldr	r3, [r3, #20]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10e      	bne.n	800c1e2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	4a43      	ldr	r2, [pc, #268]	; (800c2d4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d906      	bls.n	800c1da <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	4a40      	ldr	r2, [pc, #256]	; (800c2d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d4:	0e5b      	lsrs	r3, r3, #25
 800c1d6:	61bb      	str	r3, [r7, #24]
 800c1d8:	e03d      	b.n	800c256 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	61bb      	str	r3, [r7, #24]
 800c1e0:	e039      	b.n	800c256 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	005b      	lsls	r3, r3, #1
 800c1e8:	69fa      	ldr	r2, [r7, #28]
 800c1ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ee:	4a39      	ldr	r2, [pc, #228]	; (800c2d4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d906      	bls.n	800c202 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	4a36      	ldr	r2, [pc, #216]	; (800c2d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fc:	0e5b      	lsrs	r3, r3, #25
 800c1fe:	61bb      	str	r3, [r7, #24]
 800c200:	e029      	b.n	800c256 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	695b      	ldr	r3, [r3, #20]
 800c206:	61bb      	str	r3, [r7, #24]
 800c208:	e025      	b.n	800c256 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10e      	bne.n	800c230 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	4a30      	ldr	r2, [pc, #192]	; (800c2d8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d906      	bls.n	800c228 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	4a2c      	ldr	r2, [pc, #176]	; (800c2d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c21e:	fba2 2303 	umull	r2, r3, r2, r3
 800c222:	0e1b      	lsrs	r3, r3, #24
 800c224:	61bb      	str	r3, [r7, #24]
 800c226:	e016      	b.n	800c256 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	695b      	ldr	r3, [r3, #20]
 800c22c:	61bb      	str	r3, [r7, #24]
 800c22e:	e012      	b.n	800c256 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	695b      	ldr	r3, [r3, #20]
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	69fa      	ldr	r2, [r7, #28]
 800c238:	fbb2 f3f3 	udiv	r3, r2, r3
 800c23c:	4a26      	ldr	r2, [pc, #152]	; (800c2d8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d906      	bls.n	800c250 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	4a22      	ldr	r2, [pc, #136]	; (800c2d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c246:	fba2 2303 	umull	r2, r3, r2, r3
 800c24a:	0e1b      	lsrs	r3, r3, #24
 800c24c:	61bb      	str	r3, [r7, #24]
 800c24e:	e002      	b.n	800c256 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	695b      	ldr	r3, [r3, #20]
 800c254:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681c      	ldr	r4, [r3, #0]
 800c25a:	466a      	mov	r2, sp
 800c25c:	f107 0314 	add.w	r3, r7, #20
 800c260:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c264:	e882 0003 	stmia.w	r2, {r0, r1}
 800c268:	f107 0308 	add.w	r3, r7, #8
 800c26c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c26e:	4620      	mov	r0, r4
 800c270:	f001 fa32 	bl	800d6d8 <SDMMC_Init>
 800c274:	e008      	b.n	800c288 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c27a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c290:	4618      	mov	r0, r3
 800c292:	f001 faff 	bl	800d894 <SDMMC_CmdBlockLength>
 800c296:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c298:	6a3b      	ldr	r3, [r7, #32]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00c      	beq.n	800c2b8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a0a      	ldr	r2, [pc, #40]	; (800c2cc <HAL_SD_ConfigWideBusOperation+0x214>)
 800c2a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	431a      	orrs	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800c2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	372c      	adds	r7, #44	; 0x2c
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd90      	pop	{r4, r7, pc}
 800c2cc:	1fe00fff 	.word	0x1fe00fff
 800c2d0:	55e63b89 	.word	0x55e63b89
 800c2d4:	02faf080 	.word	0x02faf080
 800c2d8:	017d7840 	.word	0x017d7840

0800c2dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c2e8:	f107 030c 	add.w	r3, r7, #12
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fa40 	bl	800c774 <SD_SendStatus>
 800c2f4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d005      	beq.n	800c308 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	431a      	orrs	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	0a5b      	lsrs	r3, r3, #9
 800c30c:	f003 030f 	and.w	r3, r3, #15
 800c310:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c312:	693b      	ldr	r3, [r7, #16]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b090      	sub	sp, #64	; 0x40
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c324:	2300      	movs	r3, #0
 800c326:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c328:	f7f5 f844 	bl	80013b4 <HAL_GetTick>
 800c32c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4618      	mov	r0, r3
 800c334:	f001 fa29 	bl	800d78a <SDMMC_GetPowerState>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d102      	bne.n	800c344 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c33e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c342:	e0b5      	b.n	800c4b0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c348:	2b03      	cmp	r3, #3
 800c34a:	d02e      	beq.n	800c3aa <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4618      	mov	r0, r3
 800c352:	f001 fc74 	bl	800dc3e <SDMMC_CmdSendCID>
 800c356:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <SD_InitCard+0x46>
    {
      return errorstate;
 800c35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c360:	e0a6      	b.n	800c4b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2100      	movs	r1, #0
 800c368:	4618      	mov	r0, r3
 800c36a:	f001 fa54 	bl	800d816 <SDMMC_GetResponse>
 800c36e:	4602      	mov	r2, r0
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2104      	movs	r1, #4
 800c37a:	4618      	mov	r0, r3
 800c37c:	f001 fa4b 	bl	800d816 <SDMMC_GetResponse>
 800c380:	4602      	mov	r2, r0
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2108      	movs	r1, #8
 800c38c:	4618      	mov	r0, r3
 800c38e:	f001 fa42 	bl	800d816 <SDMMC_GetResponse>
 800c392:	4602      	mov	r2, r0
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	210c      	movs	r1, #12
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f001 fa39 	bl	800d816 <SDMMC_GetResponse>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d01d      	beq.n	800c3ee <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c3b2:	e019      	b.n	800c3e8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f107 020a 	add.w	r2, r7, #10
 800c3bc:	4611      	mov	r1, r2
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f001 fc7c 	bl	800dcbc <SDMMC_CmdSetRelAdd>
 800c3c4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <SD_InitCard+0xb4>
      {
        return errorstate;
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	e06f      	b.n	800c4b0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c3d0:	f7f4 fff0 	bl	80013b4 <HAL_GetTick>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	f241 3287 	movw	r2, #4999	; 0x1387
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d902      	bls.n	800c3e8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c3e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3e6:	e063      	b.n	800c4b0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c3e8:	897b      	ldrh	r3, [r7, #10]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d0e2      	beq.n	800c3b4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	d036      	beq.n	800c464 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c3f6:	897b      	ldrh	r3, [r7, #10]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c406:	041b      	lsls	r3, r3, #16
 800c408:	4619      	mov	r1, r3
 800c40a:	4610      	mov	r0, r2
 800c40c:	f001 fc36 	bl	800dc7c <SDMMC_CmdSendCSD>
 800c410:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	2b00      	cmp	r3, #0
 800c416:	d001      	beq.n	800c41c <SD_InitCard+0x100>
    {
      return errorstate;
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	e049      	b.n	800c4b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2100      	movs	r1, #0
 800c422:	4618      	mov	r0, r3
 800c424:	f001 f9f7 	bl	800d816 <SDMMC_GetResponse>
 800c428:	4602      	mov	r2, r0
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2104      	movs	r1, #4
 800c434:	4618      	mov	r0, r3
 800c436:	f001 f9ee 	bl	800d816 <SDMMC_GetResponse>
 800c43a:	4602      	mov	r2, r0
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2108      	movs	r1, #8
 800c446:	4618      	mov	r0, r3
 800c448:	f001 f9e5 	bl	800d816 <SDMMC_GetResponse>
 800c44c:	4602      	mov	r2, r0
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	210c      	movs	r1, #12
 800c458:	4618      	mov	r0, r3
 800c45a:	f001 f9dc 	bl	800d816 <SDMMC_GetResponse>
 800c45e:	4602      	mov	r2, r0
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2104      	movs	r1, #4
 800c46a:	4618      	mov	r0, r3
 800c46c:	f001 f9d3 	bl	800d816 <SDMMC_GetResponse>
 800c470:	4603      	mov	r3, r0
 800c472:	0d1a      	lsrs	r2, r3, #20
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c478:	f107 030c 	add.w	r3, r7, #12
 800c47c:	4619      	mov	r1, r3
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7ff fb8c 	bl	800bb9c <HAL_SD_GetCardCSD>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d002      	beq.n	800c490 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c48a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c48e:	e00f      	b.n	800c4b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c498:	041b      	lsls	r3, r3, #16
 800c49a:	4619      	mov	r1, r3
 800c49c:	4610      	mov	r0, r2
 800c49e:	f001 fae5 	bl	800da6c <SDMMC_CmdSelDesel>
 800c4a2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d001      	beq.n	800c4ae <SD_InitCard+0x192>
  {
    return errorstate;
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	e000      	b.n	800c4b0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3740      	adds	r7, #64	; 0x40
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f001 faee 	bl	800dab2 <SDMMC_CmdGoIdleState>
 800c4d6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	e072      	b.n	800c5c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f001 fb01 	bl	800daee <SDMMC_CmdOperCond>
 800c4ec:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4f4:	d10d      	bne.n	800c512 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4618      	mov	r0, r3
 800c502:	f001 fad6 	bl	800dab2 <SDMMC_CmdGoIdleState>
 800c506:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d004      	beq.n	800c518 <SD_PowerON+0x60>
    {
      return errorstate;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	e05a      	b.n	800c5c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2201      	movs	r2, #1
 800c516:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d137      	bne.n	800c590 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2100      	movs	r1, #0
 800c526:	4618      	mov	r0, r3
 800c528:	f001 fb01 	bl	800db2e <SDMMC_CmdAppCommand>
 800c52c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d02d      	beq.n	800c590 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c534:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c538:	e046      	b.n	800c5c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2100      	movs	r1, #0
 800c540:	4618      	mov	r0, r3
 800c542:	f001 faf4 	bl	800db2e <SDMMC_CmdAppCommand>
 800c546:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <SD_PowerON+0x9a>
    {
      return errorstate;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	e03a      	b.n	800c5c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	491e      	ldr	r1, [pc, #120]	; (800c5d0 <SD_PowerON+0x118>)
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 fb0b 	bl	800db74 <SDMMC_CmdAppOperCommand>
 800c55e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c566:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c56a:	e02d      	b.n	800c5c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2100      	movs	r1, #0
 800c572:	4618      	mov	r0, r3
 800c574:	f001 f94f 	bl	800d816 <SDMMC_GetResponse>
 800c578:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	0fdb      	lsrs	r3, r3, #31
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d101      	bne.n	800c586 <SD_PowerON+0xce>
 800c582:	2301      	movs	r3, #1
 800c584:	e000      	b.n	800c588 <SD_PowerON+0xd0>
 800c586:	2300      	movs	r3, #0
 800c588:	613b      	str	r3, [r7, #16]

    count++;
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	3301      	adds	r3, #1
 800c58e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c596:	4293      	cmp	r3, r2
 800c598:	d802      	bhi.n	800c5a0 <SD_PowerON+0xe8>
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d0cc      	beq.n	800c53a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d902      	bls.n	800c5b0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c5aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c5ae:	e00b      	b.n	800c5c8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	c1100000 	.word	0xc1100000

0800c5d4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08c      	sub	sp, #48	; 0x30
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c5de:	f7f4 fee9 	bl	80013b4 <HAL_GetTick>
 800c5e2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f001 f911 	bl	800d816 <SDMMC_GetResponse>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5fe:	d102      	bne.n	800c606 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c604:	e0b0      	b.n	800c768 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2140      	movs	r1, #64	; 0x40
 800c60c:	4618      	mov	r0, r3
 800c60e:	f001 f941 	bl	800d894 <SDMMC_CmdBlockLength>
 800c612:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d005      	beq.n	800c626 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c622:	6a3b      	ldr	r3, [r7, #32]
 800c624:	e0a0      	b.n	800c768 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c62e:	041b      	lsls	r3, r3, #16
 800c630:	4619      	mov	r1, r3
 800c632:	4610      	mov	r0, r2
 800c634:	f001 fa7b 	bl	800db2e <SDMMC_CmdAppCommand>
 800c638:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c63a:	6a3b      	ldr	r3, [r7, #32]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d005      	beq.n	800c64c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	e08d      	b.n	800c768 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c64c:	f04f 33ff 	mov.w	r3, #4294967295
 800c650:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c652:	2340      	movs	r3, #64	; 0x40
 800c654:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c656:	2360      	movs	r3, #96	; 0x60
 800c658:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c65a:	2302      	movs	r3, #2
 800c65c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c65e:	2300      	movs	r3, #0
 800c660:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c662:	2301      	movs	r3, #1
 800c664:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f107 0208 	add.w	r2, r7, #8
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f001 f8e3 	bl	800d83c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f001 fb63 	bl	800dd46 <SDMMC_CmdStatusRegister>
 800c680:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d02b      	beq.n	800c6e0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c690:	6a3b      	ldr	r3, [r7, #32]
 800c692:	e069      	b.n	800c768 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c69a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d013      	beq.n	800c6ca <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6a6:	e00d      	b.n	800c6c4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f001 f83d 	bl	800d72c <SDMMC_ReadFIFO>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	601a      	str	r2, [r3, #0]
        pData++;
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800c6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c6:	2b07      	cmp	r3, #7
 800c6c8:	d9ee      	bls.n	800c6a8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c6ca:	f7f4 fe73 	bl	80013b4 <HAL_GetTick>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d8:	d102      	bne.n	800c6e0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c6da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6de:	e043      	b.n	800c768 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d0d2      	beq.n	800c694 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6f4:	f003 0308 	and.w	r3, r3, #8
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d001      	beq.n	800c700 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c6fc:	2308      	movs	r3, #8
 800c6fe:	e033      	b.n	800c768 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c706:	f003 0302 	and.w	r3, r3, #2
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c70e:	2302      	movs	r3, #2
 800c710:	e02a      	b.n	800c768 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c718:	f003 0320 	and.w	r3, r3, #32
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d017      	beq.n	800c750 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800c720:	2320      	movs	r3, #32
 800c722:	e021      	b.n	800c768 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 ffff 	bl	800d72c <SDMMC_ReadFIFO>
 800c72e:	4602      	mov	r2, r0
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	601a      	str	r2, [r3, #0]
    pData++;
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	3304      	adds	r3, #4
 800c738:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c73a:	f7f4 fe3b 	bl	80013b4 <HAL_GetTick>
 800c73e:	4602      	mov	r2, r0
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c748:	d102      	bne.n	800c750 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c74a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c74e:	e00b      	b.n	800c768 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1e2      	bne.n	800c724 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a03      	ldr	r2, [pc, #12]	; (800c770 <SD_SendSDStatus+0x19c>)
 800c764:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3730      	adds	r7, #48	; 0x30
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	18000f3a 	.word	0x18000f3a

0800c774 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d102      	bne.n	800c78a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c784:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c788:	e018      	b.n	800c7bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c792:	041b      	lsls	r3, r3, #16
 800c794:	4619      	mov	r1, r3
 800c796:	4610      	mov	r0, r2
 800c798:	f001 fab2 	bl	800dd00 <SDMMC_CmdSendStatus>
 800c79c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	e009      	b.n	800c7bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f001 f831 	bl	800d816 <SDMMC_GetResponse>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c7ba:	2300      	movs	r3, #0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2100      	movs	r1, #0
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f001 f81b 	bl	800d816 <SDMMC_GetResponse>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7ea:	d102      	bne.n	800c7f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c7ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7f0:	e02f      	b.n	800c852 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c7f2:	f107 030c 	add.w	r3, r7, #12
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f879 	bl	800c8f0 <SD_FindSCR>
 800c7fe:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d001      	beq.n	800c80a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	e023      	b.n	800c852 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c810:	2b00      	cmp	r3, #0
 800c812:	d01c      	beq.n	800c84e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c81c:	041b      	lsls	r3, r3, #16
 800c81e:	4619      	mov	r1, r3
 800c820:	4610      	mov	r0, r2
 800c822:	f001 f984 	bl	800db2e <SDMMC_CmdAppCommand>
 800c826:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	e00f      	b.n	800c852 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2102      	movs	r1, #2
 800c838:	4618      	mov	r0, r3
 800c83a:	f001 f9bb 	bl	800dbb4 <SDMMC_CmdBusWidth>
 800c83e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d001      	beq.n	800c84a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	e003      	b.n	800c852 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c84a:	2300      	movs	r3, #0
 800c84c:	e001      	b.n	800c852 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c84e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c852:	4618      	mov	r0, r3
 800c854:	3718      	adds	r7, #24
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b086      	sub	sp, #24
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c862:	2300      	movs	r3, #0
 800c864:	60fb      	str	r3, [r7, #12]
 800c866:	2300      	movs	r3, #0
 800c868:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2100      	movs	r1, #0
 800c870:	4618      	mov	r0, r3
 800c872:	f000 ffd0 	bl	800d816 <SDMMC_GetResponse>
 800c876:	4603      	mov	r3, r0
 800c878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c87c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c880:	d102      	bne.n	800c888 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c882:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c886:	e02f      	b.n	800c8e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c888:	f107 030c 	add.w	r3, r7, #12
 800c88c:	4619      	mov	r1, r3
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f82e 	bl	800c8f0 <SD_FindSCR>
 800c894:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d001      	beq.n	800c8a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	e023      	b.n	800c8e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d01c      	beq.n	800c8e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8b2:	041b      	lsls	r3, r3, #16
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	4610      	mov	r0, r2
 800c8b8:	f001 f939 	bl	800db2e <SDMMC_CmdAppCommand>
 800c8bc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	e00f      	b.n	800c8e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f001 f970 	bl	800dbb4 <SDMMC_CmdBusWidth>
 800c8d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d001      	beq.n	800c8e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	e003      	b.n	800c8e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	e001      	b.n	800c8e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c8e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3718      	adds	r7, #24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b08e      	sub	sp, #56	; 0x38
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c8fa:	f7f4 fd5b 	bl	80013b4 <HAL_GetTick>
 800c8fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c900:	2300      	movs	r3, #0
 800c902:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800c904:	2300      	movs	r3, #0
 800c906:	60bb      	str	r3, [r7, #8]
 800c908:	2300      	movs	r3, #0
 800c90a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2108      	movs	r1, #8
 800c916:	4618      	mov	r0, r3
 800c918:	f000 ffbc 	bl	800d894 <SDMMC_CmdBlockLength>
 800c91c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c920:	2b00      	cmp	r3, #0
 800c922:	d001      	beq.n	800c928 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c926:	e0ad      	b.n	800ca84 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c930:	041b      	lsls	r3, r3, #16
 800c932:	4619      	mov	r1, r3
 800c934:	4610      	mov	r0, r2
 800c936:	f001 f8fa 	bl	800db2e <SDMMC_CmdAppCommand>
 800c93a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c944:	e09e      	b.n	800ca84 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c946:	f04f 33ff 	mov.w	r3, #4294967295
 800c94a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c94c:	2308      	movs	r3, #8
 800c94e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c950:	2330      	movs	r3, #48	; 0x30
 800c952:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c954:	2302      	movs	r3, #2
 800c956:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c958:	2300      	movs	r3, #0
 800c95a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c95c:	2301      	movs	r3, #1
 800c95e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f107 0210 	add.w	r2, r7, #16
 800c968:	4611      	mov	r1, r2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 ff66 	bl	800d83c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4618      	mov	r0, r3
 800c976:	f001 f940 	bl	800dbfa <SDMMC_CmdSendSCR>
 800c97a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d027      	beq.n	800c9d2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800c982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c984:	e07e      	b.n	800ca84 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c98c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c990:	2b00      	cmp	r3, #0
 800c992:	d113      	bne.n	800c9bc <SD_FindSCR+0xcc>
 800c994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c996:	2b00      	cmp	r3, #0
 800c998:	d110      	bne.n	800c9bc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 fec4 	bl	800d72c <SDMMC_ReadFIFO>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 febd 	bl	800d72c <SDMMC_ReadFIFO>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	60fb      	str	r3, [r7, #12]
      index++;
 800c9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c9bc:	f7f4 fcfa 	bl	80013b4 <HAL_GetTick>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c4:	1ad3      	subs	r3, r2, r3
 800c9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ca:	d102      	bne.n	800c9d2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c9cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9d0:	e058      	b.n	800ca84 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9d8:	f240 532a 	movw	r3, #1322	; 0x52a
 800c9dc:	4013      	ands	r3, r2
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0d1      	beq.n	800c986 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e8:	f003 0308 	and.w	r3, r3, #8
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d005      	beq.n	800c9fc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2208      	movs	r2, #8
 800c9f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c9f8:	2308      	movs	r3, #8
 800c9fa:	e043      	b.n	800ca84 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca02:	f003 0302 	and.w	r3, r3, #2
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d005      	beq.n	800ca16 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2202      	movs	r2, #2
 800ca10:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ca12:	2302      	movs	r3, #2
 800ca14:	e036      	b.n	800ca84 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca1c:	f003 0320 	and.w	r3, r3, #32
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d005      	beq.n	800ca30 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ca2c:	2320      	movs	r3, #32
 800ca2e:	e029      	b.n	800ca84 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a15      	ldr	r2, [pc, #84]	; (800ca8c <SD_FindSCR+0x19c>)
 800ca36:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	061a      	lsls	r2, r3, #24
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	021b      	lsls	r3, r3, #8
 800ca40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca44:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	0a1b      	lsrs	r3, r3, #8
 800ca4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ca4e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	0e1b      	lsrs	r3, r3, #24
 800ca54:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ca56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca58:	601a      	str	r2, [r3, #0]
    scr++;
 800ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5c:	3304      	adds	r3, #4
 800ca5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	061a      	lsls	r2, r3, #24
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	021b      	lsls	r3, r3, #8
 800ca68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca6c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	0a1b      	lsrs	r3, r3, #8
 800ca72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ca76:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	0e1b      	lsrs	r3, r3, #24
 800ca7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ca7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca80:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ca82:	2300      	movs	r3, #0
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3738      	adds	r7, #56	; 0x38
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	18000f3a 	.word	0x18000f3a

0800ca90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e10f      	b.n	800ccc2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a87      	ldr	r2, [pc, #540]	; (800cccc <HAL_SPI_Init+0x23c>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d00f      	beq.n	800cad2 <HAL_SPI_Init+0x42>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a86      	ldr	r2, [pc, #536]	; (800ccd0 <HAL_SPI_Init+0x240>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d00a      	beq.n	800cad2 <HAL_SPI_Init+0x42>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a84      	ldr	r2, [pc, #528]	; (800ccd4 <HAL_SPI_Init+0x244>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d005      	beq.n	800cad2 <HAL_SPI_Init+0x42>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	2b0f      	cmp	r3, #15
 800cacc:	d901      	bls.n	800cad2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e0f7      	b.n	800ccc2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fde4 	bl	800d6a0 <SPI_GetPacketSize>
 800cad8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a7b      	ldr	r2, [pc, #492]	; (800cccc <HAL_SPI_Init+0x23c>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d00c      	beq.n	800cafe <HAL_SPI_Init+0x6e>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a79      	ldr	r2, [pc, #484]	; (800ccd0 <HAL_SPI_Init+0x240>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d007      	beq.n	800cafe <HAL_SPI_Init+0x6e>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a78      	ldr	r2, [pc, #480]	; (800ccd4 <HAL_SPI_Init+0x244>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d002      	beq.n	800cafe <HAL_SPI_Init+0x6e>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2b08      	cmp	r3, #8
 800cafc:	d811      	bhi.n	800cb22 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cb02:	4a72      	ldr	r2, [pc, #456]	; (800cccc <HAL_SPI_Init+0x23c>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d009      	beq.n	800cb1c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a70      	ldr	r2, [pc, #448]	; (800ccd0 <HAL_SPI_Init+0x240>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d004      	beq.n	800cb1c <HAL_SPI_Init+0x8c>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a6f      	ldr	r2, [pc, #444]	; (800ccd4 <HAL_SPI_Init+0x244>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d104      	bne.n	800cb26 <HAL_SPI_Init+0x96>
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b10      	cmp	r3, #16
 800cb20:	d901      	bls.n	800cb26 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	e0cd      	b.n	800ccc2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d106      	bne.n	800cb40 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7f4 f944 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2202      	movs	r2, #2
 800cb44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f022 0201 	bic.w	r2, r2, #1
 800cb56:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cb62:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb6c:	d119      	bne.n	800cba2 <HAL_SPI_Init+0x112>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb76:	d103      	bne.n	800cb80 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d008      	beq.n	800cb92 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10c      	bne.n	800cba2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cb8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb90:	d107      	bne.n	800cba2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cba0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00f      	beq.n	800cbce <HAL_SPI_Init+0x13e>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	2b06      	cmp	r3, #6
 800cbb4:	d90b      	bls.n	800cbce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	430a      	orrs	r2, r1
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	e007      	b.n	800cbde <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbdc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	69da      	ldr	r2, [r3, #28]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe6:	431a      	orrs	r2, r3
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	431a      	orrs	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf0:	ea42 0103 	orr.w	r1, r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	68da      	ldr	r2, [r3, #12]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	430a      	orrs	r2, r1
 800cbfe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc08:	431a      	orrs	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0e:	431a      	orrs	r2, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	699b      	ldr	r3, [r3, #24]
 800cc14:	431a      	orrs	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	431a      	orrs	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	431a      	orrs	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	431a      	orrs	r2, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	431a      	orrs	r2, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc32:	431a      	orrs	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	431a      	orrs	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc3e:	ea42 0103 	orr.w	r1, r2, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	430a      	orrs	r2, r1
 800cc4c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d113      	bne.n	800cc7e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc68:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc7c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f022 0201 	bic.w	r2, r2, #1
 800cc8c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00a      	beq.n	800ccb0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	430a      	orrs	r2, r1
 800ccae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	40013000 	.word	0x40013000
 800ccd0:	40003800 	.word	0x40003800
 800ccd4:	40003c00 	.word	0x40003c00

0800ccd8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b08a      	sub	sp, #40	; 0x28
 800ccdc:	af02      	add	r7, sp, #8
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	603b      	str	r3, [r7, #0]
 800cce4:	4613      	mov	r3, r2
 800cce6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	3320      	adds	r3, #32
 800ccee:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d101      	bne.n	800cd02 <HAL_SPI_Transmit+0x2a>
 800ccfe:	2302      	movs	r3, #2
 800cd00:	e1e1      	b.n	800d0c6 <HAL_SPI_Transmit+0x3ee>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd0a:	f7f4 fb53 	bl	80013b4 <HAL_GetTick>
 800cd0e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d007      	beq.n	800cd2c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cd28:	7efb      	ldrb	r3, [r7, #27]
 800cd2a:	e1cc      	b.n	800d0c6 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d002      	beq.n	800cd38 <HAL_SPI_Transmit+0x60>
 800cd32:	88fb      	ldrh	r3, [r7, #6]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d107      	bne.n	800cd48 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cd44:	7efb      	ldrb	r3, [r7, #27]
 800cd46:	e1be      	b.n	800d0c6 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2203      	movs	r2, #3
 800cd4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	88fa      	ldrh	r2, [r7, #6]
 800cd62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	88fa      	ldrh	r2, [r7, #6]
 800cd6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cd98:	d108      	bne.n	800cdac <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cda8:	601a      	str	r2, [r3, #0]
 800cdaa:	e009      	b.n	800cdc0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cdbe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	4b96      	ldr	r3, [pc, #600]	; (800d020 <HAL_SPI_Transmit+0x348>)
 800cdc8:	4013      	ands	r3, r2
 800cdca:	88f9      	ldrh	r1, [r7, #6]
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	6812      	ldr	r2, [r2, #0]
 800cdd0:	430b      	orrs	r3, r1
 800cdd2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f042 0201 	orr.w	r2, r2, #1
 800cde2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdec:	d107      	bne.n	800cdfe <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	2b0f      	cmp	r3, #15
 800ce04:	d947      	bls.n	800ce96 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ce06:	e03f      	b.n	800ce88 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	f003 0302 	and.w	r3, r3, #2
 800ce12:	2b02      	cmp	r3, #2
 800ce14:	d114      	bne.n	800ce40 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	6812      	ldr	r2, [r2, #0]
 800ce20:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce26:	1d1a      	adds	r2, r3, #4
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	3b01      	subs	r3, #1
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ce3e:	e023      	b.n	800ce88 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce40:	f7f4 fab8 	bl	80013b4 <HAL_GetTick>
 800ce44:	4602      	mov	r2, r0
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d803      	bhi.n	800ce58 <HAL_SPI_Transmit+0x180>
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce56:	d102      	bne.n	800ce5e <HAL_SPI_Transmit+0x186>
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d114      	bne.n	800ce88 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f000 fb50 	bl	800d504 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ce84:	2303      	movs	r3, #3
 800ce86:	e11e      	b.n	800d0c6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1b9      	bne.n	800ce08 <HAL_SPI_Transmit+0x130>
 800ce94:	e0f1      	b.n	800d07a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	2b07      	cmp	r3, #7
 800ce9c:	f240 80e6 	bls.w	800d06c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cea0:	e05d      	b.n	800cf5e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	f003 0302 	and.w	r3, r3, #2
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d132      	bne.n	800cf16 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d918      	bls.n	800ceee <HAL_SPI_Transmit+0x216>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d014      	beq.n	800ceee <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6812      	ldr	r2, [r2, #0]
 800cece:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ced4:	1d1a      	adds	r2, r3, #4
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	3b02      	subs	r3, #2
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ceec:	e037      	b.n	800cf5e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cef2:	881a      	ldrh	r2, [r3, #0]
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cefc:	1c9a      	adds	r2, r3, #2
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	3b01      	subs	r3, #1
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cf14:	e023      	b.n	800cf5e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf16:	f7f4 fa4d 	bl	80013b4 <HAL_GetTick>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d803      	bhi.n	800cf2e <HAL_SPI_Transmit+0x256>
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2c:	d102      	bne.n	800cf34 <HAL_SPI_Transmit+0x25c>
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d114      	bne.n	800cf5e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f000 fae5 	bl	800d504 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2201      	movs	r2, #1
 800cf56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	e0b3      	b.n	800d0c6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d19b      	bne.n	800cea2 <HAL_SPI_Transmit+0x1ca>
 800cf6a:	e086      	b.n	800d07a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	695b      	ldr	r3, [r3, #20]
 800cf72:	f003 0302 	and.w	r3, r3, #2
 800cf76:	2b02      	cmp	r3, #2
 800cf78:	d154      	bne.n	800d024 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	2b03      	cmp	r3, #3
 800cf84:	d918      	bls.n	800cfb8 <HAL_SPI_Transmit+0x2e0>
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf8a:	2b40      	cmp	r3, #64	; 0x40
 800cf8c:	d914      	bls.n	800cfb8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	6812      	ldr	r2, [r2, #0]
 800cf98:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf9e:	1d1a      	adds	r2, r3, #4
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	3b04      	subs	r3, #4
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cfb6:	e059      	b.n	800d06c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d917      	bls.n	800cff4 <HAL_SPI_Transmit+0x31c>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d013      	beq.n	800cff4 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfd0:	881a      	ldrh	r2, [r3, #0]
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfda:	1c9a      	adds	r2, r3, #2
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	3b02      	subs	r3, #2
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cff2:	e03b      	b.n	800d06c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3320      	adds	r3, #32
 800cffe:	7812      	ldrb	r2, [r2, #0]
 800d000:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d006:	1c5a      	adds	r2, r3, #1
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d012:	b29b      	uxth	r3, r3
 800d014:	3b01      	subs	r3, #1
 800d016:	b29a      	uxth	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d01e:	e025      	b.n	800d06c <HAL_SPI_Transmit+0x394>
 800d020:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d024:	f7f4 f9c6 	bl	80013b4 <HAL_GetTick>
 800d028:	4602      	mov	r2, r0
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	429a      	cmp	r2, r3
 800d032:	d803      	bhi.n	800d03c <HAL_SPI_Transmit+0x364>
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03a:	d102      	bne.n	800d042 <HAL_SPI_Transmit+0x36a>
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d114      	bne.n	800d06c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f000 fa5e 	bl	800d504 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d056:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d068:	2303      	movs	r3, #3
 800d06a:	e02c      	b.n	800d0c6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d072:	b29b      	uxth	r3, r3
 800d074:	2b00      	cmp	r3, #0
 800d076:	f47f af79 	bne.w	800cf6c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2200      	movs	r2, #0
 800d082:	2108      	movs	r1, #8
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f000 fadd 	bl	800d644 <SPI_WaitOnFlagUntilTimeout>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d007      	beq.n	800d0a0 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d096:	f043 0220 	orr.w	r2, r3, #32
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f000 fa2f 	bl	800d504 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d001      	beq.n	800d0c4 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e000      	b.n	800d0c6 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800d0c4:	7efb      	ldrb	r3, [r7, #27]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3720      	adds	r7, #32
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop

0800d0d0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08a      	sub	sp, #40	; 0x28
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	691b      	ldr	r3, [r3, #16]
 800d0de:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d0e8:	6a3a      	ldr	r2, [r7, #32]
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d102:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	3330      	adds	r3, #48	; 0x30
 800d10a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d112:	2b00      	cmp	r3, #0
 800d114:	d010      	beq.n	800d138 <HAL_SPI_IRQHandler+0x68>
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	f003 0308 	and.w	r3, r3, #8
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00b      	beq.n	800d138 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	699a      	ldr	r2, [r3, #24]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d12e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 f9c3 	bl	800d4bc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800d136:	e192      	b.n	800d45e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d113      	bne.n	800d16a <HAL_SPI_IRQHandler+0x9a>
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	f003 0320 	and.w	r3, r3, #32
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10e      	bne.n	800d16a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d152:	2b00      	cmp	r3, #0
 800d154:	d009      	beq.n	800d16a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	4798      	blx	r3
    handled = 1UL;
 800d166:	2301      	movs	r3, #1
 800d168:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10f      	bne.n	800d194 <HAL_SPI_IRQHandler+0xc4>
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00a      	beq.n	800d194 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d184:	2b00      	cmp	r3, #0
 800d186:	d105      	bne.n	800d194 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	4798      	blx	r3
    handled = 1UL;
 800d190:	2301      	movs	r3, #1
 800d192:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d194:	69bb      	ldr	r3, [r7, #24]
 800d196:	f003 0320 	and.w	r3, r3, #32
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10f      	bne.n	800d1be <HAL_SPI_IRQHandler+0xee>
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	f003 0302 	and.w	r3, r3, #2
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00a      	beq.n	800d1be <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d105      	bne.n	800d1be <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	4798      	blx	r3
    handled = 1UL;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f040 8147 	bne.w	800d454 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	f003 0308 	and.w	r3, r3, #8
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 808b 	beq.w	800d2e8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	699a      	ldr	r2, [r3, #24]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f042 0208 	orr.w	r2, r2, #8
 800d1e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	699a      	ldr	r2, [r3, #24]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f042 0210 	orr.w	r2, r2, #16
 800d1f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	699a      	ldr	r2, [r3, #24]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d200:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	691a      	ldr	r2, [r3, #16]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f022 0208 	bic.w	r2, r2, #8
 800d210:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d13d      	bne.n	800d29c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800d220:	e036      	b.n	800d290 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	2b0f      	cmp	r3, #15
 800d228:	d90b      	bls.n	800d242 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d232:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d234:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d23a:	1d1a      	adds	r2, r3, #4
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	665a      	str	r2, [r3, #100]	; 0x64
 800d240:	e01d      	b.n	800d27e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	2b07      	cmp	r3, #7
 800d248:	d90b      	bls.n	800d262 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	8812      	ldrh	r2, [r2, #0]
 800d252:	b292      	uxth	r2, r2
 800d254:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d25a:	1c9a      	adds	r2, r3, #2
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	665a      	str	r2, [r3, #100]	; 0x64
 800d260:	e00d      	b.n	800d27e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d26e:	7812      	ldrb	r2, [r2, #0]
 800d270:	b2d2      	uxtb	r2, r2
 800d272:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d278:	1c5a      	adds	r2, r3, #1
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d284:	b29b      	uxth	r3, r3
 800d286:	3b01      	subs	r3, #1
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d296:	b29b      	uxth	r3, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1c2      	bne.n	800d222 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f931 	bl	800d504 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d003      	beq.n	800d2bc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 f8f7 	bl	800d4a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d2ba:	e0d0      	b.n	800d45e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d2bc:	7cfb      	ldrb	r3, [r7, #19]
 800d2be:	2b05      	cmp	r3, #5
 800d2c0:	d103      	bne.n	800d2ca <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 f8e6 	bl	800d494 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d2c8:	e0c6      	b.n	800d458 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d2ca:	7cfb      	ldrb	r3, [r7, #19]
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	d103      	bne.n	800d2d8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f8d5 	bl	800d480 <HAL_SPI_RxCpltCallback>
    return;
 800d2d6:	e0bf      	b.n	800d458 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d2d8:	7cfb      	ldrb	r3, [r7, #19]
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	f040 80bc 	bne.w	800d458 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 f8c3 	bl	800d46c <HAL_SPI_TxCpltCallback>
    return;
 800d2e6:	e0b7      	b.n	800d458 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 80b5 	beq.w	800d45e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00f      	beq.n	800d31e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d304:	f043 0204 	orr.w	r2, r3, #4
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	699a      	ldr	r2, [r3, #24]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d31c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00f      	beq.n	800d348 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d32e:	f043 0201 	orr.w	r2, r3, #1
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	699a      	ldr	r2, [r3, #24]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d346:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00f      	beq.n	800d372 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d358:	f043 0208 	orr.w	r2, r3, #8
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	699a      	ldr	r2, [r3, #24]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d370:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	f003 0320 	and.w	r3, r3, #32
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00f      	beq.n	800d39c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d382:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	699a      	ldr	r2, [r3, #24]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f042 0220 	orr.w	r2, r2, #32
 800d39a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d05a      	beq.n	800d45c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f022 0201 	bic.w	r2, r2, #1
 800d3b4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	6919      	ldr	r1, [r3, #16]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	4b28      	ldr	r3, [pc, #160]	; (800d464 <HAL_SPI_IRQHandler+0x394>)
 800d3c2:	400b      	ands	r3, r1
 800d3c4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d3cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d3d0:	d138      	bne.n	800d444 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	689a      	ldr	r2, [r3, #8]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d3e0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d013      	beq.n	800d412 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ee:	4a1e      	ldr	r2, [pc, #120]	; (800d468 <HAL_SPI_IRQHandler+0x398>)
 800d3f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7f5 fd50 	bl	8002e9c <HAL_DMA_Abort_IT>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d007      	beq.n	800d412 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d408:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d416:	2b00      	cmp	r3, #0
 800d418:	d020      	beq.n	800d45c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d41e:	4a12      	ldr	r2, [pc, #72]	; (800d468 <HAL_SPI_IRQHandler+0x398>)
 800d420:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d426:	4618      	mov	r0, r3
 800d428:	f7f5 fd38 	bl	8002e9c <HAL_DMA_Abort_IT>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d014      	beq.n	800d45c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d438:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d442:	e00b      	b.n	800d45c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2201      	movs	r2, #1
 800d448:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f82b 	bl	800d4a8 <HAL_SPI_ErrorCallback>
    return;
 800d452:	e003      	b.n	800d45c <HAL_SPI_IRQHandler+0x38c>
    return;
 800d454:	bf00      	nop
 800d456:	e002      	b.n	800d45e <HAL_SPI_IRQHandler+0x38e>
    return;
 800d458:	bf00      	nop
 800d45a:	e000      	b.n	800d45e <HAL_SPI_IRQHandler+0x38e>
    return;
 800d45c:	bf00      	nop
  }
}
 800d45e:	3728      	adds	r7, #40	; 0x28
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	fffffc94 	.word	0xfffffc94
 800d468:	0800d4d1 	.word	0x0800d4d1

0800d46c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f7ff ffd6 	bl	800d4a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d4fc:	bf00      	nop
 800d4fe:	3710      	adds	r7, #16
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	699a      	ldr	r2, [r3, #24]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f042 0208 	orr.w	r2, r2, #8
 800d522:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	699a      	ldr	r2, [r3, #24]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f042 0210 	orr.w	r2, r2, #16
 800d532:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f022 0201 	bic.w	r2, r2, #1
 800d542:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	6919      	ldr	r1, [r3, #16]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	4b3c      	ldr	r3, [pc, #240]	; (800d640 <SPI_CloseTransfer+0x13c>)
 800d550:	400b      	ands	r3, r1
 800d552:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	689a      	ldr	r2, [r3, #8]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d562:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b04      	cmp	r3, #4
 800d56e:	d014      	beq.n	800d59a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f003 0320 	and.w	r3, r3, #32
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00f      	beq.n	800d59a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d580:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	699a      	ldr	r2, [r3, #24]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f042 0220 	orr.w	r2, r2, #32
 800d598:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d014      	beq.n	800d5d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00f      	beq.n	800d5d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5b6:	f043 0204 	orr.w	r2, r3, #4
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	699a      	ldr	r2, [r3, #24]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00f      	beq.n	800d5fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5e0:	f043 0201 	orr.w	r2, r3, #1
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	699a      	ldr	r2, [r3, #24]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00f      	beq.n	800d624 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d60a:	f043 0208 	orr.w	r2, r3, #8
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	699a      	ldr	r2, [r3, #24]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d622:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d634:	bf00      	nop
 800d636:	3714      	adds	r7, #20
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	fffffc90 	.word	0xfffffc90

0800d644 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	603b      	str	r3, [r7, #0]
 800d650:	4613      	mov	r3, r2
 800d652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d654:	e010      	b.n	800d678 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d656:	f7f3 fead 	bl	80013b4 <HAL_GetTick>
 800d65a:	4602      	mov	r2, r0
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	429a      	cmp	r2, r3
 800d664:	d803      	bhi.n	800d66e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66c:	d102      	bne.n	800d674 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d101      	bne.n	800d678 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d674:	2303      	movs	r3, #3
 800d676:	e00f      	b.n	800d698 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	695a      	ldr	r2, [r3, #20]
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	4013      	ands	r3, r2
 800d682:	68ba      	ldr	r2, [r7, #8]
 800d684:	429a      	cmp	r2, r3
 800d686:	bf0c      	ite	eq
 800d688:	2301      	moveq	r3, #1
 800d68a:	2300      	movne	r3, #0
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	461a      	mov	r2, r3
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	429a      	cmp	r2, r3
 800d694:	d0df      	beq.n	800d656 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ac:	095b      	lsrs	r3, r3, #5
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	3307      	adds	r3, #7
 800d6be:	08db      	lsrs	r3, r3, #3
 800d6c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	fb02 f303 	mul.w	r3, r2, r3
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3714      	adds	r7, #20
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
	...

0800d6d8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d6d8:	b084      	sub	sp, #16
 800d6da:	b480      	push	{r7}
 800d6dc:	b085      	sub	sp, #20
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	f107 001c 	add.w	r0, r7, #28
 800d6e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d6ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d6f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d6f2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800d6f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800d6fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800d6fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	4313      	orrs	r3, r2
 800d704:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	685a      	ldr	r2, [r3, #4]
 800d70a:	4b07      	ldr	r3, [pc, #28]	; (800d728 <SDMMC_Init+0x50>)
 800d70c:	4013      	ands	r3, r2
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	431a      	orrs	r2, r3
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d716:	2300      	movs	r3, #0
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3714      	adds	r7, #20
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	b004      	add	sp, #16
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	ffc02c00 	.word	0xffc02c00

0800d72c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	370c      	adds	r7, #12
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d746:	b480      	push	{r7}
 800d748:	b083      	sub	sp, #12
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
 800d74e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f043 0203 	orr.w	r2, r3, #3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d77c:	2300      	movs	r3, #0
}
 800d77e:	4618      	mov	r0, r3
 800d780:	370c      	adds	r7, #12
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d78a:	b480      	push	{r7}
 800d78c:	b083      	sub	sp, #12
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f003 0303 	and.w	r3, r3, #3
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	370c      	adds	r7, #12
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
	...

0800d7a8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d7c6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d7cc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d7d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	68da      	ldr	r2, [r3, #12]
 800d7de:	4b06      	ldr	r3, [pc, #24]	; (800d7f8 <SDMMC_SendCommand+0x50>)
 800d7e0:	4013      	ands	r3, r2
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	431a      	orrs	r2, r3
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d7ea:	2300      	movs	r3, #0
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3714      	adds	r7, #20
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr
 800d7f8:	fffee0c0 	.word	0xfffee0c0

0800d7fc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	b2db      	uxtb	r3, r3
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	370c      	adds	r7, #12
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr

0800d816 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d816:	b480      	push	{r7}
 800d818:	b085      	sub	sp, #20
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	3314      	adds	r3, #20
 800d824:	461a      	mov	r2, r3
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	4413      	add	r3, r2
 800d82a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3714      	adds	r7, #20
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr

0800d83c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b085      	sub	sp, #20
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d846:	2300      	movs	r3, #0
 800d848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	685a      	ldr	r2, [r3, #4]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d862:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d868:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d86e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	4313      	orrs	r3, r2
 800d874:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	431a      	orrs	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d886:	2300      	movs	r3, #0

}
 800d888:	4618      	mov	r0, r3
 800d88a:	3714      	adds	r7, #20
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b088      	sub	sp, #32
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d8a2:	2310      	movs	r3, #16
 800d8a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8b6:	f107 0308 	add.w	r3, r7, #8
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7ff ff73 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d8c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8c6:	2110      	movs	r1, #16
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 fa5f 	bl	800dd8c <SDMMC_GetCmdResp1>
 800d8ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8d0:	69fb      	ldr	r3, [r7, #28]
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3720      	adds	r7, #32
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b088      	sub	sp, #32
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d8e8:	2311      	movs	r3, #17
 800d8ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8fc:	f107 0308 	add.w	r3, r7, #8
 800d900:	4619      	mov	r1, r3
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff ff50 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d908:	f241 3288 	movw	r2, #5000	; 0x1388
 800d90c:	2111      	movs	r1, #17
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 fa3c 	bl	800dd8c <SDMMC_GetCmdResp1>
 800d914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d916:	69fb      	ldr	r3, [r7, #28]
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3720      	adds	r7, #32
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b088      	sub	sp, #32
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d92e:	2312      	movs	r3, #18
 800d930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d932:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d938:	2300      	movs	r3, #0
 800d93a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d93c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d940:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d942:	f107 0308 	add.w	r3, r7, #8
 800d946:	4619      	mov	r1, r3
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7ff ff2d 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d94e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d952:	2112      	movs	r1, #18
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fa19 	bl	800dd8c <SDMMC_GetCmdResp1>
 800d95a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d95c:	69fb      	ldr	r3, [r7, #28]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3720      	adds	r7, #32
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b088      	sub	sp, #32
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
 800d96e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d974:	2318      	movs	r3, #24
 800d976:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d97c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d97e:	2300      	movs	r3, #0
 800d980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d986:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d988:	f107 0308 	add.w	r3, r7, #8
 800d98c:	4619      	mov	r1, r3
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f7ff ff0a 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d994:	f241 3288 	movw	r2, #5000	; 0x1388
 800d998:	2118      	movs	r1, #24
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 f9f6 	bl	800dd8c <SDMMC_GetCmdResp1>
 800d9a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9a2:	69fb      	ldr	r3, [r7, #28]
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3720      	adds	r7, #32
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b088      	sub	sp, #32
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d9ba:	2319      	movs	r3, #25
 800d9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d9cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9ce:	f107 0308 	add.w	r3, r7, #8
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7ff fee7 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d9da:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9de:	2119      	movs	r1, #25
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 f9d3 	bl	800dd8c <SDMMC_GetCmdResp1>
 800d9e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9e8:	69fb      	ldr	r3, [r7, #28]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3720      	adds	r7, #32
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
	...

0800d9f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b088      	sub	sp, #32
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800da00:	230c      	movs	r3, #12
 800da02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da0a:	2300      	movs	r3, #0
 800da0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da12:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da2c:	f107 0308 	add.w	r3, r7, #8
 800da30:	4619      	mov	r1, r3
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7ff feb8 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800da38:	4a0b      	ldr	r2, [pc, #44]	; (800da68 <SDMMC_CmdStopTransfer+0x74>)
 800da3a:	210c      	movs	r1, #12
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f9a5 	bl	800dd8c <SDMMC_GetCmdResp1>
 800da42:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da56:	d101      	bne.n	800da5c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800da58:	2300      	movs	r3, #0
 800da5a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800da5c:	69fb      	ldr	r3, [r7, #28]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3720      	adds	r7, #32
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	05f5e100 	.word	0x05f5e100

0800da6c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b088      	sub	sp, #32
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800da7a:	2307      	movs	r3, #7
 800da7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da84:	2300      	movs	r3, #0
 800da86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da8e:	f107 0308 	add.w	r3, r7, #8
 800da92:	4619      	mov	r1, r3
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7ff fe87 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800da9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800da9e:	2107      	movs	r1, #7
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f973 	bl	800dd8c <SDMMC_GetCmdResp1>
 800daa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daa8:	69fb      	ldr	r3, [r7, #28]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3720      	adds	r7, #32
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b088      	sub	sp, #32
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800daba:	2300      	movs	r3, #0
 800dabc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dabe:	2300      	movs	r3, #0
 800dac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dac2:	2300      	movs	r3, #0
 800dac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dac6:	2300      	movs	r3, #0
 800dac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800daca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dace:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dad0:	f107 0308 	add.w	r3, r7, #8
 800dad4:	4619      	mov	r1, r3
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff fe66 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 fb97 	bl	800e210 <SDMMC_GetCmdError>
 800dae2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dae4:	69fb      	ldr	r3, [r7, #28]
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3720      	adds	r7, #32
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b088      	sub	sp, #32
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800daf6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dafa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dafc:	2308      	movs	r3, #8
 800dafe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db06:	2300      	movs	r3, #0
 800db08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db10:	f107 0308 	add.w	r3, r7, #8
 800db14:	4619      	mov	r1, r3
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f7ff fe46 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fb29 	bl	800e174 <SDMMC_GetCmdResp7>
 800db22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db24:	69fb      	ldr	r3, [r7, #28]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3720      	adds	r7, #32
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b088      	sub	sp, #32
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
 800db36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800db3c:	2337      	movs	r3, #55	; 0x37
 800db3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db46:	2300      	movs	r3, #0
 800db48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db50:	f107 0308 	add.w	r3, r7, #8
 800db54:	4619      	mov	r1, r3
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f7ff fe26 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800db5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800db60:	2137      	movs	r1, #55	; 0x37
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f912 	bl	800dd8c <SDMMC_GetCmdResp1>
 800db68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db6a:	69fb      	ldr	r3, [r7, #28]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3720      	adds	r7, #32
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b088      	sub	sp, #32
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800db82:	2329      	movs	r3, #41	; 0x29
 800db84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db8c:	2300      	movs	r3, #0
 800db8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db96:	f107 0308 	add.w	r3, r7, #8
 800db9a:	4619      	mov	r1, r3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff fe03 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 fa2e 	bl	800e004 <SDMMC_GetCmdResp3>
 800dba8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbaa:	69fb      	ldr	r3, [r7, #28]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3720      	adds	r7, #32
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b088      	sub	sp, #32
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dbc2:	2306      	movs	r3, #6
 800dbc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbd6:	f107 0308 	add.w	r3, r7, #8
 800dbda:	4619      	mov	r1, r3
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7ff fde3 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dbe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbe6:	2106      	movs	r1, #6
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 f8cf 	bl	800dd8c <SDMMC_GetCmdResp1>
 800dbee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbf0:	69fb      	ldr	r3, [r7, #28]
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3720      	adds	r7, #32
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b088      	sub	sp, #32
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc02:	2300      	movs	r3, #0
 800dc04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dc06:	2333      	movs	r3, #51	; 0x33
 800dc08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc10:	2300      	movs	r3, #0
 800dc12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc1a:	f107 0308 	add.w	r3, r7, #8
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7ff fdc1 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dc26:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc2a:	2133      	movs	r1, #51	; 0x33
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 f8ad 	bl	800dd8c <SDMMC_GetCmdResp1>
 800dc32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc34:	69fb      	ldr	r3, [r7, #28]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3720      	adds	r7, #32
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b088      	sub	sp, #32
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dc46:	2300      	movs	r3, #0
 800dc48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dc4a:	2302      	movs	r3, #2
 800dc4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dc4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dc52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc54:	2300      	movs	r3, #0
 800dc56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc5e:	f107 0308 	add.w	r3, r7, #8
 800dc62:	4619      	mov	r1, r3
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7ff fd9f 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f980 	bl	800df70 <SDMMC_GetCmdResp2>
 800dc70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc72:	69fb      	ldr	r3, [r7, #28]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3720      	adds	r7, #32
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b088      	sub	sp, #32
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dc8a:	2309      	movs	r3, #9
 800dc8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dc8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dc92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc94:	2300      	movs	r3, #0
 800dc96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc9e:	f107 0308 	add.w	r3, r7, #8
 800dca2:	4619      	mov	r1, r3
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7ff fd7f 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f960 	bl	800df70 <SDMMC_GetCmdResp2>
 800dcb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcb2:	69fb      	ldr	r3, [r7, #28]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3720      	adds	r7, #32
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b088      	sub	sp, #32
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dcca:	2303      	movs	r3, #3
 800dccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcde:	f107 0308 	add.w	r3, r7, #8
 800dce2:	4619      	mov	r1, r3
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7ff fd5f 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dcea:	683a      	ldr	r2, [r7, #0]
 800dcec:	2103      	movs	r1, #3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 f9c8 	bl	800e084 <SDMMC_GetCmdResp6>
 800dcf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcf6:	69fb      	ldr	r3, [r7, #28]
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3720      	adds	r7, #32
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dd0e:	230d      	movs	r3, #13
 800dd10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd22:	f107 0308 	add.w	r3, r7, #8
 800dd26:	4619      	mov	r1, r3
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f7ff fd3d 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dd2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd32:	210d      	movs	r1, #13
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 f829 	bl	800dd8c <SDMMC_GetCmdResp1>
 800dd3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd3c:	69fb      	ldr	r3, [r7, #28]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3720      	adds	r7, #32
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b088      	sub	sp, #32
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800dd52:	230d      	movs	r3, #13
 800dd54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd66:	f107 0308 	add.w	r3, r7, #8
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7ff fd1b 	bl	800d7a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800dd72:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd76:	210d      	movs	r1, #13
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 f807 	bl	800dd8c <SDMMC_GetCmdResp1>
 800dd7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd80:	69fb      	ldr	r3, [r7, #28]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3720      	adds	r7, #32
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
	...

0800dd8c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b088      	sub	sp, #32
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	460b      	mov	r3, r1
 800dd96:	607a      	str	r2, [r7, #4]
 800dd98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dd9a:	4b70      	ldr	r3, [pc, #448]	; (800df5c <SDMMC_GetCmdResp1+0x1d0>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a70      	ldr	r2, [pc, #448]	; (800df60 <SDMMC_GetCmdResp1+0x1d4>)
 800dda0:	fba2 2303 	umull	r2, r3, r2, r3
 800dda4:	0a5a      	lsrs	r2, r3, #9
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	fb02 f303 	mul.w	r3, r2, r3
 800ddac:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	1e5a      	subs	r2, r3, #1
 800ddb2:	61fa      	str	r2, [r7, #28]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d102      	bne.n	800ddbe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddbc:	e0c9      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ddc4:	69ba      	ldr	r2, [r7, #24]
 800ddc6:	4b67      	ldr	r3, [pc, #412]	; (800df64 <SDMMC_GetCmdResp1+0x1d8>)
 800ddc8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d0ef      	beq.n	800ddae <SDMMC_GetCmdResp1+0x22>
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d1ea      	bne.n	800ddae <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dddc:	f003 0304 	and.w	r3, r3, #4
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d004      	beq.n	800ddee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2204      	movs	r2, #4
 800dde8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddea:	2304      	movs	r3, #4
 800ddec:	e0b1      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddf2:	f003 0301 	and.w	r3, r3, #1
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d004      	beq.n	800de04 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de00:	2301      	movs	r3, #1
 800de02:	e0a6      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	4a58      	ldr	r2, [pc, #352]	; (800df68 <SDMMC_GetCmdResp1+0x1dc>)
 800de08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800de0a:	68f8      	ldr	r0, [r7, #12]
 800de0c:	f7ff fcf6 	bl	800d7fc <SDMMC_GetCommandResponse>
 800de10:	4603      	mov	r3, r0
 800de12:	461a      	mov	r2, r3
 800de14:	7afb      	ldrb	r3, [r7, #11]
 800de16:	4293      	cmp	r3, r2
 800de18:	d001      	beq.n	800de1e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de1a:	2301      	movs	r3, #1
 800de1c:	e099      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800de1e:	2100      	movs	r1, #0
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f7ff fcf8 	bl	800d816 <SDMMC_GetResponse>
 800de26:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800de28:	697a      	ldr	r2, [r7, #20]
 800de2a:	4b50      	ldr	r3, [pc, #320]	; (800df6c <SDMMC_GetCmdResp1+0x1e0>)
 800de2c:	4013      	ands	r3, r2
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d101      	bne.n	800de36 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800de32:	2300      	movs	r3, #0
 800de34:	e08d      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	da02      	bge.n	800de42 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800de3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de40:	e087      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800de4c:	2340      	movs	r3, #64	; 0x40
 800de4e:	e080      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de56:	2b00      	cmp	r3, #0
 800de58:	d001      	beq.n	800de5e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800de5a:	2380      	movs	r3, #128	; 0x80
 800de5c:	e079      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de64:	2b00      	cmp	r3, #0
 800de66:	d002      	beq.n	800de6e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800de68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de6c:	e071      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de74:	2b00      	cmp	r3, #0
 800de76:	d002      	beq.n	800de7e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800de78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de7c:	e069      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800de88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de8c:	e061      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d002      	beq.n	800de9e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800de98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de9c:	e059      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d002      	beq.n	800deae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deac:	e051      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d002      	beq.n	800debe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800deb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800debc:	e049      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dec8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800decc:	e041      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ded8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dedc:	e039      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d002      	beq.n	800deee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dee8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800deec:	e031      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800def8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800defc:	e029      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800df08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800df0c:	e021      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df14:	2b00      	cmp	r3, #0
 800df16:	d002      	beq.n	800df1e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800df18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800df1c:	e019      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d002      	beq.n	800df2e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800df28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800df2c:	e011      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df34:	2b00      	cmp	r3, #0
 800df36:	d002      	beq.n	800df3e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800df38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800df3c:	e009      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	f003 0308 	and.w	r3, r3, #8
 800df44:	2b00      	cmp	r3, #0
 800df46:	d002      	beq.n	800df4e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800df48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800df4c:	e001      	b.n	800df52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800df4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800df52:	4618      	mov	r0, r3
 800df54:	3720      	adds	r7, #32
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	24000000 	.word	0x24000000
 800df60:	10624dd3 	.word	0x10624dd3
 800df64:	00200045 	.word	0x00200045
 800df68:	002000c5 	.word	0x002000c5
 800df6c:	fdffe008 	.word	0xfdffe008

0800df70 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800df78:	4b1f      	ldr	r3, [pc, #124]	; (800dff8 <SDMMC_GetCmdResp2+0x88>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a1f      	ldr	r2, [pc, #124]	; (800dffc <SDMMC_GetCmdResp2+0x8c>)
 800df7e:	fba2 2303 	umull	r2, r3, r2, r3
 800df82:	0a5b      	lsrs	r3, r3, #9
 800df84:	f241 3288 	movw	r2, #5000	; 0x1388
 800df88:	fb02 f303 	mul.w	r3, r2, r3
 800df8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	1e5a      	subs	r2, r3, #1
 800df92:	60fa      	str	r2, [r7, #12]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d102      	bne.n	800df9e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df9c:	e026      	b.n	800dfec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d0ef      	beq.n	800df8e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1ea      	bne.n	800df8e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfbc:	f003 0304 	and.w	r3, r3, #4
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d004      	beq.n	800dfce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2204      	movs	r2, #4
 800dfc8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfca:	2304      	movs	r3, #4
 800dfcc:	e00e      	b.n	800dfec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfd2:	f003 0301 	and.w	r3, r3, #1
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d004      	beq.n	800dfe4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2201      	movs	r2, #1
 800dfde:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e003      	b.n	800dfec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a06      	ldr	r2, [pc, #24]	; (800e000 <SDMMC_GetCmdResp2+0x90>)
 800dfe8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dfea:	2300      	movs	r3, #0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3714      	adds	r7, #20
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr
 800dff8:	24000000 	.word	0x24000000
 800dffc:	10624dd3 	.word	0x10624dd3
 800e000:	002000c5 	.word	0x002000c5

0800e004 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e00c:	4b1a      	ldr	r3, [pc, #104]	; (800e078 <SDMMC_GetCmdResp3+0x74>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a1a      	ldr	r2, [pc, #104]	; (800e07c <SDMMC_GetCmdResp3+0x78>)
 800e012:	fba2 2303 	umull	r2, r3, r2, r3
 800e016:	0a5b      	lsrs	r3, r3, #9
 800e018:	f241 3288 	movw	r2, #5000	; 0x1388
 800e01c:	fb02 f303 	mul.w	r3, r2, r3
 800e020:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	1e5a      	subs	r2, r3, #1
 800e026:	60fa      	str	r2, [r7, #12]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d102      	bne.n	800e032 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e02c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e030:	e01b      	b.n	800e06a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e036:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d0ef      	beq.n	800e022 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1ea      	bne.n	800e022 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e050:	f003 0304 	and.w	r3, r3, #4
 800e054:	2b00      	cmp	r3, #0
 800e056:	d004      	beq.n	800e062 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2204      	movs	r2, #4
 800e05c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e05e:	2304      	movs	r3, #4
 800e060:	e003      	b.n	800e06a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4a06      	ldr	r2, [pc, #24]	; (800e080 <SDMMC_GetCmdResp3+0x7c>)
 800e066:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3714      	adds	r7, #20
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	24000000 	.word	0x24000000
 800e07c:	10624dd3 	.word	0x10624dd3
 800e080:	002000c5 	.word	0x002000c5

0800e084 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	460b      	mov	r3, r1
 800e08e:	607a      	str	r2, [r7, #4]
 800e090:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e092:	4b35      	ldr	r3, [pc, #212]	; (800e168 <SDMMC_GetCmdResp6+0xe4>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4a35      	ldr	r2, [pc, #212]	; (800e16c <SDMMC_GetCmdResp6+0xe8>)
 800e098:	fba2 2303 	umull	r2, r3, r2, r3
 800e09c:	0a5b      	lsrs	r3, r3, #9
 800e09e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0a2:	fb02 f303 	mul.w	r3, r2, r3
 800e0a6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	1e5a      	subs	r2, r3, #1
 800e0ac:	61fa      	str	r2, [r7, #28]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d102      	bne.n	800e0b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0b6:	e052      	b.n	800e15e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0bc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d0ef      	beq.n	800e0a8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1ea      	bne.n	800e0a8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d6:	f003 0304 	and.w	r3, r3, #4
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d004      	beq.n	800e0e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2204      	movs	r2, #4
 800e0e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0e4:	2304      	movs	r3, #4
 800e0e6:	e03a      	b.n	800e15e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ec:	f003 0301 	and.w	r3, r3, #1
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d004      	beq.n	800e0fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e02f      	b.n	800e15e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f7ff fb7c 	bl	800d7fc <SDMMC_GetCommandResponse>
 800e104:	4603      	mov	r3, r0
 800e106:	461a      	mov	r2, r3
 800e108:	7afb      	ldrb	r3, [r7, #11]
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d001      	beq.n	800e112 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e10e:	2301      	movs	r3, #1
 800e110:	e025      	b.n	800e15e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	4a16      	ldr	r2, [pc, #88]	; (800e170 <SDMMC_GetCmdResp6+0xec>)
 800e116:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e118:	2100      	movs	r1, #0
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f7ff fb7b 	bl	800d816 <SDMMC_GetResponse>
 800e120:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d106      	bne.n	800e13a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	0c1b      	lsrs	r3, r3, #16
 800e130:	b29a      	uxth	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e136:	2300      	movs	r3, #0
 800e138:	e011      	b.n	800e15e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e148:	e009      	b.n	800e15e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e150:	2b00      	cmp	r3, #0
 800e152:	d002      	beq.n	800e15a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e158:	e001      	b.n	800e15e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e15a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3720      	adds	r7, #32
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	24000000 	.word	0x24000000
 800e16c:	10624dd3 	.word	0x10624dd3
 800e170:	002000c5 	.word	0x002000c5

0800e174 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e17c:	4b22      	ldr	r3, [pc, #136]	; (800e208 <SDMMC_GetCmdResp7+0x94>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a22      	ldr	r2, [pc, #136]	; (800e20c <SDMMC_GetCmdResp7+0x98>)
 800e182:	fba2 2303 	umull	r2, r3, r2, r3
 800e186:	0a5b      	lsrs	r3, r3, #9
 800e188:	f241 3288 	movw	r2, #5000	; 0x1388
 800e18c:	fb02 f303 	mul.w	r3, r2, r3
 800e190:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	1e5a      	subs	r2, r3, #1
 800e196:	60fa      	str	r2, [r7, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d102      	bne.n	800e1a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e19c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1a0:	e02c      	b.n	800e1fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d0ef      	beq.n	800e192 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1ea      	bne.n	800e192 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c0:	f003 0304 	and.w	r3, r3, #4
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d004      	beq.n	800e1d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2204      	movs	r2, #4
 800e1cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1ce:	2304      	movs	r3, #4
 800e1d0:	e014      	b.n	800e1fc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d6:	f003 0301 	and.w	r3, r3, #1
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d004      	beq.n	800e1e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e009      	b.n	800e1fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2240      	movs	r2, #64	; 0x40
 800e1f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e1fa:	2300      	movs	r3, #0

}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3714      	adds	r7, #20
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr
 800e208:	24000000 	.word	0x24000000
 800e20c:	10624dd3 	.word	0x10624dd3

0800e210 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e210:	b480      	push	{r7}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e218:	4b11      	ldr	r3, [pc, #68]	; (800e260 <SDMMC_GetCmdError+0x50>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a11      	ldr	r2, [pc, #68]	; (800e264 <SDMMC_GetCmdError+0x54>)
 800e21e:	fba2 2303 	umull	r2, r3, r2, r3
 800e222:	0a5b      	lsrs	r3, r3, #9
 800e224:	f241 3288 	movw	r2, #5000	; 0x1388
 800e228:	fb02 f303 	mul.w	r3, r2, r3
 800e22c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	1e5a      	subs	r2, r3, #1
 800e232:	60fa      	str	r2, [r7, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d102      	bne.n	800e23e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e23c:	e009      	b.n	800e252 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e246:	2b00      	cmp	r3, #0
 800e248:	d0f1      	beq.n	800e22e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a06      	ldr	r2, [pc, #24]	; (800e268 <SDMMC_GetCmdError+0x58>)
 800e24e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e250:	2300      	movs	r3, #0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3714      	adds	r7, #20
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	24000000 	.word	0x24000000
 800e264:	10624dd3 	.word	0x10624dd3
 800e268:	002000c5 	.word	0x002000c5

0800e26c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e26c:	b084      	sub	sp, #16
 800e26e:	b580      	push	{r7, lr}
 800e270:	b084      	sub	sp, #16
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	f107 001c 	add.w	r0, r7, #28
 800e27a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e280:	2b01      	cmp	r3, #1
 800e282:	d120      	bne.n	800e2c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	68da      	ldr	r2, [r3, #12]
 800e294:	4b2a      	ldr	r3, [pc, #168]	; (800e340 <USB_CoreInit+0xd4>)
 800e296:	4013      	ands	r3, r2
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d105      	bne.n	800e2ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f001 faf8 	bl	800f8b0 <USB_CoreReset>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	73fb      	strb	r3, [r7, #15]
 800e2c4:	e01a      	b.n	800e2fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f001 faec 	bl	800f8b0 <USB_CoreReset>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d106      	bne.n	800e2f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	639a      	str	r2, [r3, #56]	; 0x38
 800e2ee:	e005      	b.n	800e2fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d116      	bne.n	800e330 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e306:	b29a      	uxth	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e310:	4b0c      	ldr	r3, [pc, #48]	; (800e344 <USB_CoreInit+0xd8>)
 800e312:	4313      	orrs	r3, r2
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	689b      	ldr	r3, [r3, #8]
 800e31c:	f043 0206 	orr.w	r2, r3, #6
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	f043 0220 	orr.w	r2, r3, #32
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e330:	7bfb      	ldrb	r3, [r7, #15]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e33c:	b004      	add	sp, #16
 800e33e:	4770      	bx	lr
 800e340:	ffbdffbf 	.word	0xffbdffbf
 800e344:	03ee0000 	.word	0x03ee0000

0800e348 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e348:	b480      	push	{r7}
 800e34a:	b087      	sub	sp, #28
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	4613      	mov	r3, r2
 800e354:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e356:	79fb      	ldrb	r3, [r7, #7]
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d165      	bne.n	800e428 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	4a41      	ldr	r2, [pc, #260]	; (800e464 <USB_SetTurnaroundTime+0x11c>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d906      	bls.n	800e372 <USB_SetTurnaroundTime+0x2a>
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	4a40      	ldr	r2, [pc, #256]	; (800e468 <USB_SetTurnaroundTime+0x120>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d202      	bcs.n	800e372 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e36c:	230f      	movs	r3, #15
 800e36e:	617b      	str	r3, [r7, #20]
 800e370:	e062      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	4a3c      	ldr	r2, [pc, #240]	; (800e468 <USB_SetTurnaroundTime+0x120>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d306      	bcc.n	800e388 <USB_SetTurnaroundTime+0x40>
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	4a3b      	ldr	r2, [pc, #236]	; (800e46c <USB_SetTurnaroundTime+0x124>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d202      	bcs.n	800e388 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e382:	230e      	movs	r3, #14
 800e384:	617b      	str	r3, [r7, #20]
 800e386:	e057      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	4a38      	ldr	r2, [pc, #224]	; (800e46c <USB_SetTurnaroundTime+0x124>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d306      	bcc.n	800e39e <USB_SetTurnaroundTime+0x56>
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	4a37      	ldr	r2, [pc, #220]	; (800e470 <USB_SetTurnaroundTime+0x128>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d202      	bcs.n	800e39e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e398:	230d      	movs	r3, #13
 800e39a:	617b      	str	r3, [r7, #20]
 800e39c:	e04c      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	4a33      	ldr	r2, [pc, #204]	; (800e470 <USB_SetTurnaroundTime+0x128>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d306      	bcc.n	800e3b4 <USB_SetTurnaroundTime+0x6c>
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	4a32      	ldr	r2, [pc, #200]	; (800e474 <USB_SetTurnaroundTime+0x12c>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d802      	bhi.n	800e3b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e3ae:	230c      	movs	r3, #12
 800e3b0:	617b      	str	r3, [r7, #20]
 800e3b2:	e041      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	4a2f      	ldr	r2, [pc, #188]	; (800e474 <USB_SetTurnaroundTime+0x12c>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d906      	bls.n	800e3ca <USB_SetTurnaroundTime+0x82>
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	4a2e      	ldr	r2, [pc, #184]	; (800e478 <USB_SetTurnaroundTime+0x130>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d802      	bhi.n	800e3ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e3c4:	230b      	movs	r3, #11
 800e3c6:	617b      	str	r3, [r7, #20]
 800e3c8:	e036      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	4a2a      	ldr	r2, [pc, #168]	; (800e478 <USB_SetTurnaroundTime+0x130>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d906      	bls.n	800e3e0 <USB_SetTurnaroundTime+0x98>
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	4a29      	ldr	r2, [pc, #164]	; (800e47c <USB_SetTurnaroundTime+0x134>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d802      	bhi.n	800e3e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e3da:	230a      	movs	r3, #10
 800e3dc:	617b      	str	r3, [r7, #20]
 800e3de:	e02b      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	4a26      	ldr	r2, [pc, #152]	; (800e47c <USB_SetTurnaroundTime+0x134>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d906      	bls.n	800e3f6 <USB_SetTurnaroundTime+0xae>
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	4a25      	ldr	r2, [pc, #148]	; (800e480 <USB_SetTurnaroundTime+0x138>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d202      	bcs.n	800e3f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e3f0:	2309      	movs	r3, #9
 800e3f2:	617b      	str	r3, [r7, #20]
 800e3f4:	e020      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	4a21      	ldr	r2, [pc, #132]	; (800e480 <USB_SetTurnaroundTime+0x138>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d306      	bcc.n	800e40c <USB_SetTurnaroundTime+0xc4>
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	4a20      	ldr	r2, [pc, #128]	; (800e484 <USB_SetTurnaroundTime+0x13c>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d802      	bhi.n	800e40c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e406:	2308      	movs	r3, #8
 800e408:	617b      	str	r3, [r7, #20]
 800e40a:	e015      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	4a1d      	ldr	r2, [pc, #116]	; (800e484 <USB_SetTurnaroundTime+0x13c>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d906      	bls.n	800e422 <USB_SetTurnaroundTime+0xda>
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	4a1c      	ldr	r2, [pc, #112]	; (800e488 <USB_SetTurnaroundTime+0x140>)
 800e418:	4293      	cmp	r3, r2
 800e41a:	d202      	bcs.n	800e422 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e41c:	2307      	movs	r3, #7
 800e41e:	617b      	str	r3, [r7, #20]
 800e420:	e00a      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e422:	2306      	movs	r3, #6
 800e424:	617b      	str	r3, [r7, #20]
 800e426:	e007      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e428:	79fb      	ldrb	r3, [r7, #7]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d102      	bne.n	800e434 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e42e:	2309      	movs	r3, #9
 800e430:	617b      	str	r3, [r7, #20]
 800e432:	e001      	b.n	800e438 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e434:	2309      	movs	r3, #9
 800e436:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	68da      	ldr	r2, [r3, #12]
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	029b      	lsls	r3, r3, #10
 800e44c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e450:	431a      	orrs	r2, r3
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	371c      	adds	r7, #28
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr
 800e464:	00d8acbf 	.word	0x00d8acbf
 800e468:	00e4e1c0 	.word	0x00e4e1c0
 800e46c:	00f42400 	.word	0x00f42400
 800e470:	01067380 	.word	0x01067380
 800e474:	011a499f 	.word	0x011a499f
 800e478:	01312cff 	.word	0x01312cff
 800e47c:	014ca43f 	.word	0x014ca43f
 800e480:	016e3600 	.word	0x016e3600
 800e484:	01a6ab1f 	.word	0x01a6ab1f
 800e488:	01e84800 	.word	0x01e84800

0800e48c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	689b      	ldr	r3, [r3, #8]
 800e498:	f043 0201 	orr.w	r2, r3, #1
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	370c      	adds	r7, #12
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e4ae:	b480      	push	{r7}
 800e4b0:	b083      	sub	sp, #12
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	f023 0201 	bic.w	r2, r3, #1
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e4c2:	2300      	movs	r3, #0
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e4ec:	78fb      	ldrb	r3, [r7, #3]
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d115      	bne.n	800e51e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e4fe:	2001      	movs	r0, #1
 800e500:	f7f2 ff64 	bl	80013cc <HAL_Delay>
      ms++;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	3301      	adds	r3, #1
 800e508:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f001 f93f 	bl	800f78e <USB_GetMode>
 800e510:	4603      	mov	r3, r0
 800e512:	2b01      	cmp	r3, #1
 800e514:	d01e      	beq.n	800e554 <USB_SetCurrentMode+0x84>
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2b31      	cmp	r3, #49	; 0x31
 800e51a:	d9f0      	bls.n	800e4fe <USB_SetCurrentMode+0x2e>
 800e51c:	e01a      	b.n	800e554 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e51e:	78fb      	ldrb	r3, [r7, #3]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d115      	bne.n	800e550 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e530:	2001      	movs	r0, #1
 800e532:	f7f2 ff4b 	bl	80013cc <HAL_Delay>
      ms++;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	3301      	adds	r3, #1
 800e53a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f001 f926 	bl	800f78e <USB_GetMode>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d005      	beq.n	800e554 <USB_SetCurrentMode+0x84>
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2b31      	cmp	r3, #49	; 0x31
 800e54c:	d9f0      	bls.n	800e530 <USB_SetCurrentMode+0x60>
 800e54e:	e001      	b.n	800e554 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e550:	2301      	movs	r3, #1
 800e552:	e005      	b.n	800e560 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b32      	cmp	r3, #50	; 0x32
 800e558:	d101      	bne.n	800e55e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e55a:	2301      	movs	r3, #1
 800e55c:	e000      	b.n	800e560 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e568:	b084      	sub	sp, #16
 800e56a:	b580      	push	{r7, lr}
 800e56c:	b086      	sub	sp, #24
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
 800e572:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e57a:	2300      	movs	r3, #0
 800e57c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e582:	2300      	movs	r3, #0
 800e584:	613b      	str	r3, [r7, #16]
 800e586:	e009      	b.n	800e59c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	3340      	adds	r3, #64	; 0x40
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	2200      	movs	r2, #0
 800e594:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	3301      	adds	r3, #1
 800e59a:	613b      	str	r3, [r7, #16]
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	2b0e      	cmp	r3, #14
 800e5a0:	d9f2      	bls.n	800e588 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d11c      	bne.n	800e5e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5b6:	f043 0302 	orr.w	r3, r3, #2
 800e5ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	601a      	str	r2, [r3, #0]
 800e5e0:	e005      	b.n	800e5ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e600:	4619      	mov	r1, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e608:	461a      	mov	r2, r3
 800e60a:	680b      	ldr	r3, [r1, #0]
 800e60c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e610:	2b01      	cmp	r3, #1
 800e612:	d10c      	bne.n	800e62e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e616:	2b00      	cmp	r3, #0
 800e618:	d104      	bne.n	800e624 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e61a:	2100      	movs	r1, #0
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 f965 	bl	800e8ec <USB_SetDevSpeed>
 800e622:	e008      	b.n	800e636 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e624:	2101      	movs	r1, #1
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 f960 	bl	800e8ec <USB_SetDevSpeed>
 800e62c:	e003      	b.n	800e636 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e62e:	2103      	movs	r1, #3
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 f95b 	bl	800e8ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e636:	2110      	movs	r1, #16
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f000 f8f3 	bl	800e824 <USB_FlushTxFifo>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d001      	beq.n	800e648 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e644:	2301      	movs	r3, #1
 800e646:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 f91f 	bl	800e88c <USB_FlushRxFifo>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d001      	beq.n	800e658 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e654:	2301      	movs	r3, #1
 800e656:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e65e:	461a      	mov	r2, r3
 800e660:	2300      	movs	r3, #0
 800e662:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e66a:	461a      	mov	r2, r3
 800e66c:	2300      	movs	r3, #0
 800e66e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e676:	461a      	mov	r2, r3
 800e678:	2300      	movs	r3, #0
 800e67a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e67c:	2300      	movs	r3, #0
 800e67e:	613b      	str	r3, [r7, #16]
 800e680:	e043      	b.n	800e70a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	015a      	lsls	r2, r3, #5
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	4413      	add	r3, r2
 800e68a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e698:	d118      	bne.n	800e6cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d10a      	bne.n	800e6b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	015a      	lsls	r2, r3, #5
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e6b2:	6013      	str	r3, [r2, #0]
 800e6b4:	e013      	b.n	800e6de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	015a      	lsls	r2, r3, #5
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	4413      	add	r3, r2
 800e6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e6c8:	6013      	str	r3, [r2, #0]
 800e6ca:	e008      	b.n	800e6de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	015a      	lsls	r2, r3, #5
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6d8:	461a      	mov	r2, r3
 800e6da:	2300      	movs	r3, #0
 800e6dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	015a      	lsls	r2, r3, #5
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	015a      	lsls	r2, r3, #5
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e702:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	3301      	adds	r3, #1
 800e708:	613b      	str	r3, [r7, #16]
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70c:	693a      	ldr	r2, [r7, #16]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d3b7      	bcc.n	800e682 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e712:	2300      	movs	r3, #0
 800e714:	613b      	str	r3, [r7, #16]
 800e716:	e043      	b.n	800e7a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	015a      	lsls	r2, r3, #5
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	4413      	add	r3, r2
 800e720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e72a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e72e:	d118      	bne.n	800e762 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10a      	bne.n	800e74c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	015a      	lsls	r2, r3, #5
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	4413      	add	r3, r2
 800e73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e742:	461a      	mov	r2, r3
 800e744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e748:	6013      	str	r3, [r2, #0]
 800e74a:	e013      	b.n	800e774 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	015a      	lsls	r2, r3, #5
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	4413      	add	r3, r2
 800e754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e758:	461a      	mov	r2, r3
 800e75a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	e008      	b.n	800e774 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	015a      	lsls	r2, r3, #5
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	4413      	add	r3, r2
 800e76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e76e:	461a      	mov	r2, r3
 800e770:	2300      	movs	r3, #0
 800e772:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	015a      	lsls	r2, r3, #5
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	4413      	add	r3, r2
 800e77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e780:	461a      	mov	r2, r3
 800e782:	2300      	movs	r3, #0
 800e784:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	015a      	lsls	r2, r3, #5
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	4413      	add	r3, r2
 800e78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e792:	461a      	mov	r2, r3
 800e794:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e798:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	3301      	adds	r3, #1
 800e79e:	613b      	str	r3, [r7, #16]
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d3b7      	bcc.n	800e718 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ae:	691b      	ldr	r3, [r3, #16]
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e7b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e7c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d105      	bne.n	800e7dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	699b      	ldr	r3, [r3, #24]
 800e7d4:	f043 0210 	orr.w	r2, r3, #16
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	699a      	ldr	r2, [r3, #24]
 800e7e0:	4b0e      	ldr	r3, [pc, #56]	; (800e81c <USB_DevInit+0x2b4>)
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d005      	beq.n	800e7fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	699b      	ldr	r3, [r3, #24]
 800e7f2:	f043 0208 	orr.w	r2, r3, #8
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e7fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d105      	bne.n	800e80c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	699a      	ldr	r2, [r3, #24]
 800e804:	4b06      	ldr	r3, [pc, #24]	; (800e820 <USB_DevInit+0x2b8>)
 800e806:	4313      	orrs	r3, r2
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e818:	b004      	add	sp, #16
 800e81a:	4770      	bx	lr
 800e81c:	803c3800 	.word	0x803c3800
 800e820:	40000004 	.word	0x40000004

0800e824 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e824:	b480      	push	{r7}
 800e826:	b085      	sub	sp, #20
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e82e:	2300      	movs	r3, #0
 800e830:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	3301      	adds	r3, #1
 800e836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	4a13      	ldr	r2, [pc, #76]	; (800e888 <USB_FlushTxFifo+0x64>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d901      	bls.n	800e844 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e840:	2303      	movs	r3, #3
 800e842:	e01b      	b.n	800e87c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	691b      	ldr	r3, [r3, #16]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	daf2      	bge.n	800e832 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e84c:	2300      	movs	r3, #0
 800e84e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	019b      	lsls	r3, r3, #6
 800e854:	f043 0220 	orr.w	r2, r3, #32
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	3301      	adds	r3, #1
 800e860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	4a08      	ldr	r2, [pc, #32]	; (800e888 <USB_FlushTxFifo+0x64>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d901      	bls.n	800e86e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e86a:	2303      	movs	r3, #3
 800e86c:	e006      	b.n	800e87c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	691b      	ldr	r3, [r3, #16]
 800e872:	f003 0320 	and.w	r3, r3, #32
 800e876:	2b20      	cmp	r3, #32
 800e878:	d0f0      	beq.n	800e85c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3714      	adds	r7, #20
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr
 800e888:	00030d40 	.word	0x00030d40

0800e88c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e894:	2300      	movs	r3, #0
 800e896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	3301      	adds	r3, #1
 800e89c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	4a11      	ldr	r2, [pc, #68]	; (800e8e8 <USB_FlushRxFifo+0x5c>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d901      	bls.n	800e8aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e8a6:	2303      	movs	r3, #3
 800e8a8:	e018      	b.n	800e8dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	daf2      	bge.n	800e898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2210      	movs	r2, #16
 800e8ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	4a08      	ldr	r2, [pc, #32]	; (800e8e8 <USB_FlushRxFifo+0x5c>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d901      	bls.n	800e8ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e8ca:	2303      	movs	r3, #3
 800e8cc:	e006      	b.n	800e8dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	f003 0310 	and.w	r3, r3, #16
 800e8d6:	2b10      	cmp	r3, #16
 800e8d8:	d0f0      	beq.n	800e8bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3714      	adds	r7, #20
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr
 800e8e8:	00030d40 	.word	0x00030d40

0800e8ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b085      	sub	sp, #20
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	78fb      	ldrb	r3, [r7, #3]
 800e906:	68f9      	ldr	r1, [r7, #12]
 800e908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e90c:	4313      	orrs	r3, r2
 800e90e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3714      	adds	r7, #20
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr

0800e91e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e91e:	b480      	push	{r7}
 800e920:	b087      	sub	sp, #28
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	f003 0306 	and.w	r3, r3, #6
 800e936:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d102      	bne.n	800e944 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e93e:	2300      	movs	r3, #0
 800e940:	75fb      	strb	r3, [r7, #23]
 800e942:	e00a      	b.n	800e95a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b02      	cmp	r3, #2
 800e948:	d002      	beq.n	800e950 <USB_GetDevSpeed+0x32>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2b06      	cmp	r3, #6
 800e94e:	d102      	bne.n	800e956 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e950:	2302      	movs	r3, #2
 800e952:	75fb      	strb	r3, [r7, #23]
 800e954:	e001      	b.n	800e95a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e956:	230f      	movs	r3, #15
 800e958:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e95a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	371c      	adds	r7, #28
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	785b      	ldrb	r3, [r3, #1]
 800e980:	2b01      	cmp	r3, #1
 800e982:	d139      	bne.n	800e9f8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e98a:	69da      	ldr	r2, [r3, #28]
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	f003 030f 	and.w	r3, r3, #15
 800e994:	2101      	movs	r1, #1
 800e996:	fa01 f303 	lsl.w	r3, r1, r3
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	68f9      	ldr	r1, [r7, #12]
 800e99e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	015a      	lsls	r2, r3, #5
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d153      	bne.n	800ea64 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	015a      	lsls	r2, r3, #5
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	791b      	ldrb	r3, [r3, #4]
 800e9d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e9d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	059b      	lsls	r3, r3, #22
 800e9de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e9e0:	431a      	orrs	r2, r3
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	0159      	lsls	r1, r3, #5
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	440b      	add	r3, r1
 800e9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	4b20      	ldr	r3, [pc, #128]	; (800ea74 <USB_ActivateEndpoint+0x10c>)
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	600b      	str	r3, [r1, #0]
 800e9f6:	e035      	b.n	800ea64 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9fe:	69da      	ldr	r2, [r3, #28]
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	f003 030f 	and.w	r3, r3, #15
 800ea08:	2101      	movs	r1, #1
 800ea0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ea0e:	041b      	lsls	r3, r3, #16
 800ea10:	68f9      	ldr	r1, [r7, #12]
 800ea12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea16:	4313      	orrs	r3, r2
 800ea18:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	015a      	lsls	r2, r3, #5
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	4413      	add	r3, r2
 800ea22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d119      	bne.n	800ea64 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	015a      	lsls	r2, r3, #5
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	4413      	add	r3, r2
 800ea38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	791b      	ldrb	r3, [r3, #4]
 800ea4a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ea4c:	430b      	orrs	r3, r1
 800ea4e:	431a      	orrs	r2, r3
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	0159      	lsls	r1, r3, #5
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	440b      	add	r3, r1
 800ea58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	4b05      	ldr	r3, [pc, #20]	; (800ea74 <USB_ActivateEndpoint+0x10c>)
 800ea60:	4313      	orrs	r3, r2
 800ea62:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ea64:	2300      	movs	r3, #0
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3714      	adds	r7, #20
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop
 800ea74:	10008000 	.word	0x10008000

0800ea78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	785b      	ldrb	r3, [r3, #1]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d161      	bne.n	800eb58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	015a      	lsls	r2, r3, #5
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eaa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eaaa:	d11f      	bne.n	800eaec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	015a      	lsls	r2, r3, #5
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	4413      	add	r3, r2
 800eab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	0151      	lsls	r1, r2, #5
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	440a      	add	r2, r1
 800eac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eac6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eaca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	015a      	lsls	r2, r3, #5
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	4413      	add	r3, r2
 800ead4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	0151      	lsls	r1, r2, #5
 800eade:	68fa      	ldr	r2, [r7, #12]
 800eae0:	440a      	add	r2, r1
 800eae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eaea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	f003 030f 	and.w	r3, r3, #15
 800eafc:	2101      	movs	r1, #1
 800eafe:	fa01 f303 	lsl.w	r3, r1, r3
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	43db      	mvns	r3, r3
 800eb06:	68f9      	ldr	r1, [r7, #12]
 800eb08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb0c:	4013      	ands	r3, r2
 800eb0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb16:	69da      	ldr	r2, [r3, #28]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	f003 030f 	and.w	r3, r3, #15
 800eb20:	2101      	movs	r1, #1
 800eb22:	fa01 f303 	lsl.w	r3, r1, r3
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	43db      	mvns	r3, r3
 800eb2a:	68f9      	ldr	r1, [r7, #12]
 800eb2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb30:	4013      	ands	r3, r2
 800eb32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	015a      	lsls	r2, r3, #5
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	4413      	add	r3, r2
 800eb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	0159      	lsls	r1, r3, #5
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	440b      	add	r3, r1
 800eb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb4e:	4619      	mov	r1, r3
 800eb50:	4b35      	ldr	r3, [pc, #212]	; (800ec28 <USB_DeactivateEndpoint+0x1b0>)
 800eb52:	4013      	ands	r3, r2
 800eb54:	600b      	str	r3, [r1, #0]
 800eb56:	e060      	b.n	800ec1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	015a      	lsls	r2, r3, #5
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	4413      	add	r3, r2
 800eb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb6e:	d11f      	bne.n	800ebb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	015a      	lsls	r2, r3, #5
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	4413      	add	r3, r2
 800eb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	0151      	lsls	r1, r2, #5
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	440a      	add	r2, r1
 800eb86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eb8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	015a      	lsls	r2, r3, #5
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	4413      	add	r3, r2
 800eb98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	0151      	lsls	r1, r2, #5
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	440a      	add	r2, r1
 800eba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	f003 030f 	and.w	r3, r3, #15
 800ebc0:	2101      	movs	r1, #1
 800ebc2:	fa01 f303 	lsl.w	r3, r1, r3
 800ebc6:	041b      	lsls	r3, r3, #16
 800ebc8:	43db      	mvns	r3, r3
 800ebca:	68f9      	ldr	r1, [r7, #12]
 800ebcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebda:	69da      	ldr	r2, [r3, #28]
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	f003 030f 	and.w	r3, r3, #15
 800ebe4:	2101      	movs	r1, #1
 800ebe6:	fa01 f303 	lsl.w	r3, r1, r3
 800ebea:	041b      	lsls	r3, r3, #16
 800ebec:	43db      	mvns	r3, r3
 800ebee:	68f9      	ldr	r1, [r7, #12]
 800ebf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebf4:	4013      	ands	r3, r2
 800ebf6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	015a      	lsls	r2, r3, #5
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	4413      	add	r3, r2
 800ec00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	0159      	lsls	r1, r3, #5
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	440b      	add	r3, r1
 800ec0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec12:	4619      	mov	r1, r3
 800ec14:	4b05      	ldr	r3, [pc, #20]	; (800ec2c <USB_DeactivateEndpoint+0x1b4>)
 800ec16:	4013      	ands	r3, r2
 800ec18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ec1a:	2300      	movs	r3, #0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3714      	adds	r7, #20
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr
 800ec28:	ec337800 	.word	0xec337800
 800ec2c:	eff37800 	.word	0xeff37800

0800ec30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08a      	sub	sp, #40	; 0x28
 800ec34:	af02      	add	r7, sp, #8
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	4613      	mov	r3, r2
 800ec3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	785b      	ldrb	r3, [r3, #1]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	f040 8181 	bne.w	800ef54 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	691b      	ldr	r3, [r3, #16]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d132      	bne.n	800ecc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	015a      	lsls	r2, r3, #5
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	4413      	add	r3, r2
 800ec62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec66:	691a      	ldr	r2, [r3, #16]
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	0159      	lsls	r1, r3, #5
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	440b      	add	r3, r1
 800ec70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec74:	4619      	mov	r1, r3
 800ec76:	4ba5      	ldr	r3, [pc, #660]	; (800ef0c <USB_EPStartXfer+0x2dc>)
 800ec78:	4013      	ands	r3, r2
 800ec7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	015a      	lsls	r2, r3, #5
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	4413      	add	r3, r2
 800ec84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec88:	691b      	ldr	r3, [r3, #16]
 800ec8a:	69ba      	ldr	r2, [r7, #24]
 800ec8c:	0151      	lsls	r1, r2, #5
 800ec8e:	69fa      	ldr	r2, [r7, #28]
 800ec90:	440a      	add	r2, r1
 800ec92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	015a      	lsls	r2, r3, #5
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	4413      	add	r3, r2
 800eca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eca8:	691a      	ldr	r2, [r3, #16]
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	0159      	lsls	r1, r3, #5
 800ecae:	69fb      	ldr	r3, [r7, #28]
 800ecb0:	440b      	add	r3, r1
 800ecb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	4b95      	ldr	r3, [pc, #596]	; (800ef10 <USB_EPStartXfer+0x2e0>)
 800ecba:	4013      	ands	r3, r2
 800ecbc:	610b      	str	r3, [r1, #16]
 800ecbe:	e092      	b.n	800ede6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	015a      	lsls	r2, r3, #5
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eccc:	691a      	ldr	r2, [r3, #16]
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	0159      	lsls	r1, r3, #5
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	440b      	add	r3, r1
 800ecd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecda:	4619      	mov	r1, r3
 800ecdc:	4b8c      	ldr	r3, [pc, #560]	; (800ef10 <USB_EPStartXfer+0x2e0>)
 800ecde:	4013      	ands	r3, r2
 800ece0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	015a      	lsls	r2, r3, #5
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	4413      	add	r3, r2
 800ecea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecee:	691a      	ldr	r2, [r3, #16]
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	0159      	lsls	r1, r3, #5
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	440b      	add	r3, r1
 800ecf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	4b83      	ldr	r3, [pc, #524]	; (800ef0c <USB_EPStartXfer+0x2dc>)
 800ed00:	4013      	ands	r3, r2
 800ed02:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ed04:	69bb      	ldr	r3, [r7, #24]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d11a      	bne.n	800ed40 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	691a      	ldr	r2, [r3, #16]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d903      	bls.n	800ed1e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	689a      	ldr	r2, [r3, #8]
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed1e:	69bb      	ldr	r3, [r7, #24]
 800ed20:	015a      	lsls	r2, r3, #5
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	4413      	add	r3, r2
 800ed26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed2a:	691b      	ldr	r3, [r3, #16]
 800ed2c:	69ba      	ldr	r2, [r7, #24]
 800ed2e:	0151      	lsls	r1, r2, #5
 800ed30:	69fa      	ldr	r2, [r7, #28]
 800ed32:	440a      	add	r2, r1
 800ed34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed3c:	6113      	str	r3, [r2, #16]
 800ed3e:	e01b      	b.n	800ed78 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	015a      	lsls	r2, r3, #5
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	4413      	add	r3, r2
 800ed48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed4c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	6919      	ldr	r1, [r3, #16]
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	689b      	ldr	r3, [r3, #8]
 800ed56:	440b      	add	r3, r1
 800ed58:	1e59      	subs	r1, r3, #1
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ed62:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ed64:	4b6b      	ldr	r3, [pc, #428]	; (800ef14 <USB_EPStartXfer+0x2e4>)
 800ed66:	400b      	ands	r3, r1
 800ed68:	69b9      	ldr	r1, [r7, #24]
 800ed6a:	0148      	lsls	r0, r1, #5
 800ed6c:	69f9      	ldr	r1, [r7, #28]
 800ed6e:	4401      	add	r1, r0
 800ed70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ed74:	4313      	orrs	r3, r2
 800ed76:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ed78:	69bb      	ldr	r3, [r7, #24]
 800ed7a:	015a      	lsls	r2, r3, #5
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	4413      	add	r3, r2
 800ed80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed84:	691a      	ldr	r2, [r3, #16]
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	691b      	ldr	r3, [r3, #16]
 800ed8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed8e:	69b9      	ldr	r1, [r7, #24]
 800ed90:	0148      	lsls	r0, r1, #5
 800ed92:	69f9      	ldr	r1, [r7, #28]
 800ed94:	4401      	add	r1, r0
 800ed96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	791b      	ldrb	r3, [r3, #4]
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d11f      	bne.n	800ede6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	015a      	lsls	r2, r3, #5
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	4413      	add	r3, r2
 800edae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edb2:	691b      	ldr	r3, [r3, #16]
 800edb4:	69ba      	ldr	r2, [r7, #24]
 800edb6:	0151      	lsls	r1, r2, #5
 800edb8:	69fa      	ldr	r2, [r7, #28]
 800edba:	440a      	add	r2, r1
 800edbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800edc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	015a      	lsls	r2, r3, #5
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	4413      	add	r3, r2
 800edce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	69ba      	ldr	r2, [r7, #24]
 800edd6:	0151      	lsls	r1, r2, #5
 800edd8:	69fa      	ldr	r2, [r7, #28]
 800edda:	440a      	add	r2, r1
 800eddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ede0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ede4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ede6:	79fb      	ldrb	r3, [r7, #7]
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d14b      	bne.n	800ee84 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	69db      	ldr	r3, [r3, #28]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d009      	beq.n	800ee08 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	015a      	lsls	r2, r3, #5
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	4413      	add	r3, r2
 800edfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee00:	461a      	mov	r2, r3
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	69db      	ldr	r3, [r3, #28]
 800ee06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	791b      	ldrb	r3, [r3, #4]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d128      	bne.n	800ee62 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee16:	689b      	ldr	r3, [r3, #8]
 800ee18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d110      	bne.n	800ee42 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	015a      	lsls	r2, r3, #5
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	4413      	add	r3, r2
 800ee28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	69ba      	ldr	r2, [r7, #24]
 800ee30:	0151      	lsls	r1, r2, #5
 800ee32:	69fa      	ldr	r2, [r7, #28]
 800ee34:	440a      	add	r2, r1
 800ee36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	e00f      	b.n	800ee62 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	015a      	lsls	r2, r3, #5
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	4413      	add	r3, r2
 800ee4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	69ba      	ldr	r2, [r7, #24]
 800ee52:	0151      	lsls	r1, r2, #5
 800ee54:	69fa      	ldr	r2, [r7, #28]
 800ee56:	440a      	add	r2, r1
 800ee58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	015a      	lsls	r2, r3, #5
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	4413      	add	r3, r2
 800ee6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	69ba      	ldr	r2, [r7, #24]
 800ee72:	0151      	lsls	r1, r2, #5
 800ee74:	69fa      	ldr	r2, [r7, #28]
 800ee76:	440a      	add	r2, r1
 800ee78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ee80:	6013      	str	r3, [r2, #0]
 800ee82:	e16a      	b.n	800f15a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	015a      	lsls	r2, r3, #5
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	69ba      	ldr	r2, [r7, #24]
 800ee94:	0151      	lsls	r1, r2, #5
 800ee96:	69fa      	ldr	r2, [r7, #28]
 800ee98:	440a      	add	r2, r1
 800ee9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eea2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	791b      	ldrb	r3, [r3, #4]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d015      	beq.n	800eed8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	691b      	ldr	r3, [r3, #16]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	f000 8152 	beq.w	800f15a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	f003 030f 	and.w	r3, r3, #15
 800eec6:	2101      	movs	r1, #1
 800eec8:	fa01 f303 	lsl.w	r3, r1, r3
 800eecc:	69f9      	ldr	r1, [r7, #28]
 800eece:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eed2:	4313      	orrs	r3, r2
 800eed4:	634b      	str	r3, [r1, #52]	; 0x34
 800eed6:	e140      	b.n	800f15a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eed8:	69fb      	ldr	r3, [r7, #28]
 800eeda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eede:	689b      	ldr	r3, [r3, #8]
 800eee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d117      	bne.n	800ef18 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	015a      	lsls	r2, r3, #5
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	4413      	add	r3, r2
 800eef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	69ba      	ldr	r2, [r7, #24]
 800eef8:	0151      	lsls	r1, r2, #5
 800eefa:	69fa      	ldr	r2, [r7, #28]
 800eefc:	440a      	add	r2, r1
 800eefe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef06:	6013      	str	r3, [r2, #0]
 800ef08:	e016      	b.n	800ef38 <USB_EPStartXfer+0x308>
 800ef0a:	bf00      	nop
 800ef0c:	e007ffff 	.word	0xe007ffff
 800ef10:	fff80000 	.word	0xfff80000
 800ef14:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	015a      	lsls	r2, r3, #5
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	4413      	add	r3, r2
 800ef20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	69ba      	ldr	r2, [r7, #24]
 800ef28:	0151      	lsls	r1, r2, #5
 800ef2a:	69fa      	ldr	r2, [r7, #28]
 800ef2c:	440a      	add	r2, r1
 800ef2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef36:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	68d9      	ldr	r1, [r3, #12]
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	781a      	ldrb	r2, [r3, #0]
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	691b      	ldr	r3, [r3, #16]
 800ef44:	b298      	uxth	r0, r3
 800ef46:	79fb      	ldrb	r3, [r7, #7]
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f000 f9b9 	bl	800f2c4 <USB_WritePacket>
 800ef52:	e102      	b.n	800f15a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	015a      	lsls	r2, r3, #5
 800ef58:	69fb      	ldr	r3, [r7, #28]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef60:	691a      	ldr	r2, [r3, #16]
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	0159      	lsls	r1, r3, #5
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	440b      	add	r3, r1
 800ef6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef6e:	4619      	mov	r1, r3
 800ef70:	4b7c      	ldr	r3, [pc, #496]	; (800f164 <USB_EPStartXfer+0x534>)
 800ef72:	4013      	ands	r3, r2
 800ef74:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	015a      	lsls	r2, r3, #5
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef82:	691a      	ldr	r2, [r3, #16]
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	0159      	lsls	r1, r3, #5
 800ef88:	69fb      	ldr	r3, [r7, #28]
 800ef8a:	440b      	add	r3, r1
 800ef8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef90:	4619      	mov	r1, r3
 800ef92:	4b75      	ldr	r3, [pc, #468]	; (800f168 <USB_EPStartXfer+0x538>)
 800ef94:	4013      	ands	r3, r2
 800ef96:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d12f      	bne.n	800effe <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	691b      	ldr	r3, [r3, #16]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d003      	beq.n	800efae <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	689a      	ldr	r2, [r3, #8]
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	689a      	ldr	r2, [r3, #8]
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	015a      	lsls	r2, r3, #5
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	4413      	add	r3, r2
 800efbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efc2:	691a      	ldr	r2, [r3, #16]
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	6a1b      	ldr	r3, [r3, #32]
 800efc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800efcc:	69b9      	ldr	r1, [r7, #24]
 800efce:	0148      	lsls	r0, r1, #5
 800efd0:	69f9      	ldr	r1, [r7, #28]
 800efd2:	4401      	add	r1, r0
 800efd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800efd8:	4313      	orrs	r3, r2
 800efda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	015a      	lsls	r2, r3, #5
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	4413      	add	r3, r2
 800efe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe8:	691b      	ldr	r3, [r3, #16]
 800efea:	69ba      	ldr	r2, [r7, #24]
 800efec:	0151      	lsls	r1, r2, #5
 800efee:	69fa      	ldr	r2, [r7, #28]
 800eff0:	440a      	add	r2, r1
 800eff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800effa:	6113      	str	r3, [r2, #16]
 800effc:	e05f      	b.n	800f0be <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	691b      	ldr	r3, [r3, #16]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d123      	bne.n	800f04e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	015a      	lsls	r2, r3, #5
 800f00a:	69fb      	ldr	r3, [r7, #28]
 800f00c:	4413      	add	r3, r2
 800f00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f012:	691a      	ldr	r2, [r3, #16]
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f01c:	69b9      	ldr	r1, [r7, #24]
 800f01e:	0148      	lsls	r0, r1, #5
 800f020:	69f9      	ldr	r1, [r7, #28]
 800f022:	4401      	add	r1, r0
 800f024:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f028:	4313      	orrs	r3, r2
 800f02a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	015a      	lsls	r2, r3, #5
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	4413      	add	r3, r2
 800f034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f038:	691b      	ldr	r3, [r3, #16]
 800f03a:	69ba      	ldr	r2, [r7, #24]
 800f03c:	0151      	lsls	r1, r2, #5
 800f03e:	69fa      	ldr	r2, [r7, #28]
 800f040:	440a      	add	r2, r1
 800f042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f046:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f04a:	6113      	str	r3, [r2, #16]
 800f04c:	e037      	b.n	800f0be <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	691a      	ldr	r2, [r3, #16]
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	4413      	add	r3, r2
 800f058:	1e5a      	subs	r2, r3, #1
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f062:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	8afa      	ldrh	r2, [r7, #22]
 800f06a:	fb03 f202 	mul.w	r2, r3, r2
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	015a      	lsls	r2, r3, #5
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	4413      	add	r3, r2
 800f07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f07e:	691a      	ldr	r2, [r3, #16]
 800f080:	8afb      	ldrh	r3, [r7, #22]
 800f082:	04d9      	lsls	r1, r3, #19
 800f084:	4b39      	ldr	r3, [pc, #228]	; (800f16c <USB_EPStartXfer+0x53c>)
 800f086:	400b      	ands	r3, r1
 800f088:	69b9      	ldr	r1, [r7, #24]
 800f08a:	0148      	lsls	r0, r1, #5
 800f08c:	69f9      	ldr	r1, [r7, #28]
 800f08e:	4401      	add	r1, r0
 800f090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f094:	4313      	orrs	r3, r2
 800f096:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	015a      	lsls	r2, r3, #5
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	4413      	add	r3, r2
 800f0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a4:	691a      	ldr	r2, [r3, #16]
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	6a1b      	ldr	r3, [r3, #32]
 800f0aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0ae:	69b9      	ldr	r1, [r7, #24]
 800f0b0:	0148      	lsls	r0, r1, #5
 800f0b2:	69f9      	ldr	r1, [r7, #28]
 800f0b4:	4401      	add	r1, r0
 800f0b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f0be:	79fb      	ldrb	r3, [r7, #7]
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d10d      	bne.n	800f0e0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d009      	beq.n	800f0e0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	68d9      	ldr	r1, [r3, #12]
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	015a      	lsls	r2, r3, #5
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0dc:	460a      	mov	r2, r1
 800f0de:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	791b      	ldrb	r3, [r3, #4]
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d128      	bne.n	800f13a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d110      	bne.n	800f11a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	015a      	lsls	r2, r3, #5
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	4413      	add	r3, r2
 800f100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	69ba      	ldr	r2, [r7, #24]
 800f108:	0151      	lsls	r1, r2, #5
 800f10a:	69fa      	ldr	r2, [r7, #28]
 800f10c:	440a      	add	r2, r1
 800f10e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f112:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f116:	6013      	str	r3, [r2, #0]
 800f118:	e00f      	b.n	800f13a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	015a      	lsls	r2, r3, #5
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	4413      	add	r3, r2
 800f122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	69ba      	ldr	r2, [r7, #24]
 800f12a:	0151      	lsls	r1, r2, #5
 800f12c:	69fa      	ldr	r2, [r7, #28]
 800f12e:	440a      	add	r2, r1
 800f130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f138:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	015a      	lsls	r2, r3, #5
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	4413      	add	r3, r2
 800f142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	69ba      	ldr	r2, [r7, #24]
 800f14a:	0151      	lsls	r1, r2, #5
 800f14c:	69fa      	ldr	r2, [r7, #28]
 800f14e:	440a      	add	r2, r1
 800f150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f154:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f158:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f15a:	2300      	movs	r3, #0
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3720      	adds	r7, #32
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	fff80000 	.word	0xfff80000
 800f168:	e007ffff 	.word	0xe007ffff
 800f16c:	1ff80000 	.word	0x1ff80000

0800f170 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f170:	b480      	push	{r7}
 800f172:	b087      	sub	sp, #28
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f17a:	2300      	movs	r3, #0
 800f17c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f17e:	2300      	movs	r3, #0
 800f180:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	785b      	ldrb	r3, [r3, #1]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d14a      	bne.n	800f224 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	781b      	ldrb	r3, [r3, #0]
 800f192:	015a      	lsls	r2, r3, #5
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	4413      	add	r3, r2
 800f198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f1a6:	f040 8086 	bne.w	800f2b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	015a      	lsls	r2, r3, #5
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	683a      	ldr	r2, [r7, #0]
 800f1bc:	7812      	ldrb	r2, [r2, #0]
 800f1be:	0151      	lsls	r1, r2, #5
 800f1c0:	693a      	ldr	r2, [r7, #16]
 800f1c2:	440a      	add	r2, r1
 800f1c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f1cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	683a      	ldr	r2, [r7, #0]
 800f1e0:	7812      	ldrb	r2, [r2, #0]
 800f1e2:	0151      	lsls	r1, r2, #5
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	440a      	add	r2, r1
 800f1e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f242 7210 	movw	r2, #10000	; 0x2710
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d902      	bls.n	800f208 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	75fb      	strb	r3, [r7, #23]
          break;
 800f206:	e056      	b.n	800f2b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	015a      	lsls	r2, r3, #5
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	4413      	add	r3, r2
 800f212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f21c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f220:	d0e7      	beq.n	800f1f2 <USB_EPStopXfer+0x82>
 800f222:	e048      	b.n	800f2b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	015a      	lsls	r2, r3, #5
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	4413      	add	r3, r2
 800f22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f23c:	d13b      	bne.n	800f2b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	015a      	lsls	r2, r3, #5
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	4413      	add	r3, r2
 800f248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	683a      	ldr	r2, [r7, #0]
 800f250:	7812      	ldrb	r2, [r2, #0]
 800f252:	0151      	lsls	r1, r2, #5
 800f254:	693a      	ldr	r2, [r7, #16]
 800f256:	440a      	add	r2, r1
 800f258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f25c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f260:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	015a      	lsls	r2, r3, #5
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	4413      	add	r3, r2
 800f26c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	683a      	ldr	r2, [r7, #0]
 800f274:	7812      	ldrb	r2, [r2, #0]
 800f276:	0151      	lsls	r1, r2, #5
 800f278:	693a      	ldr	r2, [r7, #16]
 800f27a:	440a      	add	r2, r1
 800f27c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	3301      	adds	r3, #1
 800f28a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f242 7210 	movw	r2, #10000	; 0x2710
 800f292:	4293      	cmp	r3, r2
 800f294:	d902      	bls.n	800f29c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f296:	2301      	movs	r3, #1
 800f298:	75fb      	strb	r3, [r7, #23]
          break;
 800f29a:	e00c      	b.n	800f2b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	015a      	lsls	r2, r3, #5
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2b4:	d0e7      	beq.n	800f286 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	371c      	adds	r7, #28
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b089      	sub	sp, #36	; 0x24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	4611      	mov	r1, r2
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	71fb      	strb	r3, [r7, #7]
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f2e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d123      	bne.n	800f332 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f2ea:	88bb      	ldrh	r3, [r7, #4]
 800f2ec:	3303      	adds	r3, #3
 800f2ee:	089b      	lsrs	r3, r3, #2
 800f2f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	61bb      	str	r3, [r7, #24]
 800f2f6:	e018      	b.n	800f32a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f2f8:	79fb      	ldrb	r3, [r7, #7]
 800f2fa:	031a      	lsls	r2, r3, #12
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	4413      	add	r3, r2
 800f300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f304:	461a      	mov	r2, r3
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	3301      	adds	r3, #1
 800f310:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	3301      	adds	r3, #1
 800f316:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	3301      	adds	r3, #1
 800f31c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	3301      	adds	r3, #1
 800f322:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	3301      	adds	r3, #1
 800f328:	61bb      	str	r3, [r7, #24]
 800f32a:	69ba      	ldr	r2, [r7, #24]
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d3e2      	bcc.n	800f2f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f332:	2300      	movs	r3, #0
}
 800f334:	4618      	mov	r0, r3
 800f336:	3724      	adds	r7, #36	; 0x24
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f340:	b480      	push	{r7}
 800f342:	b08b      	sub	sp, #44	; 0x2c
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	4613      	mov	r3, r2
 800f34c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f356:	88fb      	ldrh	r3, [r7, #6]
 800f358:	089b      	lsrs	r3, r3, #2
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f35e:	88fb      	ldrh	r3, [r7, #6]
 800f360:	f003 0303 	and.w	r3, r3, #3
 800f364:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f366:	2300      	movs	r3, #0
 800f368:	623b      	str	r3, [r7, #32]
 800f36a:	e014      	b.n	800f396 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f376:	601a      	str	r2, [r3, #0]
    pDest++;
 800f378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37a:	3301      	adds	r3, #1
 800f37c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f380:	3301      	adds	r3, #1
 800f382:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f386:	3301      	adds	r3, #1
 800f388:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	3301      	adds	r3, #1
 800f38e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f390:	6a3b      	ldr	r3, [r7, #32]
 800f392:	3301      	adds	r3, #1
 800f394:	623b      	str	r3, [r7, #32]
 800f396:	6a3a      	ldr	r2, [r7, #32]
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d3e6      	bcc.n	800f36c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f39e:	8bfb      	ldrh	r3, [r7, #30]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d01e      	beq.n	800f3e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	f107 0310 	add.w	r3, r7, #16
 800f3b4:	6812      	ldr	r2, [r2, #0]
 800f3b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f3b8:	693a      	ldr	r2, [r7, #16]
 800f3ba:	6a3b      	ldr	r3, [r7, #32]
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	00db      	lsls	r3, r3, #3
 800f3c0:	fa22 f303 	lsr.w	r3, r2, r3
 800f3c4:	b2da      	uxtb	r2, r3
 800f3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c8:	701a      	strb	r2, [r3, #0]
      i++;
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800f3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f3d6:	8bfb      	ldrh	r3, [r7, #30]
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f3dc:	8bfb      	ldrh	r3, [r7, #30]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1ea      	bne.n	800f3b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	372c      	adds	r7, #44	; 0x2c
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ee:	4770      	bx	lr

0800f3f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b085      	sub	sp, #20
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	785b      	ldrb	r3, [r3, #1]
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d12c      	bne.n	800f466 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	015a      	lsls	r2, r3, #5
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	4413      	add	r3, r2
 800f414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	db12      	blt.n	800f444 <USB_EPSetStall+0x54>
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00f      	beq.n	800f444 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	015a      	lsls	r2, r3, #5
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	4413      	add	r3, r2
 800f42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	0151      	lsls	r1, r2, #5
 800f436:	68fa      	ldr	r2, [r7, #12]
 800f438:	440a      	add	r2, r1
 800f43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f43e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f442:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	015a      	lsls	r2, r3, #5
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	4413      	add	r3, r2
 800f44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	68ba      	ldr	r2, [r7, #8]
 800f454:	0151      	lsls	r1, r2, #5
 800f456:	68fa      	ldr	r2, [r7, #12]
 800f458:	440a      	add	r2, r1
 800f45a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f45e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f462:	6013      	str	r3, [r2, #0]
 800f464:	e02b      	b.n	800f4be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	015a      	lsls	r2, r3, #5
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	4413      	add	r3, r2
 800f46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	db12      	blt.n	800f49e <USB_EPSetStall+0xae>
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00f      	beq.n	800f49e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	015a      	lsls	r2, r3, #5
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	4413      	add	r3, r2
 800f486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68ba      	ldr	r2, [r7, #8]
 800f48e:	0151      	lsls	r1, r2, #5
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	440a      	add	r2, r1
 800f494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f498:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f49c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	015a      	lsls	r2, r3, #5
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	0151      	lsls	r1, r2, #5
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	440a      	add	r2, r1
 800f4b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f4bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3714      	adds	r7, #20
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	785b      	ldrb	r3, [r3, #1]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d128      	bne.n	800f53a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	015a      	lsls	r2, r3, #5
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	68ba      	ldr	r2, [r7, #8]
 800f4f8:	0151      	lsls	r1, r2, #5
 800f4fa:	68fa      	ldr	r2, [r7, #12]
 800f4fc:	440a      	add	r2, r1
 800f4fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f506:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	791b      	ldrb	r3, [r3, #4]
 800f50c:	2b03      	cmp	r3, #3
 800f50e:	d003      	beq.n	800f518 <USB_EPClearStall+0x4c>
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	791b      	ldrb	r3, [r3, #4]
 800f514:	2b02      	cmp	r3, #2
 800f516:	d138      	bne.n	800f58a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	015a      	lsls	r2, r3, #5
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	4413      	add	r3, r2
 800f520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	68ba      	ldr	r2, [r7, #8]
 800f528:	0151      	lsls	r1, r2, #5
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	440a      	add	r2, r1
 800f52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f536:	6013      	str	r3, [r2, #0]
 800f538:	e027      	b.n	800f58a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	015a      	lsls	r2, r3, #5
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	4413      	add	r3, r2
 800f542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	68ba      	ldr	r2, [r7, #8]
 800f54a:	0151      	lsls	r1, r2, #5
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	440a      	add	r2, r1
 800f550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f554:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f558:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	791b      	ldrb	r3, [r3, #4]
 800f55e:	2b03      	cmp	r3, #3
 800f560:	d003      	beq.n	800f56a <USB_EPClearStall+0x9e>
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	791b      	ldrb	r3, [r3, #4]
 800f566:	2b02      	cmp	r3, #2
 800f568:	d10f      	bne.n	800f58a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	015a      	lsls	r2, r3, #5
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	4413      	add	r3, r2
 800f572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	68ba      	ldr	r2, [r7, #8]
 800f57a:	0151      	lsls	r1, r2, #5
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	440a      	add	r2, r1
 800f580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f588:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3714      	adds	r7, #20
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	68fa      	ldr	r2, [r7, #12]
 800f5b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f5b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f5ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	78fb      	ldrb	r3, [r7, #3]
 800f5c6:	011b      	lsls	r3, r3, #4
 800f5c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f5cc:	68f9      	ldr	r1, [r7, #12]
 800f5ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3714      	adds	r7, #20
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b085      	sub	sp, #20
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f5fe:	f023 0303 	bic.w	r3, r3, #3
 800f602:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f612:	f023 0302 	bic.w	r3, r3, #2
 800f616:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f618:	2300      	movs	r3, #0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3714      	adds	r7, #20
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr

0800f626 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f626:	b480      	push	{r7}
 800f628:	b085      	sub	sp, #20
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f640:	f023 0303 	bic.w	r3, r3, #3
 800f644:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f654:	f043 0302 	orr.w	r3, r3, #2
 800f658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f65a:	2300      	movs	r3, #0
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3714      	adds	r7, #20
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f668:	b480      	push	{r7}
 800f66a:	b085      	sub	sp, #20
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	695b      	ldr	r3, [r3, #20]
 800f674:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	699b      	ldr	r3, [r3, #24]
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	4013      	ands	r3, r2
 800f67e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f680:	68fb      	ldr	r3, [r7, #12]
}
 800f682:	4618      	mov	r0, r3
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f68e:	b480      	push	{r7}
 800f690:	b085      	sub	sp, #20
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6a0:	699b      	ldr	r3, [r3, #24]
 800f6a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6aa:	69db      	ldr	r3, [r3, #28]
 800f6ac:	68ba      	ldr	r2, [r7, #8]
 800f6ae:	4013      	ands	r3, r2
 800f6b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	0c1b      	lsrs	r3, r3, #16
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3714      	adds	r7, #20
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f6c2:	b480      	push	{r7}
 800f6c4:	b085      	sub	sp, #20
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d4:	699b      	ldr	r3, [r3, #24]
 800f6d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6de:	69db      	ldr	r3, [r3, #28]
 800f6e0:	68ba      	ldr	r2, [r7, #8]
 800f6e2:	4013      	ands	r3, r2
 800f6e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	b29b      	uxth	r3, r3
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3714      	adds	r7, #20
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr

0800f6f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f6f6:	b480      	push	{r7}
 800f6f8:	b085      	sub	sp, #20
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
 800f6fe:	460b      	mov	r3, r1
 800f700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f706:	78fb      	ldrb	r3, [r7, #3]
 800f708:	015a      	lsls	r2, r3, #5
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	4413      	add	r3, r2
 800f70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f712:	689b      	ldr	r3, [r3, #8]
 800f714:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f71c:	695b      	ldr	r3, [r3, #20]
 800f71e:	68ba      	ldr	r2, [r7, #8]
 800f720:	4013      	ands	r3, r2
 800f722:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f724:	68bb      	ldr	r3, [r7, #8]
}
 800f726:	4618      	mov	r0, r3
 800f728:	3714      	adds	r7, #20
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f732:	b480      	push	{r7}
 800f734:	b087      	sub	sp, #28
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
 800f73a:	460b      	mov	r3, r1
 800f73c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f748:	691b      	ldr	r3, [r3, #16]
 800f74a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f754:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f756:	78fb      	ldrb	r3, [r7, #3]
 800f758:	f003 030f 	and.w	r3, r3, #15
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	fa22 f303 	lsr.w	r3, r2, r3
 800f762:	01db      	lsls	r3, r3, #7
 800f764:	b2db      	uxtb	r3, r3
 800f766:	693a      	ldr	r2, [r7, #16]
 800f768:	4313      	orrs	r3, r2
 800f76a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f76c:	78fb      	ldrb	r3, [r7, #3]
 800f76e:	015a      	lsls	r2, r3, #5
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	4413      	add	r3, r2
 800f774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	693a      	ldr	r2, [r7, #16]
 800f77c:	4013      	ands	r3, r2
 800f77e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f780:	68bb      	ldr	r3, [r7, #8]
}
 800f782:	4618      	mov	r0, r3
 800f784:	371c      	adds	r7, #28
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr

0800f78e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f78e:	b480      	push	{r7}
 800f790:	b083      	sub	sp, #12
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	695b      	ldr	r3, [r3, #20]
 800f79a:	f003 0301 	and.w	r3, r3, #1
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	370c      	adds	r7, #12
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
	...

0800f7ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b085      	sub	sp, #20
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4b09      	ldr	r3, [pc, #36]	; (800f7f0 <USB_ActivateSetup+0x44>)
 800f7ca:	4013      	ands	r3, r2
 800f7cc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	68fa      	ldr	r2, [r7, #12]
 800f7d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f7dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f7e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3714      	adds	r7, #20
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr
 800f7f0:	fffff800 	.word	0xfffff800

0800f7f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	607a      	str	r2, [r7, #4]
 800f800:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	333c      	adds	r3, #60	; 0x3c
 800f80a:	3304      	adds	r3, #4
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	4a26      	ldr	r2, [pc, #152]	; (800f8ac <USB_EP0_OutStart+0xb8>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d90a      	bls.n	800f82e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f828:	d101      	bne.n	800f82e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f82a:	2300      	movs	r3, #0
 800f82c:	e037      	b.n	800f89e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f834:	461a      	mov	r2, r3
 800f836:	2300      	movs	r3, #0
 800f838:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f840:	691b      	ldr	r3, [r3, #16]
 800f842:	697a      	ldr	r2, [r7, #20]
 800f844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f848:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f84c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f854:	691b      	ldr	r3, [r3, #16]
 800f856:	697a      	ldr	r2, [r7, #20]
 800f858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f85c:	f043 0318 	orr.w	r3, r3, #24
 800f860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f868:	691b      	ldr	r3, [r3, #16]
 800f86a:	697a      	ldr	r2, [r7, #20]
 800f86c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f870:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f874:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f876:	7afb      	ldrb	r3, [r7, #11]
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d10f      	bne.n	800f89c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f882:	461a      	mov	r2, r3
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	697a      	ldr	r2, [r7, #20]
 800f892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f896:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f89a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f89c:	2300      	movs	r3, #0
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	371c      	adds	r7, #28
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	4f54300a 	.word	0x4f54300a

0800f8b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b085      	sub	sp, #20
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	4a13      	ldr	r2, [pc, #76]	; (800f914 <USB_CoreReset+0x64>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d901      	bls.n	800f8ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f8ca:	2303      	movs	r3, #3
 800f8cc:	e01b      	b.n	800f906 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	691b      	ldr	r3, [r3, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	daf2      	bge.n	800f8bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	691b      	ldr	r3, [r3, #16]
 800f8de:	f043 0201 	orr.w	r2, r3, #1
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4a09      	ldr	r2, [pc, #36]	; (800f914 <USB_CoreReset+0x64>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d901      	bls.n	800f8f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f8f4:	2303      	movs	r3, #3
 800f8f6:	e006      	b.n	800f906 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	691b      	ldr	r3, [r3, #16]
 800f8fc:	f003 0301 	and.w	r3, r3, #1
 800f900:	2b01      	cmp	r3, #1
 800f902:	d0f0      	beq.n	800f8e6 <USB_CoreReset+0x36>

  return HAL_OK;
 800f904:	2300      	movs	r3, #0
}
 800f906:	4618      	mov	r0, r3
 800f908:	3714      	adds	r7, #20
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop
 800f914:	00030d40 	.word	0x00030d40

0800f918 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f91c:	4904      	ldr	r1, [pc, #16]	; (800f930 <MX_FATFS_Init+0x18>)
 800f91e:	4805      	ldr	r0, [pc, #20]	; (800f934 <MX_FATFS_Init+0x1c>)
 800f920:	f007 ffb8 	bl	8017894 <FATFS_LinkDriver>
 800f924:	4603      	mov	r3, r0
 800f926:	461a      	mov	r2, r3
 800f928:	4b03      	ldr	r3, [pc, #12]	; (800f938 <MX_FATFS_Init+0x20>)
 800f92a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f92c:	bf00      	nop
 800f92e:	bd80      	pop	{r7, pc}
 800f930:	24000b58 	.word	0x24000b58
 800f934:	24000010 	.word	0x24000010
 800f938:	24000b54 	.word	0x24000b54

0800f93c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f93c:	b480      	push	{r7}
 800f93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f940:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f942:	4618      	mov	r0, r3
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	4603      	mov	r3, r0
 800f954:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return RES_OK;
 800f956:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 800f958:	4618      	mov	r0, r3
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	4603      	mov	r3, r0
 800f96c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return RES_OK;
 800f96e:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 800f970:	4618      	mov	r0, r3
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	60b9      	str	r1, [r7, #8]
 800f984:	607a      	str	r2, [r7, #4]
 800f986:	603b      	str	r3, [r7, #0]
 800f988:	4603      	mov	r3, r0
 800f98a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SD_ReadDisk(buff,sector,count);
 800f98c:	683a      	ldr	r2, [r7, #0]
 800f98e:	6879      	ldr	r1, [r7, #4]
 800f990:	68b8      	ldr	r0, [r7, #8]
 800f992:	f008 f961 	bl	8017c58 <SD_ReadDisk>
    return RES_OK;
 800f996:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60b9      	str	r1, [r7, #8]
 800f9a8:	607a      	str	r2, [r7, #4]
 800f9aa:	603b      	str	r3, [r7, #0]
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SD_WriteDisk((uint8_t*)buff,sector,count);
 800f9b0:	683a      	ldr	r2, [r7, #0]
 800f9b2:	6879      	ldr	r1, [r7, #4]
 800f9b4:	68b8      	ldr	r0, [r7, #8]
 800f9b6:	f008 f985 	bl	8017cc4 <SD_WriteDisk>
    return RES_OK;
 800f9ba:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	603a      	str	r2, [r7, #0]
 800f9ce:	71fb      	strb	r3, [r7, #7]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
	DRESULT res;
	switch(cmd)
 800f9d4:	79bb      	ldrb	r3, [r7, #6]
 800f9d6:	2b03      	cmp	r3, #3
 800f9d8:	d823      	bhi.n	800fa22 <USER_ioctl+0x5e>
 800f9da:	a201      	add	r2, pc, #4	; (adr r2, 800f9e0 <USER_ioctl+0x1c>)
 800f9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e0:	0800f9f1 	.word	0x0800f9f1
 800f9e4:	0800fa15 	.word	0x0800fa15
 800f9e8:	0800f9f7 	.word	0x0800f9f7
 800f9ec:	0800fa05 	.word	0x0800fa05
	{
		case CTRL_SYNC:
			res = RES_OK;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	73fb      	strb	r3, [r7, #15]
			break;
 800f9f4:	e018      	b.n	800fa28 <USER_ioctl+0x64>
		case GET_SECTOR_SIZE:
			*(DWORD*)buff = 512;
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9fc:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	73fb      	strb	r3, [r7, #15]
			break;
 800fa02:	e011      	b.n	800fa28 <USER_ioctl+0x64>
		case GET_BLOCK_SIZE:
			*(WORD*)buff = SDCardInfo.LogBlockSize;
 800fa04:	4b0c      	ldr	r3, [pc, #48]	; (800fa38 <USER_ioctl+0x74>)
 800fa06:	69db      	ldr	r3, [r3, #28]
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	73fb      	strb	r3, [r7, #15]
			break;
 800fa12:	e009      	b.n	800fa28 <USER_ioctl+0x64>
		case GET_SECTOR_COUNT:
			*(DWORD*)buff = SDCardInfo.LogBlockNbr;
 800fa14:	4b08      	ldr	r3, [pc, #32]	; (800fa38 <USER_ioctl+0x74>)
 800fa16:	699a      	ldr	r2, [r3, #24]
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	73fb      	strb	r3, [r7, #15]
			break;
 800fa20:	e002      	b.n	800fa28 <USER_ioctl+0x64>
		default:
			res = RES_PARERR;
 800fa22:	2304      	movs	r3, #4
 800fa24:	73fb      	strb	r3, [r7, #15]
			break;
 800fa26:	bf00      	nop
	}

    return res;
 800fa28:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3714      	adds	r7, #20
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	24001064 	.word	0x24001064

0800fa3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	460b      	mov	r3, r1
 800fa46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fa48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fa4c:	f00b f81c 	bl	801aa88 <malloc>
 800fa50:	4603      	mov	r3, r0
 800fa52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d10a      	bne.n	800fa70 <USBD_CDC_Init+0x34>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	33b2      	adds	r3, #178	; 0xb2
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4413      	add	r3, r2
 800fa68:	2200      	movs	r2, #0
 800fa6a:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 800fa6c:	2302      	movs	r3, #2
 800fa6e:	e0fd      	b.n	800fc6c <USBD_CDC_Init+0x230>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fa70:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800fa74:	2100      	movs	r1, #0
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f00b fae0 	bl	801b03c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	33b2      	adds	r3, #178	; 0xb2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	68fa      	ldr	r2, [r7, #12]
 800fa8c:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	33b2      	adds	r3, #178	; 0xb2
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	4413      	add	r3, r2
 800fa9c:	685a      	ldr	r2, [r3, #4]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	2202      	movs	r2, #2
 800faae:	2180      	movs	r1, #128	; 0x80
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f003 fcee 	bl	8013492 <USBD_CoreGetEPAdd>
 800fab6:	4603      	mov	r3, r0
 800fab8:	461a      	mov	r2, r3
 800faba:	4b6e      	ldr	r3, [pc, #440]	; (800fc74 <USBD_CDC_Init+0x238>)
 800fabc:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	2202      	movs	r2, #2
 800fac8:	2100      	movs	r1, #0
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f003 fce1 	bl	8013492 <USBD_CoreGetEPAdd>
 800fad0:	4603      	mov	r3, r0
 800fad2:	461a      	mov	r2, r3
 800fad4:	4b68      	ldr	r3, [pc, #416]	; (800fc78 <USBD_CDC_Init+0x23c>)
 800fad6:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2203      	movs	r2, #3
 800fae2:	2180      	movs	r1, #128	; 0x80
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f003 fcd4 	bl	8013492 <USBD_CoreGetEPAdd>
 800faea:	4603      	mov	r3, r0
 800faec:	461a      	mov	r2, r3
 800faee:	4b63      	ldr	r3, [pc, #396]	; (800fc7c <USBD_CDC_Init+0x240>)
 800faf0:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	7c1b      	ldrb	r3, [r3, #16]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d138      	bne.n	800fb6c <USBD_CDC_Init+0x130>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fafa:	4b5e      	ldr	r3, [pc, #376]	; (800fc74 <USBD_CDC_Init+0x238>)
 800fafc:	7819      	ldrb	r1, [r3, #0]
 800fafe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb02:	2202      	movs	r2, #2
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f009 f968 	bl	8018dda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fb0a:	4b5a      	ldr	r3, [pc, #360]	; (800fc74 <USBD_CDC_Init+0x238>)
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	f003 020f 	and.w	r2, r3, #15
 800fb12:	6879      	ldr	r1, [r7, #4]
 800fb14:	4613      	mov	r3, r2
 800fb16:	009b      	lsls	r3, r3, #2
 800fb18:	4413      	add	r3, r2
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	440b      	add	r3, r1
 800fb1e:	3324      	adds	r3, #36	; 0x24
 800fb20:	2201      	movs	r2, #1
 800fb22:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fb24:	4b54      	ldr	r3, [pc, #336]	; (800fc78 <USBD_CDC_Init+0x23c>)
 800fb26:	7819      	ldrb	r1, [r3, #0]
 800fb28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb2c:	2202      	movs	r2, #2
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f009 f953 	bl	8018dda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fb34:	4b50      	ldr	r3, [pc, #320]	; (800fc78 <USBD_CDC_Init+0x23c>)
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	f003 020f 	and.w	r2, r3, #15
 800fb3c:	6879      	ldr	r1, [r7, #4]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	4413      	add	r3, r2
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	440b      	add	r3, r1
 800fb48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fb50:	4b4a      	ldr	r3, [pc, #296]	; (800fc7c <USBD_CDC_Init+0x240>)
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	f003 020f 	and.w	r2, r3, #15
 800fb58:	6879      	ldr	r1, [r7, #4]
 800fb5a:	4613      	mov	r3, r2
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	4413      	add	r3, r2
 800fb60:	009b      	lsls	r3, r3, #2
 800fb62:	440b      	add	r3, r1
 800fb64:	3326      	adds	r3, #38	; 0x26
 800fb66:	2210      	movs	r2, #16
 800fb68:	801a      	strh	r2, [r3, #0]
 800fb6a:	e035      	b.n	800fbd8 <USBD_CDC_Init+0x19c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fb6c:	4b41      	ldr	r3, [pc, #260]	; (800fc74 <USBD_CDC_Init+0x238>)
 800fb6e:	7819      	ldrb	r1, [r3, #0]
 800fb70:	2340      	movs	r3, #64	; 0x40
 800fb72:	2202      	movs	r2, #2
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f009 f930 	bl	8018dda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fb7a:	4b3e      	ldr	r3, [pc, #248]	; (800fc74 <USBD_CDC_Init+0x238>)
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	f003 020f 	and.w	r2, r3, #15
 800fb82:	6879      	ldr	r1, [r7, #4]
 800fb84:	4613      	mov	r3, r2
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	4413      	add	r3, r2
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	440b      	add	r3, r1
 800fb8e:	3324      	adds	r3, #36	; 0x24
 800fb90:	2201      	movs	r2, #1
 800fb92:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fb94:	4b38      	ldr	r3, [pc, #224]	; (800fc78 <USBD_CDC_Init+0x23c>)
 800fb96:	7819      	ldrb	r1, [r3, #0]
 800fb98:	2340      	movs	r3, #64	; 0x40
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f009 f91c 	bl	8018dda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fba2:	4b35      	ldr	r3, [pc, #212]	; (800fc78 <USBD_CDC_Init+0x23c>)
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	f003 020f 	and.w	r2, r3, #15
 800fbaa:	6879      	ldr	r1, [r7, #4]
 800fbac:	4613      	mov	r3, r2
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	4413      	add	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	440b      	add	r3, r1
 800fbb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fbba:	2201      	movs	r2, #1
 800fbbc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fbbe:	4b2f      	ldr	r3, [pc, #188]	; (800fc7c <USBD_CDC_Init+0x240>)
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	f003 020f 	and.w	r2, r3, #15
 800fbc6:	6879      	ldr	r1, [r7, #4]
 800fbc8:	4613      	mov	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4413      	add	r3, r2
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	440b      	add	r3, r1
 800fbd2:	3326      	adds	r3, #38	; 0x26
 800fbd4:	2210      	movs	r2, #16
 800fbd6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fbd8:	4b28      	ldr	r3, [pc, #160]	; (800fc7c <USBD_CDC_Init+0x240>)
 800fbda:	7819      	ldrb	r1, [r3, #0]
 800fbdc:	2308      	movs	r3, #8
 800fbde:	2203      	movs	r2, #3
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f009 f8fa 	bl	8018dda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fbe6:	4b25      	ldr	r3, [pc, #148]	; (800fc7c <USBD_CDC_Init+0x240>)
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	f003 020f 	and.w	r2, r3, #15
 800fbee:	6879      	ldr	r1, [r7, #4]
 800fbf0:	4613      	mov	r3, r2
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	4413      	add	r3, r2
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	440b      	add	r3, r1
 800fbfa:	3324      	adds	r3, #36	; 0x24
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2200      	movs	r2, #0
 800fc04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	33b6      	adds	r3, #182	; 0xb6
 800fc12:	009b      	lsls	r3, r3, #2
 800fc14:	4413      	add	r3, r2
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2200      	movs	r2, #0
 800fc28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d101      	bne.n	800fc3a <USBD_CDC_Init+0x1fe>
  {
    return (uint8_t)USBD_EMEM;
 800fc36:	2302      	movs	r3, #2
 800fc38:	e018      	b.n	800fc6c <USBD_CDC_Init+0x230>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	7c1b      	ldrb	r3, [r3, #16]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d10a      	bne.n	800fc58 <USBD_CDC_Init+0x21c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc42:	4b0d      	ldr	r3, [pc, #52]	; (800fc78 <USBD_CDC_Init+0x23c>)
 800fc44:	7819      	ldrb	r1, [r3, #0]
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fc4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f009 f9d0 	bl	8018ff6 <USBD_LL_PrepareReceive>
 800fc56:	e008      	b.n	800fc6a <USBD_CDC_Init+0x22e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc58:	4b07      	ldr	r3, [pc, #28]	; (800fc78 <USBD_CDC_Init+0x23c>)
 800fc5a:	7819      	ldrb	r1, [r3, #0]
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fc62:	2340      	movs	r3, #64	; 0x40
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f009 f9c6 	bl	8018ff6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3710      	adds	r7, #16
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	2400005c 	.word	0x2400005c
 800fc78:	2400005d 	.word	0x2400005d
 800fc7c:	2400005e 	.word	0x2400005e

0800fc80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	460b      	mov	r3, r1
 800fc8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);


#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this CDC class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	2202      	movs	r2, #2
 800fc96:	2180      	movs	r1, #128	; 0x80
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f003 fbfa 	bl	8013492 <USBD_CoreGetEPAdd>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	461a      	mov	r2, r3
 800fca2:	4b4a      	ldr	r3, [pc, #296]	; (800fdcc <USBD_CDC_DeInit+0x14c>)
 800fca4:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	2202      	movs	r2, #2
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f003 fbed 	bl	8013492 <USBD_CoreGetEPAdd>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	461a      	mov	r2, r3
 800fcbc:	4b44      	ldr	r3, [pc, #272]	; (800fdd0 <USBD_CDC_DeInit+0x150>)
 800fcbe:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	2203      	movs	r2, #3
 800fcca:	2180      	movs	r1, #128	; 0x80
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f003 fbe0 	bl	8013492 <USBD_CoreGetEPAdd>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	4b3f      	ldr	r3, [pc, #252]	; (800fdd4 <USBD_CDC_DeInit+0x154>)
 800fcd8:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fcda:	4b3c      	ldr	r3, [pc, #240]	; (800fdcc <USBD_CDC_DeInit+0x14c>)
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	4619      	mov	r1, r3
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f009 f8a0 	bl	8018e26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fce6:	4b39      	ldr	r3, [pc, #228]	; (800fdcc <USBD_CDC_DeInit+0x14c>)
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	f003 020f 	and.w	r2, r3, #15
 800fcee:	6879      	ldr	r1, [r7, #4]
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	009b      	lsls	r3, r3, #2
 800fcf4:	4413      	add	r3, r2
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	440b      	add	r3, r1
 800fcfa:	3324      	adds	r3, #36	; 0x24
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fd00:	4b33      	ldr	r3, [pc, #204]	; (800fdd0 <USBD_CDC_DeInit+0x150>)
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	4619      	mov	r1, r3
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f009 f88d 	bl	8018e26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fd0c:	4b30      	ldr	r3, [pc, #192]	; (800fdd0 <USBD_CDC_DeInit+0x150>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	f003 020f 	and.w	r2, r3, #15
 800fd14:	6879      	ldr	r1, [r7, #4]
 800fd16:	4613      	mov	r3, r2
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	4413      	add	r3, r2
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	440b      	add	r3, r1
 800fd20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fd24:	2200      	movs	r2, #0
 800fd26:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fd28:	4b2a      	ldr	r3, [pc, #168]	; (800fdd4 <USBD_CDC_DeInit+0x154>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f009 f879 	bl	8018e26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fd34:	4b27      	ldr	r3, [pc, #156]	; (800fdd4 <USBD_CDC_DeInit+0x154>)
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	f003 020f 	and.w	r2, r3, #15
 800fd3c:	6879      	ldr	r1, [r7, #4]
 800fd3e:	4613      	mov	r3, r2
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	4413      	add	r3, r2
 800fd44:	009b      	lsls	r3, r3, #2
 800fd46:	440b      	add	r3, r1
 800fd48:	3324      	adds	r3, #36	; 0x24
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fd4e:	4b21      	ldr	r3, [pc, #132]	; (800fdd4 <USBD_CDC_DeInit+0x154>)
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	f003 020f 	and.w	r2, r3, #15
 800fd56:	6879      	ldr	r1, [r7, #4]
 800fd58:	4613      	mov	r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	4413      	add	r3, r2
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	440b      	add	r3, r1
 800fd62:	3326      	adds	r3, #38	; 0x26
 800fd64:	2200      	movs	r2, #0
 800fd66:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fd6e:	687a      	ldr	r2, [r7, #4]
 800fd70:	33b2      	adds	r3, #178	; 0xb2
 800fd72:	009b      	lsls	r3, r3, #2
 800fd74:	4413      	add	r3, r2
 800fd76:	685b      	ldr	r3, [r3, #4]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d021      	beq.n	800fdc0 <USBD_CDC_DeInit+0x140>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fd82:	687a      	ldr	r2, [r7, #4]
 800fd84:	33b6      	adds	r3, #182	; 0xb6
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	4413      	add	r3, r2
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	33b2      	adds	r3, #178	; 0xb2
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	4413      	add	r3, r2
 800fd9e:	685b      	ldr	r3, [r3, #4]
 800fda0:	4618      	mov	r0, r3
 800fda2:	f00a fe79 	bl	801aa98 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	33b2      	adds	r3, #178	; 0xb2
 800fdb0:	009b      	lsls	r3, r3, #2
 800fdb2:	4413      	add	r3, r2
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  }

  return (uint8_t)USBD_OK;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3708      	adds	r7, #8
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	2400005c 	.word	0x2400005c
 800fdd0:	2400005d 	.word	0x2400005d
 800fdd4:	2400005e 	.word	0x2400005e

0800fdd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b086      	sub	sp, #24
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	33b2      	adds	r3, #178	; 0xb2
 800fdec:	009b      	lsls	r3, r3, #2
 800fdee:	4413      	add	r3, r2
 800fdf0:	685b      	ldr	r3, [r3, #4]
 800fdf2:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d101      	bne.n	800fe0a <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fe06:	2303      	movs	r3, #3
 800fe08:	e0c0      	b.n	800ff8c <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d050      	beq.n	800feb8 <USBD_CDC_Setup+0xe0>
 800fe16:	2b20      	cmp	r3, #32
 800fe18:	f040 80b0 	bne.w	800ff7c <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	88db      	ldrh	r3, [r3, #6]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d03a      	beq.n	800fe9a <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	b25b      	sxtb	r3, r3
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	da1b      	bge.n	800fe66 <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	33b6      	adds	r3, #182	; 0xb6
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4413      	add	r3, r2
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	683a      	ldr	r2, [r7, #0]
 800fe42:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fe44:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fe46:	683a      	ldr	r2, [r7, #0]
 800fe48:	88d2      	ldrh	r2, [r2, #6]
 800fe4a:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	88db      	ldrh	r3, [r3, #6]
 800fe50:	2b07      	cmp	r3, #7
 800fe52:	bf28      	it	cs
 800fe54:	2307      	movcs	r3, #7
 800fe56:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	89fa      	ldrh	r2, [r7, #14]
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f004 fa2e 	bl	80142c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fe64:	e091      	b.n	800ff8a <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	785a      	ldrb	r2, [r3, #1]
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	88db      	ldrh	r3, [r3, #6]
 800fe74:	2b3f      	cmp	r3, #63	; 0x3f
 800fe76:	d803      	bhi.n	800fe80 <USBD_CDC_Setup+0xa8>
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	88db      	ldrh	r3, [r3, #6]
 800fe7c:	b2da      	uxtb	r2, r3
 800fe7e:	e000      	b.n	800fe82 <USBD_CDC_Setup+0xaa>
 800fe80:	2240      	movs	r2, #64	; 0x40
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fe88:	6939      	ldr	r1, [r7, #16]
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800fe90:	461a      	mov	r2, r3
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f004 fa40 	bl	8014318 <USBD_CtlPrepareRx>
      break;
 800fe98:	e077      	b.n	800ff8a <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	33b6      	adds	r3, #182	; 0xb6
 800fea4:	009b      	lsls	r3, r3, #2
 800fea6:	4413      	add	r3, r2
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	683a      	ldr	r2, [r7, #0]
 800feae:	7850      	ldrb	r0, [r2, #1]
 800feb0:	2200      	movs	r2, #0
 800feb2:	6839      	ldr	r1, [r7, #0]
 800feb4:	4798      	blx	r3
      break;
 800feb6:	e068      	b.n	800ff8a <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	785b      	ldrb	r3, [r3, #1]
 800febc:	2b0b      	cmp	r3, #11
 800febe:	d852      	bhi.n	800ff66 <USBD_CDC_Setup+0x18e>
 800fec0:	a201      	add	r2, pc, #4	; (adr r2, 800fec8 <USBD_CDC_Setup+0xf0>)
 800fec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec6:	bf00      	nop
 800fec8:	0800fef9 	.word	0x0800fef9
 800fecc:	0800ff75 	.word	0x0800ff75
 800fed0:	0800ff67 	.word	0x0800ff67
 800fed4:	0800ff67 	.word	0x0800ff67
 800fed8:	0800ff67 	.word	0x0800ff67
 800fedc:	0800ff67 	.word	0x0800ff67
 800fee0:	0800ff67 	.word	0x0800ff67
 800fee4:	0800ff67 	.word	0x0800ff67
 800fee8:	0800ff67 	.word	0x0800ff67
 800feec:	0800ff67 	.word	0x0800ff67
 800fef0:	0800ff23 	.word	0x0800ff23
 800fef4:	0800ff4d 	.word	0x0800ff4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	2b03      	cmp	r3, #3
 800ff02:	d107      	bne.n	800ff14 <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ff04:	f107 030a 	add.w	r3, r7, #10
 800ff08:	2202      	movs	r2, #2
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f004 f9d7 	bl	80142c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ff12:	e032      	b.n	800ff7a <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 800ff14:	6839      	ldr	r1, [r7, #0]
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f004 f961 	bl	80141de <USBD_CtlError>
            ret = USBD_FAIL;
 800ff1c:	2303      	movs	r3, #3
 800ff1e:	75fb      	strb	r3, [r7, #23]
          break;
 800ff20:	e02b      	b.n	800ff7a <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff28:	b2db      	uxtb	r3, r3
 800ff2a:	2b03      	cmp	r3, #3
 800ff2c:	d107      	bne.n	800ff3e <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ff2e:	f107 030d 	add.w	r3, r7, #13
 800ff32:	2201      	movs	r2, #1
 800ff34:	4619      	mov	r1, r3
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f004 f9c2 	bl	80142c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ff3c:	e01d      	b.n	800ff7a <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 800ff3e:	6839      	ldr	r1, [r7, #0]
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f004 f94c 	bl	80141de <USBD_CtlError>
            ret = USBD_FAIL;
 800ff46:	2303      	movs	r3, #3
 800ff48:	75fb      	strb	r3, [r7, #23]
          break;
 800ff4a:	e016      	b.n	800ff7a <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	2b03      	cmp	r3, #3
 800ff56:	d00f      	beq.n	800ff78 <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 800ff58:	6839      	ldr	r1, [r7, #0]
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f004 f93f 	bl	80141de <USBD_CtlError>
            ret = USBD_FAIL;
 800ff60:	2303      	movs	r3, #3
 800ff62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ff64:	e008      	b.n	800ff78 <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ff66:	6839      	ldr	r1, [r7, #0]
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f004 f938 	bl	80141de <USBD_CtlError>
          ret = USBD_FAIL;
 800ff6e:	2303      	movs	r3, #3
 800ff70:	75fb      	strb	r3, [r7, #23]
          break;
 800ff72:	e002      	b.n	800ff7a <USBD_CDC_Setup+0x1a2>
          break;
 800ff74:	bf00      	nop
 800ff76:	e008      	b.n	800ff8a <USBD_CDC_Setup+0x1b2>
          break;
 800ff78:	bf00      	nop
      }
      break;
 800ff7a:	e006      	b.n	800ff8a <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 800ff7c:	6839      	ldr	r1, [r7, #0]
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f004 f92d 	bl	80141de <USBD_CtlError>
      ret = USBD_FAIL;
 800ff84:	2303      	movs	r3, #3
 800ff86:	75fb      	strb	r3, [r7, #23]
      break;
 800ff88:	bf00      	nop
  }

  return (uint8_t)ret;
 800ff8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3718      	adds	r7, #24
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ffa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	33b2      	adds	r3, #178	; 0xb2
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	4413      	add	r3, r2
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d101      	bne.n	800ffc0 <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800ffbc:	2303      	movs	r3, #3
 800ffbe:	e066      	b.n	801008e <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	33b2      	adds	r3, #178	; 0xb2
 800ffca:	009b      	lsls	r3, r3, #2
 800ffcc:	4413      	add	r3, r2
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ffd2:	78fb      	ldrb	r3, [r7, #3]
 800ffd4:	f003 020f 	and.w	r2, r3, #15
 800ffd8:	6879      	ldr	r1, [r7, #4]
 800ffda:	4613      	mov	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	4413      	add	r3, r2
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	440b      	add	r3, r1
 800ffe4:	3318      	adds	r3, #24
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d02f      	beq.n	801004c <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ffec:	78fb      	ldrb	r3, [r7, #3]
 800ffee:	f003 020f 	and.w	r2, r3, #15
 800fff2:	6879      	ldr	r1, [r7, #4]
 800fff4:	4613      	mov	r3, r2
 800fff6:	009b      	lsls	r3, r3, #2
 800fff8:	4413      	add	r3, r2
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	440b      	add	r3, r1
 800fffe:	3318      	adds	r3, #24
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	78fb      	ldrb	r3, [r7, #3]
 8010004:	f003 010f 	and.w	r1, r3, #15
 8010008:	68f8      	ldr	r0, [r7, #12]
 801000a:	460b      	mov	r3, r1
 801000c:	00db      	lsls	r3, r3, #3
 801000e:	440b      	add	r3, r1
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4403      	add	r3, r0
 8010014:	3344      	adds	r3, #68	; 0x44
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	fbb2 f1f3 	udiv	r1, r2, r3
 801001c:	fb01 f303 	mul.w	r3, r1, r3
 8010020:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010022:	2b00      	cmp	r3, #0
 8010024:	d112      	bne.n	801004c <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010026:	78fb      	ldrb	r3, [r7, #3]
 8010028:	f003 020f 	and.w	r2, r3, #15
 801002c:	6879      	ldr	r1, [r7, #4]
 801002e:	4613      	mov	r3, r2
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	4413      	add	r3, r2
 8010034:	009b      	lsls	r3, r3, #2
 8010036:	440b      	add	r3, r1
 8010038:	3318      	adds	r3, #24
 801003a:	2200      	movs	r2, #0
 801003c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801003e:	78f9      	ldrb	r1, [r7, #3]
 8010040:	2300      	movs	r3, #0
 8010042:	2200      	movs	r2, #0
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f008 ffb5 	bl	8018fb4 <USBD_LL_Transmit>
 801004a:	e01f      	b.n	801008c <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	2200      	movs	r2, #0
 8010050:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	33b6      	adds	r3, #182	; 0xb6
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	4413      	add	r3, r2
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	691b      	ldr	r3, [r3, #16]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d010      	beq.n	801008c <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	33b6      	adds	r3, #182	; 0xb6
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	4413      	add	r3, r2
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	691b      	ldr	r3, [r3, #16]
 801007c:	68ba      	ldr	r2, [r7, #8]
 801007e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010088:	78fa      	ldrb	r2, [r7, #3]
 801008a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801008c:	2300      	movs	r3, #0
}
 801008e:	4618      	mov	r0, r3
 8010090:	3710      	adds	r7, #16
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}

08010096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010096:	b580      	push	{r7, lr}
 8010098:	b084      	sub	sp, #16
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
 801009e:	460b      	mov	r3, r1
 80100a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	33b2      	adds	r3, #178	; 0xb2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	4413      	add	r3, r2
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	33b2      	adds	r3, #178	; 0xb2
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	4413      	add	r3, r2
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d101      	bne.n	80100cc <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 80100c8:	2303      	movs	r3, #3
 80100ca:	e01a      	b.n	8010102 <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80100cc:	78fb      	ldrb	r3, [r7, #3]
 80100ce:	4619      	mov	r1, r3
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f008 ffb1 	bl	8019038 <USBD_LL_GetRxDataSize>
 80100d6:	4602      	mov	r2, r0
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	33b6      	adds	r3, #182	; 0xb6
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	4413      	add	r3, r2
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80100f6:	68fa      	ldr	r2, [r7, #12]
 80100f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80100fc:	4611      	mov	r1, r2
 80100fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010100:	2300      	movs	r3, #0
}
 8010102:	4618      	mov	r0, r3
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b084      	sub	sp, #16
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	33b2      	adds	r3, #178	; 0xb2
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	4413      	add	r3, r2
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d101      	bne.n	801012e <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801012a:	2303      	movs	r3, #3
 801012c:	e025      	b.n	801017a <USBD_CDC_EP0_RxReady+0x70>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	33b6      	adds	r3, #182	; 0xb6
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	4413      	add	r3, r2
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d01a      	beq.n	8010178 <USBD_CDC_EP0_RxReady+0x6e>
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010148:	2bff      	cmp	r3, #255	; 0xff
 801014a:	d015      	beq.n	8010178 <USBD_CDC_EP0_RxReady+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	33b6      	adds	r3, #182	; 0xb6
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	4413      	add	r3, r2
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8010164:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010166:	68fa      	ldr	r2, [r7, #12]
 8010168:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801016c:	b292      	uxth	r2, r2
 801016e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	22ff      	movs	r2, #255	; 0xff
 8010174:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010178:	2300      	movs	r3, #0
}
 801017a:	4618      	mov	r0, r3
 801017c:	3710      	adds	r7, #16
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}

08010182 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010182:	b480      	push	{r7}
 8010184:	b083      	sub	sp, #12
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
 801018a:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d101      	bne.n	8010196 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010192:	2303      	movs	r3, #3
 8010194:	e009      	b.n	80101aa <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	33b6      	adds	r3, #182	; 0xb6
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	4413      	add	r3, r2
 80101a4:	683a      	ldr	r2, [r7, #0]
 80101a6:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80101a8:	2300      	movs	r3, #0
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	370c      	adds	r7, #12
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr

080101b6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
 80101b6:	b480      	push	{r7}
 80101b8:	b087      	sub	sp, #28
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	60f8      	str	r0, [r7, #12]
 80101be:	60b9      	str	r1, [r7, #8]
 80101c0:	607a      	str	r2, [r7, #4]
 80101c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 80101c4:	78fb      	ldrb	r3, [r7, #3]
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	33b2      	adds	r3, #178	; 0xb2
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	4413      	add	r3, r2
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	617b      	str	r3, [r7, #20]
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d101      	bne.n	80101dc <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80101d8:	2303      	movs	r3, #3
 80101da:	e008      	b.n	80101ee <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	68ba      	ldr	r2, [r7, #8]
 80101e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80101ec:	2300      	movs	r3, #0
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	371c      	adds	r7, #28
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr

080101fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80101fa:	b480      	push	{r7}
 80101fc:	b085      	sub	sp, #20
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
 8010202:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	33b2      	adds	r3, #178	; 0xb2
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	4413      	add	r3, r2
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d101      	bne.n	8010220 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801021c:	2303      	movs	r3, #3
 801021e:	e004      	b.n	801022a <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	683a      	ldr	r2, [r7, #0]
 8010224:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010228:	2300      	movs	r3, #0
}
 801022a:	4618      	mov	r0, r3
 801022c:	3714      	adds	r7, #20
 801022e:	46bd      	mov	sp, r7
 8010230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010234:	4770      	bx	lr
	...

08010238 <USBD_CDC_TransmitPacket>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	460b      	mov	r3, r1
 8010242:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8010244:	78fb      	ldrb	r3, [r7, #3]
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	33b2      	adds	r3, #178	; 0xb2
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	4413      	add	r3, r2
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	60bb      	str	r3, [r7, #8]
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010252:	2301      	movs	r3, #1
 8010254:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
 8010256:	78fb      	ldrb	r3, [r7, #3]
 8010258:	2202      	movs	r2, #2
 801025a:	2180      	movs	r1, #128	; 0x80
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f003 f918 	bl	8013492 <USBD_CoreGetEPAdd>
 8010262:	4603      	mov	r3, r0
 8010264:	461a      	mov	r2, r3
 8010266:	4b18      	ldr	r3, [pc, #96]	; (80102c8 <USBD_CDC_TransmitPacket+0x90>)
 8010268:	701a      	strb	r2, [r3, #0]
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d101      	bne.n	8010274 <USBD_CDC_TransmitPacket+0x3c>
  {
    return (uint8_t)USBD_FAIL;
 8010270:	2303      	movs	r3, #3
 8010272:	e025      	b.n	80102c0 <USBD_CDC_TransmitPacket+0x88>
  }

  if (hcdc->TxState == 0U)
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801027a:	2b00      	cmp	r3, #0
 801027c:	d11f      	bne.n	80102be <USBD_CDC_TransmitPacket+0x86>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	2201      	movs	r2, #1
 8010282:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010286:	4b10      	ldr	r3, [pc, #64]	; (80102c8 <USBD_CDC_TransmitPacket+0x90>)
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	f003 020f 	and.w	r2, r3, #15
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	4613      	mov	r3, r2
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	4413      	add	r3, r2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	4403      	add	r3, r0
 80102a0:	3318      	adds	r3, #24
 80102a2:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80102a4:	4b08      	ldr	r3, [pc, #32]	; (80102c8 <USBD_CDC_TransmitPacket+0x90>)
 80102a6:	7819      	ldrb	r1, [r3, #0]
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f008 fe7d 	bl	8018fb4 <USBD_LL_Transmit>

    ret = USBD_OK;
 80102ba:	2300      	movs	r3, #0
 80102bc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80102be:	7bfb      	ldrb	r3, [r7, #15]
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	2400005c 	.word	0x2400005c

080102cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	33b2      	adds	r3, #178	; 0xb2
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	4413      	add	r3, r2
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	2202      	movs	r2, #2
 80102f0:	2100      	movs	r1, #0
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f003 f8cd 	bl	8013492 <USBD_CoreGetEPAdd>
 80102f8:	4603      	mov	r3, r0
 80102fa:	461a      	mov	r2, r3
 80102fc:	4b15      	ldr	r3, [pc, #84]	; (8010354 <USBD_CDC_ReceivePacket+0x88>)
 80102fe:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	33b2      	adds	r3, #178	; 0xb2
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	4413      	add	r3, r2
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d101      	bne.n	8010318 <USBD_CDC_ReceivePacket+0x4c>
  {
    return (uint8_t)USBD_FAIL;
 8010314:	2303      	movs	r3, #3
 8010316:	e018      	b.n	801034a <USBD_CDC_ReceivePacket+0x7e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	7c1b      	ldrb	r3, [r3, #16]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d10a      	bne.n	8010336 <USBD_CDC_ReceivePacket+0x6a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010320:	4b0c      	ldr	r3, [pc, #48]	; (8010354 <USBD_CDC_ReceivePacket+0x88>)
 8010322:	7819      	ldrb	r1, [r3, #0]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801032a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f008 fe61 	bl	8018ff6 <USBD_LL_PrepareReceive>
 8010334:	e008      	b.n	8010348 <USBD_CDC_ReceivePacket+0x7c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010336:	4b07      	ldr	r3, [pc, #28]	; (8010354 <USBD_CDC_ReceivePacket+0x88>)
 8010338:	7819      	ldrb	r1, [r3, #0]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010340:	2340      	movs	r3, #64	; 0x40
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f008 fe57 	bl	8018ff6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010348:	2300      	movs	r3, #0
}
 801034a:	4618      	mov	r0, r3
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	2400005d 	.word	0x2400005d

08010358 <USBD_CMPSIT_AddClass>:
  */
uint8_t  USBD_CMPSIT_AddClass(USBD_HandleTypeDef *pdev,
                              USBD_ClassTypeDef *pclass,
                              USBD_CompositeClassTypeDef class,
                              uint8_t cfgidx)
{
 8010358:	b480      	push	{r7}
 801035a:	b085      	sub	sp, #20
 801035c:	af00      	add	r7, sp, #0
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	60b9      	str	r1, [r7, #8]
 8010362:	4611      	mov	r1, r2
 8010364:	461a      	mov	r2, r3
 8010366:	460b      	mov	r3, r1
 8010368:	71fb      	strb	r3, [r7, #7]
 801036a:	4613      	mov	r3, r2
 801036c:	71bb      	strb	r3, [r7, #6]
	switch(class)
 801036e:	79fb      	ldrb	r3, [r7, #7]
 8010370:	2b02      	cmp	r3, #2
 8010372:	d003      	beq.n	801037c <USBD_CMPSIT_AddClass+0x24>
 8010374:	2b03      	cmp	r3, #3
 8010376:	f000 80ec 	beq.w	8010552 <USBD_CMPSIT_AddClass+0x1fa>

			pdev->tclasslist[pdev->classId].NumIf = 1;
			pdev->tclasslist[pdev->classId].Ifs[0] = 2;

		}break;
		default:break;
 801037a:	e194      	b.n	80106a6 <USBD_CMPSIT_AddClass+0x34e>
			pdev->tclasslist[pdev->classId].ClassType = CLASS_TYPE_CDC;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010382:	68f9      	ldr	r1, [r7, #12]
 8010384:	4613      	mov	r3, r2
 8010386:	00db      	lsls	r3, r3, #3
 8010388:	1a9b      	subs	r3, r3, r2
 801038a:	00db      	lsls	r3, r3, #3
 801038c:	440b      	add	r3, r1
 801038e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8010392:	2202      	movs	r2, #2
 8010394:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Active = 1U;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801039c:	68f9      	ldr	r1, [r7, #12]
 801039e:	4613      	mov	r3, r2
 80103a0:	00db      	lsls	r3, r3, #3
 80103a2:	1a9b      	subs	r3, r3, r2
 80103a4:	00db      	lsls	r3, r3, #3
 80103a6:	440b      	add	r3, r1
 80103a8:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80103ac:	2201      	movs	r2, #1
 80103ae:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumEps = 3;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80103b6:	68f9      	ldr	r1, [r7, #12]
 80103b8:	4613      	mov	r3, r2
 80103ba:	00db      	lsls	r3, r3, #3
 80103bc:	1a9b      	subs	r3, r3, r2
 80103be:	00db      	lsls	r3, r3, #3
 80103c0:	440b      	add	r3, r1
 80103c2:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80103c6:	2203      	movs	r2, #3
 80103c8:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].add = CDC_CMD_EP;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80103d0:	68f9      	ldr	r1, [r7, #12]
 80103d2:	4613      	mov	r3, r2
 80103d4:	00db      	lsls	r3, r3, #3
 80103d6:	1a9b      	subs	r3, r3, r2
 80103d8:	00db      	lsls	r3, r3, #3
 80103da:	440b      	add	r3, r1
 80103dc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80103e0:	2282      	movs	r2, #130	; 0x82
 80103e2:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].type = USBD_EP_TYPE_INTR;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80103ea:	68f9      	ldr	r1, [r7, #12]
 80103ec:	4613      	mov	r3, r2
 80103ee:	00db      	lsls	r3, r3, #3
 80103f0:	1a9b      	subs	r3, r3, r2
 80103f2:	00db      	lsls	r3, r3, #3
 80103f4:	440b      	add	r3, r1
 80103f6:	f203 3311 	addw	r3, r3, #785	; 0x311
 80103fa:	2203      	movs	r2, #3
 80103fc:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].size = CDC_CMD_PACKET_SIZE;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010404:	68f9      	ldr	r1, [r7, #12]
 8010406:	4613      	mov	r3, r2
 8010408:	00db      	lsls	r3, r3, #3
 801040a:	1a9b      	subs	r3, r3, r2
 801040c:	00db      	lsls	r3, r3, #3
 801040e:	440b      	add	r3, r1
 8010410:	f203 3312 	addw	r3, r3, #786	; 0x312
 8010414:	2208      	movs	r2, #8
 8010416:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].is_used = 1U;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801041e:	68f9      	ldr	r1, [r7, #12]
 8010420:	4613      	mov	r3, r2
 8010422:	00db      	lsls	r3, r3, #3
 8010424:	1a9b      	subs	r3, r3, r2
 8010426:	00db      	lsls	r3, r3, #3
 8010428:	440b      	add	r3, r1
 801042a:	f203 3313 	addw	r3, r3, #787	; 0x313
 801042e:	2201      	movs	r2, #1
 8010430:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].add = CDC_OUT_EP;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010438:	68f9      	ldr	r1, [r7, #12]
 801043a:	4613      	mov	r3, r2
 801043c:	00db      	lsls	r3, r3, #3
 801043e:	1a9b      	subs	r3, r3, r2
 8010440:	00db      	lsls	r3, r3, #3
 8010442:	440b      	add	r3, r1
 8010444:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8010448:	2201      	movs	r2, #1
 801044a:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].type = USBD_EP_TYPE_BULK;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010452:	68f9      	ldr	r1, [r7, #12]
 8010454:	4613      	mov	r3, r2
 8010456:	00db      	lsls	r3, r3, #3
 8010458:	1a9b      	subs	r3, r3, r2
 801045a:	00db      	lsls	r3, r3, #3
 801045c:	440b      	add	r3, r1
 801045e:	f203 3315 	addw	r3, r3, #789	; 0x315
 8010462:	2202      	movs	r2, #2
 8010464:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].size = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801046c:	68f9      	ldr	r1, [r7, #12]
 801046e:	4613      	mov	r3, r2
 8010470:	00db      	lsls	r3, r3, #3
 8010472:	1a9b      	subs	r3, r3, r2
 8010474:	00db      	lsls	r3, r3, #3
 8010476:	440b      	add	r3, r1
 8010478:	f203 3316 	addw	r3, r3, #790	; 0x316
 801047c:	2240      	movs	r2, #64	; 0x40
 801047e:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].is_used = 1U;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010486:	68f9      	ldr	r1, [r7, #12]
 8010488:	4613      	mov	r3, r2
 801048a:	00db      	lsls	r3, r3, #3
 801048c:	1a9b      	subs	r3, r3, r2
 801048e:	00db      	lsls	r3, r3, #3
 8010490:	440b      	add	r3, r1
 8010492:	f203 3317 	addw	r3, r3, #791	; 0x317
 8010496:	2201      	movs	r2, #1
 8010498:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].add = CDC_IN_EP;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80104a0:	68f9      	ldr	r1, [r7, #12]
 80104a2:	4613      	mov	r3, r2
 80104a4:	00db      	lsls	r3, r3, #3
 80104a6:	1a9b      	subs	r3, r3, r2
 80104a8:	00db      	lsls	r3, r3, #3
 80104aa:	440b      	add	r3, r1
 80104ac:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80104b0:	2281      	movs	r2, #129	; 0x81
 80104b2:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].type = USBD_EP_TYPE_BULK;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80104ba:	68f9      	ldr	r1, [r7, #12]
 80104bc:	4613      	mov	r3, r2
 80104be:	00db      	lsls	r3, r3, #3
 80104c0:	1a9b      	subs	r3, r3, r2
 80104c2:	00db      	lsls	r3, r3, #3
 80104c4:	440b      	add	r3, r1
 80104c6:	f203 3319 	addw	r3, r3, #793	; 0x319
 80104ca:	2202      	movs	r2, #2
 80104cc:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].size = CDC_DATA_FS_MAX_PACKET_SIZE;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80104d4:	68f9      	ldr	r1, [r7, #12]
 80104d6:	4613      	mov	r3, r2
 80104d8:	00db      	lsls	r3, r3, #3
 80104da:	1a9b      	subs	r3, r3, r2
 80104dc:	00db      	lsls	r3, r3, #3
 80104de:	440b      	add	r3, r1
 80104e0:	f203 331a 	addw	r3, r3, #794	; 0x31a
 80104e4:	2240      	movs	r2, #64	; 0x40
 80104e6:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].is_used = 1U;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80104ee:	68f9      	ldr	r1, [r7, #12]
 80104f0:	4613      	mov	r3, r2
 80104f2:	00db      	lsls	r3, r3, #3
 80104f4:	1a9b      	subs	r3, r3, r2
 80104f6:	00db      	lsls	r3, r3, #3
 80104f8:	440b      	add	r3, r1
 80104fa:	f203 331b 	addw	r3, r3, #795	; 0x31b
 80104fe:	2201      	movs	r2, #1
 8010500:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumIf = 2;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010508:	68f9      	ldr	r1, [r7, #12]
 801050a:	4613      	mov	r3, r2
 801050c:	00db      	lsls	r3, r3, #3
 801050e:	1a9b      	subs	r3, r3, r2
 8010510:	00db      	lsls	r3, r3, #3
 8010512:	440b      	add	r3, r1
 8010514:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8010518:	2202      	movs	r2, #2
 801051a:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[0] = 0;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010522:	68f9      	ldr	r1, [r7, #12]
 8010524:	4613      	mov	r3, r2
 8010526:	00db      	lsls	r3, r3, #3
 8010528:	1a9b      	subs	r3, r3, r2
 801052a:	00db      	lsls	r3, r3, #3
 801052c:	440b      	add	r3, r1
 801052e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010532:	2200      	movs	r2, #0
 8010534:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[1] = 1;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801053c:	68f9      	ldr	r1, [r7, #12]
 801053e:	4613      	mov	r3, r2
 8010540:	00db      	lsls	r3, r3, #3
 8010542:	1a9b      	subs	r3, r3, r2
 8010544:	00db      	lsls	r3, r3, #3
 8010546:	440b      	add	r3, r1
 8010548:	f203 332d 	addw	r3, r3, #813	; 0x32d
 801054c:	2201      	movs	r2, #1
 801054e:	701a      	strb	r2, [r3, #0]
		}break;
 8010550:	e0a9      	b.n	80106a6 <USBD_CMPSIT_AddClass+0x34e>
			pdev->tclasslist[pdev->classId].ClassType = CLASS_TYPE_MSC;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010558:	68f9      	ldr	r1, [r7, #12]
 801055a:	4613      	mov	r3, r2
 801055c:	00db      	lsls	r3, r3, #3
 801055e:	1a9b      	subs	r3, r3, r2
 8010560:	00db      	lsls	r3, r3, #3
 8010562:	440b      	add	r3, r1
 8010564:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8010568:	2203      	movs	r2, #3
 801056a:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Active = 1U;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010572:	68f9      	ldr	r1, [r7, #12]
 8010574:	4613      	mov	r3, r2
 8010576:	00db      	lsls	r3, r3, #3
 8010578:	1a9b      	subs	r3, r3, r2
 801057a:	00db      	lsls	r3, r3, #3
 801057c:	440b      	add	r3, r1
 801057e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010582:	2201      	movs	r2, #1
 8010584:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumEps = 2;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801058c:	68f9      	ldr	r1, [r7, #12]
 801058e:	4613      	mov	r3, r2
 8010590:	00db      	lsls	r3, r3, #3
 8010592:	1a9b      	subs	r3, r3, r2
 8010594:	00db      	lsls	r3, r3, #3
 8010596:	440b      	add	r3, r1
 8010598:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 801059c:	2202      	movs	r2, #2
 801059e:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].add = MSC_EPIN_ADDR;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80105a6:	68f9      	ldr	r1, [r7, #12]
 80105a8:	4613      	mov	r3, r2
 80105aa:	00db      	lsls	r3, r3, #3
 80105ac:	1a9b      	subs	r3, r3, r2
 80105ae:	00db      	lsls	r3, r3, #3
 80105b0:	440b      	add	r3, r1
 80105b2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80105b6:	2283      	movs	r2, #131	; 0x83
 80105b8:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].type = USBD_EP_TYPE_BULK;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80105c0:	68f9      	ldr	r1, [r7, #12]
 80105c2:	4613      	mov	r3, r2
 80105c4:	00db      	lsls	r3, r3, #3
 80105c6:	1a9b      	subs	r3, r3, r2
 80105c8:	00db      	lsls	r3, r3, #3
 80105ca:	440b      	add	r3, r1
 80105cc:	f203 3311 	addw	r3, r3, #785	; 0x311
 80105d0:	2202      	movs	r2, #2
 80105d2:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].size = MSC_MAX_FS_PACKET;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80105da:	68f9      	ldr	r1, [r7, #12]
 80105dc:	4613      	mov	r3, r2
 80105de:	00db      	lsls	r3, r3, #3
 80105e0:	1a9b      	subs	r3, r3, r2
 80105e2:	00db      	lsls	r3, r3, #3
 80105e4:	440b      	add	r3, r1
 80105e6:	f203 3312 	addw	r3, r3, #786	; 0x312
 80105ea:	2240      	movs	r2, #64	; 0x40
 80105ec:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].is_used = 1U;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80105f4:	68f9      	ldr	r1, [r7, #12]
 80105f6:	4613      	mov	r3, r2
 80105f8:	00db      	lsls	r3, r3, #3
 80105fa:	1a9b      	subs	r3, r3, r2
 80105fc:	00db      	lsls	r3, r3, #3
 80105fe:	440b      	add	r3, r1
 8010600:	f203 3313 	addw	r3, r3, #787	; 0x313
 8010604:	2201      	movs	r2, #1
 8010606:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].add = MSC_EPOUT_ADDR;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801060e:	68f9      	ldr	r1, [r7, #12]
 8010610:	4613      	mov	r3, r2
 8010612:	00db      	lsls	r3, r3, #3
 8010614:	1a9b      	subs	r3, r3, r2
 8010616:	00db      	lsls	r3, r3, #3
 8010618:	440b      	add	r3, r1
 801061a:	f503 7345 	add.w	r3, r3, #788	; 0x314
 801061e:	2203      	movs	r2, #3
 8010620:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].type = USBD_EP_TYPE_BULK;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010628:	68f9      	ldr	r1, [r7, #12]
 801062a:	4613      	mov	r3, r2
 801062c:	00db      	lsls	r3, r3, #3
 801062e:	1a9b      	subs	r3, r3, r2
 8010630:	00db      	lsls	r3, r3, #3
 8010632:	440b      	add	r3, r1
 8010634:	f203 3315 	addw	r3, r3, #789	; 0x315
 8010638:	2202      	movs	r2, #2
 801063a:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].size = MSC_MAX_FS_PACKET;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010642:	68f9      	ldr	r1, [r7, #12]
 8010644:	4613      	mov	r3, r2
 8010646:	00db      	lsls	r3, r3, #3
 8010648:	1a9b      	subs	r3, r3, r2
 801064a:	00db      	lsls	r3, r3, #3
 801064c:	440b      	add	r3, r1
 801064e:	f203 3316 	addw	r3, r3, #790	; 0x316
 8010652:	2240      	movs	r2, #64	; 0x40
 8010654:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].is_used = 1U;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801065c:	68f9      	ldr	r1, [r7, #12]
 801065e:	4613      	mov	r3, r2
 8010660:	00db      	lsls	r3, r3, #3
 8010662:	1a9b      	subs	r3, r3, r2
 8010664:	00db      	lsls	r3, r3, #3
 8010666:	440b      	add	r3, r1
 8010668:	f203 3317 	addw	r3, r3, #791	; 0x317
 801066c:	2201      	movs	r2, #1
 801066e:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumIf = 1;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010676:	68f9      	ldr	r1, [r7, #12]
 8010678:	4613      	mov	r3, r2
 801067a:	00db      	lsls	r3, r3, #3
 801067c:	1a9b      	subs	r3, r3, r2
 801067e:	00db      	lsls	r3, r3, #3
 8010680:	440b      	add	r3, r1
 8010682:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8010686:	2201      	movs	r2, #1
 8010688:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[0] = 2;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010690:	68f9      	ldr	r1, [r7, #12]
 8010692:	4613      	mov	r3, r2
 8010694:	00db      	lsls	r3, r3, #3
 8010696:	1a9b      	subs	r3, r3, r2
 8010698:	00db      	lsls	r3, r3, #3
 801069a:	440b      	add	r3, r1
 801069c:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80106a0:	2202      	movs	r2, #2
 80106a2:	701a      	strb	r2, [r3, #0]
		}break;
 80106a4:	bf00      	nop
	}
	pdev->tclasslist[pdev->classId].CurrPcktSze = 0U;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80106ac:	68f9      	ldr	r1, [r7, #12]
 80106ae:	4613      	mov	r3, r2
 80106b0:	00db      	lsls	r3, r3, #3
 80106b2:	1a9b      	subs	r3, r3, r2
 80106b4:	00db      	lsls	r3, r3, #3
 80106b6:	440b      	add	r3, r1
 80106b8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80106bc:	2200      	movs	r2, #0
 80106be:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3714      	adds	r7, #20
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr
	...

080106d0 <USBD_CMPSIT_GetFSCfgDesc>:
  *         return configuration descriptor for both FS and HS modes
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetFSCfgDesc(uint16_t *length)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b083      	sub	sp, #12
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 80106d8:	4b05      	ldr	r3, [pc, #20]	; (80106f0 <USBD_CMPSIT_GetFSCfgDesc+0x20>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	b29a      	uxth	r2, r3
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_FSCfgDesc;
 80106e2:	4b04      	ldr	r3, [pc, #16]	; (80106f4 <USBD_CMPSIT_GetFSCfgDesc+0x24>)
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	370c      	adds	r7, #12
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr
 80106f0:	24000104 	.word	0x24000104
 80106f4:	24000098 	.word	0x24000098

080106f8 <USBD_CMPSIT_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8010700:	4b05      	ldr	r3, [pc, #20]	; (8010718 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x20>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	b29a      	uxth	r2, r3
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_FSCfgDesc;
 801070a:	4b04      	ldr	r3, [pc, #16]	; (801071c <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x24>)
}
 801070c:	4618      	mov	r0, r3
 801070e:	370c      	adds	r7, #12
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr
 8010718:	24000104 	.word	0x24000104
 801071c:	24000098 	.word	0x24000098

08010720 <USBD_CMPSIT_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)(sizeof(USBD_CMPSIT_DeviceQualifierDesc));
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	220a      	movs	r2, #10
 801072c:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_DeviceQualifierDesc;
 801072e:	4b03      	ldr	r3, [pc, #12]	; (801073c <USBD_CMPSIT_GetDeviceQualifierDescriptor+0x1c>)
}
 8010730:	4618      	mov	r0, r3
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr
 801073c:	24000108 	.word	0x24000108

08010740 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	460b      	mov	r3, r1
 801074a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801074c:	f248 0074 	movw	r0, #32884	; 0x8074
 8010750:	f00a f99a 	bl	801aa88 <malloc>
 8010754:	4603      	mov	r3, r0
 8010756:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d10a      	bne.n	8010774 <USBD_MSC_Init+0x34>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	33b2      	adds	r3, #178	; 0xb2
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	4413      	add	r3, r2
 801076c:	2200      	movs	r2, #0
 801076e:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 8010770:	2302      	movs	r3, #2
 8010772:	e08a      	b.n	801088a <USBD_MSC_Init+0x14a>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801077a:	687a      	ldr	r2, [r7, #4]
 801077c:	33b2      	adds	r3, #178	; 0xb2
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	4413      	add	r3, r2
 8010782:	68fa      	ldr	r2, [r7, #12]
 8010784:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801078c:	687a      	ldr	r2, [r7, #4]
 801078e:	33b2      	adds	r3, #178	; 0xb2
 8010790:	009b      	lsls	r3, r3, #2
 8010792:	4413      	add	r3, r2
 8010794:	685a      	ldr	r2, [r3, #4]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80107a2:	b2db      	uxtb	r3, r3
 80107a4:	2202      	movs	r2, #2
 80107a6:	2180      	movs	r1, #128	; 0x80
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f002 fe72 	bl	8013492 <USBD_CoreGetEPAdd>
 80107ae:	4603      	mov	r3, r0
 80107b0:	461a      	mov	r2, r3
 80107b2:	4b38      	ldr	r3, [pc, #224]	; (8010894 <USBD_MSC_Init+0x154>)
 80107b4:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	2202      	movs	r2, #2
 80107c0:	2100      	movs	r1, #0
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f002 fe65 	bl	8013492 <USBD_CoreGetEPAdd>
 80107c8:	4603      	mov	r3, r0
 80107ca:	461a      	mov	r2, r3
 80107cc:	4b32      	ldr	r3, [pc, #200]	; (8010898 <USBD_MSC_Init+0x158>)
 80107ce:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	7c1b      	ldrb	r3, [r3, #16]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d12b      	bne.n	8010830 <USBD_MSC_Init+0xf0>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80107d8:	4b2f      	ldr	r3, [pc, #188]	; (8010898 <USBD_MSC_Init+0x158>)
 80107da:	7819      	ldrb	r1, [r3, #0]
 80107dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107e0:	2202      	movs	r2, #2
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f008 faf9 	bl	8018dda <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80107e8:	4b2b      	ldr	r3, [pc, #172]	; (8010898 <USBD_MSC_Init+0x158>)
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	f003 020f 	and.w	r2, r3, #15
 80107f0:	6879      	ldr	r1, [r7, #4]
 80107f2:	4613      	mov	r3, r2
 80107f4:	009b      	lsls	r3, r3, #2
 80107f6:	4413      	add	r3, r2
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	440b      	add	r3, r1
 80107fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010800:	2201      	movs	r2, #1
 8010802:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8010804:	4b23      	ldr	r3, [pc, #140]	; (8010894 <USBD_MSC_Init+0x154>)
 8010806:	7819      	ldrb	r1, [r3, #0]
 8010808:	f44f 7300 	mov.w	r3, #512	; 0x200
 801080c:	2202      	movs	r2, #2
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f008 fae3 	bl	8018dda <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8010814:	4b1f      	ldr	r3, [pc, #124]	; (8010894 <USBD_MSC_Init+0x154>)
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	f003 020f 	and.w	r2, r3, #15
 801081c:	6879      	ldr	r1, [r7, #4]
 801081e:	4613      	mov	r3, r2
 8010820:	009b      	lsls	r3, r3, #2
 8010822:	4413      	add	r3, r2
 8010824:	009b      	lsls	r3, r3, #2
 8010826:	440b      	add	r3, r1
 8010828:	3324      	adds	r3, #36	; 0x24
 801082a:	2201      	movs	r2, #1
 801082c:	801a      	strh	r2, [r3, #0]
 801082e:	e028      	b.n	8010882 <USBD_MSC_Init+0x142>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010830:	4b19      	ldr	r3, [pc, #100]	; (8010898 <USBD_MSC_Init+0x158>)
 8010832:	7819      	ldrb	r1, [r3, #0]
 8010834:	2340      	movs	r3, #64	; 0x40
 8010836:	2202      	movs	r2, #2
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f008 face 	bl	8018dda <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801083e:	4b16      	ldr	r3, [pc, #88]	; (8010898 <USBD_MSC_Init+0x158>)
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	f003 020f 	and.w	r2, r3, #15
 8010846:	6879      	ldr	r1, [r7, #4]
 8010848:	4613      	mov	r3, r2
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	4413      	add	r3, r2
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	440b      	add	r3, r1
 8010852:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010856:	2201      	movs	r2, #1
 8010858:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801085a:	4b0e      	ldr	r3, [pc, #56]	; (8010894 <USBD_MSC_Init+0x154>)
 801085c:	7819      	ldrb	r1, [r3, #0]
 801085e:	2340      	movs	r3, #64	; 0x40
 8010860:	2202      	movs	r2, #2
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f008 fab9 	bl	8018dda <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8010868:	4b0a      	ldr	r3, [pc, #40]	; (8010894 <USBD_MSC_Init+0x154>)
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	f003 020f 	and.w	r2, r3, #15
 8010870:	6879      	ldr	r1, [r7, #4]
 8010872:	4613      	mov	r3, r2
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4413      	add	r3, r2
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	440b      	add	r3, r1
 801087c:	3324      	adds	r3, #36	; 0x24
 801087e:	2201      	movs	r2, #1
 8010880:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f000 f9d4 	bl	8010c30 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	3710      	adds	r7, #16
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
 8010892:	bf00      	nop
 8010894:	2400014c 	.word	0x2400014c
 8010898:	2400014d 	.word	0x2400014d

0801089c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	460b      	mov	r3, r1
 80108a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	2202      	movs	r2, #2
 80108b2:	2180      	movs	r1, #128	; 0x80
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f002 fdec 	bl	8013492 <USBD_CoreGetEPAdd>
 80108ba:	4603      	mov	r3, r0
 80108bc:	461a      	mov	r2, r3
 80108be:	4b30      	ldr	r3, [pc, #192]	; (8010980 <USBD_MSC_DeInit+0xe4>)
 80108c0:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2202      	movs	r2, #2
 80108cc:	2100      	movs	r1, #0
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f002 fddf 	bl	8013492 <USBD_CoreGetEPAdd>
 80108d4:	4603      	mov	r3, r0
 80108d6:	461a      	mov	r2, r3
 80108d8:	4b2a      	ldr	r3, [pc, #168]	; (8010984 <USBD_MSC_DeInit+0xe8>)
 80108da:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80108dc:	4b29      	ldr	r3, [pc, #164]	; (8010984 <USBD_MSC_DeInit+0xe8>)
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	4619      	mov	r1, r3
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f008 fa9f 	bl	8018e26 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80108e8:	4b26      	ldr	r3, [pc, #152]	; (8010984 <USBD_MSC_DeInit+0xe8>)
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	f003 020f 	and.w	r2, r3, #15
 80108f0:	6879      	ldr	r1, [r7, #4]
 80108f2:	4613      	mov	r3, r2
 80108f4:	009b      	lsls	r3, r3, #2
 80108f6:	4413      	add	r3, r2
 80108f8:	009b      	lsls	r3, r3, #2
 80108fa:	440b      	add	r3, r1
 80108fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010900:	2200      	movs	r2, #0
 8010902:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8010904:	4b1e      	ldr	r3, [pc, #120]	; (8010980 <USBD_MSC_DeInit+0xe4>)
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	4619      	mov	r1, r3
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f008 fa8b 	bl	8018e26 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8010910:	4b1b      	ldr	r3, [pc, #108]	; (8010980 <USBD_MSC_DeInit+0xe4>)
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	f003 020f 	and.w	r2, r3, #15
 8010918:	6879      	ldr	r1, [r7, #4]
 801091a:	4613      	mov	r3, r2
 801091c:	009b      	lsls	r3, r3, #2
 801091e:	4413      	add	r3, r2
 8010920:	009b      	lsls	r3, r3, #2
 8010922:	440b      	add	r3, r1
 8010924:	3324      	adds	r3, #36	; 0x24
 8010926:	2200      	movs	r2, #0
 8010928:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	33b2      	adds	r3, #178	; 0xb2
 8010934:	009b      	lsls	r3, r3, #2
 8010936:	4413      	add	r3, r2
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d01a      	beq.n	8010974 <USBD_MSC_DeInit+0xd8>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f000 fa32 	bl	8010da8 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	33b2      	adds	r3, #178	; 0xb2
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	4413      	add	r3, r2
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	4618      	mov	r0, r3
 8010956:	f00a f89f 	bl	801aa98 <free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	33b2      	adds	r3, #178	; 0xb2
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	4413      	add	r3, r2
 8010968:	2200      	movs	r2, #0
 801096a:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  }

  return (uint8_t)USBD_OK;
 8010974:	2300      	movs	r3, #0
}
 8010976:	4618      	mov	r0, r3
 8010978:	3708      	adds	r7, #8
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	2400014c 	.word	0x2400014c
 8010984:	2400014d 	.word	0x2400014d

08010988 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b086      	sub	sp, #24
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	33b2      	adds	r3, #178	; 0xb2
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	4413      	add	r3, r2
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80109a4:	2300      	movs	r3, #0
 80109a6:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80109a8:	2300      	movs	r3, #0
 80109aa:	81fb      	strh	r3, [r7, #14]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	2202      	movs	r2, #2
 80109b6:	2180      	movs	r1, #128	; 0x80
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f002 fd6a 	bl	8013492 <USBD_CoreGetEPAdd>
 80109be:	4603      	mov	r3, r0
 80109c0:	461a      	mov	r2, r3
 80109c2:	4b7c      	ldr	r3, [pc, #496]	; (8010bb4 <USBD_MSC_Setup+0x22c>)
 80109c4:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	2202      	movs	r2, #2
 80109d0:	2100      	movs	r1, #0
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f002 fd5d 	bl	8013492 <USBD_CoreGetEPAdd>
 80109d8:	4603      	mov	r3, r0
 80109da:	461a      	mov	r2, r3
 80109dc:	4b76      	ldr	r3, [pc, #472]	; (8010bb8 <USBD_MSC_Setup+0x230>)
 80109de:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d101      	bne.n	80109ea <USBD_MSC_Setup+0x62>
  {
    return (uint8_t)USBD_FAIL;
 80109e6:	2303      	movs	r3, #3
 80109e8:	e0e0      	b.n	8010bac <USBD_MSC_Setup+0x224>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d053      	beq.n	8010a9e <USBD_MSC_Setup+0x116>
 80109f6:	2b20      	cmp	r3, #32
 80109f8:	f040 80d0 	bne.w	8010b9c <USBD_MSC_Setup+0x214>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	785b      	ldrb	r3, [r3, #1]
 8010a00:	2bfe      	cmp	r3, #254	; 0xfe
 8010a02:	d002      	beq.n	8010a0a <USBD_MSC_Setup+0x82>
 8010a04:	2bff      	cmp	r3, #255	; 0xff
 8010a06:	d02a      	beq.n	8010a5e <USBD_MSC_Setup+0xd6>
 8010a08:	e041      	b.n	8010a8e <USBD_MSC_Setup+0x106>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	885b      	ldrh	r3, [r3, #2]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d11e      	bne.n	8010a50 <USBD_MSC_Setup+0xc8>
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	88db      	ldrh	r3, [r3, #6]
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d11a      	bne.n	8010a50 <USBD_MSC_Setup+0xc8>
              ((req->bmRequest & 0x80U) == 0x80U))
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	da15      	bge.n	8010a50 <USBD_MSC_Setup+0xc8>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010a2a:	687a      	ldr	r2, [r7, #4]
 8010a2c:	33b6      	adds	r3, #182	; 0xb6
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	4413      	add	r3, r2
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	699b      	ldr	r3, [r3, #24]
 8010a36:	4798      	blx	r3
 8010a38:	4603      	mov	r3, r0
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	2201      	movs	r2, #1
 8010a44:	4619      	mov	r1, r3
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f003 fc3a 	bl	80142c0 <USBD_CtlSendData>
 8010a4c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010a4e:	e025      	b.n	8010a9c <USBD_MSC_Setup+0x114>
            USBD_CtlError(pdev, req);
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f003 fbc3 	bl	80141de <USBD_CtlError>
            ret = USBD_FAIL;
 8010a58:	2303      	movs	r3, #3
 8010a5a:	75fb      	strb	r3, [r7, #23]
          break;
 8010a5c:	e01e      	b.n	8010a9c <USBD_MSC_Setup+0x114>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	885b      	ldrh	r3, [r3, #2]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d10c      	bne.n	8010a80 <USBD_MSC_Setup+0xf8>
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	88db      	ldrh	r3, [r3, #6]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d108      	bne.n	8010a80 <USBD_MSC_Setup+0xf8>
              ((req->bmRequest & 0x80U) != 0x80U))
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	db03      	blt.n	8010a80 <USBD_MSC_Setup+0xf8>
          {
            MSC_BOT_Reset(pdev);
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 f945 	bl	8010d08 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010a7e:	e00d      	b.n	8010a9c <USBD_MSC_Setup+0x114>
            USBD_CtlError(pdev, req);
 8010a80:	6839      	ldr	r1, [r7, #0]
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f003 fbab 	bl	80141de <USBD_CtlError>
            ret = USBD_FAIL;
 8010a88:	2303      	movs	r3, #3
 8010a8a:	75fb      	strb	r3, [r7, #23]
          break;
 8010a8c:	e006      	b.n	8010a9c <USBD_MSC_Setup+0x114>

        default:
          USBD_CtlError(pdev, req);
 8010a8e:	6839      	ldr	r1, [r7, #0]
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f003 fba4 	bl	80141de <USBD_CtlError>
          ret = USBD_FAIL;
 8010a96:	2303      	movs	r3, #3
 8010a98:	75fb      	strb	r3, [r7, #23]
          break;
 8010a9a:	bf00      	nop
      }
      break;
 8010a9c:	e085      	b.n	8010baa <USBD_MSC_Setup+0x222>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	785b      	ldrb	r3, [r3, #1]
 8010aa2:	2b0b      	cmp	r3, #11
 8010aa4:	d871      	bhi.n	8010b8a <USBD_MSC_Setup+0x202>
 8010aa6:	a201      	add	r2, pc, #4	; (adr r2, 8010aac <USBD_MSC_Setup+0x124>)
 8010aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aac:	08010add 	.word	0x08010add
 8010ab0:	08010b59 	.word	0x08010b59
 8010ab4:	08010b8b 	.word	0x08010b8b
 8010ab8:	08010b8b 	.word	0x08010b8b
 8010abc:	08010b8b 	.word	0x08010b8b
 8010ac0:	08010b8b 	.word	0x08010b8b
 8010ac4:	08010b8b 	.word	0x08010b8b
 8010ac8:	08010b8b 	.word	0x08010b8b
 8010acc:	08010b8b 	.word	0x08010b8b
 8010ad0:	08010b8b 	.word	0x08010b8b
 8010ad4:	08010b07 	.word	0x08010b07
 8010ad8:	08010b31 	.word	0x08010b31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	2b03      	cmp	r3, #3
 8010ae6:	d107      	bne.n	8010af8 <USBD_MSC_Setup+0x170>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010ae8:	f107 030e 	add.w	r3, r7, #14
 8010aec:	2202      	movs	r2, #2
 8010aee:	4619      	mov	r1, r3
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f003 fbe5 	bl	80142c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010af6:	e050      	b.n	8010b9a <USBD_MSC_Setup+0x212>
            USBD_CtlError(pdev, req);
 8010af8:	6839      	ldr	r1, [r7, #0]
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f003 fb6f 	bl	80141de <USBD_CtlError>
            ret = USBD_FAIL;
 8010b00:	2303      	movs	r3, #3
 8010b02:	75fb      	strb	r3, [r7, #23]
          break;
 8010b04:	e049      	b.n	8010b9a <USBD_MSC_Setup+0x212>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	2b03      	cmp	r3, #3
 8010b10:	d107      	bne.n	8010b22 <USBD_MSC_Setup+0x19a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	3304      	adds	r3, #4
 8010b16:	2201      	movs	r2, #1
 8010b18:	4619      	mov	r1, r3
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f003 fbd0 	bl	80142c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b20:	e03b      	b.n	8010b9a <USBD_MSC_Setup+0x212>
            USBD_CtlError(pdev, req);
 8010b22:	6839      	ldr	r1, [r7, #0]
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f003 fb5a 	bl	80141de <USBD_CtlError>
            ret = USBD_FAIL;
 8010b2a:	2303      	movs	r3, #3
 8010b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8010b2e:	e034      	b.n	8010b9a <USBD_MSC_Setup+0x212>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	2b03      	cmp	r3, #3
 8010b3a:	d106      	bne.n	8010b4a <USBD_MSC_Setup+0x1c2>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	885b      	ldrh	r3, [r3, #2]
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	461a      	mov	r2, r3
 8010b44:	693b      	ldr	r3, [r7, #16]
 8010b46:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b48:	e027      	b.n	8010b9a <USBD_MSC_Setup+0x212>
            USBD_CtlError(pdev, req);
 8010b4a:	6839      	ldr	r1, [r7, #0]
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f003 fb46 	bl	80141de <USBD_CtlError>
            ret = USBD_FAIL;
 8010b52:	2303      	movs	r3, #3
 8010b54:	75fb      	strb	r3, [r7, #23]
          break;
 8010b56:	e020      	b.n	8010b9a <USBD_MSC_Setup+0x212>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	2b03      	cmp	r3, #3
 8010b62:	d119      	bne.n	8010b98 <USBD_MSC_Setup+0x210>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	885b      	ldrh	r3, [r3, #2]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d115      	bne.n	8010b98 <USBD_MSC_Setup+0x210>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	889b      	ldrh	r3, [r3, #4]
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	4619      	mov	r1, r3
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f008 f975 	bl	8018e64 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	889b      	ldrh	r3, [r3, #4]
 8010b7e:	b2db      	uxtb	r3, r3
 8010b80:	4619      	mov	r1, r3
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f000 fb6e 	bl	8011264 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8010b88:	e006      	b.n	8010b98 <USBD_MSC_Setup+0x210>

        default:
          USBD_CtlError(pdev, req);
 8010b8a:	6839      	ldr	r1, [r7, #0]
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f003 fb26 	bl	80141de <USBD_CtlError>
          ret = USBD_FAIL;
 8010b92:	2303      	movs	r3, #3
 8010b94:	75fb      	strb	r3, [r7, #23]
          break;
 8010b96:	e000      	b.n	8010b9a <USBD_MSC_Setup+0x212>
          break;
 8010b98:	bf00      	nop
      }
      break;
 8010b9a:	e006      	b.n	8010baa <USBD_MSC_Setup+0x222>

    default:
      USBD_CtlError(pdev, req);
 8010b9c:	6839      	ldr	r1, [r7, #0]
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f003 fb1d 	bl	80141de <USBD_CtlError>
      ret = USBD_FAIL;
 8010ba4:	2303      	movs	r3, #3
 8010ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8010ba8:	bf00      	nop
  }

  return (uint8_t)ret;
 8010baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3718      	adds	r7, #24
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	2400014c 	.word	0x2400014c
 8010bb8:	2400014d 	.word	0x2400014d

08010bbc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8010bc8:	78fb      	ldrb	r3, [r7, #3]
 8010bca:	4619      	mov	r1, r3
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 f904 	bl	8010dda <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8010bd2:	2300      	movs	r3, #0
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	460b      	mov	r3, r1
 8010be6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8010be8:	78fb      	ldrb	r3, [r7, #3]
 8010bea:	4619      	mov	r1, r3
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 f931 	bl	8010e54 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b083      	sub	sp, #12
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d101      	bne.n	8010c10 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010c0c:	2303      	movs	r3, #3
 8010c0e:	e009      	b.n	8010c24 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	33b6      	adds	r3, #182	; 0xb6
 8010c1a:	009b      	lsls	r3, r3, #2
 8010c1c:	4413      	add	r3, r2
 8010c1e:	683a      	ldr	r2, [r7, #0]
 8010c20:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010c22:	2300      	movs	r3, #0
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	33b2      	adds	r3, #178	; 0xb2
 8010c42:	009b      	lsls	r3, r3, #2
 8010c44:	4413      	add	r3, r2
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	2202      	movs	r2, #2
 8010c54:	2180      	movs	r1, #128	; 0x80
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f002 fc1b 	bl	8013492 <USBD_CoreGetEPAdd>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	461a      	mov	r2, r3
 8010c60:	4b27      	ldr	r3, [pc, #156]	; (8010d00 <MSC_BOT_Init+0xd0>)
 8010c62:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	2202      	movs	r2, #2
 8010c6e:	2100      	movs	r1, #0
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f002 fc0e 	bl	8013492 <USBD_CoreGetEPAdd>
 8010c76:	4603      	mov	r3, r0
 8010c78:	461a      	mov	r2, r3
 8010c7a:	4b22      	ldr	r3, [pc, #136]	; (8010d04 <MSC_BOT_Init+0xd4>)
 8010c7c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d039      	beq.n	8010cf8 <MSC_BOT_Init+0xc8>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2200      	movs	r2, #0
 8010c88:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010c96:	2200      	movs	r2, #0
 8010c98:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	33b6      	adds	r3, #182	; 0xb6
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	4413      	add	r3, r2
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2000      	movs	r0, #0
 8010cc8:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8010cca:	4b0e      	ldr	r3, [pc, #56]	; (8010d04 <MSC_BOT_Init+0xd4>)
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	4619      	mov	r1, r3
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f008 f8c7 	bl	8018e64 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8010cd6:	4b0a      	ldr	r3, [pc, #40]	; (8010d00 <MSC_BOT_Init+0xd0>)
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	4619      	mov	r1, r3
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f008 f8c1 	bl	8018e64 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8010ce2:	4b08      	ldr	r3, [pc, #32]	; (8010d04 <MSC_BOT_Init+0xd4>)
 8010ce4:	7819      	ldrb	r1, [r3, #0]
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f248 0210 	movw	r2, #32784	; 0x8010
 8010cec:	441a      	add	r2, r3
 8010cee:	231f      	movs	r3, #31
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f008 f980 	bl	8018ff6 <USBD_LL_PrepareReceive>
 8010cf6:	e000      	b.n	8010cfa <MSC_BOT_Init+0xca>
    return;
 8010cf8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010cfa:	3710      	adds	r7, #16
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	2400014c 	.word	0x2400014c
 8010d04:	2400014d 	.word	0x2400014d

08010d08 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b084      	sub	sp, #16
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	33b2      	adds	r3, #178	; 0xb2
 8010d1a:	009b      	lsls	r3, r3, #2
 8010d1c:	4413      	add	r3, r2
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	2202      	movs	r2, #2
 8010d2c:	2180      	movs	r1, #128	; 0x80
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f002 fbaf 	bl	8013492 <USBD_CoreGetEPAdd>
 8010d34:	4603      	mov	r3, r0
 8010d36:	461a      	mov	r2, r3
 8010d38:	4b19      	ldr	r3, [pc, #100]	; (8010da0 <MSC_BOT_Reset+0x98>)
 8010d3a:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	2202      	movs	r2, #2
 8010d46:	2100      	movs	r1, #0
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f002 fba2 	bl	8013492 <USBD_CoreGetEPAdd>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	461a      	mov	r2, r3
 8010d52:	4b14      	ldr	r3, [pc, #80]	; (8010da4 <MSC_BOT_Reset+0x9c>)
 8010d54:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d01c      	beq.n	8010d96 <MSC_BOT_Reset+0x8e>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2201      	movs	r2, #1
 8010d66:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8010d68:	4b0d      	ldr	r3, [pc, #52]	; (8010da0 <MSC_BOT_Reset+0x98>)
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f008 f8b6 	bl	8018ee0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8010d74:	4b0b      	ldr	r3, [pc, #44]	; (8010da4 <MSC_BOT_Reset+0x9c>)
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	4619      	mov	r1, r3
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f008 f8b0 	bl	8018ee0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8010d80:	4b08      	ldr	r3, [pc, #32]	; (8010da4 <MSC_BOT_Reset+0x9c>)
 8010d82:	7819      	ldrb	r1, [r3, #0]
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f248 0210 	movw	r2, #32784	; 0x8010
 8010d8a:	441a      	add	r2, r3
 8010d8c:	231f      	movs	r3, #31
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f008 f931 	bl	8018ff6 <USBD_LL_PrepareReceive>
 8010d94:	e000      	b.n	8010d98 <MSC_BOT_Reset+0x90>
    return;
 8010d96:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	2400014c 	.word	0x2400014c
 8010da4:	2400014d 	.word	0x2400014d

08010da8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b085      	sub	sp, #20
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	33b2      	adds	r3, #178	; 0xb2
 8010dba:	009b      	lsls	r3, r3, #2
 8010dbc:	4413      	add	r3, r2
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d002      	beq.n	8010dce <MSC_BOT_DeInit+0x26>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	721a      	strb	r2, [r3, #8]
  }
}
 8010dce:	bf00      	nop
 8010dd0:	3714      	adds	r7, #20
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr

08010dda <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b084      	sub	sp, #16
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
 8010de2:	460b      	mov	r3, r1
 8010de4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	33b2      	adds	r3, #178	; 0xb2
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	4413      	add	r3, r2
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d022      	beq.n	8010e44 <MSC_BOT_DataIn+0x6a>
  {
    return;
  }

  switch (hmsc->bot_state)
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	7a1b      	ldrb	r3, [r3, #8]
 8010e02:	2b02      	cmp	r3, #2
 8010e04:	d005      	beq.n	8010e12 <MSC_BOT_DataIn+0x38>
 8010e06:	2b02      	cmp	r3, #2
 8010e08:	db1e      	blt.n	8010e48 <MSC_BOT_DataIn+0x6e>
 8010e0a:	3b03      	subs	r3, #3
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d81b      	bhi.n	8010e48 <MSC_BOT_DataIn+0x6e>
 8010e10:	e013      	b.n	8010e3a <MSC_BOT_DataIn+0x60>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010e18:	7f59      	ldrb	r1, [r3, #29]
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	f248 031f 	movw	r3, #32799	; 0x801f
 8010e20:	4413      	add	r3, r2
 8010e22:	461a      	mov	r2, r3
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f000 fa71 	bl	801130c <SCSI_ProcessCmd>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	da0d      	bge.n	8010e4c <MSC_BOT_DataIn+0x72>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010e30:	2101      	movs	r1, #1
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f000 f95a 	bl	80110ec <MSC_BOT_SendCSW>
      }
      break;
 8010e38:	e008      	b.n	8010e4c <MSC_BOT_DataIn+0x72>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 f955 	bl	80110ec <MSC_BOT_SendCSW>
      break;
 8010e42:	e004      	b.n	8010e4e <MSC_BOT_DataIn+0x74>
    return;
 8010e44:	bf00      	nop
 8010e46:	e002      	b.n	8010e4e <MSC_BOT_DataIn+0x74>

    default:
      break;
 8010e48:	bf00      	nop
 8010e4a:	e000      	b.n	8010e4e <MSC_BOT_DataIn+0x74>
      break;
 8010e4c:	bf00      	nop
  }
}
 8010e4e:	3710      	adds	r7, #16
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	460b      	mov	r3, r1
 8010e5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	33b2      	adds	r3, #178	; 0xb2
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	4413      	add	r3, r2
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d01e      	beq.n	8010eb6 <MSC_BOT_DataOut+0x62>
  {
    return;
  }

  switch (hmsc->bot_state)
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	7a1b      	ldrb	r3, [r3, #8]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <MSC_BOT_DataOut+0x32>
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	d004      	beq.n	8010e8e <MSC_BOT_DataOut+0x3a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8010e84:	e01a      	b.n	8010ebc <MSC_BOT_DataOut+0x68>
      MSC_BOT_CBW_Decode(pdev);
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 f81c 	bl	8010ec4 <MSC_BOT_CBW_Decode>
      break;
 8010e8c:	e016      	b.n	8010ebc <MSC_BOT_DataOut+0x68>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010e94:	7f59      	ldrb	r1, [r3, #29]
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	f248 031f 	movw	r3, #32799	; 0x801f
 8010e9c:	4413      	add	r3, r2
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f000 fa33 	bl	801130c <SCSI_ProcessCmd>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	da06      	bge.n	8010eba <MSC_BOT_DataOut+0x66>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010eac:	2101      	movs	r1, #1
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f000 f91c 	bl	80110ec <MSC_BOT_SendCSW>
      break;
 8010eb4:	e001      	b.n	8010eba <MSC_BOT_DataOut+0x66>
    return;
 8010eb6:	bf00      	nop
 8010eb8:	e000      	b.n	8010ebc <MSC_BOT_DataOut+0x68>
      break;
 8010eba:	bf00      	nop
  }
}
 8010ebc:	3710      	adds	r7, #16
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
	...

08010ec4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b084      	sub	sp, #16
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	33b2      	adds	r3, #178	; 0xb2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4413      	add	r3, r2
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	2202      	movs	r2, #2
 8010ee8:	2180      	movs	r1, #128	; 0x80
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f002 fad1 	bl	8013492 <USBD_CoreGetEPAdd>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	4b4e      	ldr	r3, [pc, #312]	; (8011030 <MSC_BOT_CBW_Decode+0x16c>)
 8010ef6:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	2202      	movs	r2, #2
 8010f02:	2100      	movs	r1, #0
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f002 fac4 	bl	8013492 <USBD_CoreGetEPAdd>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	4b49      	ldr	r3, [pc, #292]	; (8011034 <MSC_BOT_CBW_Decode+0x170>)
 8010f10:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f000 8085 	beq.w	8011024 <MSC_BOT_CBW_Decode+0x160>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010f20:	695b      	ldr	r3, [r3, #20]
 8010f22:	68fa      	ldr	r2, [r7, #12]
 8010f24:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010f28:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010f30:	699b      	ldr	r3, [r3, #24]
 8010f32:	68fa      	ldr	r2, [r7, #12]
 8010f34:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010f38:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8010f3a:	4b3e      	ldr	r3, [pc, #248]	; (8011034 <MSC_BOT_CBW_Decode+0x170>)
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f008 f879 	bl	8019038 <USBD_LL_GetRxDataSize>
 8010f46:	4603      	mov	r3, r0
 8010f48:	2b1f      	cmp	r3, #31
 8010f4a:	d118      	bne.n	8010f7e <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010f52:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8010f54:	4a38      	ldr	r2, [pc, #224]	; (8011038 <MSC_BOT_CBW_Decode+0x174>)
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d111      	bne.n	8010f7e <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010f60:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d80b      	bhi.n	8010f7e <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010f6c:	7f9b      	ldrb	r3, [r3, #30]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d005      	beq.n	8010f7e <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.bCBLength > 16U))
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010f78:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010f7a:	2b10      	cmp	r3, #16
 8010f7c:	d90f      	bls.n	8010f9e <MSC_BOT_CBW_Decode+0xda>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010f84:	7f59      	ldrb	r1, [r3, #29]
 8010f86:	2320      	movs	r3, #32
 8010f88:	2205      	movs	r2, #5
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 fef4 	bl	8011d78 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2202      	movs	r2, #2
 8010f94:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f000 f904 	bl	80111a4 <MSC_BOT_Abort>
 8010f9c:	e045      	b.n	801102a <MSC_BOT_CBW_Decode+0x166>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010fa4:	7f59      	ldrb	r1, [r3, #29]
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	f248 031f 	movw	r3, #32799	; 0x801f
 8010fac:	4413      	add	r3, r2
 8010fae:	461a      	mov	r2, r3
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f000 f9ab 	bl	801130c <SCSI_ProcessCmd>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	da0c      	bge.n	8010fd6 <MSC_BOT_CBW_Decode+0x112>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	7a1b      	ldrb	r3, [r3, #8]
 8010fc0:	2b05      	cmp	r3, #5
 8010fc2:	d104      	bne.n	8010fce <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010fc4:	2101      	movs	r1, #1
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 f890 	bl	80110ec <MSC_BOT_SendCSW>
 8010fcc:	e02d      	b.n	801102a <MSC_BOT_CBW_Decode+0x166>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 f8e8 	bl	80111a4 <MSC_BOT_Abort>
 8010fd4:	e029      	b.n	801102a <MSC_BOT_CBW_Decode+0x166>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	7a1b      	ldrb	r3, [r3, #8]
 8010fda:	2b02      	cmp	r3, #2
 8010fdc:	d024      	beq.n	8011028 <MSC_BOT_CBW_Decode+0x164>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d020      	beq.n	8011028 <MSC_BOT_CBW_Decode+0x164>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010fea:	2b03      	cmp	r3, #3
 8010fec:	d01c      	beq.n	8011028 <MSC_BOT_CBW_Decode+0x164>
    {
      if (hmsc->bot_data_length > 0U)
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d009      	beq.n	801100a <MSC_BOT_CBW_Decode+0x146>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f103 0110 	add.w	r1, r3, #16
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	461a      	mov	r2, r3
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 f81a 	bl	801103c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8011008:	e00f      	b.n	801102a <MSC_BOT_CBW_Decode+0x166>
      }
      else if (hmsc->bot_data_length == 0U)
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d104      	bne.n	801101c <MSC_BOT_CBW_Decode+0x158>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011012:	2100      	movs	r1, #0
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f000 f869 	bl	80110ec <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801101a:	e006      	b.n	801102a <MSC_BOT_CBW_Decode+0x166>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f000 f8c1 	bl	80111a4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8011022:	e002      	b.n	801102a <MSC_BOT_CBW_Decode+0x166>
    return;
 8011024:	bf00      	nop
 8011026:	e000      	b.n	801102a <MSC_BOT_CBW_Decode+0x166>
      }
    }
    else
    {
      return;
 8011028:	bf00      	nop
    }
  }
}
 801102a:	3710      	adds	r7, #16
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}
 8011030:	2400014c 	.word	0x2400014c
 8011034:	2400014d 	.word	0x2400014d
 8011038:	43425355 	.word	0x43425355

0801103c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801104e:	68fa      	ldr	r2, [r7, #12]
 8011050:	33b2      	adds	r3, #178	; 0xb2
 8011052:	009b      	lsls	r3, r3, #2
 8011054:	4413      	add	r3, r2
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	617b      	str	r3, [r7, #20]

  uint32_t length;

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011060:	b2db      	uxtb	r3, r3
 8011062:	2202      	movs	r2, #2
 8011064:	2180      	movs	r1, #128	; 0x80
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	f002 fa13 	bl	8013492 <USBD_CoreGetEPAdd>
 801106c:	4603      	mov	r3, r0
 801106e:	461a      	mov	r2, r3
 8011070:	4b1c      	ldr	r3, [pc, #112]	; (80110e4 <MSC_BOT_SendData+0xa8>)
 8011072:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801107a:	b2db      	uxtb	r3, r3
 801107c:	2202      	movs	r2, #2
 801107e:	2100      	movs	r1, #0
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	f002 fa06 	bl	8013492 <USBD_CoreGetEPAdd>
 8011086:	4603      	mov	r3, r0
 8011088:	461a      	mov	r2, r3
 801108a:	4b17      	ldr	r3, [pc, #92]	; (80110e8 <MSC_BOT_SendData+0xac>)
 801108c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d023      	beq.n	80110dc <MSC_BOT_SendData+0xa0>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801109a:	699b      	ldr	r3, [r3, #24]
 801109c:	687a      	ldr	r2, [r7, #4]
 801109e:	4293      	cmp	r3, r2
 80110a0:	bf28      	it	cs
 80110a2:	4613      	movcs	r3, r2
 80110a4:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80110ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	1ad3      	subs	r3, r2, r3
 80110b2:	697a      	ldr	r2, [r7, #20]
 80110b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80110b8:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80110c0:	2200      	movs	r2, #0
 80110c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	2204      	movs	r2, #4
 80110ca:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80110cc:	4b05      	ldr	r3, [pc, #20]	; (80110e4 <MSC_BOT_SendData+0xa8>)
 80110ce:	7819      	ldrb	r1, [r3, #0]
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	68ba      	ldr	r2, [r7, #8]
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	f007 ff6d 	bl	8018fb4 <USBD_LL_Transmit>
 80110da:	e000      	b.n	80110de <MSC_BOT_SendData+0xa2>
    return;
 80110dc:	bf00      	nop
}
 80110de:	3718      	adds	r7, #24
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	2400014c 	.word	0x2400014c
 80110e8:	2400014d 	.word	0x2400014d

080110ec <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	460b      	mov	r3, r1
 80110f6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80110fe:	687a      	ldr	r2, [r7, #4]
 8011100:	33b2      	adds	r3, #178	; 0xb2
 8011102:	009b      	lsls	r3, r3, #2
 8011104:	4413      	add	r3, r2
 8011106:	685b      	ldr	r3, [r3, #4]
 8011108:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011110:	b2db      	uxtb	r3, r3
 8011112:	2202      	movs	r2, #2
 8011114:	2180      	movs	r1, #128	; 0x80
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f002 f9bb 	bl	8013492 <USBD_CoreGetEPAdd>
 801111c:	4603      	mov	r3, r0
 801111e:	461a      	mov	r2, r3
 8011120:	4b1d      	ldr	r3, [pc, #116]	; (8011198 <MSC_BOT_SendCSW+0xac>)
 8011122:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801112a:	b2db      	uxtb	r3, r3
 801112c:	2202      	movs	r2, #2
 801112e:	2100      	movs	r1, #0
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f002 f9ae 	bl	8013492 <USBD_CoreGetEPAdd>
 8011136:	4603      	mov	r3, r0
 8011138:	461a      	mov	r2, r3
 801113a:	4b18      	ldr	r3, [pc, #96]	; (801119c <MSC_BOT_SendCSW+0xb0>)
 801113c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d024      	beq.n	801118e <MSC_BOT_SendCSW+0xa2>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801114a:	461a      	mov	r2, r3
 801114c:	4b14      	ldr	r3, [pc, #80]	; (80111a0 <MSC_BOT_SendCSW+0xb4>)
 801114e:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011156:	461a      	mov	r2, r3
 8011158:	78fb      	ldrb	r3, [r7, #3]
 801115a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2200      	movs	r2, #0
 8011162:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8011164:	4b0c      	ldr	r3, [pc, #48]	; (8011198 <MSC_BOT_SendCSW+0xac>)
 8011166:	7819      	ldrb	r1, [r3, #0]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	f248 0230 	movw	r2, #32816	; 0x8030
 801116e:	441a      	add	r2, r3
 8011170:	230d      	movs	r3, #13
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f007 ff1e 	bl	8018fb4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8011178:	4b08      	ldr	r3, [pc, #32]	; (801119c <MSC_BOT_SendCSW+0xb0>)
 801117a:	7819      	ldrb	r1, [r3, #0]
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f248 0210 	movw	r2, #32784	; 0x8010
 8011182:	441a      	add	r2, r3
 8011184:	231f      	movs	r3, #31
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f007 ff35 	bl	8018ff6 <USBD_LL_PrepareReceive>
 801118c:	e000      	b.n	8011190 <MSC_BOT_SendCSW+0xa4>
    return;
 801118e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011190:	3710      	adds	r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	2400014c 	.word	0x2400014c
 801119c:	2400014d 	.word	0x2400014d
 80111a0:	53425355 	.word	0x53425355

080111a4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80111b2:	687a      	ldr	r2, [r7, #4]
 80111b4:	33b2      	adds	r3, #178	; 0xb2
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	4413      	add	r3, r2
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	2202      	movs	r2, #2
 80111c8:	2180      	movs	r1, #128	; 0x80
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f002 f961 	bl	8013492 <USBD_CoreGetEPAdd>
 80111d0:	4603      	mov	r3, r0
 80111d2:	461a      	mov	r2, r3
 80111d4:	4b21      	ldr	r3, [pc, #132]	; (801125c <MSC_BOT_Abort+0xb8>)
 80111d6:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	2202      	movs	r2, #2
 80111e2:	2100      	movs	r1, #0
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f002 f954 	bl	8013492 <USBD_CoreGetEPAdd>
 80111ea:	4603      	mov	r3, r0
 80111ec:	461a      	mov	r2, r3
 80111ee:	4b1c      	ldr	r3, [pc, #112]	; (8011260 <MSC_BOT_Abort+0xbc>)
 80111f0:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d02c      	beq.n	8011252 <MSC_BOT_Abort+0xae>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80111fe:	7f1b      	ldrb	r3, [r3, #28]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d10f      	bne.n	8011224 <MSC_BOT_Abort+0x80>
      (hmsc->cbw.dDataLength != 0U) &&
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801120a:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 801120c:	2b00      	cmp	r3, #0
 801120e:	d009      	beq.n	8011224 <MSC_BOT_Abort+0x80>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8011214:	2b00      	cmp	r3, #0
 8011216:	d105      	bne.n	8011224 <MSC_BOT_Abort+0x80>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011218:	4b11      	ldr	r3, [pc, #68]	; (8011260 <MSC_BOT_Abort+0xbc>)
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	4619      	mov	r1, r3
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f007 fe3f 	bl	8018ea2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011224:	4b0d      	ldr	r3, [pc, #52]	; (801125c <MSC_BOT_Abort+0xb8>)
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	4619      	mov	r1, r3
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f007 fe39 	bl	8018ea2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	7a5b      	ldrb	r3, [r3, #9]
 8011234:	2b02      	cmp	r3, #2
 8011236:	d10d      	bne.n	8011254 <MSC_BOT_Abort+0xb0>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011238:	4b08      	ldr	r3, [pc, #32]	; (801125c <MSC_BOT_Abort+0xb8>)
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	4619      	mov	r1, r3
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f007 fe2f 	bl	8018ea2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011244:	4b06      	ldr	r3, [pc, #24]	; (8011260 <MSC_BOT_Abort+0xbc>)
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	4619      	mov	r1, r3
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f007 fe29 	bl	8018ea2 <USBD_LL_StallEP>
 8011250:	e000      	b.n	8011254 <MSC_BOT_Abort+0xb0>
    return;
 8011252:	bf00      	nop
  }
}
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	2400014c 	.word	0x2400014c
 8011260:	2400014d 	.word	0x2400014d

08011264 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	460b      	mov	r3, r1
 801126e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	33b2      	adds	r3, #178	; 0xb2
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	4413      	add	r3, r2
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011288:	b2db      	uxtb	r3, r3
 801128a:	2202      	movs	r2, #2
 801128c:	2180      	movs	r1, #128	; 0x80
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f002 f8ff 	bl	8013492 <USBD_CoreGetEPAdd>
 8011294:	4603      	mov	r3, r0
 8011296:	461a      	mov	r2, r3
 8011298:	4b1a      	ldr	r3, [pc, #104]	; (8011304 <MSC_BOT_CplClrFeature+0xa0>)
 801129a:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	2202      	movs	r2, #2
 80112a6:	2100      	movs	r1, #0
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f002 f8f2 	bl	8013492 <USBD_CoreGetEPAdd>
 80112ae:	4603      	mov	r3, r0
 80112b0:	461a      	mov	r2, r3
 80112b2:	4b15      	ldr	r3, [pc, #84]	; (8011308 <MSC_BOT_CplClrFeature+0xa4>)
 80112b4:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d01d      	beq.n	80112f8 <MSC_BOT_CplClrFeature+0x94>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	7a5b      	ldrb	r3, [r3, #9]
 80112c0:	2b02      	cmp	r3, #2
 80112c2:	d10c      	bne.n	80112de <MSC_BOT_CplClrFeature+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80112c4:	4b0f      	ldr	r3, [pc, #60]	; (8011304 <MSC_BOT_CplClrFeature+0xa0>)
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	4619      	mov	r1, r3
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f007 fde9 	bl	8018ea2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80112d0:	4b0d      	ldr	r3, [pc, #52]	; (8011308 <MSC_BOT_CplClrFeature+0xa4>)
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	4619      	mov	r1, r3
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f007 fde3 	bl	8018ea2 <USBD_LL_StallEP>
 80112dc:	e00f      	b.n	80112fe <MSC_BOT_CplClrFeature+0x9a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80112de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	da0a      	bge.n	80112fc <MSC_BOT_CplClrFeature+0x98>
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	7a5b      	ldrb	r3, [r3, #9]
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	d006      	beq.n	80112fc <MSC_BOT_CplClrFeature+0x98>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80112ee:	2101      	movs	r1, #1
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7ff fefb 	bl	80110ec <MSC_BOT_SendCSW>
 80112f6:	e002      	b.n	80112fe <MSC_BOT_CplClrFeature+0x9a>
    return;
 80112f8:	bf00      	nop
 80112fa:	e000      	b.n	80112fe <MSC_BOT_CplClrFeature+0x9a>
  }
  else
  {
    return;
 80112fc:	bf00      	nop
  }
}
 80112fe:	3710      	adds	r7, #16
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	2400014c 	.word	0x2400014c
 8011308:	2400014d 	.word	0x2400014d

0801130c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b086      	sub	sp, #24
 8011310:	af00      	add	r7, sp, #0
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	460b      	mov	r3, r1
 8011316:	607a      	str	r2, [r7, #4]
 8011318:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011320:	68fa      	ldr	r2, [r7, #12]
 8011322:	33b2      	adds	r3, #178	; 0xb2
 8011324:	009b      	lsls	r3, r3, #2
 8011326:	4413      	add	r3, r2
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d102      	bne.n	8011338 <SCSI_ProcessCmd+0x2c>
  {
    return -1;
 8011332:	f04f 33ff 	mov.w	r3, #4294967295
 8011336:	e167      	b.n	8011608 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	2baa      	cmp	r3, #170	; 0xaa
 801133e:	f000 8143 	beq.w	80115c8 <SCSI_ProcessCmd+0x2bc>
 8011342:	2baa      	cmp	r3, #170	; 0xaa
 8011344:	f300 8152 	bgt.w	80115ec <SCSI_ProcessCmd+0x2e0>
 8011348:	2ba8      	cmp	r3, #168	; 0xa8
 801134a:	f000 812b 	beq.w	80115a4 <SCSI_ProcessCmd+0x298>
 801134e:	2ba8      	cmp	r3, #168	; 0xa8
 8011350:	f300 814c 	bgt.w	80115ec <SCSI_ProcessCmd+0x2e0>
 8011354:	2b5a      	cmp	r3, #90	; 0x5a
 8011356:	f300 80bf 	bgt.w	80114d8 <SCSI_ProcessCmd+0x1cc>
 801135a:	2b00      	cmp	r3, #0
 801135c:	f2c0 8146 	blt.w	80115ec <SCSI_ProcessCmd+0x2e0>
 8011360:	2b5a      	cmp	r3, #90	; 0x5a
 8011362:	f200 8143 	bhi.w	80115ec <SCSI_ProcessCmd+0x2e0>
 8011366:	a201      	add	r2, pc, #4	; (adr r2, 801136c <SCSI_ProcessCmd+0x60>)
 8011368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801136c:	080114df 	.word	0x080114df
 8011370:	080115ed 	.word	0x080115ed
 8011374:	080115ed 	.word	0x080115ed
 8011378:	080114f1 	.word	0x080114f1
 801137c:	080115ed 	.word	0x080115ed
 8011380:	080115ed 	.word	0x080115ed
 8011384:	080115ed 	.word	0x080115ed
 8011388:	080115ed 	.word	0x080115ed
 801138c:	080115ed 	.word	0x080115ed
 8011390:	080115ed 	.word	0x080115ed
 8011394:	080115ed 	.word	0x080115ed
 8011398:	080115ed 	.word	0x080115ed
 801139c:	080115ed 	.word	0x080115ed
 80113a0:	080115ed 	.word	0x080115ed
 80113a4:	080115ed 	.word	0x080115ed
 80113a8:	080115ed 	.word	0x080115ed
 80113ac:	080115ed 	.word	0x080115ed
 80113b0:	080115ed 	.word	0x080115ed
 80113b4:	08011503 	.word	0x08011503
 80113b8:	080115ed 	.word	0x080115ed
 80113bc:	080115ed 	.word	0x080115ed
 80113c0:	080115ed 	.word	0x080115ed
 80113c4:	080115ed 	.word	0x080115ed
 80113c8:	080115ed 	.word	0x080115ed
 80113cc:	080115ed 	.word	0x080115ed
 80113d0:	080115ed 	.word	0x080115ed
 80113d4:	08011539 	.word	0x08011539
 80113d8:	08011515 	.word	0x08011515
 80113dc:	080115ed 	.word	0x080115ed
 80113e0:	080115ed 	.word	0x080115ed
 80113e4:	08011527 	.word	0x08011527
 80113e8:	080115ed 	.word	0x080115ed
 80113ec:	080115ed 	.word	0x080115ed
 80113f0:	080115ed 	.word	0x080115ed
 80113f4:	080115ed 	.word	0x080115ed
 80113f8:	0801155d 	.word	0x0801155d
 80113fc:	080115ed 	.word	0x080115ed
 8011400:	0801156f 	.word	0x0801156f
 8011404:	080115ed 	.word	0x080115ed
 8011408:	080115ed 	.word	0x080115ed
 801140c:	08011593 	.word	0x08011593
 8011410:	080115ed 	.word	0x080115ed
 8011414:	080115b7 	.word	0x080115b7
 8011418:	080115ed 	.word	0x080115ed
 801141c:	080115ed 	.word	0x080115ed
 8011420:	080115ed 	.word	0x080115ed
 8011424:	080115ed 	.word	0x080115ed
 8011428:	080115db 	.word	0x080115db
 801142c:	080115ed 	.word	0x080115ed
 8011430:	080115ed 	.word	0x080115ed
 8011434:	080115ed 	.word	0x080115ed
 8011438:	080115ed 	.word	0x080115ed
 801143c:	080115ed 	.word	0x080115ed
 8011440:	080115ed 	.word	0x080115ed
 8011444:	080115ed 	.word	0x080115ed
 8011448:	080115ed 	.word	0x080115ed
 801144c:	080115ed 	.word	0x080115ed
 8011450:	080115ed 	.word	0x080115ed
 8011454:	080115ed 	.word	0x080115ed
 8011458:	080115ed 	.word	0x080115ed
 801145c:	080115ed 	.word	0x080115ed
 8011460:	080115ed 	.word	0x080115ed
 8011464:	080115ed 	.word	0x080115ed
 8011468:	080115ed 	.word	0x080115ed
 801146c:	080115ed 	.word	0x080115ed
 8011470:	080115ed 	.word	0x080115ed
 8011474:	080115ed 	.word	0x080115ed
 8011478:	080115ed 	.word	0x080115ed
 801147c:	080115ed 	.word	0x080115ed
 8011480:	080115ed 	.word	0x080115ed
 8011484:	080115ed 	.word	0x080115ed
 8011488:	080115ed 	.word	0x080115ed
 801148c:	080115ed 	.word	0x080115ed
 8011490:	080115ed 	.word	0x080115ed
 8011494:	080115ed 	.word	0x080115ed
 8011498:	080115ed 	.word	0x080115ed
 801149c:	080115ed 	.word	0x080115ed
 80114a0:	080115ed 	.word	0x080115ed
 80114a4:	080115ed 	.word	0x080115ed
 80114a8:	080115ed 	.word	0x080115ed
 80114ac:	080115ed 	.word	0x080115ed
 80114b0:	080115ed 	.word	0x080115ed
 80114b4:	080115ed 	.word	0x080115ed
 80114b8:	080115ed 	.word	0x080115ed
 80114bc:	080115ed 	.word	0x080115ed
 80114c0:	080115ed 	.word	0x080115ed
 80114c4:	080115ed 	.word	0x080115ed
 80114c8:	080115ed 	.word	0x080115ed
 80114cc:	080115ed 	.word	0x080115ed
 80114d0:	080115ed 	.word	0x080115ed
 80114d4:	0801154b 	.word	0x0801154b
 80114d8:	2b9e      	cmp	r3, #158	; 0x9e
 80114da:	d051      	beq.n	8011580 <SCSI_ProcessCmd+0x274>
 80114dc:	e086      	b.n	80115ec <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80114de:	7afb      	ldrb	r3, [r7, #11]
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	4619      	mov	r1, r3
 80114e4:	68f8      	ldr	r0, [r7, #12]
 80114e6:	f000 f893 	bl	8011610 <SCSI_TestUnitReady>
 80114ea:	4603      	mov	r3, r0
 80114ec:	75fb      	strb	r3, [r7, #23]
      break;
 80114ee:	e089      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80114f0:	7afb      	ldrb	r3, [r7, #11]
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	4619      	mov	r1, r3
 80114f6:	68f8      	ldr	r0, [r7, #12]
 80114f8:	f000 fb9e 	bl	8011c38 <SCSI_RequestSense>
 80114fc:	4603      	mov	r3, r0
 80114fe:	75fb      	strb	r3, [r7, #23]
      break;
 8011500:	e080      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8011502:	7afb      	ldrb	r3, [r7, #11]
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	4619      	mov	r1, r3
 8011508:	68f8      	ldr	r0, [r7, #12]
 801150a:	f000 f8df 	bl	80116cc <SCSI_Inquiry>
 801150e:	4603      	mov	r3, r0
 8011510:	75fb      	strb	r3, [r7, #23]
      break;
 8011512:	e077      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8011514:	7afb      	ldrb	r3, [r7, #11]
 8011516:	687a      	ldr	r2, [r7, #4]
 8011518:	4619      	mov	r1, r3
 801151a:	68f8      	ldr	r0, [r7, #12]
 801151c:	f000 fc8e 	bl	8011e3c <SCSI_StartStopUnit>
 8011520:	4603      	mov	r3, r0
 8011522:	75fb      	strb	r3, [r7, #23]
      break;
 8011524:	e06e      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8011526:	7afb      	ldrb	r3, [r7, #11]
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	4619      	mov	r1, r3
 801152c:	68f8      	ldr	r0, [r7, #12]
 801152e:	f000 fce3 	bl	8011ef8 <SCSI_AllowPreventRemovable>
 8011532:	4603      	mov	r3, r0
 8011534:	75fb      	strb	r3, [r7, #23]
      break;
 8011536:	e065      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8011538:	7afb      	ldrb	r3, [r7, #11]
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	4619      	mov	r1, r3
 801153e:	68f8      	ldr	r0, [r7, #12]
 8011540:	f000 fb1a 	bl	8011b78 <SCSI_ModeSense6>
 8011544:	4603      	mov	r3, r0
 8011546:	75fb      	strb	r3, [r7, #23]
      break;
 8011548:	e05c      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801154a:	7afb      	ldrb	r3, [r7, #11]
 801154c:	687a      	ldr	r2, [r7, #4]
 801154e:	4619      	mov	r1, r3
 8011550:	68f8      	ldr	r0, [r7, #12]
 8011552:	f000 fb41 	bl	8011bd8 <SCSI_ModeSense10>
 8011556:	4603      	mov	r3, r0
 8011558:	75fb      	strb	r3, [r7, #23]
      break;
 801155a:	e053      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801155c:	7afb      	ldrb	r3, [r7, #11]
 801155e:	687a      	ldr	r2, [r7, #4]
 8011560:	4619      	mov	r1, r3
 8011562:	68f8      	ldr	r0, [r7, #12]
 8011564:	f000 fa8a 	bl	8011a7c <SCSI_ReadFormatCapacity>
 8011568:	4603      	mov	r3, r0
 801156a:	75fb      	strb	r3, [r7, #23]
      break;
 801156c:	e04a      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801156e:	7afb      	ldrb	r3, [r7, #11]
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	4619      	mov	r1, r3
 8011574:	68f8      	ldr	r0, [r7, #12]
 8011576:	f000 f92b 	bl	80117d0 <SCSI_ReadCapacity10>
 801157a:	4603      	mov	r3, r0
 801157c:	75fb      	strb	r3, [r7, #23]
      break;
 801157e:	e041      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8011580:	7afb      	ldrb	r3, [r7, #11]
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	4619      	mov	r1, r3
 8011586:	68f8      	ldr	r0, [r7, #12]
 8011588:	f000 f9b2 	bl	80118f0 <SCSI_ReadCapacity16>
 801158c:	4603      	mov	r3, r0
 801158e:	75fb      	strb	r3, [r7, #23]
      break;
 8011590:	e038      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8011592:	7afb      	ldrb	r3, [r7, #11]
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	4619      	mov	r1, r3
 8011598:	68f8      	ldr	r0, [r7, #12]
 801159a:	f000 fcdf 	bl	8011f5c <SCSI_Read10>
 801159e:	4603      	mov	r3, r0
 80115a0:	75fb      	strb	r3, [r7, #23]
      break;
 80115a2:	e02f      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80115a4:	7afb      	ldrb	r3, [r7, #11]
 80115a6:	687a      	ldr	r2, [r7, #4]
 80115a8:	4619      	mov	r1, r3
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	f000 fd8e 	bl	80120cc <SCSI_Read12>
 80115b0:	4603      	mov	r3, r0
 80115b2:	75fb      	strb	r3, [r7, #23]
      break;
 80115b4:	e026      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80115b6:	7afb      	ldrb	r3, [r7, #11]
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	4619      	mov	r1, r3
 80115bc:	68f8      	ldr	r0, [r7, #12]
 80115be:	f000 fe47 	bl	8012250 <SCSI_Write10>
 80115c2:	4603      	mov	r3, r0
 80115c4:	75fb      	strb	r3, [r7, #23]
      break;
 80115c6:	e01d      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80115c8:	7afb      	ldrb	r3, [r7, #11]
 80115ca:	687a      	ldr	r2, [r7, #4]
 80115cc:	4619      	mov	r1, r3
 80115ce:	68f8      	ldr	r0, [r7, #12]
 80115d0:	f000 ff30 	bl	8012434 <SCSI_Write12>
 80115d4:	4603      	mov	r3, r0
 80115d6:	75fb      	strb	r3, [r7, #23]
      break;
 80115d8:	e014      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80115da:	7afb      	ldrb	r3, [r7, #11]
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	4619      	mov	r1, r3
 80115e0:	68f8      	ldr	r0, [r7, #12]
 80115e2:	f001 f829 	bl	8012638 <SCSI_Verify10>
 80115e6:	4603      	mov	r3, r0
 80115e8:	75fb      	strb	r3, [r7, #23]
      break;
 80115ea:	e00b      	b.n	8011604 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80115ec:	7af9      	ldrb	r1, [r7, #11]
 80115ee:	2320      	movs	r3, #32
 80115f0:	2205      	movs	r2, #5
 80115f2:	68f8      	ldr	r0, [r7, #12]
 80115f4:	f000 fbc0 	bl	8011d78 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	2202      	movs	r2, #2
 80115fc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80115fe:	23ff      	movs	r3, #255	; 0xff
 8011600:	75fb      	strb	r3, [r7, #23]
      break;
 8011602:	bf00      	nop
  }

  return ret;
 8011604:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011608:	4618      	mov	r0, r3
 801160a:	3718      	adds	r7, #24
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b086      	sub	sp, #24
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	460b      	mov	r3, r1
 801161a:	607a      	str	r2, [r7, #4]
 801161c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011624:	68fa      	ldr	r2, [r7, #12]
 8011626:	33b2      	adds	r3, #178	; 0xb2
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	4413      	add	r3, r2
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d102      	bne.n	801163c <SCSI_TestUnitReady+0x2c>
  {
    return -1;
 8011636:	f04f 33ff 	mov.w	r3, #4294967295
 801163a:	e043      	b.n	80116c4 <SCSI_TestUnitReady+0xb4>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011642:	699b      	ldr	r3, [r3, #24]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d00b      	beq.n	8011660 <SCSI_TestUnitReady+0x50>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801164e:	7f59      	ldrb	r1, [r3, #29]
 8011650:	2320      	movs	r3, #32
 8011652:	2205      	movs	r2, #5
 8011654:	68f8      	ldr	r0, [r7, #12]
 8011656:	f000 fb8f 	bl	8011d78 <SCSI_SenseCode>

    return -1;
 801165a:	f04f 33ff 	mov.w	r3, #4294967295
 801165e:	e031      	b.n	80116c4 <SCSI_TestUnitReady+0xb4>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011666:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801166a:	2b02      	cmp	r3, #2
 801166c:	d10b      	bne.n	8011686 <SCSI_TestUnitReady+0x76>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801166e:	7af9      	ldrb	r1, [r7, #11]
 8011670:	233a      	movs	r3, #58	; 0x3a
 8011672:	2202      	movs	r2, #2
 8011674:	68f8      	ldr	r0, [r7, #12]
 8011676:	f000 fb7f 	bl	8011d78 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	2205      	movs	r2, #5
 801167e:	721a      	strb	r2, [r3, #8]
    return -1;
 8011680:	f04f 33ff 	mov.w	r3, #4294967295
 8011684:	e01e      	b.n	80116c4 <SCSI_TestUnitReady+0xb4>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801168c:	68fa      	ldr	r2, [r7, #12]
 801168e:	33b6      	adds	r3, #182	; 0xb6
 8011690:	009b      	lsls	r3, r3, #2
 8011692:	4413      	add	r3, r2
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	689b      	ldr	r3, [r3, #8]
 8011698:	7afa      	ldrb	r2, [r7, #11]
 801169a:	4610      	mov	r0, r2
 801169c:	4798      	blx	r3
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d00b      	beq.n	80116bc <SCSI_TestUnitReady+0xac>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80116a4:	7af9      	ldrb	r1, [r7, #11]
 80116a6:	233a      	movs	r3, #58	; 0x3a
 80116a8:	2202      	movs	r2, #2
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f000 fb64 	bl	8011d78 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	2205      	movs	r2, #5
 80116b4:	721a      	strb	r2, [r3, #8]

    return -1;
 80116b6:	f04f 33ff 	mov.w	r3, #4294967295
 80116ba:	e003      	b.n	80116c4 <SCSI_TestUnitReady+0xb4>
  }
  hmsc->bot_data_length = 0U;
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	2200      	movs	r2, #0
 80116c0:	60da      	str	r2, [r3, #12]

  return 0;
 80116c2:	2300      	movs	r3, #0
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3718      	adds	r7, #24
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}

080116cc <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b088      	sub	sp, #32
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	60f8      	str	r0, [r7, #12]
 80116d4:	460b      	mov	r3, r1
 80116d6:	607a      	str	r2, [r7, #4]
 80116d8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	33b2      	adds	r3, #178	; 0xb2
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	4413      	add	r3, r2
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80116ec:	69bb      	ldr	r3, [r7, #24]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d102      	bne.n	80116f8 <SCSI_Inquiry+0x2c>
  {
    return -1;
 80116f2:	f04f 33ff 	mov.w	r3, #4294967295
 80116f6:	e062      	b.n	80117be <SCSI_Inquiry+0xf2>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80116fe:	699b      	ldr	r3, [r3, #24]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d10b      	bne.n	801171c <SCSI_Inquiry+0x50>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801170a:	7f59      	ldrb	r1, [r3, #29]
 801170c:	2320      	movs	r3, #32
 801170e:	2205      	movs	r2, #5
 8011710:	68f8      	ldr	r0, [r7, #12]
 8011712:	f000 fb31 	bl	8011d78 <SCSI_SenseCode>
    return -1;
 8011716:	f04f 33ff 	mov.w	r3, #4294967295
 801171a:	e050      	b.n	80117be <SCSI_Inquiry+0xf2>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	3301      	adds	r3, #1
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	f003 0301 	and.w	r3, r3, #1
 8011726:	2b00      	cmp	r3, #0
 8011728:	d021      	beq.n	801176e <SCSI_Inquiry+0xa2>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	3302      	adds	r3, #2
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d105      	bne.n	8011740 <SCSI_Inquiry+0x74>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8011734:	2206      	movs	r2, #6
 8011736:	4924      	ldr	r1, [pc, #144]	; (80117c8 <SCSI_Inquiry+0xfc>)
 8011738:	69b8      	ldr	r0, [r7, #24]
 801173a:	f001 f947 	bl	80129cc <SCSI_UpdateBotData>
 801173e:	e03d      	b.n	80117bc <SCSI_Inquiry+0xf0>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	3302      	adds	r3, #2
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	2b80      	cmp	r3, #128	; 0x80
 8011748:	d105      	bne.n	8011756 <SCSI_Inquiry+0x8a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801174a:	2208      	movs	r2, #8
 801174c:	491f      	ldr	r1, [pc, #124]	; (80117cc <SCSI_Inquiry+0x100>)
 801174e:	69b8      	ldr	r0, [r7, #24]
 8011750:	f001 f93c 	bl	80129cc <SCSI_UpdateBotData>
 8011754:	e032      	b.n	80117bc <SCSI_Inquiry+0xf0>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8011756:	69bb      	ldr	r3, [r7, #24]
 8011758:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801175c:	7f59      	ldrb	r1, [r3, #29]
 801175e:	2324      	movs	r3, #36	; 0x24
 8011760:	2205      	movs	r2, #5
 8011762:	68f8      	ldr	r0, [r7, #12]
 8011764:	f000 fb08 	bl	8011d78 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8011768:	f04f 33ff 	mov.w	r3, #4294967295
 801176c:	e027      	b.n	80117be <SCSI_Inquiry+0xf2>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011774:	68fa      	ldr	r2, [r7, #12]
 8011776:	33b6      	adds	r3, #182	; 0xb6
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	4413      	add	r3, r2
 801177c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801177e:	69d9      	ldr	r1, [r3, #28]
 8011780:	7afa      	ldrb	r2, [r7, #11]
 8011782:	4613      	mov	r3, r2
 8011784:	00db      	lsls	r3, r3, #3
 8011786:	4413      	add	r3, r2
 8011788:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 801178a:	440b      	add	r3, r1
 801178c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	3304      	adds	r3, #4
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	b29b      	uxth	r3, r3
 8011796:	3305      	adds	r3, #5
 8011798:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	3304      	adds	r3, #4
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	8bfa      	ldrh	r2, [r7, #30]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d303      	bcc.n	80117b0 <SCSI_Inquiry+0xe4>
    {
      len = params[4];
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	3304      	adds	r3, #4
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80117b0:	8bfb      	ldrh	r3, [r7, #30]
 80117b2:	461a      	mov	r2, r3
 80117b4:	6979      	ldr	r1, [r7, #20]
 80117b6:	69b8      	ldr	r0, [r7, #24]
 80117b8:	f001 f908 	bl	80129cc <SCSI_UpdateBotData>
  }

  return 0;
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3720      	adds	r7, #32
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	24000150 	.word	0x24000150
 80117cc:	24000158 	.word	0x24000158

080117d0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80117d0:	b590      	push	{r4, r7, lr}
 80117d2:	b087      	sub	sp, #28
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	60f8      	str	r0, [r7, #12]
 80117d8:	460b      	mov	r3, r1
 80117da:	607a      	str	r2, [r7, #4]
 80117dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80117e4:	68fa      	ldr	r2, [r7, #12]
 80117e6:	33b2      	adds	r3, #178	; 0xb2
 80117e8:	009b      	lsls	r3, r3, #2
 80117ea:	4413      	add	r3, r2
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d102      	bne.n	80117fc <SCSI_ReadCapacity10+0x2c>
  {
    return -1;
 80117f6:	f04f 33ff 	mov.w	r3, #4294967295
 80117fa:	e075      	b.n	80118e8 <SCSI_ReadCapacity10+0x118>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	33b6      	adds	r3, #182	; 0xb6
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	4413      	add	r3, r2
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	685c      	ldr	r4, [r3, #4]
 801180e:	697a      	ldr	r2, [r7, #20]
 8011810:	f248 0368 	movw	r3, #32872	; 0x8068
 8011814:	4413      	add	r3, r2
 8011816:	6979      	ldr	r1, [r7, #20]
 8011818:	f248 0264 	movw	r2, #32868	; 0x8064
 801181c:	440a      	add	r2, r1
 801181e:	7af8      	ldrb	r0, [r7, #11]
 8011820:	4619      	mov	r1, r3
 8011822:	47a0      	blx	r4
 8011824:	4603      	mov	r3, r0
 8011826:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011828:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d106      	bne.n	801183e <SCSI_ReadCapacity10+0x6e>
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011836:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801183a:	2b02      	cmp	r3, #2
 801183c:	d108      	bne.n	8011850 <SCSI_ReadCapacity10+0x80>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801183e:	7af9      	ldrb	r1, [r7, #11]
 8011840:	233a      	movs	r3, #58	; 0x3a
 8011842:	2202      	movs	r2, #2
 8011844:	68f8      	ldr	r0, [r7, #12]
 8011846:	f000 fa97 	bl	8011d78 <SCSI_SenseCode>
    return -1;
 801184a:	f04f 33ff 	mov.w	r3, #4294967295
 801184e:	e04b      	b.n	80118e8 <SCSI_ReadCapacity10+0x118>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011858:	3b01      	subs	r3, #1
 801185a:	0e1b      	lsrs	r3, r3, #24
 801185c:	b2da      	uxtb	r2, r3
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801186a:	3b01      	subs	r3, #1
 801186c:	0c1b      	lsrs	r3, r3, #16
 801186e:	b2da      	uxtb	r2, r3
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801187a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801187c:	3b01      	subs	r3, #1
 801187e:	0a1b      	lsrs	r3, r3, #8
 8011880:	b2da      	uxtb	r2, r3
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801188c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801188e:	b2db      	uxtb	r3, r3
 8011890:	3b01      	subs	r3, #1
 8011892:	b2da      	uxtb	r2, r3
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801189e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80118a2:	161b      	asrs	r3, r3, #24
 80118a4:	b2da      	uxtb	r2, r3
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80118b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80118b4:	141b      	asrs	r3, r3, #16
 80118b6:	b2da      	uxtb	r2, r3
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80118c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80118c6:	0a1b      	lsrs	r3, r3, #8
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	b2da      	uxtb	r2, r3
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80118d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80118da:	b2da      	uxtb	r2, r3
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	2208      	movs	r2, #8
 80118e4:	60da      	str	r2, [r3, #12]

  return 0;
 80118e6:	2300      	movs	r3, #0

}
 80118e8:	4618      	mov	r0, r3
 80118ea:	371c      	adds	r7, #28
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd90      	pop	{r4, r7, pc}

080118f0 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80118f0:	b590      	push	{r4, r7, lr}
 80118f2:	b089      	sub	sp, #36	; 0x24
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	60f8      	str	r0, [r7, #12]
 80118f8:	460b      	mov	r3, r1
 80118fa:	607a      	str	r2, [r7, #4]
 80118fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011904:	68fa      	ldr	r2, [r7, #12]
 8011906:	33b2      	adds	r3, #178	; 0xb2
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	4413      	add	r3, r2
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d102      	bne.n	801191c <SCSI_ReadCapacity16+0x2c>
  {
    return -1;
 8011916:	f04f 33ff 	mov.w	r3, #4294967295
 801191a:	e0ab      	b.n	8011a74 <SCSI_ReadCapacity16+0x184>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011922:	68fa      	ldr	r2, [r7, #12]
 8011924:	33b6      	adds	r3, #182	; 0xb6
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	4413      	add	r3, r2
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	685c      	ldr	r4, [r3, #4]
 801192e:	69ba      	ldr	r2, [r7, #24]
 8011930:	f248 0368 	movw	r3, #32872	; 0x8068
 8011934:	4413      	add	r3, r2
 8011936:	69b9      	ldr	r1, [r7, #24]
 8011938:	f248 0264 	movw	r2, #32868	; 0x8064
 801193c:	440a      	add	r2, r1
 801193e:	7af8      	ldrb	r0, [r7, #11]
 8011940:	4619      	mov	r1, r3
 8011942:	47a0      	blx	r4
 8011944:	4603      	mov	r3, r0
 8011946:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011948:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d106      	bne.n	801195e <SCSI_ReadCapacity16+0x6e>
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011956:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801195a:	2b02      	cmp	r3, #2
 801195c:	d108      	bne.n	8011970 <SCSI_ReadCapacity16+0x80>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801195e:	7af9      	ldrb	r1, [r7, #11]
 8011960:	233a      	movs	r3, #58	; 0x3a
 8011962:	2202      	movs	r2, #2
 8011964:	68f8      	ldr	r0, [r7, #12]
 8011966:	f000 fa07 	bl	8011d78 <SCSI_SenseCode>
    return -1;
 801196a:	f04f 33ff 	mov.w	r3, #4294967295
 801196e:	e081      	b.n	8011a74 <SCSI_ReadCapacity16+0x184>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	330a      	adds	r3, #10
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	330b      	adds	r3, #11
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011980:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	330c      	adds	r3, #12
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801198a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	320d      	adds	r2, #13
 8011990:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8011992:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011994:	69bb      	ldr	r3, [r7, #24]
 8011996:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011998:	2300      	movs	r3, #0
 801199a:	61fb      	str	r3, [r7, #28]
 801199c:	e008      	b.n	80119b0 <SCSI_ReadCapacity16+0xc0>
  {
    hmsc->bot_data[idx] = 0U;
 801199e:	69ba      	ldr	r2, [r7, #24]
 80119a0:	69fb      	ldr	r3, [r7, #28]
 80119a2:	4413      	add	r3, r2
 80119a4:	3310      	adds	r3, #16
 80119a6:	2200      	movs	r2, #0
 80119a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80119aa:	69fb      	ldr	r3, [r7, #28]
 80119ac:	3301      	adds	r3, #1
 80119ae:	61fb      	str	r3, [r7, #28]
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	68db      	ldr	r3, [r3, #12]
 80119b4:	69fa      	ldr	r2, [r7, #28]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d3f1      	bcc.n	801199e <SCSI_ReadCapacity16+0xae>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80119c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119c2:	3b01      	subs	r3, #1
 80119c4:	0e1b      	lsrs	r3, r3, #24
 80119c6:	b2da      	uxtb	r2, r3
 80119c8:	69bb      	ldr	r3, [r7, #24]
 80119ca:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80119cc:	69bb      	ldr	r3, [r7, #24]
 80119ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80119d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119d4:	3b01      	subs	r3, #1
 80119d6:	0c1b      	lsrs	r3, r3, #16
 80119d8:	b2da      	uxtb	r2, r3
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80119de:	69bb      	ldr	r3, [r7, #24]
 80119e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80119e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119e6:	3b01      	subs	r3, #1
 80119e8:	0a1b      	lsrs	r3, r3, #8
 80119ea:	b2da      	uxtb	r2, r3
 80119ec:	69bb      	ldr	r3, [r7, #24]
 80119ee:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80119f0:	69bb      	ldr	r3, [r7, #24]
 80119f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80119f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	3b01      	subs	r3, #1
 80119fc:	b2da      	uxtb	r2, r3
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a0c:	161b      	asrs	r3, r3, #24
 8011a0e:	b2da      	uxtb	r2, r3
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8011a14:	69bb      	ldr	r3, [r7, #24]
 8011a16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a1e:	141b      	asrs	r3, r3, #16
 8011a20:	b2da      	uxtb	r2, r3
 8011a22:	69bb      	ldr	r3, [r7, #24]
 8011a24:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a30:	0a1b      	lsrs	r3, r3, #8
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	b2da      	uxtb	r2, r3
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a44:	b2da      	uxtb	r2, r3
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	330a      	adds	r3, #10
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	330b      	adds	r3, #11
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011a5a:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	330c      	adds	r3, #12
 8011a60:	781b      	ldrb	r3, [r3, #0]
 8011a62:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8011a64:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8011a66:	687a      	ldr	r2, [r7, #4]
 8011a68:	320d      	adds	r2, #13
 8011a6a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8011a6c:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	60da      	str	r2, [r3, #12]

  return 0;
 8011a72:	2300      	movs	r3, #0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3724      	adds	r7, #36	; 0x24
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd90      	pop	{r4, r7, pc}

08011a7c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b088      	sub	sp, #32
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	460b      	mov	r3, r1
 8011a86:	607a      	str	r2, [r7, #4]
 8011a88:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011a90:	68fa      	ldr	r2, [r7, #12]
 8011a92:	33b2      	adds	r3, #178	; 0xb2
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	4413      	add	r3, r2
 8011a98:	685b      	ldr	r3, [r3, #4]
 8011a9a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011a9c:	69bb      	ldr	r3, [r7, #24]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d102      	bne.n	8011aa8 <SCSI_ReadFormatCapacity+0x2c>
  {
    return -1;
 8011aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa6:	e063      	b.n	8011b70 <SCSI_ReadFormatCapacity+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011aae:	68fa      	ldr	r2, [r7, #12]
 8011ab0:	33b6      	adds	r3, #182	; 0xb6
 8011ab2:	009b      	lsls	r3, r3, #2
 8011ab4:	4413      	add	r3, r2
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	f107 0214 	add.w	r2, r7, #20
 8011abe:	f107 0110 	add.w	r1, r7, #16
 8011ac2:	7af8      	ldrb	r0, [r7, #11]
 8011ac4:	4798      	blx	r3
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d106      	bne.n	8011ae0 <SCSI_ReadFormatCapacity+0x64>
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011ad8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d108      	bne.n	8011af2 <SCSI_ReadFormatCapacity+0x76>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011ae0:	7af9      	ldrb	r1, [r7, #11]
 8011ae2:	233a      	movs	r3, #58	; 0x3a
 8011ae4:	2202      	movs	r2, #2
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f000 f946 	bl	8011d78 <SCSI_SenseCode>
    return -1;
 8011aec:	f04f 33ff 	mov.w	r3, #4294967295
 8011af0:	e03e      	b.n	8011b70 <SCSI_ReadFormatCapacity+0xf4>
  }

  for (i = 0U; i < 12U ; i++)
 8011af2:	2300      	movs	r3, #0
 8011af4:	83fb      	strh	r3, [r7, #30]
 8011af6:	e007      	b.n	8011b08 <SCSI_ReadFormatCapacity+0x8c>
  {
    hmsc->bot_data[i] = 0U;
 8011af8:	8bfb      	ldrh	r3, [r7, #30]
 8011afa:	69ba      	ldr	r2, [r7, #24]
 8011afc:	4413      	add	r3, r2
 8011afe:	2200      	movs	r2, #0
 8011b00:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8011b02:	8bfb      	ldrh	r3, [r7, #30]
 8011b04:	3301      	adds	r3, #1
 8011b06:	83fb      	strh	r3, [r7, #30]
 8011b08:	8bfb      	ldrh	r3, [r7, #30]
 8011b0a:	2b0b      	cmp	r3, #11
 8011b0c:	d9f4      	bls.n	8011af8 <SCSI_ReadFormatCapacity+0x7c>
  }

  hmsc->bot_data[3] = 0x08U;
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	2208      	movs	r2, #8
 8011b12:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	3b01      	subs	r3, #1
 8011b18:	0e1b      	lsrs	r3, r3, #24
 8011b1a:	b2da      	uxtb	r2, r3
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	3b01      	subs	r3, #1
 8011b24:	0c1b      	lsrs	r3, r3, #16
 8011b26:	b2da      	uxtb	r2, r3
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	3b01      	subs	r3, #1
 8011b30:	0a1b      	lsrs	r3, r3, #8
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	69bb      	ldr	r3, [r7, #24]
 8011b36:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	3b01      	subs	r3, #1
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	69bb      	ldr	r3, [r7, #24]
 8011b42:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	2202      	movs	r2, #2
 8011b48:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8011b4a:	8abb      	ldrh	r3, [r7, #20]
 8011b4c:	141b      	asrs	r3, r3, #16
 8011b4e:	b2da      	uxtb	r2, r3
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8011b54:	8abb      	ldrh	r3, [r7, #20]
 8011b56:	0a1b      	lsrs	r3, r3, #8
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	b2da      	uxtb	r2, r3
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8011b60:	8abb      	ldrh	r3, [r7, #20]
 8011b62:	b2da      	uxtb	r2, r3
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	220c      	movs	r2, #12
 8011b6c:	60da      	str	r2, [r3, #12]

  return 0;
 8011b6e:	2300      	movs	r3, #0
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3720      	adds	r7, #32
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b086      	sub	sp, #24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	460b      	mov	r3, r1
 8011b82:	607a      	str	r2, [r7, #4]
 8011b84:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011b8c:	68fa      	ldr	r2, [r7, #12]
 8011b8e:	33b2      	adds	r3, #178	; 0xb2
 8011b90:	009b      	lsls	r3, r3, #2
 8011b92:	4413      	add	r3, r2
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8011b98:	2317      	movs	r3, #23
 8011b9a:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d102      	bne.n	8011ba8 <SCSI_ModeSense6+0x30>
  {
    return -1;
 8011ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba6:	e011      	b.n	8011bcc <SCSI_ModeSense6+0x54>
  }

  if (params[4] <= len)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	3304      	adds	r3, #4
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	8afa      	ldrh	r2, [r7, #22]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d303      	bcc.n	8011bbe <SCSI_ModeSense6+0x46>
  {
    len = params[4];
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	3304      	adds	r3, #4
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8011bbe:	8afb      	ldrh	r3, [r7, #22]
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	4904      	ldr	r1, [pc, #16]	; (8011bd4 <SCSI_ModeSense6+0x5c>)
 8011bc4:	6938      	ldr	r0, [r7, #16]
 8011bc6:	f000 ff01 	bl	80129cc <SCSI_UpdateBotData>

  return 0;
 8011bca:	2300      	movs	r3, #0
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3718      	adds	r7, #24
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	24000160 	.word	0x24000160

08011bd8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b086      	sub	sp, #24
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	460b      	mov	r3, r1
 8011be2:	607a      	str	r2, [r7, #4]
 8011be4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	33b2      	adds	r3, #178	; 0xb2
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	4413      	add	r3, r2
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8011bf8:	231b      	movs	r3, #27
 8011bfa:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d102      	bne.n	8011c08 <SCSI_ModeSense10+0x30>
  {
    return -1;
 8011c02:	f04f 33ff 	mov.w	r3, #4294967295
 8011c06:	e011      	b.n	8011c2c <SCSI_ModeSense10+0x54>
  }

  if (params[8] <= len)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	3308      	adds	r3, #8
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	8afa      	ldrh	r2, [r7, #22]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d303      	bcc.n	8011c1e <SCSI_ModeSense10+0x46>
  {
    len = params[8];
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	3308      	adds	r3, #8
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8011c1e:	8afb      	ldrh	r3, [r7, #22]
 8011c20:	461a      	mov	r2, r3
 8011c22:	4904      	ldr	r1, [pc, #16]	; (8011c34 <SCSI_ModeSense10+0x5c>)
 8011c24:	6938      	ldr	r0, [r7, #16]
 8011c26:	f000 fed1 	bl	80129cc <SCSI_UpdateBotData>

  return 0;
 8011c2a:	2300      	movs	r3, #0
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3718      	adds	r7, #24
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	24000178 	.word	0x24000178

08011c38 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b086      	sub	sp, #24
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	460b      	mov	r3, r1
 8011c42:	607a      	str	r2, [r7, #4]
 8011c44:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	33b2      	adds	r3, #178	; 0xb2
 8011c50:	009b      	lsls	r3, r3, #2
 8011c52:	4413      	add	r3, r2
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d102      	bne.n	8011c64 <SCSI_RequestSense+0x2c>
  {
    return -1;
 8011c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c62:	e085      	b.n	8011d70 <SCSI_RequestSense+0x138>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011c6a:	699b      	ldr	r3, [r3, #24]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d10b      	bne.n	8011c88 <SCSI_RequestSense+0x50>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011c76:	7f59      	ldrb	r1, [r3, #29]
 8011c78:	2320      	movs	r3, #32
 8011c7a:	2205      	movs	r2, #5
 8011c7c:	68f8      	ldr	r0, [r7, #12]
 8011c7e:	f000 f87b 	bl	8011d78 <SCSI_SenseCode>
    return -1;
 8011c82:	f04f 33ff 	mov.w	r3, #4294967295
 8011c86:	e073      	b.n	8011d70 <SCSI_RequestSense+0x138>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8011c88:	2300      	movs	r3, #0
 8011c8a:	75fb      	strb	r3, [r7, #23]
 8011c8c:	e007      	b.n	8011c9e <SCSI_RequestSense+0x66>
  {
    hmsc->bot_data[i] = 0U;
 8011c8e:	7dfb      	ldrb	r3, [r7, #23]
 8011c90:	693a      	ldr	r2, [r7, #16]
 8011c92:	4413      	add	r3, r2
 8011c94:	2200      	movs	r2, #0
 8011c96:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8011c98:	7dfb      	ldrb	r3, [r7, #23]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	75fb      	strb	r3, [r7, #23]
 8011c9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ca0:	2b11      	cmp	r3, #17
 8011ca2:	d9f4      	bls.n	8011c8e <SCSI_RequestSense+0x56>
  }

  hmsc->bot_data[0] = 0x70U;
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	2270      	movs	r2, #112	; 0x70
 8011ca8:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	220c      	movs	r2, #12
 8011cae:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011cb6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011cc0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d044      	beq.n	8011d52 <SCSI_RequestSense+0x11a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011cce:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	693a      	ldr	r2, [r7, #16]
 8011cd6:	f241 0308 	movw	r3, #4104	; 0x1008
 8011cda:	440b      	add	r3, r1
 8011cdc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011cea:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011cee:	4619      	mov	r1, r3
 8011cf0:	693a      	ldr	r2, [r7, #16]
 8011cf2:	f241 0308 	movw	r3, #4104	; 0x1008
 8011cf6:	440b      	add	r3, r1
 8011cf8:	00db      	lsls	r3, r3, #3
 8011cfa:	4413      	add	r3, r2
 8011cfc:	791a      	ldrb	r2, [r3, #4]
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d08:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	693a      	ldr	r2, [r7, #16]
 8011d10:	f241 0308 	movw	r3, #4104	; 0x1008
 8011d14:	440b      	add	r3, r1
 8011d16:	00db      	lsls	r3, r3, #3
 8011d18:	4413      	add	r3, r2
 8011d1a:	795a      	ldrb	r2, [r3, #5]
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d26:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	b2da      	uxtb	r2, r3
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d34:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d3e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011d42:	2b04      	cmp	r3, #4
 8011d44:	d105      	bne.n	8011d52 <SCSI_RequestSense+0x11a>
    {
      hmsc->scsi_sense_head = 0U;
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	2212      	movs	r2, #18
 8011d56:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	3304      	adds	r3, #4
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	2b12      	cmp	r3, #18
 8011d60:	d805      	bhi.n	8011d6e <SCSI_RequestSense+0x136>
  {
    hmsc->bot_data_length = params[4];
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	3304      	adds	r3, #4
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	461a      	mov	r2, r3
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8011d6e:	2300      	movs	r3, #0
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3718      	adds	r7, #24
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b085      	sub	sp, #20
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	4608      	mov	r0, r1
 8011d82:	4611      	mov	r1, r2
 8011d84:	461a      	mov	r2, r3
 8011d86:	4603      	mov	r3, r0
 8011d88:	70fb      	strb	r3, [r7, #3]
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	70bb      	strb	r3, [r7, #2]
 8011d8e:	4613      	mov	r3, r2
 8011d90:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	33b2      	adds	r3, #178	; 0xb2
 8011d9c:	009b      	lsls	r3, r3, #2
 8011d9e:	4413      	add	r3, r2
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d042      	beq.n	8011e30 <SCSI_SenseCode+0xb8>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011db0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011db4:	4619      	mov	r1, r3
 8011db6:	68fa      	ldr	r2, [r7, #12]
 8011db8:	f241 0308 	movw	r3, #4104	; 0x1008
 8011dbc:	440b      	add	r3, r1
 8011dbe:	78b9      	ldrb	r1, [r7, #2]
 8011dc0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011dca:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011dce:	4619      	mov	r1, r3
 8011dd0:	68fa      	ldr	r2, [r7, #12]
 8011dd2:	f241 0308 	movw	r3, #4104	; 0x1008
 8011dd6:	440b      	add	r3, r1
 8011dd8:	00db      	lsls	r3, r3, #3
 8011dda:	4413      	add	r3, r2
 8011ddc:	787a      	ldrb	r2, [r7, #1]
 8011dde:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011de6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011dea:	4619      	mov	r1, r3
 8011dec:	68fa      	ldr	r2, [r7, #12]
 8011dee:	f241 0308 	movw	r3, #4104	; 0x1008
 8011df2:	440b      	add	r3, r1
 8011df4:	00db      	lsls	r3, r3, #3
 8011df6:	4413      	add	r3, r2
 8011df8:	2200      	movs	r2, #0
 8011dfa:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e02:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011e06:	3301      	adds	r3, #1
 8011e08:	b2da      	uxtb	r2, r3
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e10:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e1a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011e1e:	2b04      	cmp	r3, #4
 8011e20:	d107      	bne.n	8011e32 <SCSI_SenseCode+0xba>
  {
    hmsc->scsi_sense_tail = 0U;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8011e2e:	e000      	b.n	8011e32 <SCSI_SenseCode+0xba>
    return;
 8011e30:	bf00      	nop
  }
}
 8011e32:	3714      	adds	r7, #20
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr

08011e3c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b086      	sub	sp, #24
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	460b      	mov	r3, r1
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011e50:	68fa      	ldr	r2, [r7, #12]
 8011e52:	33b2      	adds	r3, #178	; 0xb2
 8011e54:	009b      	lsls	r3, r3, #2
 8011e56:	4413      	add	r3, r2
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d102      	bne.n	8011e68 <SCSI_StartStopUnit+0x2c>
  {
    return -1;
 8011e62:	f04f 33ff 	mov.w	r3, #4294967295
 8011e66:	e043      	b.n	8011ef0 <SCSI_StartStopUnit+0xb4>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e6e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d10f      	bne.n	8011e96 <SCSI_StartStopUnit+0x5a>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	3304      	adds	r3, #4
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	f003 0303 	and.w	r3, r3, #3
 8011e80:	2b02      	cmp	r3, #2
 8011e82:	d108      	bne.n	8011e96 <SCSI_StartStopUnit+0x5a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011e84:	7af9      	ldrb	r1, [r7, #11]
 8011e86:	2324      	movs	r3, #36	; 0x24
 8011e88:	2205      	movs	r2, #5
 8011e8a:	68f8      	ldr	r0, [r7, #12]
 8011e8c:	f7ff ff74 	bl	8011d78 <SCSI_SenseCode>

    return -1;
 8011e90:	f04f 33ff 	mov.w	r3, #4294967295
 8011e94:	e02c      	b.n	8011ef0 <SCSI_StartStopUnit+0xb4>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	3304      	adds	r3, #4
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	f003 0303 	and.w	r3, r3, #3
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d106      	bne.n	8011eb2 <SCSI_StartStopUnit+0x76>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8011eb0:	e01a      	b.n	8011ee8 <SCSI_StartStopUnit+0xac>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	3304      	adds	r3, #4
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	f003 0303 	and.w	r3, r3, #3
 8011ebc:	2b02      	cmp	r3, #2
 8011ebe:	d106      	bne.n	8011ece <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011ec6:	2202      	movs	r2, #2
 8011ec8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8011ecc:	e00c      	b.n	8011ee8 <SCSI_StartStopUnit+0xac>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	3304      	adds	r3, #4
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	f003 0303 	and.w	r3, r3, #3
 8011ed8:	2b03      	cmp	r3, #3
 8011eda:	d105      	bne.n	8011ee8 <SCSI_StartStopUnit+0xac>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	2200      	movs	r2, #0
 8011eec:	60da      	str	r2, [r3, #12]

  return 0;
 8011eee:	2300      	movs	r3, #0
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3718      	adds	r7, #24
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b087      	sub	sp, #28
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	460b      	mov	r3, r1
 8011f02:	607a      	str	r2, [r7, #4]
 8011f04:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011f0c:	68fa      	ldr	r2, [r7, #12]
 8011f0e:	33b2      	adds	r3, #178	; 0xb2
 8011f10:	009b      	lsls	r3, r3, #2
 8011f12:	4413      	add	r3, r2
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d102      	bne.n	8011f24 <SCSI_AllowPreventRemovable+0x2c>
  {
    return -1;
 8011f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f22:	e015      	b.n	8011f50 <SCSI_AllowPreventRemovable+0x58>
  }

  if (params[4] == 0U)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	3304      	adds	r3, #4
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d106      	bne.n	8011f3c <SCSI_AllowPreventRemovable+0x44>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011f34:	2200      	movs	r2, #0
 8011f36:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8011f3a:	e005      	b.n	8011f48 <SCSI_AllowPreventRemovable+0x50>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011f42:	2201      	movs	r2, #1
 8011f44:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	60da      	str	r2, [r3, #12]

  return 0;
 8011f4e:	2300      	movs	r3, #0
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	371c      	adds	r7, #28
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr

08011f5c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b086      	sub	sp, #24
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	460b      	mov	r3, r1
 8011f66:	607a      	str	r2, [r7, #4]
 8011f68:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011f70:	68fa      	ldr	r2, [r7, #12]
 8011f72:	33b2      	adds	r3, #178	; 0xb2
 8011f74:	009b      	lsls	r3, r3, #2
 8011f76:	4413      	add	r3, r2
 8011f78:	685b      	ldr	r3, [r3, #4]
 8011f7a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d102      	bne.n	8011f88 <SCSI_Read10+0x2c>
  {
    return -1;
 8011f82:	f04f 33ff 	mov.w	r3, #4294967295
 8011f86:	e09d      	b.n	80120c4 <SCSI_Read10+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	7a1b      	ldrb	r3, [r3, #8]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f040 808f 	bne.w	80120b0 <SCSI_Read10+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011f98:	7f1b      	ldrb	r3, [r3, #28]
 8011f9a:	b25b      	sxtb	r3, r3
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	db0b      	blt.n	8011fb8 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011fa6:	7f59      	ldrb	r1, [r3, #29]
 8011fa8:	2320      	movs	r3, #32
 8011faa:	2205      	movs	r2, #5
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	f7ff fee3 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 8011fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb6:	e085      	b.n	80120c4 <SCSI_Read10+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011fbe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8011fc2:	2b02      	cmp	r3, #2
 8011fc4:	d108      	bne.n	8011fd8 <SCSI_Read10+0x7c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011fc6:	7af9      	ldrb	r1, [r7, #11]
 8011fc8:	233a      	movs	r3, #58	; 0x3a
 8011fca:	2202      	movs	r2, #2
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f7ff fed3 	bl	8011d78 <SCSI_SenseCode>

      return -1;
 8011fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fd6:	e075      	b.n	80120c4 <SCSI_Read10+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011fde:	68fa      	ldr	r2, [r7, #12]
 8011fe0:	33b6      	adds	r3, #182	; 0xb6
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	4413      	add	r3, r2
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	689b      	ldr	r3, [r3, #8]
 8011fea:	7afa      	ldrb	r2, [r7, #11]
 8011fec:	4610      	mov	r0, r2
 8011fee:	4798      	blx	r3
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d008      	beq.n	8012008 <SCSI_Read10+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011ff6:	7af9      	ldrb	r1, [r7, #11]
 8011ff8:	233a      	movs	r3, #58	; 0x3a
 8011ffa:	2202      	movs	r2, #2
 8011ffc:	68f8      	ldr	r0, [r7, #12]
 8011ffe:	f7ff febb 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 8012002:	f04f 33ff 	mov.w	r3, #4294967295
 8012006:	e05d      	b.n	80120c4 <SCSI_Read10+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	3302      	adds	r3, #2
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	3303      	adds	r3, #3
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012018:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	3304      	adds	r3, #4
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012022:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012024:	687a      	ldr	r2, [r7, #4]
 8012026:	3205      	adds	r2, #5
 8012028:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801202a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801202c:	697a      	ldr	r2, [r7, #20]
 801202e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012032:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	3307      	adds	r3, #7
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	021b      	lsls	r3, r3, #8
 801203c:	687a      	ldr	r2, [r7, #4]
 801203e:	3208      	adds	r2, #8
 8012040:	7812      	ldrb	r2, [r2, #0]
 8012042:	4313      	orrs	r3, r2
 8012044:	697a      	ldr	r2, [r7, #20]
 8012046:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801204a:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801204c:	697b      	ldr	r3, [r7, #20]
 801204e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012052:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801205c:	7af9      	ldrb	r1, [r7, #11]
 801205e:	68f8      	ldr	r0, [r7, #12]
 8012060:	f000 fb2a 	bl	80126b8 <SCSI_CheckAddressRange>
 8012064:	4603      	mov	r3, r0
 8012066:	2b00      	cmp	r3, #0
 8012068:	da02      	bge.n	8012070 <SCSI_Read10+0x114>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801206a:	f04f 33ff 	mov.w	r3, #4294967295
 801206e:	e029      	b.n	80120c4 <SCSI_Read10+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012076:	699a      	ldr	r2, [r3, #24]
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012080:	6979      	ldr	r1, [r7, #20]
 8012082:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8012086:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 801208a:	fb01 f303 	mul.w	r3, r1, r3
 801208e:	429a      	cmp	r2, r3
 8012090:	d00b      	beq.n	80120aa <SCSI_Read10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012098:	7f59      	ldrb	r1, [r3, #29]
 801209a:	2320      	movs	r3, #32
 801209c:	2205      	movs	r2, #5
 801209e:	68f8      	ldr	r0, [r7, #12]
 80120a0:	f7ff fe6a 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 80120a4:	f04f 33ff 	mov.w	r3, #4294967295
 80120a8:	e00c      	b.n	80120c4 <SCSI_Read10+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	2202      	movs	r2, #2
 80120ae:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80120b6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80120b8:	7afb      	ldrb	r3, [r7, #11]
 80120ba:	4619      	mov	r1, r3
 80120bc:	68f8      	ldr	r0, [r7, #12]
 80120be:	f000 fb29 	bl	8012714 <SCSI_ProcessRead>
 80120c2:	4603      	mov	r3, r0
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3718      	adds	r7, #24
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b086      	sub	sp, #24
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	460b      	mov	r3, r1
 80120d6:	607a      	str	r2, [r7, #4]
 80120d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80120e0:	68fa      	ldr	r2, [r7, #12]
 80120e2:	33b2      	adds	r3, #178	; 0xb2
 80120e4:	009b      	lsls	r3, r3, #2
 80120e6:	4413      	add	r3, r2
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d102      	bne.n	80120f8 <SCSI_Read12+0x2c>
  {
    return -1;
 80120f2:	f04f 33ff 	mov.w	r3, #4294967295
 80120f6:	e0a7      	b.n	8012248 <SCSI_Read12+0x17c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	7a1b      	ldrb	r3, [r3, #8]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f040 8099 	bne.w	8012234 <SCSI_Read12+0x168>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012108:	7f1b      	ldrb	r3, [r3, #28]
 801210a:	b25b      	sxtb	r3, r3
 801210c:	2b00      	cmp	r3, #0
 801210e:	db0b      	blt.n	8012128 <SCSI_Read12+0x5c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012116:	7f59      	ldrb	r1, [r3, #29]
 8012118:	2320      	movs	r3, #32
 801211a:	2205      	movs	r2, #5
 801211c:	68f8      	ldr	r0, [r7, #12]
 801211e:	f7ff fe2b 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 8012122:	f04f 33ff 	mov.w	r3, #4294967295
 8012126:	e08f      	b.n	8012248 <SCSI_Read12+0x17c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801212e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8012132:	2b02      	cmp	r3, #2
 8012134:	d108      	bne.n	8012148 <SCSI_Read12+0x7c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012136:	7af9      	ldrb	r1, [r7, #11]
 8012138:	233a      	movs	r3, #58	; 0x3a
 801213a:	2202      	movs	r2, #2
 801213c:	68f8      	ldr	r0, [r7, #12]
 801213e:	f7ff fe1b 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 8012142:	f04f 33ff 	mov.w	r3, #4294967295
 8012146:	e07f      	b.n	8012248 <SCSI_Read12+0x17c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801214e:	68fa      	ldr	r2, [r7, #12]
 8012150:	33b6      	adds	r3, #182	; 0xb6
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	4413      	add	r3, r2
 8012156:	685b      	ldr	r3, [r3, #4]
 8012158:	689b      	ldr	r3, [r3, #8]
 801215a:	7afa      	ldrb	r2, [r7, #11]
 801215c:	4610      	mov	r0, r2
 801215e:	4798      	blx	r3
 8012160:	4603      	mov	r3, r0
 8012162:	2b00      	cmp	r3, #0
 8012164:	d008      	beq.n	8012178 <SCSI_Read12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012166:	7af9      	ldrb	r1, [r7, #11]
 8012168:	233a      	movs	r3, #58	; 0x3a
 801216a:	2202      	movs	r2, #2
 801216c:	68f8      	ldr	r0, [r7, #12]
 801216e:	f7ff fe03 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 8012172:	f04f 33ff 	mov.w	r3, #4294967295
 8012176:	e067      	b.n	8012248 <SCSI_Read12+0x17c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	3302      	adds	r3, #2
 801217c:	781b      	ldrb	r3, [r3, #0]
 801217e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	3303      	adds	r3, #3
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012188:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	3304      	adds	r3, #4
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012192:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012194:	687a      	ldr	r2, [r7, #4]
 8012196:	3205      	adds	r2, #5
 8012198:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801219a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801219c:	697a      	ldr	r2, [r7, #20]
 801219e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80121a2:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	3306      	adds	r3, #6
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	3307      	adds	r3, #7
 80121b0:	781b      	ldrb	r3, [r3, #0]
 80121b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80121b4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	3308      	adds	r3, #8
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80121be:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80121c0:	687a      	ldr	r2, [r7, #4]
 80121c2:	3209      	adds	r2, #9
 80121c4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80121c6:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80121c8:	697a      	ldr	r2, [r7, #20]
 80121ca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80121ce:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80121d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80121de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121e0:	7af9      	ldrb	r1, [r7, #11]
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f000 fa68 	bl	80126b8 <SCSI_CheckAddressRange>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	da02      	bge.n	80121f4 <SCSI_Read12+0x128>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80121ee:	f04f 33ff 	mov.w	r3, #4294967295
 80121f2:	e029      	b.n	8012248 <SCSI_Read12+0x17c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80121fa:	699a      	ldr	r2, [r3, #24]
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012204:	6979      	ldr	r1, [r7, #20]
 8012206:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801220a:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 801220e:	fb01 f303 	mul.w	r3, r1, r3
 8012212:	429a      	cmp	r2, r3
 8012214:	d00b      	beq.n	801222e <SCSI_Read12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801221c:	7f59      	ldrb	r1, [r3, #29]
 801221e:	2320      	movs	r3, #32
 8012220:	2205      	movs	r2, #5
 8012222:	68f8      	ldr	r0, [r7, #12]
 8012224:	f7ff fda8 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 8012228:	f04f 33ff 	mov.w	r3, #4294967295
 801222c:	e00c      	b.n	8012248 <SCSI_Read12+0x17c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	2202      	movs	r2, #2
 8012232:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801223a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801223c:	7afb      	ldrb	r3, [r7, #11]
 801223e:	4619      	mov	r1, r3
 8012240:	68f8      	ldr	r0, [r7, #12]
 8012242:	f000 fa67 	bl	8012714 <SCSI_ProcessRead>
 8012246:	4603      	mov	r3, r0
}
 8012248:	4618      	mov	r0, r3
 801224a:	3718      	adds	r7, #24
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}

08012250 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b086      	sub	sp, #24
 8012254:	af00      	add	r7, sp, #0
 8012256:	60f8      	str	r0, [r7, #12]
 8012258:	460b      	mov	r3, r1
 801225a:	607a      	str	r2, [r7, #4]
 801225c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012264:	68fa      	ldr	r2, [r7, #12]
 8012266:	33b2      	adds	r3, #178	; 0xb2
 8012268:	009b      	lsls	r3, r3, #2
 801226a:	4413      	add	r3, r2
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d102      	bne.n	801227c <SCSI_Write10+0x2c>
  {
    return -1;
 8012276:	f04f 33ff 	mov.w	r3, #4294967295
 801227a:	e0d4      	b.n	8012426 <SCSI_Write10+0x1d6>
  }

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012282:	b2db      	uxtb	r3, r3
 8012284:	2202      	movs	r2, #2
 8012286:	2100      	movs	r1, #0
 8012288:	68f8      	ldr	r0, [r7, #12]
 801228a:	f001 f902 	bl	8013492 <USBD_CoreGetEPAdd>
 801228e:	4603      	mov	r3, r0
 8012290:	461a      	mov	r2, r3
 8012292:	4b67      	ldr	r3, [pc, #412]	; (8012430 <SCSI_Write10+0x1e0>)
 8012294:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	7a1b      	ldrb	r3, [r3, #8]
 801229a:	2b00      	cmp	r3, #0
 801229c:	f040 80bd 	bne.w	801241a <SCSI_Write10+0x1ca>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80122a6:	699b      	ldr	r3, [r3, #24]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d10b      	bne.n	80122c4 <SCSI_Write10+0x74>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80122b2:	7f59      	ldrb	r1, [r3, #29]
 80122b4:	2320      	movs	r3, #32
 80122b6:	2205      	movs	r2, #5
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f7ff fd5d 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 80122be:	f04f 33ff 	mov.w	r3, #4294967295
 80122c2:	e0b0      	b.n	8012426 <SCSI_Write10+0x1d6>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80122ca:	7f1b      	ldrb	r3, [r3, #28]
 80122cc:	b25b      	sxtb	r3, r3
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	da0b      	bge.n	80122ea <SCSI_Write10+0x9a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80122d8:	7f59      	ldrb	r1, [r3, #29]
 80122da:	2320      	movs	r3, #32
 80122dc:	2205      	movs	r2, #5
 80122de:	68f8      	ldr	r0, [r7, #12]
 80122e0:	f7ff fd4a 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 80122e4:	f04f 33ff 	mov.w	r3, #4294967295
 80122e8:	e09d      	b.n	8012426 <SCSI_Write10+0x1d6>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80122f0:	68fa      	ldr	r2, [r7, #12]
 80122f2:	33b6      	adds	r3, #182	; 0xb6
 80122f4:	009b      	lsls	r3, r3, #2
 80122f6:	4413      	add	r3, r2
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	689b      	ldr	r3, [r3, #8]
 80122fc:	7afa      	ldrb	r2, [r7, #11]
 80122fe:	4610      	mov	r0, r2
 8012300:	4798      	blx	r3
 8012302:	4603      	mov	r3, r0
 8012304:	2b00      	cmp	r3, #0
 8012306:	d008      	beq.n	801231a <SCSI_Write10+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012308:	7af9      	ldrb	r1, [r7, #11]
 801230a:	233a      	movs	r3, #58	; 0x3a
 801230c:	2202      	movs	r2, #2
 801230e:	68f8      	ldr	r0, [r7, #12]
 8012310:	f7ff fd32 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 8012314:	f04f 33ff 	mov.w	r3, #4294967295
 8012318:	e085      	b.n	8012426 <SCSI_Write10+0x1d6>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012320:	68fa      	ldr	r2, [r7, #12]
 8012322:	33b6      	adds	r3, #182	; 0xb6
 8012324:	009b      	lsls	r3, r3, #2
 8012326:	4413      	add	r3, r2
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	68db      	ldr	r3, [r3, #12]
 801232c:	7afa      	ldrb	r2, [r7, #11]
 801232e:	4610      	mov	r0, r2
 8012330:	4798      	blx	r3
 8012332:	4603      	mov	r3, r0
 8012334:	2b00      	cmp	r3, #0
 8012336:	d008      	beq.n	801234a <SCSI_Write10+0xfa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012338:	7af9      	ldrb	r1, [r7, #11]
 801233a:	2327      	movs	r3, #39	; 0x27
 801233c:	2202      	movs	r2, #2
 801233e:	68f8      	ldr	r0, [r7, #12]
 8012340:	f7ff fd1a 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 8012344:	f04f 33ff 	mov.w	r3, #4294967295
 8012348:	e06d      	b.n	8012426 <SCSI_Write10+0x1d6>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	3302      	adds	r3, #2
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	3303      	adds	r3, #3
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801235a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	3304      	adds	r3, #4
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012364:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012366:	687a      	ldr	r2, [r7, #4]
 8012368:	3205      	adds	r2, #5
 801236a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801236c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801236e:	697a      	ldr	r2, [r7, #20]
 8012370:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012374:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	3307      	adds	r3, #7
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801237e:	687a      	ldr	r2, [r7, #4]
 8012380:	3208      	adds	r2, #8
 8012382:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012384:	4313      	orrs	r3, r2
 8012386:	697a      	ldr	r2, [r7, #20]
 8012388:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801238c:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012394:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801239e:	7af9      	ldrb	r1, [r7, #11]
 80123a0:	68f8      	ldr	r0, [r7, #12]
 80123a2:	f000 f989 	bl	80126b8 <SCSI_CheckAddressRange>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	da02      	bge.n	80123b2 <SCSI_Write10+0x162>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80123ac:	f04f 33ff 	mov.w	r3, #4294967295
 80123b0:	e039      	b.n	8012426 <SCSI_Write10+0x1d6>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80123b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ba:	697a      	ldr	r2, [r7, #20]
 80123bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80123c0:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80123c4:	fb02 f303 	mul.w	r3, r2, r3
 80123c8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80123d0:	699b      	ldr	r3, [r3, #24]
 80123d2:	693a      	ldr	r2, [r7, #16]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d00b      	beq.n	80123f0 <SCSI_Write10+0x1a0>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80123de:	7f59      	ldrb	r1, [r3, #29]
 80123e0:	2320      	movs	r3, #32
 80123e2:	2205      	movs	r2, #5
 80123e4:	68f8      	ldr	r0, [r7, #12]
 80123e6:	f7ff fcc7 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 80123ea:	f04f 33ff 	mov.w	r3, #4294967295
 80123ee:	e01a      	b.n	8012426 <SCSI_Write10+0x1d6>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80123f6:	bf28      	it	cs
 80123f8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80123fc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	2201      	movs	r2, #1
 8012402:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012404:	4b0a      	ldr	r3, [pc, #40]	; (8012430 <SCSI_Write10+0x1e0>)
 8012406:	7819      	ldrb	r1, [r3, #0]
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	f103 0210 	add.w	r2, r3, #16
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	68f8      	ldr	r0, [r7, #12]
 8012412:	f006 fdf0 	bl	8018ff6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012416:	2300      	movs	r3, #0
 8012418:	e005      	b.n	8012426 <SCSI_Write10+0x1d6>
    return SCSI_ProcessWrite(pdev, lun);
 801241a:	7afb      	ldrb	r3, [r7, #11]
 801241c:	4619      	mov	r1, r3
 801241e:	68f8      	ldr	r0, [r7, #12]
 8012420:	f000 fa1c 	bl	801285c <SCSI_ProcessWrite>
 8012424:	4603      	mov	r3, r0
}
 8012426:	4618      	mov	r0, r3
 8012428:	3718      	adds	r7, #24
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	2400014d 	.word	0x2400014d

08012434 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b086      	sub	sp, #24
 8012438:	af00      	add	r7, sp, #0
 801243a:	60f8      	str	r0, [r7, #12]
 801243c:	460b      	mov	r3, r1
 801243e:	607a      	str	r2, [r7, #4]
 8012440:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012448:	68fa      	ldr	r2, [r7, #12]
 801244a:	33b2      	adds	r3, #178	; 0xb2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	4413      	add	r3, r2
 8012450:	685b      	ldr	r3, [r3, #4]
 8012452:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d102      	bne.n	8012460 <SCSI_Write12+0x2c>
  {
    return -1;
 801245a:	f04f 33ff 	mov.w	r3, #4294967295
 801245e:	e0e4      	b.n	801262a <SCSI_Write12+0x1f6>
  }
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012466:	b2db      	uxtb	r3, r3
 8012468:	2202      	movs	r2, #2
 801246a:	2100      	movs	r1, #0
 801246c:	68f8      	ldr	r0, [r7, #12]
 801246e:	f001 f810 	bl	8013492 <USBD_CoreGetEPAdd>
 8012472:	4603      	mov	r3, r0
 8012474:	461a      	mov	r2, r3
 8012476:	4b6f      	ldr	r3, [pc, #444]	; (8012634 <SCSI_Write12+0x200>)
 8012478:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	7a1b      	ldrb	r3, [r3, #8]
 801247e:	2b00      	cmp	r3, #0
 8012480:	f040 80cd 	bne.w	801261e <SCSI_Write12+0x1ea>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801248a:	699b      	ldr	r3, [r3, #24]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d10b      	bne.n	80124a8 <SCSI_Write12+0x74>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012496:	7f59      	ldrb	r1, [r3, #29]
 8012498:	2320      	movs	r3, #32
 801249a:	2205      	movs	r2, #5
 801249c:	68f8      	ldr	r0, [r7, #12]
 801249e:	f7ff fc6b 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 80124a2:	f04f 33ff 	mov.w	r3, #4294967295
 80124a6:	e0c0      	b.n	801262a <SCSI_Write12+0x1f6>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80124ae:	7f1b      	ldrb	r3, [r3, #28]
 80124b0:	b25b      	sxtb	r3, r3
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	da0b      	bge.n	80124ce <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80124bc:	7f59      	ldrb	r1, [r3, #29]
 80124be:	2320      	movs	r3, #32
 80124c0:	2205      	movs	r2, #5
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f7ff fc58 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 80124c8:	f04f 33ff 	mov.w	r3, #4294967295
 80124cc:	e0ad      	b.n	801262a <SCSI_Write12+0x1f6>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80124d4:	68fa      	ldr	r2, [r7, #12]
 80124d6:	33b6      	adds	r3, #182	; 0xb6
 80124d8:	009b      	lsls	r3, r3, #2
 80124da:	4413      	add	r3, r2
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	689b      	ldr	r3, [r3, #8]
 80124e0:	7afa      	ldrb	r2, [r7, #11]
 80124e2:	4610      	mov	r0, r2
 80124e4:	4798      	blx	r3
 80124e6:	4603      	mov	r3, r0
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d00b      	beq.n	8012504 <SCSI_Write12+0xd0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80124ec:	7af9      	ldrb	r1, [r7, #11]
 80124ee:	233a      	movs	r3, #58	; 0x3a
 80124f0:	2202      	movs	r2, #2
 80124f2:	68f8      	ldr	r0, [r7, #12]
 80124f4:	f7ff fc40 	bl	8011d78 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	2205      	movs	r2, #5
 80124fc:	721a      	strb	r2, [r3, #8]
      return -1;
 80124fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012502:	e092      	b.n	801262a <SCSI_Write12+0x1f6>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801250a:	68fa      	ldr	r2, [r7, #12]
 801250c:	33b6      	adds	r3, #182	; 0xb6
 801250e:	009b      	lsls	r3, r3, #2
 8012510:	4413      	add	r3, r2
 8012512:	685b      	ldr	r3, [r3, #4]
 8012514:	68db      	ldr	r3, [r3, #12]
 8012516:	7afa      	ldrb	r2, [r7, #11]
 8012518:	4610      	mov	r0, r2
 801251a:	4798      	blx	r3
 801251c:	4603      	mov	r3, r0
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00b      	beq.n	801253a <SCSI_Write12+0x106>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012522:	7af9      	ldrb	r1, [r7, #11]
 8012524:	2327      	movs	r3, #39	; 0x27
 8012526:	2202      	movs	r2, #2
 8012528:	68f8      	ldr	r0, [r7, #12]
 801252a:	f7ff fc25 	bl	8011d78 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	2205      	movs	r2, #5
 8012532:	721a      	strb	r2, [r3, #8]
      return -1;
 8012534:	f04f 33ff 	mov.w	r3, #4294967295
 8012538:	e077      	b.n	801262a <SCSI_Write12+0x1f6>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	3302      	adds	r3, #2
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	3303      	adds	r3, #3
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801254a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	3304      	adds	r3, #4
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012554:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	3205      	adds	r2, #5
 801255a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801255c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801255e:	697a      	ldr	r2, [r7, #20]
 8012560:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012564:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	3306      	adds	r3, #6
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	3307      	adds	r3, #7
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012576:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	3308      	adds	r3, #8
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012580:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	3209      	adds	r2, #9
 8012586:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012588:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801258a:	697a      	ldr	r2, [r7, #20]
 801258c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012590:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012598:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80125a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125a2:	7af9      	ldrb	r1, [r7, #11]
 80125a4:	68f8      	ldr	r0, [r7, #12]
 80125a6:	f000 f887 	bl	80126b8 <SCSI_CheckAddressRange>
 80125aa:	4603      	mov	r3, r0
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	da02      	bge.n	80125b6 <SCSI_Write12+0x182>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80125b0:	f04f 33ff 	mov.w	r3, #4294967295
 80125b4:	e039      	b.n	801262a <SCSI_Write12+0x1f6>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80125bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125be:	697a      	ldr	r2, [r7, #20]
 80125c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80125c4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80125c8:	fb02 f303 	mul.w	r3, r2, r3
 80125cc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80125d4:	699b      	ldr	r3, [r3, #24]
 80125d6:	693a      	ldr	r2, [r7, #16]
 80125d8:	429a      	cmp	r2, r3
 80125da:	d00b      	beq.n	80125f4 <SCSI_Write12+0x1c0>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80125e2:	7f59      	ldrb	r1, [r3, #29]
 80125e4:	2320      	movs	r3, #32
 80125e6:	2205      	movs	r2, #5
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	f7ff fbc5 	bl	8011d78 <SCSI_SenseCode>
      return -1;
 80125ee:	f04f 33ff 	mov.w	r3, #4294967295
 80125f2:	e01a      	b.n	801262a <SCSI_Write12+0x1f6>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80125fa:	bf28      	it	cs
 80125fc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8012600:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	2201      	movs	r2, #1
 8012606:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012608:	4b0a      	ldr	r3, [pc, #40]	; (8012634 <SCSI_Write12+0x200>)
 801260a:	7819      	ldrb	r1, [r3, #0]
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	f103 0210 	add.w	r2, r3, #16
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f006 fcee 	bl	8018ff6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801261a:	2300      	movs	r3, #0
 801261c:	e005      	b.n	801262a <SCSI_Write12+0x1f6>
    return SCSI_ProcessWrite(pdev, lun);
 801261e:	7afb      	ldrb	r3, [r7, #11]
 8012620:	4619      	mov	r1, r3
 8012622:	68f8      	ldr	r0, [r7, #12]
 8012624:	f000 f91a 	bl	801285c <SCSI_ProcessWrite>
 8012628:	4603      	mov	r3, r0
}
 801262a:	4618      	mov	r0, r3
 801262c:	3718      	adds	r7, #24
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	2400014d 	.word	0x2400014d

08012638 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b086      	sub	sp, #24
 801263c:	af00      	add	r7, sp, #0
 801263e:	60f8      	str	r0, [r7, #12]
 8012640:	460b      	mov	r3, r1
 8012642:	607a      	str	r2, [r7, #4]
 8012644:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801264c:	68fa      	ldr	r2, [r7, #12]
 801264e:	33b2      	adds	r3, #178	; 0xb2
 8012650:	009b      	lsls	r3, r3, #2
 8012652:	4413      	add	r3, r2
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d102      	bne.n	8012664 <SCSI_Verify10+0x2c>
  {
    return -1;
 801265e:	f04f 33ff 	mov.w	r3, #4294967295
 8012662:	e025      	b.n	80126b0 <SCSI_Verify10+0x78>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	3301      	adds	r3, #1
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	f003 0302 	and.w	r3, r3, #2
 801266e:	2b00      	cmp	r3, #0
 8012670:	d008      	beq.n	8012684 <SCSI_Verify10+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012672:	7af9      	ldrb	r1, [r7, #11]
 8012674:	2324      	movs	r3, #36	; 0x24
 8012676:	2205      	movs	r2, #5
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f7ff fb7d 	bl	8011d78 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801267e:	f04f 33ff 	mov.w	r3, #4294967295
 8012682:	e015      	b.n	80126b0 <SCSI_Verify10+0x78>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801268a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012694:	7af9      	ldrb	r1, [r7, #11]
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	f000 f80e 	bl	80126b8 <SCSI_CheckAddressRange>
 801269c:	4603      	mov	r3, r0
 801269e:	2b00      	cmp	r3, #0
 80126a0:	da02      	bge.n	80126a8 <SCSI_Verify10+0x70>
  {
    return -1; /* error */
 80126a2:	f04f 33ff 	mov.w	r3, #4294967295
 80126a6:	e003      	b.n	80126b0 <SCSI_Verify10+0x78>
  }

  hmsc->bot_data_length = 0U;
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	2200      	movs	r2, #0
 80126ac:	60da      	str	r2, [r3, #12]

  return 0;
 80126ae:	2300      	movs	r3, #0
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3718      	adds	r7, #24
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b086      	sub	sp, #24
 80126bc:	af00      	add	r7, sp, #0
 80126be:	60f8      	str	r0, [r7, #12]
 80126c0:	607a      	str	r2, [r7, #4]
 80126c2:	603b      	str	r3, [r7, #0]
 80126c4:	460b      	mov	r3, r1
 80126c6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80126ce:	68fa      	ldr	r2, [r7, #12]
 80126d0:	33b2      	adds	r3, #178	; 0xb2
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	4413      	add	r3, r2
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d102      	bne.n	80126e6 <SCSI_CheckAddressRange+0x2e>
  {
    return -1;
 80126e0:	f04f 33ff 	mov.w	r3, #4294967295
 80126e4:	e012      	b.n	801270c <SCSI_CheckAddressRange+0x54>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80126e6:	687a      	ldr	r2, [r7, #4]
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	441a      	add	r2, r3
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80126f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d908      	bls.n	801270a <SCSI_CheckAddressRange+0x52>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80126f8:	7af9      	ldrb	r1, [r7, #11]
 80126fa:	2321      	movs	r3, #33	; 0x21
 80126fc:	2205      	movs	r2, #5
 80126fe:	68f8      	ldr	r0, [r7, #12]
 8012700:	f7ff fb3a 	bl	8011d78 <SCSI_SenseCode>
    return -1;
 8012704:	f04f 33ff 	mov.w	r3, #4294967295
 8012708:	e000      	b.n	801270c <SCSI_CheckAddressRange+0x54>
  }

  return 0;
 801270a:	2300      	movs	r3, #0
}
 801270c:	4618      	mov	r0, r3
 801270e:	3718      	adds	r7, #24
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012714:	b590      	push	{r4, r7, lr}
 8012716:	b085      	sub	sp, #20
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	460b      	mov	r3, r1
 801271e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	33b2      	adds	r3, #178	; 0xb2
 801272a:	009b      	lsls	r3, r3, #2
 801272c:	4413      	add	r3, r2
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d102      	bne.n	801273e <SCSI_ProcessRead+0x2a>
  {
    return -1;
 8012738:	f04f 33ff 	mov.w	r3, #4294967295
 801273c:	e088      	b.n	8012850 <SCSI_ProcessRead+0x13c>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012746:	68fa      	ldr	r2, [r7, #12]
 8012748:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801274c:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8012750:	fb02 f303 	mul.w	r3, r2, r3
 8012754:	60bb      	str	r3, [r7, #8]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801275c:	b2db      	uxtb	r3, r3
 801275e:	2202      	movs	r2, #2
 8012760:	2180      	movs	r1, #128	; 0x80
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f000 fe95 	bl	8013492 <USBD_CoreGetEPAdd>
 8012768:	4603      	mov	r3, r0
 801276a:	461a      	mov	r2, r3
 801276c:	4b3a      	ldr	r3, [pc, #232]	; (8012858 <SCSI_ProcessRead+0x144>)
 801276e:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012776:	bf28      	it	cs
 8012778:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801277c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	33b6      	adds	r3, #182	; 0xb6
 8012788:	009b      	lsls	r3, r3, #2
 801278a:	4413      	add	r3, r2
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	691c      	ldr	r4, [r3, #16]
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f103 0110 	add.w	r1, r3, #16
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801279c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80127a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80127a8:	4618      	mov	r0, r3
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	78f8      	ldrb	r0, [r7, #3]
 80127b4:	47a0      	blx	r4
 80127b6:	4603      	mov	r3, r0
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	da08      	bge.n	80127ce <SCSI_ProcessRead+0xba>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80127bc:	78f9      	ldrb	r1, [r7, #3]
 80127be:	2311      	movs	r3, #17
 80127c0:	2204      	movs	r2, #4
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f7ff fad8 	bl	8011d78 <SCSI_SenseCode>
    return -1;
 80127c8:	f04f 33ff 	mov.w	r3, #4294967295
 80127cc:	e040      	b.n	8012850 <SCSI_ProcessRead+0x13c>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80127ce:	4b22      	ldr	r3, [pc, #136]	; (8012858 <SCSI_ProcessRead+0x144>)
 80127d0:	7819      	ldrb	r1, [r3, #0]
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	f103 0210 	add.w	r2, r3, #16
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f006 fbea 	bl	8018fb4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80127e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80127ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80127f2:	4619      	mov	r1, r3
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80127fa:	4413      	add	r3, r2
 80127fc:	68fa      	ldr	r2, [r7, #12]
 80127fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012802:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801280a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012812:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012816:	4619      	mov	r1, r3
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	fbb3 f3f1 	udiv	r3, r3, r1
 801281e:	1ad3      	subs	r3, r2, r3
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012826:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801282e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	1ad3      	subs	r3, r2, r3
 8012834:	68fa      	ldr	r2, [r7, #12]
 8012836:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801283a:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012844:	2b00      	cmp	r3, #0
 8012846:	d102      	bne.n	801284e <SCSI_ProcessRead+0x13a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	2203      	movs	r2, #3
 801284c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801284e:	2300      	movs	r3, #0
}
 8012850:	4618      	mov	r0, r3
 8012852:	3714      	adds	r7, #20
 8012854:	46bd      	mov	sp, r7
 8012856:	bd90      	pop	{r4, r7, pc}
 8012858:	2400014c 	.word	0x2400014c

0801285c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801285c:	b590      	push	{r4, r7, lr}
 801285e:	b085      	sub	sp, #20
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	460b      	mov	r3, r1
 8012866:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	33b2      	adds	r3, #178	; 0xb2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d102      	bne.n	8012886 <SCSI_ProcessWrite+0x2a>
  {
    return -1;
 8012880:	f04f 33ff 	mov.w	r3, #4294967295
 8012884:	e09b      	b.n	80129be <SCSI_ProcessWrite+0x162>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801288e:	68fa      	ldr	r2, [r7, #12]
 8012890:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012894:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8012898:	fb02 f303 	mul.w	r3, r2, r3
 801289c:	60bb      	str	r3, [r7, #8]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80128a4:	b2db      	uxtb	r3, r3
 80128a6:	2202      	movs	r2, #2
 80128a8:	2100      	movs	r1, #0
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 fdf1 	bl	8013492 <USBD_CoreGetEPAdd>
 80128b0:	4603      	mov	r3, r0
 80128b2:	461a      	mov	r2, r3
 80128b4:	4b44      	ldr	r3, [pc, #272]	; (80129c8 <SCSI_ProcessWrite+0x16c>)
 80128b6:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80128be:	bf28      	it	cs
 80128c0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80128c4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	33b6      	adds	r3, #182	; 0xb6
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	4413      	add	r3, r2
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	695c      	ldr	r4, [r3, #20]
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f103 0110 	add.w	r1, r3, #16
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80128e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80128ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80128f0:	4618      	mov	r0, r3
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80128f8:	b29b      	uxth	r3, r3
 80128fa:	78f8      	ldrb	r0, [r7, #3]
 80128fc:	47a0      	blx	r4
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	da08      	bge.n	8012916 <SCSI_ProcessWrite+0xba>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8012904:	78f9      	ldrb	r1, [r7, #3]
 8012906:	2303      	movs	r3, #3
 8012908:	2204      	movs	r2, #4
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f7ff fa34 	bl	8011d78 <SCSI_SenseCode>
    return -1;
 8012910:	f04f 33ff 	mov.w	r3, #4294967295
 8012914:	e053      	b.n	80129be <SCSI_ProcessWrite+0x162>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801291c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012924:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012928:	4619      	mov	r1, r3
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012930:	4413      	add	r3, r2
 8012932:	68fa      	ldr	r2, [r7, #12]
 8012934:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012938:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012948:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801294c:	4619      	mov	r1, r3
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	fbb3 f3f1 	udiv	r3, r3, r1
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	68fa      	ldr	r2, [r7, #12]
 8012958:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801295c:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	1ad3      	subs	r3, r2, r3
 801296a:	68fa      	ldr	r2, [r7, #12]
 801296c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012970:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801297a:	2b00      	cmp	r3, #0
 801297c:	d104      	bne.n	8012988 <SCSI_ProcessWrite+0x12c>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801297e:	2100      	movs	r1, #0
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f7fe fbb3 	bl	80110ec <MSC_BOT_SendCSW>
 8012986:	e019      	b.n	80129bc <SCSI_ProcessWrite+0x160>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012990:	68fa      	ldr	r2, [r7, #12]
 8012992:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012996:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 801299a:	fb02 f303 	mul.w	r3, r2, r3
 801299e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80129a2:	bf28      	it	cs
 80129a4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80129a8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80129aa:	4b07      	ldr	r3, [pc, #28]	; (80129c8 <SCSI_ProcessWrite+0x16c>)
 80129ac:	7819      	ldrb	r1, [r3, #0]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	f103 0210 	add.w	r2, r3, #16
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f006 fb1d 	bl	8018ff6 <USBD_LL_PrepareReceive>
  }

  return 0;
 80129bc:	2300      	movs	r3, #0
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3714      	adds	r7, #20
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd90      	pop	{r4, r7, pc}
 80129c6:	bf00      	nop
 80129c8:	2400014d 	.word	0x2400014d

080129cc <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80129cc:	b480      	push	{r7}
 80129ce:	b087      	sub	sp, #28
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	60f8      	str	r0, [r7, #12]
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	4613      	mov	r3, r2
 80129d8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80129da:	88fb      	ldrh	r3, [r7, #6]
 80129dc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d102      	bne.n	80129ea <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80129e4:	f04f 33ff 	mov.w	r3, #4294967295
 80129e8:	e013      	b.n	8012a12 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80129ea:	8afa      	ldrh	r2, [r7, #22]
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80129f0:	e00b      	b.n	8012a0a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80129f2:	8afb      	ldrh	r3, [r7, #22]
 80129f4:	3b01      	subs	r3, #1
 80129f6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80129f8:	8afb      	ldrh	r3, [r7, #22]
 80129fa:	68ba      	ldr	r2, [r7, #8]
 80129fc:	441a      	add	r2, r3
 80129fe:	8afb      	ldrh	r3, [r7, #22]
 8012a00:	7811      	ldrb	r1, [r2, #0]
 8012a02:	68fa      	ldr	r2, [r7, #12]
 8012a04:	4413      	add	r3, r2
 8012a06:	460a      	mov	r2, r1
 8012a08:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8012a0a:	8afb      	ldrh	r3, [r7, #22]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d1f0      	bne.n	80129f2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8012a10:	2300      	movs	r3, #0
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	371c      	adds	r7, #28
 8012a16:	46bd      	mov	sp, r7
 8012a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1c:	4770      	bx	lr

08012a1e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012a1e:	b580      	push	{r7, lr}
 8012a20:	b086      	sub	sp, #24
 8012a22:	af00      	add	r7, sp, #0
 8012a24:	60f8      	str	r0, [r7, #12]
 8012a26:	60b9      	str	r1, [r7, #8]
 8012a28:	4613      	mov	r3, r2
 8012a2a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d101      	bne.n	8012a36 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012a32:	2303      	movs	r3, #3
 8012a34:	e040      	b.n	8012ab8 <USBD_Init+0x9a>
  }

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012a36:	2300      	movs	r3, #0
 8012a38:	617b      	str	r3, [r7, #20]
 8012a3a:	e022      	b.n	8012a82 <USBD_Init+0x64>
  {
    /* Unlink previous class*/
    pdev->pClass[i] = NULL;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	697a      	ldr	r2, [r7, #20]
 8012a40:	32ae      	adds	r2, #174	; 0xae
 8012a42:	2100      	movs	r1, #0
 8012a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pUserData[i] = NULL;
 8012a48:	68fa      	ldr	r2, [r7, #12]
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	33b6      	adds	r3, #182	; 0xb6
 8012a4e:	009b      	lsls	r3, r3, #2
 8012a50:	4413      	add	r3, r2
 8012a52:	2200      	movs	r2, #0
 8012a54:	605a      	str	r2, [r3, #4]

    /* Set class as inactive */
    pdev->tclasslist[i].Active = 0;
 8012a56:	68f9      	ldr	r1, [r7, #12]
 8012a58:	697a      	ldr	r2, [r7, #20]
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	00db      	lsls	r3, r3, #3
 8012a5e:	1a9b      	subs	r3, r3, r2
 8012a60:	00db      	lsls	r3, r3, #3
 8012a62:	440b      	add	r3, r1
 8012a64:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8012a68:	2200      	movs	r2, #0
 8012a6a:	601a      	str	r2, [r3, #0]
    pdev->NumClasses = 0;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
    pdev->classId = 0;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	2200      	movs	r2, #0
 8012a78:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	3301      	adds	r3, #1
 8012a80:	617b      	str	r3, [r7, #20]
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	2b03      	cmp	r3, #3
 8012a86:	d9d9      	bls.n	8012a3c <USBD_Init+0x1e>
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
  pdev->pUserData[0] = NULL;
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d003      	beq.n	8012a9e <USBD_Init+0x80>
  {
    pdev->pDesc = pdesc;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	68ba      	ldr	r2, [r7, #8]
 8012a9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	79fa      	ldrb	r2, [r7, #7]
 8012aaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012aac:	68f8      	ldr	r0, [r7, #12]
 8012aae:	f006 f927 	bl	8018d00 <USBD_LL_Init>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	74fb      	strb	r3, [r7, #19]

  return ret;
 8012ab6:	7cfb      	ldrb	r3, [r7, #19]
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3718      	adds	r7, #24
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <USBD_RegisterClassComposite>:
  * @param  EpAddr: Endpoint Address handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClassComposite(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass,
                                                USBD_CompositeClassTypeDef classtype, uint8_t *EpAddr)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b086      	sub	sp, #24
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	603b      	str	r3, [r7, #0]
 8012acc:	4613      	mov	r3, r2
 8012ace:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	75fb      	strb	r3, [r7, #23]
  uint16_t len = 0U;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	82bb      	strh	r3, [r7, #20]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012ade:	2b03      	cmp	r3, #3
 8012ae0:	d835      	bhi.n	8012b4e <USBD_RegisterClassComposite+0x8e>
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8012ae8:	2b03      	cmp	r3, #3
 8012aea:	d830      	bhi.n	8012b4e <USBD_RegisterClassComposite+0x8e>
  {
    if ((uint32_t)pclass != 0U)
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d02b      	beq.n	8012b4a <USBD_RegisterClassComposite+0x8a>
    {
      /* Link the class to the USB Device handle */
      pdev->pClass[pdev->classId] = pclass;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	32ae      	adds	r2, #174	; 0xae
 8012afc:	68b9      	ldr	r1, [r7, #8]
 8012afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      ret = USBD_OK;
 8012b02:	2300      	movs	r3, #0
 8012b04:	75fb      	strb	r3, [r7, #23]

      pdev->tclasslist[pdev->classId].EpAdd = EpAddr;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8012b0c:	68f9      	ldr	r1, [r7, #12]
 8012b0e:	4613      	mov	r3, r2
 8012b10:	00db      	lsls	r3, r3, #3
 8012b12:	1a9b      	subs	r3, r3, r2
 8012b14:	00db      	lsls	r3, r3, #3
 8012b16:	440b      	add	r3, r1
 8012b18:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8012b1c:	683a      	ldr	r2, [r7, #0]
 8012b1e:	601a      	str	r2, [r3, #0]

      /* Call the composite class builder */
      (void)USBD_CMPSIT_AddClass(pdev, pclass, classtype, 0);
 8012b20:	79fa      	ldrb	r2, [r7, #7]
 8012b22:	2300      	movs	r3, #0
 8012b24:	68b9      	ldr	r1, [r7, #8]
 8012b26:	68f8      	ldr	r0, [r7, #12]
 8012b28:	f7fd fc16 	bl	8010358 <USBD_CMPSIT_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012b32:	1c5a      	adds	r2, r3, #1
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
      pdev->NumClasses ++;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8012b40:	1c5a      	adds	r2, r3, #1
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 8012b48:	e001      	b.n	8012b4e <USBD_RegisterClassComposite+0x8e>
    else
    {
#if (USBD_DEBUG_LEVEL > 1U)
      USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
      ret = USBD_FAIL;
 8012b4a:	2303      	movs	r3, #3
 8012b4c:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (ret == USBD_OK)
 8012b4e:	7dfb      	ldrb	r3, [r7, #23]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d109      	bne.n	8012b68 <USBD_RegisterClassComposite+0xa8>
  {
    /* Get Device Configuration Descriptor */
#ifdef USE_USB_HS
    pdev->pConfDesc = USBD_CMPSIT.GetHSConfigDescriptor(&len);
#else /* Default USE_USB_FS */
    pdev->pConfDesc = USBD_CMPSIT.GetFSConfigDescriptor(&len);
 8012b54:	4b07      	ldr	r3, [pc, #28]	; (8012b74 <USBD_RegisterClassComposite+0xb4>)
 8012b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b58:	f107 0214 	add.w	r2, r7, #20
 8012b5c:	4610      	mov	r0, r2
 8012b5e:	4798      	blx	r3
 8012b60:	4602      	mov	r2, r0
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
#endif /* USE_USB_FS */
  }

  return ret;
 8012b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	3718      	adds	r7, #24
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}
 8012b72:	bf00      	nop
 8012b74:	24000060 	.word	0x24000060

08012b78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2200      	movs	r2, #0
 8012b84:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f006 f90b 	bl	8018da4 <USBD_LL_Start>
 8012b8e:	4603      	mov	r3, r0
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3708      	adds	r7, #8
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}

08012b98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012ba0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	370c      	adds	r7, #12
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr

08012bae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012bae:	b580      	push	{r7, lr}
 8012bb0:	b084      	sub	sp, #16
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	6078      	str	r0, [r7, #4]
 8012bb6:	460b      	mov	r3, r1
 8012bb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	60bb      	str	r3, [r7, #8]
 8012bc2:	e028      	b.n	8012c16 <USBD_SetClassConfig+0x68>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8012bc4:	6879      	ldr	r1, [r7, #4]
 8012bc6:	68ba      	ldr	r2, [r7, #8]
 8012bc8:	4613      	mov	r3, r2
 8012bca:	00db      	lsls	r3, r3, #3
 8012bcc:	1a9b      	subs	r3, r3, r2
 8012bce:	00db      	lsls	r3, r3, #3
 8012bd0:	440b      	add	r3, r1
 8012bd2:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2b01      	cmp	r3, #1
 8012bda:	d119      	bne.n	8012c10 <USBD_SetClassConfig+0x62>
    {
      if (pdev->pClass[i] != NULL)
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	68ba      	ldr	r2, [r7, #8]
 8012be0:	32ae      	adds	r2, #174	; 0xae
 8012be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d012      	beq.n	8012c10 <USBD_SetClassConfig+0x62>
      {
        pdev->classId = i;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	68ba      	ldr	r2, [r7, #8]
 8012bee:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Set configuration  and Start the Class*/
        if (pdev->pClass[i]->Init(pdev, cfgidx) != 0U)
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	68ba      	ldr	r2, [r7, #8]
 8012bf6:	32ae      	adds	r2, #174	; 0xae
 8012bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	78fa      	ldrb	r2, [r7, #3]
 8012c00:	4611      	mov	r1, r2
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	4798      	blx	r3
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d001      	beq.n	8012c10 <USBD_SetClassConfig+0x62>
        {
          ret = USBD_FAIL;
 8012c0c:	2303      	movs	r3, #3
 8012c0e:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	3301      	adds	r3, #1
 8012c14:	60bb      	str	r3, [r7, #8]
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	2b03      	cmp	r3, #3
 8012c1a:	d9d3      	bls.n	8012bc4 <USBD_SetClassConfig+0x16>
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}

08012c26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c26:	b580      	push	{r7, lr}
 8012c28:	b084      	sub	sp, #16
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
 8012c2e:	460b      	mov	r3, r1
 8012c30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c32:	2300      	movs	r3, #0
 8012c34:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012c36:	2300      	movs	r3, #0
 8012c38:	60bb      	str	r3, [r7, #8]
 8012c3a:	e028      	b.n	8012c8e <USBD_ClrClassConfig+0x68>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8012c3c:	6879      	ldr	r1, [r7, #4]
 8012c3e:	68ba      	ldr	r2, [r7, #8]
 8012c40:	4613      	mov	r3, r2
 8012c42:	00db      	lsls	r3, r3, #3
 8012c44:	1a9b      	subs	r3, r3, r2
 8012c46:	00db      	lsls	r3, r3, #3
 8012c48:	440b      	add	r3, r1
 8012c4a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	2b01      	cmp	r3, #1
 8012c52:	d119      	bne.n	8012c88 <USBD_ClrClassConfig+0x62>
    {
      if (pdev->pClass[i] != NULL)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	68ba      	ldr	r2, [r7, #8]
 8012c58:	32ae      	adds	r2, #174	; 0xae
 8012c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d012      	beq.n	8012c88 <USBD_ClrClassConfig+0x62>
      {
        pdev->classId = i;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	68ba      	ldr	r2, [r7, #8]
 8012c66:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process */
        if (pdev->pClass[i]->DeInit(pdev, cfgidx) != 0U)
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	68ba      	ldr	r2, [r7, #8]
 8012c6e:	32ae      	adds	r2, #174	; 0xae
 8012c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	78fa      	ldrb	r2, [r7, #3]
 8012c78:	4611      	mov	r1, r2
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	4798      	blx	r3
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d001      	beq.n	8012c88 <USBD_ClrClassConfig+0x62>
        {
          ret = USBD_FAIL;
 8012c84:	2303      	movs	r3, #3
 8012c86:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	60bb      	str	r3, [r7, #8]
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	2b03      	cmp	r3, #3
 8012c92:	d9d3      	bls.n	8012c3c <USBD_ClrClassConfig+0x16>
  {
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3710      	adds	r7, #16
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}

08012c9e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012c9e:	b580      	push	{r7, lr}
 8012ca0:	b084      	sub	sp, #16
 8012ca2:	af00      	add	r7, sp, #0
 8012ca4:	6078      	str	r0, [r7, #4]
 8012ca6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012cae:	6839      	ldr	r1, [r7, #0]
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f001 fa5a 	bl	801416a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2201      	movs	r2, #1
 8012cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8012cc4:	461a      	mov	r2, r3
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012cd2:	f003 031f 	and.w	r3, r3, #31
 8012cd6:	2b02      	cmp	r3, #2
 8012cd8:	d01a      	beq.n	8012d10 <USBD_LL_SetupStage+0x72>
 8012cda:	2b02      	cmp	r3, #2
 8012cdc:	d822      	bhi.n	8012d24 <USBD_LL_SetupStage+0x86>
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d002      	beq.n	8012ce8 <USBD_LL_SetupStage+0x4a>
 8012ce2:	2b01      	cmp	r3, #1
 8012ce4:	d00a      	beq.n	8012cfc <USBD_LL_SetupStage+0x5e>
 8012ce6:	e01d      	b.n	8012d24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012cee:	4619      	mov	r1, r3
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f000 fc4d 	bl	8013590 <USBD_StdDevReq>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8012cfa:	e020      	b.n	8012d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012d02:	4619      	mov	r1, r3
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f000 fcb5 	bl	8013674 <USBD_StdItfReq>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8012d0e:	e016      	b.n	8012d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012d16:	4619      	mov	r1, r3
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f000 fd17 	bl	801374c <USBD_StdEPReq>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	73fb      	strb	r3, [r7, #15]
      break;
 8012d22:	e00c      	b.n	8012d3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012d2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	4619      	mov	r1, r3
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f006 f8b5 	bl	8018ea2 <USBD_LL_StallEP>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8012d3c:	bf00      	nop
  }

  return ret;
 8012d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3710      	adds	r7, #16
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b086      	sub	sp, #24
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	460b      	mov	r3, r1
 8012d52:	607a      	str	r2, [r7, #4]
 8012d54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012d56:	2300      	movs	r3, #0
 8012d58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012d5a:	7afb      	ldrb	r3, [r7, #11]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d16e      	bne.n	8012e3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012d66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012d6e:	2b03      	cmp	r3, #3
 8012d70:	f040 8098 	bne.w	8012ea4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012d74:	693b      	ldr	r3, [r7, #16]
 8012d76:	689a      	ldr	r2, [r3, #8]
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	68db      	ldr	r3, [r3, #12]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d913      	bls.n	8012da8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	689a      	ldr	r2, [r3, #8]
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	68db      	ldr	r3, [r3, #12]
 8012d88:	1ad2      	subs	r2, r2, r3
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012d8e:	693b      	ldr	r3, [r7, #16]
 8012d90:	68da      	ldr	r2, [r3, #12]
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	689b      	ldr	r3, [r3, #8]
 8012d96:	4293      	cmp	r3, r2
 8012d98:	bf28      	it	cs
 8012d9a:	4613      	movcs	r3, r2
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	6879      	ldr	r1, [r7, #4]
 8012da0:	68f8      	ldr	r0, [r7, #12]
 8012da2:	f001 fad6 	bl	8014352 <USBD_CtlContinueRx>
 8012da6:	e07d      	b.n	8012ea4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012dae:	f003 031f 	and.w	r3, r3, #31
 8012db2:	2b02      	cmp	r3, #2
 8012db4:	d014      	beq.n	8012de0 <USBD_LL_DataOutStage+0x98>
 8012db6:	2b02      	cmp	r3, #2
 8012db8:	d81d      	bhi.n	8012df6 <USBD_LL_DataOutStage+0xae>
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d002      	beq.n	8012dc4 <USBD_LL_DataOutStage+0x7c>
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d003      	beq.n	8012dca <USBD_LL_DataOutStage+0x82>
 8012dc2:	e018      	b.n	8012df6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	75bb      	strb	r3, [r7, #22]
            break;
 8012dc8:	e018      	b.n	8012dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	4619      	mov	r1, r3
 8012dd4:	68f8      	ldr	r0, [r7, #12]
 8012dd6:	f000 fabf 	bl	8013358 <USBD_CoreFindIF>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	75bb      	strb	r3, [r7, #22]
            break;
 8012dde:	e00d      	b.n	8012dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	4619      	mov	r1, r3
 8012dea:	68f8      	ldr	r0, [r7, #12]
 8012dec:	f000 fb03 	bl	80133f6 <USBD_CoreFindEP>
 8012df0:	4603      	mov	r3, r0
 8012df2:	75bb      	strb	r3, [r7, #22]
            break;
 8012df4:	e002      	b.n	8012dfc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012df6:	2300      	movs	r3, #0
 8012df8:	75bb      	strb	r3, [r7, #22]
            break;
 8012dfa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012dfc:	7dbb      	ldrb	r3, [r7, #22]
 8012dfe:	2b03      	cmp	r3, #3
 8012e00:	d819      	bhi.n	8012e36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	2b03      	cmp	r3, #3
 8012e0c:	d113      	bne.n	8012e36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012e0e:	7dba      	ldrb	r2, [r7, #22]
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	32ae      	adds	r2, #174	; 0xae
 8012e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e18:	691b      	ldr	r3, [r3, #16]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d00b      	beq.n	8012e36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012e1e:	7dba      	ldrb	r2, [r7, #22]
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012e26:	7dba      	ldrb	r2, [r7, #22]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	32ae      	adds	r2, #174	; 0xae
 8012e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e30:	691b      	ldr	r3, [r3, #16]
 8012e32:	68f8      	ldr	r0, [r7, #12]
 8012e34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012e36:	68f8      	ldr	r0, [r7, #12]
 8012e38:	f001 fa9c 	bl	8014374 <USBD_CtlSendStatus>
 8012e3c:	e032      	b.n	8012ea4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012e3e:	7afb      	ldrb	r3, [r7, #11]
 8012e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	4619      	mov	r1, r3
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	f000 fad4 	bl	80133f6 <USBD_CoreFindEP>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012e52:	7dbb      	ldrb	r3, [r7, #22]
 8012e54:	2bff      	cmp	r3, #255	; 0xff
 8012e56:	d025      	beq.n	8012ea4 <USBD_LL_DataOutStage+0x15c>
 8012e58:	7dbb      	ldrb	r3, [r7, #22]
 8012e5a:	2b03      	cmp	r3, #3
 8012e5c:	d822      	bhi.n	8012ea4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e64:	b2db      	uxtb	r3, r3
 8012e66:	2b03      	cmp	r3, #3
 8012e68:	d117      	bne.n	8012e9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012e6a:	7dba      	ldrb	r2, [r7, #22]
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	32ae      	adds	r2, #174	; 0xae
 8012e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e74:	699b      	ldr	r3, [r3, #24]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d00f      	beq.n	8012e9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012e7a:	7dba      	ldrb	r2, [r7, #22]
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012e82:	7dba      	ldrb	r2, [r7, #22]
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	32ae      	adds	r2, #174	; 0xae
 8012e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e8c:	699b      	ldr	r3, [r3, #24]
 8012e8e:	7afa      	ldrb	r2, [r7, #11]
 8012e90:	4611      	mov	r1, r2
 8012e92:	68f8      	ldr	r0, [r7, #12]
 8012e94:	4798      	blx	r3
 8012e96:	4603      	mov	r3, r0
 8012e98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012e9a:	7dfb      	ldrb	r3, [r7, #23]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d001      	beq.n	8012ea4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012ea0:	7dfb      	ldrb	r3, [r7, #23]
 8012ea2:	e000      	b.n	8012ea6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012ea4:	2300      	movs	r3, #0
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3718      	adds	r7, #24
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}

08012eae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012eae:	b580      	push	{r7, lr}
 8012eb0:	b086      	sub	sp, #24
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	60f8      	str	r0, [r7, #12]
 8012eb6:	460b      	mov	r3, r1
 8012eb8:	607a      	str	r2, [r7, #4]
 8012eba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012ebc:	7afb      	ldrb	r3, [r7, #11]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d16f      	bne.n	8012fa2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	3314      	adds	r3, #20
 8012ec6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012ece:	2b02      	cmp	r3, #2
 8012ed0:	d15a      	bne.n	8012f88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	689a      	ldr	r2, [r3, #8]
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	68db      	ldr	r3, [r3, #12]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d914      	bls.n	8012f08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	689a      	ldr	r2, [r3, #8]
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	68db      	ldr	r3, [r3, #12]
 8012ee6:	1ad2      	subs	r2, r2, r3
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012eec:	693b      	ldr	r3, [r7, #16]
 8012eee:	689b      	ldr	r3, [r3, #8]
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	6879      	ldr	r1, [r7, #4]
 8012ef4:	68f8      	ldr	r0, [r7, #12]
 8012ef6:	f001 f9fe 	bl	80142f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012efa:	2300      	movs	r3, #0
 8012efc:	2200      	movs	r2, #0
 8012efe:	2100      	movs	r1, #0
 8012f00:	68f8      	ldr	r0, [r7, #12]
 8012f02:	f006 f878 	bl	8018ff6 <USBD_LL_PrepareReceive>
 8012f06:	e03f      	b.n	8012f88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	68da      	ldr	r2, [r3, #12]
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	689b      	ldr	r3, [r3, #8]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d11c      	bne.n	8012f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	685a      	ldr	r2, [r3, #4]
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d316      	bcc.n	8012f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	685a      	ldr	r2, [r3, #4]
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d20f      	bcs.n	8012f4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012f2e:	2200      	movs	r2, #0
 8012f30:	2100      	movs	r1, #0
 8012f32:	68f8      	ldr	r0, [r7, #12]
 8012f34:	f001 f9df 	bl	80142f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f40:	2300      	movs	r3, #0
 8012f42:	2200      	movs	r2, #0
 8012f44:	2100      	movs	r1, #0
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f006 f855 	bl	8018ff6 <USBD_LL_PrepareReceive>
 8012f4c:	e01c      	b.n	8012f88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	2b03      	cmp	r3, #3
 8012f58:	d10f      	bne.n	8012f7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f60:	68db      	ldr	r3, [r3, #12]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d009      	beq.n	8012f7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	68f8      	ldr	r0, [r7, #12]
 8012f78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f7a:	2180      	movs	r1, #128	; 0x80
 8012f7c:	68f8      	ldr	r0, [r7, #12]
 8012f7e:	f005 ff90 	bl	8018ea2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012f82:	68f8      	ldr	r0, [r7, #12]
 8012f84:	f001 fa09 	bl	801439a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d03a      	beq.n	8013008 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012f92:	68f8      	ldr	r0, [r7, #12]
 8012f94:	f7ff fe00 	bl	8012b98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012fa0:	e032      	b.n	8013008 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012fa2:	7afb      	ldrb	r3, [r7, #11]
 8012fa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012fa8:	b2db      	uxtb	r3, r3
 8012faa:	4619      	mov	r1, r3
 8012fac:	68f8      	ldr	r0, [r7, #12]
 8012fae:	f000 fa22 	bl	80133f6 <USBD_CoreFindEP>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012fb6:	7dfb      	ldrb	r3, [r7, #23]
 8012fb8:	2bff      	cmp	r3, #255	; 0xff
 8012fba:	d025      	beq.n	8013008 <USBD_LL_DataInStage+0x15a>
 8012fbc:	7dfb      	ldrb	r3, [r7, #23]
 8012fbe:	2b03      	cmp	r3, #3
 8012fc0:	d822      	bhi.n	8013008 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fc8:	b2db      	uxtb	r3, r3
 8012fca:	2b03      	cmp	r3, #3
 8012fcc:	d11c      	bne.n	8013008 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012fce:	7dfa      	ldrb	r2, [r7, #23]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	32ae      	adds	r2, #174	; 0xae
 8012fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fd8:	695b      	ldr	r3, [r3, #20]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d014      	beq.n	8013008 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012fde:	7dfa      	ldrb	r2, [r7, #23]
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012fe6:	7dfa      	ldrb	r2, [r7, #23]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	32ae      	adds	r2, #174	; 0xae
 8012fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ff0:	695b      	ldr	r3, [r3, #20]
 8012ff2:	7afa      	ldrb	r2, [r7, #11]
 8012ff4:	4611      	mov	r1, r2
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	4798      	blx	r3
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012ffe:	7dbb      	ldrb	r3, [r7, #22]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d001      	beq.n	8013008 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013004:	7dbb      	ldrb	r3, [r7, #22]
 8013006:	e000      	b.n	801300a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013008:	2300      	movs	r3, #0
}
 801300a:	4618      	mov	r0, r3
 801300c:	3718      	adds	r7, #24
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}

08013012 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013012:	b580      	push	{r7, lr}
 8013014:	b084      	sub	sp, #16
 8013016:	af00      	add	r7, sp, #0
 8013018:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801301a:	2300      	movs	r3, #0
 801301c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	2201      	movs	r2, #1
 8013022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2200      	movs	r2, #0
 801302a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2200      	movs	r2, #0
 8013032:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2200      	movs	r2, #0
 8013038:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2200      	movs	r2, #0
 8013040:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8013044:	2300      	movs	r3, #0
 8013046:	60bb      	str	r3, [r7, #8]
 8013048:	e032      	b.n	80130b0 <USBD_LL_Reset+0x9e>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 801304a:	6879      	ldr	r1, [r7, #4]
 801304c:	68ba      	ldr	r2, [r7, #8]
 801304e:	4613      	mov	r3, r2
 8013050:	00db      	lsls	r3, r3, #3
 8013052:	1a9b      	subs	r3, r3, r2
 8013054:	00db      	lsls	r3, r3, #3
 8013056:	440b      	add	r3, r1
 8013058:	f503 7342 	add.w	r3, r3, #776	; 0x308
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	2b01      	cmp	r3, #1
 8013060:	d123      	bne.n	80130aa <USBD_LL_Reset+0x98>
    {
      if (pdev->pClass[i] != NULL)
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	68ba      	ldr	r2, [r7, #8]
 8013066:	32ae      	adds	r2, #174	; 0xae
 8013068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d01c      	beq.n	80130aa <USBD_LL_Reset+0x98>
      {
        pdev->classId = i;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	68ba      	ldr	r2, [r7, #8]
 8013074:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process*/

        if (pdev->pClass[i]->DeInit != NULL)
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	68ba      	ldr	r2, [r7, #8]
 801307c:	32ae      	adds	r2, #174	; 0xae
 801307e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d010      	beq.n	80130aa <USBD_LL_Reset+0x98>
        {
          if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	68ba      	ldr	r2, [r7, #8]
 801308c:	32ae      	adds	r2, #174	; 0xae
 801308e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013092:	685b      	ldr	r3, [r3, #4]
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	6852      	ldr	r2, [r2, #4]
 8013098:	b2d2      	uxtb	r2, r2
 801309a:	4611      	mov	r1, r2
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	4798      	blx	r3
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d001      	beq.n	80130aa <USBD_LL_Reset+0x98>
          {
            ret = USBD_FAIL;
 80130a6:	2303      	movs	r3, #3
 80130a8:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	3301      	adds	r3, #1
 80130ae:	60bb      	str	r3, [r7, #8]
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	2b03      	cmp	r3, #3
 80130b4:	d9c9      	bls.n	801304a <USBD_LL_Reset+0x38>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80130b6:	2340      	movs	r3, #64	; 0x40
 80130b8:	2200      	movs	r2, #0
 80130ba:	2100      	movs	r1, #0
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f005 fe8c 	bl	8018dda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2201      	movs	r2, #1
 80130c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2240      	movs	r2, #64	; 0x40
 80130ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80130d2:	2340      	movs	r3, #64	; 0x40
 80130d4:	2200      	movs	r2, #0
 80130d6:	2180      	movs	r1, #128	; 0x80
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f005 fe7e 	bl	8018dda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2201      	movs	r2, #1
 80130e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2240      	movs	r2, #64	; 0x40
 80130e8:	621a      	str	r2, [r3, #32]

  return ret;
 80130ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3710      	adds	r7, #16
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}

080130f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80130f4:	b480      	push	{r7}
 80130f6:	b083      	sub	sp, #12
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	460b      	mov	r3, r1
 80130fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	78fa      	ldrb	r2, [r7, #3]
 8013104:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013106:	2300      	movs	r3, #0
}
 8013108:	4618      	mov	r0, r3
 801310a:	370c      	adds	r7, #12
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr

08013114 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013114:	b480      	push	{r7}
 8013116:	b083      	sub	sp, #12
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013122:	b2db      	uxtb	r3, r3
 8013124:	2b04      	cmp	r3, #4
 8013126:	d006      	beq.n	8013136 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801312e:	b2da      	uxtb	r2, r3
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2204      	movs	r2, #4
 801313a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801313e:	2300      	movs	r3, #0
}
 8013140:	4618      	mov	r0, r3
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr

0801314c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801315a:	b2db      	uxtb	r3, r3
 801315c:	2b04      	cmp	r3, #4
 801315e:	d106      	bne.n	801316e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013166:	b2da      	uxtb	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801316e:	2300      	movs	r3, #0
}
 8013170:	4618      	mov	r0, r3
 8013172:	370c      	adds	r7, #12
 8013174:	46bd      	mov	sp, r7
 8013176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317a:	4770      	bx	lr

0801317c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b084      	sub	sp, #16
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801318a:	b2db      	uxtb	r3, r3
 801318c:	2b03      	cmp	r3, #3
 801318e:	d12f      	bne.n	80131f0 <USBD_LL_SOF+0x74>
  {
#ifdef USE_USBD_COMPOSITE
    /* Parse the table of classes in use */
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8013190:	2300      	movs	r3, #0
 8013192:	60fb      	str	r3, [r7, #12]
 8013194:	e029      	b.n	80131ea <USBD_LL_SOF+0x6e>
    {
      /* Check if current class is in use */
      if ((pdev->tclasslist[i].Active) == 1U)
 8013196:	6879      	ldr	r1, [r7, #4]
 8013198:	68fa      	ldr	r2, [r7, #12]
 801319a:	4613      	mov	r3, r2
 801319c:	00db      	lsls	r3, r3, #3
 801319e:	1a9b      	subs	r3, r3, r2
 80131a0:	00db      	lsls	r3, r3, #3
 80131a2:	440b      	add	r3, r1
 80131a4:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2b01      	cmp	r3, #1
 80131ac:	d11a      	bne.n	80131e4 <USBD_LL_SOF+0x68>
      {
        if (pdev->pClass[i] != NULL)
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	68fa      	ldr	r2, [r7, #12]
 80131b2:	32ae      	adds	r2, #174	; 0xae
 80131b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d013      	beq.n	80131e4 <USBD_LL_SOF+0x68>
        {
          if (pdev->pClass[i]->SOF != NULL)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	68fa      	ldr	r2, [r7, #12]
 80131c0:	32ae      	adds	r2, #174	; 0xae
 80131c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131c6:	69db      	ldr	r3, [r3, #28]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d00b      	beq.n	80131e4 <USBD_LL_SOF+0x68>
          {
            pdev->classId = i;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	68fa      	ldr	r2, [r7, #12]
 80131d0:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
            (void)pdev->pClass[i]->SOF(pdev);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	68fa      	ldr	r2, [r7, #12]
 80131d8:	32ae      	adds	r2, #174	; 0xae
 80131da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131de:	69db      	ldr	r3, [r3, #28]
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	4798      	blx	r3
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	3301      	adds	r3, #1
 80131e8:	60fb      	str	r3, [r7, #12]
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2b03      	cmp	r3, #3
 80131ee:	d9d2      	bls.n	8013196 <USBD_LL_SOF+0x1a>
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80131f0:	2300      	movs	r3, #0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3710      	adds	r7, #16
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}

080131fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80131fa:	b580      	push	{r7, lr}
 80131fc:	b082      	sub	sp, #8
 80131fe:	af00      	add	r7, sp, #0
 8013200:	6078      	str	r0, [r7, #4]
 8013202:	460b      	mov	r3, r1
 8013204:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	32ae      	adds	r2, #174	; 0xae
 8013210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d101      	bne.n	801321c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013218:	2303      	movs	r3, #3
 801321a:	e01c      	b.n	8013256 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013222:	b2db      	uxtb	r3, r3
 8013224:	2b03      	cmp	r3, #3
 8013226:	d115      	bne.n	8013254 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	32ae      	adds	r2, #174	; 0xae
 8013232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013236:	6a1b      	ldr	r3, [r3, #32]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00b      	beq.n	8013254 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	32ae      	adds	r2, #174	; 0xae
 8013246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801324a:	6a1b      	ldr	r3, [r3, #32]
 801324c:	78fa      	ldrb	r2, [r7, #3]
 801324e:	4611      	mov	r1, r2
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013254:	2300      	movs	r3, #0
}
 8013256:	4618      	mov	r0, r3
 8013258:	3708      	adds	r7, #8
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}

0801325e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801325e:	b580      	push	{r7, lr}
 8013260:	b082      	sub	sp, #8
 8013262:	af00      	add	r7, sp, #0
 8013264:	6078      	str	r0, [r7, #4]
 8013266:	460b      	mov	r3, r1
 8013268:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	32ae      	adds	r2, #174	; 0xae
 8013274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d101      	bne.n	8013280 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801327c:	2303      	movs	r3, #3
 801327e:	e01c      	b.n	80132ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013286:	b2db      	uxtb	r3, r3
 8013288:	2b03      	cmp	r3, #3
 801328a:	d115      	bne.n	80132b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	32ae      	adds	r2, #174	; 0xae
 8013296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801329c:	2b00      	cmp	r3, #0
 801329e:	d00b      	beq.n	80132b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	32ae      	adds	r2, #174	; 0xae
 80132aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b0:	78fa      	ldrb	r2, [r7, #3]
 80132b2:	4611      	mov	r1, r2
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80132b8:	2300      	movs	r3, #0
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3708      	adds	r7, #8
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}

080132c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80132c2:	b480      	push	{r7}
 80132c4:	b083      	sub	sp, #12
 80132c6:	af00      	add	r7, sp, #0
 80132c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80132ca:	2300      	movs	r3, #0
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	370c      	adds	r7, #12
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr

080132d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b084      	sub	sp, #16
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80132e0:	2300      	movs	r3, #0
 80132e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2201      	movs	r2, #1
 80132e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80132ec:	2300      	movs	r3, #0
 80132ee:	60bb      	str	r3, [r7, #8]
 80132f0:	e02a      	b.n	8013348 <USBD_LL_DevDisconnected+0x70>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 80132f2:	6879      	ldr	r1, [r7, #4]
 80132f4:	68ba      	ldr	r2, [r7, #8]
 80132f6:	4613      	mov	r3, r2
 80132f8:	00db      	lsls	r3, r3, #3
 80132fa:	1a9b      	subs	r3, r3, r2
 80132fc:	00db      	lsls	r3, r3, #3
 80132fe:	440b      	add	r3, r1
 8013300:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2b01      	cmp	r3, #1
 8013308:	d11b      	bne.n	8013342 <USBD_LL_DevDisconnected+0x6a>
    {
      if (pdev->pClass[i] != NULL)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	68ba      	ldr	r2, [r7, #8]
 801330e:	32ae      	adds	r2, #174	; 0xae
 8013310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d014      	beq.n	8013342 <USBD_LL_DevDisconnected+0x6a>
      {
        pdev->classId = i;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	68ba      	ldr	r2, [r7, #8]
 801331c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process*/
        if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	32ae      	adds	r2, #174	; 0xae
 8013326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801332a:	685b      	ldr	r3, [r3, #4]
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	6852      	ldr	r2, [r2, #4]
 8013330:	b2d2      	uxtb	r2, r2
 8013332:	4611      	mov	r1, r2
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	4798      	blx	r3
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d001      	beq.n	8013342 <USBD_LL_DevDisconnected+0x6a>
        {
          ret = USBD_FAIL;
 801333e:	2303      	movs	r3, #3
 8013340:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	3301      	adds	r3, #1
 8013346:	60bb      	str	r3, [r7, #8]
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	2b03      	cmp	r3, #3
 801334c:	d9d1      	bls.n	80132f2 <USBD_LL_DevDisconnected+0x1a>
      ret = USBD_FAIL;
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801334e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013350:	4618      	mov	r0, r3
 8013352:	3710      	adds	r7, #16
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013358:	b480      	push	{r7}
 801335a:	b085      	sub	sp, #20
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	460b      	mov	r3, r1
 8013362:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8013364:	2300      	movs	r3, #0
 8013366:	60fb      	str	r3, [r7, #12]
 8013368:	e03b      	b.n	80133e2 <USBD_CoreFindIF+0x8a>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 801336a:	6879      	ldr	r1, [r7, #4]
 801336c:	68fa      	ldr	r2, [r7, #12]
 801336e:	4613      	mov	r3, r2
 8013370:	00db      	lsls	r3, r3, #3
 8013372:	1a9b      	subs	r3, r3, r2
 8013374:	00db      	lsls	r3, r3, #3
 8013376:	440b      	add	r3, r1
 8013378:	f503 7342 	add.w	r3, r3, #776	; 0x308
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	2b01      	cmp	r3, #1
 8013380:	d12c      	bne.n	80133dc <USBD_CoreFindIF+0x84>
    {
      /* Parse all interfaces listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8013382:	2300      	movs	r3, #0
 8013384:	60bb      	str	r3, [r7, #8]
 8013386:	e01c      	b.n	80133c2 <USBD_CoreFindIF+0x6a>
      {
        /* Check if requested Interface matches the current class interface */
        if (pdev->tclasslist[i].Ifs[j] == index)
 8013388:	6879      	ldr	r1, [r7, #4]
 801338a:	68fa      	ldr	r2, [r7, #12]
 801338c:	4613      	mov	r3, r2
 801338e:	00db      	lsls	r3, r3, #3
 8013390:	1a9b      	subs	r3, r3, r2
 8013392:	00db      	lsls	r3, r3, #3
 8013394:	18ca      	adds	r2, r1, r3
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	4413      	add	r3, r2
 801339a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	78fa      	ldrb	r2, [r7, #3]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d10a      	bne.n	80133bc <USBD_CoreFindIF+0x64>
        {
          if (pdev->pClass[i]->Setup != NULL)
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	68fa      	ldr	r2, [r7, #12]
 80133aa:	32ae      	adds	r2, #174	; 0xae
 80133ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133b0:	689b      	ldr	r3, [r3, #8]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d002      	beq.n	80133bc <USBD_CoreFindIF+0x64>
          {
            return (uint8_t)i;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	b2db      	uxtb	r3, r3
 80133ba:	e016      	b.n	80133ea <USBD_CoreFindIF+0x92>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	3301      	adds	r3, #1
 80133c0:	60bb      	str	r3, [r7, #8]
 80133c2:	6879      	ldr	r1, [r7, #4]
 80133c4:	68fa      	ldr	r2, [r7, #12]
 80133c6:	4613      	mov	r3, r2
 80133c8:	00db      	lsls	r3, r3, #3
 80133ca:	1a9b      	subs	r3, r3, r2
 80133cc:	00db      	lsls	r3, r3, #3
 80133ce:	440b      	add	r3, r1
 80133d0:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	68ba      	ldr	r2, [r7, #8]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d3d5      	bcc.n	8013388 <USBD_CoreFindIF+0x30>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	3301      	adds	r3, #1
 80133e0:	60fb      	str	r3, [r7, #12]
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	2b03      	cmp	r3, #3
 80133e6:	d9c0      	bls.n	801336a <USBD_CoreFindIF+0x12>
        }
      }
    }
  }

  return 0xFFU;
 80133e8:	23ff      	movs	r3, #255	; 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	3714      	adds	r7, #20
 80133ee:	46bd      	mov	sp, r7
 80133f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f4:	4770      	bx	lr

080133f6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80133f6:	b480      	push	{r7}
 80133f8:	b085      	sub	sp, #20
 80133fa:	af00      	add	r7, sp, #0
 80133fc:	6078      	str	r0, [r7, #4]
 80133fe:	460b      	mov	r3, r1
 8013400:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8013402:	2300      	movs	r3, #0
 8013404:	60fb      	str	r3, [r7, #12]
 8013406:	e03a      	b.n	801347e <USBD_CoreFindEP+0x88>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8013408:	6879      	ldr	r1, [r7, #4]
 801340a:	68fa      	ldr	r2, [r7, #12]
 801340c:	4613      	mov	r3, r2
 801340e:	00db      	lsls	r3, r3, #3
 8013410:	1a9b      	subs	r3, r3, r2
 8013412:	00db      	lsls	r3, r3, #3
 8013414:	440b      	add	r3, r1
 8013416:	f503 7342 	add.w	r3, r3, #776	; 0x308
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	2b01      	cmp	r3, #1
 801341e:	d12b      	bne.n	8013478 <USBD_CoreFindEP+0x82>
    {
      /* Parse all endpoints listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 8013420:	2300      	movs	r3, #0
 8013422:	60bb      	str	r3, [r7, #8]
 8013424:	e01b      	b.n	801345e <USBD_CoreFindEP+0x68>
      {
        /* Check if requested endpoint matches the current class endpoint */
        if (pdev->tclasslist[i].Eps[j].add == index)
 8013426:	6879      	ldr	r1, [r7, #4]
 8013428:	68fa      	ldr	r2, [r7, #12]
 801342a:	4613      	mov	r3, r2
 801342c:	00db      	lsls	r3, r3, #3
 801342e:	1a9b      	subs	r3, r3, r2
 8013430:	005b      	lsls	r3, r3, #1
 8013432:	68ba      	ldr	r2, [r7, #8]
 8013434:	4413      	add	r3, r2
 8013436:	33c4      	adds	r3, #196	; 0xc4
 8013438:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 801343c:	78fa      	ldrb	r2, [r7, #3]
 801343e:	429a      	cmp	r2, r3
 8013440:	d10a      	bne.n	8013458 <USBD_CoreFindEP+0x62>
        {
          if (pdev->pClass[i]->Setup != NULL)
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	68fa      	ldr	r2, [r7, #12]
 8013446:	32ae      	adds	r2, #174	; 0xae
 8013448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801344c:	689b      	ldr	r3, [r3, #8]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d002      	beq.n	8013458 <USBD_CoreFindEP+0x62>
          {
            return (uint8_t)i;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	b2db      	uxtb	r3, r3
 8013456:	e016      	b.n	8013486 <USBD_CoreFindEP+0x90>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	3301      	adds	r3, #1
 801345c:	60bb      	str	r3, [r7, #8]
 801345e:	6879      	ldr	r1, [r7, #4]
 8013460:	68fa      	ldr	r2, [r7, #12]
 8013462:	4613      	mov	r3, r2
 8013464:	00db      	lsls	r3, r3, #3
 8013466:	1a9b      	subs	r3, r3, r2
 8013468:	00db      	lsls	r3, r3, #3
 801346a:	440b      	add	r3, r1
 801346c:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	68ba      	ldr	r2, [r7, #8]
 8013474:	429a      	cmp	r2, r3
 8013476:	d3d6      	bcc.n	8013426 <USBD_CoreFindEP+0x30>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	3301      	adds	r3, #1
 801347c:	60fb      	str	r3, [r7, #12]
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	2b03      	cmp	r3, #3
 8013482:	d9c1      	bls.n	8013408 <USBD_CoreFindEP+0x12>
        }
      }
    }
  }

  return 0xFFU;
 8013484:	23ff      	movs	r3, #255	; 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8013486:	4618      	mov	r0, r3
 8013488:	3714      	adds	r7, #20
 801348a:	46bd      	mov	sp, r7
 801348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013490:	4770      	bx	lr

08013492 <USBD_CoreGetEPAdd>:
  * @param  ep_type: USBD_EP_TYPE_CTRL, USBD_EP_TYPE_ISOC, USBD_EP_TYPE_BULK or USBD_EP_TYPE_INTR
  * @param  ClassId: The Class ID
  * @retval Address of the selected endpoint or 0xFFU if no endpoint found.
  */
uint8_t USBD_CoreGetEPAdd(USBD_HandleTypeDef *pdev, uint8_t ep_dir, uint8_t ep_type, uint8_t ClassId)
{
 8013492:	b480      	push	{r7}
 8013494:	b085      	sub	sp, #20
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]
 801349a:	4608      	mov	r0, r1
 801349c:	4611      	mov	r1, r2
 801349e:	461a      	mov	r2, r3
 80134a0:	4603      	mov	r3, r0
 80134a2:	70fb      	strb	r3, [r7, #3]
 80134a4:	460b      	mov	r3, r1
 80134a6:	70bb      	strb	r3, [r7, #2]
 80134a8:	4613      	mov	r3, r2
 80134aa:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  /* Find the EP address in the selected class table */
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 80134ac:	2300      	movs	r3, #0
 80134ae:	73fb      	strb	r3, [r7, #15]
 80134b0:	e03b      	b.n	801352a <USBD_CoreGetEPAdd+0x98>
  {
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 80134b2:	787a      	ldrb	r2, [r7, #1]
 80134b4:	7bf8      	ldrb	r0, [r7, #15]
 80134b6:	6879      	ldr	r1, [r7, #4]
 80134b8:	4613      	mov	r3, r2
 80134ba:	00db      	lsls	r3, r3, #3
 80134bc:	1a9b      	subs	r3, r3, r2
 80134be:	005b      	lsls	r3, r3, #1
 80134c0:	4403      	add	r3, r0
 80134c2:	33c4      	adds	r3, #196	; 0xc4
 80134c4:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 80134c8:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80134cc:	78fb      	ldrb	r3, [r7, #3]
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d128      	bne.n	8013524 <USBD_CoreGetEPAdd+0x92>
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 80134d2:	787a      	ldrb	r2, [r7, #1]
 80134d4:	7bf8      	ldrb	r0, [r7, #15]
 80134d6:	6879      	ldr	r1, [r7, #4]
 80134d8:	4613      	mov	r3, r2
 80134da:	00db      	lsls	r3, r3, #3
 80134dc:	1a9b      	subs	r3, r3, r2
 80134de:	005b      	lsls	r3, r3, #1
 80134e0:	4403      	add	r3, r0
 80134e2:	33c4      	adds	r3, #196	; 0xc4
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	440b      	add	r3, r1
 80134e8:	785b      	ldrb	r3, [r3, #1]
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 80134ea:	78ba      	ldrb	r2, [r7, #2]
 80134ec:	429a      	cmp	r2, r3
 80134ee:	d119      	bne.n	8013524 <USBD_CoreGetEPAdd+0x92>
        (pdev->tclasslist[ClassId].Eps[idx].is_used != 0U))
 80134f0:	787a      	ldrb	r2, [r7, #1]
 80134f2:	7bf8      	ldrb	r0, [r7, #15]
 80134f4:	6879      	ldr	r1, [r7, #4]
 80134f6:	4613      	mov	r3, r2
 80134f8:	00db      	lsls	r3, r3, #3
 80134fa:	1a9b      	subs	r3, r3, r2
 80134fc:	005b      	lsls	r3, r3, #1
 80134fe:	4403      	add	r3, r0
 8013500:	33c4      	adds	r3, #196	; 0xc4
 8013502:	009b      	lsls	r3, r3, #2
 8013504:	440b      	add	r3, r1
 8013506:	78db      	ldrb	r3, [r3, #3]
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 8013508:	2b00      	cmp	r3, #0
 801350a:	d00b      	beq.n	8013524 <USBD_CoreGetEPAdd+0x92>
    {
      return (pdev->tclasslist[ClassId].Eps[idx].add);
 801350c:	787a      	ldrb	r2, [r7, #1]
 801350e:	7bf8      	ldrb	r0, [r7, #15]
 8013510:	6879      	ldr	r1, [r7, #4]
 8013512:	4613      	mov	r3, r2
 8013514:	00db      	lsls	r3, r3, #3
 8013516:	1a9b      	subs	r3, r3, r2
 8013518:	005b      	lsls	r3, r3, #1
 801351a:	4403      	add	r3, r0
 801351c:	33c4      	adds	r3, #196	; 0xc4
 801351e:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8013522:	e010      	b.n	8013546 <USBD_CoreGetEPAdd+0xb4>
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 8013524:	7bfb      	ldrb	r3, [r7, #15]
 8013526:	3301      	adds	r3, #1
 8013528:	73fb      	strb	r3, [r7, #15]
 801352a:	7bf9      	ldrb	r1, [r7, #15]
 801352c:	787a      	ldrb	r2, [r7, #1]
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	4613      	mov	r3, r2
 8013532:	00db      	lsls	r3, r3, #3
 8013534:	1a9b      	subs	r3, r3, r2
 8013536:	00db      	lsls	r3, r3, #3
 8013538:	4403      	add	r3, r0
 801353a:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	4299      	cmp	r1, r3
 8013542:	d3b6      	bcc.n	80134b2 <USBD_CoreGetEPAdd+0x20>
    }
  }

  /* If reaching this point, then no endpoint was found */
  return 0xFFU;
 8013544:	23ff      	movs	r3, #255	; 0xff
}
 8013546:	4618      	mov	r0, r3
 8013548:	3714      	adds	r7, #20
 801354a:	46bd      	mov	sp, r7
 801354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013550:	4770      	bx	lr

08013552 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013552:	b480      	push	{r7}
 8013554:	b087      	sub	sp, #28
 8013556:	af00      	add	r7, sp, #0
 8013558:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	3301      	adds	r3, #1
 8013568:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013570:	8a3b      	ldrh	r3, [r7, #16]
 8013572:	021b      	lsls	r3, r3, #8
 8013574:	b21a      	sxth	r2, r3
 8013576:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801357a:	4313      	orrs	r3, r2
 801357c:	b21b      	sxth	r3, r3
 801357e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013580:	89fb      	ldrh	r3, [r7, #14]
}
 8013582:	4618      	mov	r0, r3
 8013584:	371c      	adds	r7, #28
 8013586:	46bd      	mov	sp, r7
 8013588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358c:	4770      	bx	lr
	...

08013590 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b084      	sub	sp, #16
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801359a:	2300      	movs	r3, #0
 801359c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	781b      	ldrb	r3, [r3, #0]
 80135a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80135a6:	2b40      	cmp	r3, #64	; 0x40
 80135a8:	d005      	beq.n	80135b6 <USBD_StdDevReq+0x26>
 80135aa:	2b40      	cmp	r3, #64	; 0x40
 80135ac:	d857      	bhi.n	801365e <USBD_StdDevReq+0xce>
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d00f      	beq.n	80135d2 <USBD_StdDevReq+0x42>
 80135b2:	2b20      	cmp	r3, #32
 80135b4:	d153      	bne.n	801365e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	32ae      	adds	r2, #174	; 0xae
 80135c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135c4:	689b      	ldr	r3, [r3, #8]
 80135c6:	6839      	ldr	r1, [r7, #0]
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	4798      	blx	r3
 80135cc:	4603      	mov	r3, r0
 80135ce:	73fb      	strb	r3, [r7, #15]
      break;
 80135d0:	e04a      	b.n	8013668 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	785b      	ldrb	r3, [r3, #1]
 80135d6:	2b09      	cmp	r3, #9
 80135d8:	d83b      	bhi.n	8013652 <USBD_StdDevReq+0xc2>
 80135da:	a201      	add	r2, pc, #4	; (adr r2, 80135e0 <USBD_StdDevReq+0x50>)
 80135dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e0:	08013635 	.word	0x08013635
 80135e4:	08013649 	.word	0x08013649
 80135e8:	08013653 	.word	0x08013653
 80135ec:	0801363f 	.word	0x0801363f
 80135f0:	08013653 	.word	0x08013653
 80135f4:	08013613 	.word	0x08013613
 80135f8:	08013609 	.word	0x08013609
 80135fc:	08013653 	.word	0x08013653
 8013600:	0801362b 	.word	0x0801362b
 8013604:	0801361d 	.word	0x0801361d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013608:	6839      	ldr	r1, [r7, #0]
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f000 fa3c 	bl	8013a88 <USBD_GetDescriptor>
          break;
 8013610:	e024      	b.n	801365c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013612:	6839      	ldr	r1, [r7, #0]
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f000 fc05 	bl	8013e24 <USBD_SetAddress>
          break;
 801361a:	e01f      	b.n	801365c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801361c:	6839      	ldr	r1, [r7, #0]
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f000 fc44 	bl	8013eac <USBD_SetConfig>
 8013624:	4603      	mov	r3, r0
 8013626:	73fb      	strb	r3, [r7, #15]
          break;
 8013628:	e018      	b.n	801365c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801362a:	6839      	ldr	r1, [r7, #0]
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f000 fce7 	bl	8014000 <USBD_GetConfig>
          break;
 8013632:	e013      	b.n	801365c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013634:	6839      	ldr	r1, [r7, #0]
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f000 fd18 	bl	801406c <USBD_GetStatus>
          break;
 801363c:	e00e      	b.n	801365c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801363e:	6839      	ldr	r1, [r7, #0]
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f000 fd47 	bl	80140d4 <USBD_SetFeature>
          break;
 8013646:	e009      	b.n	801365c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013648:	6839      	ldr	r1, [r7, #0]
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f000 fd6b 	bl	8014126 <USBD_ClrFeature>
          break;
 8013650:	e004      	b.n	801365c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013652:	6839      	ldr	r1, [r7, #0]
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f000 fdc2 	bl	80141de <USBD_CtlError>
          break;
 801365a:	bf00      	nop
      }
      break;
 801365c:	e004      	b.n	8013668 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801365e:	6839      	ldr	r1, [r7, #0]
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f000 fdbc 	bl	80141de <USBD_CtlError>
      break;
 8013666:	bf00      	nop
  }

  return ret;
 8013668:	7bfb      	ldrb	r3, [r7, #15]
}
 801366a:	4618      	mov	r0, r3
 801366c:	3710      	adds	r7, #16
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop

08013674 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801367e:	2300      	movs	r3, #0
 8013680:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801368a:	2b40      	cmp	r3, #64	; 0x40
 801368c:	d005      	beq.n	801369a <USBD_StdItfReq+0x26>
 801368e:	2b40      	cmp	r3, #64	; 0x40
 8013690:	d852      	bhi.n	8013738 <USBD_StdItfReq+0xc4>
 8013692:	2b00      	cmp	r3, #0
 8013694:	d001      	beq.n	801369a <USBD_StdItfReq+0x26>
 8013696:	2b20      	cmp	r3, #32
 8013698:	d14e      	bne.n	8013738 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	3b01      	subs	r3, #1
 80136a4:	2b02      	cmp	r3, #2
 80136a6:	d840      	bhi.n	801372a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	889b      	ldrh	r3, [r3, #4]
 80136ac:	b2db      	uxtb	r3, r3
 80136ae:	2b03      	cmp	r3, #3
 80136b0:	d836      	bhi.n	8013720 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	889b      	ldrh	r3, [r3, #4]
 80136b6:	b2db      	uxtb	r3, r3
 80136b8:	4619      	mov	r1, r3
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f7ff fe4c 	bl	8013358 <USBD_CoreFindIF>
 80136c0:	4603      	mov	r3, r0
 80136c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80136c4:	7bbb      	ldrb	r3, [r7, #14]
 80136c6:	2bff      	cmp	r3, #255	; 0xff
 80136c8:	d01d      	beq.n	8013706 <USBD_StdItfReq+0x92>
 80136ca:	7bbb      	ldrb	r3, [r7, #14]
 80136cc:	2b03      	cmp	r3, #3
 80136ce:	d81a      	bhi.n	8013706 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80136d0:	7bba      	ldrb	r2, [r7, #14]
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	32ae      	adds	r2, #174	; 0xae
 80136d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136da:	689b      	ldr	r3, [r3, #8]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d00f      	beq.n	8013700 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80136e0:	7bba      	ldrb	r2, [r7, #14]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80136e8:	7bba      	ldrb	r2, [r7, #14]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	32ae      	adds	r2, #174	; 0xae
 80136ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136f2:	689b      	ldr	r3, [r3, #8]
 80136f4:	6839      	ldr	r1, [r7, #0]
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	4798      	blx	r3
 80136fa:	4603      	mov	r3, r0
 80136fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80136fe:	e004      	b.n	801370a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013700:	2303      	movs	r3, #3
 8013702:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013704:	e001      	b.n	801370a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013706:	2303      	movs	r3, #3
 8013708:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	88db      	ldrh	r3, [r3, #6]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d110      	bne.n	8013734 <USBD_StdItfReq+0xc0>
 8013712:	7bfb      	ldrb	r3, [r7, #15]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d10d      	bne.n	8013734 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f000 fe2b 	bl	8014374 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801371e:	e009      	b.n	8013734 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013720:	6839      	ldr	r1, [r7, #0]
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f000 fd5b 	bl	80141de <USBD_CtlError>
          break;
 8013728:	e004      	b.n	8013734 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801372a:	6839      	ldr	r1, [r7, #0]
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f000 fd56 	bl	80141de <USBD_CtlError>
          break;
 8013732:	e000      	b.n	8013736 <USBD_StdItfReq+0xc2>
          break;
 8013734:	bf00      	nop
      }
      break;
 8013736:	e004      	b.n	8013742 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013738:	6839      	ldr	r1, [r7, #0]
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f000 fd4f 	bl	80141de <USBD_CtlError>
      break;
 8013740:	bf00      	nop
  }

  return ret;
 8013742:	7bfb      	ldrb	r3, [r7, #15]
}
 8013744:	4618      	mov	r0, r3
 8013746:	3710      	adds	r7, #16
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}

0801374c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b084      	sub	sp, #16
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013756:	2300      	movs	r3, #0
 8013758:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	889b      	ldrh	r3, [r3, #4]
 801375e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013768:	2b40      	cmp	r3, #64	; 0x40
 801376a:	d007      	beq.n	801377c <USBD_StdEPReq+0x30>
 801376c:	2b40      	cmp	r3, #64	; 0x40
 801376e:	f200 817f 	bhi.w	8013a70 <USBD_StdEPReq+0x324>
 8013772:	2b00      	cmp	r3, #0
 8013774:	d02a      	beq.n	80137cc <USBD_StdEPReq+0x80>
 8013776:	2b20      	cmp	r3, #32
 8013778:	f040 817a 	bne.w	8013a70 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801377c:	7bbb      	ldrb	r3, [r7, #14]
 801377e:	4619      	mov	r1, r3
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f7ff fe38 	bl	80133f6 <USBD_CoreFindEP>
 8013786:	4603      	mov	r3, r0
 8013788:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801378a:	7b7b      	ldrb	r3, [r7, #13]
 801378c:	2bff      	cmp	r3, #255	; 0xff
 801378e:	f000 8174 	beq.w	8013a7a <USBD_StdEPReq+0x32e>
 8013792:	7b7b      	ldrb	r3, [r7, #13]
 8013794:	2b03      	cmp	r3, #3
 8013796:	f200 8170 	bhi.w	8013a7a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801379a:	7b7a      	ldrb	r2, [r7, #13]
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80137a2:	7b7a      	ldrb	r2, [r7, #13]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	32ae      	adds	r2, #174	; 0xae
 80137a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137ac:	689b      	ldr	r3, [r3, #8]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	f000 8163 	beq.w	8013a7a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80137b4:	7b7a      	ldrb	r2, [r7, #13]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	32ae      	adds	r2, #174	; 0xae
 80137ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137be:	689b      	ldr	r3, [r3, #8]
 80137c0:	6839      	ldr	r1, [r7, #0]
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	4798      	blx	r3
 80137c6:	4603      	mov	r3, r0
 80137c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80137ca:	e156      	b.n	8013a7a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	785b      	ldrb	r3, [r3, #1]
 80137d0:	2b03      	cmp	r3, #3
 80137d2:	d008      	beq.n	80137e6 <USBD_StdEPReq+0x9a>
 80137d4:	2b03      	cmp	r3, #3
 80137d6:	f300 8145 	bgt.w	8013a64 <USBD_StdEPReq+0x318>
 80137da:	2b00      	cmp	r3, #0
 80137dc:	f000 809b 	beq.w	8013916 <USBD_StdEPReq+0x1ca>
 80137e0:	2b01      	cmp	r3, #1
 80137e2:	d03c      	beq.n	801385e <USBD_StdEPReq+0x112>
 80137e4:	e13e      	b.n	8013a64 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	2b02      	cmp	r3, #2
 80137f0:	d002      	beq.n	80137f8 <USBD_StdEPReq+0xac>
 80137f2:	2b03      	cmp	r3, #3
 80137f4:	d016      	beq.n	8013824 <USBD_StdEPReq+0xd8>
 80137f6:	e02c      	b.n	8013852 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80137f8:	7bbb      	ldrb	r3, [r7, #14]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d00d      	beq.n	801381a <USBD_StdEPReq+0xce>
 80137fe:	7bbb      	ldrb	r3, [r7, #14]
 8013800:	2b80      	cmp	r3, #128	; 0x80
 8013802:	d00a      	beq.n	801381a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013804:	7bbb      	ldrb	r3, [r7, #14]
 8013806:	4619      	mov	r1, r3
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f005 fb4a 	bl	8018ea2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801380e:	2180      	movs	r1, #128	; 0x80
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f005 fb46 	bl	8018ea2 <USBD_LL_StallEP>
 8013816:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013818:	e020      	b.n	801385c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801381a:	6839      	ldr	r1, [r7, #0]
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f000 fcde 	bl	80141de <USBD_CtlError>
              break;
 8013822:	e01b      	b.n	801385c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	885b      	ldrh	r3, [r3, #2]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d10e      	bne.n	801384a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801382c:	7bbb      	ldrb	r3, [r7, #14]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d00b      	beq.n	801384a <USBD_StdEPReq+0xfe>
 8013832:	7bbb      	ldrb	r3, [r7, #14]
 8013834:	2b80      	cmp	r3, #128	; 0x80
 8013836:	d008      	beq.n	801384a <USBD_StdEPReq+0xfe>
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	88db      	ldrh	r3, [r3, #6]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d104      	bne.n	801384a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013840:	7bbb      	ldrb	r3, [r7, #14]
 8013842:	4619      	mov	r1, r3
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f005 fb2c 	bl	8018ea2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f000 fd92 	bl	8014374 <USBD_CtlSendStatus>

              break;
 8013850:	e004      	b.n	801385c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013852:	6839      	ldr	r1, [r7, #0]
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	f000 fcc2 	bl	80141de <USBD_CtlError>
              break;
 801385a:	bf00      	nop
          }
          break;
 801385c:	e107      	b.n	8013a6e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013864:	b2db      	uxtb	r3, r3
 8013866:	2b02      	cmp	r3, #2
 8013868:	d002      	beq.n	8013870 <USBD_StdEPReq+0x124>
 801386a:	2b03      	cmp	r3, #3
 801386c:	d016      	beq.n	801389c <USBD_StdEPReq+0x150>
 801386e:	e04b      	b.n	8013908 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013870:	7bbb      	ldrb	r3, [r7, #14]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d00d      	beq.n	8013892 <USBD_StdEPReq+0x146>
 8013876:	7bbb      	ldrb	r3, [r7, #14]
 8013878:	2b80      	cmp	r3, #128	; 0x80
 801387a:	d00a      	beq.n	8013892 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801387c:	7bbb      	ldrb	r3, [r7, #14]
 801387e:	4619      	mov	r1, r3
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f005 fb0e 	bl	8018ea2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013886:	2180      	movs	r1, #128	; 0x80
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f005 fb0a 	bl	8018ea2 <USBD_LL_StallEP>
 801388e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013890:	e040      	b.n	8013914 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013892:	6839      	ldr	r1, [r7, #0]
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f000 fca2 	bl	80141de <USBD_CtlError>
              break;
 801389a:	e03b      	b.n	8013914 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	885b      	ldrh	r3, [r3, #2]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d136      	bne.n	8013912 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80138a4:	7bbb      	ldrb	r3, [r7, #14]
 80138a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d004      	beq.n	80138b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80138ae:	7bbb      	ldrb	r3, [r7, #14]
 80138b0:	4619      	mov	r1, r3
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	f005 fb14 	bl	8018ee0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f000 fd5b 	bl	8014374 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80138be:	7bbb      	ldrb	r3, [r7, #14]
 80138c0:	4619      	mov	r1, r3
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f7ff fd97 	bl	80133f6 <USBD_CoreFindEP>
 80138c8:	4603      	mov	r3, r0
 80138ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80138cc:	7b7b      	ldrb	r3, [r7, #13]
 80138ce:	2bff      	cmp	r3, #255	; 0xff
 80138d0:	d01f      	beq.n	8013912 <USBD_StdEPReq+0x1c6>
 80138d2:	7b7b      	ldrb	r3, [r7, #13]
 80138d4:	2b03      	cmp	r3, #3
 80138d6:	d81c      	bhi.n	8013912 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80138d8:	7b7a      	ldrb	r2, [r7, #13]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80138e0:	7b7a      	ldrb	r2, [r7, #13]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	32ae      	adds	r2, #174	; 0xae
 80138e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138ea:	689b      	ldr	r3, [r3, #8]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d010      	beq.n	8013912 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80138f0:	7b7a      	ldrb	r2, [r7, #13]
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	32ae      	adds	r2, #174	; 0xae
 80138f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138fa:	689b      	ldr	r3, [r3, #8]
 80138fc:	6839      	ldr	r1, [r7, #0]
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	4798      	blx	r3
 8013902:	4603      	mov	r3, r0
 8013904:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013906:	e004      	b.n	8013912 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013908:	6839      	ldr	r1, [r7, #0]
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f000 fc67 	bl	80141de <USBD_CtlError>
              break;
 8013910:	e000      	b.n	8013914 <USBD_StdEPReq+0x1c8>
              break;
 8013912:	bf00      	nop
          }
          break;
 8013914:	e0ab      	b.n	8013a6e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801391c:	b2db      	uxtb	r3, r3
 801391e:	2b02      	cmp	r3, #2
 8013920:	d002      	beq.n	8013928 <USBD_StdEPReq+0x1dc>
 8013922:	2b03      	cmp	r3, #3
 8013924:	d032      	beq.n	801398c <USBD_StdEPReq+0x240>
 8013926:	e097      	b.n	8013a58 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013928:	7bbb      	ldrb	r3, [r7, #14]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d007      	beq.n	801393e <USBD_StdEPReq+0x1f2>
 801392e:	7bbb      	ldrb	r3, [r7, #14]
 8013930:	2b80      	cmp	r3, #128	; 0x80
 8013932:	d004      	beq.n	801393e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013934:	6839      	ldr	r1, [r7, #0]
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f000 fc51 	bl	80141de <USBD_CtlError>
                break;
 801393c:	e091      	b.n	8013a62 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801393e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013942:	2b00      	cmp	r3, #0
 8013944:	da0b      	bge.n	801395e <USBD_StdEPReq+0x212>
 8013946:	7bbb      	ldrb	r3, [r7, #14]
 8013948:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801394c:	4613      	mov	r3, r2
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	4413      	add	r3, r2
 8013952:	009b      	lsls	r3, r3, #2
 8013954:	3310      	adds	r3, #16
 8013956:	687a      	ldr	r2, [r7, #4]
 8013958:	4413      	add	r3, r2
 801395a:	3304      	adds	r3, #4
 801395c:	e00b      	b.n	8013976 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801395e:	7bbb      	ldrb	r3, [r7, #14]
 8013960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013964:	4613      	mov	r3, r2
 8013966:	009b      	lsls	r3, r3, #2
 8013968:	4413      	add	r3, r2
 801396a:	009b      	lsls	r3, r3, #2
 801396c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013970:	687a      	ldr	r2, [r7, #4]
 8013972:	4413      	add	r3, r2
 8013974:	3304      	adds	r3, #4
 8013976:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	2200      	movs	r2, #0
 801397c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	2202      	movs	r2, #2
 8013982:	4619      	mov	r1, r3
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f000 fc9b 	bl	80142c0 <USBD_CtlSendData>
              break;
 801398a:	e06a      	b.n	8013a62 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801398c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013990:	2b00      	cmp	r3, #0
 8013992:	da11      	bge.n	80139b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013994:	7bbb      	ldrb	r3, [r7, #14]
 8013996:	f003 020f 	and.w	r2, r3, #15
 801399a:	6879      	ldr	r1, [r7, #4]
 801399c:	4613      	mov	r3, r2
 801399e:	009b      	lsls	r3, r3, #2
 80139a0:	4413      	add	r3, r2
 80139a2:	009b      	lsls	r3, r3, #2
 80139a4:	440b      	add	r3, r1
 80139a6:	3324      	adds	r3, #36	; 0x24
 80139a8:	881b      	ldrh	r3, [r3, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d117      	bne.n	80139de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80139ae:	6839      	ldr	r1, [r7, #0]
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f000 fc14 	bl	80141de <USBD_CtlError>
                  break;
 80139b6:	e054      	b.n	8013a62 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80139b8:	7bbb      	ldrb	r3, [r7, #14]
 80139ba:	f003 020f 	and.w	r2, r3, #15
 80139be:	6879      	ldr	r1, [r7, #4]
 80139c0:	4613      	mov	r3, r2
 80139c2:	009b      	lsls	r3, r3, #2
 80139c4:	4413      	add	r3, r2
 80139c6:	009b      	lsls	r3, r3, #2
 80139c8:	440b      	add	r3, r1
 80139ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80139ce:	881b      	ldrh	r3, [r3, #0]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d104      	bne.n	80139de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80139d4:	6839      	ldr	r1, [r7, #0]
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f000 fc01 	bl	80141de <USBD_CtlError>
                  break;
 80139dc:	e041      	b.n	8013a62 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80139de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	da0b      	bge.n	80139fe <USBD_StdEPReq+0x2b2>
 80139e6:	7bbb      	ldrb	r3, [r7, #14]
 80139e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80139ec:	4613      	mov	r3, r2
 80139ee:	009b      	lsls	r3, r3, #2
 80139f0:	4413      	add	r3, r2
 80139f2:	009b      	lsls	r3, r3, #2
 80139f4:	3310      	adds	r3, #16
 80139f6:	687a      	ldr	r2, [r7, #4]
 80139f8:	4413      	add	r3, r2
 80139fa:	3304      	adds	r3, #4
 80139fc:	e00b      	b.n	8013a16 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80139fe:	7bbb      	ldrb	r3, [r7, #14]
 8013a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013a04:	4613      	mov	r3, r2
 8013a06:	009b      	lsls	r3, r3, #2
 8013a08:	4413      	add	r3, r2
 8013a0a:	009b      	lsls	r3, r3, #2
 8013a0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013a10:	687a      	ldr	r2, [r7, #4]
 8013a12:	4413      	add	r3, r2
 8013a14:	3304      	adds	r3, #4
 8013a16:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013a18:	7bbb      	ldrb	r3, [r7, #14]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d002      	beq.n	8013a24 <USBD_StdEPReq+0x2d8>
 8013a1e:	7bbb      	ldrb	r3, [r7, #14]
 8013a20:	2b80      	cmp	r3, #128	; 0x80
 8013a22:	d103      	bne.n	8013a2c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	2200      	movs	r2, #0
 8013a28:	601a      	str	r2, [r3, #0]
 8013a2a:	e00e      	b.n	8013a4a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013a2c:	7bbb      	ldrb	r3, [r7, #14]
 8013a2e:	4619      	mov	r1, r3
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f005 fa74 	bl	8018f1e <USBD_LL_IsStallEP>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d003      	beq.n	8013a44 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	2201      	movs	r2, #1
 8013a40:	601a      	str	r2, [r3, #0]
 8013a42:	e002      	b.n	8013a4a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	2200      	movs	r2, #0
 8013a48:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	2202      	movs	r2, #2
 8013a4e:	4619      	mov	r1, r3
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f000 fc35 	bl	80142c0 <USBD_CtlSendData>
              break;
 8013a56:	e004      	b.n	8013a62 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013a58:	6839      	ldr	r1, [r7, #0]
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f000 fbbf 	bl	80141de <USBD_CtlError>
              break;
 8013a60:	bf00      	nop
          }
          break;
 8013a62:	e004      	b.n	8013a6e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013a64:	6839      	ldr	r1, [r7, #0]
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 fbb9 	bl	80141de <USBD_CtlError>
          break;
 8013a6c:	bf00      	nop
      }
      break;
 8013a6e:	e005      	b.n	8013a7c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013a70:	6839      	ldr	r1, [r7, #0]
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f000 fbb3 	bl	80141de <USBD_CtlError>
      break;
 8013a78:	e000      	b.n	8013a7c <USBD_StdEPReq+0x330>
      break;
 8013a7a:	bf00      	nop
  }

  return ret;
 8013a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3710      	adds	r7, #16
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
	...

08013a88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b084      	sub	sp, #16
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013a92:	2300      	movs	r3, #0
 8013a94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013a96:	2300      	movs	r3, #0
 8013a98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	885b      	ldrh	r3, [r3, #2]
 8013aa2:	0a1b      	lsrs	r3, r3, #8
 8013aa4:	b29b      	uxth	r3, r3
 8013aa6:	3b01      	subs	r3, #1
 8013aa8:	2b0e      	cmp	r3, #14
 8013aaa:	f200 818d 	bhi.w	8013dc8 <USBD_GetDescriptor+0x340>
 8013aae:	a201      	add	r2, pc, #4	; (adr r2, 8013ab4 <USBD_GetDescriptor+0x2c>)
 8013ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ab4:	08013b25 	.word	0x08013b25
 8013ab8:	08013b3d 	.word	0x08013b3d
 8013abc:	08013bb5 	.word	0x08013bb5
 8013ac0:	08013dc9 	.word	0x08013dc9
 8013ac4:	08013dc9 	.word	0x08013dc9
 8013ac8:	08013d2b 	.word	0x08013d2b
 8013acc:	08013d73 	.word	0x08013d73
 8013ad0:	08013dc9 	.word	0x08013dc9
 8013ad4:	08013dc9 	.word	0x08013dc9
 8013ad8:	08013dc9 	.word	0x08013dc9
 8013adc:	08013dc9 	.word	0x08013dc9
 8013ae0:	08013dc9 	.word	0x08013dc9
 8013ae4:	08013dc9 	.word	0x08013dc9
 8013ae8:	08013dc9 	.word	0x08013dc9
 8013aec:	08013af1 	.word	0x08013af1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013af6:	69db      	ldr	r3, [r3, #28]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00b      	beq.n	8013b14 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b02:	69db      	ldr	r3, [r3, #28]
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	7c12      	ldrb	r2, [r2, #16]
 8013b08:	f107 0108 	add.w	r1, r7, #8
 8013b0c:	4610      	mov	r0, r2
 8013b0e:	4798      	blx	r3
 8013b10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013b12:	e161      	b.n	8013dd8 <USBD_GetDescriptor+0x350>
        USBD_CtlError(pdev, req);
 8013b14:	6839      	ldr	r1, [r7, #0]
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f000 fb61 	bl	80141de <USBD_CtlError>
        err++;
 8013b1c:	7afb      	ldrb	r3, [r7, #11]
 8013b1e:	3301      	adds	r3, #1
 8013b20:	72fb      	strb	r3, [r7, #11]
      break;
 8013b22:	e159      	b.n	8013dd8 <USBD_GetDescriptor+0x350>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	687a      	ldr	r2, [r7, #4]
 8013b2e:	7c12      	ldrb	r2, [r2, #16]
 8013b30:	f107 0108 	add.w	r1, r7, #8
 8013b34:	4610      	mov	r0, r2
 8013b36:	4798      	blx	r3
 8013b38:	60f8      	str	r0, [r7, #12]
      break;
 8013b3a:	e14d      	b.n	8013dd8 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	7c1b      	ldrb	r3, [r3, #16]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d11b      	bne.n	8013b7c <USBD_GetDescriptor+0xf4>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8013b4a:	b2db      	uxtb	r3, r3
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d007      	beq.n	8013b60 <USBD_GetDescriptor+0xd8>
        {
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
 8013b50:	4b9c      	ldr	r3, [pc, #624]	; (8013dc4 <USBD_GetDescriptor+0x33c>)
 8013b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b54:	f107 0208 	add.w	r2, r7, #8
 8013b58:	4610      	mov	r0, r2
 8013b5a:	4798      	blx	r3
 8013b5c:	60f8      	str	r0, [r7, #12]
 8013b5e:	e008      	b.n	8013b72 <USBD_GetDescriptor+0xea>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b68:	f107 0208 	add.w	r2, r7, #8
 8013b6c:	4610      	mov	r0, r2
 8013b6e:	4798      	blx	r3
 8013b70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	3301      	adds	r3, #1
 8013b76:	2202      	movs	r2, #2
 8013b78:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013b7a:	e12d      	b.n	8013dd8 <USBD_GetDescriptor+0x350>
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d007      	beq.n	8013b98 <USBD_GetDescriptor+0x110>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
 8013b88:	4b8e      	ldr	r3, [pc, #568]	; (8013dc4 <USBD_GetDescriptor+0x33c>)
 8013b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b8c:	f107 0208 	add.w	r2, r7, #8
 8013b90:	4610      	mov	r0, r2
 8013b92:	4798      	blx	r3
 8013b94:	60f8      	str	r0, [r7, #12]
 8013b96:	e008      	b.n	8013baa <USBD_GetDescriptor+0x122>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ba0:	f107 0208 	add.w	r2, r7, #8
 8013ba4:	4610      	mov	r0, r2
 8013ba6:	4798      	blx	r3
 8013ba8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	3301      	adds	r3, #1
 8013bae:	2202      	movs	r2, #2
 8013bb0:	701a      	strb	r2, [r3, #0]
      break;
 8013bb2:	e111      	b.n	8013dd8 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	885b      	ldrh	r3, [r3, #2]
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	2b05      	cmp	r3, #5
 8013bbc:	f200 80ac 	bhi.w	8013d18 <USBD_GetDescriptor+0x290>
 8013bc0:	a201      	add	r2, pc, #4	; (adr r2, 8013bc8 <USBD_GetDescriptor+0x140>)
 8013bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bc6:	bf00      	nop
 8013bc8:	08013be1 	.word	0x08013be1
 8013bcc:	08013c15 	.word	0x08013c15
 8013bd0:	08013c49 	.word	0x08013c49
 8013bd4:	08013c7d 	.word	0x08013c7d
 8013bd8:	08013cb1 	.word	0x08013cb1
 8013bdc:	08013ce5 	.word	0x08013ce5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d00b      	beq.n	8013c04 <USBD_GetDescriptor+0x17c>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bf2:	685b      	ldr	r3, [r3, #4]
 8013bf4:	687a      	ldr	r2, [r7, #4]
 8013bf6:	7c12      	ldrb	r2, [r2, #16]
 8013bf8:	f107 0108 	add.w	r1, r7, #8
 8013bfc:	4610      	mov	r0, r2
 8013bfe:	4798      	blx	r3
 8013c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c02:	e091      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013c04:	6839      	ldr	r1, [r7, #0]
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f000 fae9 	bl	80141de <USBD_CtlError>
            err++;
 8013c0c:	7afb      	ldrb	r3, [r7, #11]
 8013c0e:	3301      	adds	r3, #1
 8013c10:	72fb      	strb	r3, [r7, #11]
          break;
 8013c12:	e089      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c1a:	689b      	ldr	r3, [r3, #8]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d00b      	beq.n	8013c38 <USBD_GetDescriptor+0x1b0>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c26:	689b      	ldr	r3, [r3, #8]
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	7c12      	ldrb	r2, [r2, #16]
 8013c2c:	f107 0108 	add.w	r1, r7, #8
 8013c30:	4610      	mov	r0, r2
 8013c32:	4798      	blx	r3
 8013c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c36:	e077      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013c38:	6839      	ldr	r1, [r7, #0]
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f000 facf 	bl	80141de <USBD_CtlError>
            err++;
 8013c40:	7afb      	ldrb	r3, [r7, #11]
 8013c42:	3301      	adds	r3, #1
 8013c44:	72fb      	strb	r3, [r7, #11]
          break;
 8013c46:	e06f      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d00b      	beq.n	8013c6c <USBD_GetDescriptor+0x1e4>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c5a:	68db      	ldr	r3, [r3, #12]
 8013c5c:	687a      	ldr	r2, [r7, #4]
 8013c5e:	7c12      	ldrb	r2, [r2, #16]
 8013c60:	f107 0108 	add.w	r1, r7, #8
 8013c64:	4610      	mov	r0, r2
 8013c66:	4798      	blx	r3
 8013c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c6a:	e05d      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013c6c:	6839      	ldr	r1, [r7, #0]
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f000 fab5 	bl	80141de <USBD_CtlError>
            err++;
 8013c74:	7afb      	ldrb	r3, [r7, #11]
 8013c76:	3301      	adds	r3, #1
 8013c78:	72fb      	strb	r3, [r7, #11]
          break;
 8013c7a:	e055      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c82:	691b      	ldr	r3, [r3, #16]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d00b      	beq.n	8013ca0 <USBD_GetDescriptor+0x218>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c8e:	691b      	ldr	r3, [r3, #16]
 8013c90:	687a      	ldr	r2, [r7, #4]
 8013c92:	7c12      	ldrb	r2, [r2, #16]
 8013c94:	f107 0108 	add.w	r1, r7, #8
 8013c98:	4610      	mov	r0, r2
 8013c9a:	4798      	blx	r3
 8013c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c9e:	e043      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013ca0:	6839      	ldr	r1, [r7, #0]
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fa9b 	bl	80141de <USBD_CtlError>
            err++;
 8013ca8:	7afb      	ldrb	r3, [r7, #11]
 8013caa:	3301      	adds	r3, #1
 8013cac:	72fb      	strb	r3, [r7, #11]
          break;
 8013cae:	e03b      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cb6:	695b      	ldr	r3, [r3, #20]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d00b      	beq.n	8013cd4 <USBD_GetDescriptor+0x24c>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cc2:	695b      	ldr	r3, [r3, #20]
 8013cc4:	687a      	ldr	r2, [r7, #4]
 8013cc6:	7c12      	ldrb	r2, [r2, #16]
 8013cc8:	f107 0108 	add.w	r1, r7, #8
 8013ccc:	4610      	mov	r0, r2
 8013cce:	4798      	blx	r3
 8013cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013cd2:	e029      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013cd4:	6839      	ldr	r1, [r7, #0]
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f000 fa81 	bl	80141de <USBD_CtlError>
            err++;
 8013cdc:	7afb      	ldrb	r3, [r7, #11]
 8013cde:	3301      	adds	r3, #1
 8013ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8013ce2:	e021      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cea:	699b      	ldr	r3, [r3, #24]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d00b      	beq.n	8013d08 <USBD_GetDescriptor+0x280>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cf6:	699b      	ldr	r3, [r3, #24]
 8013cf8:	687a      	ldr	r2, [r7, #4]
 8013cfa:	7c12      	ldrb	r2, [r2, #16]
 8013cfc:	f107 0108 	add.w	r1, r7, #8
 8013d00:	4610      	mov	r0, r2
 8013d02:	4798      	blx	r3
 8013d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d06:	e00f      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013d08:	6839      	ldr	r1, [r7, #0]
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f000 fa67 	bl	80141de <USBD_CtlError>
            err++;
 8013d10:	7afb      	ldrb	r3, [r7, #11]
 8013d12:	3301      	adds	r3, #1
 8013d14:	72fb      	strb	r3, [r7, #11]
          break;
 8013d16:	e007      	b.n	8013d28 <USBD_GetDescriptor+0x2a0>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013d18:	6839      	ldr	r1, [r7, #0]
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f000 fa5f 	bl	80141de <USBD_CtlError>
          err++;
 8013d20:	7afb      	ldrb	r3, [r7, #11]
 8013d22:	3301      	adds	r3, #1
 8013d24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013d26:	bf00      	nop
      }
      break;
 8013d28:	e056      	b.n	8013dd8 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	7c1b      	ldrb	r3, [r3, #16]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d117      	bne.n	8013d62 <USBD_GetDescriptor+0x2da>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8013d38:	b2db      	uxtb	r3, r3
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d007      	beq.n	8013d4e <USBD_GetDescriptor+0x2c6>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
 8013d3e:	4b21      	ldr	r3, [pc, #132]	; (8013dc4 <USBD_GetDescriptor+0x33c>)
 8013d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d42:	f107 0208 	add.w	r2, r7, #8
 8013d46:	4610      	mov	r0, r2
 8013d48:	4798      	blx	r3
 8013d4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013d4c:	e044      	b.n	8013dd8 <USBD_GetDescriptor+0x350>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d56:	f107 0208 	add.w	r2, r7, #8
 8013d5a:	4610      	mov	r0, r2
 8013d5c:	4798      	blx	r3
 8013d5e:	60f8      	str	r0, [r7, #12]
      break;
 8013d60:	e03a      	b.n	8013dd8 <USBD_GetDescriptor+0x350>
        USBD_CtlError(pdev, req);
 8013d62:	6839      	ldr	r1, [r7, #0]
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f000 fa3a 	bl	80141de <USBD_CtlError>
        err++;
 8013d6a:	7afb      	ldrb	r3, [r7, #11]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8013d70:	e032      	b.n	8013dd8 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	7c1b      	ldrb	r3, [r3, #16]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d11b      	bne.n	8013db2 <USBD_GetDescriptor+0x32a>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8013d80:	b2db      	uxtb	r3, r3
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d007      	beq.n	8013d96 <USBD_GetDescriptor+0x30e>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
 8013d86:	4b0f      	ldr	r3, [pc, #60]	; (8013dc4 <USBD_GetDescriptor+0x33c>)
 8013d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d8a:	f107 0208 	add.w	r2, r7, #8
 8013d8e:	4610      	mov	r0, r2
 8013d90:	4798      	blx	r3
 8013d92:	60f8      	str	r0, [r7, #12]
 8013d94:	e008      	b.n	8013da8 <USBD_GetDescriptor+0x320>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d9e:	f107 0208 	add.w	r2, r7, #8
 8013da2:	4610      	mov	r0, r2
 8013da4:	4798      	blx	r3
 8013da6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	3301      	adds	r3, #1
 8013dac:	2207      	movs	r2, #7
 8013dae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013db0:	e012      	b.n	8013dd8 <USBD_GetDescriptor+0x350>
        USBD_CtlError(pdev, req);
 8013db2:	6839      	ldr	r1, [r7, #0]
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f000 fa12 	bl	80141de <USBD_CtlError>
        err++;
 8013dba:	7afb      	ldrb	r3, [r7, #11]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8013dc0:	e00a      	b.n	8013dd8 <USBD_GetDescriptor+0x350>
 8013dc2:	bf00      	nop
 8013dc4:	24000060 	.word	0x24000060

    default:
      USBD_CtlError(pdev, req);
 8013dc8:	6839      	ldr	r1, [r7, #0]
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f000 fa07 	bl	80141de <USBD_CtlError>
      err++;
 8013dd0:	7afb      	ldrb	r3, [r7, #11]
 8013dd2:	3301      	adds	r3, #1
 8013dd4:	72fb      	strb	r3, [r7, #11]
      break;
 8013dd6:	bf00      	nop
  }

  if (err != 0U)
 8013dd8:	7afb      	ldrb	r3, [r7, #11]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d11e      	bne.n	8013e1c <USBD_GetDescriptor+0x394>
  {
    return;
  }

  if (req->wLength != 0U)
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	88db      	ldrh	r3, [r3, #6]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d016      	beq.n	8013e14 <USBD_GetDescriptor+0x38c>
  {
    if (len != 0U)
 8013de6:	893b      	ldrh	r3, [r7, #8]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d00e      	beq.n	8013e0a <USBD_GetDescriptor+0x382>
    {
      len = MIN(len, req->wLength);
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	88da      	ldrh	r2, [r3, #6]
 8013df0:	893b      	ldrh	r3, [r7, #8]
 8013df2:	4293      	cmp	r3, r2
 8013df4:	bf28      	it	cs
 8013df6:	4613      	movcs	r3, r2
 8013df8:	b29b      	uxth	r3, r3
 8013dfa:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013dfc:	893b      	ldrh	r3, [r7, #8]
 8013dfe:	461a      	mov	r2, r3
 8013e00:	68f9      	ldr	r1, [r7, #12]
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f000 fa5c 	bl	80142c0 <USBD_CtlSendData>
 8013e08:	e009      	b.n	8013e1e <USBD_GetDescriptor+0x396>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013e0a:	6839      	ldr	r1, [r7, #0]
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f000 f9e6 	bl	80141de <USBD_CtlError>
 8013e12:	e004      	b.n	8013e1e <USBD_GetDescriptor+0x396>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f000 faad 	bl	8014374 <USBD_CtlSendStatus>
 8013e1a:	e000      	b.n	8013e1e <USBD_GetDescriptor+0x396>
    return;
 8013e1c:	bf00      	nop
  }
}
 8013e1e:	3710      	adds	r7, #16
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	889b      	ldrh	r3, [r3, #4]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d131      	bne.n	8013e9a <USBD_SetAddress+0x76>
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	88db      	ldrh	r3, [r3, #6]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d12d      	bne.n	8013e9a <USBD_SetAddress+0x76>
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	885b      	ldrh	r3, [r3, #2]
 8013e42:	2b7f      	cmp	r3, #127	; 0x7f
 8013e44:	d829      	bhi.n	8013e9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	885b      	ldrh	r3, [r3, #2]
 8013e4a:	b2db      	uxtb	r3, r3
 8013e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e58:	b2db      	uxtb	r3, r3
 8013e5a:	2b03      	cmp	r3, #3
 8013e5c:	d104      	bne.n	8013e68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013e5e:	6839      	ldr	r1, [r7, #0]
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f000 f9bc 	bl	80141de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e66:	e01d      	b.n	8013ea4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	7bfa      	ldrb	r2, [r7, #15]
 8013e6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013e70:	7bfb      	ldrb	r3, [r7, #15]
 8013e72:	4619      	mov	r1, r3
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f005 f87e 	bl	8018f76 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f000 fa7a 	bl	8014374 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013e80:	7bfb      	ldrb	r3, [r7, #15]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d004      	beq.n	8013e90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	2202      	movs	r2, #2
 8013e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e8e:	e009      	b.n	8013ea4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2201      	movs	r2, #1
 8013e94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e98:	e004      	b.n	8013ea4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013e9a:	6839      	ldr	r1, [r7, #0]
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f000 f99e 	bl	80141de <USBD_CtlError>
  }
}
 8013ea2:	bf00      	nop
 8013ea4:	bf00      	nop
 8013ea6:	3710      	adds	r7, #16
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}

08013eac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b084      	sub	sp, #16
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	885b      	ldrh	r3, [r3, #2]
 8013ebe:	b2da      	uxtb	r2, r3
 8013ec0:	4b4e      	ldr	r3, [pc, #312]	; (8013ffc <USBD_SetConfig+0x150>)
 8013ec2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013ec4:	4b4d      	ldr	r3, [pc, #308]	; (8013ffc <USBD_SetConfig+0x150>)
 8013ec6:	781b      	ldrb	r3, [r3, #0]
 8013ec8:	2b01      	cmp	r3, #1
 8013eca:	d905      	bls.n	8013ed8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013ecc:	6839      	ldr	r1, [r7, #0]
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f000 f985 	bl	80141de <USBD_CtlError>
    return USBD_FAIL;
 8013ed4:	2303      	movs	r3, #3
 8013ed6:	e08c      	b.n	8013ff2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ede:	b2db      	uxtb	r3, r3
 8013ee0:	2b02      	cmp	r3, #2
 8013ee2:	d002      	beq.n	8013eea <USBD_SetConfig+0x3e>
 8013ee4:	2b03      	cmp	r3, #3
 8013ee6:	d029      	beq.n	8013f3c <USBD_SetConfig+0x90>
 8013ee8:	e075      	b.n	8013fd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013eea:	4b44      	ldr	r3, [pc, #272]	; (8013ffc <USBD_SetConfig+0x150>)
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d020      	beq.n	8013f34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013ef2:	4b42      	ldr	r3, [pc, #264]	; (8013ffc <USBD_SetConfig+0x150>)
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013efc:	4b3f      	ldr	r3, [pc, #252]	; (8013ffc <USBD_SetConfig+0x150>)
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	4619      	mov	r1, r3
 8013f02:	6878      	ldr	r0, [r7, #4]
 8013f04:	f7fe fe53 	bl	8012bae <USBD_SetClassConfig>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013f0c:	7bfb      	ldrb	r3, [r7, #15]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d008      	beq.n	8013f24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013f12:	6839      	ldr	r1, [r7, #0]
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f000 f962 	bl	80141de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2202      	movs	r2, #2
 8013f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013f22:	e065      	b.n	8013ff0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f000 fa25 	bl	8014374 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	2203      	movs	r2, #3
 8013f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013f32:	e05d      	b.n	8013ff0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f000 fa1d 	bl	8014374 <USBD_CtlSendStatus>
      break;
 8013f3a:	e059      	b.n	8013ff0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013f3c:	4b2f      	ldr	r3, [pc, #188]	; (8013ffc <USBD_SetConfig+0x150>)
 8013f3e:	781b      	ldrb	r3, [r3, #0]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d112      	bne.n	8013f6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2202      	movs	r2, #2
 8013f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013f4c:	4b2b      	ldr	r3, [pc, #172]	; (8013ffc <USBD_SetConfig+0x150>)
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	461a      	mov	r2, r3
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013f56:	4b29      	ldr	r3, [pc, #164]	; (8013ffc <USBD_SetConfig+0x150>)
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	4619      	mov	r1, r3
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f7fe fe62 	bl	8012c26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f000 fa06 	bl	8014374 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013f68:	e042      	b.n	8013ff0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013f6a:	4b24      	ldr	r3, [pc, #144]	; (8013ffc <USBD_SetConfig+0x150>)
 8013f6c:	781b      	ldrb	r3, [r3, #0]
 8013f6e:	461a      	mov	r2, r3
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d02a      	beq.n	8013fce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	685b      	ldr	r3, [r3, #4]
 8013f7c:	b2db      	uxtb	r3, r3
 8013f7e:	4619      	mov	r1, r3
 8013f80:	6878      	ldr	r0, [r7, #4]
 8013f82:	f7fe fe50 	bl	8012c26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013f86:	4b1d      	ldr	r3, [pc, #116]	; (8013ffc <USBD_SetConfig+0x150>)
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013f90:	4b1a      	ldr	r3, [pc, #104]	; (8013ffc <USBD_SetConfig+0x150>)
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	4619      	mov	r1, r3
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f7fe fe09 	bl	8012bae <USBD_SetClassConfig>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013fa0:	7bfb      	ldrb	r3, [r7, #15]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d00f      	beq.n	8013fc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013fa6:	6839      	ldr	r1, [r7, #0]
 8013fa8:	6878      	ldr	r0, [r7, #4]
 8013faa:	f000 f918 	bl	80141de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	b2db      	uxtb	r3, r3
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f7fe fe35 	bl	8012c26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2202      	movs	r2, #2
 8013fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013fc4:	e014      	b.n	8013ff0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f000 f9d4 	bl	8014374 <USBD_CtlSendStatus>
      break;
 8013fcc:	e010      	b.n	8013ff0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f000 f9d0 	bl	8014374 <USBD_CtlSendStatus>
      break;
 8013fd4:	e00c      	b.n	8013ff0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013fd6:	6839      	ldr	r1, [r7, #0]
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f000 f900 	bl	80141de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013fde:	4b07      	ldr	r3, [pc, #28]	; (8013ffc <USBD_SetConfig+0x150>)
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7fe fe1e 	bl	8012c26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013fea:	2303      	movs	r3, #3
 8013fec:	73fb      	strb	r3, [r7, #15]
      break;
 8013fee:	bf00      	nop
  }

  return ret;
 8013ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3710      	adds	r7, #16
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	24000b5c 	.word	0x24000b5c

08014000 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	88db      	ldrh	r3, [r3, #6]
 801400e:	2b01      	cmp	r3, #1
 8014010:	d004      	beq.n	801401c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014012:	6839      	ldr	r1, [r7, #0]
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f000 f8e2 	bl	80141de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801401a:	e023      	b.n	8014064 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014022:	b2db      	uxtb	r3, r3
 8014024:	2b02      	cmp	r3, #2
 8014026:	dc02      	bgt.n	801402e <USBD_GetConfig+0x2e>
 8014028:	2b00      	cmp	r3, #0
 801402a:	dc03      	bgt.n	8014034 <USBD_GetConfig+0x34>
 801402c:	e015      	b.n	801405a <USBD_GetConfig+0x5a>
 801402e:	2b03      	cmp	r3, #3
 8014030:	d00b      	beq.n	801404a <USBD_GetConfig+0x4a>
 8014032:	e012      	b.n	801405a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2200      	movs	r2, #0
 8014038:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	3308      	adds	r3, #8
 801403e:	2201      	movs	r2, #1
 8014040:	4619      	mov	r1, r3
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f000 f93c 	bl	80142c0 <USBD_CtlSendData>
        break;
 8014048:	e00c      	b.n	8014064 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	3304      	adds	r3, #4
 801404e:	2201      	movs	r2, #1
 8014050:	4619      	mov	r1, r3
 8014052:	6878      	ldr	r0, [r7, #4]
 8014054:	f000 f934 	bl	80142c0 <USBD_CtlSendData>
        break;
 8014058:	e004      	b.n	8014064 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801405a:	6839      	ldr	r1, [r7, #0]
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f000 f8be 	bl	80141de <USBD_CtlError>
        break;
 8014062:	bf00      	nop
}
 8014064:	bf00      	nop
 8014066:	3708      	adds	r7, #8
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801407c:	b2db      	uxtb	r3, r3
 801407e:	3b01      	subs	r3, #1
 8014080:	2b02      	cmp	r3, #2
 8014082:	d81e      	bhi.n	80140c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	88db      	ldrh	r3, [r3, #6]
 8014088:	2b02      	cmp	r3, #2
 801408a:	d004      	beq.n	8014096 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801408c:	6839      	ldr	r1, [r7, #0]
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f000 f8a5 	bl	80141de <USBD_CtlError>
        break;
 8014094:	e01a      	b.n	80140cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2201      	movs	r2, #1
 801409a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d005      	beq.n	80140b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	68db      	ldr	r3, [r3, #12]
 80140aa:	f043 0202 	orr.w	r2, r3, #2
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	330c      	adds	r3, #12
 80140b6:	2202      	movs	r2, #2
 80140b8:	4619      	mov	r1, r3
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f000 f900 	bl	80142c0 <USBD_CtlSendData>
      break;
 80140c0:	e004      	b.n	80140cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80140c2:	6839      	ldr	r1, [r7, #0]
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f000 f88a 	bl	80141de <USBD_CtlError>
      break;
 80140ca:	bf00      	nop
  }
}
 80140cc:	bf00      	nop
 80140ce:	3708      	adds	r7, #8
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	885b      	ldrh	r3, [r3, #2]
 80140e2:	2b01      	cmp	r3, #1
 80140e4:	d107      	bne.n	80140f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2201      	movs	r2, #1
 80140ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f000 f940 	bl	8014374 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80140f4:	e013      	b.n	801411e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	885b      	ldrh	r3, [r3, #2]
 80140fa:	2b02      	cmp	r3, #2
 80140fc:	d10b      	bne.n	8014116 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	889b      	ldrh	r3, [r3, #4]
 8014102:	0a1b      	lsrs	r3, r3, #8
 8014104:	b29b      	uxth	r3, r3
 8014106:	b2da      	uxtb	r2, r3
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f000 f930 	bl	8014374 <USBD_CtlSendStatus>
}
 8014114:	e003      	b.n	801411e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014116:	6839      	ldr	r1, [r7, #0]
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f000 f860 	bl	80141de <USBD_CtlError>
}
 801411e:	bf00      	nop
 8014120:	3708      	adds	r7, #8
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}

08014126 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014126:	b580      	push	{r7, lr}
 8014128:	b082      	sub	sp, #8
 801412a:	af00      	add	r7, sp, #0
 801412c:	6078      	str	r0, [r7, #4]
 801412e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014136:	b2db      	uxtb	r3, r3
 8014138:	3b01      	subs	r3, #1
 801413a:	2b02      	cmp	r3, #2
 801413c:	d80b      	bhi.n	8014156 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	885b      	ldrh	r3, [r3, #2]
 8014142:	2b01      	cmp	r3, #1
 8014144:	d10c      	bne.n	8014160 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2200      	movs	r2, #0
 801414a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f000 f910 	bl	8014374 <USBD_CtlSendStatus>
      }
      break;
 8014154:	e004      	b.n	8014160 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014156:	6839      	ldr	r1, [r7, #0]
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f000 f840 	bl	80141de <USBD_CtlError>
      break;
 801415e:	e000      	b.n	8014162 <USBD_ClrFeature+0x3c>
      break;
 8014160:	bf00      	nop
  }
}
 8014162:	bf00      	nop
 8014164:	3708      	adds	r7, #8
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}

0801416a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801416a:	b580      	push	{r7, lr}
 801416c:	b084      	sub	sp, #16
 801416e:	af00      	add	r7, sp, #0
 8014170:	6078      	str	r0, [r7, #4]
 8014172:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	781a      	ldrb	r2, [r3, #0]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	3301      	adds	r3, #1
 8014184:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	781a      	ldrb	r2, [r3, #0]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	3301      	adds	r3, #1
 8014192:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014194:	68f8      	ldr	r0, [r7, #12]
 8014196:	f7ff f9dc 	bl	8013552 <SWAPBYTE>
 801419a:	4603      	mov	r3, r0
 801419c:	461a      	mov	r2, r3
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	3301      	adds	r3, #1
 80141a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	3301      	adds	r3, #1
 80141ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f7ff f9cf 	bl	8013552 <SWAPBYTE>
 80141b4:	4603      	mov	r3, r0
 80141b6:	461a      	mov	r2, r3
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	3301      	adds	r3, #1
 80141c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	3301      	adds	r3, #1
 80141c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80141c8:	68f8      	ldr	r0, [r7, #12]
 80141ca:	f7ff f9c2 	bl	8013552 <SWAPBYTE>
 80141ce:	4603      	mov	r3, r0
 80141d0:	461a      	mov	r2, r3
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	80da      	strh	r2, [r3, #6]
}
 80141d6:	bf00      	nop
 80141d8:	3710      	adds	r7, #16
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}

080141de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141de:	b580      	push	{r7, lr}
 80141e0:	b082      	sub	sp, #8
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	6078      	str	r0, [r7, #4]
 80141e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80141e8:	2180      	movs	r1, #128	; 0x80
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f004 fe59 	bl	8018ea2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80141f0:	2100      	movs	r1, #0
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f004 fe55 	bl	8018ea2 <USBD_LL_StallEP>
}
 80141f8:	bf00      	nop
 80141fa:	3708      	adds	r7, #8
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bd80      	pop	{r7, pc}

08014200 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b086      	sub	sp, #24
 8014204:	af00      	add	r7, sp, #0
 8014206:	60f8      	str	r0, [r7, #12]
 8014208:	60b9      	str	r1, [r7, #8]
 801420a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801420c:	2300      	movs	r3, #0
 801420e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d036      	beq.n	8014284 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801421a:	6938      	ldr	r0, [r7, #16]
 801421c:	f000 f836 	bl	801428c <USBD_GetLen>
 8014220:	4603      	mov	r3, r0
 8014222:	3301      	adds	r3, #1
 8014224:	b29b      	uxth	r3, r3
 8014226:	005b      	lsls	r3, r3, #1
 8014228:	b29a      	uxth	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801422e:	7dfb      	ldrb	r3, [r7, #23]
 8014230:	68ba      	ldr	r2, [r7, #8]
 8014232:	4413      	add	r3, r2
 8014234:	687a      	ldr	r2, [r7, #4]
 8014236:	7812      	ldrb	r2, [r2, #0]
 8014238:	701a      	strb	r2, [r3, #0]
  idx++;
 801423a:	7dfb      	ldrb	r3, [r7, #23]
 801423c:	3301      	adds	r3, #1
 801423e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014240:	7dfb      	ldrb	r3, [r7, #23]
 8014242:	68ba      	ldr	r2, [r7, #8]
 8014244:	4413      	add	r3, r2
 8014246:	2203      	movs	r2, #3
 8014248:	701a      	strb	r2, [r3, #0]
  idx++;
 801424a:	7dfb      	ldrb	r3, [r7, #23]
 801424c:	3301      	adds	r3, #1
 801424e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014250:	e013      	b.n	801427a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014252:	7dfb      	ldrb	r3, [r7, #23]
 8014254:	68ba      	ldr	r2, [r7, #8]
 8014256:	4413      	add	r3, r2
 8014258:	693a      	ldr	r2, [r7, #16]
 801425a:	7812      	ldrb	r2, [r2, #0]
 801425c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	3301      	adds	r3, #1
 8014262:	613b      	str	r3, [r7, #16]
    idx++;
 8014264:	7dfb      	ldrb	r3, [r7, #23]
 8014266:	3301      	adds	r3, #1
 8014268:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801426a:	7dfb      	ldrb	r3, [r7, #23]
 801426c:	68ba      	ldr	r2, [r7, #8]
 801426e:	4413      	add	r3, r2
 8014270:	2200      	movs	r2, #0
 8014272:	701a      	strb	r2, [r3, #0]
    idx++;
 8014274:	7dfb      	ldrb	r3, [r7, #23]
 8014276:	3301      	adds	r3, #1
 8014278:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d1e7      	bne.n	8014252 <USBD_GetString+0x52>
 8014282:	e000      	b.n	8014286 <USBD_GetString+0x86>
    return;
 8014284:	bf00      	nop
  }
}
 8014286:	3718      	adds	r7, #24
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801428c:	b480      	push	{r7}
 801428e:	b085      	sub	sp, #20
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014294:	2300      	movs	r3, #0
 8014296:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801429c:	e005      	b.n	80142aa <USBD_GetLen+0x1e>
  {
    len++;
 801429e:	7bfb      	ldrb	r3, [r7, #15]
 80142a0:	3301      	adds	r3, #1
 80142a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	3301      	adds	r3, #1
 80142a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d1f5      	bne.n	801429e <USBD_GetLen+0x12>
  }

  return len;
 80142b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3714      	adds	r7, #20
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr

080142c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b084      	sub	sp, #16
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2202      	movs	r2, #2
 80142d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	687a      	ldr	r2, [r7, #4]
 80142d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	68ba      	ldr	r2, [r7, #8]
 80142e4:	2100      	movs	r1, #0
 80142e6:	68f8      	ldr	r0, [r7, #12]
 80142e8:	f004 fe64 	bl	8018fb4 <USBD_LL_Transmit>

  return USBD_OK;
 80142ec:	2300      	movs	r3, #0
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3710      	adds	r7, #16
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}

080142f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80142f6:	b580      	push	{r7, lr}
 80142f8:	b084      	sub	sp, #16
 80142fa:	af00      	add	r7, sp, #0
 80142fc:	60f8      	str	r0, [r7, #12]
 80142fe:	60b9      	str	r1, [r7, #8]
 8014300:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	68ba      	ldr	r2, [r7, #8]
 8014306:	2100      	movs	r1, #0
 8014308:	68f8      	ldr	r0, [r7, #12]
 801430a:	f004 fe53 	bl	8018fb4 <USBD_LL_Transmit>

  return USBD_OK;
 801430e:	2300      	movs	r3, #0
}
 8014310:	4618      	mov	r0, r3
 8014312:	3710      	adds	r7, #16
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b084      	sub	sp, #16
 801431c:	af00      	add	r7, sp, #0
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	60b9      	str	r1, [r7, #8]
 8014322:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	2203      	movs	r2, #3
 8014328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	687a      	ldr	r2, [r7, #4]
 8014338:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	68ba      	ldr	r2, [r7, #8]
 8014340:	2100      	movs	r1, #0
 8014342:	68f8      	ldr	r0, [r7, #12]
 8014344:	f004 fe57 	bl	8018ff6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014348:	2300      	movs	r3, #0
}
 801434a:	4618      	mov	r0, r3
 801434c:	3710      	adds	r7, #16
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}

08014352 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014352:	b580      	push	{r7, lr}
 8014354:	b084      	sub	sp, #16
 8014356:	af00      	add	r7, sp, #0
 8014358:	60f8      	str	r0, [r7, #12]
 801435a:	60b9      	str	r1, [r7, #8]
 801435c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	68ba      	ldr	r2, [r7, #8]
 8014362:	2100      	movs	r1, #0
 8014364:	68f8      	ldr	r0, [r7, #12]
 8014366:	f004 fe46 	bl	8018ff6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801436a:	2300      	movs	r3, #0
}
 801436c:	4618      	mov	r0, r3
 801436e:	3710      	adds	r7, #16
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}

08014374 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b082      	sub	sp, #8
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	2204      	movs	r2, #4
 8014380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014384:	2300      	movs	r3, #0
 8014386:	2200      	movs	r2, #0
 8014388:	2100      	movs	r1, #0
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f004 fe12 	bl	8018fb4 <USBD_LL_Transmit>

  return USBD_OK;
 8014390:	2300      	movs	r3, #0
}
 8014392:	4618      	mov	r0, r3
 8014394:	3708      	adds	r7, #8
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}

0801439a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801439a:	b580      	push	{r7, lr}
 801439c:	b082      	sub	sp, #8
 801439e:	af00      	add	r7, sp, #0
 80143a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	2205      	movs	r2, #5
 80143a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80143aa:	2300      	movs	r3, #0
 80143ac:	2200      	movs	r2, #0
 80143ae:	2100      	movs	r1, #0
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f004 fe20 	bl	8018ff6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80143b6:	2300      	movs	r3, #0
}
 80143b8:	4618      	mov	r0, r3
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}

080143c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b084      	sub	sp, #16
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	4603      	mov	r3, r0
 80143c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80143ca:	79fb      	ldrb	r3, [r7, #7]
 80143cc:	4a08      	ldr	r2, [pc, #32]	; (80143f0 <disk_status+0x30>)
 80143ce:	009b      	lsls	r3, r3, #2
 80143d0:	4413      	add	r3, r2
 80143d2:	685b      	ldr	r3, [r3, #4]
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	79fa      	ldrb	r2, [r7, #7]
 80143d8:	4905      	ldr	r1, [pc, #20]	; (80143f0 <disk_status+0x30>)
 80143da:	440a      	add	r2, r1
 80143dc:	7a12      	ldrb	r2, [r2, #8]
 80143de:	4610      	mov	r0, r2
 80143e0:	4798      	blx	r3
 80143e2:	4603      	mov	r3, r0
 80143e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80143e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	3710      	adds	r7, #16
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}
 80143f0:	24000b88 	.word	0x24000b88

080143f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b084      	sub	sp, #16
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	4603      	mov	r3, r0
 80143fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80143fe:	2300      	movs	r3, #0
 8014400:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014402:	79fb      	ldrb	r3, [r7, #7]
 8014404:	4a0d      	ldr	r2, [pc, #52]	; (801443c <disk_initialize+0x48>)
 8014406:	5cd3      	ldrb	r3, [r2, r3]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d111      	bne.n	8014430 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801440c:	79fb      	ldrb	r3, [r7, #7]
 801440e:	4a0b      	ldr	r2, [pc, #44]	; (801443c <disk_initialize+0x48>)
 8014410:	2101      	movs	r1, #1
 8014412:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014414:	79fb      	ldrb	r3, [r7, #7]
 8014416:	4a09      	ldr	r2, [pc, #36]	; (801443c <disk_initialize+0x48>)
 8014418:	009b      	lsls	r3, r3, #2
 801441a:	4413      	add	r3, r2
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	79fa      	ldrb	r2, [r7, #7]
 8014422:	4906      	ldr	r1, [pc, #24]	; (801443c <disk_initialize+0x48>)
 8014424:	440a      	add	r2, r1
 8014426:	7a12      	ldrb	r2, [r2, #8]
 8014428:	4610      	mov	r0, r2
 801442a:	4798      	blx	r3
 801442c:	4603      	mov	r3, r0
 801442e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014430:	7bfb      	ldrb	r3, [r7, #15]
}
 8014432:	4618      	mov	r0, r3
 8014434:	3710      	adds	r7, #16
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
 801443a:	bf00      	nop
 801443c:	24000b88 	.word	0x24000b88

08014440 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014440:	b590      	push	{r4, r7, lr}
 8014442:	b087      	sub	sp, #28
 8014444:	af00      	add	r7, sp, #0
 8014446:	60b9      	str	r1, [r7, #8]
 8014448:	607a      	str	r2, [r7, #4]
 801444a:	603b      	str	r3, [r7, #0]
 801444c:	4603      	mov	r3, r0
 801444e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014450:	7bfb      	ldrb	r3, [r7, #15]
 8014452:	4a0a      	ldr	r2, [pc, #40]	; (801447c <disk_read+0x3c>)
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	4413      	add	r3, r2
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	689c      	ldr	r4, [r3, #8]
 801445c:	7bfb      	ldrb	r3, [r7, #15]
 801445e:	4a07      	ldr	r2, [pc, #28]	; (801447c <disk_read+0x3c>)
 8014460:	4413      	add	r3, r2
 8014462:	7a18      	ldrb	r0, [r3, #8]
 8014464:	683b      	ldr	r3, [r7, #0]
 8014466:	687a      	ldr	r2, [r7, #4]
 8014468:	68b9      	ldr	r1, [r7, #8]
 801446a:	47a0      	blx	r4
 801446c:	4603      	mov	r3, r0
 801446e:	75fb      	strb	r3, [r7, #23]
  return res;
 8014470:	7dfb      	ldrb	r3, [r7, #23]
}
 8014472:	4618      	mov	r0, r3
 8014474:	371c      	adds	r7, #28
 8014476:	46bd      	mov	sp, r7
 8014478:	bd90      	pop	{r4, r7, pc}
 801447a:	bf00      	nop
 801447c:	24000b88 	.word	0x24000b88

08014480 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014480:	b590      	push	{r4, r7, lr}
 8014482:	b087      	sub	sp, #28
 8014484:	af00      	add	r7, sp, #0
 8014486:	60b9      	str	r1, [r7, #8]
 8014488:	607a      	str	r2, [r7, #4]
 801448a:	603b      	str	r3, [r7, #0]
 801448c:	4603      	mov	r3, r0
 801448e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014490:	7bfb      	ldrb	r3, [r7, #15]
 8014492:	4a0a      	ldr	r2, [pc, #40]	; (80144bc <disk_write+0x3c>)
 8014494:	009b      	lsls	r3, r3, #2
 8014496:	4413      	add	r3, r2
 8014498:	685b      	ldr	r3, [r3, #4]
 801449a:	68dc      	ldr	r4, [r3, #12]
 801449c:	7bfb      	ldrb	r3, [r7, #15]
 801449e:	4a07      	ldr	r2, [pc, #28]	; (80144bc <disk_write+0x3c>)
 80144a0:	4413      	add	r3, r2
 80144a2:	7a18      	ldrb	r0, [r3, #8]
 80144a4:	683b      	ldr	r3, [r7, #0]
 80144a6:	687a      	ldr	r2, [r7, #4]
 80144a8:	68b9      	ldr	r1, [r7, #8]
 80144aa:	47a0      	blx	r4
 80144ac:	4603      	mov	r3, r0
 80144ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80144b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	371c      	adds	r7, #28
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd90      	pop	{r4, r7, pc}
 80144ba:	bf00      	nop
 80144bc:	24000b88 	.word	0x24000b88

080144c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b084      	sub	sp, #16
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	4603      	mov	r3, r0
 80144c8:	603a      	str	r2, [r7, #0]
 80144ca:	71fb      	strb	r3, [r7, #7]
 80144cc:	460b      	mov	r3, r1
 80144ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80144d0:	79fb      	ldrb	r3, [r7, #7]
 80144d2:	4a09      	ldr	r2, [pc, #36]	; (80144f8 <disk_ioctl+0x38>)
 80144d4:	009b      	lsls	r3, r3, #2
 80144d6:	4413      	add	r3, r2
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	691b      	ldr	r3, [r3, #16]
 80144dc:	79fa      	ldrb	r2, [r7, #7]
 80144de:	4906      	ldr	r1, [pc, #24]	; (80144f8 <disk_ioctl+0x38>)
 80144e0:	440a      	add	r2, r1
 80144e2:	7a10      	ldrb	r0, [r2, #8]
 80144e4:	79b9      	ldrb	r1, [r7, #6]
 80144e6:	683a      	ldr	r2, [r7, #0]
 80144e8:	4798      	blx	r3
 80144ea:	4603      	mov	r3, r0
 80144ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80144ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3710      	adds	r7, #16
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	24000b88 	.word	0x24000b88

080144fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80144fc:	b480      	push	{r7}
 80144fe:	b085      	sub	sp, #20
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	3301      	adds	r3, #1
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801450c:	89fb      	ldrh	r3, [r7, #14]
 801450e:	021b      	lsls	r3, r3, #8
 8014510:	b21a      	sxth	r2, r3
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	b21b      	sxth	r3, r3
 8014518:	4313      	orrs	r3, r2
 801451a:	b21b      	sxth	r3, r3
 801451c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801451e:	89fb      	ldrh	r3, [r7, #14]
}
 8014520:	4618      	mov	r0, r3
 8014522:	3714      	adds	r7, #20
 8014524:	46bd      	mov	sp, r7
 8014526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452a:	4770      	bx	lr

0801452c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801452c:	b480      	push	{r7}
 801452e:	b085      	sub	sp, #20
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	3303      	adds	r3, #3
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	021b      	lsls	r3, r3, #8
 8014540:	687a      	ldr	r2, [r7, #4]
 8014542:	3202      	adds	r2, #2
 8014544:	7812      	ldrb	r2, [r2, #0]
 8014546:	4313      	orrs	r3, r2
 8014548:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	021b      	lsls	r3, r3, #8
 801454e:	687a      	ldr	r2, [r7, #4]
 8014550:	3201      	adds	r2, #1
 8014552:	7812      	ldrb	r2, [r2, #0]
 8014554:	4313      	orrs	r3, r2
 8014556:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	021b      	lsls	r3, r3, #8
 801455c:	687a      	ldr	r2, [r7, #4]
 801455e:	7812      	ldrb	r2, [r2, #0]
 8014560:	4313      	orrs	r3, r2
 8014562:	60fb      	str	r3, [r7, #12]
	return rv;
 8014564:	68fb      	ldr	r3, [r7, #12]
}
 8014566:	4618      	mov	r0, r3
 8014568:	3714      	adds	r7, #20
 801456a:	46bd      	mov	sp, r7
 801456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014570:	4770      	bx	lr

08014572 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014572:	b480      	push	{r7}
 8014574:	b083      	sub	sp, #12
 8014576:	af00      	add	r7, sp, #0
 8014578:	6078      	str	r0, [r7, #4]
 801457a:	460b      	mov	r3, r1
 801457c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	1c5a      	adds	r2, r3, #1
 8014582:	607a      	str	r2, [r7, #4]
 8014584:	887a      	ldrh	r2, [r7, #2]
 8014586:	b2d2      	uxtb	r2, r2
 8014588:	701a      	strb	r2, [r3, #0]
 801458a:	887b      	ldrh	r3, [r7, #2]
 801458c:	0a1b      	lsrs	r3, r3, #8
 801458e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	1c5a      	adds	r2, r3, #1
 8014594:	607a      	str	r2, [r7, #4]
 8014596:	887a      	ldrh	r2, [r7, #2]
 8014598:	b2d2      	uxtb	r2, r2
 801459a:	701a      	strb	r2, [r3, #0]
}
 801459c:	bf00      	nop
 801459e:	370c      	adds	r7, #12
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80145a8:	b480      	push	{r7}
 80145aa:	b083      	sub	sp, #12
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	1c5a      	adds	r2, r3, #1
 80145b6:	607a      	str	r2, [r7, #4]
 80145b8:	683a      	ldr	r2, [r7, #0]
 80145ba:	b2d2      	uxtb	r2, r2
 80145bc:	701a      	strb	r2, [r3, #0]
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	0a1b      	lsrs	r3, r3, #8
 80145c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	1c5a      	adds	r2, r3, #1
 80145c8:	607a      	str	r2, [r7, #4]
 80145ca:	683a      	ldr	r2, [r7, #0]
 80145cc:	b2d2      	uxtb	r2, r2
 80145ce:	701a      	strb	r2, [r3, #0]
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	0a1b      	lsrs	r3, r3, #8
 80145d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	1c5a      	adds	r2, r3, #1
 80145da:	607a      	str	r2, [r7, #4]
 80145dc:	683a      	ldr	r2, [r7, #0]
 80145de:	b2d2      	uxtb	r2, r2
 80145e0:	701a      	strb	r2, [r3, #0]
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	0a1b      	lsrs	r3, r3, #8
 80145e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	1c5a      	adds	r2, r3, #1
 80145ec:	607a      	str	r2, [r7, #4]
 80145ee:	683a      	ldr	r2, [r7, #0]
 80145f0:	b2d2      	uxtb	r2, r2
 80145f2:	701a      	strb	r2, [r3, #0]
}
 80145f4:	bf00      	nop
 80145f6:	370c      	adds	r7, #12
 80145f8:	46bd      	mov	sp, r7
 80145fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fe:	4770      	bx	lr

08014600 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014600:	b480      	push	{r7}
 8014602:	b087      	sub	sp, #28
 8014604:	af00      	add	r7, sp, #0
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	60b9      	str	r1, [r7, #8]
 801460a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d00d      	beq.n	8014636 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801461a:	693a      	ldr	r2, [r7, #16]
 801461c:	1c53      	adds	r3, r2, #1
 801461e:	613b      	str	r3, [r7, #16]
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	1c59      	adds	r1, r3, #1
 8014624:	6179      	str	r1, [r7, #20]
 8014626:	7812      	ldrb	r2, [r2, #0]
 8014628:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	3b01      	subs	r3, #1
 801462e:	607b      	str	r3, [r7, #4]
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d1f1      	bne.n	801461a <mem_cpy+0x1a>
	}
}
 8014636:	bf00      	nop
 8014638:	371c      	adds	r7, #28
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr

08014642 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014642:	b480      	push	{r7}
 8014644:	b087      	sub	sp, #28
 8014646:	af00      	add	r7, sp, #0
 8014648:	60f8      	str	r0, [r7, #12]
 801464a:	60b9      	str	r1, [r7, #8]
 801464c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	1c5a      	adds	r2, r3, #1
 8014656:	617a      	str	r2, [r7, #20]
 8014658:	68ba      	ldr	r2, [r7, #8]
 801465a:	b2d2      	uxtb	r2, r2
 801465c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	3b01      	subs	r3, #1
 8014662:	607b      	str	r3, [r7, #4]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d1f3      	bne.n	8014652 <mem_set+0x10>
}
 801466a:	bf00      	nop
 801466c:	bf00      	nop
 801466e:	371c      	adds	r7, #28
 8014670:	46bd      	mov	sp, r7
 8014672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014676:	4770      	bx	lr

08014678 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014678:	b480      	push	{r7}
 801467a:	b089      	sub	sp, #36	; 0x24
 801467c:	af00      	add	r7, sp, #0
 801467e:	60f8      	str	r0, [r7, #12]
 8014680:	60b9      	str	r1, [r7, #8]
 8014682:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	61fb      	str	r3, [r7, #28]
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801468c:	2300      	movs	r3, #0
 801468e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014690:	69fb      	ldr	r3, [r7, #28]
 8014692:	1c5a      	adds	r2, r3, #1
 8014694:	61fa      	str	r2, [r7, #28]
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	4619      	mov	r1, r3
 801469a:	69bb      	ldr	r3, [r7, #24]
 801469c:	1c5a      	adds	r2, r3, #1
 801469e:	61ba      	str	r2, [r7, #24]
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	1acb      	subs	r3, r1, r3
 80146a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	3b01      	subs	r3, #1
 80146aa:	607b      	str	r3, [r7, #4]
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d002      	beq.n	80146b8 <mem_cmp+0x40>
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d0eb      	beq.n	8014690 <mem_cmp+0x18>

	return r;
 80146b8:	697b      	ldr	r3, [r7, #20]
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3724      	adds	r7, #36	; 0x24
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr

080146c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80146c6:	b480      	push	{r7}
 80146c8:	b083      	sub	sp, #12
 80146ca:	af00      	add	r7, sp, #0
 80146cc:	6078      	str	r0, [r7, #4]
 80146ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80146d0:	e002      	b.n	80146d8 <chk_chr+0x12>
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	3301      	adds	r3, #1
 80146d6:	607b      	str	r3, [r7, #4]
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d005      	beq.n	80146ec <chk_chr+0x26>
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	461a      	mov	r2, r3
 80146e6:	683b      	ldr	r3, [r7, #0]
 80146e8:	4293      	cmp	r3, r2
 80146ea:	d1f2      	bne.n	80146d2 <chk_chr+0xc>
	return *str;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	781b      	ldrb	r3, [r3, #0]
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	370c      	adds	r7, #12
 80146f4:	46bd      	mov	sp, r7
 80146f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fa:	4770      	bx	lr

080146fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80146fc:	b480      	push	{r7}
 80146fe:	b085      	sub	sp, #20
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014706:	2300      	movs	r3, #0
 8014708:	60bb      	str	r3, [r7, #8]
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	60fb      	str	r3, [r7, #12]
 801470e:	e029      	b.n	8014764 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014710:	4a27      	ldr	r2, [pc, #156]	; (80147b0 <chk_lock+0xb4>)
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	011b      	lsls	r3, r3, #4
 8014716:	4413      	add	r3, r2
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d01d      	beq.n	801475a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801471e:	4a24      	ldr	r2, [pc, #144]	; (80147b0 <chk_lock+0xb4>)
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	011b      	lsls	r3, r3, #4
 8014724:	4413      	add	r3, r2
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	429a      	cmp	r2, r3
 801472e:	d116      	bne.n	801475e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014730:	4a1f      	ldr	r2, [pc, #124]	; (80147b0 <chk_lock+0xb4>)
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	011b      	lsls	r3, r3, #4
 8014736:	4413      	add	r3, r2
 8014738:	3304      	adds	r3, #4
 801473a:	681a      	ldr	r2, [r3, #0]
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014740:	429a      	cmp	r2, r3
 8014742:	d10c      	bne.n	801475e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014744:	4a1a      	ldr	r2, [pc, #104]	; (80147b0 <chk_lock+0xb4>)
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	011b      	lsls	r3, r3, #4
 801474a:	4413      	add	r3, r2
 801474c:	3308      	adds	r3, #8
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8014754:	429a      	cmp	r2, r3
 8014756:	d102      	bne.n	801475e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014758:	e007      	b.n	801476a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801475a:	2301      	movs	r3, #1
 801475c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	3301      	adds	r3, #1
 8014762:	60fb      	str	r3, [r7, #12]
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	2b01      	cmp	r3, #1
 8014768:	d9d2      	bls.n	8014710 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2b02      	cmp	r3, #2
 801476e:	d109      	bne.n	8014784 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d102      	bne.n	801477c <chk_lock+0x80>
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	2b02      	cmp	r3, #2
 801477a:	d101      	bne.n	8014780 <chk_lock+0x84>
 801477c:	2300      	movs	r3, #0
 801477e:	e010      	b.n	80147a2 <chk_lock+0xa6>
 8014780:	2312      	movs	r3, #18
 8014782:	e00e      	b.n	80147a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d108      	bne.n	801479c <chk_lock+0xa0>
 801478a:	4a09      	ldr	r2, [pc, #36]	; (80147b0 <chk_lock+0xb4>)
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	011b      	lsls	r3, r3, #4
 8014790:	4413      	add	r3, r2
 8014792:	330c      	adds	r3, #12
 8014794:	881b      	ldrh	r3, [r3, #0]
 8014796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801479a:	d101      	bne.n	80147a0 <chk_lock+0xa4>
 801479c:	2310      	movs	r3, #16
 801479e:	e000      	b.n	80147a2 <chk_lock+0xa6>
 80147a0:	2300      	movs	r3, #0
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3714      	adds	r7, #20
 80147a6:	46bd      	mov	sp, r7
 80147a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ac:	4770      	bx	lr
 80147ae:	bf00      	nop
 80147b0:	24000b68 	.word	0x24000b68

080147b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80147b4:	b480      	push	{r7}
 80147b6:	b083      	sub	sp, #12
 80147b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80147ba:	2300      	movs	r3, #0
 80147bc:	607b      	str	r3, [r7, #4]
 80147be:	e002      	b.n	80147c6 <enq_lock+0x12>
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	3301      	adds	r3, #1
 80147c4:	607b      	str	r3, [r7, #4]
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	d806      	bhi.n	80147da <enq_lock+0x26>
 80147cc:	4a09      	ldr	r2, [pc, #36]	; (80147f4 <enq_lock+0x40>)
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	011b      	lsls	r3, r3, #4
 80147d2:	4413      	add	r3, r2
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d1f2      	bne.n	80147c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	2b02      	cmp	r3, #2
 80147de:	bf14      	ite	ne
 80147e0:	2301      	movne	r3, #1
 80147e2:	2300      	moveq	r3, #0
 80147e4:	b2db      	uxtb	r3, r3
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	370c      	adds	r7, #12
 80147ea:	46bd      	mov	sp, r7
 80147ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f0:	4770      	bx	lr
 80147f2:	bf00      	nop
 80147f4:	24000b68 	.word	0x24000b68

080147f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80147f8:	b480      	push	{r7}
 80147fa:	b085      	sub	sp, #20
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014802:	2300      	movs	r3, #0
 8014804:	60fb      	str	r3, [r7, #12]
 8014806:	e01f      	b.n	8014848 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014808:	4a41      	ldr	r2, [pc, #260]	; (8014910 <inc_lock+0x118>)
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	011b      	lsls	r3, r3, #4
 801480e:	4413      	add	r3, r2
 8014810:	681a      	ldr	r2, [r3, #0]
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	429a      	cmp	r2, r3
 8014818:	d113      	bne.n	8014842 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801481a:	4a3d      	ldr	r2, [pc, #244]	; (8014910 <inc_lock+0x118>)
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	011b      	lsls	r3, r3, #4
 8014820:	4413      	add	r3, r2
 8014822:	3304      	adds	r3, #4
 8014824:	681a      	ldr	r2, [r3, #0]
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801482a:	429a      	cmp	r2, r3
 801482c:	d109      	bne.n	8014842 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801482e:	4a38      	ldr	r2, [pc, #224]	; (8014910 <inc_lock+0x118>)
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	011b      	lsls	r3, r3, #4
 8014834:	4413      	add	r3, r2
 8014836:	3308      	adds	r3, #8
 8014838:	681a      	ldr	r2, [r3, #0]
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801483e:	429a      	cmp	r2, r3
 8014840:	d006      	beq.n	8014850 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	3301      	adds	r3, #1
 8014846:	60fb      	str	r3, [r7, #12]
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2b01      	cmp	r3, #1
 801484c:	d9dc      	bls.n	8014808 <inc_lock+0x10>
 801484e:	e000      	b.n	8014852 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8014850:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	2b02      	cmp	r3, #2
 8014856:	d132      	bne.n	80148be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014858:	2300      	movs	r3, #0
 801485a:	60fb      	str	r3, [r7, #12]
 801485c:	e002      	b.n	8014864 <inc_lock+0x6c>
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	3301      	adds	r3, #1
 8014862:	60fb      	str	r3, [r7, #12]
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	2b01      	cmp	r3, #1
 8014868:	d806      	bhi.n	8014878 <inc_lock+0x80>
 801486a:	4a29      	ldr	r2, [pc, #164]	; (8014910 <inc_lock+0x118>)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	011b      	lsls	r3, r3, #4
 8014870:	4413      	add	r3, r2
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d1f2      	bne.n	801485e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	2b02      	cmp	r3, #2
 801487c:	d101      	bne.n	8014882 <inc_lock+0x8a>
 801487e:	2300      	movs	r3, #0
 8014880:	e040      	b.n	8014904 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681a      	ldr	r2, [r3, #0]
 8014886:	4922      	ldr	r1, [pc, #136]	; (8014910 <inc_lock+0x118>)
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	011b      	lsls	r3, r3, #4
 801488c:	440b      	add	r3, r1
 801488e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	689a      	ldr	r2, [r3, #8]
 8014894:	491e      	ldr	r1, [pc, #120]	; (8014910 <inc_lock+0x118>)
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	011b      	lsls	r3, r3, #4
 801489a:	440b      	add	r3, r1
 801489c:	3304      	adds	r3, #4
 801489e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	695a      	ldr	r2, [r3, #20]
 80148a4:	491a      	ldr	r1, [pc, #104]	; (8014910 <inc_lock+0x118>)
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	011b      	lsls	r3, r3, #4
 80148aa:	440b      	add	r3, r1
 80148ac:	3308      	adds	r3, #8
 80148ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80148b0:	4a17      	ldr	r2, [pc, #92]	; (8014910 <inc_lock+0x118>)
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	011b      	lsls	r3, r3, #4
 80148b6:	4413      	add	r3, r2
 80148b8:	330c      	adds	r3, #12
 80148ba:	2200      	movs	r2, #0
 80148bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d009      	beq.n	80148d8 <inc_lock+0xe0>
 80148c4:	4a12      	ldr	r2, [pc, #72]	; (8014910 <inc_lock+0x118>)
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	011b      	lsls	r3, r3, #4
 80148ca:	4413      	add	r3, r2
 80148cc:	330c      	adds	r3, #12
 80148ce:	881b      	ldrh	r3, [r3, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d001      	beq.n	80148d8 <inc_lock+0xe0>
 80148d4:	2300      	movs	r3, #0
 80148d6:	e015      	b.n	8014904 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d108      	bne.n	80148f0 <inc_lock+0xf8>
 80148de:	4a0c      	ldr	r2, [pc, #48]	; (8014910 <inc_lock+0x118>)
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	011b      	lsls	r3, r3, #4
 80148e4:	4413      	add	r3, r2
 80148e6:	330c      	adds	r3, #12
 80148e8:	881b      	ldrh	r3, [r3, #0]
 80148ea:	3301      	adds	r3, #1
 80148ec:	b29a      	uxth	r2, r3
 80148ee:	e001      	b.n	80148f4 <inc_lock+0xfc>
 80148f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80148f4:	4906      	ldr	r1, [pc, #24]	; (8014910 <inc_lock+0x118>)
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	011b      	lsls	r3, r3, #4
 80148fa:	440b      	add	r3, r1
 80148fc:	330c      	adds	r3, #12
 80148fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	3301      	adds	r3, #1
}
 8014904:	4618      	mov	r0, r3
 8014906:	3714      	adds	r7, #20
 8014908:	46bd      	mov	sp, r7
 801490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490e:	4770      	bx	lr
 8014910:	24000b68 	.word	0x24000b68

08014914 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8014914:	b480      	push	{r7}
 8014916:	b085      	sub	sp, #20
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	3b01      	subs	r3, #1
 8014920:	607b      	str	r3, [r7, #4]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	2b01      	cmp	r3, #1
 8014926:	d825      	bhi.n	8014974 <dec_lock+0x60>
		n = Files[i].ctr;
 8014928:	4a17      	ldr	r2, [pc, #92]	; (8014988 <dec_lock+0x74>)
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	011b      	lsls	r3, r3, #4
 801492e:	4413      	add	r3, r2
 8014930:	330c      	adds	r3, #12
 8014932:	881b      	ldrh	r3, [r3, #0]
 8014934:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8014936:	89fb      	ldrh	r3, [r7, #14]
 8014938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801493c:	d101      	bne.n	8014942 <dec_lock+0x2e>
 801493e:	2300      	movs	r3, #0
 8014940:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8014942:	89fb      	ldrh	r3, [r7, #14]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d002      	beq.n	801494e <dec_lock+0x3a>
 8014948:	89fb      	ldrh	r3, [r7, #14]
 801494a:	3b01      	subs	r3, #1
 801494c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801494e:	4a0e      	ldr	r2, [pc, #56]	; (8014988 <dec_lock+0x74>)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	011b      	lsls	r3, r3, #4
 8014954:	4413      	add	r3, r2
 8014956:	330c      	adds	r3, #12
 8014958:	89fa      	ldrh	r2, [r7, #14]
 801495a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801495c:	89fb      	ldrh	r3, [r7, #14]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d105      	bne.n	801496e <dec_lock+0x5a>
 8014962:	4a09      	ldr	r2, [pc, #36]	; (8014988 <dec_lock+0x74>)
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	011b      	lsls	r3, r3, #4
 8014968:	4413      	add	r3, r2
 801496a:	2200      	movs	r2, #0
 801496c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801496e:	2300      	movs	r3, #0
 8014970:	737b      	strb	r3, [r7, #13]
 8014972:	e001      	b.n	8014978 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8014974:	2302      	movs	r3, #2
 8014976:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8014978:	7b7b      	ldrb	r3, [r7, #13]
}
 801497a:	4618      	mov	r0, r3
 801497c:	3714      	adds	r7, #20
 801497e:	46bd      	mov	sp, r7
 8014980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014984:	4770      	bx	lr
 8014986:	bf00      	nop
 8014988:	24000b68 	.word	0x24000b68

0801498c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801498c:	b480      	push	{r7}
 801498e:	b085      	sub	sp, #20
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8014994:	2300      	movs	r3, #0
 8014996:	60fb      	str	r3, [r7, #12]
 8014998:	e010      	b.n	80149bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801499a:	4a0d      	ldr	r2, [pc, #52]	; (80149d0 <clear_lock+0x44>)
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	011b      	lsls	r3, r3, #4
 80149a0:	4413      	add	r3, r2
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d105      	bne.n	80149b6 <clear_lock+0x2a>
 80149aa:	4a09      	ldr	r2, [pc, #36]	; (80149d0 <clear_lock+0x44>)
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	011b      	lsls	r3, r3, #4
 80149b0:	4413      	add	r3, r2
 80149b2:	2200      	movs	r2, #0
 80149b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	3301      	adds	r3, #1
 80149ba:	60fb      	str	r3, [r7, #12]
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2b01      	cmp	r3, #1
 80149c0:	d9eb      	bls.n	801499a <clear_lock+0xe>
	}
}
 80149c2:	bf00      	nop
 80149c4:	bf00      	nop
 80149c6:	3714      	adds	r7, #20
 80149c8:	46bd      	mov	sp, r7
 80149ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ce:	4770      	bx	lr
 80149d0:	24000b68 	.word	0x24000b68

080149d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b086      	sub	sp, #24
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80149dc:	2300      	movs	r3, #0
 80149de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	78db      	ldrb	r3, [r3, #3]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d034      	beq.n	8014a52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	7858      	ldrb	r0, [r3, #1]
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80149f8:	2301      	movs	r3, #1
 80149fa:	697a      	ldr	r2, [r7, #20]
 80149fc:	f7ff fd40 	bl	8014480 <disk_write>
 8014a00:	4603      	mov	r3, r0
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d002      	beq.n	8014a0c <sync_window+0x38>
			res = FR_DISK_ERR;
 8014a06:	2301      	movs	r3, #1
 8014a08:	73fb      	strb	r3, [r7, #15]
 8014a0a:	e022      	b.n	8014a52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a16:	697a      	ldr	r2, [r7, #20]
 8014a18:	1ad2      	subs	r2, r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	69db      	ldr	r3, [r3, #28]
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d217      	bcs.n	8014a52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	789b      	ldrb	r3, [r3, #2]
 8014a26:	613b      	str	r3, [r7, #16]
 8014a28:	e010      	b.n	8014a4c <sync_window+0x78>
					wsect += fs->fsize;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	69db      	ldr	r3, [r3, #28]
 8014a2e:	697a      	ldr	r2, [r7, #20]
 8014a30:	4413      	add	r3, r2
 8014a32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	7858      	ldrb	r0, [r3, #1]
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014a3e:	2301      	movs	r3, #1
 8014a40:	697a      	ldr	r2, [r7, #20]
 8014a42:	f7ff fd1d 	bl	8014480 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014a46:	693b      	ldr	r3, [r7, #16]
 8014a48:	3b01      	subs	r3, #1
 8014a4a:	613b      	str	r3, [r7, #16]
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	2b01      	cmp	r3, #1
 8014a50:	d8eb      	bhi.n	8014a2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	3718      	adds	r7, #24
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}

08014a5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b084      	sub	sp, #16
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
 8014a64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8014a66:	2300      	movs	r3, #0
 8014a68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a6e:	683a      	ldr	r2, [r7, #0]
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d01b      	beq.n	8014aac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f7ff ffad 	bl	80149d4 <sync_window>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014a7e:	7bfb      	ldrb	r3, [r7, #15]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d113      	bne.n	8014aac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	7858      	ldrb	r0, [r3, #1]
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014a8e:	2301      	movs	r3, #1
 8014a90:	683a      	ldr	r2, [r7, #0]
 8014a92:	f7ff fcd5 	bl	8014440 <disk_read>
 8014a96:	4603      	mov	r3, r0
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d004      	beq.n	8014aa6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	683a      	ldr	r2, [r7, #0]
 8014aaa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8014aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3710      	adds	r7, #16
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
	...

08014ab8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f7ff ff87 	bl	80149d4 <sync_window>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014aca:	7bfb      	ldrb	r3, [r7, #15]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d158      	bne.n	8014b82 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	2b03      	cmp	r3, #3
 8014ad6:	d148      	bne.n	8014b6a <sync_fs+0xb2>
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	791b      	ldrb	r3, [r3, #4]
 8014adc:	2b01      	cmp	r3, #1
 8014ade:	d144      	bne.n	8014b6a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	3334      	adds	r3, #52	; 0x34
 8014ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ae8:	2100      	movs	r1, #0
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7ff fda9 	bl	8014642 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	3334      	adds	r3, #52	; 0x34
 8014af4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014af8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7ff fd38 	bl	8014572 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	3334      	adds	r3, #52	; 0x34
 8014b06:	4921      	ldr	r1, [pc, #132]	; (8014b8c <sync_fs+0xd4>)
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f7ff fd4d 	bl	80145a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	3334      	adds	r3, #52	; 0x34
 8014b12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014b16:	491e      	ldr	r1, [pc, #120]	; (8014b90 <sync_fs+0xd8>)
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7ff fd45 	bl	80145a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	3334      	adds	r3, #52	; 0x34
 8014b22:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	695b      	ldr	r3, [r3, #20]
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	4610      	mov	r0, r2
 8014b2e:	f7ff fd3b 	bl	80145a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	3334      	adds	r3, #52	; 0x34
 8014b36:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	691b      	ldr	r3, [r3, #16]
 8014b3e:	4619      	mov	r1, r3
 8014b40:	4610      	mov	r0, r2
 8014b42:	f7ff fd31 	bl	80145a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	6a1b      	ldr	r3, [r3, #32]
 8014b4a:	1c5a      	adds	r2, r3, #1
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	7858      	ldrb	r0, [r3, #1]
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b5e:	2301      	movs	r3, #1
 8014b60:	f7ff fc8e 	bl	8014480 <disk_write>
			fs->fsi_flag = 0;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2200      	movs	r2, #0
 8014b68:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	785b      	ldrb	r3, [r3, #1]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	2100      	movs	r1, #0
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7ff fca4 	bl	80144c0 <disk_ioctl>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d001      	beq.n	8014b82 <sync_fs+0xca>
 8014b7e:	2301      	movs	r3, #1
 8014b80:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b84:	4618      	mov	r0, r3
 8014b86:	3710      	adds	r7, #16
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}
 8014b8c:	41615252 	.word	0x41615252
 8014b90:	61417272 	.word	0x61417272

08014b94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014b94:	b480      	push	{r7}
 8014b96:	b083      	sub	sp, #12
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	3b02      	subs	r3, #2
 8014ba2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	699b      	ldr	r3, [r3, #24]
 8014ba8:	3b02      	subs	r3, #2
 8014baa:	683a      	ldr	r2, [r7, #0]
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d301      	bcc.n	8014bb4 <clust2sect+0x20>
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	e008      	b.n	8014bc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	895b      	ldrh	r3, [r3, #10]
 8014bb8:	461a      	mov	r2, r3
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	fb03 f202 	mul.w	r2, r3, r2
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bc4:	4413      	add	r3, r2
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	370c      	adds	r7, #12
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd0:	4770      	bx	lr

08014bd2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014bd2:	b580      	push	{r7, lr}
 8014bd4:	b086      	sub	sp, #24
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	6078      	str	r0, [r7, #4]
 8014bda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	2b01      	cmp	r3, #1
 8014be6:	d904      	bls.n	8014bf2 <get_fat+0x20>
 8014be8:	693b      	ldr	r3, [r7, #16]
 8014bea:	699b      	ldr	r3, [r3, #24]
 8014bec:	683a      	ldr	r2, [r7, #0]
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d302      	bcc.n	8014bf8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	617b      	str	r3, [r7, #20]
 8014bf6:	e08f      	b.n	8014d18 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8014bfc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014bfe:	693b      	ldr	r3, [r7, #16]
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	2b03      	cmp	r3, #3
 8014c04:	d062      	beq.n	8014ccc <get_fat+0xfa>
 8014c06:	2b03      	cmp	r3, #3
 8014c08:	dc7c      	bgt.n	8014d04 <get_fat+0x132>
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d002      	beq.n	8014c14 <get_fat+0x42>
 8014c0e:	2b02      	cmp	r3, #2
 8014c10:	d042      	beq.n	8014c98 <get_fat+0xc6>
 8014c12:	e077      	b.n	8014d04 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	60fb      	str	r3, [r7, #12]
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	085b      	lsrs	r3, r3, #1
 8014c1c:	68fa      	ldr	r2, [r7, #12]
 8014c1e:	4413      	add	r3, r2
 8014c20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	0a5b      	lsrs	r3, r3, #9
 8014c2a:	4413      	add	r3, r2
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	6938      	ldr	r0, [r7, #16]
 8014c30:	f7ff ff14 	bl	8014a5c <move_window>
 8014c34:	4603      	mov	r3, r0
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d167      	bne.n	8014d0a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	1c5a      	adds	r2, r3, #1
 8014c3e:	60fa      	str	r2, [r7, #12]
 8014c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c44:	693a      	ldr	r2, [r7, #16]
 8014c46:	4413      	add	r3, r2
 8014c48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014c4c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c4e:	693b      	ldr	r3, [r7, #16]
 8014c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	0a5b      	lsrs	r3, r3, #9
 8014c56:	4413      	add	r3, r2
 8014c58:	4619      	mov	r1, r3
 8014c5a:	6938      	ldr	r0, [r7, #16]
 8014c5c:	f7ff fefe 	bl	8014a5c <move_window>
 8014c60:	4603      	mov	r3, r0
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d153      	bne.n	8014d0e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c6c:	693a      	ldr	r2, [r7, #16]
 8014c6e:	4413      	add	r3, r2
 8014c70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014c74:	021b      	lsls	r3, r3, #8
 8014c76:	461a      	mov	r2, r3
 8014c78:	68bb      	ldr	r3, [r7, #8]
 8014c7a:	4313      	orrs	r3, r2
 8014c7c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	f003 0301 	and.w	r3, r3, #1
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d002      	beq.n	8014c8e <get_fat+0xbc>
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	091b      	lsrs	r3, r3, #4
 8014c8c:	e002      	b.n	8014c94 <get_fat+0xc2>
 8014c8e:	68bb      	ldr	r3, [r7, #8]
 8014c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014c94:	617b      	str	r3, [r7, #20]
			break;
 8014c96:	e03f      	b.n	8014d18 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	0a1b      	lsrs	r3, r3, #8
 8014ca0:	4413      	add	r3, r2
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	6938      	ldr	r0, [r7, #16]
 8014ca6:	f7ff fed9 	bl	8014a5c <move_window>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d130      	bne.n	8014d12 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	005b      	lsls	r3, r3, #1
 8014cba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014cbe:	4413      	add	r3, r2
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7ff fc1b 	bl	80144fc <ld_word>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	617b      	str	r3, [r7, #20]
			break;
 8014cca:	e025      	b.n	8014d18 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014ccc:	693b      	ldr	r3, [r7, #16]
 8014cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014cd0:	683b      	ldr	r3, [r7, #0]
 8014cd2:	09db      	lsrs	r3, r3, #7
 8014cd4:	4413      	add	r3, r2
 8014cd6:	4619      	mov	r1, r3
 8014cd8:	6938      	ldr	r0, [r7, #16]
 8014cda:	f7ff febf 	bl	8014a5c <move_window>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d118      	bne.n	8014d16 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014ce4:	693b      	ldr	r3, [r7, #16]
 8014ce6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	009b      	lsls	r3, r3, #2
 8014cee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014cf2:	4413      	add	r3, r2
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7ff fc19 	bl	801452c <ld_dword>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014d00:	617b      	str	r3, [r7, #20]
			break;
 8014d02:	e009      	b.n	8014d18 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014d04:	2301      	movs	r3, #1
 8014d06:	617b      	str	r3, [r7, #20]
 8014d08:	e006      	b.n	8014d18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d0a:	bf00      	nop
 8014d0c:	e004      	b.n	8014d18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d0e:	bf00      	nop
 8014d10:	e002      	b.n	8014d18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014d12:	bf00      	nop
 8014d14:	e000      	b.n	8014d18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014d16:	bf00      	nop
		}
	}

	return val;
 8014d18:	697b      	ldr	r3, [r7, #20]
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3718      	adds	r7, #24
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}

08014d22 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014d22:	b590      	push	{r4, r7, lr}
 8014d24:	b089      	sub	sp, #36	; 0x24
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	60f8      	str	r0, [r7, #12]
 8014d2a:	60b9      	str	r1, [r7, #8]
 8014d2c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014d2e:	2302      	movs	r3, #2
 8014d30:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	2b01      	cmp	r3, #1
 8014d36:	f240 80d9 	bls.w	8014eec <put_fat+0x1ca>
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	699b      	ldr	r3, [r3, #24]
 8014d3e:	68ba      	ldr	r2, [r7, #8]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	f080 80d3 	bcs.w	8014eec <put_fat+0x1ca>
		switch (fs->fs_type) {
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	2b03      	cmp	r3, #3
 8014d4c:	f000 8096 	beq.w	8014e7c <put_fat+0x15a>
 8014d50:	2b03      	cmp	r3, #3
 8014d52:	f300 80cb 	bgt.w	8014eec <put_fat+0x1ca>
 8014d56:	2b01      	cmp	r3, #1
 8014d58:	d002      	beq.n	8014d60 <put_fat+0x3e>
 8014d5a:	2b02      	cmp	r3, #2
 8014d5c:	d06e      	beq.n	8014e3c <put_fat+0x11a>
 8014d5e:	e0c5      	b.n	8014eec <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	61bb      	str	r3, [r7, #24]
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	085b      	lsrs	r3, r3, #1
 8014d68:	69ba      	ldr	r2, [r7, #24]
 8014d6a:	4413      	add	r3, r2
 8014d6c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d72:	69bb      	ldr	r3, [r7, #24]
 8014d74:	0a5b      	lsrs	r3, r3, #9
 8014d76:	4413      	add	r3, r2
 8014d78:	4619      	mov	r1, r3
 8014d7a:	68f8      	ldr	r0, [r7, #12]
 8014d7c:	f7ff fe6e 	bl	8014a5c <move_window>
 8014d80:	4603      	mov	r3, r0
 8014d82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014d84:	7ffb      	ldrb	r3, [r7, #31]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	f040 80a9 	bne.w	8014ede <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014d92:	69bb      	ldr	r3, [r7, #24]
 8014d94:	1c59      	adds	r1, r3, #1
 8014d96:	61b9      	str	r1, [r7, #24]
 8014d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d9c:	4413      	add	r3, r2
 8014d9e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	f003 0301 	and.w	r3, r3, #1
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d00d      	beq.n	8014dc6 <put_fat+0xa4>
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	781b      	ldrb	r3, [r3, #0]
 8014dae:	b25b      	sxtb	r3, r3
 8014db0:	f003 030f 	and.w	r3, r3, #15
 8014db4:	b25a      	sxtb	r2, r3
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	b2db      	uxtb	r3, r3
 8014dba:	011b      	lsls	r3, r3, #4
 8014dbc:	b25b      	sxtb	r3, r3
 8014dbe:	4313      	orrs	r3, r2
 8014dc0:	b25b      	sxtb	r3, r3
 8014dc2:	b2db      	uxtb	r3, r3
 8014dc4:	e001      	b.n	8014dca <put_fat+0xa8>
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	b2db      	uxtb	r3, r3
 8014dca:	697a      	ldr	r2, [r7, #20]
 8014dcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2201      	movs	r2, #1
 8014dd2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014dd8:	69bb      	ldr	r3, [r7, #24]
 8014dda:	0a5b      	lsrs	r3, r3, #9
 8014ddc:	4413      	add	r3, r2
 8014dde:	4619      	mov	r1, r3
 8014de0:	68f8      	ldr	r0, [r7, #12]
 8014de2:	f7ff fe3b 	bl	8014a5c <move_window>
 8014de6:	4603      	mov	r3, r0
 8014de8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014dea:	7ffb      	ldrb	r3, [r7, #31]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d178      	bne.n	8014ee2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014df6:	69bb      	ldr	r3, [r7, #24]
 8014df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014dfc:	4413      	add	r3, r2
 8014dfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	f003 0301 	and.w	r3, r3, #1
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d003      	beq.n	8014e12 <put_fat+0xf0>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	091b      	lsrs	r3, r3, #4
 8014e0e:	b2db      	uxtb	r3, r3
 8014e10:	e00e      	b.n	8014e30 <put_fat+0x10e>
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	b25b      	sxtb	r3, r3
 8014e18:	f023 030f 	bic.w	r3, r3, #15
 8014e1c:	b25a      	sxtb	r2, r3
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	0a1b      	lsrs	r3, r3, #8
 8014e22:	b25b      	sxtb	r3, r3
 8014e24:	f003 030f 	and.w	r3, r3, #15
 8014e28:	b25b      	sxtb	r3, r3
 8014e2a:	4313      	orrs	r3, r2
 8014e2c:	b25b      	sxtb	r3, r3
 8014e2e:	b2db      	uxtb	r3, r3
 8014e30:	697a      	ldr	r2, [r7, #20]
 8014e32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	2201      	movs	r2, #1
 8014e38:	70da      	strb	r2, [r3, #3]
			break;
 8014e3a:	e057      	b.n	8014eec <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	0a1b      	lsrs	r3, r3, #8
 8014e44:	4413      	add	r3, r2
 8014e46:	4619      	mov	r1, r3
 8014e48:	68f8      	ldr	r0, [r7, #12]
 8014e4a:	f7ff fe07 	bl	8014a5c <move_window>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014e52:	7ffb      	ldrb	r3, [r7, #31]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d146      	bne.n	8014ee6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	005b      	lsls	r3, r3, #1
 8014e62:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014e66:	4413      	add	r3, r2
 8014e68:	687a      	ldr	r2, [r7, #4]
 8014e6a:	b292      	uxth	r2, r2
 8014e6c:	4611      	mov	r1, r2
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7ff fb7f 	bl	8014572 <st_word>
			fs->wflag = 1;
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2201      	movs	r2, #1
 8014e78:	70da      	strb	r2, [r3, #3]
			break;
 8014e7a:	e037      	b.n	8014eec <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	09db      	lsrs	r3, r3, #7
 8014e84:	4413      	add	r3, r2
 8014e86:	4619      	mov	r1, r3
 8014e88:	68f8      	ldr	r0, [r7, #12]
 8014e8a:	f7ff fde7 	bl	8014a5c <move_window>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014e92:	7ffb      	ldrb	r3, [r7, #31]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d128      	bne.n	8014eea <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	009b      	lsls	r3, r3, #2
 8014ea8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014eac:	4413      	add	r3, r2
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7ff fb3c 	bl	801452c <ld_dword>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014eba:	4323      	orrs	r3, r4
 8014ebc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	009b      	lsls	r3, r3, #2
 8014ec8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014ecc:	4413      	add	r3, r2
 8014ece:	6879      	ldr	r1, [r7, #4]
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7ff fb69 	bl	80145a8 <st_dword>
			fs->wflag = 1;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	2201      	movs	r2, #1
 8014eda:	70da      	strb	r2, [r3, #3]
			break;
 8014edc:	e006      	b.n	8014eec <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014ede:	bf00      	nop
 8014ee0:	e004      	b.n	8014eec <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014ee2:	bf00      	nop
 8014ee4:	e002      	b.n	8014eec <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014ee6:	bf00      	nop
 8014ee8:	e000      	b.n	8014eec <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014eea:	bf00      	nop
		}
	}
	return res;
 8014eec:	7ffb      	ldrb	r3, [r7, #31]
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	3724      	adds	r7, #36	; 0x24
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd90      	pop	{r4, r7, pc}

08014ef6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014ef6:	b580      	push	{r7, lr}
 8014ef8:	b088      	sub	sp, #32
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	60f8      	str	r0, [r7, #12]
 8014efe:	60b9      	str	r1, [r7, #8]
 8014f00:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014f02:	2300      	movs	r3, #0
 8014f04:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	2b01      	cmp	r3, #1
 8014f10:	d904      	bls.n	8014f1c <remove_chain+0x26>
 8014f12:	69bb      	ldr	r3, [r7, #24]
 8014f14:	699b      	ldr	r3, [r3, #24]
 8014f16:	68ba      	ldr	r2, [r7, #8]
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d301      	bcc.n	8014f20 <remove_chain+0x2a>
 8014f1c:	2302      	movs	r3, #2
 8014f1e:	e04b      	b.n	8014fb8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d00c      	beq.n	8014f40 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014f26:	f04f 32ff 	mov.w	r2, #4294967295
 8014f2a:	6879      	ldr	r1, [r7, #4]
 8014f2c:	69b8      	ldr	r0, [r7, #24]
 8014f2e:	f7ff fef8 	bl	8014d22 <put_fat>
 8014f32:	4603      	mov	r3, r0
 8014f34:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014f36:	7ffb      	ldrb	r3, [r7, #31]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d001      	beq.n	8014f40 <remove_chain+0x4a>
 8014f3c:	7ffb      	ldrb	r3, [r7, #31]
 8014f3e:	e03b      	b.n	8014fb8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014f40:	68b9      	ldr	r1, [r7, #8]
 8014f42:	68f8      	ldr	r0, [r7, #12]
 8014f44:	f7ff fe45 	bl	8014bd2 <get_fat>
 8014f48:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d031      	beq.n	8014fb4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	2b01      	cmp	r3, #1
 8014f54:	d101      	bne.n	8014f5a <remove_chain+0x64>
 8014f56:	2302      	movs	r3, #2
 8014f58:	e02e      	b.n	8014fb8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f60:	d101      	bne.n	8014f66 <remove_chain+0x70>
 8014f62:	2301      	movs	r3, #1
 8014f64:	e028      	b.n	8014fb8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014f66:	2200      	movs	r2, #0
 8014f68:	68b9      	ldr	r1, [r7, #8]
 8014f6a:	69b8      	ldr	r0, [r7, #24]
 8014f6c:	f7ff fed9 	bl	8014d22 <put_fat>
 8014f70:	4603      	mov	r3, r0
 8014f72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014f74:	7ffb      	ldrb	r3, [r7, #31]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d001      	beq.n	8014f7e <remove_chain+0x88>
 8014f7a:	7ffb      	ldrb	r3, [r7, #31]
 8014f7c:	e01c      	b.n	8014fb8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014f7e:	69bb      	ldr	r3, [r7, #24]
 8014f80:	695a      	ldr	r2, [r3, #20]
 8014f82:	69bb      	ldr	r3, [r7, #24]
 8014f84:	699b      	ldr	r3, [r3, #24]
 8014f86:	3b02      	subs	r3, #2
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d20b      	bcs.n	8014fa4 <remove_chain+0xae>
			fs->free_clst++;
 8014f8c:	69bb      	ldr	r3, [r7, #24]
 8014f8e:	695b      	ldr	r3, [r3, #20]
 8014f90:	1c5a      	adds	r2, r3, #1
 8014f92:	69bb      	ldr	r3, [r7, #24]
 8014f94:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8014f96:	69bb      	ldr	r3, [r7, #24]
 8014f98:	791b      	ldrb	r3, [r3, #4]
 8014f9a:	f043 0301 	orr.w	r3, r3, #1
 8014f9e:	b2da      	uxtb	r2, r3
 8014fa0:	69bb      	ldr	r3, [r7, #24]
 8014fa2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014fa8:	69bb      	ldr	r3, [r7, #24]
 8014faa:	699b      	ldr	r3, [r3, #24]
 8014fac:	68ba      	ldr	r2, [r7, #8]
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d3c6      	bcc.n	8014f40 <remove_chain+0x4a>
 8014fb2:	e000      	b.n	8014fb6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014fb4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014fb6:	2300      	movs	r3, #0
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3720      	adds	r7, #32
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b088      	sub	sp, #32
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d10d      	bne.n	8014ff2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	691b      	ldr	r3, [r3, #16]
 8014fda:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014fdc:	69bb      	ldr	r3, [r7, #24]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d004      	beq.n	8014fec <create_chain+0x2c>
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	699b      	ldr	r3, [r3, #24]
 8014fe6:	69ba      	ldr	r2, [r7, #24]
 8014fe8:	429a      	cmp	r2, r3
 8014fea:	d31b      	bcc.n	8015024 <create_chain+0x64>
 8014fec:	2301      	movs	r3, #1
 8014fee:	61bb      	str	r3, [r7, #24]
 8014ff0:	e018      	b.n	8015024 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014ff2:	6839      	ldr	r1, [r7, #0]
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f7ff fdec 	bl	8014bd2 <get_fat>
 8014ffa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	2b01      	cmp	r3, #1
 8015000:	d801      	bhi.n	8015006 <create_chain+0x46>
 8015002:	2301      	movs	r3, #1
 8015004:	e070      	b.n	80150e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801500c:	d101      	bne.n	8015012 <create_chain+0x52>
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	e06a      	b.n	80150e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	699b      	ldr	r3, [r3, #24]
 8015016:	68fa      	ldr	r2, [r7, #12]
 8015018:	429a      	cmp	r2, r3
 801501a:	d201      	bcs.n	8015020 <create_chain+0x60>
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	e063      	b.n	80150e8 <create_chain+0x128>
		scl = clst;
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015024:	69bb      	ldr	r3, [r7, #24]
 8015026:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015028:	69fb      	ldr	r3, [r7, #28]
 801502a:	3301      	adds	r3, #1
 801502c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	699b      	ldr	r3, [r3, #24]
 8015032:	69fa      	ldr	r2, [r7, #28]
 8015034:	429a      	cmp	r2, r3
 8015036:	d307      	bcc.n	8015048 <create_chain+0x88>
				ncl = 2;
 8015038:	2302      	movs	r3, #2
 801503a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801503c:	69fa      	ldr	r2, [r7, #28]
 801503e:	69bb      	ldr	r3, [r7, #24]
 8015040:	429a      	cmp	r2, r3
 8015042:	d901      	bls.n	8015048 <create_chain+0x88>
 8015044:	2300      	movs	r3, #0
 8015046:	e04f      	b.n	80150e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015048:	69f9      	ldr	r1, [r7, #28]
 801504a:	6878      	ldr	r0, [r7, #4]
 801504c:	f7ff fdc1 	bl	8014bd2 <get_fat>
 8015050:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d00e      	beq.n	8015076 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	2b01      	cmp	r3, #1
 801505c:	d003      	beq.n	8015066 <create_chain+0xa6>
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015064:	d101      	bne.n	801506a <create_chain+0xaa>
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	e03e      	b.n	80150e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801506a:	69fa      	ldr	r2, [r7, #28]
 801506c:	69bb      	ldr	r3, [r7, #24]
 801506e:	429a      	cmp	r2, r3
 8015070:	d1da      	bne.n	8015028 <create_chain+0x68>
 8015072:	2300      	movs	r3, #0
 8015074:	e038      	b.n	80150e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015076:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015078:	f04f 32ff 	mov.w	r2, #4294967295
 801507c:	69f9      	ldr	r1, [r7, #28]
 801507e:	6938      	ldr	r0, [r7, #16]
 8015080:	f7ff fe4f 	bl	8014d22 <put_fat>
 8015084:	4603      	mov	r3, r0
 8015086:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015088:	7dfb      	ldrb	r3, [r7, #23]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d109      	bne.n	80150a2 <create_chain+0xe2>
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d006      	beq.n	80150a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015094:	69fa      	ldr	r2, [r7, #28]
 8015096:	6839      	ldr	r1, [r7, #0]
 8015098:	6938      	ldr	r0, [r7, #16]
 801509a:	f7ff fe42 	bl	8014d22 <put_fat>
 801509e:	4603      	mov	r3, r0
 80150a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80150a2:	7dfb      	ldrb	r3, [r7, #23]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d116      	bne.n	80150d6 <create_chain+0x116>
		fs->last_clst = ncl;
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	69fa      	ldr	r2, [r7, #28]
 80150ac:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	695a      	ldr	r2, [r3, #20]
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	699b      	ldr	r3, [r3, #24]
 80150b6:	3b02      	subs	r3, #2
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d804      	bhi.n	80150c6 <create_chain+0x106>
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	695b      	ldr	r3, [r3, #20]
 80150c0:	1e5a      	subs	r2, r3, #1
 80150c2:	693b      	ldr	r3, [r7, #16]
 80150c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80150c6:	693b      	ldr	r3, [r7, #16]
 80150c8:	791b      	ldrb	r3, [r3, #4]
 80150ca:	f043 0301 	orr.w	r3, r3, #1
 80150ce:	b2da      	uxtb	r2, r3
 80150d0:	693b      	ldr	r3, [r7, #16]
 80150d2:	711a      	strb	r2, [r3, #4]
 80150d4:	e007      	b.n	80150e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80150d6:	7dfb      	ldrb	r3, [r7, #23]
 80150d8:	2b01      	cmp	r3, #1
 80150da:	d102      	bne.n	80150e2 <create_chain+0x122>
 80150dc:	f04f 33ff 	mov.w	r3, #4294967295
 80150e0:	e000      	b.n	80150e4 <create_chain+0x124>
 80150e2:	2301      	movs	r3, #1
 80150e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80150e6:	69fb      	ldr	r3, [r7, #28]
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	3720      	adds	r7, #32
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80150f0:	b480      	push	{r7}
 80150f2:	b087      	sub	sp, #28
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015104:	3304      	adds	r3, #4
 8015106:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	0a5b      	lsrs	r3, r3, #9
 801510c:	68fa      	ldr	r2, [r7, #12]
 801510e:	8952      	ldrh	r2, [r2, #10]
 8015110:	fbb3 f3f2 	udiv	r3, r3, r2
 8015114:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	1d1a      	adds	r2, r3, #4
 801511a:	613a      	str	r2, [r7, #16]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015120:	68bb      	ldr	r3, [r7, #8]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d101      	bne.n	801512a <clmt_clust+0x3a>
 8015126:	2300      	movs	r3, #0
 8015128:	e010      	b.n	801514c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801512a:	697a      	ldr	r2, [r7, #20]
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	429a      	cmp	r2, r3
 8015130:	d307      	bcc.n	8015142 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8015132:	697a      	ldr	r2, [r7, #20]
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	1ad3      	subs	r3, r2, r3
 8015138:	617b      	str	r3, [r7, #20]
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	3304      	adds	r3, #4
 801513e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015140:	e7e9      	b.n	8015116 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8015142:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015144:	693b      	ldr	r3, [r7, #16]
 8015146:	681a      	ldr	r2, [r3, #0]
 8015148:	697b      	ldr	r3, [r7, #20]
 801514a:	4413      	add	r3, r2
}
 801514c:	4618      	mov	r0, r3
 801514e:	371c      	adds	r7, #28
 8015150:	46bd      	mov	sp, r7
 8015152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015156:	4770      	bx	lr

08015158 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b086      	sub	sp, #24
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
 8015160:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015168:	683b      	ldr	r3, [r7, #0]
 801516a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801516e:	d204      	bcs.n	801517a <dir_sdi+0x22>
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	f003 031f 	and.w	r3, r3, #31
 8015176:	2b00      	cmp	r3, #0
 8015178:	d001      	beq.n	801517e <dir_sdi+0x26>
		return FR_INT_ERR;
 801517a:	2302      	movs	r3, #2
 801517c:	e063      	b.n	8015246 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	683a      	ldr	r2, [r7, #0]
 8015182:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	689b      	ldr	r3, [r3, #8]
 8015188:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801518a:	697b      	ldr	r3, [r7, #20]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d106      	bne.n	801519e <dir_sdi+0x46>
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	781b      	ldrb	r3, [r3, #0]
 8015194:	2b02      	cmp	r3, #2
 8015196:	d902      	bls.n	801519e <dir_sdi+0x46>
		clst = fs->dirbase;
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801519c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d10c      	bne.n	80151be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	095b      	lsrs	r3, r3, #5
 80151a8:	693a      	ldr	r2, [r7, #16]
 80151aa:	8912      	ldrh	r2, [r2, #8]
 80151ac:	4293      	cmp	r3, r2
 80151ae:	d301      	bcc.n	80151b4 <dir_sdi+0x5c>
 80151b0:	2302      	movs	r3, #2
 80151b2:	e048      	b.n	8015246 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	61da      	str	r2, [r3, #28]
 80151bc:	e029      	b.n	8015212 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	895b      	ldrh	r3, [r3, #10]
 80151c2:	025b      	lsls	r3, r3, #9
 80151c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80151c6:	e019      	b.n	80151fc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6979      	ldr	r1, [r7, #20]
 80151cc:	4618      	mov	r0, r3
 80151ce:	f7ff fd00 	bl	8014bd2 <get_fat>
 80151d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151da:	d101      	bne.n	80151e0 <dir_sdi+0x88>
 80151dc:	2301      	movs	r3, #1
 80151de:	e032      	b.n	8015246 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	2b01      	cmp	r3, #1
 80151e4:	d904      	bls.n	80151f0 <dir_sdi+0x98>
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	699b      	ldr	r3, [r3, #24]
 80151ea:	697a      	ldr	r2, [r7, #20]
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d301      	bcc.n	80151f4 <dir_sdi+0x9c>
 80151f0:	2302      	movs	r3, #2
 80151f2:	e028      	b.n	8015246 <dir_sdi+0xee>
			ofs -= csz;
 80151f4:	683a      	ldr	r2, [r7, #0]
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	1ad3      	subs	r3, r2, r3
 80151fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80151fc:	683a      	ldr	r2, [r7, #0]
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	429a      	cmp	r2, r3
 8015202:	d2e1      	bcs.n	80151c8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015204:	6979      	ldr	r1, [r7, #20]
 8015206:	6938      	ldr	r0, [r7, #16]
 8015208:	f7ff fcc4 	bl	8014b94 <clust2sect>
 801520c:	4602      	mov	r2, r0
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	697a      	ldr	r2, [r7, #20]
 8015216:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	69db      	ldr	r3, [r3, #28]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d101      	bne.n	8015224 <dir_sdi+0xcc>
 8015220:	2302      	movs	r3, #2
 8015222:	e010      	b.n	8015246 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	69da      	ldr	r2, [r3, #28]
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	0a5b      	lsrs	r3, r3, #9
 801522c:	441a      	add	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801523e:	441a      	add	r2, r3
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015244:	2300      	movs	r3, #0
}
 8015246:	4618      	mov	r0, r3
 8015248:	3718      	adds	r7, #24
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}

0801524e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801524e:	b580      	push	{r7, lr}
 8015250:	b086      	sub	sp, #24
 8015252:	af00      	add	r7, sp, #0
 8015254:	6078      	str	r0, [r7, #4]
 8015256:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	695b      	ldr	r3, [r3, #20]
 8015262:	3320      	adds	r3, #32
 8015264:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	69db      	ldr	r3, [r3, #28]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d003      	beq.n	8015276 <dir_next+0x28>
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015274:	d301      	bcc.n	801527a <dir_next+0x2c>
 8015276:	2304      	movs	r3, #4
 8015278:	e0aa      	b.n	80153d0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015280:	2b00      	cmp	r3, #0
 8015282:	f040 8098 	bne.w	80153b6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	69db      	ldr	r3, [r3, #28]
 801528a:	1c5a      	adds	r2, r3, #1
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	699b      	ldr	r3, [r3, #24]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d10b      	bne.n	80152b0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	095b      	lsrs	r3, r3, #5
 801529c:	68fa      	ldr	r2, [r7, #12]
 801529e:	8912      	ldrh	r2, [r2, #8]
 80152a0:	4293      	cmp	r3, r2
 80152a2:	f0c0 8088 	bcc.w	80153b6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2200      	movs	r2, #0
 80152aa:	61da      	str	r2, [r3, #28]
 80152ac:	2304      	movs	r3, #4
 80152ae:	e08f      	b.n	80153d0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	0a5b      	lsrs	r3, r3, #9
 80152b4:	68fa      	ldr	r2, [r7, #12]
 80152b6:	8952      	ldrh	r2, [r2, #10]
 80152b8:	3a01      	subs	r2, #1
 80152ba:	4013      	ands	r3, r2
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d17a      	bne.n	80153b6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80152c0:	687a      	ldr	r2, [r7, #4]
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	699b      	ldr	r3, [r3, #24]
 80152c6:	4619      	mov	r1, r3
 80152c8:	4610      	mov	r0, r2
 80152ca:	f7ff fc82 	bl	8014bd2 <get_fat>
 80152ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	2b01      	cmp	r3, #1
 80152d4:	d801      	bhi.n	80152da <dir_next+0x8c>
 80152d6:	2302      	movs	r3, #2
 80152d8:	e07a      	b.n	80153d0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152e0:	d101      	bne.n	80152e6 <dir_next+0x98>
 80152e2:	2301      	movs	r3, #1
 80152e4:	e074      	b.n	80153d0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	699b      	ldr	r3, [r3, #24]
 80152ea:	697a      	ldr	r2, [r7, #20]
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d358      	bcc.n	80153a2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d104      	bne.n	8015300 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	2200      	movs	r2, #0
 80152fa:	61da      	str	r2, [r3, #28]
 80152fc:	2304      	movs	r3, #4
 80152fe:	e067      	b.n	80153d0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015300:	687a      	ldr	r2, [r7, #4]
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	699b      	ldr	r3, [r3, #24]
 8015306:	4619      	mov	r1, r3
 8015308:	4610      	mov	r0, r2
 801530a:	f7ff fe59 	bl	8014fc0 <create_chain>
 801530e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d101      	bne.n	801531a <dir_next+0xcc>
 8015316:	2307      	movs	r3, #7
 8015318:	e05a      	b.n	80153d0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	2b01      	cmp	r3, #1
 801531e:	d101      	bne.n	8015324 <dir_next+0xd6>
 8015320:	2302      	movs	r3, #2
 8015322:	e055      	b.n	80153d0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801532a:	d101      	bne.n	8015330 <dir_next+0xe2>
 801532c:	2301      	movs	r3, #1
 801532e:	e04f      	b.n	80153d0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f7ff fb4f 	bl	80149d4 <sync_window>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d001      	beq.n	8015340 <dir_next+0xf2>
 801533c:	2301      	movs	r3, #1
 801533e:	e047      	b.n	80153d0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	3334      	adds	r3, #52	; 0x34
 8015344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015348:	2100      	movs	r1, #0
 801534a:	4618      	mov	r0, r3
 801534c:	f7ff f979 	bl	8014642 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015350:	2300      	movs	r3, #0
 8015352:	613b      	str	r3, [r7, #16]
 8015354:	6979      	ldr	r1, [r7, #20]
 8015356:	68f8      	ldr	r0, [r7, #12]
 8015358:	f7ff fc1c 	bl	8014b94 <clust2sect>
 801535c:	4602      	mov	r2, r0
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	631a      	str	r2, [r3, #48]	; 0x30
 8015362:	e012      	b.n	801538a <dir_next+0x13c>
						fs->wflag = 1;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	2201      	movs	r2, #1
 8015368:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801536a:	68f8      	ldr	r0, [r7, #12]
 801536c:	f7ff fb32 	bl	80149d4 <sync_window>
 8015370:	4603      	mov	r3, r0
 8015372:	2b00      	cmp	r3, #0
 8015374:	d001      	beq.n	801537a <dir_next+0x12c>
 8015376:	2301      	movs	r3, #1
 8015378:	e02a      	b.n	80153d0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801537a:	693b      	ldr	r3, [r7, #16]
 801537c:	3301      	adds	r3, #1
 801537e:	613b      	str	r3, [r7, #16]
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015384:	1c5a      	adds	r2, r3, #1
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	631a      	str	r2, [r3, #48]	; 0x30
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	895b      	ldrh	r3, [r3, #10]
 801538e:	461a      	mov	r2, r3
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	4293      	cmp	r3, r2
 8015394:	d3e6      	bcc.n	8015364 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801539a:	693b      	ldr	r3, [r7, #16]
 801539c:	1ad2      	subs	r2, r2, r3
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	697a      	ldr	r2, [r7, #20]
 80153a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80153a8:	6979      	ldr	r1, [r7, #20]
 80153aa:	68f8      	ldr	r0, [r7, #12]
 80153ac:	f7ff fbf2 	bl	8014b94 <clust2sect>
 80153b0:	4602      	mov	r2, r0
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	68ba      	ldr	r2, [r7, #8]
 80153ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153c8:	441a      	add	r2, r3
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80153ce:	2300      	movs	r3, #0
}
 80153d0:	4618      	mov	r0, r3
 80153d2:	3718      	adds	r7, #24
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b086      	sub	sp, #24
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80153e8:	2100      	movs	r1, #0
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	f7ff feb4 	bl	8015158 <dir_sdi>
 80153f0:	4603      	mov	r3, r0
 80153f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80153f4:	7dfb      	ldrb	r3, [r7, #23]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d12b      	bne.n	8015452 <dir_alloc+0x7a>
		n = 0;
 80153fa:	2300      	movs	r3, #0
 80153fc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	69db      	ldr	r3, [r3, #28]
 8015402:	4619      	mov	r1, r3
 8015404:	68f8      	ldr	r0, [r7, #12]
 8015406:	f7ff fb29 	bl	8014a5c <move_window>
 801540a:	4603      	mov	r3, r0
 801540c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801540e:	7dfb      	ldrb	r3, [r7, #23]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d11d      	bne.n	8015450 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	6a1b      	ldr	r3, [r3, #32]
 8015418:	781b      	ldrb	r3, [r3, #0]
 801541a:	2be5      	cmp	r3, #229	; 0xe5
 801541c:	d004      	beq.n	8015428 <dir_alloc+0x50>
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	6a1b      	ldr	r3, [r3, #32]
 8015422:	781b      	ldrb	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d107      	bne.n	8015438 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	3301      	adds	r3, #1
 801542c:	613b      	str	r3, [r7, #16]
 801542e:	693a      	ldr	r2, [r7, #16]
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	429a      	cmp	r2, r3
 8015434:	d102      	bne.n	801543c <dir_alloc+0x64>
 8015436:	e00c      	b.n	8015452 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015438:	2300      	movs	r3, #0
 801543a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801543c:	2101      	movs	r1, #1
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f7ff ff05 	bl	801524e <dir_next>
 8015444:	4603      	mov	r3, r0
 8015446:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015448:	7dfb      	ldrb	r3, [r7, #23]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d0d7      	beq.n	80153fe <dir_alloc+0x26>
 801544e:	e000      	b.n	8015452 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015450:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015452:	7dfb      	ldrb	r3, [r7, #23]
 8015454:	2b04      	cmp	r3, #4
 8015456:	d101      	bne.n	801545c <dir_alloc+0x84>
 8015458:	2307      	movs	r3, #7
 801545a:	75fb      	strb	r3, [r7, #23]
	return res;
 801545c:	7dfb      	ldrb	r3, [r7, #23]
}
 801545e:	4618      	mov	r0, r3
 8015460:	3718      	adds	r7, #24
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}

08015466 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015466:	b580      	push	{r7, lr}
 8015468:	b084      	sub	sp, #16
 801546a:	af00      	add	r7, sp, #0
 801546c:	6078      	str	r0, [r7, #4]
 801546e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	331a      	adds	r3, #26
 8015474:	4618      	mov	r0, r3
 8015476:	f7ff f841 	bl	80144fc <ld_word>
 801547a:	4603      	mov	r3, r0
 801547c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	2b03      	cmp	r3, #3
 8015484:	d109      	bne.n	801549a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	3314      	adds	r3, #20
 801548a:	4618      	mov	r0, r3
 801548c:	f7ff f836 	bl	80144fc <ld_word>
 8015490:	4603      	mov	r3, r0
 8015492:	041b      	lsls	r3, r3, #16
 8015494:	68fa      	ldr	r2, [r7, #12]
 8015496:	4313      	orrs	r3, r2
 8015498:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801549a:	68fb      	ldr	r3, [r7, #12]
}
 801549c:	4618      	mov	r0, r3
 801549e:	3710      	adds	r7, #16
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}

080154a4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b084      	sub	sp, #16
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	60f8      	str	r0, [r7, #12]
 80154ac:	60b9      	str	r1, [r7, #8]
 80154ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	331a      	adds	r3, #26
 80154b4:	687a      	ldr	r2, [r7, #4]
 80154b6:	b292      	uxth	r2, r2
 80154b8:	4611      	mov	r1, r2
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7ff f859 	bl	8014572 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	2b03      	cmp	r3, #3
 80154c6:	d109      	bne.n	80154dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	f103 0214 	add.w	r2, r3, #20
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	0c1b      	lsrs	r3, r3, #16
 80154d2:	b29b      	uxth	r3, r3
 80154d4:	4619      	mov	r1, r3
 80154d6:	4610      	mov	r0, r2
 80154d8:	f7ff f84b 	bl	8014572 <st_word>
	}
}
 80154dc:	bf00      	nop
 80154de:	3710      	adds	r7, #16
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80154e4:	b590      	push	{r4, r7, lr}
 80154e6:	b087      	sub	sp, #28
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
 80154ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	331a      	adds	r3, #26
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7ff f802 	bl	80144fc <ld_word>
 80154f8:	4603      	mov	r3, r0
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d001      	beq.n	8015502 <cmp_lfn+0x1e>
 80154fe:	2300      	movs	r3, #0
 8015500:	e059      	b.n	80155b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	781b      	ldrb	r3, [r3, #0]
 8015506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801550a:	1e5a      	subs	r2, r3, #1
 801550c:	4613      	mov	r3, r2
 801550e:	005b      	lsls	r3, r3, #1
 8015510:	4413      	add	r3, r2
 8015512:	009b      	lsls	r3, r3, #2
 8015514:	4413      	add	r3, r2
 8015516:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015518:	2301      	movs	r3, #1
 801551a:	81fb      	strh	r3, [r7, #14]
 801551c:	2300      	movs	r3, #0
 801551e:	613b      	str	r3, [r7, #16]
 8015520:	e033      	b.n	801558a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015522:	4a27      	ldr	r2, [pc, #156]	; (80155c0 <cmp_lfn+0xdc>)
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	4413      	add	r3, r2
 8015528:	781b      	ldrb	r3, [r3, #0]
 801552a:	461a      	mov	r2, r3
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	4413      	add	r3, r2
 8015530:	4618      	mov	r0, r3
 8015532:	f7fe ffe3 	bl	80144fc <ld_word>
 8015536:	4603      	mov	r3, r0
 8015538:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801553a:	89fb      	ldrh	r3, [r7, #14]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d01a      	beq.n	8015576 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	2bfe      	cmp	r3, #254	; 0xfe
 8015544:	d812      	bhi.n	801556c <cmp_lfn+0x88>
 8015546:	89bb      	ldrh	r3, [r7, #12]
 8015548:	4618      	mov	r0, r3
 801554a:	f002 fa11 	bl	8017970 <ff_wtoupper>
 801554e:	4603      	mov	r3, r0
 8015550:	461c      	mov	r4, r3
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	1c5a      	adds	r2, r3, #1
 8015556:	617a      	str	r2, [r7, #20]
 8015558:	005b      	lsls	r3, r3, #1
 801555a:	687a      	ldr	r2, [r7, #4]
 801555c:	4413      	add	r3, r2
 801555e:	881b      	ldrh	r3, [r3, #0]
 8015560:	4618      	mov	r0, r3
 8015562:	f002 fa05 	bl	8017970 <ff_wtoupper>
 8015566:	4603      	mov	r3, r0
 8015568:	429c      	cmp	r4, r3
 801556a:	d001      	beq.n	8015570 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801556c:	2300      	movs	r3, #0
 801556e:	e022      	b.n	80155b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8015570:	89bb      	ldrh	r3, [r7, #12]
 8015572:	81fb      	strh	r3, [r7, #14]
 8015574:	e006      	b.n	8015584 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015576:	89bb      	ldrh	r3, [r7, #12]
 8015578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801557c:	4293      	cmp	r3, r2
 801557e:	d001      	beq.n	8015584 <cmp_lfn+0xa0>
 8015580:	2300      	movs	r3, #0
 8015582:	e018      	b.n	80155b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	3301      	adds	r3, #1
 8015588:	613b      	str	r3, [r7, #16]
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	2b0c      	cmp	r3, #12
 801558e:	d9c8      	bls.n	8015522 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	781b      	ldrb	r3, [r3, #0]
 8015594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015598:	2b00      	cmp	r3, #0
 801559a:	d00b      	beq.n	80155b4 <cmp_lfn+0xd0>
 801559c:	89fb      	ldrh	r3, [r7, #14]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d008      	beq.n	80155b4 <cmp_lfn+0xd0>
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	005b      	lsls	r3, r3, #1
 80155a6:	687a      	ldr	r2, [r7, #4]
 80155a8:	4413      	add	r3, r2
 80155aa:	881b      	ldrh	r3, [r3, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d001      	beq.n	80155b4 <cmp_lfn+0xd0>
 80155b0:	2300      	movs	r3, #0
 80155b2:	e000      	b.n	80155b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80155b4:	2301      	movs	r3, #1
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	371c      	adds	r7, #28
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd90      	pop	{r4, r7, pc}
 80155be:	bf00      	nop
 80155c0:	0801bc1c 	.word	0x0801bc1c

080155c4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b086      	sub	sp, #24
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	331a      	adds	r3, #26
 80155d2:	4618      	mov	r0, r3
 80155d4:	f7fe ff92 	bl	80144fc <ld_word>
 80155d8:	4603      	mov	r3, r0
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d001      	beq.n	80155e2 <pick_lfn+0x1e>
 80155de:	2300      	movs	r3, #0
 80155e0:	e04d      	b.n	801567e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	781b      	ldrb	r3, [r3, #0]
 80155e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80155ea:	1e5a      	subs	r2, r3, #1
 80155ec:	4613      	mov	r3, r2
 80155ee:	005b      	lsls	r3, r3, #1
 80155f0:	4413      	add	r3, r2
 80155f2:	009b      	lsls	r3, r3, #2
 80155f4:	4413      	add	r3, r2
 80155f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80155f8:	2301      	movs	r3, #1
 80155fa:	81fb      	strh	r3, [r7, #14]
 80155fc:	2300      	movs	r3, #0
 80155fe:	613b      	str	r3, [r7, #16]
 8015600:	e028      	b.n	8015654 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015602:	4a21      	ldr	r2, [pc, #132]	; (8015688 <pick_lfn+0xc4>)
 8015604:	693b      	ldr	r3, [r7, #16]
 8015606:	4413      	add	r3, r2
 8015608:	781b      	ldrb	r3, [r3, #0]
 801560a:	461a      	mov	r2, r3
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	4413      	add	r3, r2
 8015610:	4618      	mov	r0, r3
 8015612:	f7fe ff73 	bl	80144fc <ld_word>
 8015616:	4603      	mov	r3, r0
 8015618:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801561a:	89fb      	ldrh	r3, [r7, #14]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d00f      	beq.n	8015640 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8015620:	697b      	ldr	r3, [r7, #20]
 8015622:	2bfe      	cmp	r3, #254	; 0xfe
 8015624:	d901      	bls.n	801562a <pick_lfn+0x66>
 8015626:	2300      	movs	r3, #0
 8015628:	e029      	b.n	801567e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801562a:	89bb      	ldrh	r3, [r7, #12]
 801562c:	81fb      	strh	r3, [r7, #14]
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	1c5a      	adds	r2, r3, #1
 8015632:	617a      	str	r2, [r7, #20]
 8015634:	005b      	lsls	r3, r3, #1
 8015636:	687a      	ldr	r2, [r7, #4]
 8015638:	4413      	add	r3, r2
 801563a:	89fa      	ldrh	r2, [r7, #14]
 801563c:	801a      	strh	r2, [r3, #0]
 801563e:	e006      	b.n	801564e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015640:	89bb      	ldrh	r3, [r7, #12]
 8015642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015646:	4293      	cmp	r3, r2
 8015648:	d001      	beq.n	801564e <pick_lfn+0x8a>
 801564a:	2300      	movs	r3, #0
 801564c:	e017      	b.n	801567e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	3301      	adds	r3, #1
 8015652:	613b      	str	r3, [r7, #16]
 8015654:	693b      	ldr	r3, [r7, #16]
 8015656:	2b0c      	cmp	r3, #12
 8015658:	d9d3      	bls.n	8015602 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801565a:	683b      	ldr	r3, [r7, #0]
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015662:	2b00      	cmp	r3, #0
 8015664:	d00a      	beq.n	801567c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	2bfe      	cmp	r3, #254	; 0xfe
 801566a:	d901      	bls.n	8015670 <pick_lfn+0xac>
 801566c:	2300      	movs	r3, #0
 801566e:	e006      	b.n	801567e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	005b      	lsls	r3, r3, #1
 8015674:	687a      	ldr	r2, [r7, #4]
 8015676:	4413      	add	r3, r2
 8015678:	2200      	movs	r2, #0
 801567a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801567c:	2301      	movs	r3, #1
}
 801567e:	4618      	mov	r0, r3
 8015680:	3718      	adds	r7, #24
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}
 8015686:	bf00      	nop
 8015688:	0801bc1c 	.word	0x0801bc1c

0801568c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b088      	sub	sp, #32
 8015690:	af00      	add	r7, sp, #0
 8015692:	60f8      	str	r0, [r7, #12]
 8015694:	60b9      	str	r1, [r7, #8]
 8015696:	4611      	mov	r1, r2
 8015698:	461a      	mov	r2, r3
 801569a:	460b      	mov	r3, r1
 801569c:	71fb      	strb	r3, [r7, #7]
 801569e:	4613      	mov	r3, r2
 80156a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80156a2:	68bb      	ldr	r3, [r7, #8]
 80156a4:	330d      	adds	r3, #13
 80156a6:	79ba      	ldrb	r2, [r7, #6]
 80156a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	330b      	adds	r3, #11
 80156ae:	220f      	movs	r2, #15
 80156b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	330c      	adds	r3, #12
 80156b6:	2200      	movs	r2, #0
 80156b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80156ba:	68bb      	ldr	r3, [r7, #8]
 80156bc:	331a      	adds	r3, #26
 80156be:	2100      	movs	r1, #0
 80156c0:	4618      	mov	r0, r3
 80156c2:	f7fe ff56 	bl	8014572 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80156c6:	79fb      	ldrb	r3, [r7, #7]
 80156c8:	1e5a      	subs	r2, r3, #1
 80156ca:	4613      	mov	r3, r2
 80156cc:	005b      	lsls	r3, r3, #1
 80156ce:	4413      	add	r3, r2
 80156d0:	009b      	lsls	r3, r3, #2
 80156d2:	4413      	add	r3, r2
 80156d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80156d6:	2300      	movs	r3, #0
 80156d8:	82fb      	strh	r3, [r7, #22]
 80156da:	2300      	movs	r3, #0
 80156dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80156de:	8afb      	ldrh	r3, [r7, #22]
 80156e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156e4:	4293      	cmp	r3, r2
 80156e6:	d007      	beq.n	80156f8 <put_lfn+0x6c>
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	1c5a      	adds	r2, r3, #1
 80156ec:	61fa      	str	r2, [r7, #28]
 80156ee:	005b      	lsls	r3, r3, #1
 80156f0:	68fa      	ldr	r2, [r7, #12]
 80156f2:	4413      	add	r3, r2
 80156f4:	881b      	ldrh	r3, [r3, #0]
 80156f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80156f8:	4a17      	ldr	r2, [pc, #92]	; (8015758 <put_lfn+0xcc>)
 80156fa:	69bb      	ldr	r3, [r7, #24]
 80156fc:	4413      	add	r3, r2
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	461a      	mov	r2, r3
 8015702:	68bb      	ldr	r3, [r7, #8]
 8015704:	4413      	add	r3, r2
 8015706:	8afa      	ldrh	r2, [r7, #22]
 8015708:	4611      	mov	r1, r2
 801570a:	4618      	mov	r0, r3
 801570c:	f7fe ff31 	bl	8014572 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015710:	8afb      	ldrh	r3, [r7, #22]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d102      	bne.n	801571c <put_lfn+0x90>
 8015716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801571a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801571c:	69bb      	ldr	r3, [r7, #24]
 801571e:	3301      	adds	r3, #1
 8015720:	61bb      	str	r3, [r7, #24]
 8015722:	69bb      	ldr	r3, [r7, #24]
 8015724:	2b0c      	cmp	r3, #12
 8015726:	d9da      	bls.n	80156de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015728:	8afb      	ldrh	r3, [r7, #22]
 801572a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801572e:	4293      	cmp	r3, r2
 8015730:	d006      	beq.n	8015740 <put_lfn+0xb4>
 8015732:	69fb      	ldr	r3, [r7, #28]
 8015734:	005b      	lsls	r3, r3, #1
 8015736:	68fa      	ldr	r2, [r7, #12]
 8015738:	4413      	add	r3, r2
 801573a:	881b      	ldrh	r3, [r3, #0]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d103      	bne.n	8015748 <put_lfn+0xbc>
 8015740:	79fb      	ldrb	r3, [r7, #7]
 8015742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015746:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	79fa      	ldrb	r2, [r7, #7]
 801574c:	701a      	strb	r2, [r3, #0]
}
 801574e:	bf00      	nop
 8015750:	3720      	adds	r7, #32
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
 8015756:	bf00      	nop
 8015758:	0801bc1c 	.word	0x0801bc1c

0801575c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b08c      	sub	sp, #48	; 0x30
 8015760:	af00      	add	r7, sp, #0
 8015762:	60f8      	str	r0, [r7, #12]
 8015764:	60b9      	str	r1, [r7, #8]
 8015766:	607a      	str	r2, [r7, #4]
 8015768:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801576a:	220b      	movs	r2, #11
 801576c:	68b9      	ldr	r1, [r7, #8]
 801576e:	68f8      	ldr	r0, [r7, #12]
 8015770:	f7fe ff46 	bl	8014600 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	2b05      	cmp	r3, #5
 8015778:	d929      	bls.n	80157ce <gen_numname+0x72>
		sr = seq;
 801577a:	683b      	ldr	r3, [r7, #0]
 801577c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801577e:	e020      	b.n	80157c2 <gen_numname+0x66>
			wc = *lfn++;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	1c9a      	adds	r2, r3, #2
 8015784:	607a      	str	r2, [r7, #4]
 8015786:	881b      	ldrh	r3, [r3, #0]
 8015788:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801578a:	2300      	movs	r3, #0
 801578c:	62bb      	str	r3, [r7, #40]	; 0x28
 801578e:	e015      	b.n	80157bc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8015790:	69fb      	ldr	r3, [r7, #28]
 8015792:	005a      	lsls	r2, r3, #1
 8015794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015796:	f003 0301 	and.w	r3, r3, #1
 801579a:	4413      	add	r3, r2
 801579c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801579e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157a0:	085b      	lsrs	r3, r3, #1
 80157a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80157a4:	69fb      	ldr	r3, [r7, #28]
 80157a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d003      	beq.n	80157b6 <gen_numname+0x5a>
 80157ae:	69fa      	ldr	r2, [r7, #28]
 80157b0:	4b3b      	ldr	r3, [pc, #236]	; (80158a0 <gen_numname+0x144>)
 80157b2:	4053      	eors	r3, r2
 80157b4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80157b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b8:	3301      	adds	r3, #1
 80157ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80157bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157be:	2b0f      	cmp	r3, #15
 80157c0:	d9e6      	bls.n	8015790 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	881b      	ldrh	r3, [r3, #0]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d1da      	bne.n	8015780 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80157ca:	69fb      	ldr	r3, [r7, #28]
 80157cc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80157ce:	2307      	movs	r3, #7
 80157d0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	b2db      	uxtb	r3, r3
 80157d6:	f003 030f 	and.w	r3, r3, #15
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	3330      	adds	r3, #48	; 0x30
 80157de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80157e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157e6:	2b39      	cmp	r3, #57	; 0x39
 80157e8:	d904      	bls.n	80157f4 <gen_numname+0x98>
 80157ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157ee:	3307      	adds	r3, #7
 80157f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80157f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f6:	1e5a      	subs	r2, r3, #1
 80157f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80157fa:	3330      	adds	r3, #48	; 0x30
 80157fc:	443b      	add	r3, r7
 80157fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8015802:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	091b      	lsrs	r3, r3, #4
 801580a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d1df      	bne.n	80157d2 <gen_numname+0x76>
	ns[i] = '~';
 8015812:	f107 0214 	add.w	r2, r7, #20
 8015816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015818:	4413      	add	r3, r2
 801581a:	227e      	movs	r2, #126	; 0x7e
 801581c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801581e:	2300      	movs	r3, #0
 8015820:	627b      	str	r3, [r7, #36]	; 0x24
 8015822:	e016      	b.n	8015852 <gen_numname+0xf6>
		if (IsDBCS1(dst[j])) {
 8015824:	68fa      	ldr	r2, [r7, #12]
 8015826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015828:	4413      	add	r3, r2
 801582a:	781b      	ldrb	r3, [r3, #0]
 801582c:	2b80      	cmp	r3, #128	; 0x80
 801582e:	d90d      	bls.n	801584c <gen_numname+0xf0>
 8015830:	68fa      	ldr	r2, [r7, #12]
 8015832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015834:	4413      	add	r3, r2
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	2bff      	cmp	r3, #255	; 0xff
 801583a:	d007      	beq.n	801584c <gen_numname+0xf0>
			if (j == i - 1) break;
 801583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801583e:	3b01      	subs	r3, #1
 8015840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015842:	429a      	cmp	r2, r3
 8015844:	d010      	beq.n	8015868 <gen_numname+0x10c>
			j++;
 8015846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015848:	3301      	adds	r3, #1
 801584a:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801584e:	3301      	adds	r3, #1
 8015850:	627b      	str	r3, [r7, #36]	; 0x24
 8015852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015856:	429a      	cmp	r2, r3
 8015858:	d207      	bcs.n	801586a <gen_numname+0x10e>
 801585a:	68fa      	ldr	r2, [r7, #12]
 801585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585e:	4413      	add	r3, r2
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	2b20      	cmp	r3, #32
 8015864:	d1de      	bne.n	8015824 <gen_numname+0xc8>
 8015866:	e000      	b.n	801586a <gen_numname+0x10e>
			if (j == i - 1) break;
 8015868:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586c:	2b07      	cmp	r3, #7
 801586e:	d807      	bhi.n	8015880 <gen_numname+0x124>
 8015870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015872:	1c5a      	adds	r2, r3, #1
 8015874:	62ba      	str	r2, [r7, #40]	; 0x28
 8015876:	3330      	adds	r3, #48	; 0x30
 8015878:	443b      	add	r3, r7
 801587a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801587e:	e000      	b.n	8015882 <gen_numname+0x126>
 8015880:	2120      	movs	r1, #32
 8015882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015884:	1c5a      	adds	r2, r3, #1
 8015886:	627a      	str	r2, [r7, #36]	; 0x24
 8015888:	68fa      	ldr	r2, [r7, #12]
 801588a:	4413      	add	r3, r2
 801588c:	460a      	mov	r2, r1
 801588e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8015890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015892:	2b07      	cmp	r3, #7
 8015894:	d9e9      	bls.n	801586a <gen_numname+0x10e>
}
 8015896:	bf00      	nop
 8015898:	bf00      	nop
 801589a:	3730      	adds	r7, #48	; 0x30
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}
 80158a0:	00011021 	.word	0x00011021

080158a4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80158a4:	b480      	push	{r7}
 80158a6:	b085      	sub	sp, #20
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80158ac:	2300      	movs	r3, #0
 80158ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80158b0:	230b      	movs	r3, #11
 80158b2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80158b4:	7bfb      	ldrb	r3, [r7, #15]
 80158b6:	b2da      	uxtb	r2, r3
 80158b8:	0852      	lsrs	r2, r2, #1
 80158ba:	01db      	lsls	r3, r3, #7
 80158bc:	4313      	orrs	r3, r2
 80158be:	b2da      	uxtb	r2, r3
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	1c59      	adds	r1, r3, #1
 80158c4:	6079      	str	r1, [r7, #4]
 80158c6:	781b      	ldrb	r3, [r3, #0]
 80158c8:	4413      	add	r3, r2
 80158ca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	3b01      	subs	r3, #1
 80158d0:	60bb      	str	r3, [r7, #8]
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d1ed      	bne.n	80158b4 <sum_sfn+0x10>
	return sum;
 80158d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80158da:	4618      	mov	r0, r3
 80158dc:	3714      	adds	r7, #20
 80158de:	46bd      	mov	sp, r7
 80158e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e4:	4770      	bx	lr

080158e6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80158e6:	b580      	push	{r7, lr}
 80158e8:	b086      	sub	sp, #24
 80158ea:	af00      	add	r7, sp, #0
 80158ec:	6078      	str	r0, [r7, #4]
 80158ee:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80158f0:	2304      	movs	r3, #4
 80158f2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80158fa:	23ff      	movs	r3, #255	; 0xff
 80158fc:	757b      	strb	r3, [r7, #21]
 80158fe:	23ff      	movs	r3, #255	; 0xff
 8015900:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8015902:	e081      	b.n	8015a08 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	69db      	ldr	r3, [r3, #28]
 8015908:	4619      	mov	r1, r3
 801590a:	6938      	ldr	r0, [r7, #16]
 801590c:	f7ff f8a6 	bl	8014a5c <move_window>
 8015910:	4603      	mov	r3, r0
 8015912:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015914:	7dfb      	ldrb	r3, [r7, #23]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d17c      	bne.n	8015a14 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	6a1b      	ldr	r3, [r3, #32]
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8015922:	7dbb      	ldrb	r3, [r7, #22]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d102      	bne.n	801592e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8015928:	2304      	movs	r3, #4
 801592a:	75fb      	strb	r3, [r7, #23]
 801592c:	e077      	b.n	8015a1e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6a1b      	ldr	r3, [r3, #32]
 8015932:	330b      	adds	r3, #11
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801593a:	73fb      	strb	r3, [r7, #15]
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	7bfa      	ldrb	r2, [r7, #15]
 8015940:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8015942:	7dbb      	ldrb	r3, [r7, #22]
 8015944:	2be5      	cmp	r3, #229	; 0xe5
 8015946:	d00e      	beq.n	8015966 <dir_read+0x80>
 8015948:	7dbb      	ldrb	r3, [r7, #22]
 801594a:	2b2e      	cmp	r3, #46	; 0x2e
 801594c:	d00b      	beq.n	8015966 <dir_read+0x80>
 801594e:	7bfb      	ldrb	r3, [r7, #15]
 8015950:	f023 0320 	bic.w	r3, r3, #32
 8015954:	2b08      	cmp	r3, #8
 8015956:	bf0c      	ite	eq
 8015958:	2301      	moveq	r3, #1
 801595a:	2300      	movne	r3, #0
 801595c:	b2db      	uxtb	r3, r3
 801595e:	461a      	mov	r2, r3
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	4293      	cmp	r3, r2
 8015964:	d002      	beq.n	801596c <dir_read+0x86>
				ord = 0xFF;
 8015966:	23ff      	movs	r3, #255	; 0xff
 8015968:	757b      	strb	r3, [r7, #21]
 801596a:	e044      	b.n	80159f6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801596c:	7bfb      	ldrb	r3, [r7, #15]
 801596e:	2b0f      	cmp	r3, #15
 8015970:	d12f      	bne.n	80159d2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8015972:	7dbb      	ldrb	r3, [r7, #22]
 8015974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015978:	2b00      	cmp	r3, #0
 801597a:	d00d      	beq.n	8015998 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6a1b      	ldr	r3, [r3, #32]
 8015980:	7b5b      	ldrb	r3, [r3, #13]
 8015982:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8015984:	7dbb      	ldrb	r3, [r7, #22]
 8015986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801598a:	75bb      	strb	r3, [r7, #22]
 801598c:	7dbb      	ldrb	r3, [r7, #22]
 801598e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	695a      	ldr	r2, [r3, #20]
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015998:	7dba      	ldrb	r2, [r7, #22]
 801599a:	7d7b      	ldrb	r3, [r7, #21]
 801599c:	429a      	cmp	r2, r3
 801599e:	d115      	bne.n	80159cc <dir_read+0xe6>
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	6a1b      	ldr	r3, [r3, #32]
 80159a4:	330d      	adds	r3, #13
 80159a6:	781b      	ldrb	r3, [r3, #0]
 80159a8:	7d3a      	ldrb	r2, [r7, #20]
 80159aa:	429a      	cmp	r2, r3
 80159ac:	d10e      	bne.n	80159cc <dir_read+0xe6>
 80159ae:	693b      	ldr	r3, [r7, #16]
 80159b0:	68da      	ldr	r2, [r3, #12]
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	6a1b      	ldr	r3, [r3, #32]
 80159b6:	4619      	mov	r1, r3
 80159b8:	4610      	mov	r0, r2
 80159ba:	f7ff fe03 	bl	80155c4 <pick_lfn>
 80159be:	4603      	mov	r3, r0
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d003      	beq.n	80159cc <dir_read+0xe6>
 80159c4:	7d7b      	ldrb	r3, [r7, #21]
 80159c6:	3b01      	subs	r3, #1
 80159c8:	b2db      	uxtb	r3, r3
 80159ca:	e000      	b.n	80159ce <dir_read+0xe8>
 80159cc:	23ff      	movs	r3, #255	; 0xff
 80159ce:	757b      	strb	r3, [r7, #21]
 80159d0:	e011      	b.n	80159f6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80159d2:	7d7b      	ldrb	r3, [r7, #21]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d109      	bne.n	80159ec <dir_read+0x106>
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	6a1b      	ldr	r3, [r3, #32]
 80159dc:	4618      	mov	r0, r3
 80159de:	f7ff ff61 	bl	80158a4 <sum_sfn>
 80159e2:	4603      	mov	r3, r0
 80159e4:	461a      	mov	r2, r3
 80159e6:	7d3b      	ldrb	r3, [r7, #20]
 80159e8:	4293      	cmp	r3, r2
 80159ea:	d015      	beq.n	8015a18 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f04f 32ff 	mov.w	r2, #4294967295
 80159f2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80159f4:	e010      	b.n	8015a18 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80159f6:	2100      	movs	r1, #0
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f7ff fc28 	bl	801524e <dir_next>
 80159fe:	4603      	mov	r3, r0
 8015a00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015a02:	7dfb      	ldrb	r3, [r7, #23]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d109      	bne.n	8015a1c <dir_read+0x136>
	while (dp->sect) {
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	69db      	ldr	r3, [r3, #28]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	f47f af79 	bne.w	8015904 <dir_read+0x1e>
 8015a12:	e004      	b.n	8015a1e <dir_read+0x138>
		if (res != FR_OK) break;
 8015a14:	bf00      	nop
 8015a16:	e002      	b.n	8015a1e <dir_read+0x138>
					break;
 8015a18:	bf00      	nop
 8015a1a:	e000      	b.n	8015a1e <dir_read+0x138>
		if (res != FR_OK) break;
 8015a1c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8015a1e:	7dfb      	ldrb	r3, [r7, #23]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d002      	beq.n	8015a2a <dir_read+0x144>
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	2200      	movs	r2, #0
 8015a28:	61da      	str	r2, [r3, #28]
	return res;
 8015a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	3718      	adds	r7, #24
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}

08015a34 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b086      	sub	sp, #24
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015a42:	2100      	movs	r1, #0
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f7ff fb87 	bl	8015158 <dir_sdi>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015a4e:	7dfb      	ldrb	r3, [r7, #23]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d001      	beq.n	8015a58 <dir_find+0x24>
 8015a54:	7dfb      	ldrb	r3, [r7, #23]
 8015a56:	e0a9      	b.n	8015bac <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015a58:	23ff      	movs	r3, #255	; 0xff
 8015a5a:	753b      	strb	r3, [r7, #20]
 8015a5c:	7d3b      	ldrb	r3, [r7, #20]
 8015a5e:	757b      	strb	r3, [r7, #21]
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	f04f 32ff 	mov.w	r2, #4294967295
 8015a66:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	69db      	ldr	r3, [r3, #28]
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	6938      	ldr	r0, [r7, #16]
 8015a70:	f7fe fff4 	bl	8014a5c <move_window>
 8015a74:	4603      	mov	r3, r0
 8015a76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015a78:	7dfb      	ldrb	r3, [r7, #23]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	f040 8090 	bne.w	8015ba0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6a1b      	ldr	r3, [r3, #32]
 8015a84:	781b      	ldrb	r3, [r3, #0]
 8015a86:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015a88:	7dbb      	ldrb	r3, [r7, #22]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d102      	bne.n	8015a94 <dir_find+0x60>
 8015a8e:	2304      	movs	r3, #4
 8015a90:	75fb      	strb	r3, [r7, #23]
 8015a92:	e08a      	b.n	8015baa <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	6a1b      	ldr	r3, [r3, #32]
 8015a98:	330b      	adds	r3, #11
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015aa0:	73fb      	strb	r3, [r7, #15]
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	7bfa      	ldrb	r2, [r7, #15]
 8015aa6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015aa8:	7dbb      	ldrb	r3, [r7, #22]
 8015aaa:	2be5      	cmp	r3, #229	; 0xe5
 8015aac:	d007      	beq.n	8015abe <dir_find+0x8a>
 8015aae:	7bfb      	ldrb	r3, [r7, #15]
 8015ab0:	f003 0308 	and.w	r3, r3, #8
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d009      	beq.n	8015acc <dir_find+0x98>
 8015ab8:	7bfb      	ldrb	r3, [r7, #15]
 8015aba:	2b0f      	cmp	r3, #15
 8015abc:	d006      	beq.n	8015acc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015abe:	23ff      	movs	r3, #255	; 0xff
 8015ac0:	757b      	strb	r3, [r7, #21]
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8015ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8015aca:	e05e      	b.n	8015b8a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8015acc:	7bfb      	ldrb	r3, [r7, #15]
 8015ace:	2b0f      	cmp	r3, #15
 8015ad0:	d136      	bne.n	8015b40 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d154      	bne.n	8015b8a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015ae0:	7dbb      	ldrb	r3, [r7, #22]
 8015ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d00d      	beq.n	8015b06 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	6a1b      	ldr	r3, [r3, #32]
 8015aee:	7b5b      	ldrb	r3, [r3, #13]
 8015af0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8015af2:	7dbb      	ldrb	r3, [r7, #22]
 8015af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015af8:	75bb      	strb	r3, [r7, #22]
 8015afa:	7dbb      	ldrb	r3, [r7, #22]
 8015afc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	695a      	ldr	r2, [r3, #20]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015b06:	7dba      	ldrb	r2, [r7, #22]
 8015b08:	7d7b      	ldrb	r3, [r7, #21]
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	d115      	bne.n	8015b3a <dir_find+0x106>
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	6a1b      	ldr	r3, [r3, #32]
 8015b12:	330d      	adds	r3, #13
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	7d3a      	ldrb	r2, [r7, #20]
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	d10e      	bne.n	8015b3a <dir_find+0x106>
 8015b1c:	693b      	ldr	r3, [r7, #16]
 8015b1e:	68da      	ldr	r2, [r3, #12]
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6a1b      	ldr	r3, [r3, #32]
 8015b24:	4619      	mov	r1, r3
 8015b26:	4610      	mov	r0, r2
 8015b28:	f7ff fcdc 	bl	80154e4 <cmp_lfn>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d003      	beq.n	8015b3a <dir_find+0x106>
 8015b32:	7d7b      	ldrb	r3, [r7, #21]
 8015b34:	3b01      	subs	r3, #1
 8015b36:	b2db      	uxtb	r3, r3
 8015b38:	e000      	b.n	8015b3c <dir_find+0x108>
 8015b3a:	23ff      	movs	r3, #255	; 0xff
 8015b3c:	757b      	strb	r3, [r7, #21]
 8015b3e:	e024      	b.n	8015b8a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015b40:	7d7b      	ldrb	r3, [r7, #21]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d109      	bne.n	8015b5a <dir_find+0x126>
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6a1b      	ldr	r3, [r3, #32]
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7ff feaa 	bl	80158a4 <sum_sfn>
 8015b50:	4603      	mov	r3, r0
 8015b52:	461a      	mov	r2, r3
 8015b54:	7d3b      	ldrb	r3, [r7, #20]
 8015b56:	4293      	cmp	r3, r2
 8015b58:	d024      	beq.n	8015ba4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015b60:	f003 0301 	and.w	r3, r3, #1
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d10a      	bne.n	8015b7e <dir_find+0x14a>
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	6a18      	ldr	r0, [r3, #32]
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	3324      	adds	r3, #36	; 0x24
 8015b70:	220b      	movs	r2, #11
 8015b72:	4619      	mov	r1, r3
 8015b74:	f7fe fd80 	bl	8014678 <mem_cmp>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d014      	beq.n	8015ba8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015b7e:	23ff      	movs	r3, #255	; 0xff
 8015b80:	757b      	strb	r3, [r7, #21]
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f04f 32ff 	mov.w	r2, #4294967295
 8015b88:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015b8a:	2100      	movs	r1, #0
 8015b8c:	6878      	ldr	r0, [r7, #4]
 8015b8e:	f7ff fb5e 	bl	801524e <dir_next>
 8015b92:	4603      	mov	r3, r0
 8015b94:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015b96:	7dfb      	ldrb	r3, [r7, #23]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	f43f af65 	beq.w	8015a68 <dir_find+0x34>
 8015b9e:	e004      	b.n	8015baa <dir_find+0x176>
		if (res != FR_OK) break;
 8015ba0:	bf00      	nop
 8015ba2:	e002      	b.n	8015baa <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015ba4:	bf00      	nop
 8015ba6:	e000      	b.n	8015baa <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015ba8:	bf00      	nop

	return res;
 8015baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	3718      	adds	r7, #24
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd80      	pop	{r7, pc}

08015bb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b08c      	sub	sp, #48	; 0x30
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015bc8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d001      	beq.n	8015bd4 <dir_register+0x20>
 8015bd0:	2306      	movs	r3, #6
 8015bd2:	e0e0      	b.n	8015d96 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8015bd8:	e002      	b.n	8015be0 <dir_register+0x2c>
 8015bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bdc:	3301      	adds	r3, #1
 8015bde:	627b      	str	r3, [r7, #36]	; 0x24
 8015be0:	69fb      	ldr	r3, [r7, #28]
 8015be2:	68da      	ldr	r2, [r3, #12]
 8015be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be6:	005b      	lsls	r3, r3, #1
 8015be8:	4413      	add	r3, r2
 8015bea:	881b      	ldrh	r3, [r3, #0]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d1f4      	bne.n	8015bda <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8015bf6:	f107 030c 	add.w	r3, r7, #12
 8015bfa:	220c      	movs	r2, #12
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f7fe fcff 	bl	8014600 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8015c02:	7dfb      	ldrb	r3, [r7, #23]
 8015c04:	f003 0301 	and.w	r3, r3, #1
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d032      	beq.n	8015c72 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2240      	movs	r2, #64	; 0x40
 8015c10:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8015c14:	2301      	movs	r3, #1
 8015c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c18:	e016      	b.n	8015c48 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8015c20:	69fb      	ldr	r3, [r7, #28]
 8015c22:	68da      	ldr	r2, [r3, #12]
 8015c24:	f107 010c 	add.w	r1, r7, #12
 8015c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c2a:	f7ff fd97 	bl	801575c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f7ff ff00 	bl	8015a34 <dir_find>
 8015c34:	4603      	mov	r3, r0
 8015c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8015c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d106      	bne.n	8015c50 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8015c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c44:	3301      	adds	r3, #1
 8015c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c4a:	2b63      	cmp	r3, #99	; 0x63
 8015c4c:	d9e5      	bls.n	8015c1a <dir_register+0x66>
 8015c4e:	e000      	b.n	8015c52 <dir_register+0x9e>
			if (res != FR_OK) break;
 8015c50:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c54:	2b64      	cmp	r3, #100	; 0x64
 8015c56:	d101      	bne.n	8015c5c <dir_register+0xa8>
 8015c58:	2307      	movs	r3, #7
 8015c5a:	e09c      	b.n	8015d96 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c60:	2b04      	cmp	r3, #4
 8015c62:	d002      	beq.n	8015c6a <dir_register+0xb6>
 8015c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c68:	e095      	b.n	8015d96 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015c6a:	7dfa      	ldrb	r2, [r7, #23]
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015c72:	7dfb      	ldrb	r3, [r7, #23]
 8015c74:	f003 0302 	and.w	r3, r3, #2
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d007      	beq.n	8015c8c <dir_register+0xd8>
 8015c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7e:	330c      	adds	r3, #12
 8015c80:	4a47      	ldr	r2, [pc, #284]	; (8015da0 <dir_register+0x1ec>)
 8015c82:	fba2 2303 	umull	r2, r3, r2, r3
 8015c86:	089b      	lsrs	r3, r3, #2
 8015c88:	3301      	adds	r3, #1
 8015c8a:	e000      	b.n	8015c8e <dir_register+0xda>
 8015c8c:	2301      	movs	r3, #1
 8015c8e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015c90:	6a39      	ldr	r1, [r7, #32]
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f7ff fba0 	bl	80153d8 <dir_alloc>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d148      	bne.n	8015d38 <dir_register+0x184>
 8015ca6:	6a3b      	ldr	r3, [r7, #32]
 8015ca8:	3b01      	subs	r3, #1
 8015caa:	623b      	str	r3, [r7, #32]
 8015cac:	6a3b      	ldr	r3, [r7, #32]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d042      	beq.n	8015d38 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	695a      	ldr	r2, [r3, #20]
 8015cb6:	6a3b      	ldr	r3, [r7, #32]
 8015cb8:	015b      	lsls	r3, r3, #5
 8015cba:	1ad3      	subs	r3, r2, r3
 8015cbc:	4619      	mov	r1, r3
 8015cbe:	6878      	ldr	r0, [r7, #4]
 8015cc0:	f7ff fa4a 	bl	8015158 <dir_sdi>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d132      	bne.n	8015d38 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	3324      	adds	r3, #36	; 0x24
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7ff fde4 	bl	80158a4 <sum_sfn>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	69db      	ldr	r3, [r3, #28]
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	69f8      	ldr	r0, [r7, #28]
 8015ce8:	f7fe feb8 	bl	8014a5c <move_window>
 8015cec:	4603      	mov	r3, r0
 8015cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8015cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d11d      	bne.n	8015d36 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015cfa:	69fb      	ldr	r3, [r7, #28]
 8015cfc:	68d8      	ldr	r0, [r3, #12]
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	6a19      	ldr	r1, [r3, #32]
 8015d02:	6a3b      	ldr	r3, [r7, #32]
 8015d04:	b2da      	uxtb	r2, r3
 8015d06:	7efb      	ldrb	r3, [r7, #27]
 8015d08:	f7ff fcc0 	bl	801568c <put_lfn>
				fs->wflag = 1;
 8015d0c:	69fb      	ldr	r3, [r7, #28]
 8015d0e:	2201      	movs	r2, #1
 8015d10:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015d12:	2100      	movs	r1, #0
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f7ff fa9a 	bl	801524e <dir_next>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015d20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d107      	bne.n	8015d38 <dir_register+0x184>
 8015d28:	6a3b      	ldr	r3, [r7, #32]
 8015d2a:	3b01      	subs	r3, #1
 8015d2c:	623b      	str	r3, [r7, #32]
 8015d2e:	6a3b      	ldr	r3, [r7, #32]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d1d5      	bne.n	8015ce0 <dir_register+0x12c>
 8015d34:	e000      	b.n	8015d38 <dir_register+0x184>
				if (res != FR_OK) break;
 8015d36:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015d38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d128      	bne.n	8015d92 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	69db      	ldr	r3, [r3, #28]
 8015d44:	4619      	mov	r1, r3
 8015d46:	69f8      	ldr	r0, [r7, #28]
 8015d48:	f7fe fe88 	bl	8014a5c <move_window>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d11b      	bne.n	8015d92 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	6a1b      	ldr	r3, [r3, #32]
 8015d5e:	2220      	movs	r2, #32
 8015d60:	2100      	movs	r1, #0
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7fe fc6d 	bl	8014642 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	6a18      	ldr	r0, [r3, #32]
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	3324      	adds	r3, #36	; 0x24
 8015d70:	220b      	movs	r2, #11
 8015d72:	4619      	mov	r1, r3
 8015d74:	f7fe fc44 	bl	8014600 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	6a1b      	ldr	r3, [r3, #32]
 8015d82:	330c      	adds	r3, #12
 8015d84:	f002 0218 	and.w	r2, r2, #24
 8015d88:	b2d2      	uxtb	r2, r2
 8015d8a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	2201      	movs	r2, #1
 8015d90:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3730      	adds	r7, #48	; 0x30
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}
 8015d9e:	bf00      	nop
 8015da0:	4ec4ec4f 	.word	0x4ec4ec4f

08015da4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b08a      	sub	sp, #40	; 0x28
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
 8015dac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	613b      	str	r3, [r7, #16]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	68db      	ldr	r3, [r3, #12]
 8015dba:	60fb      	str	r3, [r7, #12]
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	617b      	str	r3, [r7, #20]
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8015dc4:	69bb      	ldr	r3, [r7, #24]
 8015dc6:	1c5a      	adds	r2, r3, #1
 8015dc8:	61ba      	str	r2, [r7, #24]
 8015dca:	693a      	ldr	r2, [r7, #16]
 8015dcc:	4413      	add	r3, r2
 8015dce:	781b      	ldrb	r3, [r3, #0]
 8015dd0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8015dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015dd4:	2b1f      	cmp	r3, #31
 8015dd6:	d96a      	bls.n	8015eae <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015dda:	2b2f      	cmp	r3, #47	; 0x2f
 8015ddc:	d006      	beq.n	8015dec <create_name+0x48>
 8015dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015de0:	2b5c      	cmp	r3, #92	; 0x5c
 8015de2:	d110      	bne.n	8015e06 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015de4:	e002      	b.n	8015dec <create_name+0x48>
 8015de6:	69bb      	ldr	r3, [r7, #24]
 8015de8:	3301      	adds	r3, #1
 8015dea:	61bb      	str	r3, [r7, #24]
 8015dec:	693a      	ldr	r2, [r7, #16]
 8015dee:	69bb      	ldr	r3, [r7, #24]
 8015df0:	4413      	add	r3, r2
 8015df2:	781b      	ldrb	r3, [r3, #0]
 8015df4:	2b2f      	cmp	r3, #47	; 0x2f
 8015df6:	d0f6      	beq.n	8015de6 <create_name+0x42>
 8015df8:	693a      	ldr	r2, [r7, #16]
 8015dfa:	69bb      	ldr	r3, [r7, #24]
 8015dfc:	4413      	add	r3, r2
 8015dfe:	781b      	ldrb	r3, [r3, #0]
 8015e00:	2b5c      	cmp	r3, #92	; 0x5c
 8015e02:	d0f0      	beq.n	8015de6 <create_name+0x42>
			break;
 8015e04:	e054      	b.n	8015eb0 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	2bfe      	cmp	r3, #254	; 0xfe
 8015e0a:	d901      	bls.n	8015e10 <create_name+0x6c>
 8015e0c:	2306      	movs	r3, #6
 8015e0e:	e1bf      	b.n	8016190 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 8015e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e12:	b2db      	uxtb	r3, r3
 8015e14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8015e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e18:	b2db      	uxtb	r3, r3
 8015e1a:	2b80      	cmp	r3, #128	; 0x80
 8015e1c:	d925      	bls.n	8015e6a <create_name+0xc6>
 8015e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e20:	b2db      	uxtb	r3, r3
 8015e22:	2bff      	cmp	r3, #255	; 0xff
 8015e24:	d021      	beq.n	8015e6a <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8015e26:	69bb      	ldr	r3, [r7, #24]
 8015e28:	1c5a      	adds	r2, r3, #1
 8015e2a:	61ba      	str	r2, [r7, #24]
 8015e2c:	693a      	ldr	r2, [r7, #16]
 8015e2e:	4413      	add	r3, r2
 8015e30:	781b      	ldrb	r3, [r3, #0]
 8015e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 8015e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e38:	021b      	lsls	r3, r3, #8
 8015e3a:	b29a      	uxth	r2, r3
 8015e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e40:	b29b      	uxth	r3, r3
 8015e42:	4413      	add	r3, r2
 8015e44:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 8015e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e4a:	2b3f      	cmp	r3, #63	; 0x3f
 8015e4c:	d903      	bls.n	8015e56 <create_name+0xb2>
 8015e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e52:	2b7e      	cmp	r3, #126	; 0x7e
 8015e54:	d909      	bls.n	8015e6a <create_name+0xc6>
 8015e56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	da03      	bge.n	8015e66 <create_name+0xc2>
 8015e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e62:	2bff      	cmp	r3, #255	; 0xff
 8015e64:	d101      	bne.n	8015e6a <create_name+0xc6>
 8015e66:	2306      	movs	r3, #6
 8015e68:	e192      	b.n	8016190 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8015e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e6c:	2101      	movs	r1, #1
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f001 fd20 	bl	80178b4 <ff_convert>
 8015e74:	4603      	mov	r3, r0
 8015e76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d101      	bne.n	8015e82 <create_name+0xde>
 8015e7e:	2306      	movs	r3, #6
 8015e80:	e186      	b.n	8016190 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8015e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e84:	2b7f      	cmp	r3, #127	; 0x7f
 8015e86:	d809      	bhi.n	8015e9c <create_name+0xf8>
 8015e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e8a:	4619      	mov	r1, r3
 8015e8c:	489a      	ldr	r0, [pc, #616]	; (80160f8 <create_name+0x354>)
 8015e8e:	f7fe fc1a 	bl	80146c6 <chk_chr>
 8015e92:	4603      	mov	r3, r0
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d001      	beq.n	8015e9c <create_name+0xf8>
 8015e98:	2306      	movs	r3, #6
 8015e9a:	e179      	b.n	8016190 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	1c5a      	adds	r2, r3, #1
 8015ea0:	617a      	str	r2, [r7, #20]
 8015ea2:	005b      	lsls	r3, r3, #1
 8015ea4:	68fa      	ldr	r2, [r7, #12]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015eaa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8015eac:	e78a      	b.n	8015dc4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8015eae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8015eb0:	693a      	ldr	r2, [r7, #16]
 8015eb2:	69bb      	ldr	r3, [r7, #24]
 8015eb4:	441a      	add	r2, r3
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ebc:	2b1f      	cmp	r3, #31
 8015ebe:	d801      	bhi.n	8015ec4 <create_name+0x120>
 8015ec0:	2304      	movs	r3, #4
 8015ec2:	e000      	b.n	8015ec6 <create_name+0x122>
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015eca:	e011      	b.n	8015ef0 <create_name+0x14c>
		w = lfn[di - 1];
 8015ecc:	697a      	ldr	r2, [r7, #20]
 8015ece:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015ed2:	4413      	add	r3, r2
 8015ed4:	005b      	lsls	r3, r3, #1
 8015ed6:	68fa      	ldr	r2, [r7, #12]
 8015ed8:	4413      	add	r3, r2
 8015eda:	881b      	ldrh	r3, [r3, #0]
 8015edc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8015ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ee0:	2b20      	cmp	r3, #32
 8015ee2:	d002      	beq.n	8015eea <create_name+0x146>
 8015ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ee6:	2b2e      	cmp	r3, #46	; 0x2e
 8015ee8:	d106      	bne.n	8015ef8 <create_name+0x154>
		di--;
 8015eea:	697b      	ldr	r3, [r7, #20]
 8015eec:	3b01      	subs	r3, #1
 8015eee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015ef0:	697b      	ldr	r3, [r7, #20]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d1ea      	bne.n	8015ecc <create_name+0x128>
 8015ef6:	e000      	b.n	8015efa <create_name+0x156>
		if (w != ' ' && w != '.') break;
 8015ef8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	005b      	lsls	r3, r3, #1
 8015efe:	68fa      	ldr	r2, [r7, #12]
 8015f00:	4413      	add	r3, r2
 8015f02:	2200      	movs	r2, #0
 8015f04:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d101      	bne.n	8015f10 <create_name+0x16c>
 8015f0c:	2306      	movs	r3, #6
 8015f0e:	e13f      	b.n	8016190 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	3324      	adds	r3, #36	; 0x24
 8015f14:	220b      	movs	r2, #11
 8015f16:	2120      	movs	r1, #32
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f7fe fb92 	bl	8014642 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015f1e:	2300      	movs	r3, #0
 8015f20:	61bb      	str	r3, [r7, #24]
 8015f22:	e002      	b.n	8015f2a <create_name+0x186>
 8015f24:	69bb      	ldr	r3, [r7, #24]
 8015f26:	3301      	adds	r3, #1
 8015f28:	61bb      	str	r3, [r7, #24]
 8015f2a:	69bb      	ldr	r3, [r7, #24]
 8015f2c:	005b      	lsls	r3, r3, #1
 8015f2e:	68fa      	ldr	r2, [r7, #12]
 8015f30:	4413      	add	r3, r2
 8015f32:	881b      	ldrh	r3, [r3, #0]
 8015f34:	2b20      	cmp	r3, #32
 8015f36:	d0f5      	beq.n	8015f24 <create_name+0x180>
 8015f38:	69bb      	ldr	r3, [r7, #24]
 8015f3a:	005b      	lsls	r3, r3, #1
 8015f3c:	68fa      	ldr	r2, [r7, #12]
 8015f3e:	4413      	add	r3, r2
 8015f40:	881b      	ldrh	r3, [r3, #0]
 8015f42:	2b2e      	cmp	r3, #46	; 0x2e
 8015f44:	d0ee      	beq.n	8015f24 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015f46:	69bb      	ldr	r3, [r7, #24]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d009      	beq.n	8015f60 <create_name+0x1bc>
 8015f4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f50:	f043 0303 	orr.w	r3, r3, #3
 8015f54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015f58:	e002      	b.n	8015f60 <create_name+0x1bc>
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	3b01      	subs	r3, #1
 8015f5e:	617b      	str	r3, [r7, #20]
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d009      	beq.n	8015f7a <create_name+0x1d6>
 8015f66:	697a      	ldr	r2, [r7, #20]
 8015f68:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015f6c:	4413      	add	r3, r2
 8015f6e:	005b      	lsls	r3, r3, #1
 8015f70:	68fa      	ldr	r2, [r7, #12]
 8015f72:	4413      	add	r3, r2
 8015f74:	881b      	ldrh	r3, [r3, #0]
 8015f76:	2b2e      	cmp	r3, #46	; 0x2e
 8015f78:	d1ef      	bne.n	8015f5a <create_name+0x1b6>

	i = b = 0; ni = 8;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f80:	2300      	movs	r3, #0
 8015f82:	623b      	str	r3, [r7, #32]
 8015f84:	2308      	movs	r3, #8
 8015f86:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8015f88:	69bb      	ldr	r3, [r7, #24]
 8015f8a:	1c5a      	adds	r2, r3, #1
 8015f8c:	61ba      	str	r2, [r7, #24]
 8015f8e:	005b      	lsls	r3, r3, #1
 8015f90:	68fa      	ldr	r2, [r7, #12]
 8015f92:	4413      	add	r3, r2
 8015f94:	881b      	ldrh	r3, [r3, #0]
 8015f96:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8015f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	f000 80aa 	beq.w	80160f4 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8015fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fa2:	2b20      	cmp	r3, #32
 8015fa4:	d006      	beq.n	8015fb4 <create_name+0x210>
 8015fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8015faa:	d10a      	bne.n	8015fc2 <create_name+0x21e>
 8015fac:	69ba      	ldr	r2, [r7, #24]
 8015fae:	697b      	ldr	r3, [r7, #20]
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d006      	beq.n	8015fc2 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 8015fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015fb8:	f043 0303 	orr.w	r3, r3, #3
 8015fbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015fc0:	e097      	b.n	80160f2 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8015fc2:	6a3a      	ldr	r2, [r7, #32]
 8015fc4:	69fb      	ldr	r3, [r7, #28]
 8015fc6:	429a      	cmp	r2, r3
 8015fc8:	d203      	bcs.n	8015fd2 <create_name+0x22e>
 8015fca:	69ba      	ldr	r2, [r7, #24]
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d123      	bne.n	801601a <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 8015fd2:	69fb      	ldr	r3, [r7, #28]
 8015fd4:	2b0b      	cmp	r3, #11
 8015fd6:	d106      	bne.n	8015fe6 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 8015fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015fdc:	f043 0303 	orr.w	r3, r3, #3
 8015fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015fe4:	e08d      	b.n	8016102 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8015fe6:	69ba      	ldr	r2, [r7, #24]
 8015fe8:	697b      	ldr	r3, [r7, #20]
 8015fea:	429a      	cmp	r2, r3
 8015fec:	d005      	beq.n	8015ffa <create_name+0x256>
 8015fee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ff2:	f043 0303 	orr.w	r3, r3, #3
 8015ff6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8015ffa:	69ba      	ldr	r2, [r7, #24]
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d87e      	bhi.n	8016100 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016002:	697b      	ldr	r3, [r7, #20]
 8016004:	61bb      	str	r3, [r7, #24]
 8016006:	2308      	movs	r3, #8
 8016008:	623b      	str	r3, [r7, #32]
 801600a:	230b      	movs	r3, #11
 801600c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801600e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016012:	009b      	lsls	r3, r3, #2
 8016014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016018:	e06b      	b.n	80160f2 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801601a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801601c:	2b7f      	cmp	r3, #127	; 0x7f
 801601e:	d910      	bls.n	8016042 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8016020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016022:	4618      	mov	r0, r3
 8016024:	f001 fca4 	bl	8017970 <ff_wtoupper>
 8016028:	4603      	mov	r3, r0
 801602a:	2100      	movs	r1, #0
 801602c:	4618      	mov	r0, r3
 801602e:	f001 fc41 	bl	80178b4 <ff_convert>
 8016032:	4603      	mov	r3, r0
 8016034:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8016036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801603a:	f043 0302 	orr.w	r3, r3, #2
 801603e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 8016042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016044:	2bff      	cmp	r3, #255	; 0xff
 8016046:	d91a      	bls.n	801607e <create_name+0x2da>
			if (i >= ni - 1) {
 8016048:	69fb      	ldr	r3, [r7, #28]
 801604a:	3b01      	subs	r3, #1
 801604c:	6a3a      	ldr	r2, [r7, #32]
 801604e:	429a      	cmp	r2, r3
 8016050:	d308      	bcc.n	8016064 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8016052:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016056:	f043 0303 	orr.w	r3, r3, #3
 801605a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801605e:	69fb      	ldr	r3, [r7, #28]
 8016060:	623b      	str	r3, [r7, #32]
 8016062:	e046      	b.n	80160f2 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8016064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016066:	0a1b      	lsrs	r3, r3, #8
 8016068:	b299      	uxth	r1, r3
 801606a:	6a3b      	ldr	r3, [r7, #32]
 801606c:	1c5a      	adds	r2, r3, #1
 801606e:	623a      	str	r2, [r7, #32]
 8016070:	b2c9      	uxtb	r1, r1
 8016072:	687a      	ldr	r2, [r7, #4]
 8016074:	4413      	add	r3, r2
 8016076:	460a      	mov	r2, r1
 8016078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801607c:	e02f      	b.n	80160de <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801607e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016080:	2b00      	cmp	r3, #0
 8016082:	d007      	beq.n	8016094 <create_name+0x2f0>
 8016084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016086:	4619      	mov	r1, r3
 8016088:	481c      	ldr	r0, [pc, #112]	; (80160fc <create_name+0x358>)
 801608a:	f7fe fb1c 	bl	80146c6 <chk_chr>
 801608e:	4603      	mov	r3, r0
 8016090:	2b00      	cmp	r3, #0
 8016092:	d008      	beq.n	80160a6 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016094:	235f      	movs	r3, #95	; 0x5f
 8016096:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801609c:	f043 0303 	orr.w	r3, r3, #3
 80160a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80160a4:	e01b      	b.n	80160de <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80160a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160a8:	2b40      	cmp	r3, #64	; 0x40
 80160aa:	d909      	bls.n	80160c0 <create_name+0x31c>
 80160ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160ae:	2b5a      	cmp	r3, #90	; 0x5a
 80160b0:	d806      	bhi.n	80160c0 <create_name+0x31c>
					b |= 2;
 80160b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160b6:	f043 0302 	orr.w	r3, r3, #2
 80160ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80160be:	e00e      	b.n	80160de <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80160c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160c2:	2b60      	cmp	r3, #96	; 0x60
 80160c4:	d90b      	bls.n	80160de <create_name+0x33a>
 80160c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160c8:	2b7a      	cmp	r3, #122	; 0x7a
 80160ca:	d808      	bhi.n	80160de <create_name+0x33a>
						b |= 1; w -= 0x20;
 80160cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160d0:	f043 0301 	orr.w	r3, r3, #1
 80160d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80160d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160da:	3b20      	subs	r3, #32
 80160dc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80160de:	6a3b      	ldr	r3, [r7, #32]
 80160e0:	1c5a      	adds	r2, r3, #1
 80160e2:	623a      	str	r2, [r7, #32]
 80160e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160e6:	b2d1      	uxtb	r1, r2
 80160e8:	687a      	ldr	r2, [r7, #4]
 80160ea:	4413      	add	r3, r2
 80160ec:	460a      	mov	r2, r1
 80160ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80160f2:	e749      	b.n	8015f88 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 80160f4:	bf00      	nop
 80160f6:	e004      	b.n	8016102 <create_name+0x35e>
 80160f8:	0801baf4 	.word	0x0801baf4
 80160fc:	0801bb00 	.word	0x0801bb00
			if (si > di) break;			/* No extension */
 8016100:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016108:	2be5      	cmp	r3, #229	; 0xe5
 801610a:	d103      	bne.n	8016114 <create_name+0x370>
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2205      	movs	r2, #5
 8016110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8016114:	69fb      	ldr	r3, [r7, #28]
 8016116:	2b08      	cmp	r3, #8
 8016118:	d104      	bne.n	8016124 <create_name+0x380>
 801611a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801611e:	009b      	lsls	r3, r3, #2
 8016120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016128:	f003 030c 	and.w	r3, r3, #12
 801612c:	2b0c      	cmp	r3, #12
 801612e:	d005      	beq.n	801613c <create_name+0x398>
 8016130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016134:	f003 0303 	and.w	r3, r3, #3
 8016138:	2b03      	cmp	r3, #3
 801613a:	d105      	bne.n	8016148 <create_name+0x3a4>
 801613c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016140:	f043 0302 	orr.w	r3, r3, #2
 8016144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801614c:	f003 0302 	and.w	r3, r3, #2
 8016150:	2b00      	cmp	r3, #0
 8016152:	d117      	bne.n	8016184 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8016154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016158:	f003 0303 	and.w	r3, r3, #3
 801615c:	2b01      	cmp	r3, #1
 801615e:	d105      	bne.n	801616c <create_name+0x3c8>
 8016160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016164:	f043 0310 	orr.w	r3, r3, #16
 8016168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801616c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016170:	f003 030c 	and.w	r3, r3, #12
 8016174:	2b04      	cmp	r3, #4
 8016176:	d105      	bne.n	8016184 <create_name+0x3e0>
 8016178:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801617c:	f043 0308 	orr.w	r3, r3, #8
 8016180:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801618a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801618e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016190:	4618      	mov	r0, r3
 8016192:	3728      	adds	r7, #40	; 0x28
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}

08016198 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b086      	sub	sp, #24
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80161a6:	693b      	ldr	r3, [r7, #16]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80161ac:	e002      	b.n	80161b4 <follow_path+0x1c>
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	3301      	adds	r3, #1
 80161b2:	603b      	str	r3, [r7, #0]
 80161b4:	683b      	ldr	r3, [r7, #0]
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	2b2f      	cmp	r3, #47	; 0x2f
 80161ba:	d0f8      	beq.n	80161ae <follow_path+0x16>
 80161bc:	683b      	ldr	r3, [r7, #0]
 80161be:	781b      	ldrb	r3, [r3, #0]
 80161c0:	2b5c      	cmp	r3, #92	; 0x5c
 80161c2:	d0f4      	beq.n	80161ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	2200      	movs	r2, #0
 80161c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	781b      	ldrb	r3, [r3, #0]
 80161ce:	2b1f      	cmp	r3, #31
 80161d0:	d80a      	bhi.n	80161e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2280      	movs	r2, #128	; 0x80
 80161d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80161da:	2100      	movs	r1, #0
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f7fe ffbb 	bl	8015158 <dir_sdi>
 80161e2:	4603      	mov	r3, r0
 80161e4:	75fb      	strb	r3, [r7, #23]
 80161e6:	e043      	b.n	8016270 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80161e8:	463b      	mov	r3, r7
 80161ea:	4619      	mov	r1, r3
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f7ff fdd9 	bl	8015da4 <create_name>
 80161f2:	4603      	mov	r3, r0
 80161f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80161f6:	7dfb      	ldrb	r3, [r7, #23]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d134      	bne.n	8016266 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f7ff fc19 	bl	8015a34 <dir_find>
 8016202:	4603      	mov	r3, r0
 8016204:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801620c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801620e:	7dfb      	ldrb	r3, [r7, #23]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d00a      	beq.n	801622a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016214:	7dfb      	ldrb	r3, [r7, #23]
 8016216:	2b04      	cmp	r3, #4
 8016218:	d127      	bne.n	801626a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801621a:	7afb      	ldrb	r3, [r7, #11]
 801621c:	f003 0304 	and.w	r3, r3, #4
 8016220:	2b00      	cmp	r3, #0
 8016222:	d122      	bne.n	801626a <follow_path+0xd2>
 8016224:	2305      	movs	r3, #5
 8016226:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016228:	e01f      	b.n	801626a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801622a:	7afb      	ldrb	r3, [r7, #11]
 801622c:	f003 0304 	and.w	r3, r3, #4
 8016230:	2b00      	cmp	r3, #0
 8016232:	d11c      	bne.n	801626e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016234:	693b      	ldr	r3, [r7, #16]
 8016236:	799b      	ldrb	r3, [r3, #6]
 8016238:	f003 0310 	and.w	r3, r3, #16
 801623c:	2b00      	cmp	r3, #0
 801623e:	d102      	bne.n	8016246 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016240:	2305      	movs	r3, #5
 8016242:	75fb      	strb	r3, [r7, #23]
 8016244:	e014      	b.n	8016270 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	695b      	ldr	r3, [r3, #20]
 8016250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016254:	4413      	add	r3, r2
 8016256:	4619      	mov	r1, r3
 8016258:	68f8      	ldr	r0, [r7, #12]
 801625a:	f7ff f904 	bl	8015466 <ld_clust>
 801625e:	4602      	mov	r2, r0
 8016260:	693b      	ldr	r3, [r7, #16]
 8016262:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016264:	e7c0      	b.n	80161e8 <follow_path+0x50>
			if (res != FR_OK) break;
 8016266:	bf00      	nop
 8016268:	e002      	b.n	8016270 <follow_path+0xd8>
				break;
 801626a:	bf00      	nop
 801626c:	e000      	b.n	8016270 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801626e:	bf00      	nop
			}
		}
	}

	return res;
 8016270:	7dfb      	ldrb	r3, [r7, #23]
}
 8016272:	4618      	mov	r0, r3
 8016274:	3718      	adds	r7, #24
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}

0801627a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801627a:	b480      	push	{r7}
 801627c:	b087      	sub	sp, #28
 801627e:	af00      	add	r7, sp, #0
 8016280:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016282:	f04f 33ff 	mov.w	r3, #4294967295
 8016286:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d031      	beq.n	80162f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	617b      	str	r3, [r7, #20]
 8016296:	e002      	b.n	801629e <get_ldnumber+0x24>
 8016298:	697b      	ldr	r3, [r7, #20]
 801629a:	3301      	adds	r3, #1
 801629c:	617b      	str	r3, [r7, #20]
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	2b1f      	cmp	r3, #31
 80162a4:	d903      	bls.n	80162ae <get_ldnumber+0x34>
 80162a6:	697b      	ldr	r3, [r7, #20]
 80162a8:	781b      	ldrb	r3, [r3, #0]
 80162aa:	2b3a      	cmp	r3, #58	; 0x3a
 80162ac:	d1f4      	bne.n	8016298 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80162ae:	697b      	ldr	r3, [r7, #20]
 80162b0:	781b      	ldrb	r3, [r3, #0]
 80162b2:	2b3a      	cmp	r3, #58	; 0x3a
 80162b4:	d11c      	bne.n	80162f0 <get_ldnumber+0x76>
			tp = *path;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	1c5a      	adds	r2, r3, #1
 80162c0:	60fa      	str	r2, [r7, #12]
 80162c2:	781b      	ldrb	r3, [r3, #0]
 80162c4:	3b30      	subs	r3, #48	; 0x30
 80162c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	2b09      	cmp	r3, #9
 80162cc:	d80e      	bhi.n	80162ec <get_ldnumber+0x72>
 80162ce:	68fa      	ldr	r2, [r7, #12]
 80162d0:	697b      	ldr	r3, [r7, #20]
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d10a      	bne.n	80162ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d107      	bne.n	80162ec <get_ldnumber+0x72>
					vol = (int)i;
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	3301      	adds	r3, #1
 80162e4:	617b      	str	r3, [r7, #20]
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	697a      	ldr	r2, [r7, #20]
 80162ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80162ec:	693b      	ldr	r3, [r7, #16]
 80162ee:	e002      	b.n	80162f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80162f0:	2300      	movs	r3, #0
 80162f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80162f4:	693b      	ldr	r3, [r7, #16]
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	371c      	adds	r7, #28
 80162fa:	46bd      	mov	sp, r7
 80162fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016300:	4770      	bx	lr
	...

08016304 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b082      	sub	sp, #8
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
 801630c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	2200      	movs	r2, #0
 8016312:	70da      	strb	r2, [r3, #3]
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f04f 32ff 	mov.w	r2, #4294967295
 801631a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801631c:	6839      	ldr	r1, [r7, #0]
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f7fe fb9c 	bl	8014a5c <move_window>
 8016324:	4603      	mov	r3, r0
 8016326:	2b00      	cmp	r3, #0
 8016328:	d001      	beq.n	801632e <check_fs+0x2a>
 801632a:	2304      	movs	r3, #4
 801632c:	e038      	b.n	80163a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	3334      	adds	r3, #52	; 0x34
 8016332:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016336:	4618      	mov	r0, r3
 8016338:	f7fe f8e0 	bl	80144fc <ld_word>
 801633c:	4603      	mov	r3, r0
 801633e:	461a      	mov	r2, r3
 8016340:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016344:	429a      	cmp	r2, r3
 8016346:	d001      	beq.n	801634c <check_fs+0x48>
 8016348:	2303      	movs	r3, #3
 801634a:	e029      	b.n	80163a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016352:	2be9      	cmp	r3, #233	; 0xe9
 8016354:	d009      	beq.n	801636a <check_fs+0x66>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801635c:	2beb      	cmp	r3, #235	; 0xeb
 801635e:	d11e      	bne.n	801639e <check_fs+0x9a>
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8016366:	2b90      	cmp	r3, #144	; 0x90
 8016368:	d119      	bne.n	801639e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	3334      	adds	r3, #52	; 0x34
 801636e:	3336      	adds	r3, #54	; 0x36
 8016370:	4618      	mov	r0, r3
 8016372:	f7fe f8db 	bl	801452c <ld_dword>
 8016376:	4603      	mov	r3, r0
 8016378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801637c:	4a0a      	ldr	r2, [pc, #40]	; (80163a8 <check_fs+0xa4>)
 801637e:	4293      	cmp	r3, r2
 8016380:	d101      	bne.n	8016386 <check_fs+0x82>
 8016382:	2300      	movs	r3, #0
 8016384:	e00c      	b.n	80163a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	3334      	adds	r3, #52	; 0x34
 801638a:	3352      	adds	r3, #82	; 0x52
 801638c:	4618      	mov	r0, r3
 801638e:	f7fe f8cd 	bl	801452c <ld_dword>
 8016392:	4603      	mov	r3, r0
 8016394:	4a05      	ldr	r2, [pc, #20]	; (80163ac <check_fs+0xa8>)
 8016396:	4293      	cmp	r3, r2
 8016398:	d101      	bne.n	801639e <check_fs+0x9a>
 801639a:	2300      	movs	r3, #0
 801639c:	e000      	b.n	80163a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801639e:	2302      	movs	r3, #2
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3708      	adds	r7, #8
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	00544146 	.word	0x00544146
 80163ac:	33544146 	.word	0x33544146

080163b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b096      	sub	sp, #88	; 0x58
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	4613      	mov	r3, r2
 80163bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	2200      	movs	r2, #0
 80163c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80163c4:	68f8      	ldr	r0, [r7, #12]
 80163c6:	f7ff ff58 	bl	801627a <get_ldnumber>
 80163ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80163cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	da01      	bge.n	80163d6 <find_volume+0x26>
 80163d2:	230b      	movs	r3, #11
 80163d4:	e22d      	b.n	8016832 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80163d6:	4aa1      	ldr	r2, [pc, #644]	; (801665c <find_volume+0x2ac>)
 80163d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80163e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d101      	bne.n	80163ea <find_volume+0x3a>
 80163e6:	230c      	movs	r3, #12
 80163e8:	e223      	b.n	8016832 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80163ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80163f0:	79fb      	ldrb	r3, [r7, #7]
 80163f2:	f023 0301 	bic.w	r3, r3, #1
 80163f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80163f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163fa:	781b      	ldrb	r3, [r3, #0]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d01a      	beq.n	8016436 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016402:	785b      	ldrb	r3, [r3, #1]
 8016404:	4618      	mov	r0, r3
 8016406:	f7fd ffdb 	bl	80143c0 <disk_status>
 801640a:	4603      	mov	r3, r0
 801640c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016414:	f003 0301 	and.w	r3, r3, #1
 8016418:	2b00      	cmp	r3, #0
 801641a:	d10c      	bne.n	8016436 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801641c:	79fb      	ldrb	r3, [r7, #7]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d007      	beq.n	8016432 <find_volume+0x82>
 8016422:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016426:	f003 0304 	and.w	r3, r3, #4
 801642a:	2b00      	cmp	r3, #0
 801642c:	d001      	beq.n	8016432 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801642e:	230a      	movs	r3, #10
 8016430:	e1ff      	b.n	8016832 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8016432:	2300      	movs	r3, #0
 8016434:	e1fd      	b.n	8016832 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016438:	2200      	movs	r2, #0
 801643a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801643c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801643e:	b2da      	uxtb	r2, r3
 8016440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016442:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016446:	785b      	ldrb	r3, [r3, #1]
 8016448:	4618      	mov	r0, r3
 801644a:	f7fd ffd3 	bl	80143f4 <disk_initialize>
 801644e:	4603      	mov	r3, r0
 8016450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016458:	f003 0301 	and.w	r3, r3, #1
 801645c:	2b00      	cmp	r3, #0
 801645e:	d001      	beq.n	8016464 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016460:	2303      	movs	r3, #3
 8016462:	e1e6      	b.n	8016832 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016464:	79fb      	ldrb	r3, [r7, #7]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d007      	beq.n	801647a <find_volume+0xca>
 801646a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801646e:	f003 0304 	and.w	r3, r3, #4
 8016472:	2b00      	cmp	r3, #0
 8016474:	d001      	beq.n	801647a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016476:	230a      	movs	r3, #10
 8016478:	e1db      	b.n	8016832 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801647a:	2300      	movs	r3, #0
 801647c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801647e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016482:	f7ff ff3f 	bl	8016304 <check_fs>
 8016486:	4603      	mov	r3, r0
 8016488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801648c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016490:	2b02      	cmp	r3, #2
 8016492:	d149      	bne.n	8016528 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016494:	2300      	movs	r3, #0
 8016496:	643b      	str	r3, [r7, #64]	; 0x40
 8016498:	e01e      	b.n	80164d8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80164a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164a2:	011b      	lsls	r3, r3, #4
 80164a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80164a8:	4413      	add	r3, r2
 80164aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80164ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ae:	3304      	adds	r3, #4
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d006      	beq.n	80164c4 <find_volume+0x114>
 80164b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b8:	3308      	adds	r3, #8
 80164ba:	4618      	mov	r0, r3
 80164bc:	f7fe f836 	bl	801452c <ld_dword>
 80164c0:	4602      	mov	r2, r0
 80164c2:	e000      	b.n	80164c6 <find_volume+0x116>
 80164c4:	2200      	movs	r2, #0
 80164c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164c8:	009b      	lsls	r3, r3, #2
 80164ca:	3358      	adds	r3, #88	; 0x58
 80164cc:	443b      	add	r3, r7
 80164ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80164d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164d4:	3301      	adds	r3, #1
 80164d6:	643b      	str	r3, [r7, #64]	; 0x40
 80164d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164da:	2b03      	cmp	r3, #3
 80164dc:	d9dd      	bls.n	801649a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80164de:	2300      	movs	r3, #0
 80164e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80164e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d002      	beq.n	80164ee <find_volume+0x13e>
 80164e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164ea:	3b01      	subs	r3, #1
 80164ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80164ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164f0:	009b      	lsls	r3, r3, #2
 80164f2:	3358      	adds	r3, #88	; 0x58
 80164f4:	443b      	add	r3, r7
 80164f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80164fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80164fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d005      	beq.n	801650e <find_volume+0x15e>
 8016502:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016506:	f7ff fefd 	bl	8016304 <check_fs>
 801650a:	4603      	mov	r3, r0
 801650c:	e000      	b.n	8016510 <find_volume+0x160>
 801650e:	2303      	movs	r3, #3
 8016510:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016518:	2b01      	cmp	r3, #1
 801651a:	d905      	bls.n	8016528 <find_volume+0x178>
 801651c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801651e:	3301      	adds	r3, #1
 8016520:	643b      	str	r3, [r7, #64]	; 0x40
 8016522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016524:	2b03      	cmp	r3, #3
 8016526:	d9e2      	bls.n	80164ee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801652c:	2b04      	cmp	r3, #4
 801652e:	d101      	bne.n	8016534 <find_volume+0x184>
 8016530:	2301      	movs	r3, #1
 8016532:	e17e      	b.n	8016832 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016538:	2b01      	cmp	r3, #1
 801653a:	d901      	bls.n	8016540 <find_volume+0x190>
 801653c:	230d      	movs	r3, #13
 801653e:	e178      	b.n	8016832 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016542:	3334      	adds	r3, #52	; 0x34
 8016544:	330b      	adds	r3, #11
 8016546:	4618      	mov	r0, r3
 8016548:	f7fd ffd8 	bl	80144fc <ld_word>
 801654c:	4603      	mov	r3, r0
 801654e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016552:	d001      	beq.n	8016558 <find_volume+0x1a8>
 8016554:	230d      	movs	r3, #13
 8016556:	e16c      	b.n	8016832 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801655a:	3334      	adds	r3, #52	; 0x34
 801655c:	3316      	adds	r3, #22
 801655e:	4618      	mov	r0, r3
 8016560:	f7fd ffcc 	bl	80144fc <ld_word>
 8016564:	4603      	mov	r3, r0
 8016566:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801656a:	2b00      	cmp	r3, #0
 801656c:	d106      	bne.n	801657c <find_volume+0x1cc>
 801656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016570:	3334      	adds	r3, #52	; 0x34
 8016572:	3324      	adds	r3, #36	; 0x24
 8016574:	4618      	mov	r0, r3
 8016576:	f7fd ffd9 	bl	801452c <ld_dword>
 801657a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801657e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016580:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016584:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8016588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801658a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801658e:	789b      	ldrb	r3, [r3, #2]
 8016590:	2b01      	cmp	r3, #1
 8016592:	d005      	beq.n	80165a0 <find_volume+0x1f0>
 8016594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016596:	789b      	ldrb	r3, [r3, #2]
 8016598:	2b02      	cmp	r3, #2
 801659a:	d001      	beq.n	80165a0 <find_volume+0x1f0>
 801659c:	230d      	movs	r3, #13
 801659e:	e148      	b.n	8016832 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80165a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a2:	789b      	ldrb	r3, [r3, #2]
 80165a4:	461a      	mov	r2, r3
 80165a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165a8:	fb02 f303 	mul.w	r3, r2, r3
 80165ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80165ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80165b4:	b29a      	uxth	r2, r3
 80165b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80165ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165bc:	895b      	ldrh	r3, [r3, #10]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d008      	beq.n	80165d4 <find_volume+0x224>
 80165c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165c4:	895b      	ldrh	r3, [r3, #10]
 80165c6:	461a      	mov	r2, r3
 80165c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ca:	895b      	ldrh	r3, [r3, #10]
 80165cc:	3b01      	subs	r3, #1
 80165ce:	4013      	ands	r3, r2
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d001      	beq.n	80165d8 <find_volume+0x228>
 80165d4:	230d      	movs	r3, #13
 80165d6:	e12c      	b.n	8016832 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80165d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165da:	3334      	adds	r3, #52	; 0x34
 80165dc:	3311      	adds	r3, #17
 80165de:	4618      	mov	r0, r3
 80165e0:	f7fd ff8c 	bl	80144fc <ld_word>
 80165e4:	4603      	mov	r3, r0
 80165e6:	461a      	mov	r2, r3
 80165e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80165ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ee:	891b      	ldrh	r3, [r3, #8]
 80165f0:	f003 030f 	and.w	r3, r3, #15
 80165f4:	b29b      	uxth	r3, r3
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d001      	beq.n	80165fe <find_volume+0x24e>
 80165fa:	230d      	movs	r3, #13
 80165fc:	e119      	b.n	8016832 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80165fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016600:	3334      	adds	r3, #52	; 0x34
 8016602:	3313      	adds	r3, #19
 8016604:	4618      	mov	r0, r3
 8016606:	f7fd ff79 	bl	80144fc <ld_word>
 801660a:	4603      	mov	r3, r0
 801660c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801660e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016610:	2b00      	cmp	r3, #0
 8016612:	d106      	bne.n	8016622 <find_volume+0x272>
 8016614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016616:	3334      	adds	r3, #52	; 0x34
 8016618:	3320      	adds	r3, #32
 801661a:	4618      	mov	r0, r3
 801661c:	f7fd ff86 	bl	801452c <ld_dword>
 8016620:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016624:	3334      	adds	r3, #52	; 0x34
 8016626:	330e      	adds	r3, #14
 8016628:	4618      	mov	r0, r3
 801662a:	f7fd ff67 	bl	80144fc <ld_word>
 801662e:	4603      	mov	r3, r0
 8016630:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016632:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016634:	2b00      	cmp	r3, #0
 8016636:	d101      	bne.n	801663c <find_volume+0x28c>
 8016638:	230d      	movs	r3, #13
 801663a:	e0fa      	b.n	8016832 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801663c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801663e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016640:	4413      	add	r3, r2
 8016642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016644:	8912      	ldrh	r2, [r2, #8]
 8016646:	0912      	lsrs	r2, r2, #4
 8016648:	b292      	uxth	r2, r2
 801664a:	4413      	add	r3, r2
 801664c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801664e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016652:	429a      	cmp	r2, r3
 8016654:	d204      	bcs.n	8016660 <find_volume+0x2b0>
 8016656:	230d      	movs	r3, #13
 8016658:	e0eb      	b.n	8016832 <find_volume+0x482>
 801665a:	bf00      	nop
 801665c:	24000b60 	.word	0x24000b60
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016664:	1ad3      	subs	r3, r2, r3
 8016666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016668:	8952      	ldrh	r2, [r2, #10]
 801666a:	fbb3 f3f2 	udiv	r3, r3, r2
 801666e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016672:	2b00      	cmp	r3, #0
 8016674:	d101      	bne.n	801667a <find_volume+0x2ca>
 8016676:	230d      	movs	r3, #13
 8016678:	e0db      	b.n	8016832 <find_volume+0x482>
		fmt = FS_FAT32;
 801667a:	2303      	movs	r3, #3
 801667c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016682:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016686:	4293      	cmp	r3, r2
 8016688:	d802      	bhi.n	8016690 <find_volume+0x2e0>
 801668a:	2302      	movs	r3, #2
 801668c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016692:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016696:	4293      	cmp	r3, r2
 8016698:	d802      	bhi.n	80166a0 <find_volume+0x2f0>
 801669a:	2301      	movs	r3, #1
 801669c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80166a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a2:	1c9a      	adds	r2, r3, #2
 80166a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166a6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80166a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80166ac:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80166ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80166b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166b2:	441a      	add	r2, r3
 80166b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166b6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80166b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80166ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166bc:	441a      	add	r2, r3
 80166be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166c0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80166c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80166c6:	2b03      	cmp	r3, #3
 80166c8:	d11e      	bne.n	8016708 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80166ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166cc:	3334      	adds	r3, #52	; 0x34
 80166ce:	332a      	adds	r3, #42	; 0x2a
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7fd ff13 	bl	80144fc <ld_word>
 80166d6:	4603      	mov	r3, r0
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d001      	beq.n	80166e0 <find_volume+0x330>
 80166dc:	230d      	movs	r3, #13
 80166de:	e0a8      	b.n	8016832 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80166e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166e2:	891b      	ldrh	r3, [r3, #8]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d001      	beq.n	80166ec <find_volume+0x33c>
 80166e8:	230d      	movs	r3, #13
 80166ea:	e0a2      	b.n	8016832 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80166ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166ee:	3334      	adds	r3, #52	; 0x34
 80166f0:	332c      	adds	r3, #44	; 0x2c
 80166f2:	4618      	mov	r0, r3
 80166f4:	f7fd ff1a 	bl	801452c <ld_dword>
 80166f8:	4602      	mov	r2, r0
 80166fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166fc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80166fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016700:	699b      	ldr	r3, [r3, #24]
 8016702:	009b      	lsls	r3, r3, #2
 8016704:	647b      	str	r3, [r7, #68]	; 0x44
 8016706:	e01f      	b.n	8016748 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801670a:	891b      	ldrh	r3, [r3, #8]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d101      	bne.n	8016714 <find_volume+0x364>
 8016710:	230d      	movs	r3, #13
 8016712:	e08e      	b.n	8016832 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801671a:	441a      	add	r2, r3
 801671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801671e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016724:	2b02      	cmp	r3, #2
 8016726:	d103      	bne.n	8016730 <find_volume+0x380>
 8016728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801672a:	699b      	ldr	r3, [r3, #24]
 801672c:	005b      	lsls	r3, r3, #1
 801672e:	e00a      	b.n	8016746 <find_volume+0x396>
 8016730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016732:	699a      	ldr	r2, [r3, #24]
 8016734:	4613      	mov	r3, r2
 8016736:	005b      	lsls	r3, r3, #1
 8016738:	4413      	add	r3, r2
 801673a:	085a      	lsrs	r2, r3, #1
 801673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801673e:	699b      	ldr	r3, [r3, #24]
 8016740:	f003 0301 	and.w	r3, r3, #1
 8016744:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016746:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801674a:	69da      	ldr	r2, [r3, #28]
 801674c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801674e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016752:	0a5b      	lsrs	r3, r3, #9
 8016754:	429a      	cmp	r2, r3
 8016756:	d201      	bcs.n	801675c <find_volume+0x3ac>
 8016758:	230d      	movs	r3, #13
 801675a:	e06a      	b.n	8016832 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801675e:	f04f 32ff 	mov.w	r2, #4294967295
 8016762:	615a      	str	r2, [r3, #20]
 8016764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016766:	695a      	ldr	r2, [r3, #20]
 8016768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801676a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801676e:	2280      	movs	r2, #128	; 0x80
 8016770:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016772:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016776:	2b03      	cmp	r3, #3
 8016778:	d149      	bne.n	801680e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801677c:	3334      	adds	r3, #52	; 0x34
 801677e:	3330      	adds	r3, #48	; 0x30
 8016780:	4618      	mov	r0, r3
 8016782:	f7fd febb 	bl	80144fc <ld_word>
 8016786:	4603      	mov	r3, r0
 8016788:	2b01      	cmp	r3, #1
 801678a:	d140      	bne.n	801680e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801678c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801678e:	3301      	adds	r3, #1
 8016790:	4619      	mov	r1, r3
 8016792:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016794:	f7fe f962 	bl	8014a5c <move_window>
 8016798:	4603      	mov	r3, r0
 801679a:	2b00      	cmp	r3, #0
 801679c:	d137      	bne.n	801680e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a0:	2200      	movs	r2, #0
 80167a2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80167a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a6:	3334      	adds	r3, #52	; 0x34
 80167a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80167ac:	4618      	mov	r0, r3
 80167ae:	f7fd fea5 	bl	80144fc <ld_word>
 80167b2:	4603      	mov	r3, r0
 80167b4:	461a      	mov	r2, r3
 80167b6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80167ba:	429a      	cmp	r2, r3
 80167bc:	d127      	bne.n	801680e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80167be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c0:	3334      	adds	r3, #52	; 0x34
 80167c2:	4618      	mov	r0, r3
 80167c4:	f7fd feb2 	bl	801452c <ld_dword>
 80167c8:	4603      	mov	r3, r0
 80167ca:	4a1c      	ldr	r2, [pc, #112]	; (801683c <find_volume+0x48c>)
 80167cc:	4293      	cmp	r3, r2
 80167ce:	d11e      	bne.n	801680e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80167d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d2:	3334      	adds	r3, #52	; 0x34
 80167d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80167d8:	4618      	mov	r0, r3
 80167da:	f7fd fea7 	bl	801452c <ld_dword>
 80167de:	4603      	mov	r3, r0
 80167e0:	4a17      	ldr	r2, [pc, #92]	; (8016840 <find_volume+0x490>)
 80167e2:	4293      	cmp	r3, r2
 80167e4:	d113      	bne.n	801680e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80167e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e8:	3334      	adds	r3, #52	; 0x34
 80167ea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7fd fe9c 	bl	801452c <ld_dword>
 80167f4:	4602      	mov	r2, r0
 80167f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167f8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80167fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167fc:	3334      	adds	r3, #52	; 0x34
 80167fe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016802:	4618      	mov	r0, r3
 8016804:	f7fd fe92 	bl	801452c <ld_dword>
 8016808:	4602      	mov	r2, r0
 801680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801680c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016810:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016814:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016816:	4b0b      	ldr	r3, [pc, #44]	; (8016844 <find_volume+0x494>)
 8016818:	881b      	ldrh	r3, [r3, #0]
 801681a:	3301      	adds	r3, #1
 801681c:	b29a      	uxth	r2, r3
 801681e:	4b09      	ldr	r3, [pc, #36]	; (8016844 <find_volume+0x494>)
 8016820:	801a      	strh	r2, [r3, #0]
 8016822:	4b08      	ldr	r3, [pc, #32]	; (8016844 <find_volume+0x494>)
 8016824:	881a      	ldrh	r2, [r3, #0]
 8016826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016828:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801682a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801682c:	f7fe f8ae 	bl	801498c <clear_lock>
#endif
	return FR_OK;
 8016830:	2300      	movs	r3, #0
}
 8016832:	4618      	mov	r0, r3
 8016834:	3758      	adds	r7, #88	; 0x58
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}
 801683a:	bf00      	nop
 801683c:	41615252 	.word	0x41615252
 8016840:	61417272 	.word	0x61417272
 8016844:	24000b64 	.word	0x24000b64

08016848 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b084      	sub	sp, #16
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
 8016850:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016852:	2309      	movs	r3, #9
 8016854:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d01c      	beq.n	8016896 <validate+0x4e>
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d018      	beq.n	8016896 <validate+0x4e>
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	781b      	ldrb	r3, [r3, #0]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d013      	beq.n	8016896 <validate+0x4e>
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	889a      	ldrh	r2, [r3, #4]
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	88db      	ldrh	r3, [r3, #6]
 8016878:	429a      	cmp	r2, r3
 801687a:	d10c      	bne.n	8016896 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	785b      	ldrb	r3, [r3, #1]
 8016882:	4618      	mov	r0, r3
 8016884:	f7fd fd9c 	bl	80143c0 <disk_status>
 8016888:	4603      	mov	r3, r0
 801688a:	f003 0301 	and.w	r3, r3, #1
 801688e:	2b00      	cmp	r3, #0
 8016890:	d101      	bne.n	8016896 <validate+0x4e>
			res = FR_OK;
 8016892:	2300      	movs	r3, #0
 8016894:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016896:	7bfb      	ldrb	r3, [r7, #15]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d102      	bne.n	80168a2 <validate+0x5a>
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	e000      	b.n	80168a4 <validate+0x5c>
 80168a2:	2300      	movs	r3, #0
 80168a4:	683a      	ldr	r2, [r7, #0]
 80168a6:	6013      	str	r3, [r2, #0]
	return res;
 80168a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3710      	adds	r7, #16
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}
	...

080168b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b088      	sub	sp, #32
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	60f8      	str	r0, [r7, #12]
 80168bc:	60b9      	str	r1, [r7, #8]
 80168be:	4613      	mov	r3, r2
 80168c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80168c6:	f107 0310 	add.w	r3, r7, #16
 80168ca:	4618      	mov	r0, r3
 80168cc:	f7ff fcd5 	bl	801627a <get_ldnumber>
 80168d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80168d2:	69fb      	ldr	r3, [r7, #28]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	da01      	bge.n	80168dc <f_mount+0x28>
 80168d8:	230b      	movs	r3, #11
 80168da:	e02b      	b.n	8016934 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80168dc:	4a17      	ldr	r2, [pc, #92]	; (801693c <f_mount+0x88>)
 80168de:	69fb      	ldr	r3, [r7, #28]
 80168e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80168e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80168e6:	69bb      	ldr	r3, [r7, #24]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d005      	beq.n	80168f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80168ec:	69b8      	ldr	r0, [r7, #24]
 80168ee:	f7fe f84d 	bl	801498c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80168f2:	69bb      	ldr	r3, [r7, #24]
 80168f4:	2200      	movs	r2, #0
 80168f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d002      	beq.n	8016904 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	2200      	movs	r2, #0
 8016902:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016904:	68fa      	ldr	r2, [r7, #12]
 8016906:	490d      	ldr	r1, [pc, #52]	; (801693c <f_mount+0x88>)
 8016908:	69fb      	ldr	r3, [r7, #28]
 801690a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d002      	beq.n	801691a <f_mount+0x66>
 8016914:	79fb      	ldrb	r3, [r7, #7]
 8016916:	2b01      	cmp	r3, #1
 8016918:	d001      	beq.n	801691e <f_mount+0x6a>
 801691a:	2300      	movs	r3, #0
 801691c:	e00a      	b.n	8016934 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801691e:	f107 010c 	add.w	r1, r7, #12
 8016922:	f107 0308 	add.w	r3, r7, #8
 8016926:	2200      	movs	r2, #0
 8016928:	4618      	mov	r0, r3
 801692a:	f7ff fd41 	bl	80163b0 <find_volume>
 801692e:	4603      	mov	r3, r0
 8016930:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016932:	7dfb      	ldrb	r3, [r7, #23]
}
 8016934:	4618      	mov	r0, r3
 8016936:	3720      	adds	r7, #32
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}
 801693c:	24000b60 	.word	0x24000b60

08016940 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8016946:	af00      	add	r7, sp, #0
 8016948:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801694c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016950:	6018      	str	r0, [r3, #0]
 8016952:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016956:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801695a:	6019      	str	r1, [r3, #0]
 801695c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016960:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016964:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016966:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801696a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d101      	bne.n	8016978 <f_open+0x38>
 8016974:	2309      	movs	r3, #9
 8016976:	e295      	b.n	8016ea4 <f_open+0x564>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016978:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801697c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016980:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016984:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016988:	7812      	ldrb	r2, [r2, #0]
 801698a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801698e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8016990:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016994:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016998:	781a      	ldrb	r2, [r3, #0]
 801699a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801699e:	f107 0308 	add.w	r3, r7, #8
 80169a2:	4618      	mov	r0, r3
 80169a4:	f7ff fd04 	bl	80163b0 <find_volume>
 80169a8:	4603      	mov	r3, r0
 80169aa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 80169ae:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	f040 8269 	bne.w	8016e8a <f_open+0x54a>
		dj.obj.fs = fs;
 80169b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80169bc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80169c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80169c4:	f107 0214 	add.w	r2, r7, #20
 80169c8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80169ca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80169ce:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80169d2:	681a      	ldr	r2, [r3, #0]
 80169d4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80169d8:	4611      	mov	r1, r2
 80169da:	4618      	mov	r0, r3
 80169dc:	f7ff fbdc 	bl	8016198 <follow_path>
 80169e0:	4603      	mov	r3, r0
 80169e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80169e6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d11e      	bne.n	8016a2c <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80169ee:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80169f2:	b25b      	sxtb	r3, r3
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	da03      	bge.n	8016a00 <f_open+0xc0>
				res = FR_INVALID_NAME;
 80169f8:	2306      	movs	r3, #6
 80169fa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80169fe:	e015      	b.n	8016a2c <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016a00:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a04:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	f023 0301 	bic.w	r3, r3, #1
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	bf14      	ite	ne
 8016a12:	2301      	movne	r3, #1
 8016a14:	2300      	moveq	r3, #0
 8016a16:	b2db      	uxtb	r3, r3
 8016a18:	461a      	mov	r2, r3
 8016a1a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016a1e:	4611      	mov	r1, r2
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7fd fe6b 	bl	80146fc <chk_lock>
 8016a26:	4603      	mov	r3, r0
 8016a28:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016a2c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a30:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016a34:	781b      	ldrb	r3, [r3, #0]
 8016a36:	f003 031c 	and.w	r3, r3, #28
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	f000 80a7 	beq.w	8016b8e <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8016a40:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d01f      	beq.n	8016a88 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016a48:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016a4c:	2b04      	cmp	r3, #4
 8016a4e:	d10e      	bne.n	8016a6e <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016a50:	f7fd feb0 	bl	80147b4 <enq_lock>
 8016a54:	4603      	mov	r3, r0
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d006      	beq.n	8016a68 <f_open+0x128>
 8016a5a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7ff f8a8 	bl	8015bb4 <dir_register>
 8016a64:	4603      	mov	r3, r0
 8016a66:	e000      	b.n	8016a6a <f_open+0x12a>
 8016a68:	2312      	movs	r3, #18
 8016a6a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016a6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a72:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016a76:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016a7a:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016a7e:	7812      	ldrb	r2, [r2, #0]
 8016a80:	f042 0208 	orr.w	r2, r2, #8
 8016a84:	701a      	strb	r2, [r3, #0]
 8016a86:	e015      	b.n	8016ab4 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016a88:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8016a8c:	f003 0311 	and.w	r3, r3, #17
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d003      	beq.n	8016a9c <f_open+0x15c>
					res = FR_DENIED;
 8016a94:	2307      	movs	r3, #7
 8016a96:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016a9a:	e00b      	b.n	8016ab4 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016a9c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016aa0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016aa4:	781b      	ldrb	r3, [r3, #0]
 8016aa6:	f003 0304 	and.w	r3, r3, #4
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d002      	beq.n	8016ab4 <f_open+0x174>
 8016aae:	2308      	movs	r3, #8
 8016ab0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016ab4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	f040 8088 	bne.w	8016bce <f_open+0x28e>
 8016abe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016ac2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016ac6:	781b      	ldrb	r3, [r3, #0]
 8016ac8:	f003 0308 	and.w	r3, r3, #8
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d07e      	beq.n	8016bce <f_open+0x28e>
				dw = GET_FATTIME();
 8016ad0:	f7f8 ff34 	bl	800f93c <get_fattime>
 8016ad4:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016ad8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016adc:	330e      	adds	r3, #14
 8016ade:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f7fd fd60 	bl	80145a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016ae8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016aec:	3316      	adds	r3, #22
 8016aee:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8016af2:	4618      	mov	r0, r3
 8016af4:	f7fd fd58 	bl	80145a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016af8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016afc:	330b      	adds	r3, #11
 8016afe:	2220      	movs	r2, #32
 8016b00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016b02:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016b06:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8016b0a:	4611      	mov	r1, r2
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7fe fcaa 	bl	8015466 <ld_clust>
 8016b12:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016b16:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016b1a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8016b1e:	2200      	movs	r2, #0
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7fe fcbf 	bl	80154a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016b26:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016b2a:	331c      	adds	r3, #28
 8016b2c:	2100      	movs	r1, #0
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7fd fd3a 	bl	80145a8 <st_dword>
					fs->wflag = 1;
 8016b34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016b38:	2201      	movs	r2, #1
 8016b3a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016b3c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d044      	beq.n	8016bce <f_open+0x28e>
						dw = fs->winsect;
 8016b44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b4a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8016b4e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016b52:	2200      	movs	r2, #0
 8016b54:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f7fe f9cc 	bl	8014ef6 <remove_chain>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8016b64:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d130      	bne.n	8016bce <f_open+0x28e>
							res = move_window(fs, dw);
 8016b6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016b70:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7fd ff71 	bl	8014a5c <move_window>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016b80:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016b84:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8016b88:	3a01      	subs	r2, #1
 8016b8a:	611a      	str	r2, [r3, #16]
 8016b8c:	e01f      	b.n	8016bce <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016b8e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d11b      	bne.n	8016bce <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016b96:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8016b9a:	f003 0310 	and.w	r3, r3, #16
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d003      	beq.n	8016baa <f_open+0x26a>
					res = FR_NO_FILE;
 8016ba2:	2304      	movs	r3, #4
 8016ba4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016ba8:	e011      	b.n	8016bce <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016baa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016bae:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016bb2:	781b      	ldrb	r3, [r3, #0]
 8016bb4:	f003 0302 	and.w	r3, r3, #2
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d008      	beq.n	8016bce <f_open+0x28e>
 8016bbc:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8016bc0:	f003 0301 	and.w	r3, r3, #1
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d002      	beq.n	8016bce <f_open+0x28e>
						res = FR_DENIED;
 8016bc8:	2307      	movs	r3, #7
 8016bca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8016bce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d14a      	bne.n	8016c6c <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016bd6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016bda:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016bde:	781b      	ldrb	r3, [r3, #0]
 8016be0:	f003 0308 	and.w	r3, r3, #8
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d00b      	beq.n	8016c00 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8016be8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016bec:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016bf0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016bf4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016bf8:	7812      	ldrb	r2, [r2, #0]
 8016bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016bfe:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016c00:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016c06:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c0a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016c12:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8016c16:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c1a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016c22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c26:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016c2a:	781b      	ldrb	r3, [r3, #0]
 8016c2c:	f023 0301 	bic.w	r3, r3, #1
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	bf14      	ite	ne
 8016c34:	2301      	movne	r3, #1
 8016c36:	2300      	moveq	r3, #0
 8016c38:	b2db      	uxtb	r3, r3
 8016c3a:	461a      	mov	r2, r3
 8016c3c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016c40:	4611      	mov	r1, r2
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7fd fdd8 	bl	80147f8 <inc_lock>
 8016c48:	4602      	mov	r2, r0
 8016c4a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c4e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016c56:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c5a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	691b      	ldr	r3, [r3, #16]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d102      	bne.n	8016c6c <f_open+0x32c>
 8016c66:	2302      	movs	r3, #2
 8016c68:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016c6c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	f040 810a 	bne.w	8016e8a <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016c76:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016c7a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8016c7e:	4611      	mov	r1, r2
 8016c80:	4618      	mov	r0, r3
 8016c82:	f7fe fbf0 	bl	8015466 <ld_clust>
 8016c86:	4602      	mov	r2, r0
 8016c88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c8c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016c94:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016c98:	331c      	adds	r3, #28
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7fd fc46 	bl	801452c <ld_dword>
 8016ca0:	4602      	mov	r2, r0
 8016ca2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016ca6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016cae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cb2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	2200      	movs	r2, #0
 8016cba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016cbc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8016cc0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cc4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016ccc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016cd0:	88da      	ldrh	r2, [r3, #6]
 8016cd2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cd6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016cde:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016ce2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016cec:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016cf0:	7812      	ldrb	r2, [r2, #0]
 8016cf2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016cf4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cf8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	2200      	movs	r2, #0
 8016d00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016d02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d06:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016d10:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d14:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016d1e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d22:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	3330      	adds	r3, #48	; 0x30
 8016d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d2e:	2100      	movs	r1, #0
 8016d30:	4618      	mov	r0, r3
 8016d32:	f7fd fc86 	bl	8014642 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016d36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d3a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016d3e:	781b      	ldrb	r3, [r3, #0]
 8016d40:	f003 0320 	and.w	r3, r3, #32
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	f000 80a0 	beq.w	8016e8a <f_open+0x54a>
 8016d4a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d4e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	68db      	ldr	r3, [r3, #12]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	f000 8097 	beq.w	8016e8a <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016d5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d60:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	68da      	ldr	r2, [r3, #12]
 8016d68:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d6c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016d74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016d78:	895b      	ldrh	r3, [r3, #10]
 8016d7a:	025b      	lsls	r3, r3, #9
 8016d7c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016d80:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d84:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	689b      	ldr	r3, [r3, #8]
 8016d8c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016d90:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d94:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8016da0:	e021      	b.n	8016de6 <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 8016da2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016da6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7fd ff0e 	bl	8014bd2 <get_fat>
 8016db6:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8016dba:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016dbe:	2b01      	cmp	r3, #1
 8016dc0:	d802      	bhi.n	8016dc8 <f_open+0x488>
 8016dc2:	2302      	movs	r3, #2
 8016dc4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016dc8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dd0:	d102      	bne.n	8016dd8 <f_open+0x498>
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016dd8:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8016ddc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016de0:	1ad3      	subs	r3, r2, r3
 8016de2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8016de6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d105      	bne.n	8016dfa <f_open+0x4ba>
 8016dee:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8016df2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016df6:	429a      	cmp	r2, r3
 8016df8:	d8d3      	bhi.n	8016da2 <f_open+0x462>
				}
				fp->clust = clst;
 8016dfa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016dfe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8016e08:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016e0a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d13b      	bne.n	8016e8a <f_open+0x54a>
 8016e12:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d035      	beq.n	8016e8a <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016e1e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016e22:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8016e26:	4618      	mov	r0, r3
 8016e28:	f7fd feb4 	bl	8014b94 <clust2sect>
 8016e2c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8016e30:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d103      	bne.n	8016e40 <f_open+0x500>
						res = FR_INT_ERR;
 8016e38:	2302      	movs	r3, #2
 8016e3a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016e3e:	e024      	b.n	8016e8a <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016e40:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016e44:	0a5a      	lsrs	r2, r3, #9
 8016e46:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8016e4a:	441a      	add	r2, r3
 8016e4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e50:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016e58:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016e5c:	7858      	ldrb	r0, [r3, #1]
 8016e5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e62:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016e6c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e70:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	6a1a      	ldr	r2, [r3, #32]
 8016e78:	2301      	movs	r3, #1
 8016e7a:	f7fd fae1 	bl	8014440 <disk_read>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d002      	beq.n	8016e8a <f_open+0x54a>
 8016e84:	2301      	movs	r3, #1
 8016e86:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016e8a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d006      	beq.n	8016ea0 <f_open+0x560>
 8016e92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016ea0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}

08016eae <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8016eae:	b580      	push	{r7, lr}
 8016eb0:	b08e      	sub	sp, #56	; 0x38
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	60f8      	str	r0, [r7, #12]
 8016eb6:	60b9      	str	r1, [r7, #8]
 8016eb8:	607a      	str	r2, [r7, #4]
 8016eba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	f107 0214 	add.w	r2, r7, #20
 8016ecc:	4611      	mov	r1, r2
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7ff fcba 	bl	8016848 <validate>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016eda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d107      	bne.n	8016ef2 <f_read+0x44>
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	7d5b      	ldrb	r3, [r3, #21]
 8016ee6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016eea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d002      	beq.n	8016ef8 <f_read+0x4a>
 8016ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016ef6:	e115      	b.n	8017124 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	7d1b      	ldrb	r3, [r3, #20]
 8016efc:	f003 0301 	and.w	r3, r3, #1
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d101      	bne.n	8016f08 <f_read+0x5a>
 8016f04:	2307      	movs	r3, #7
 8016f06:	e10d      	b.n	8017124 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	68da      	ldr	r2, [r3, #12]
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	699b      	ldr	r3, [r3, #24]
 8016f10:	1ad3      	subs	r3, r2, r3
 8016f12:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8016f14:	687a      	ldr	r2, [r7, #4]
 8016f16:	6a3b      	ldr	r3, [r7, #32]
 8016f18:	429a      	cmp	r2, r3
 8016f1a:	f240 80fe 	bls.w	801711a <f_read+0x26c>
 8016f1e:	6a3b      	ldr	r3, [r7, #32]
 8016f20:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8016f22:	e0fa      	b.n	801711a <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	699b      	ldr	r3, [r3, #24]
 8016f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	f040 80c6 	bne.w	80170be <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	699b      	ldr	r3, [r3, #24]
 8016f36:	0a5b      	lsrs	r3, r3, #9
 8016f38:	697a      	ldr	r2, [r7, #20]
 8016f3a:	8952      	ldrh	r2, [r2, #10]
 8016f3c:	3a01      	subs	r2, #1
 8016f3e:	4013      	ands	r3, r2
 8016f40:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8016f42:	69fb      	ldr	r3, [r7, #28]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d12f      	bne.n	8016fa8 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	699b      	ldr	r3, [r3, #24]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d103      	bne.n	8016f58 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	689b      	ldr	r3, [r3, #8]
 8016f54:	633b      	str	r3, [r7, #48]	; 0x30
 8016f56:	e013      	b.n	8016f80 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d007      	beq.n	8016f70 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	699b      	ldr	r3, [r3, #24]
 8016f64:	4619      	mov	r1, r3
 8016f66:	68f8      	ldr	r0, [r7, #12]
 8016f68:	f7fe f8c2 	bl	80150f0 <clmt_clust>
 8016f6c:	6338      	str	r0, [r7, #48]	; 0x30
 8016f6e:	e007      	b.n	8016f80 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8016f70:	68fa      	ldr	r2, [r7, #12]
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	69db      	ldr	r3, [r3, #28]
 8016f76:	4619      	mov	r1, r3
 8016f78:	4610      	mov	r0, r2
 8016f7a:	f7fd fe2a 	bl	8014bd2 <get_fat>
 8016f7e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8016f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f82:	2b01      	cmp	r3, #1
 8016f84:	d804      	bhi.n	8016f90 <f_read+0xe2>
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	2202      	movs	r2, #2
 8016f8a:	755a      	strb	r2, [r3, #21]
 8016f8c:	2302      	movs	r3, #2
 8016f8e:	e0c9      	b.n	8017124 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f96:	d104      	bne.n	8016fa2 <f_read+0xf4>
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	2201      	movs	r2, #1
 8016f9c:	755a      	strb	r2, [r3, #21]
 8016f9e:	2301      	movs	r3, #1
 8016fa0:	e0c0      	b.n	8017124 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fa6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016fa8:	697a      	ldr	r2, [r7, #20]
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	69db      	ldr	r3, [r3, #28]
 8016fae:	4619      	mov	r1, r3
 8016fb0:	4610      	mov	r0, r2
 8016fb2:	f7fd fdef 	bl	8014b94 <clust2sect>
 8016fb6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016fb8:	69bb      	ldr	r3, [r7, #24]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d104      	bne.n	8016fc8 <f_read+0x11a>
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	2202      	movs	r2, #2
 8016fc2:	755a      	strb	r2, [r3, #21]
 8016fc4:	2302      	movs	r3, #2
 8016fc6:	e0ad      	b.n	8017124 <f_read+0x276>
			sect += csect;
 8016fc8:	69ba      	ldr	r2, [r7, #24]
 8016fca:	69fb      	ldr	r3, [r7, #28]
 8016fcc:	4413      	add	r3, r2
 8016fce:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	0a5b      	lsrs	r3, r3, #9
 8016fd4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8016fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d039      	beq.n	8017050 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016fdc:	69fa      	ldr	r2, [r7, #28]
 8016fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe0:	4413      	add	r3, r2
 8016fe2:	697a      	ldr	r2, [r7, #20]
 8016fe4:	8952      	ldrh	r2, [r2, #10]
 8016fe6:	4293      	cmp	r3, r2
 8016fe8:	d905      	bls.n	8016ff6 <f_read+0x148>
					cc = fs->csize - csect;
 8016fea:	697b      	ldr	r3, [r7, #20]
 8016fec:	895b      	ldrh	r3, [r3, #10]
 8016fee:	461a      	mov	r2, r3
 8016ff0:	69fb      	ldr	r3, [r7, #28]
 8016ff2:	1ad3      	subs	r3, r2, r3
 8016ff4:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016ff6:	697b      	ldr	r3, [r7, #20]
 8016ff8:	7858      	ldrb	r0, [r3, #1]
 8016ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ffc:	69ba      	ldr	r2, [r7, #24]
 8016ffe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017000:	f7fd fa1e 	bl	8014440 <disk_read>
 8017004:	4603      	mov	r3, r0
 8017006:	2b00      	cmp	r3, #0
 8017008:	d004      	beq.n	8017014 <f_read+0x166>
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	2201      	movs	r2, #1
 801700e:	755a      	strb	r2, [r3, #21]
 8017010:	2301      	movs	r3, #1
 8017012:	e087      	b.n	8017124 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	7d1b      	ldrb	r3, [r3, #20]
 8017018:	b25b      	sxtb	r3, r3
 801701a:	2b00      	cmp	r3, #0
 801701c:	da14      	bge.n	8017048 <f_read+0x19a>
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	6a1a      	ldr	r2, [r3, #32]
 8017022:	69bb      	ldr	r3, [r7, #24]
 8017024:	1ad3      	subs	r3, r2, r3
 8017026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017028:	429a      	cmp	r2, r3
 801702a:	d90d      	bls.n	8017048 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	6a1a      	ldr	r2, [r3, #32]
 8017030:	69bb      	ldr	r3, [r7, #24]
 8017032:	1ad3      	subs	r3, r2, r3
 8017034:	025b      	lsls	r3, r3, #9
 8017036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017038:	18d0      	adds	r0, r2, r3
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	3330      	adds	r3, #48	; 0x30
 801703e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017042:	4619      	mov	r1, r3
 8017044:	f7fd fadc 	bl	8014600 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8017048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801704a:	025b      	lsls	r3, r3, #9
 801704c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801704e:	e050      	b.n	80170f2 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	6a1b      	ldr	r3, [r3, #32]
 8017054:	69ba      	ldr	r2, [r7, #24]
 8017056:	429a      	cmp	r2, r3
 8017058:	d02e      	beq.n	80170b8 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	7d1b      	ldrb	r3, [r3, #20]
 801705e:	b25b      	sxtb	r3, r3
 8017060:	2b00      	cmp	r3, #0
 8017062:	da18      	bge.n	8017096 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017064:	697b      	ldr	r3, [r7, #20]
 8017066:	7858      	ldrb	r0, [r3, #1]
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	6a1a      	ldr	r2, [r3, #32]
 8017072:	2301      	movs	r3, #1
 8017074:	f7fd fa04 	bl	8014480 <disk_write>
 8017078:	4603      	mov	r3, r0
 801707a:	2b00      	cmp	r3, #0
 801707c:	d004      	beq.n	8017088 <f_read+0x1da>
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	2201      	movs	r2, #1
 8017082:	755a      	strb	r2, [r3, #21]
 8017084:	2301      	movs	r3, #1
 8017086:	e04d      	b.n	8017124 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	7d1b      	ldrb	r3, [r3, #20]
 801708c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017090:	b2da      	uxtb	r2, r3
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	7858      	ldrb	r0, [r3, #1]
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80170a0:	2301      	movs	r3, #1
 80170a2:	69ba      	ldr	r2, [r7, #24]
 80170a4:	f7fd f9cc 	bl	8014440 <disk_read>
 80170a8:	4603      	mov	r3, r0
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d004      	beq.n	80170b8 <f_read+0x20a>
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	2201      	movs	r2, #1
 80170b2:	755a      	strb	r2, [r3, #21]
 80170b4:	2301      	movs	r3, #1
 80170b6:	e035      	b.n	8017124 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	69ba      	ldr	r2, [r7, #24]
 80170bc:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	699b      	ldr	r3, [r3, #24]
 80170c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80170c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80170ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80170cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	429a      	cmp	r2, r3
 80170d2:	d901      	bls.n	80170d8 <f_read+0x22a>
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	699b      	ldr	r3, [r3, #24]
 80170e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80170e6:	4413      	add	r3, r2
 80170e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80170ea:	4619      	mov	r1, r3
 80170ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80170ee:	f7fd fa87 	bl	8014600 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80170f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f6:	4413      	add	r3, r2
 80170f8:	627b      	str	r3, [r7, #36]	; 0x24
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	699a      	ldr	r2, [r3, #24]
 80170fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017100:	441a      	add	r2, r3
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	619a      	str	r2, [r3, #24]
 8017106:	683b      	ldr	r3, [r7, #0]
 8017108:	681a      	ldr	r2, [r3, #0]
 801710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801710c:	441a      	add	r2, r3
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	601a      	str	r2, [r3, #0]
 8017112:	687a      	ldr	r2, [r7, #4]
 8017114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017116:	1ad3      	subs	r3, r2, r3
 8017118:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	2b00      	cmp	r3, #0
 801711e:	f47f af01 	bne.w	8016f24 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8017122:	2300      	movs	r3, #0
}
 8017124:	4618      	mov	r0, r3
 8017126:	3738      	adds	r7, #56	; 0x38
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}

0801712c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b08c      	sub	sp, #48	; 0x30
 8017130:	af00      	add	r7, sp, #0
 8017132:	60f8      	str	r0, [r7, #12]
 8017134:	60b9      	str	r1, [r7, #8]
 8017136:	607a      	str	r2, [r7, #4]
 8017138:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801713a:	68bb      	ldr	r3, [r7, #8]
 801713c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	2200      	movs	r2, #0
 8017142:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	f107 0210 	add.w	r2, r7, #16
 801714a:	4611      	mov	r1, r2
 801714c:	4618      	mov	r0, r3
 801714e:	f7ff fb7b 	bl	8016848 <validate>
 8017152:	4603      	mov	r3, r0
 8017154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801715c:	2b00      	cmp	r3, #0
 801715e:	d107      	bne.n	8017170 <f_write+0x44>
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	7d5b      	ldrb	r3, [r3, #21]
 8017164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017168:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801716c:	2b00      	cmp	r3, #0
 801716e:	d002      	beq.n	8017176 <f_write+0x4a>
 8017170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017174:	e14b      	b.n	801740e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	7d1b      	ldrb	r3, [r3, #20]
 801717a:	f003 0302 	and.w	r3, r3, #2
 801717e:	2b00      	cmp	r3, #0
 8017180:	d101      	bne.n	8017186 <f_write+0x5a>
 8017182:	2307      	movs	r3, #7
 8017184:	e143      	b.n	801740e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	699a      	ldr	r2, [r3, #24]
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	441a      	add	r2, r3
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	699b      	ldr	r3, [r3, #24]
 8017192:	429a      	cmp	r2, r3
 8017194:	f080 812d 	bcs.w	80173f2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	699b      	ldr	r3, [r3, #24]
 801719c:	43db      	mvns	r3, r3
 801719e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80171a0:	e127      	b.n	80173f2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	699b      	ldr	r3, [r3, #24]
 80171a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	f040 80e3 	bne.w	8017376 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	699b      	ldr	r3, [r3, #24]
 80171b4:	0a5b      	lsrs	r3, r3, #9
 80171b6:	693a      	ldr	r2, [r7, #16]
 80171b8:	8952      	ldrh	r2, [r2, #10]
 80171ba:	3a01      	subs	r2, #1
 80171bc:	4013      	ands	r3, r2
 80171be:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80171c0:	69bb      	ldr	r3, [r7, #24]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d143      	bne.n	801724e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	699b      	ldr	r3, [r3, #24]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d10c      	bne.n	80171e8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	689b      	ldr	r3, [r3, #8]
 80171d2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80171d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d11a      	bne.n	8017210 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	2100      	movs	r1, #0
 80171de:	4618      	mov	r0, r3
 80171e0:	f7fd feee 	bl	8014fc0 <create_chain>
 80171e4:	62b8      	str	r0, [r7, #40]	; 0x28
 80171e6:	e013      	b.n	8017210 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d007      	beq.n	8017200 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	699b      	ldr	r3, [r3, #24]
 80171f4:	4619      	mov	r1, r3
 80171f6:	68f8      	ldr	r0, [r7, #12]
 80171f8:	f7fd ff7a 	bl	80150f0 <clmt_clust>
 80171fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80171fe:	e007      	b.n	8017210 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017200:	68fa      	ldr	r2, [r7, #12]
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	69db      	ldr	r3, [r3, #28]
 8017206:	4619      	mov	r1, r3
 8017208:	4610      	mov	r0, r2
 801720a:	f7fd fed9 	bl	8014fc0 <create_chain>
 801720e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017212:	2b00      	cmp	r3, #0
 8017214:	f000 80f2 	beq.w	80173fc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801721a:	2b01      	cmp	r3, #1
 801721c:	d104      	bne.n	8017228 <f_write+0xfc>
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	2202      	movs	r2, #2
 8017222:	755a      	strb	r2, [r3, #21]
 8017224:	2302      	movs	r3, #2
 8017226:	e0f2      	b.n	801740e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801722a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801722e:	d104      	bne.n	801723a <f_write+0x10e>
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	2201      	movs	r2, #1
 8017234:	755a      	strb	r2, [r3, #21]
 8017236:	2301      	movs	r3, #1
 8017238:	e0e9      	b.n	801740e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801723e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	689b      	ldr	r3, [r3, #8]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d102      	bne.n	801724e <f_write+0x122>
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801724c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	7d1b      	ldrb	r3, [r3, #20]
 8017252:	b25b      	sxtb	r3, r3
 8017254:	2b00      	cmp	r3, #0
 8017256:	da18      	bge.n	801728a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017258:	693b      	ldr	r3, [r7, #16]
 801725a:	7858      	ldrb	r0, [r3, #1]
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	6a1a      	ldr	r2, [r3, #32]
 8017266:	2301      	movs	r3, #1
 8017268:	f7fd f90a 	bl	8014480 <disk_write>
 801726c:	4603      	mov	r3, r0
 801726e:	2b00      	cmp	r3, #0
 8017270:	d004      	beq.n	801727c <f_write+0x150>
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	2201      	movs	r2, #1
 8017276:	755a      	strb	r2, [r3, #21]
 8017278:	2301      	movs	r3, #1
 801727a:	e0c8      	b.n	801740e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	7d1b      	ldrb	r3, [r3, #20]
 8017280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017284:	b2da      	uxtb	r2, r3
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801728a:	693a      	ldr	r2, [r7, #16]
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	69db      	ldr	r3, [r3, #28]
 8017290:	4619      	mov	r1, r3
 8017292:	4610      	mov	r0, r2
 8017294:	f7fd fc7e 	bl	8014b94 <clust2sect>
 8017298:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801729a:	697b      	ldr	r3, [r7, #20]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d104      	bne.n	80172aa <f_write+0x17e>
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	2202      	movs	r2, #2
 80172a4:	755a      	strb	r2, [r3, #21]
 80172a6:	2302      	movs	r3, #2
 80172a8:	e0b1      	b.n	801740e <f_write+0x2e2>
			sect += csect;
 80172aa:	697a      	ldr	r2, [r7, #20]
 80172ac:	69bb      	ldr	r3, [r7, #24]
 80172ae:	4413      	add	r3, r2
 80172b0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	0a5b      	lsrs	r3, r3, #9
 80172b6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80172b8:	6a3b      	ldr	r3, [r7, #32]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d03c      	beq.n	8017338 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80172be:	69ba      	ldr	r2, [r7, #24]
 80172c0:	6a3b      	ldr	r3, [r7, #32]
 80172c2:	4413      	add	r3, r2
 80172c4:	693a      	ldr	r2, [r7, #16]
 80172c6:	8952      	ldrh	r2, [r2, #10]
 80172c8:	4293      	cmp	r3, r2
 80172ca:	d905      	bls.n	80172d8 <f_write+0x1ac>
					cc = fs->csize - csect;
 80172cc:	693b      	ldr	r3, [r7, #16]
 80172ce:	895b      	ldrh	r3, [r3, #10]
 80172d0:	461a      	mov	r2, r3
 80172d2:	69bb      	ldr	r3, [r7, #24]
 80172d4:	1ad3      	subs	r3, r2, r3
 80172d6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80172d8:	693b      	ldr	r3, [r7, #16]
 80172da:	7858      	ldrb	r0, [r3, #1]
 80172dc:	6a3b      	ldr	r3, [r7, #32]
 80172de:	697a      	ldr	r2, [r7, #20]
 80172e0:	69f9      	ldr	r1, [r7, #28]
 80172e2:	f7fd f8cd 	bl	8014480 <disk_write>
 80172e6:	4603      	mov	r3, r0
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d004      	beq.n	80172f6 <f_write+0x1ca>
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	2201      	movs	r2, #1
 80172f0:	755a      	strb	r2, [r3, #21]
 80172f2:	2301      	movs	r3, #1
 80172f4:	e08b      	b.n	801740e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	6a1a      	ldr	r2, [r3, #32]
 80172fa:	697b      	ldr	r3, [r7, #20]
 80172fc:	1ad3      	subs	r3, r2, r3
 80172fe:	6a3a      	ldr	r2, [r7, #32]
 8017300:	429a      	cmp	r2, r3
 8017302:	d915      	bls.n	8017330 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	6a1a      	ldr	r2, [r3, #32]
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	1ad3      	subs	r3, r2, r3
 8017312:	025b      	lsls	r3, r3, #9
 8017314:	69fa      	ldr	r2, [r7, #28]
 8017316:	4413      	add	r3, r2
 8017318:	f44f 7200 	mov.w	r2, #512	; 0x200
 801731c:	4619      	mov	r1, r3
 801731e:	f7fd f96f 	bl	8014600 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	7d1b      	ldrb	r3, [r3, #20]
 8017326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801732a:	b2da      	uxtb	r2, r3
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017330:	6a3b      	ldr	r3, [r7, #32]
 8017332:	025b      	lsls	r3, r3, #9
 8017334:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017336:	e03f      	b.n	80173b8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	6a1b      	ldr	r3, [r3, #32]
 801733c:	697a      	ldr	r2, [r7, #20]
 801733e:	429a      	cmp	r2, r3
 8017340:	d016      	beq.n	8017370 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	699a      	ldr	r2, [r3, #24]
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801734a:	429a      	cmp	r2, r3
 801734c:	d210      	bcs.n	8017370 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801734e:	693b      	ldr	r3, [r7, #16]
 8017350:	7858      	ldrb	r0, [r3, #1]
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017358:	2301      	movs	r3, #1
 801735a:	697a      	ldr	r2, [r7, #20]
 801735c:	f7fd f870 	bl	8014440 <disk_read>
 8017360:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017362:	2b00      	cmp	r3, #0
 8017364:	d004      	beq.n	8017370 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	2201      	movs	r2, #1
 801736a:	755a      	strb	r2, [r3, #21]
 801736c:	2301      	movs	r3, #1
 801736e:	e04e      	b.n	801740e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	697a      	ldr	r2, [r7, #20]
 8017374:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	699b      	ldr	r3, [r3, #24]
 801737a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801737e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017382:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	429a      	cmp	r2, r3
 801738a:	d901      	bls.n	8017390 <f_write+0x264>
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	699b      	ldr	r3, [r3, #24]
 801739a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801739e:	4413      	add	r3, r2
 80173a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173a2:	69f9      	ldr	r1, [r7, #28]
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7fd f92b 	bl	8014600 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	7d1b      	ldrb	r3, [r3, #20]
 80173ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80173b2:	b2da      	uxtb	r2, r3
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80173b8:	69fa      	ldr	r2, [r7, #28]
 80173ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173bc:	4413      	add	r3, r2
 80173be:	61fb      	str	r3, [r7, #28]
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	699a      	ldr	r2, [r3, #24]
 80173c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c6:	441a      	add	r2, r3
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	619a      	str	r2, [r3, #24]
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	68da      	ldr	r2, [r3, #12]
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	699b      	ldr	r3, [r3, #24]
 80173d4:	429a      	cmp	r2, r3
 80173d6:	bf38      	it	cc
 80173d8:	461a      	movcc	r2, r3
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	60da      	str	r2, [r3, #12]
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	681a      	ldr	r2, [r3, #0]
 80173e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e4:	441a      	add	r2, r3
 80173e6:	683b      	ldr	r3, [r7, #0]
 80173e8:	601a      	str	r2, [r3, #0]
 80173ea:	687a      	ldr	r2, [r7, #4]
 80173ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ee:	1ad3      	subs	r3, r2, r3
 80173f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	f47f aed4 	bne.w	80171a2 <f_write+0x76>
 80173fa:	e000      	b.n	80173fe <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80173fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	7d1b      	ldrb	r3, [r3, #20]
 8017402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017406:	b2da      	uxtb	r2, r3
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801740c:	2300      	movs	r3, #0
}
 801740e:	4618      	mov	r0, r3
 8017410:	3730      	adds	r7, #48	; 0x30
 8017412:	46bd      	mov	sp, r7
 8017414:	bd80      	pop	{r7, pc}

08017416 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017416:	b580      	push	{r7, lr}
 8017418:	b086      	sub	sp, #24
 801741a:	af00      	add	r7, sp, #0
 801741c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	f107 0208 	add.w	r2, r7, #8
 8017424:	4611      	mov	r1, r2
 8017426:	4618      	mov	r0, r3
 8017428:	f7ff fa0e 	bl	8016848 <validate>
 801742c:	4603      	mov	r3, r0
 801742e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017430:	7dfb      	ldrb	r3, [r7, #23]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d168      	bne.n	8017508 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	7d1b      	ldrb	r3, [r3, #20]
 801743a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801743e:	2b00      	cmp	r3, #0
 8017440:	d062      	beq.n	8017508 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	7d1b      	ldrb	r3, [r3, #20]
 8017446:	b25b      	sxtb	r3, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	da15      	bge.n	8017478 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801744c:	68bb      	ldr	r3, [r7, #8]
 801744e:	7858      	ldrb	r0, [r3, #1]
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	6a1a      	ldr	r2, [r3, #32]
 801745a:	2301      	movs	r3, #1
 801745c:	f7fd f810 	bl	8014480 <disk_write>
 8017460:	4603      	mov	r3, r0
 8017462:	2b00      	cmp	r3, #0
 8017464:	d001      	beq.n	801746a <f_sync+0x54>
 8017466:	2301      	movs	r3, #1
 8017468:	e04f      	b.n	801750a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	7d1b      	ldrb	r3, [r3, #20]
 801746e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017472:	b2da      	uxtb	r2, r3
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017478:	f7f8 fa60 	bl	800f93c <get_fattime>
 801747c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801747e:	68ba      	ldr	r2, [r7, #8]
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017484:	4619      	mov	r1, r3
 8017486:	4610      	mov	r0, r2
 8017488:	f7fd fae8 	bl	8014a5c <move_window>
 801748c:	4603      	mov	r3, r0
 801748e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017490:	7dfb      	ldrb	r3, [r7, #23]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d138      	bne.n	8017508 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801749a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	330b      	adds	r3, #11
 80174a0:	781a      	ldrb	r2, [r3, #0]
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	330b      	adds	r3, #11
 80174a6:	f042 0220 	orr.w	r2, r2, #32
 80174aa:	b2d2      	uxtb	r2, r2
 80174ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	6818      	ldr	r0, [r3, #0]
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	689b      	ldr	r3, [r3, #8]
 80174b6:	461a      	mov	r2, r3
 80174b8:	68f9      	ldr	r1, [r7, #12]
 80174ba:	f7fd fff3 	bl	80154a4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	f103 021c 	add.w	r2, r3, #28
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	68db      	ldr	r3, [r3, #12]
 80174c8:	4619      	mov	r1, r3
 80174ca:	4610      	mov	r0, r2
 80174cc:	f7fd f86c 	bl	80145a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	3316      	adds	r3, #22
 80174d4:	6939      	ldr	r1, [r7, #16]
 80174d6:	4618      	mov	r0, r3
 80174d8:	f7fd f866 	bl	80145a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	3312      	adds	r3, #18
 80174e0:	2100      	movs	r1, #0
 80174e2:	4618      	mov	r0, r3
 80174e4:	f7fd f845 	bl	8014572 <st_word>
					fs->wflag = 1;
 80174e8:	68bb      	ldr	r3, [r7, #8]
 80174ea:	2201      	movs	r2, #1
 80174ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	4618      	mov	r0, r3
 80174f2:	f7fd fae1 	bl	8014ab8 <sync_fs>
 80174f6:	4603      	mov	r3, r0
 80174f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	7d1b      	ldrb	r3, [r3, #20]
 80174fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017502:	b2da      	uxtb	r2, r3
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017508:	7dfb      	ldrb	r3, [r7, #23]
}
 801750a:	4618      	mov	r0, r3
 801750c:	3718      	adds	r7, #24
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}

08017512 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017512:	b580      	push	{r7, lr}
 8017514:	b084      	sub	sp, #16
 8017516:	af00      	add	r7, sp, #0
 8017518:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801751a:	6878      	ldr	r0, [r7, #4]
 801751c:	f7ff ff7b 	bl	8017416 <f_sync>
 8017520:	4603      	mov	r3, r0
 8017522:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017524:	7bfb      	ldrb	r3, [r7, #15]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d118      	bne.n	801755c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	f107 0208 	add.w	r2, r7, #8
 8017530:	4611      	mov	r1, r2
 8017532:	4618      	mov	r0, r3
 8017534:	f7ff f988 	bl	8016848 <validate>
 8017538:	4603      	mov	r3, r0
 801753a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801753c:	7bfb      	ldrb	r3, [r7, #15]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d10c      	bne.n	801755c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	691b      	ldr	r3, [r3, #16]
 8017546:	4618      	mov	r0, r3
 8017548:	f7fd f9e4 	bl	8014914 <dec_lock>
 801754c:	4603      	mov	r3, r0
 801754e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8017550:	7bfb      	ldrb	r3, [r7, #15]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d102      	bne.n	801755c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	2200      	movs	r2, #0
 801755a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801755c:	7bfb      	ldrb	r3, [r7, #15]
}
 801755e:	4618      	mov	r0, r3
 8017560:	3710      	adds	r7, #16
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}
	...

08017568 <f_setlabel>:
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Pointer to the volume label to set */
)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b09a      	sub	sp, #104	; 0x68
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
	WCHAR w;
	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";


	/* Get logical drive */
	res = find_volume(&label, &fs, FA_WRITE);
 8017570:	f107 0120 	add.w	r1, r7, #32
 8017574:	1d3b      	adds	r3, r7, #4
 8017576:	2202      	movs	r2, #2
 8017578:	4618      	mov	r0, r3
 801757a:	f7fe ff19 	bl	80163b0 <find_volume>
 801757e:	4603      	mov	r3, r0
 8017580:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if (res != FR_OK) LEAVE_FF(fs, res);
 8017584:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017588:	2b00      	cmp	r3, #0
 801758a:	d002      	beq.n	8017592 <f_setlabel+0x2a>
 801758c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017590:	e12d      	b.n	80177ee <f_setlabel+0x286>
	dj.obj.fs = fs;
 8017592:	6a3b      	ldr	r3, [r7, #32]
 8017594:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get length of given volume label */
	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
 8017596:	2300      	movs	r3, #0
 8017598:	667b      	str	r3, [r7, #100]	; 0x64
 801759a:	e002      	b.n	80175a2 <f_setlabel+0x3a>
 801759c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801759e:	3301      	adds	r3, #1
 80175a0:	667b      	str	r3, [r7, #100]	; 0x64
 80175a2:	687a      	ldr	r2, [r7, #4]
 80175a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80175a6:	4413      	add	r3, r2
 80175a8:	781b      	ldrb	r3, [r3, #0]
 80175aa:	2b1f      	cmp	r3, #31
 80175ac:	d8f6      	bhi.n	801759c <f_setlabel+0x34>
		}
		slen = j;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
 80175ae:	e002      	b.n	80175b6 <f_setlabel+0x4e>
 80175b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80175b2:	3b01      	subs	r3, #1
 80175b4:	667b      	str	r3, [r7, #100]	; 0x64
 80175b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d006      	beq.n	80175ca <f_setlabel+0x62>
 80175bc:	687a      	ldr	r2, [r7, #4]
 80175be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80175c0:	3b01      	subs	r3, #1
 80175c2:	4413      	add	r3, r2
 80175c4:	781b      	ldrb	r3, [r3, #0]
 80175c6:	2b20      	cmp	r3, #32
 80175c8:	d0f2      	beq.n	80175b0 <f_setlabel+0x48>
		if (slen) {		/* Is there a volume label to be set? */
 80175ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	f000 80a5 	beq.w	801771c <f_setlabel+0x1b4>
			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
 80175d2:	2300      	movs	r3, #0
 80175d4:	723b      	strb	r3, [r7, #8]
 80175d6:	2300      	movs	r3, #0
 80175d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80175da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80175dc:	65fb      	str	r3, [r7, #92]	; 0x5c
			do {
#if _LFN_UNICODE
				w = ff_convert(ff_wtoupper(label[i++]), 0);
#else
				w = (BYTE)label[i++];
 80175de:	687a      	ldr	r2, [r7, #4]
 80175e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80175e2:	1c59      	adds	r1, r3, #1
 80175e4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80175e6:	4413      	add	r3, r2
 80175e8:	781b      	ldrb	r3, [r3, #0]
 80175ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				if (IsDBCS1(w)) {
 80175ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80175f2:	b2db      	uxtb	r3, r3
 80175f4:	2b80      	cmp	r3, #128	; 0x80
 80175f6:	d936      	bls.n	8017666 <f_setlabel+0xfe>
 80175f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80175fc:	b2db      	uxtb	r3, r3
 80175fe:	2bff      	cmp	r3, #255	; 0xff
 8017600:	d031      	beq.n	8017666 <f_setlabel+0xfe>
					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
 8017602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017604:	2b09      	cmp	r3, #9
 8017606:	d82b      	bhi.n	8017660 <f_setlabel+0xf8>
 8017608:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801760a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801760c:	429a      	cmp	r2, r3
 801760e:	d227      	bcs.n	8017660 <f_setlabel+0xf8>
 8017610:	687a      	ldr	r2, [r7, #4]
 8017612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017614:	4413      	add	r3, r2
 8017616:	781b      	ldrb	r3, [r3, #0]
 8017618:	2b3f      	cmp	r3, #63	; 0x3f
 801761a:	d905      	bls.n	8017628 <f_setlabel+0xc0>
 801761c:	687a      	ldr	r2, [r7, #4]
 801761e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017620:	4413      	add	r3, r2
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	2b7e      	cmp	r3, #126	; 0x7e
 8017626:	d90c      	bls.n	8017642 <f_setlabel+0xda>
 8017628:	687a      	ldr	r2, [r7, #4]
 801762a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801762c:	4413      	add	r3, r2
 801762e:	781b      	ldrb	r3, [r3, #0]
 8017630:	b25b      	sxtb	r3, r3
 8017632:	2b00      	cmp	r3, #0
 8017634:	da14      	bge.n	8017660 <f_setlabel+0xf8>
 8017636:	687a      	ldr	r2, [r7, #4]
 8017638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801763a:	4413      	add	r3, r2
 801763c:	781b      	ldrb	r3, [r3, #0]
 801763e:	2bff      	cmp	r3, #255	; 0xff
 8017640:	d00e      	beq.n	8017660 <f_setlabel+0xf8>
 8017642:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8017646:	021b      	lsls	r3, r3, #8
 8017648:	b21a      	sxth	r2, r3
 801764a:	6879      	ldr	r1, [r7, #4]
 801764c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801764e:	1c58      	adds	r0, r3, #1
 8017650:	65f8      	str	r0, [r7, #92]	; 0x5c
 8017652:	440b      	add	r3, r1
 8017654:	781b      	ldrb	r3, [r3, #0]
 8017656:	b21b      	sxth	r3, r3
 8017658:	4313      	orrs	r3, r2
 801765a:	b21b      	sxth	r3, r3
 801765c:	b29b      	uxth	r3, r3
 801765e:	e000      	b.n	8017662 <f_setlabel+0xfa>
 8017660:	2300      	movs	r3, #0
 8017662:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				}
#if _USE_LFN != 0
				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
 8017666:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801766a:	2101      	movs	r1, #1
 801766c:	4618      	mov	r0, r3
 801766e:	f000 f921 	bl	80178b4 <ff_convert>
 8017672:	4603      	mov	r3, r0
 8017674:	4618      	mov	r0, r3
 8017676:	f000 f97b 	bl	8017970 <ff_wtoupper>
 801767a:	4603      	mov	r3, r0
 801767c:	2100      	movs	r1, #0
 801767e:	4618      	mov	r0, r3
 8017680:	f000 f918 	bl	80178b4 <ff_convert>
 8017684:	4603      	mov	r3, r0
 8017686:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
#else
				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
#endif
				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 801768a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801768e:	2b00      	cmp	r3, #0
 8017690:	d012      	beq.n	80176b8 <f_setlabel+0x150>
 8017692:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8017696:	4619      	mov	r1, r3
 8017698:	4857      	ldr	r0, [pc, #348]	; (80177f8 <f_setlabel+0x290>)
 801769a:	f7fd f814 	bl	80146c6 <chk_chr>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d109      	bne.n	80176b8 <f_setlabel+0x150>
 80176a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80176a8:	2bff      	cmp	r3, #255	; 0xff
 80176aa:	d901      	bls.n	80176b0 <f_setlabel+0x148>
 80176ac:	220a      	movs	r2, #10
 80176ae:	e000      	b.n	80176b2 <f_setlabel+0x14a>
 80176b0:	220b      	movs	r2, #11
 80176b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80176b4:	429a      	cmp	r2, r3
 80176b6:	d801      	bhi.n	80176bc <f_setlabel+0x154>
					LEAVE_FF(fs, FR_INVALID_NAME);
 80176b8:	2306      	movs	r3, #6
 80176ba:	e098      	b.n	80177ee <f_setlabel+0x286>
				}
				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
 80176bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80176c0:	2bff      	cmp	r3, #255	; 0xff
 80176c2:	d90b      	bls.n	80176dc <f_setlabel+0x174>
 80176c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80176c8:	0a1b      	lsrs	r3, r3, #8
 80176ca:	b299      	uxth	r1, r3
 80176cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80176ce:	1c5a      	adds	r2, r3, #1
 80176d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80176d2:	b2ca      	uxtb	r2, r1
 80176d4:	3368      	adds	r3, #104	; 0x68
 80176d6:	443b      	add	r3, r7
 80176d8:	f803 2c60 	strb.w	r2, [r3, #-96]
				dirvn[j++] = (BYTE)w;
 80176dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80176de:	1c5a      	adds	r2, r3, #1
 80176e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80176e2:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80176e6:	b2d2      	uxtb	r2, r2
 80176e8:	3368      	adds	r3, #104	; 0x68
 80176ea:	443b      	add	r3, r7
 80176ec:	f803 2c60 	strb.w	r2, [r3, #-96]
			} while (i < slen);
 80176f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80176f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80176f4:	429a      	cmp	r2, r3
 80176f6:	f4ff af72 	bcc.w	80175de <f_setlabel+0x76>
			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
 80176fa:	e007      	b.n	801770c <f_setlabel+0x1a4>
 80176fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80176fe:	1c5a      	adds	r2, r3, #1
 8017700:	65ba      	str	r2, [r7, #88]	; 0x58
 8017702:	3368      	adds	r3, #104	; 0x68
 8017704:	443b      	add	r3, r7
 8017706:	2220      	movs	r2, #32
 8017708:	f803 2c60 	strb.w	r2, [r3, #-96]
 801770c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801770e:	2b0a      	cmp	r3, #10
 8017710:	d9f4      	bls.n	80176fc <f_setlabel+0x194>
			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 8017712:	7a3b      	ldrb	r3, [r7, #8]
 8017714:	2be5      	cmp	r3, #229	; 0xe5
 8017716:	d101      	bne.n	801771c <f_setlabel+0x1b4>
 8017718:	2306      	movs	r3, #6
 801771a:	e068      	b.n	80177ee <f_setlabel+0x286>
		}
	}

	/* Set volume label */
	dj.obj.sclust = 0;		/* Open root directory */
 801771c:	2300      	movs	r3, #0
 801771e:	62fb      	str	r3, [r7, #44]	; 0x2c
	res = dir_sdi(&dj, 0);
 8017720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017724:	2100      	movs	r1, #0
 8017726:	4618      	mov	r0, r3
 8017728:	f7fd fd16 	bl	8015158 <dir_sdi>
 801772c:	4603      	mov	r3, r0
 801772e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if (res == FR_OK) {
 8017732:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017736:	2b00      	cmp	r3, #0
 8017738:	d157      	bne.n	80177ea <f_setlabel+0x282>
		res = dir_read(&dj, 1);	/* Get volume label entry */
 801773a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801773e:	2101      	movs	r1, #1
 8017740:	4618      	mov	r0, r3
 8017742:	f7fe f8d0 	bl	80158e6 <dir_read>
 8017746:	4603      	mov	r3, r0
 8017748:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		if (res == FR_OK) {
 801774c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017750:	2b00      	cmp	r3, #0
 8017752:	d118      	bne.n	8017786 <f_setlabel+0x21e>
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
			} else {
				if (slen) {
 8017754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017756:	2b00      	cmp	r3, #0
 8017758:	d007      	beq.n	801776a <f_setlabel+0x202>
					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
 801775a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801775c:	f107 0108 	add.w	r1, r7, #8
 8017760:	220b      	movs	r2, #11
 8017762:	4618      	mov	r0, r3
 8017764:	f7fc ff4c 	bl	8014600 <mem_cpy>
 8017768:	e002      	b.n	8017770 <f_setlabel+0x208>
				} else {
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 801776a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801776c:	22e5      	movs	r2, #229	; 0xe5
 801776e:	701a      	strb	r2, [r3, #0]
				}
			}
			fs->wflag = 1;
 8017770:	6a3b      	ldr	r3, [r7, #32]
 8017772:	2201      	movs	r2, #1
 8017774:	70da      	strb	r2, [r3, #3]
			res = sync_fs(fs);
 8017776:	6a3b      	ldr	r3, [r7, #32]
 8017778:	4618      	mov	r0, r3
 801777a:	f7fd f99d 	bl	8014ab8 <sync_fs>
 801777e:	4603      	mov	r3, r0
 8017780:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8017784:	e031      	b.n	80177ea <f_setlabel+0x282>
		} else {			/* No volume label entry is found or error */
			if (res == FR_NO_FILE) {
 8017786:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801778a:	2b04      	cmp	r3, #4
 801778c:	d12d      	bne.n	80177ea <f_setlabel+0x282>
				res = FR_OK;
 801778e:	2300      	movs	r3, #0
 8017790:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				if (slen) {	/* Create a volume label entry */
 8017794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017796:	2b00      	cmp	r3, #0
 8017798:	d027      	beq.n	80177ea <f_setlabel+0x282>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 801779a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801779e:	2101      	movs	r1, #1
 80177a0:	4618      	mov	r0, r3
 80177a2:	f7fd fe19 	bl	80153d8 <dir_alloc>
 80177a6:	4603      	mov	r3, r0
 80177a8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
					if (res == FR_OK) {
 80177ac:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d11a      	bne.n	80177ea <f_setlabel+0x282>
						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
 80177b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177b6:	2220      	movs	r2, #32
 80177b8:	2100      	movs	r1, #0
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7fc ff41 	bl	8014642 <mem_set>
						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
						} else {
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 80177c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177c2:	330b      	adds	r3, #11
 80177c4:	2208      	movs	r2, #8
 80177c6:	701a      	strb	r2, [r3, #0]
							mem_cpy(dj.dir, dirvn, 11);
 80177c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177ca:	f107 0108 	add.w	r1, r7, #8
 80177ce:	220b      	movs	r2, #11
 80177d0:	4618      	mov	r0, r3
 80177d2:	f7fc ff15 	bl	8014600 <mem_cpy>
						}
						fs->wflag = 1;
 80177d6:	6a3b      	ldr	r3, [r7, #32]
 80177d8:	2201      	movs	r2, #1
 80177da:	70da      	strb	r2, [r3, #3]
						res = sync_fs(fs);
 80177dc:	6a3b      	ldr	r3, [r7, #32]
 80177de:	4618      	mov	r0, r3
 80177e0:	f7fd f96a 	bl	8014ab8 <sync_fs>
 80177e4:	4603      	mov	r3, r0
 80177e6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80177ea:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
}
 80177ee:	4618      	mov	r0, r3
 80177f0:	3768      	adds	r7, #104	; 0x68
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}
 80177f6:	bf00      	nop
 80177f8:	0801bc2c 	.word	0x0801bc2c

080177fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80177fc:	b480      	push	{r7}
 80177fe:	b087      	sub	sp, #28
 8017800:	af00      	add	r7, sp, #0
 8017802:	60f8      	str	r0, [r7, #12]
 8017804:	60b9      	str	r1, [r7, #8]
 8017806:	4613      	mov	r3, r2
 8017808:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801780a:	2301      	movs	r3, #1
 801780c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801780e:	2300      	movs	r3, #0
 8017810:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017812:	4b1f      	ldr	r3, [pc, #124]	; (8017890 <FATFS_LinkDriverEx+0x94>)
 8017814:	7a5b      	ldrb	r3, [r3, #9]
 8017816:	b2db      	uxtb	r3, r3
 8017818:	2b00      	cmp	r3, #0
 801781a:	d131      	bne.n	8017880 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801781c:	4b1c      	ldr	r3, [pc, #112]	; (8017890 <FATFS_LinkDriverEx+0x94>)
 801781e:	7a5b      	ldrb	r3, [r3, #9]
 8017820:	b2db      	uxtb	r3, r3
 8017822:	461a      	mov	r2, r3
 8017824:	4b1a      	ldr	r3, [pc, #104]	; (8017890 <FATFS_LinkDriverEx+0x94>)
 8017826:	2100      	movs	r1, #0
 8017828:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801782a:	4b19      	ldr	r3, [pc, #100]	; (8017890 <FATFS_LinkDriverEx+0x94>)
 801782c:	7a5b      	ldrb	r3, [r3, #9]
 801782e:	b2db      	uxtb	r3, r3
 8017830:	4a17      	ldr	r2, [pc, #92]	; (8017890 <FATFS_LinkDriverEx+0x94>)
 8017832:	009b      	lsls	r3, r3, #2
 8017834:	4413      	add	r3, r2
 8017836:	68fa      	ldr	r2, [r7, #12]
 8017838:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801783a:	4b15      	ldr	r3, [pc, #84]	; (8017890 <FATFS_LinkDriverEx+0x94>)
 801783c:	7a5b      	ldrb	r3, [r3, #9]
 801783e:	b2db      	uxtb	r3, r3
 8017840:	461a      	mov	r2, r3
 8017842:	4b13      	ldr	r3, [pc, #76]	; (8017890 <FATFS_LinkDriverEx+0x94>)
 8017844:	4413      	add	r3, r2
 8017846:	79fa      	ldrb	r2, [r7, #7]
 8017848:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801784a:	4b11      	ldr	r3, [pc, #68]	; (8017890 <FATFS_LinkDriverEx+0x94>)
 801784c:	7a5b      	ldrb	r3, [r3, #9]
 801784e:	b2db      	uxtb	r3, r3
 8017850:	1c5a      	adds	r2, r3, #1
 8017852:	b2d1      	uxtb	r1, r2
 8017854:	4a0e      	ldr	r2, [pc, #56]	; (8017890 <FATFS_LinkDriverEx+0x94>)
 8017856:	7251      	strb	r1, [r2, #9]
 8017858:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801785a:	7dbb      	ldrb	r3, [r7, #22]
 801785c:	3330      	adds	r3, #48	; 0x30
 801785e:	b2da      	uxtb	r2, r3
 8017860:	68bb      	ldr	r3, [r7, #8]
 8017862:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017864:	68bb      	ldr	r3, [r7, #8]
 8017866:	3301      	adds	r3, #1
 8017868:	223a      	movs	r2, #58	; 0x3a
 801786a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801786c:	68bb      	ldr	r3, [r7, #8]
 801786e:	3302      	adds	r3, #2
 8017870:	222f      	movs	r2, #47	; 0x2f
 8017872:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017874:	68bb      	ldr	r3, [r7, #8]
 8017876:	3303      	adds	r3, #3
 8017878:	2200      	movs	r2, #0
 801787a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801787c:	2300      	movs	r3, #0
 801787e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017880:	7dfb      	ldrb	r3, [r7, #23]
}
 8017882:	4618      	mov	r0, r3
 8017884:	371c      	adds	r7, #28
 8017886:	46bd      	mov	sp, r7
 8017888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801788c:	4770      	bx	lr
 801788e:	bf00      	nop
 8017890:	24000b88 	.word	0x24000b88

08017894 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b082      	sub	sp, #8
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
 801789c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801789e:	2200      	movs	r2, #0
 80178a0:	6839      	ldr	r1, [r7, #0]
 80178a2:	6878      	ldr	r0, [r7, #4]
 80178a4:	f7ff ffaa 	bl	80177fc <FATFS_LinkDriverEx>
 80178a8:	4603      	mov	r3, r0
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3708      	adds	r7, #8
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
	...

080178b4 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80178b4:	b480      	push	{r7}
 80178b6:	b089      	sub	sp, #36	; 0x24
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	4603      	mov	r3, r0
 80178bc:	6039      	str	r1, [r7, #0]
 80178be:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 80178c0:	88fb      	ldrh	r3, [r7, #6]
 80178c2:	2b7f      	cmp	r3, #127	; 0x7f
 80178c4:	d802      	bhi.n	80178cc <ff_convert+0x18>
		c = chr;
 80178c6:	88fb      	ldrh	r3, [r7, #6]
 80178c8:	837b      	strh	r3, [r7, #26]
 80178ca:	e046      	b.n	801795a <ff_convert+0xa6>
	} else {
		if (dir) {		/* OEM code to unicode */
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d005      	beq.n	80178de <ff_convert+0x2a>
			p = oem2uni;
 80178d2:	4b25      	ldr	r3, [pc, #148]	; (8017968 <ff_convert+0xb4>)
 80178d4:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 80178d6:	f245 5320 	movw	r3, #21792	; 0x5520
 80178da:	60bb      	str	r3, [r7, #8]
 80178dc:	e004      	b.n	80178e8 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 80178de:	4b23      	ldr	r3, [pc, #140]	; (801796c <ff_convert+0xb8>)
 80178e0:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 80178e2:	f245 5320 	movw	r3, #21792	; 0x5520
 80178e6:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 80178e8:	2300      	movs	r3, #0
 80178ea:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 80178ec:	2310      	movs	r3, #16
 80178ee:	613b      	str	r3, [r7, #16]
 80178f0:	e022      	b.n	8017938 <ff_convert+0x84>
			i = li + (hi - li) / 2;
 80178f2:	68ba      	ldr	r2, [r7, #8]
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	1ad3      	subs	r3, r2, r3
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	da00      	bge.n	80178fe <ff_convert+0x4a>
 80178fc:	3301      	adds	r3, #1
 80178fe:	105b      	asrs	r3, r3, #1
 8017900:	461a      	mov	r2, r3
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	4413      	add	r3, r2
 8017906:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 8017908:	697b      	ldr	r3, [r7, #20]
 801790a:	009b      	lsls	r3, r3, #2
 801790c:	69fa      	ldr	r2, [r7, #28]
 801790e:	4413      	add	r3, r2
 8017910:	881b      	ldrh	r3, [r3, #0]
 8017912:	88fa      	ldrh	r2, [r7, #6]
 8017914:	429a      	cmp	r2, r3
 8017916:	d013      	beq.n	8017940 <ff_convert+0x8c>
			if (chr > p[i * 2])
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	009b      	lsls	r3, r3, #2
 801791c:	69fa      	ldr	r2, [r7, #28]
 801791e:	4413      	add	r3, r2
 8017920:	881b      	ldrh	r3, [r3, #0]
 8017922:	88fa      	ldrh	r2, [r7, #6]
 8017924:	429a      	cmp	r2, r3
 8017926:	d902      	bls.n	801792e <ff_convert+0x7a>
				li = i;
 8017928:	697b      	ldr	r3, [r7, #20]
 801792a:	60fb      	str	r3, [r7, #12]
 801792c:	e001      	b.n	8017932 <ff_convert+0x7e>
			else
				hi = i;
 801792e:	697b      	ldr	r3, [r7, #20]
 8017930:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 8017932:	693b      	ldr	r3, [r7, #16]
 8017934:	3b01      	subs	r3, #1
 8017936:	613b      	str	r3, [r7, #16]
 8017938:	693b      	ldr	r3, [r7, #16]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d1d9      	bne.n	80178f2 <ff_convert+0x3e>
 801793e:	e000      	b.n	8017942 <ff_convert+0x8e>
			if (chr == p[i * 2]) break;
 8017940:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 8017942:	693b      	ldr	r3, [r7, #16]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d006      	beq.n	8017956 <ff_convert+0xa2>
 8017948:	697b      	ldr	r3, [r7, #20]
 801794a:	009b      	lsls	r3, r3, #2
 801794c:	3302      	adds	r3, #2
 801794e:	69fa      	ldr	r2, [r7, #28]
 8017950:	4413      	add	r3, r2
 8017952:	881b      	ldrh	r3, [r3, #0]
 8017954:	e000      	b.n	8017958 <ff_convert+0xa4>
 8017956:	2300      	movs	r3, #0
 8017958:	837b      	strh	r3, [r7, #26]
	}

	return c;
 801795a:	8b7b      	ldrh	r3, [r7, #26]
}
 801795c:	4618      	mov	r0, r3
 801795e:	3724      	adds	r7, #36	; 0x24
 8017960:	46bd      	mov	sp, r7
 8017962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017966:	4770      	bx	lr
 8017968:	080310c0 	.word	0x080310c0
 801796c:	0801bc3c 	.word	0x0801bc3c

08017970 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8017970:	b480      	push	{r7}
 8017972:	b087      	sub	sp, #28
 8017974:	af00      	add	r7, sp, #0
 8017976:	4603      	mov	r3, r0
 8017978:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801797a:	88fb      	ldrh	r3, [r7, #6]
 801797c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017980:	d201      	bcs.n	8017986 <ff_wtoupper+0x16>
 8017982:	4b3e      	ldr	r3, [pc, #248]	; (8017a7c <ff_wtoupper+0x10c>)
 8017984:	e000      	b.n	8017988 <ff_wtoupper+0x18>
 8017986:	4b3e      	ldr	r3, [pc, #248]	; (8017a80 <ff_wtoupper+0x110>)
 8017988:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801798a:	697b      	ldr	r3, [r7, #20]
 801798c:	1c9a      	adds	r2, r3, #2
 801798e:	617a      	str	r2, [r7, #20]
 8017990:	881b      	ldrh	r3, [r3, #0]
 8017992:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017994:	8a7b      	ldrh	r3, [r7, #18]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d068      	beq.n	8017a6c <ff_wtoupper+0xfc>
 801799a:	88fa      	ldrh	r2, [r7, #6]
 801799c:	8a7b      	ldrh	r3, [r7, #18]
 801799e:	429a      	cmp	r2, r3
 80179a0:	d364      	bcc.n	8017a6c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	1c9a      	adds	r2, r3, #2
 80179a6:	617a      	str	r2, [r7, #20]
 80179a8:	881b      	ldrh	r3, [r3, #0]
 80179aa:	823b      	strh	r3, [r7, #16]
 80179ac:	8a3b      	ldrh	r3, [r7, #16]
 80179ae:	0a1b      	lsrs	r3, r3, #8
 80179b0:	81fb      	strh	r3, [r7, #14]
 80179b2:	8a3b      	ldrh	r3, [r7, #16]
 80179b4:	b2db      	uxtb	r3, r3
 80179b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80179b8:	88fa      	ldrh	r2, [r7, #6]
 80179ba:	8a79      	ldrh	r1, [r7, #18]
 80179bc:	8a3b      	ldrh	r3, [r7, #16]
 80179be:	440b      	add	r3, r1
 80179c0:	429a      	cmp	r2, r3
 80179c2:	da49      	bge.n	8017a58 <ff_wtoupper+0xe8>
			switch (cmd) {
 80179c4:	89fb      	ldrh	r3, [r7, #14]
 80179c6:	2b08      	cmp	r3, #8
 80179c8:	d84f      	bhi.n	8017a6a <ff_wtoupper+0xfa>
 80179ca:	a201      	add	r2, pc, #4	; (adr r2, 80179d0 <ff_wtoupper+0x60>)
 80179cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179d0:	080179f5 	.word	0x080179f5
 80179d4:	08017a07 	.word	0x08017a07
 80179d8:	08017a1d 	.word	0x08017a1d
 80179dc:	08017a25 	.word	0x08017a25
 80179e0:	08017a2d 	.word	0x08017a2d
 80179e4:	08017a35 	.word	0x08017a35
 80179e8:	08017a3d 	.word	0x08017a3d
 80179ec:	08017a45 	.word	0x08017a45
 80179f0:	08017a4d 	.word	0x08017a4d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80179f4:	88fa      	ldrh	r2, [r7, #6]
 80179f6:	8a7b      	ldrh	r3, [r7, #18]
 80179f8:	1ad3      	subs	r3, r2, r3
 80179fa:	005b      	lsls	r3, r3, #1
 80179fc:	697a      	ldr	r2, [r7, #20]
 80179fe:	4413      	add	r3, r2
 8017a00:	881b      	ldrh	r3, [r3, #0]
 8017a02:	80fb      	strh	r3, [r7, #6]
 8017a04:	e027      	b.n	8017a56 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017a06:	88fa      	ldrh	r2, [r7, #6]
 8017a08:	8a7b      	ldrh	r3, [r7, #18]
 8017a0a:	1ad3      	subs	r3, r2, r3
 8017a0c:	b29b      	uxth	r3, r3
 8017a0e:	f003 0301 	and.w	r3, r3, #1
 8017a12:	b29b      	uxth	r3, r3
 8017a14:	88fa      	ldrh	r2, [r7, #6]
 8017a16:	1ad3      	subs	r3, r2, r3
 8017a18:	80fb      	strh	r3, [r7, #6]
 8017a1a:	e01c      	b.n	8017a56 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017a1c:	88fb      	ldrh	r3, [r7, #6]
 8017a1e:	3b10      	subs	r3, #16
 8017a20:	80fb      	strh	r3, [r7, #6]
 8017a22:	e018      	b.n	8017a56 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017a24:	88fb      	ldrh	r3, [r7, #6]
 8017a26:	3b20      	subs	r3, #32
 8017a28:	80fb      	strh	r3, [r7, #6]
 8017a2a:	e014      	b.n	8017a56 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017a2c:	88fb      	ldrh	r3, [r7, #6]
 8017a2e:	3b30      	subs	r3, #48	; 0x30
 8017a30:	80fb      	strh	r3, [r7, #6]
 8017a32:	e010      	b.n	8017a56 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8017a34:	88fb      	ldrh	r3, [r7, #6]
 8017a36:	3b1a      	subs	r3, #26
 8017a38:	80fb      	strh	r3, [r7, #6]
 8017a3a:	e00c      	b.n	8017a56 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8017a3c:	88fb      	ldrh	r3, [r7, #6]
 8017a3e:	3308      	adds	r3, #8
 8017a40:	80fb      	strh	r3, [r7, #6]
 8017a42:	e008      	b.n	8017a56 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8017a44:	88fb      	ldrh	r3, [r7, #6]
 8017a46:	3b50      	subs	r3, #80	; 0x50
 8017a48:	80fb      	strh	r3, [r7, #6]
 8017a4a:	e004      	b.n	8017a56 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8017a4c:	88fb      	ldrh	r3, [r7, #6]
 8017a4e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8017a52:	80fb      	strh	r3, [r7, #6]
 8017a54:	bf00      	nop
			}
			break;
 8017a56:	e008      	b.n	8017a6a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8017a58:	89fb      	ldrh	r3, [r7, #14]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d195      	bne.n	801798a <ff_wtoupper+0x1a>
 8017a5e:	8a3b      	ldrh	r3, [r7, #16]
 8017a60:	005b      	lsls	r3, r3, #1
 8017a62:	697a      	ldr	r2, [r7, #20]
 8017a64:	4413      	add	r3, r2
 8017a66:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8017a68:	e78f      	b.n	801798a <ff_wtoupper+0x1a>
			break;
 8017a6a:	bf00      	nop
	}

	return chr;
 8017a6c:	88fb      	ldrh	r3, [r7, #6]
}
 8017a6e:	4618      	mov	r0, r3
 8017a70:	371c      	adds	r7, #28
 8017a72:	46bd      	mov	sp, r7
 8017a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a78:	4770      	bx	lr
 8017a7a:	bf00      	nop
 8017a7c:	08046544 	.word	0x08046544
 8017a80:	08046738 	.word	0x08046738

08017a84 <FatFs_read_Check>:
UINT MyFile_Num;
BYTE ReadBuffer[100] = {0};
BYTE WriteBuffer[] = "STM32H7 SD test fatfs"; // 要写入的数据

void FatFs_read_Check(void) // 判断FatFs是否挂载成功
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b082      	sub	sp, #8
 8017a88:	af02      	add	r7, sp, #8
	//在外部 SD 卡挂载文件系统，文件系统挂载时会对 SD 卡初始化
	MyFile_Res = f_mount(&fs, "0:", 1); //	挂载SD卡
 8017a8a:	2201      	movs	r2, #1
 8017a8c:	491a      	ldr	r1, [pc, #104]	; (8017af8 <FatFs_read_Check+0x74>)
 8017a8e:	481b      	ldr	r0, [pc, #108]	; (8017afc <FatFs_read_Check+0x78>)
 8017a90:	f7fe ff10 	bl	80168b4 <f_mount>
 8017a94:	4603      	mov	r3, r0
 8017a96:	461a      	mov	r2, r3
 8017a98:	4b19      	ldr	r3, [pc, #100]	; (8017b00 <FatFs_read_Check+0x7c>)
 8017a9a:	701a      	strb	r2, [r3, #0]

	if (MyFile_Res == FR_OK) // 判断是否挂载成功
 8017a9c:	4b18      	ldr	r3, [pc, #96]	; (8017b00 <FatFs_read_Check+0x7c>)
 8017a9e:	781b      	ldrb	r3, [r3, #0]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d126      	bne.n	8017af2 <FatFs_read_Check+0x6e>
	{
		f_setlabel("SD");  //修改磁盘标签
 8017aa4:	4817      	ldr	r0, [pc, #92]	; (8017b04 <FatFs_read_Check+0x80>)
 8017aa6:	f7ff fd5f 	bl	8017568 <f_setlabel>
		MyFile_Res = f_open(&file, "0:SD_test.txt", FA_OPEN_EXISTING | FA_READ);
 8017aaa:	2201      	movs	r2, #1
 8017aac:	4916      	ldr	r1, [pc, #88]	; (8017b08 <FatFs_read_Check+0x84>)
 8017aae:	4817      	ldr	r0, [pc, #92]	; (8017b0c <FatFs_read_Check+0x88>)
 8017ab0:	f7fe ff46 	bl	8016940 <f_open>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	461a      	mov	r2, r3
 8017ab8:	4b11      	ldr	r3, [pc, #68]	; (8017b00 <FatFs_read_Check+0x7c>)
 8017aba:	701a      	strb	r2, [r3, #0]
		if (MyFile_Res == FR_OK)
 8017abc:	4b10      	ldr	r3, [pc, #64]	; (8017b00 <FatFs_read_Check+0x7c>)
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d116      	bne.n	8017af2 <FatFs_read_Check+0x6e>
		{
		 MyFile_Res = f_read(&file, ReadBuffer, 100, &MyFile_Num); // 读取文件
 8017ac4:	4b12      	ldr	r3, [pc, #72]	; (8017b10 <FatFs_read_Check+0x8c>)
 8017ac6:	2264      	movs	r2, #100	; 0x64
 8017ac8:	4912      	ldr	r1, [pc, #72]	; (8017b14 <FatFs_read_Check+0x90>)
 8017aca:	4810      	ldr	r0, [pc, #64]	; (8017b0c <FatFs_read_Check+0x88>)
 8017acc:	f7ff f9ef 	bl	8016eae <f_read>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	461a      	mov	r2, r3
 8017ad4:	4b0a      	ldr	r3, [pc, #40]	; (8017b00 <FatFs_read_Check+0x7c>)
 8017ad6:	701a      	strb	r2, [r3, #0]
		 LCD_ShowString(0, 0, 160, 128, 16, ReadBuffer); //lcd上显示出来读取的文件内容
 8017ad8:	4b0e      	ldr	r3, [pc, #56]	; (8017b14 <FatFs_read_Check+0x90>)
 8017ada:	9301      	str	r3, [sp, #4]
 8017adc:	2310      	movs	r3, #16
 8017ade:	9300      	str	r3, [sp, #0]
 8017ae0:	2380      	movs	r3, #128	; 0x80
 8017ae2:	22a0      	movs	r2, #160	; 0xa0
 8017ae4:	2100      	movs	r1, #0
 8017ae6:	2000      	movs	r0, #0
 8017ae8:	f000 f9d6 	bl	8017e98 <LCD_ShowString>
		 f_close(&file);
 8017aec:	4807      	ldr	r0, [pc, #28]	; (8017b0c <FatFs_read_Check+0x88>)
 8017aee:	f7ff fd10 	bl	8017512 <f_close>
		}
	}

}
 8017af2:	bf00      	nop
 8017af4:	46bd      	mov	sp, r7
 8017af6:	bd80      	pop	{r7, pc}
 8017af8:	0801bb3c 	.word	0x0801bb3c
 8017afc:	24000b94 	.word	0x24000b94
 8017b00:	24000dc8 	.word	0x24000dc8
 8017b04:	0801bb40 	.word	0x0801bb40
 8017b08:	0801bb44 	.word	0x0801bb44
 8017b0c:	24000dcc 	.word	0x24000dcc
 8017b10:	24000ffc 	.word	0x24000ffc
 8017b14:	24001000 	.word	0x24001000

08017b18 <FatFs_write_Check>:

void FatFs_write_Check(void)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b082      	sub	sp, #8
 8017b1c:	af02      	add	r7, sp, #8

  MyFile_Res = f_mount(&fs, "0:", 1);
 8017b1e:	2201      	movs	r2, #1
 8017b20:	4932      	ldr	r1, [pc, #200]	; (8017bec <FatFs_write_Check+0xd4>)
 8017b22:	4833      	ldr	r0, [pc, #204]	; (8017bf0 <FatFs_write_Check+0xd8>)
 8017b24:	f7fe fec6 	bl	80168b4 <f_mount>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	461a      	mov	r2, r3
 8017b2c:	4b31      	ldr	r3, [pc, #196]	; (8017bf4 <FatFs_write_Check+0xdc>)
 8017b2e:	701a      	strb	r2, [r3, #0]

  MyFile_Res = f_open(&file, "0:write_test.txt",FA_CREATE_ALWAYS | FA_WRITE); // 打开文件，若不存在则创建该文件
 8017b30:	220a      	movs	r2, #10
 8017b32:	4931      	ldr	r1, [pc, #196]	; (8017bf8 <FatFs_write_Check+0xe0>)
 8017b34:	4831      	ldr	r0, [pc, #196]	; (8017bfc <FatFs_write_Check+0xe4>)
 8017b36:	f7fe ff03 	bl	8016940 <f_open>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	461a      	mov	r2, r3
 8017b3e:	4b2d      	ldr	r3, [pc, #180]	; (8017bf4 <FatFs_write_Check+0xdc>)
 8017b40:	701a      	strb	r2, [r3, #0]
  if (MyFile_Res == FR_OK)
 8017b42:	4b2c      	ldr	r3, [pc, #176]	; (8017bf4 <FatFs_write_Check+0xdc>)
 8017b44:	781b      	ldrb	r3, [r3, #0]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d118      	bne.n	8017b7c <FatFs_write_Check+0x64>
  {
     MyFile_Res = f_write(&file, WriteBuffer,sizeof(WriteBuffer), &MyFile_Num); // 向文件写入数据
 8017b4a:	4b2d      	ldr	r3, [pc, #180]	; (8017c00 <FatFs_write_Check+0xe8>)
 8017b4c:	2216      	movs	r2, #22
 8017b4e:	492d      	ldr	r1, [pc, #180]	; (8017c04 <FatFs_write_Check+0xec>)
 8017b50:	482a      	ldr	r0, [pc, #168]	; (8017bfc <FatFs_write_Check+0xe4>)
 8017b52:	f7ff faeb 	bl	801712c <f_write>
 8017b56:	4603      	mov	r3, r0
 8017b58:	461a      	mov	r2, r3
 8017b5a:	4b26      	ldr	r3, [pc, #152]	; (8017bf4 <FatFs_write_Check+0xdc>)
 8017b5c:	701a      	strb	r2, [r3, #0]
     if (MyFile_Res == FR_OK)
 8017b5e:	4b25      	ldr	r3, [pc, #148]	; (8017bf4 <FatFs_write_Check+0xdc>)
 8017b60:	781b      	ldrb	r3, [r3, #0]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d118      	bne.n	8017b98 <FatFs_write_Check+0x80>
     {
    	 LCD_ShowString(0, 32, 160, 128, 16, "write ok"); //lcd上显示出来读取的文件内容
 8017b66:	4b28      	ldr	r3, [pc, #160]	; (8017c08 <FatFs_write_Check+0xf0>)
 8017b68:	9301      	str	r3, [sp, #4]
 8017b6a:	2310      	movs	r3, #16
 8017b6c:	9300      	str	r3, [sp, #0]
 8017b6e:	2380      	movs	r3, #128	; 0x80
 8017b70:	22a0      	movs	r2, #160	; 0xa0
 8017b72:	2120      	movs	r1, #32
 8017b74:	2000      	movs	r0, #0
 8017b76:	f000 f98f 	bl	8017e98 <LCD_ShowString>
 8017b7a:	e00d      	b.n	8017b98 <FatFs_write_Check+0x80>
     }
  }
  else if(MyFile_Res == FR_INVALID_NAME)
 8017b7c:	4b1d      	ldr	r3, [pc, #116]	; (8017bf4 <FatFs_write_Check+0xdc>)
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	2b06      	cmp	r3, #6
 8017b82:	d109      	bne.n	8017b98 <FatFs_write_Check+0x80>
  {
	  LCD_ShowString(0, 32, 160, 128, 16, "FR_INVALID_NAME"); //lcd上显示出来读取的文件内容
 8017b84:	4b21      	ldr	r3, [pc, #132]	; (8017c0c <FatFs_write_Check+0xf4>)
 8017b86:	9301      	str	r3, [sp, #4]
 8017b88:	2310      	movs	r3, #16
 8017b8a:	9300      	str	r3, [sp, #0]
 8017b8c:	2380      	movs	r3, #128	; 0x80
 8017b8e:	22a0      	movs	r2, #160	; 0xa0
 8017b90:	2120      	movs	r1, #32
 8017b92:	2000      	movs	r0, #0
 8017b94:	f000 f980 	bl	8017e98 <LCD_ShowString>
  }
  f_close(&file);
 8017b98:	4818      	ldr	r0, [pc, #96]	; (8017bfc <FatFs_write_Check+0xe4>)
 8017b9a:	f7ff fcba 	bl	8017512 <f_close>

  MyFile_Res = f_open(&file, "0:write_test.txt", FA_OPEN_EXISTING | FA_READ);
 8017b9e:	2201      	movs	r2, #1
 8017ba0:	4915      	ldr	r1, [pc, #84]	; (8017bf8 <FatFs_write_Check+0xe0>)
 8017ba2:	4816      	ldr	r0, [pc, #88]	; (8017bfc <FatFs_write_Check+0xe4>)
 8017ba4:	f7fe fecc 	bl	8016940 <f_open>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	461a      	mov	r2, r3
 8017bac:	4b11      	ldr	r3, [pc, #68]	; (8017bf4 <FatFs_write_Check+0xdc>)
 8017bae:	701a      	strb	r2, [r3, #0]
  if (MyFile_Res == FR_OK)
 8017bb0:	4b10      	ldr	r3, [pc, #64]	; (8017bf4 <FatFs_write_Check+0xdc>)
 8017bb2:	781b      	ldrb	r3, [r3, #0]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d116      	bne.n	8017be6 <FatFs_write_Check+0xce>
	{
	 MyFile_Res = f_read(&file, ReadBuffer, 100, &MyFile_Num); // 读取文件
 8017bb8:	4b11      	ldr	r3, [pc, #68]	; (8017c00 <FatFs_write_Check+0xe8>)
 8017bba:	2264      	movs	r2, #100	; 0x64
 8017bbc:	4914      	ldr	r1, [pc, #80]	; (8017c10 <FatFs_write_Check+0xf8>)
 8017bbe:	480f      	ldr	r0, [pc, #60]	; (8017bfc <FatFs_write_Check+0xe4>)
 8017bc0:	f7ff f975 	bl	8016eae <f_read>
 8017bc4:	4603      	mov	r3, r0
 8017bc6:	461a      	mov	r2, r3
 8017bc8:	4b0a      	ldr	r3, [pc, #40]	; (8017bf4 <FatFs_write_Check+0xdc>)
 8017bca:	701a      	strb	r2, [r3, #0]
	 LCD_ShowString(0, 48, 160, 128, 16, ReadBuffer); //lcd上显示出来读取的文件内容
 8017bcc:	4b10      	ldr	r3, [pc, #64]	; (8017c10 <FatFs_write_Check+0xf8>)
 8017bce:	9301      	str	r3, [sp, #4]
 8017bd0:	2310      	movs	r3, #16
 8017bd2:	9300      	str	r3, [sp, #0]
 8017bd4:	2380      	movs	r3, #128	; 0x80
 8017bd6:	22a0      	movs	r2, #160	; 0xa0
 8017bd8:	2130      	movs	r1, #48	; 0x30
 8017bda:	2000      	movs	r0, #0
 8017bdc:	f000 f95c 	bl	8017e98 <LCD_ShowString>
	 f_close(&file);
 8017be0:	4806      	ldr	r0, [pc, #24]	; (8017bfc <FatFs_write_Check+0xe4>)
 8017be2:	f7ff fc96 	bl	8017512 <f_close>
	}
}
 8017be6:	bf00      	nop
 8017be8:	46bd      	mov	sp, r7
 8017bea:	bd80      	pop	{r7, pc}
 8017bec:	0801bb3c 	.word	0x0801bb3c
 8017bf0:	24000b94 	.word	0x24000b94
 8017bf4:	24000dc8 	.word	0x24000dc8
 8017bf8:	0801bb54 	.word	0x0801bb54
 8017bfc:	24000dcc 	.word	0x24000dcc
 8017c00:	24000ffc 	.word	0x24000ffc
 8017c04:	24000194 	.word	0x24000194
 8017c08:	0801bb68 	.word	0x0801bb68
 8017c0c:	0801bb74 	.word	0x0801bb74
 8017c10:	24001000 	.word	0x24001000

08017c14 <SD_GetCardInfo>:

//得到卡信息
//cardinfo:卡信息存储区
//返回值:错误状态
uint8_t SD_GetCardInfo(HAL_SD_CardInfoTypeDef *cardinfo)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b084      	sub	sp, #16
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
    uint8_t sta;
	sta=HAL_SD_GetCardInfo(&hsd1,cardinfo);
 8017c1c:	6879      	ldr	r1, [r7, #4]
 8017c1e:	4805      	ldr	r0, [pc, #20]	; (8017c34 <SD_GetCardInfo+0x20>)
 8017c20:	f7f4 fa1e 	bl	800c060 <HAL_SD_GetCardInfo>
 8017c24:	4603      	mov	r3, r0
 8017c26:	73fb      	strb	r3, [r7, #15]
    return sta;
 8017c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	3710      	adds	r7, #16
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	bd80      	pop	{r7, pc}
 8017c32:	bf00      	nop
 8017c34:	240009d0 	.word	0x240009d0

08017c38 <SD_GetCardState>:

//判断SD卡是否可以传输(读写)数据
//返回值:SD_TRANSFER_OK 传输完成，可以继续下一次传输
//		 SD_TRANSFER_BUSY SD卡正忙，不可以进行下一次传输
uint8_t SD_GetCardState(void)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&hsd1)==HAL_SD_CARD_TRANSFER )?SD_TRANSFER_OK:SD_TRANSFER_BUSY);
 8017c3c:	4805      	ldr	r0, [pc, #20]	; (8017c54 <SD_GetCardState+0x1c>)
 8017c3e:	f7f4 fb4d 	bl	800c2dc <HAL_SD_GetCardState>
 8017c42:	4603      	mov	r3, r0
 8017c44:	2b04      	cmp	r3, #4
 8017c46:	bf14      	ite	ne
 8017c48:	2301      	movne	r3, #1
 8017c4a:	2300      	moveq	r3, #0
 8017c4c:	b2db      	uxtb	r3, r3
}
 8017c4e:	4618      	mov	r0, r3
 8017c50:	bd80      	pop	{r7, pc}
 8017c52:	bf00      	nop
 8017c54:	240009d0 	.word	0x240009d0

08017c58 <SD_ReadDisk>:
//buf:读数据缓存区
//sector:扇区地址
//cnt:扇区个数
//返回值:错误状态;0,正常;其他,错误代码;
uint8_t SD_ReadDisk(uint8_t* buf,uint32_t sector,uint32_t cnt)
{
 8017c58:	b5b0      	push	{r4, r5, r7, lr}
 8017c5a:	b08a      	sub	sp, #40	; 0x28
 8017c5c:	af02      	add	r7, sp, #8
 8017c5e:	60f8      	str	r0, [r7, #12]
 8017c60:	60b9      	str	r1, [r7, #8]
 8017c62:	607a      	str	r2, [r7, #4]
    uint8_t sta=HAL_OK;
 8017c64:	2300      	movs	r3, #0
 8017c66:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout=SD_TIMEOUT;
 8017c68:	4b14      	ldr	r3, [pc, #80]	; (8017cbc <SD_ReadDisk+0x64>)
 8017c6a:	61bb      	str	r3, [r7, #24]
    long long lsector=sector;
 8017c6c:	68bb      	ldr	r3, [r7, #8]
 8017c6e:	2200      	movs	r2, #0
 8017c70:	461c      	mov	r4, r3
 8017c72:	4615      	mov	r5, r2
 8017c74:	e9c7 4504 	strd	r4, r5, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017c78:	b672      	cpsid	i
}
 8017c7a:	bf00      	nop
    __disable_irq();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
	sta=HAL_SD_ReadBlocks(&hsd1, (uint8_t*)buf,lsector,cnt,SD_TIMEOUT);//多个sector的读操作
 8017c7c:	693a      	ldr	r2, [r7, #16]
 8017c7e:	4b0f      	ldr	r3, [pc, #60]	; (8017cbc <SD_ReadDisk+0x64>)
 8017c80:	9300      	str	r3, [sp, #0]
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	68f9      	ldr	r1, [r7, #12]
 8017c86:	480e      	ldr	r0, [pc, #56]	; (8017cc0 <SD_ReadDisk+0x68>)
 8017c88:	f7f3 fc70 	bl	800b56c <HAL_SD_ReadBlocks>
 8017c8c:	4603      	mov	r3, r0
 8017c8e:	77fb      	strb	r3, [r7, #31]

	//等待SD卡读完
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8017c90:	e007      	b.n	8017ca2 <SD_ReadDisk+0x4a>
    {
		if(timeout-- == 0)
 8017c92:	69bb      	ldr	r3, [r7, #24]
 8017c94:	1e5a      	subs	r2, r3, #1
 8017c96:	61ba      	str	r2, [r7, #24]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d102      	bne.n	8017ca2 <SD_ReadDisk+0x4a>
		{
			sta=SD_TRANSFER_BUSY;
 8017c9c:	2301      	movs	r3, #1
 8017c9e:	77fb      	strb	r3, [r7, #31]
            break;
 8017ca0:	e004      	b.n	8017cac <SD_ReadDisk+0x54>
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8017ca2:	f7ff ffc9 	bl	8017c38 <SD_GetCardState>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d1f2      	bne.n	8017c92 <SD_ReadDisk+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8017cac:	b662      	cpsie	i
}
 8017cae:	bf00      	nop
		}
    }
	__enable_irq();//开启总中断
    return sta;
 8017cb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	3720      	adds	r7, #32
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8017cba:	bf00      	nop
 8017cbc:	05f5e100 	.word	0x05f5e100
 8017cc0:	240009d0 	.word	0x240009d0

08017cc4 <SD_WriteDisk>:
//buf:写数据缓存区
//sector:扇区地址
//cnt:扇区个数
//返回值:错误状态;0,正常;其他,错误代码;
uint8_t SD_WriteDisk(uint8_t *buf,uint32_t sector,uint32_t cnt)
{
 8017cc4:	b5b0      	push	{r4, r5, r7, lr}
 8017cc6:	b08a      	sub	sp, #40	; 0x28
 8017cc8:	af02      	add	r7, sp, #8
 8017cca:	60f8      	str	r0, [r7, #12]
 8017ccc:	60b9      	str	r1, [r7, #8]
 8017cce:	607a      	str	r2, [r7, #4]
    uint8_t sta=HAL_OK;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout=SD_TIMEOUT;
 8017cd4:	4b14      	ldr	r3, [pc, #80]	; (8017d28 <SD_WriteDisk+0x64>)
 8017cd6:	61bb      	str	r3, [r7, #24]
    long long lsector=sector;
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	2200      	movs	r2, #0
 8017cdc:	461c      	mov	r4, r3
 8017cde:	4615      	mov	r5, r2
 8017ce0:	e9c7 4504 	strd	r4, r5, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017ce4:	b672      	cpsid	i
}
 8017ce6:	bf00      	nop
    __disable_irq();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
	sta=HAL_SD_WriteBlocks(&hsd1,(uint8_t*)buf,lsector,cnt,SD_TIMEOUT);//多个sector的写操作
 8017ce8:	693a      	ldr	r2, [r7, #16]
 8017cea:	4b0f      	ldr	r3, [pc, #60]	; (8017d28 <SD_WriteDisk+0x64>)
 8017cec:	9300      	str	r3, [sp, #0]
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	68f9      	ldr	r1, [r7, #12]
 8017cf2:	480e      	ldr	r0, [pc, #56]	; (8017d2c <SD_WriteDisk+0x68>)
 8017cf4:	f7f3 fdc4 	bl	800b880 <HAL_SD_WriteBlocks>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	77fb      	strb	r3, [r7, #31]

	//等待SD卡写完
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8017cfc:	e007      	b.n	8017d0e <SD_WriteDisk+0x4a>
    {
		if(timeout-- == 0)
 8017cfe:	69bb      	ldr	r3, [r7, #24]
 8017d00:	1e5a      	subs	r2, r3, #1
 8017d02:	61ba      	str	r2, [r7, #24]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d102      	bne.n	8017d0e <SD_WriteDisk+0x4a>
		{
			sta=SD_TRANSFER_BUSY;
 8017d08:	2301      	movs	r3, #1
 8017d0a:	77fb      	strb	r3, [r7, #31]
            break;
 8017d0c:	e004      	b.n	8017d18 <SD_WriteDisk+0x54>
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8017d0e:	f7ff ff93 	bl	8017c38 <SD_GetCardState>
 8017d12:	4603      	mov	r3, r0
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d1f2      	bne.n	8017cfe <SD_WriteDisk+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8017d18:	b662      	cpsie	i
}
 8017d1a:	bf00      	nop
		}
    }
	__enable_irq();//开启总中断
    return sta;
 8017d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8017d1e:	4618      	mov	r0, r3
 8017d20:	3720      	adds	r7, #32
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bdb0      	pop	{r4, r5, r7, pc}
 8017d26:	bf00      	nop
 8017d28:	05f5e100 	.word	0x05f5e100
 8017d2c:	240009d0 	.word	0x240009d0

08017d30 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size, uint8_t mode)
{
 8017d30:	b590      	push	{r4, r7, lr}
 8017d32:	b085      	sub	sp, #20
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	4604      	mov	r4, r0
 8017d38:	4608      	mov	r0, r1
 8017d3a:	4611      	mov	r1, r2
 8017d3c:	461a      	mov	r2, r3
 8017d3e:	4623      	mov	r3, r4
 8017d40:	80fb      	strh	r3, [r7, #6]
 8017d42:	4603      	mov	r3, r0
 8017d44:	80bb      	strh	r3, [r7, #4]
 8017d46:	460b      	mov	r3, r1
 8017d48:	70fb      	strb	r3, [r7, #3]
 8017d4a:	4613      	mov	r3, r2
 8017d4c:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8017d4e:	88bb      	ldrh	r3, [r7, #4]
 8017d50:	817b      	strh	r3, [r7, #10]
    uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);		//得到字体一个字符对应点阵集所占的字节数
 8017d52:	78bb      	ldrb	r3, [r7, #2]
 8017d54:	08db      	lsrs	r3, r3, #3
 8017d56:	b2db      	uxtb	r3, r3
 8017d58:	461a      	mov	r2, r3
 8017d5a:	78bb      	ldrb	r3, [r7, #2]
 8017d5c:	f003 0307 	and.w	r3, r3, #7
 8017d60:	b2db      	uxtb	r3, r3
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	bf14      	ite	ne
 8017d66:	2301      	movne	r3, #1
 8017d68:	2300      	moveq	r3, #0
 8017d6a:	b2db      	uxtb	r3, r3
 8017d6c:	4413      	add	r3, r2
 8017d6e:	b2da      	uxtb	r2, r3
 8017d70:	78bb      	ldrb	r3, [r7, #2]
 8017d72:	085b      	lsrs	r3, r3, #1
 8017d74:	b2db      	uxtb	r3, r3
 8017d76:	fb12 f303 	smulbb	r3, r2, r3
 8017d7a:	727b      	strb	r3, [r7, #9]
    num = num - ' '; //得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8017d7c:	78fb      	ldrb	r3, [r7, #3]
 8017d7e:	3b20      	subs	r3, #32
 8017d80:	70fb      	strb	r3, [r7, #3]

    for (t = 0; t < csize; t++)
 8017d82:	2300      	movs	r3, #0
 8017d84:	737b      	strb	r3, [r7, #13]
 8017d86:	e073      	b.n	8017e70 <LCD_ShowChar+0x140>
    {
        if (size == 12)temp = asc2_1206[num][t]; 	 	//调用1206字体
 8017d88:	78bb      	ldrb	r3, [r7, #2]
 8017d8a:	2b0c      	cmp	r3, #12
 8017d8c:	d10b      	bne.n	8017da6 <LCD_ShowChar+0x76>
 8017d8e:	78fa      	ldrb	r2, [r7, #3]
 8017d90:	7b79      	ldrb	r1, [r7, #13]
 8017d92:	483d      	ldr	r0, [pc, #244]	; (8017e88 <LCD_ShowChar+0x158>)
 8017d94:	4613      	mov	r3, r2
 8017d96:	005b      	lsls	r3, r3, #1
 8017d98:	4413      	add	r3, r2
 8017d9a:	009b      	lsls	r3, r3, #2
 8017d9c:	4403      	add	r3, r0
 8017d9e:	440b      	add	r3, r1
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	73fb      	strb	r3, [r7, #15]
 8017da4:	e025      	b.n	8017df2 <LCD_ShowChar+0xc2>
        else if (size == 16)temp = asc2_1608[num][t];	//调用1608字体
 8017da6:	78bb      	ldrb	r3, [r7, #2]
 8017da8:	2b10      	cmp	r3, #16
 8017daa:	d108      	bne.n	8017dbe <LCD_ShowChar+0x8e>
 8017dac:	78fa      	ldrb	r2, [r7, #3]
 8017dae:	7b7b      	ldrb	r3, [r7, #13]
 8017db0:	4936      	ldr	r1, [pc, #216]	; (8017e8c <LCD_ShowChar+0x15c>)
 8017db2:	0112      	lsls	r2, r2, #4
 8017db4:	440a      	add	r2, r1
 8017db6:	4413      	add	r3, r2
 8017db8:	781b      	ldrb	r3, [r3, #0]
 8017dba:	73fb      	strb	r3, [r7, #15]
 8017dbc:	e019      	b.n	8017df2 <LCD_ShowChar+0xc2>
        else if (size == 24)temp = asc2_2412[num][t];	//调用2412字体
 8017dbe:	78bb      	ldrb	r3, [r7, #2]
 8017dc0:	2b18      	cmp	r3, #24
 8017dc2:	d10b      	bne.n	8017ddc <LCD_ShowChar+0xac>
 8017dc4:	78fa      	ldrb	r2, [r7, #3]
 8017dc6:	7b79      	ldrb	r1, [r7, #13]
 8017dc8:	4831      	ldr	r0, [pc, #196]	; (8017e90 <LCD_ShowChar+0x160>)
 8017dca:	4613      	mov	r3, r2
 8017dcc:	00db      	lsls	r3, r3, #3
 8017dce:	4413      	add	r3, r2
 8017dd0:	009b      	lsls	r3, r3, #2
 8017dd2:	4403      	add	r3, r0
 8017dd4:	440b      	add	r3, r1
 8017dd6:	781b      	ldrb	r3, [r3, #0]
 8017dd8:	73fb      	strb	r3, [r7, #15]
 8017dda:	e00a      	b.n	8017df2 <LCD_ShowChar+0xc2>
        else if (size == 32)temp = asc2_3216[num][t];	//调用3216字体
 8017ddc:	78bb      	ldrb	r3, [r7, #2]
 8017dde:	2b20      	cmp	r3, #32
 8017de0:	d14b      	bne.n	8017e7a <LCD_ShowChar+0x14a>
 8017de2:	78fa      	ldrb	r2, [r7, #3]
 8017de4:	7b7b      	ldrb	r3, [r7, #13]
 8017de6:	492b      	ldr	r1, [pc, #172]	; (8017e94 <LCD_ShowChar+0x164>)
 8017de8:	01d2      	lsls	r2, r2, #7
 8017dea:	440a      	add	r2, r1
 8017dec:	4413      	add	r3, r2
 8017dee:	781b      	ldrb	r3, [r3, #0]
 8017df0:	73fb      	strb	r3, [r7, #15]
        else return;								//没有的字库

        for (t1 = 0; t1 < 8; t1++)
 8017df2:	2300      	movs	r3, #0
 8017df4:	73bb      	strb	r3, [r7, #14]
 8017df6:	e033      	b.n	8017e60 <LCD_ShowChar+0x130>
        {
            if (temp & 0x80)ST7735_DrawPixel(x, y, RED);
 8017df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	da07      	bge.n	8017e10 <LCD_ShowChar+0xe0>
 8017e00:	88b9      	ldrh	r1, [r7, #4]
 8017e02:	88fb      	ldrh	r3, [r7, #6]
 8017e04:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8017e08:	4618      	mov	r0, r3
 8017e0a:	f000 fb07 	bl	801841c <ST7735_DrawPixel>
 8017e0e:	e00a      	b.n	8017e26 <LCD_ShowChar+0xf6>
            else if (mode == 0)ST7735_DrawPixel(x, y, WHITE);
 8017e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d106      	bne.n	8017e26 <LCD_ShowChar+0xf6>
 8017e18:	88b9      	ldrh	r1, [r7, #4]
 8017e1a:	88fb      	ldrh	r3, [r7, #6]
 8017e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e20:	4618      	mov	r0, r3
 8017e22:	f000 fafb 	bl	801841c <ST7735_DrawPixel>

            temp <<= 1;
 8017e26:	7bfb      	ldrb	r3, [r7, #15]
 8017e28:	005b      	lsls	r3, r3, #1
 8017e2a:	73fb      	strb	r3, [r7, #15]
            y++;
 8017e2c:	88bb      	ldrh	r3, [r7, #4]
 8017e2e:	3301      	adds	r3, #1
 8017e30:	80bb      	strh	r3, [r7, #4]

            if (y >= 600)return;		//超区域了
 8017e32:	88bb      	ldrh	r3, [r7, #4]
 8017e34:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8017e38:	d221      	bcs.n	8017e7e <LCD_ShowChar+0x14e>

            if ((y - y0) == size)
 8017e3a:	88ba      	ldrh	r2, [r7, #4]
 8017e3c:	897b      	ldrh	r3, [r7, #10]
 8017e3e:	1ad2      	subs	r2, r2, r3
 8017e40:	78bb      	ldrb	r3, [r7, #2]
 8017e42:	429a      	cmp	r2, r3
 8017e44:	d109      	bne.n	8017e5a <LCD_ShowChar+0x12a>
            {
                y = y0;
 8017e46:	897b      	ldrh	r3, [r7, #10]
 8017e48:	80bb      	strh	r3, [r7, #4]
                x++;
 8017e4a:	88fb      	ldrh	r3, [r7, #6]
 8017e4c:	3301      	adds	r3, #1
 8017e4e:	80fb      	strh	r3, [r7, #6]

                if (x >= 1024)return;	//超区域了
 8017e50:	88fb      	ldrh	r3, [r7, #6]
 8017e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017e56:	d307      	bcc.n	8017e68 <LCD_ShowChar+0x138>
 8017e58:	e012      	b.n	8017e80 <LCD_ShowChar+0x150>
        for (t1 = 0; t1 < 8; t1++)
 8017e5a:	7bbb      	ldrb	r3, [r7, #14]
 8017e5c:	3301      	adds	r3, #1
 8017e5e:	73bb      	strb	r3, [r7, #14]
 8017e60:	7bbb      	ldrb	r3, [r7, #14]
 8017e62:	2b07      	cmp	r3, #7
 8017e64:	d9c8      	bls.n	8017df8 <LCD_ShowChar+0xc8>
 8017e66:	e000      	b.n	8017e6a <LCD_ShowChar+0x13a>

                break;
 8017e68:	bf00      	nop
    for (t = 0; t < csize; t++)
 8017e6a:	7b7b      	ldrb	r3, [r7, #13]
 8017e6c:	3301      	adds	r3, #1
 8017e6e:	737b      	strb	r3, [r7, #13]
 8017e70:	7b7a      	ldrb	r2, [r7, #13]
 8017e72:	7a7b      	ldrb	r3, [r7, #9]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d387      	bcc.n	8017d88 <LCD_ShowChar+0x58>
 8017e78:	e002      	b.n	8017e80 <LCD_ShowChar+0x150>
        else return;								//没有的字库
 8017e7a:	bf00      	nop
 8017e7c:	e000      	b.n	8017e80 <LCD_ShowChar+0x150>
            if (y >= 600)return;		//超区域了
 8017e7e:	bf00      	nop
            }
        }
    }
}
 8017e80:	3714      	adds	r7, #20
 8017e82:	46bd      	mov	sp, r7
 8017e84:	bd90      	pop	{r4, r7, pc}
 8017e86:	bf00      	nop
 8017e88:	080467f4 	.word	0x080467f4
 8017e8c:	08046c68 	.word	0x08046c68
 8017e90:	08047258 	.word	0x08047258
 8017e94:	08047fb4 	.word	0x08047fb4

08017e98 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, uint8_t *p)
{
 8017e98:	b590      	push	{r4, r7, lr}
 8017e9a:	b087      	sub	sp, #28
 8017e9c:	af02      	add	r7, sp, #8
 8017e9e:	4604      	mov	r4, r0
 8017ea0:	4608      	mov	r0, r1
 8017ea2:	4611      	mov	r1, r2
 8017ea4:	461a      	mov	r2, r3
 8017ea6:	4623      	mov	r3, r4
 8017ea8:	80fb      	strh	r3, [r7, #6]
 8017eaa:	4603      	mov	r3, r0
 8017eac:	80bb      	strh	r3, [r7, #4]
 8017eae:	460b      	mov	r3, r1
 8017eb0:	807b      	strh	r3, [r7, #2]
 8017eb2:	4613      	mov	r3, r2
 8017eb4:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8017eb6:	88fb      	ldrh	r3, [r7, #6]
 8017eb8:	73fb      	strb	r3, [r7, #15]
    width += x;
 8017eba:	887a      	ldrh	r2, [r7, #2]
 8017ebc:	88fb      	ldrh	r3, [r7, #6]
 8017ebe:	4413      	add	r3, r2
 8017ec0:	807b      	strh	r3, [r7, #2]
    height += y;
 8017ec2:	883a      	ldrh	r2, [r7, #0]
 8017ec4:	88bb      	ldrh	r3, [r7, #4]
 8017ec6:	4413      	add	r3, r2
 8017ec8:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' ')) //判断是不是非法字符!
 8017eca:	e024      	b.n	8017f16 <LCD_ShowString+0x7e>
    {
        if (x >= width)
 8017ecc:	88fa      	ldrh	r2, [r7, #6]
 8017ece:	887b      	ldrh	r3, [r7, #2]
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	d307      	bcc.n	8017ee4 <LCD_ShowString+0x4c>
        {
            x = x0;
 8017ed4:	7bfb      	ldrb	r3, [r7, #15]
 8017ed6:	80fb      	strh	r3, [r7, #6]
            y += size;
 8017ed8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017edc:	b29a      	uxth	r2, r3
 8017ede:	88bb      	ldrh	r3, [r7, #4]
 8017ee0:	4413      	add	r3, r2
 8017ee2:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break; //退出
 8017ee4:	88ba      	ldrh	r2, [r7, #4]
 8017ee6:	883b      	ldrh	r3, [r7, #0]
 8017ee8:	429a      	cmp	r2, r3
 8017eea:	d21d      	bcs.n	8017f28 <LCD_ShowString+0x90>

        LCD_ShowChar(x, y, *p, size, 0);
 8017eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eee:	781a      	ldrb	r2, [r3, #0]
 8017ef0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ef4:	88b9      	ldrh	r1, [r7, #4]
 8017ef6:	88f8      	ldrh	r0, [r7, #6]
 8017ef8:	2400      	movs	r4, #0
 8017efa:	9400      	str	r4, [sp, #0]
 8017efc:	f7ff ff18 	bl	8017d30 <LCD_ShowChar>
        x += size / 2;
 8017f00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017f04:	085b      	lsrs	r3, r3, #1
 8017f06:	b2db      	uxtb	r3, r3
 8017f08:	b29a      	uxth	r2, r3
 8017f0a:	88fb      	ldrh	r3, [r7, #6]
 8017f0c:	4413      	add	r3, r2
 8017f0e:	80fb      	strh	r3, [r7, #6]
        p++;
 8017f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f12:	3301      	adds	r3, #1
 8017f14:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' ')) //判断是不是非法字符!
 8017f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f18:	781b      	ldrb	r3, [r3, #0]
 8017f1a:	2b7e      	cmp	r3, #126	; 0x7e
 8017f1c:	d805      	bhi.n	8017f2a <LCD_ShowString+0x92>
 8017f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f20:	781b      	ldrb	r3, [r3, #0]
 8017f22:	2b1f      	cmp	r3, #31
 8017f24:	d8d2      	bhi.n	8017ecc <LCD_ShowString+0x34>
    }
}
 8017f26:	e000      	b.n	8017f2a <LCD_ShowString+0x92>
        if (y >= height)break; //退出
 8017f28:	bf00      	nop
}
 8017f2a:	bf00      	nop
 8017f2c:	3714      	adds	r7, #20
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd90      	pop	{r4, r7, pc}
	...

08017f34 <lcd_init>:

void lcd_init(void)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	af00      	add	r7, sp, #0
	uint32_t i;
	HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8017f38:	2201      	movs	r2, #1
 8017f3a:	2120      	movs	r1, #32
 8017f3c:	4810      	ldr	r0, [pc, #64]	; (8017f80 <lcd_init+0x4c>)
 8017f3e:	f7ed fb65 	bl	800560c <HAL_GPIO_WritePin>
	ST7735_Init();
 8017f42:	f000 f8dd 	bl	8018100 <ST7735_Init>
	ST7735_FillScreen(RED);
 8017f46:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8017f4a:	f000 fa9a 	bl	8018482 <ST7735_FillScreen>
	HAL_Delay(200);
 8017f4e:	20c8      	movs	r0, #200	; 0xc8
 8017f50:	f7e9 fa3c 	bl	80013cc <HAL_Delay>
	ST7735_FillScreen(GREEN);
 8017f54:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8017f58:	f000 fa93 	bl	8018482 <ST7735_FillScreen>
	HAL_Delay(200);
 8017f5c:	20c8      	movs	r0, #200	; 0xc8
 8017f5e:	f7e9 fa35 	bl	80013cc <HAL_Delay>
	ST7735_FillScreen(BLUE);
 8017f62:	201f      	movs	r0, #31
 8017f64:	f000 fa8d 	bl	8018482 <ST7735_FillScreen>
	HAL_Delay(200);
 8017f68:	20c8      	movs	r0, #200	; 0xc8
 8017f6a:	f7e9 fa2f 	bl	80013cc <HAL_Delay>
	ST7735_FillScreen(WHITE);
 8017f6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017f72:	f000 fa86 	bl	8018482 <ST7735_FillScreen>
	HAL_Delay(200);
 8017f76:	20c8      	movs	r0, #200	; 0xc8
 8017f78:	f7e9 fa28 	bl	80013cc <HAL_Delay>
//	LCD_ShowString(0, 0, 160, 128, 16, " lcd display test ");
//    for(i=0;i<100;i++)
//    {
//    	ST7735_DrawPixel(i,i,RED);
//    }
}
 8017f7c:	bf00      	nop
 8017f7e:	bd80      	pop	{r7, pc}
 8017f80:	58020000 	.word	0x58020000

08017f84 <ST7735_Reset>:
#define ST7735_MADCTL_MY  0x80
#define ST7735_MADCTL_MV  0x20
#define ST7735_MADCTL_RGB 0x00

void ST7735_Reset(void)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8017f88:	2200      	movs	r2, #0
 8017f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017f8e:	4808      	ldr	r0, [pc, #32]	; (8017fb0 <ST7735_Reset+0x2c>)
 8017f90:	f7ed fb3c 	bl	800560c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8017f94:	2064      	movs	r0, #100	; 0x64
 8017f96:	f7e9 fa19 	bl	80013cc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8017f9a:	2201      	movs	r2, #1
 8017f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017fa0:	4803      	ldr	r0, [pc, #12]	; (8017fb0 <ST7735_Reset+0x2c>)
 8017fa2:	f7ed fb33 	bl	800560c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8017fa6:	2064      	movs	r0, #100	; 0x64
 8017fa8:	f7e9 fa10 	bl	80013cc <HAL_Delay>
}
 8017fac:	bf00      	nop
 8017fae:	bd80      	pop	{r7, pc}
 8017fb0:	58020c00 	.word	0x58020c00

08017fb4 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b082      	sub	sp, #8
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	4603      	mov	r3, r0
 8017fbc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017fc4:	480c      	ldr	r0, [pc, #48]	; (8017ff8 <ST7735_WriteCommand+0x44>)
 8017fc6:	f7ed fb21 	bl	800560c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8017fca:	2200      	movs	r2, #0
 8017fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017fd0:	480a      	ldr	r0, [pc, #40]	; (8017ffc <ST7735_WriteCommand+0x48>)
 8017fd2:	f7ed fb1b 	bl	800560c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, 100);
 8017fd6:	1df9      	adds	r1, r7, #7
 8017fd8:	2364      	movs	r3, #100	; 0x64
 8017fda:	2201      	movs	r2, #1
 8017fdc:	4808      	ldr	r0, [pc, #32]	; (8018000 <ST7735_WriteCommand+0x4c>)
 8017fde:	f7f4 fe7b 	bl	800ccd8 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi2, &cmd, 1);
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8017fe2:	2201      	movs	r2, #1
 8017fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017fe8:	4804      	ldr	r0, [pc, #16]	; (8017ffc <ST7735_WriteCommand+0x48>)
 8017fea:	f7ed fb0f 	bl	800560c <HAL_GPIO_WritePin>
}
 8017fee:	bf00      	nop
 8017ff0:	3708      	adds	r7, #8
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}
 8017ff6:	bf00      	nop
 8017ff8:	58020c00 	.word	0x58020c00
 8017ffc:	58020400 	.word	0x58020400
 8018000:	24000a4c 	.word	0x24000a4c

08018004 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t data)
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b082      	sub	sp, #8
 8018008:	af00      	add	r7, sp, #0
 801800a:	4603      	mov	r3, r0
 801800c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 801800e:	2201      	movs	r2, #1
 8018010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018014:	480c      	ldr	r0, [pc, #48]	; (8018048 <ST7735_WriteData+0x44>)
 8018016:	f7ed faf9 	bl	800560c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 801801a:	2200      	movs	r2, #0
 801801c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018020:	480a      	ldr	r0, [pc, #40]	; (801804c <ST7735_WriteData+0x48>)
 8018022:	f7ed faf3 	bl	800560c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8018026:	1df9      	adds	r1, r7, #7
 8018028:	2364      	movs	r3, #100	; 0x64
 801802a:	2201      	movs	r2, #1
 801802c:	4808      	ldr	r0, [pc, #32]	; (8018050 <ST7735_WriteData+0x4c>)
 801802e:	f7f4 fe53 	bl	800ccd8 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8018032:	2201      	movs	r2, #1
 8018034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018038:	4804      	ldr	r0, [pc, #16]	; (801804c <ST7735_WriteData+0x48>)
 801803a:	f7ed fae7 	bl	800560c <HAL_GPIO_WritePin>
}
 801803e:	bf00      	nop
 8018040:	3708      	adds	r7, #8
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}
 8018046:	bf00      	nop
 8018048:	58020c00 	.word	0x58020c00
 801804c:	58020400 	.word	0x58020400
 8018050:	24000a4c 	.word	0x24000a4c

08018054 <ST7735_WriteBuf>:

void ST7735_WriteBuf(uint8_t* data,uint16_t len)
{
 8018054:	b580      	push	{r7, lr}
 8018056:	b082      	sub	sp, #8
 8018058:	af00      	add	r7, sp, #0
 801805a:	6078      	str	r0, [r7, #4]
 801805c:	460b      	mov	r3, r1
 801805e:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8018060:	2201      	movs	r2, #1
 8018062:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018066:	480c      	ldr	r0, [pc, #48]	; (8018098 <ST7735_WriteBuf+0x44>)
 8018068:	f7ed fad0 	bl	800560c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 801806c:	2200      	movs	r2, #0
 801806e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018072:	480a      	ldr	r0, [pc, #40]	; (801809c <ST7735_WriteBuf+0x48>)
 8018074:	f7ed faca 	bl	800560c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, len, 100);
 8018078:	887a      	ldrh	r2, [r7, #2]
 801807a:	2364      	movs	r3, #100	; 0x64
 801807c:	6879      	ldr	r1, [r7, #4]
 801807e:	4808      	ldr	r0, [pc, #32]	; (80180a0 <ST7735_WriteBuf+0x4c>)
 8018080:	f7f4 fe2a 	bl	800ccd8 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8018084:	2201      	movs	r2, #1
 8018086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801808a:	4804      	ldr	r0, [pc, #16]	; (801809c <ST7735_WriteBuf+0x48>)
 801808c:	f7ed fabe 	bl	800560c <HAL_GPIO_WritePin>
}
 8018090:	bf00      	nop
 8018092:	3708      	adds	r7, #8
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	58020c00 	.word	0x58020c00
 801809c:	58020400 	.word	0x58020400
 80180a0:	24000a4c 	.word	0x24000a4c

080180a4 <ST7735_SetRotation>:


void ST7735_SetRotation(uint8_t rotation)
{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b084      	sub	sp, #16
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	4603      	mov	r3, r0
 80180ac:	71fb      	strb	r3, [r7, #7]
    uint8_t madctl = 0;
 80180ae:	2300      	movs	r3, #0
 80180b0:	73fb      	strb	r3, [r7, #15]

    switch (rotation)
 80180b2:	79fb      	ldrb	r3, [r7, #7]
 80180b4:	2b03      	cmp	r3, #3
 80180b6:	d817      	bhi.n	80180e8 <ST7735_SetRotation+0x44>
 80180b8:	a201      	add	r2, pc, #4	; (adr r2, 80180c0 <ST7735_SetRotation+0x1c>)
 80180ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180be:	bf00      	nop
 80180c0:	080180d1 	.word	0x080180d1
 80180c4:	080180d7 	.word	0x080180d7
 80180c8:	080180dd 	.word	0x080180dd
 80180cc:	080180e3 	.word	0x080180e3
    {
        case 0:
            madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80180d0:	23c0      	movs	r3, #192	; 0xc0
 80180d2:	73fb      	strb	r3, [r7, #15]
            break;
 80180d4:	e008      	b.n	80180e8 <ST7735_SetRotation+0x44>
        case 1:
            madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80180d6:	23a0      	movs	r3, #160	; 0xa0
 80180d8:	73fb      	strb	r3, [r7, #15]
            break;
 80180da:	e005      	b.n	80180e8 <ST7735_SetRotation+0x44>
        case 2:
            madctl = ST7735_MADCTL_RGB;
 80180dc:	2300      	movs	r3, #0
 80180de:	73fb      	strb	r3, [r7, #15]
            break;
 80180e0:	e002      	b.n	80180e8 <ST7735_SetRotation+0x44>
        case 3:
            madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80180e2:	2360      	movs	r3, #96	; 0x60
 80180e4:	73fb      	strb	r3, [r7, #15]
            break;
 80180e6:	bf00      	nop
    }

    ST7735_WriteCommand(ST7735_MADCTL);
 80180e8:	2036      	movs	r0, #54	; 0x36
 80180ea:	f7ff ff63 	bl	8017fb4 <ST7735_WriteCommand>
    ST7735_WriteData(madctl);
 80180ee:	7bfb      	ldrb	r3, [r7, #15]
 80180f0:	4618      	mov	r0, r3
 80180f2:	f7ff ff87 	bl	8018004 <ST7735_WriteData>
}
 80180f6:	bf00      	nop
 80180f8:	3710      	adds	r7, #16
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}
 80180fe:	bf00      	nop

08018100 <ST7735_Init>:

void ST7735_Init(void) {
 8018100:	b580      	push	{r7, lr}
 8018102:	af00      	add	r7, sp, #0
  // Initialize the display
  ST7735_Reset();
 8018104:	f7ff ff3e 	bl	8017f84 <ST7735_Reset>
  ST7735_WriteCommand(ST7735_SLPOUT);
 8018108:	2011      	movs	r0, #17
 801810a:	f7ff ff53 	bl	8017fb4 <ST7735_WriteCommand>
  HAL_Delay(120);
 801810e:	2078      	movs	r0, #120	; 0x78
 8018110:	f7e9 f95c 	bl	80013cc <HAL_Delay>
  ST7735_WriteCommand(ST7735_FRMCTR1);
 8018114:	20b1      	movs	r0, #177	; 0xb1
 8018116:	f7ff ff4d 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 801811a:	2001      	movs	r0, #1
 801811c:	f7ff ff72 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8018120:	202c      	movs	r0, #44	; 0x2c
 8018122:	f7ff ff6f 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8018126:	202d      	movs	r0, #45	; 0x2d
 8018128:	f7ff ff6c 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_FRMCTR2);
 801812c:	20b2      	movs	r0, #178	; 0xb2
 801812e:	f7ff ff41 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 8018132:	2001      	movs	r0, #1
 8018134:	f7ff ff66 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8018138:	202c      	movs	r0, #44	; 0x2c
 801813a:	f7ff ff63 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 801813e:	202d      	movs	r0, #45	; 0x2d
 8018140:	f7ff ff60 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_FRMCTR3);
 8018144:	20b3      	movs	r0, #179	; 0xb3
 8018146:	f7ff ff35 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 801814a:	2001      	movs	r0, #1
 801814c:	f7ff ff5a 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8018150:	202c      	movs	r0, #44	; 0x2c
 8018152:	f7ff ff57 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8018156:	202d      	movs	r0, #45	; 0x2d
 8018158:	f7ff ff54 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x01);
 801815c:	2001      	movs	r0, #1
 801815e:	f7ff ff51 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8018162:	202c      	movs	r0, #44	; 0x2c
 8018164:	f7ff ff4e 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8018168:	202d      	movs	r0, #45	; 0x2d
 801816a:	f7ff ff4b 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_INVCTR);
 801816e:	20b4      	movs	r0, #180	; 0xb4
 8018170:	f7ff ff20 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x07);
 8018174:	2007      	movs	r0, #7
 8018176:	f7ff ff45 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR1);
 801817a:	20c0      	movs	r0, #192	; 0xc0
 801817c:	f7ff ff1a 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0xA2);
 8018180:	20a2      	movs	r0, #162	; 0xa2
 8018182:	f7ff ff3f 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x02);
 8018186:	2002      	movs	r0, #2
 8018188:	f7ff ff3c 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x84);
 801818c:	2084      	movs	r0, #132	; 0x84
 801818e:	f7ff ff39 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR2);
 8018192:	20c1      	movs	r0, #193	; 0xc1
 8018194:	f7ff ff0e 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0xC5);
 8018198:	20c5      	movs	r0, #197	; 0xc5
 801819a:	f7ff ff33 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR3);
 801819e:	20c2      	movs	r0, #194	; 0xc2
 80181a0:	f7ff ff08 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x0A);
 80181a4:	200a      	movs	r0, #10
 80181a6:	f7ff ff2d 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80181aa:	2000      	movs	r0, #0
 80181ac:	f7ff ff2a 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR4);
 80181b0:	20c3      	movs	r0, #195	; 0xc3
 80181b2:	f7ff feff 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x8A);
 80181b6:	208a      	movs	r0, #138	; 0x8a
 80181b8:	f7ff ff24 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2A);
 80181bc:	202a      	movs	r0, #42	; 0x2a
 80181be:	f7ff ff21 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR5);
 80181c2:	20c4      	movs	r0, #196	; 0xc4
 80181c4:	f7ff fef6 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x8A);
 80181c8:	208a      	movs	r0, #138	; 0x8a
 80181ca:	f7ff ff1b 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0xEE);
 80181ce:	20ee      	movs	r0, #238	; 0xee
 80181d0:	f7ff ff18 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_VMCTR1);
 80181d4:	20c5      	movs	r0, #197	; 0xc5
 80181d6:	f7ff feed 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x0E);
 80181da:	200e      	movs	r0, #14
 80181dc:	f7ff ff12 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_INVOFF);
 80181e0:	2020      	movs	r0, #32
 80181e2:	f7ff fee7 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteCommand(ST7735_COLMOD);
 80181e6:	203a      	movs	r0, #58	; 0x3a
 80181e8:	f7ff fee4 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x05);
 80181ec:	2005      	movs	r0, #5
 80181ee:	f7ff ff09 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_CASET);
 80181f2:	202a      	movs	r0, #42	; 0x2a
 80181f4:	f7ff fede 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 80181f8:	2000      	movs	r0, #0
 80181fa:	f7ff ff03 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80181fe:	2000      	movs	r0, #0
 8018200:	f7ff ff00 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8018204:	2000      	movs	r0, #0
 8018206:	f7ff fefd 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x7F);
 801820a:	207f      	movs	r0, #127	; 0x7f
 801820c:	f7ff fefa 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_RASET);
 8018210:	202b      	movs	r0, #43	; 0x2b
 8018212:	f7ff fecf 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8018216:	2000      	movs	r0, #0
 8018218:	f7ff fef4 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 801821c:	2000      	movs	r0, #0
 801821e:	f7ff fef1 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8018222:	2000      	movs	r0, #0
 8018224:	f7ff feee 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x9F);
 8018228:	209f      	movs	r0, #159	; 0x9f
 801822a:	f7ff feeb 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_GMCTRP1);
 801822e:	20e0      	movs	r0, #224	; 0xe0
 8018230:	f7ff fec0 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x02);
 8018234:	2002      	movs	r0, #2
 8018236:	f7ff fee5 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x1C);
 801823a:	201c      	movs	r0, #28
 801823c:	f7ff fee2 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x07);
 8018240:	2007      	movs	r0, #7
 8018242:	f7ff fedf 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x12);
 8018246:	2012      	movs	r0, #18
 8018248:	f7ff fedc 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x37);
 801824c:	2037      	movs	r0, #55	; 0x37
 801824e:	f7ff fed9 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x32);
 8018252:	2032      	movs	r0, #50	; 0x32
 8018254:	f7ff fed6 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 8018258:	2029      	movs	r0, #41	; 0x29
 801825a:	f7ff fed3 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 801825e:	202d      	movs	r0, #45	; 0x2d
 8018260:	f7ff fed0 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 8018264:	2029      	movs	r0, #41	; 0x29
 8018266:	f7ff fecd 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x25);
 801826a:	2025      	movs	r0, #37	; 0x25
 801826c:	f7ff feca 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2B);
 8018270:	202b      	movs	r0, #43	; 0x2b
 8018272:	f7ff fec7 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x39);
 8018276:	2039      	movs	r0, #57	; 0x39
 8018278:	f7ff fec4 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 801827c:	2000      	movs	r0, #0
 801827e:	f7ff fec1 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x01);
 8018282:	2001      	movs	r0, #1
 8018284:	f7ff febe 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x03);
 8018288:	2003      	movs	r0, #3
 801828a:	f7ff febb 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x10);
 801828e:	2010      	movs	r0, #16
 8018290:	f7ff feb8 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_GMCTRN1);
 8018294:	20e1      	movs	r0, #225	; 0xe1
 8018296:	f7ff fe8d 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x03);
 801829a:	2003      	movs	r0, #3
 801829c:	f7ff feb2 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x1D);
 80182a0:	201d      	movs	r0, #29
 80182a2:	f7ff feaf 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x07);
 80182a6:	2007      	movs	r0, #7
 80182a8:	f7ff feac 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x06);
 80182ac:	2006      	movs	r0, #6
 80182ae:	f7ff fea9 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 80182b2:	202e      	movs	r0, #46	; 0x2e
 80182b4:	f7ff fea6 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 80182b8:	202c      	movs	r0, #44	; 0x2c
 80182ba:	f7ff fea3 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 80182be:	2029      	movs	r0, #41	; 0x29
 80182c0:	f7ff fea0 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 80182c4:	202d      	movs	r0, #45	; 0x2d
 80182c6:	f7ff fe9d 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 80182ca:	202e      	movs	r0, #46	; 0x2e
 80182cc:	f7ff fe9a 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 80182d0:	202e      	movs	r0, #46	; 0x2e
 80182d2:	f7ff fe97 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x37);
 80182d6:	2037      	movs	r0, #55	; 0x37
 80182d8:	f7ff fe94 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x3F);
 80182dc:	203f      	movs	r0, #63	; 0x3f
 80182de:	f7ff fe91 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80182e2:	2000      	movs	r0, #0
 80182e4:	f7ff fe8e 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80182e8:	2000      	movs	r0, #0
 80182ea:	f7ff fe8b 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x02);
 80182ee:	2002      	movs	r0, #2
 80182f0:	f7ff fe88 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x10);
 80182f4:	2010      	movs	r0, #16
 80182f6:	f7ff fe85 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_NORON);
 80182fa:	2013      	movs	r0, #19
 80182fc:	f7ff fe5a 	bl	8017fb4 <ST7735_WriteCommand>
  HAL_Delay(10);
 8018300:	200a      	movs	r0, #10
 8018302:	f7e9 f863 	bl	80013cc <HAL_Delay>
  ST7735_WriteCommand(ST7735_DISPON);
 8018306:	2029      	movs	r0, #41	; 0x29
 8018308:	f7ff fe54 	bl	8017fb4 <ST7735_WriteCommand>
  HAL_Delay(10);
 801830c:	200a      	movs	r0, #10
 801830e:	f7e9 f85d 	bl	80013cc <HAL_Delay>

  ST7735_SetRotation(ST7735_ROTATION);
 8018312:	2000      	movs	r0, #0
 8018314:	f7ff fec6 	bl	80180a4 <ST7735_SetRotation>
  ST7735_FillScreen(WHITE);
 8018318:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801831c:	f000 f8b1 	bl	8018482 <ST7735_FillScreen>
}
 8018320:	bf00      	nop
 8018322:	bd80      	pop	{r7, pc}

08018324 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8018324:	b590      	push	{r4, r7, lr}
 8018326:	b083      	sub	sp, #12
 8018328:	af00      	add	r7, sp, #0
 801832a:	4604      	mov	r4, r0
 801832c:	4608      	mov	r0, r1
 801832e:	4611      	mov	r1, r2
 8018330:	461a      	mov	r2, r3
 8018332:	4623      	mov	r3, r4
 8018334:	71fb      	strb	r3, [r7, #7]
 8018336:	4603      	mov	r3, r0
 8018338:	71bb      	strb	r3, [r7, #6]
 801833a:	460b      	mov	r3, r1
 801833c:	717b      	strb	r3, [r7, #5]
 801833e:	4613      	mov	r3, r2
 8018340:	713b      	strb	r3, [r7, #4]
  y0 += ST7735_YSTART;

  x1 += ST7735_XSTART;
  y1 += ST7735_YSTART;

  ST7735_WriteCommand(ST7735_CASET);
 8018342:	202a      	movs	r0, #42	; 0x2a
 8018344:	f7ff fe36 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8018348:	2000      	movs	r0, #0
 801834a:	f7ff fe5b 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(x0 + ST7735_XSTART);
 801834e:	79fb      	ldrb	r3, [r7, #7]
 8018350:	4618      	mov	r0, r3
 8018352:	f7ff fe57 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8018356:	2000      	movs	r0, #0
 8018358:	f7ff fe54 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(x1 + ST7735_XSTART);
 801835c:	797b      	ldrb	r3, [r7, #5]
 801835e:	4618      	mov	r0, r3
 8018360:	f7ff fe50 	bl	8018004 <ST7735_WriteData>

  ST7735_WriteCommand(ST7735_RASET);
 8018364:	202b      	movs	r0, #43	; 0x2b
 8018366:	f7ff fe25 	bl	8017fb4 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 801836a:	2000      	movs	r0, #0
 801836c:	f7ff fe4a 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(y0 + ST7735_YSTART);
 8018370:	79bb      	ldrb	r3, [r7, #6]
 8018372:	4618      	mov	r0, r3
 8018374:	f7ff fe46 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8018378:	2000      	movs	r0, #0
 801837a:	f7ff fe43 	bl	8018004 <ST7735_WriteData>
  ST7735_WriteData(y1 + ST7735_YSTART);
 801837e:	793b      	ldrb	r3, [r7, #4]
 8018380:	4618      	mov	r0, r3
 8018382:	f7ff fe3f 	bl	8018004 <ST7735_WriteData>
}
 8018386:	bf00      	nop
 8018388:	370c      	adds	r7, #12
 801838a:	46bd      	mov	sp, r7
 801838c:	bd90      	pop	{r4, r7, pc}

0801838e <ST7735_DrawRectangle>:

void ST7735_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 801838e:	b590      	push	{r4, r7, lr}
 8018390:	b085      	sub	sp, #20
 8018392:	af00      	add	r7, sp, #0
 8018394:	4604      	mov	r4, r0
 8018396:	4608      	mov	r0, r1
 8018398:	4611      	mov	r1, r2
 801839a:	461a      	mov	r2, r3
 801839c:	4623      	mov	r3, r4
 801839e:	80fb      	strh	r3, [r7, #6]
 80183a0:	4603      	mov	r3, r0
 80183a2:	80bb      	strh	r3, [r7, #4]
 80183a4:	460b      	mov	r3, r1
 80183a6:	807b      	strh	r3, [r7, #2]
 80183a8:	4613      	mov	r3, r2
 80183aa:	803b      	strh	r3, [r7, #0]
  ST7735_SetAddressWindow(x, y, x + width - 1, y + height - 1);
 80183ac:	88fb      	ldrh	r3, [r7, #6]
 80183ae:	b2d8      	uxtb	r0, r3
 80183b0:	88bb      	ldrh	r3, [r7, #4]
 80183b2:	b2d9      	uxtb	r1, r3
 80183b4:	88fb      	ldrh	r3, [r7, #6]
 80183b6:	b2da      	uxtb	r2, r3
 80183b8:	887b      	ldrh	r3, [r7, #2]
 80183ba:	b2db      	uxtb	r3, r3
 80183bc:	4413      	add	r3, r2
 80183be:	b2db      	uxtb	r3, r3
 80183c0:	3b01      	subs	r3, #1
 80183c2:	b2dc      	uxtb	r4, r3
 80183c4:	88bb      	ldrh	r3, [r7, #4]
 80183c6:	b2da      	uxtb	r2, r3
 80183c8:	883b      	ldrh	r3, [r7, #0]
 80183ca:	b2db      	uxtb	r3, r3
 80183cc:	4413      	add	r3, r2
 80183ce:	b2db      	uxtb	r3, r3
 80183d0:	3b01      	subs	r3, #1
 80183d2:	b2db      	uxtb	r3, r3
 80183d4:	4622      	mov	r2, r4
 80183d6:	f7ff ffa5 	bl	8018324 <ST7735_SetAddressWindow>
  ST7735_WriteCommand(ST7735_RAMWR);
 80183da:	202c      	movs	r0, #44	; 0x2c
 80183dc:	f7ff fdea 	bl	8017fb4 <ST7735_WriteCommand>
  // Write the color data
  for (uint16_t i = 0; i < width * height; i++)
 80183e0:	2300      	movs	r3, #0
 80183e2:	81fb      	strh	r3, [r7, #14]
 80183e4:	e00e      	b.n	8018404 <ST7735_DrawRectangle+0x76>
  {
    ST7735_WriteData(color >> 8);
 80183e6:	8c3b      	ldrh	r3, [r7, #32]
 80183e8:	0a1b      	lsrs	r3, r3, #8
 80183ea:	b29b      	uxth	r3, r3
 80183ec:	b2db      	uxtb	r3, r3
 80183ee:	4618      	mov	r0, r3
 80183f0:	f7ff fe08 	bl	8018004 <ST7735_WriteData>
    ST7735_WriteData(color & 0xFF);
 80183f4:	8c3b      	ldrh	r3, [r7, #32]
 80183f6:	b2db      	uxtb	r3, r3
 80183f8:	4618      	mov	r0, r3
 80183fa:	f7ff fe03 	bl	8018004 <ST7735_WriteData>
  for (uint16_t i = 0; i < width * height; i++)
 80183fe:	89fb      	ldrh	r3, [r7, #14]
 8018400:	3301      	adds	r3, #1
 8018402:	81fb      	strh	r3, [r7, #14]
 8018404:	89fa      	ldrh	r2, [r7, #14]
 8018406:	887b      	ldrh	r3, [r7, #2]
 8018408:	8839      	ldrh	r1, [r7, #0]
 801840a:	fb01 f303 	mul.w	r3, r1, r3
 801840e:	429a      	cmp	r2, r3
 8018410:	dbe9      	blt.n	80183e6 <ST7735_DrawRectangle+0x58>
  }
}
 8018412:	bf00      	nop
 8018414:	bf00      	nop
 8018416:	3714      	adds	r7, #20
 8018418:	46bd      	mov	sp, r7
 801841a:	bd90      	pop	{r4, r7, pc}

0801841c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af00      	add	r7, sp, #0
 8018422:	4603      	mov	r3, r0
 8018424:	80fb      	strh	r3, [r7, #6]
 8018426:	460b      	mov	r3, r1
 8018428:	80bb      	strh	r3, [r7, #4]
 801842a:	4613      	mov	r3, r2
 801842c:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 801842e:	88fb      	ldrh	r3, [r7, #6]
 8018430:	2b7f      	cmp	r3, #127	; 0x7f
 8018432:	d822      	bhi.n	801847a <ST7735_DrawPixel+0x5e>
 8018434:	88bb      	ldrh	r3, [r7, #4]
 8018436:	2b9f      	cmp	r3, #159	; 0x9f
 8018438:	d81f      	bhi.n	801847a <ST7735_DrawPixel+0x5e>
        return;

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 801843a:	88fb      	ldrh	r3, [r7, #6]
 801843c:	b2d8      	uxtb	r0, r3
 801843e:	88bb      	ldrh	r3, [r7, #4]
 8018440:	b2d9      	uxtb	r1, r3
 8018442:	88fb      	ldrh	r3, [r7, #6]
 8018444:	b2db      	uxtb	r3, r3
 8018446:	3301      	adds	r3, #1
 8018448:	b2da      	uxtb	r2, r3
 801844a:	88bb      	ldrh	r3, [r7, #4]
 801844c:	b2db      	uxtb	r3, r3
 801844e:	3301      	adds	r3, #1
 8018450:	b2db      	uxtb	r3, r3
 8018452:	f7ff ff67 	bl	8018324 <ST7735_SetAddressWindow>
    ST7735_WriteCommand(ST7735_RAMWR);
 8018456:	202c      	movs	r0, #44	; 0x2c
 8018458:	f7ff fdac 	bl	8017fb4 <ST7735_WriteCommand>
	data[0] = color >> 8;
 801845c:	887b      	ldrh	r3, [r7, #2]
 801845e:	0a1b      	lsrs	r3, r3, #8
 8018460:	b29b      	uxth	r3, r3
 8018462:	b2db      	uxtb	r3, r3
 8018464:	733b      	strb	r3, [r7, #12]
	data[1] = color & 0xFF;
 8018466:	887b      	ldrh	r3, [r7, #2]
 8018468:	b2db      	uxtb	r3, r3
 801846a:	737b      	strb	r3, [r7, #13]
	ST7735_WriteBuf(data,2);
 801846c:	f107 030c 	add.w	r3, r7, #12
 8018470:	2102      	movs	r1, #2
 8018472:	4618      	mov	r0, r3
 8018474:	f7ff fdee 	bl	8018054 <ST7735_WriteBuf>
 8018478:	e000      	b.n	801847c <ST7735_DrawPixel+0x60>
        return;
 801847a:	bf00      	nop

}
 801847c:	3710      	adds	r7, #16
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}

08018482 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8018482:	b580      	push	{r7, lr}
 8018484:	b084      	sub	sp, #16
 8018486:	af02      	add	r7, sp, #8
 8018488:	4603      	mov	r3, r0
 801848a:	80fb      	strh	r3, [r7, #6]
  ST7735_DrawRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 801848c:	88fb      	ldrh	r3, [r7, #6]
 801848e:	9300      	str	r3, [sp, #0]
 8018490:	23a0      	movs	r3, #160	; 0xa0
 8018492:	2280      	movs	r2, #128	; 0x80
 8018494:	2100      	movs	r1, #0
 8018496:	2000      	movs	r0, #0
 8018498:	f7ff ff79 	bl	801838e <ST7735_DrawRectangle>
}
 801849c:	bf00      	nop
 801849e:	3708      	adds	r7, #8
 80184a0:	46bd      	mov	sp, r7
 80184a2:	bd80      	pop	{r7, pc}

080184a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  /* USER CODE END USB_DEVICE_Init_PreTreatment usbCmpsitFS_Desc*/

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80184a8:	2200      	movs	r2, #0
 80184aa:	491e      	ldr	r1, [pc, #120]	; (8018524 <MX_USB_DEVICE_Init+0x80>)
 80184ac:	481e      	ldr	r0, [pc, #120]	; (8018528 <MX_USB_DEVICE_Init+0x84>)
 80184ae:	f7fa fab6 	bl	8012a1e <USBD_Init>
 80184b2:	4603      	mov	r3, r0
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d001      	beq.n	80184bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80184b8:	f7e8 fb76 	bl	8000ba8 <Error_Handler>
  }

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80184bc:	491b      	ldr	r1, [pc, #108]	; (801852c <MX_USB_DEVICE_Init+0x88>)
 80184be:	481a      	ldr	r0, [pc, #104]	; (8018528 <MX_USB_DEVICE_Init+0x84>)
 80184c0:	f7f7 fe5f 	bl	8010182 <USBD_CDC_RegisterInterface>
 80184c4:	4603      	mov	r3, r0
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d001      	beq.n	80184ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80184ca:	f7e8 fb6d 	bl	8000ba8 <Error_Handler>
  }

  if(USBD_RegisterClassComposite(&hUsbDeviceFS, &USBD_CDC,CLASS_TYPE_CDC,0) != USBD_OK)
 80184ce:	2300      	movs	r3, #0
 80184d0:	2202      	movs	r2, #2
 80184d2:	4917      	ldr	r1, [pc, #92]	; (8018530 <MX_USB_DEVICE_Init+0x8c>)
 80184d4:	4814      	ldr	r0, [pc, #80]	; (8018528 <MX_USB_DEVICE_Init+0x84>)
 80184d6:	f7fa faf3 	bl	8012ac0 <USBD_RegisterClassComposite>
 80184da:	4603      	mov	r3, r0
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d001      	beq.n	80184e4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80184e0:	f7e8 fb62 	bl	8000ba8 <Error_Handler>
  }

  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80184e4:	4913      	ldr	r1, [pc, #76]	; (8018534 <MX_USB_DEVICE_Init+0x90>)
 80184e6:	4810      	ldr	r0, [pc, #64]	; (8018528 <MX_USB_DEVICE_Init+0x84>)
 80184e8:	f7f8 fb88 	bl	8010bfc <USBD_MSC_RegisterStorage>
 80184ec:	4603      	mov	r3, r0
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d001      	beq.n	80184f6 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 80184f2:	f7e8 fb59 	bl	8000ba8 <Error_Handler>
  }

  if(USBD_RegisterClassComposite(&hUsbDeviceFS, &USBD_MSC,CLASS_TYPE_MSC,0) != USBD_OK)
 80184f6:	2300      	movs	r3, #0
 80184f8:	2203      	movs	r2, #3
 80184fa:	490f      	ldr	r1, [pc, #60]	; (8018538 <MX_USB_DEVICE_Init+0x94>)
 80184fc:	480a      	ldr	r0, [pc, #40]	; (8018528 <MX_USB_DEVICE_Init+0x84>)
 80184fe:	f7fa fadf 	bl	8012ac0 <USBD_RegisterClassComposite>
 8018502:	4603      	mov	r3, r0
 8018504:	2b00      	cmp	r3, #0
 8018506:	d001      	beq.n	801850c <MX_USB_DEVICE_Init+0x68>
  {
    Error_Handler();
 8018508:	f7e8 fb4e 	bl	8000ba8 <Error_Handler>
  }

  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801850c:	4806      	ldr	r0, [pc, #24]	; (8018528 <MX_USB_DEVICE_Init+0x84>)
 801850e:	f7fa fb33 	bl	8012b78 <USBD_Start>
 8018512:	4603      	mov	r3, r0
 8018514:	2b00      	cmp	r3, #0
 8018516:	d001      	beq.n	801851c <MX_USB_DEVICE_Init+0x78>
  {
    Error_Handler();
 8018518:	f7e8 fb46 	bl	8000ba8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801851c:	f7ef f9be 	bl	800789c <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018520:	bf00      	nop
 8018522:	bd80      	pop	{r7, pc}
 8018524:	240001c0 	.word	0x240001c0
 8018528:	24001088 	.word	0x24001088
 801852c:	240001ac 	.word	0x240001ac
 8018530:	24000024 	.word	0x24000024
 8018534:	24000214 	.word	0x24000214
 8018538:	24000114 	.word	0x24000114

0801853c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b082      	sub	sp, #8
 8018540:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
  return (USBD_OK);
#else
  USBD_HandleTypeDef *pdev = &hUsbDeviceFS;
 8018542:	4b0b      	ldr	r3, [pc, #44]	; (8018570 <CDC_Init_FS+0x34>)
 8018544:	607b      	str	r3, [r7, #4]
  uint8_t idx = USBD_CoreFindEP(pdev, CDC_IN_EP);
 8018546:	2181      	movs	r1, #129	; 0x81
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f7fa ff54 	bl	80133f6 <USBD_CoreFindEP>
 801854e:	4603      	mov	r3, r0
 8018550:	70fb      	strb	r3, [r7, #3]
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0,idx);
 8018552:	78fb      	ldrb	r3, [r7, #3]
 8018554:	2200      	movs	r2, #0
 8018556:	4907      	ldr	r1, [pc, #28]	; (8018574 <CDC_Init_FS+0x38>)
 8018558:	4805      	ldr	r0, [pc, #20]	; (8018570 <CDC_Init_FS+0x34>)
 801855a:	f7f7 fe2c 	bl	80101b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801855e:	4906      	ldr	r1, [pc, #24]	; (8018578 <CDC_Init_FS+0x3c>)
 8018560:	4803      	ldr	r0, [pc, #12]	; (8018570 <CDC_Init_FS+0x34>)
 8018562:	f7f7 fe4a 	bl	80101fa <USBD_CDC_SetRxBuffer>
#endif
return (USBD_OK);
 8018566:	2300      	movs	r3, #0


  /* USER CODE END 3 */
}
 8018568:	4618      	mov	r0, r3
 801856a:	3708      	adds	r7, #8
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}
 8018570:	24001088 	.word	0x24001088
 8018574:	24001c68 	.word	0x24001c68
 8018578:	24001468 	.word	0x24001468

0801857c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801857c:	b480      	push	{r7}
 801857e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018580:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018582:	4618      	mov	r0, r3
 8018584:	46bd      	mov	sp, r7
 8018586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858a:	4770      	bx	lr

0801858c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801858c:	b480      	push	{r7}
 801858e:	b083      	sub	sp, #12
 8018590:	af00      	add	r7, sp, #0
 8018592:	4603      	mov	r3, r0
 8018594:	6039      	str	r1, [r7, #0]
 8018596:	71fb      	strb	r3, [r7, #7]
 8018598:	4613      	mov	r3, r2
 801859a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801859c:	79fb      	ldrb	r3, [r7, #7]
 801859e:	2b23      	cmp	r3, #35	; 0x23
 80185a0:	d84a      	bhi.n	8018638 <CDC_Control_FS+0xac>
 80185a2:	a201      	add	r2, pc, #4	; (adr r2, 80185a8 <CDC_Control_FS+0x1c>)
 80185a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185a8:	08018639 	.word	0x08018639
 80185ac:	08018639 	.word	0x08018639
 80185b0:	08018639 	.word	0x08018639
 80185b4:	08018639 	.word	0x08018639
 80185b8:	08018639 	.word	0x08018639
 80185bc:	08018639 	.word	0x08018639
 80185c0:	08018639 	.word	0x08018639
 80185c4:	08018639 	.word	0x08018639
 80185c8:	08018639 	.word	0x08018639
 80185cc:	08018639 	.word	0x08018639
 80185d0:	08018639 	.word	0x08018639
 80185d4:	08018639 	.word	0x08018639
 80185d8:	08018639 	.word	0x08018639
 80185dc:	08018639 	.word	0x08018639
 80185e0:	08018639 	.word	0x08018639
 80185e4:	08018639 	.word	0x08018639
 80185e8:	08018639 	.word	0x08018639
 80185ec:	08018639 	.word	0x08018639
 80185f0:	08018639 	.word	0x08018639
 80185f4:	08018639 	.word	0x08018639
 80185f8:	08018639 	.word	0x08018639
 80185fc:	08018639 	.word	0x08018639
 8018600:	08018639 	.word	0x08018639
 8018604:	08018639 	.word	0x08018639
 8018608:	08018639 	.word	0x08018639
 801860c:	08018639 	.word	0x08018639
 8018610:	08018639 	.word	0x08018639
 8018614:	08018639 	.word	0x08018639
 8018618:	08018639 	.word	0x08018639
 801861c:	08018639 	.word	0x08018639
 8018620:	08018639 	.word	0x08018639
 8018624:	08018639 	.word	0x08018639
 8018628:	08018639 	.word	0x08018639
 801862c:	08018639 	.word	0x08018639
 8018630:	08018639 	.word	0x08018639
 8018634:	08018639 	.word	0x08018639
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018638:	bf00      	nop
  }

  return (USBD_OK);
 801863a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801863c:	4618      	mov	r0, r3
 801863e:	370c      	adds	r7, #12
 8018640:	46bd      	mov	sp, r7
 8018642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018646:	4770      	bx	lr

08018648 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b082      	sub	sp, #8
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
 8018650:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018652:	6879      	ldr	r1, [r7, #4]
 8018654:	4808      	ldr	r0, [pc, #32]	; (8018678 <CDC_Receive_FS+0x30>)
 8018656:	f7f7 fdd0 	bl	80101fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801865a:	4807      	ldr	r0, [pc, #28]	; (8018678 <CDC_Receive_FS+0x30>)
 801865c:	f7f7 fe36 	bl	80102cc <USBD_CDC_ReceivePacket>

  CDC_Transmit_FS(Buf, *Len);  //测试接收使用，将接收到的数据转发回去
 8018660:	683b      	ldr	r3, [r7, #0]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	b29b      	uxth	r3, r3
 8018666:	4619      	mov	r1, r3
 8018668:	6878      	ldr	r0, [r7, #4]
 801866a:	f000 f807 	bl	801867c <CDC_Transmit_FS>

  return (USBD_OK);
 801866e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018670:	4618      	mov	r0, r3
 8018672:	3708      	adds	r7, #8
 8018674:	46bd      	mov	sp, r7
 8018676:	bd80      	pop	{r7, pc}
 8018678:	24001088 	.word	0x24001088

0801867c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b086      	sub	sp, #24
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	460b      	mov	r3, r1
 8018686:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018688:	2300      	movs	r3, #0
 801868a:	75fb      	strb	r3, [r7, #23]
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);

#else
  USBD_HandleTypeDef *pdev = &hUsbDeviceFS;
 801868c:	4b19      	ldr	r3, [pc, #100]	; (80186f4 <CDC_Transmit_FS+0x78>)
 801868e:	613b      	str	r3, [r7, #16]
  uint8_t idx = USBD_CoreFindEP(pdev, CDC_IN_EP);
 8018690:	2181      	movs	r1, #129	; 0x81
 8018692:	6938      	ldr	r0, [r7, #16]
 8018694:	f7fa feaf 	bl	80133f6 <USBD_CoreFindEP>
 8018698:	4603      	mov	r3, r0
 801869a:	73fb      	strb	r3, [r7, #15]
  if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801869c:	7bfb      	ldrb	r3, [r7, #15]
 801869e:	2bff      	cmp	r3, #255	; 0xff
 80186a0:	d023      	beq.n	80186ea <CDC_Transmit_FS+0x6e>
 80186a2:	7bfb      	ldrb	r3, [r7, #15]
 80186a4:	2b03      	cmp	r3, #3
 80186a6:	d820      	bhi.n	80186ea <CDC_Transmit_FS+0x6e>
      {
        pdev->classId = idx;
 80186a8:	7bfa      	ldrb	r2, [r7, #15]
 80186aa:	693b      	ldr	r3, [r7, #16]
 80186ac:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

        USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassDataCmsit[pdev->classId];
 80186b0:	693b      	ldr	r3, [r7, #16]
 80186b2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80186b6:	4a0f      	ldr	r2, [pc, #60]	; (80186f4 <CDC_Transmit_FS+0x78>)
 80186b8:	33b2      	adds	r3, #178	; 0xb2
 80186ba:	009b      	lsls	r3, r3, #2
 80186bc:	4413      	add	r3, r2
 80186be:	685b      	ldr	r3, [r3, #4]
 80186c0:	60bb      	str	r3, [r7, #8]
        if (hcdc->TxState != 0)
 80186c2:	68bb      	ldr	r3, [r7, #8]
 80186c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d001      	beq.n	80186d0 <CDC_Transmit_FS+0x54>
        {
          return USBD_BUSY;
 80186cc:	2301      	movs	r3, #1
 80186ce:	e00d      	b.n	80186ec <CDC_Transmit_FS+0x70>
        }
        USBD_CDC_SetTxBuffer(pdev, Buf, Len, idx);
 80186d0:	887a      	ldrh	r2, [r7, #2]
 80186d2:	7bfb      	ldrb	r3, [r7, #15]
 80186d4:	6879      	ldr	r1, [r7, #4]
 80186d6:	6938      	ldr	r0, [r7, #16]
 80186d8:	f7f7 fd6d 	bl	80101b6 <USBD_CDC_SetTxBuffer>
        result = USBD_CDC_TransmitPacket(pdev,idx);
 80186dc:	7bfb      	ldrb	r3, [r7, #15]
 80186de:	4619      	mov	r1, r3
 80186e0:	6938      	ldr	r0, [r7, #16]
 80186e2:	f7f7 fda9 	bl	8010238 <USBD_CDC_TransmitPacket>
 80186e6:	4603      	mov	r3, r0
 80186e8:	75fb      	strb	r3, [r7, #23]
      }
#endif
  /* USER CODE END 7 */
  return result;
 80186ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80186ec:	4618      	mov	r0, r3
 80186ee:	3718      	adds	r7, #24
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}
 80186f4:	24001088 	.word	0x24001088

080186f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80186f8:	b480      	push	{r7}
 80186fa:	b087      	sub	sp, #28
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	60f8      	str	r0, [r7, #12]
 8018700:	60b9      	str	r1, [r7, #8]
 8018702:	4613      	mov	r3, r2
 8018704:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018706:	2300      	movs	r3, #0
 8018708:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801870a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801870e:	4618      	mov	r0, r3
 8018710:	371c      	adds	r7, #28
 8018712:	46bd      	mov	sp, r7
 8018714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018718:	4770      	bx	lr
	...

0801871c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801871c:	b480      	push	{r7}
 801871e:	b083      	sub	sp, #12
 8018720:	af00      	add	r7, sp, #0
 8018722:	4603      	mov	r3, r0
 8018724:	6039      	str	r1, [r7, #0]
 8018726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	2212      	movs	r2, #18
 801872c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801872e:	4b03      	ldr	r3, [pc, #12]	; (801873c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018730:	4618      	mov	r0, r3
 8018732:	370c      	adds	r7, #12
 8018734:	46bd      	mov	sp, r7
 8018736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801873a:	4770      	bx	lr
 801873c:	240001e0 	.word	0x240001e0

08018740 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018740:	b480      	push	{r7}
 8018742:	b083      	sub	sp, #12
 8018744:	af00      	add	r7, sp, #0
 8018746:	4603      	mov	r3, r0
 8018748:	6039      	str	r1, [r7, #0]
 801874a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801874c:	683b      	ldr	r3, [r7, #0]
 801874e:	2204      	movs	r2, #4
 8018750:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018752:	4b03      	ldr	r3, [pc, #12]	; (8018760 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018754:	4618      	mov	r0, r3
 8018756:	370c      	adds	r7, #12
 8018758:	46bd      	mov	sp, r7
 801875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801875e:	4770      	bx	lr
 8018760:	240001f4 	.word	0x240001f4

08018764 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b082      	sub	sp, #8
 8018768:	af00      	add	r7, sp, #0
 801876a:	4603      	mov	r3, r0
 801876c:	6039      	str	r1, [r7, #0]
 801876e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018770:	79fb      	ldrb	r3, [r7, #7]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d105      	bne.n	8018782 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018776:	683a      	ldr	r2, [r7, #0]
 8018778:	4907      	ldr	r1, [pc, #28]	; (8018798 <USBD_FS_ProductStrDescriptor+0x34>)
 801877a:	4808      	ldr	r0, [pc, #32]	; (801879c <USBD_FS_ProductStrDescriptor+0x38>)
 801877c:	f7fb fd40 	bl	8014200 <USBD_GetString>
 8018780:	e004      	b.n	801878c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018782:	683a      	ldr	r2, [r7, #0]
 8018784:	4904      	ldr	r1, [pc, #16]	; (8018798 <USBD_FS_ProductStrDescriptor+0x34>)
 8018786:	4805      	ldr	r0, [pc, #20]	; (801879c <USBD_FS_ProductStrDescriptor+0x38>)
 8018788:	f7fb fd3a 	bl	8014200 <USBD_GetString>
  }
  return USBD_StrDesc;
 801878c:	4b02      	ldr	r3, [pc, #8]	; (8018798 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801878e:	4618      	mov	r0, r3
 8018790:	3708      	adds	r7, #8
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}
 8018796:	bf00      	nop
 8018798:	24002468 	.word	0x24002468
 801879c:	0801bb84 	.word	0x0801bb84

080187a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b082      	sub	sp, #8
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	4603      	mov	r3, r0
 80187a8:	6039      	str	r1, [r7, #0]
 80187aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80187ac:	683a      	ldr	r2, [r7, #0]
 80187ae:	4904      	ldr	r1, [pc, #16]	; (80187c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80187b0:	4804      	ldr	r0, [pc, #16]	; (80187c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80187b2:	f7fb fd25 	bl	8014200 <USBD_GetString>
  return USBD_StrDesc;
 80187b6:	4b02      	ldr	r3, [pc, #8]	; (80187c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80187b8:	4618      	mov	r0, r3
 80187ba:	3708      	adds	r7, #8
 80187bc:	46bd      	mov	sp, r7
 80187be:	bd80      	pop	{r7, pc}
 80187c0:	24002468 	.word	0x24002468
 80187c4:	0801bb98 	.word	0x0801bb98

080187c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80187c8:	b580      	push	{r7, lr}
 80187ca:	b082      	sub	sp, #8
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	4603      	mov	r3, r0
 80187d0:	6039      	str	r1, [r7, #0]
 80187d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	221a      	movs	r2, #26
 80187d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80187da:	f000 f843 	bl	8018864 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80187de:	4b02      	ldr	r3, [pc, #8]	; (80187e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80187e0:	4618      	mov	r0, r3
 80187e2:	3708      	adds	r7, #8
 80187e4:	46bd      	mov	sp, r7
 80187e6:	bd80      	pop	{r7, pc}
 80187e8:	240001f8 	.word	0x240001f8

080187ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b082      	sub	sp, #8
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	4603      	mov	r3, r0
 80187f4:	6039      	str	r1, [r7, #0]
 80187f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80187f8:	79fb      	ldrb	r3, [r7, #7]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d105      	bne.n	801880a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80187fe:	683a      	ldr	r2, [r7, #0]
 8018800:	4907      	ldr	r1, [pc, #28]	; (8018820 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018802:	4808      	ldr	r0, [pc, #32]	; (8018824 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018804:	f7fb fcfc 	bl	8014200 <USBD_GetString>
 8018808:	e004      	b.n	8018814 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801880a:	683a      	ldr	r2, [r7, #0]
 801880c:	4904      	ldr	r1, [pc, #16]	; (8018820 <USBD_FS_ConfigStrDescriptor+0x34>)
 801880e:	4805      	ldr	r0, [pc, #20]	; (8018824 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018810:	f7fb fcf6 	bl	8014200 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018814:	4b02      	ldr	r3, [pc, #8]	; (8018820 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018816:	4618      	mov	r0, r3
 8018818:	3708      	adds	r7, #8
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}
 801881e:	bf00      	nop
 8018820:	24002468 	.word	0x24002468
 8018824:	0801bbac 	.word	0x0801bbac

08018828 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b082      	sub	sp, #8
 801882c:	af00      	add	r7, sp, #0
 801882e:	4603      	mov	r3, r0
 8018830:	6039      	str	r1, [r7, #0]
 8018832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018834:	79fb      	ldrb	r3, [r7, #7]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d105      	bne.n	8018846 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801883a:	683a      	ldr	r2, [r7, #0]
 801883c:	4907      	ldr	r1, [pc, #28]	; (801885c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801883e:	4808      	ldr	r0, [pc, #32]	; (8018860 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018840:	f7fb fcde 	bl	8014200 <USBD_GetString>
 8018844:	e004      	b.n	8018850 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018846:	683a      	ldr	r2, [r7, #0]
 8018848:	4904      	ldr	r1, [pc, #16]	; (801885c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801884a:	4805      	ldr	r0, [pc, #20]	; (8018860 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801884c:	f7fb fcd8 	bl	8014200 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018850:	4b02      	ldr	r3, [pc, #8]	; (801885c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018852:	4618      	mov	r0, r3
 8018854:	3708      	adds	r7, #8
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}
 801885a:	bf00      	nop
 801885c:	24002468 	.word	0x24002468
 8018860:	0801bbb8 	.word	0x0801bbb8

08018864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b084      	sub	sp, #16
 8018868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801886a:	4b0f      	ldr	r3, [pc, #60]	; (80188a8 <Get_SerialNum+0x44>)
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018870:	4b0e      	ldr	r3, [pc, #56]	; (80188ac <Get_SerialNum+0x48>)
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018876:	4b0e      	ldr	r3, [pc, #56]	; (80188b0 <Get_SerialNum+0x4c>)
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801887c:	68fa      	ldr	r2, [r7, #12]
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	4413      	add	r3, r2
 8018882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d009      	beq.n	801889e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801888a:	2208      	movs	r2, #8
 801888c:	4909      	ldr	r1, [pc, #36]	; (80188b4 <Get_SerialNum+0x50>)
 801888e:	68f8      	ldr	r0, [r7, #12]
 8018890:	f000 f814 	bl	80188bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018894:	2204      	movs	r2, #4
 8018896:	4908      	ldr	r1, [pc, #32]	; (80188b8 <Get_SerialNum+0x54>)
 8018898:	68b8      	ldr	r0, [r7, #8]
 801889a:	f000 f80f 	bl	80188bc <IntToUnicode>
  }
}
 801889e:	bf00      	nop
 80188a0:	3710      	adds	r7, #16
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	1ff1e800 	.word	0x1ff1e800
 80188ac:	1ff1e804 	.word	0x1ff1e804
 80188b0:	1ff1e808 	.word	0x1ff1e808
 80188b4:	240001fa 	.word	0x240001fa
 80188b8:	2400020a 	.word	0x2400020a

080188bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80188bc:	b480      	push	{r7}
 80188be:	b087      	sub	sp, #28
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	60f8      	str	r0, [r7, #12]
 80188c4:	60b9      	str	r1, [r7, #8]
 80188c6:	4613      	mov	r3, r2
 80188c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80188ca:	2300      	movs	r3, #0
 80188cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80188ce:	2300      	movs	r3, #0
 80188d0:	75fb      	strb	r3, [r7, #23]
 80188d2:	e027      	b.n	8018924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	0f1b      	lsrs	r3, r3, #28
 80188d8:	2b09      	cmp	r3, #9
 80188da:	d80b      	bhi.n	80188f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	0f1b      	lsrs	r3, r3, #28
 80188e0:	b2da      	uxtb	r2, r3
 80188e2:	7dfb      	ldrb	r3, [r7, #23]
 80188e4:	005b      	lsls	r3, r3, #1
 80188e6:	4619      	mov	r1, r3
 80188e8:	68bb      	ldr	r3, [r7, #8]
 80188ea:	440b      	add	r3, r1
 80188ec:	3230      	adds	r2, #48	; 0x30
 80188ee:	b2d2      	uxtb	r2, r2
 80188f0:	701a      	strb	r2, [r3, #0]
 80188f2:	e00a      	b.n	801890a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	0f1b      	lsrs	r3, r3, #28
 80188f8:	b2da      	uxtb	r2, r3
 80188fa:	7dfb      	ldrb	r3, [r7, #23]
 80188fc:	005b      	lsls	r3, r3, #1
 80188fe:	4619      	mov	r1, r3
 8018900:	68bb      	ldr	r3, [r7, #8]
 8018902:	440b      	add	r3, r1
 8018904:	3237      	adds	r2, #55	; 0x37
 8018906:	b2d2      	uxtb	r2, r2
 8018908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	011b      	lsls	r3, r3, #4
 801890e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018910:	7dfb      	ldrb	r3, [r7, #23]
 8018912:	005b      	lsls	r3, r3, #1
 8018914:	3301      	adds	r3, #1
 8018916:	68ba      	ldr	r2, [r7, #8]
 8018918:	4413      	add	r3, r2
 801891a:	2200      	movs	r2, #0
 801891c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801891e:	7dfb      	ldrb	r3, [r7, #23]
 8018920:	3301      	adds	r3, #1
 8018922:	75fb      	strb	r3, [r7, #23]
 8018924:	7dfa      	ldrb	r2, [r7, #23]
 8018926:	79fb      	ldrb	r3, [r7, #7]
 8018928:	429a      	cmp	r2, r3
 801892a:	d3d3      	bcc.n	80188d4 <IntToUnicode+0x18>
  }
}
 801892c:	bf00      	nop
 801892e:	bf00      	nop
 8018930:	371c      	adds	r7, #28
 8018932:	46bd      	mov	sp, r7
 8018934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018938:	4770      	bx	lr

0801893a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801893a:	b480      	push	{r7}
 801893c:	b083      	sub	sp, #12
 801893e:	af00      	add	r7, sp, #0
 8018940:	4603      	mov	r3, r0
 8018942:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 //UNUSED(lun);
//	SD_Init()
  return (USBD_OK);
 8018944:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018946:	4618      	mov	r0, r3
 8018948:	370c      	adds	r7, #12
 801894a:	46bd      	mov	sp, r7
 801894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018950:	4770      	bx	lr
	...

08018954 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b084      	sub	sp, #16
 8018958:	af00      	add	r7, sp, #0
 801895a:	4603      	mov	r3, r0
 801895c:	60b9      	str	r1, [r7, #8]
 801895e:	607a      	str	r2, [r7, #4]
 8018960:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  //UNUSED(lun);
     SD_GetCardInfo(&SDCardInfo);
 8018962:	4809      	ldr	r0, [pc, #36]	; (8018988 <STORAGE_GetCapacity_FS+0x34>)
 8018964:	f7ff f956 	bl	8017c14 <SD_GetCardInfo>
     *block_num = SDCardInfo.LogBlockNbr - 1;
 8018968:	4b07      	ldr	r3, [pc, #28]	; (8018988 <STORAGE_GetCapacity_FS+0x34>)
 801896a:	699b      	ldr	r3, [r3, #24]
 801896c:	1e5a      	subs	r2, r3, #1
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	601a      	str	r2, [r3, #0]
     *block_size = SDCardInfo.LogBlockSize;
 8018972:	4b05      	ldr	r3, [pc, #20]	; (8018988 <STORAGE_GetCapacity_FS+0x34>)
 8018974:	69db      	ldr	r3, [r3, #28]
 8018976:	b29a      	uxth	r2, r3
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801897c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801897e:	4618      	mov	r0, r3
 8018980:	3710      	adds	r7, #16
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}
 8018986:	bf00      	nop
 8018988:	24001064 	.word	0x24001064

0801898c <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801898c:	b480      	push	{r7}
 801898e:	b083      	sub	sp, #12
 8018990:	af00      	add	r7, sp, #0
 8018992:	4603      	mov	r3, r0
 8018994:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  //UNUSED(lun);

  return (USBD_OK);
 8018996:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018998:	4618      	mov	r0, r3
 801899a:	370c      	adds	r7, #12
 801899c:	46bd      	mov	sp, r7
 801899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a2:	4770      	bx	lr

080189a4 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80189a4:	b480      	push	{r7}
 80189a6:	b083      	sub	sp, #12
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	4603      	mov	r3, r0
 80189ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  //UNUSED(lun);

  return (USBD_OK);
 80189ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80189b0:	4618      	mov	r0, r3
 80189b2:	370c      	adds	r7, #12
 80189b4:	46bd      	mov	sp, r7
 80189b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ba:	4770      	bx	lr

080189bc <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b086      	sub	sp, #24
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	60b9      	str	r1, [r7, #8]
 80189c4:	607a      	str	r2, [r7, #4]
 80189c6:	461a      	mov	r2, r3
 80189c8:	4603      	mov	r3, r0
 80189ca:	73fb      	strb	r3, [r7, #15]
 80189cc:	4613      	mov	r3, r2
 80189ce:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t res=0;
 80189d0:	2300      	movs	r3, #0
 80189d2:	75fb      	strb	r3, [r7, #23]
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);

    res=SD_ReadDisk(buf,blk_addr,blk_len);
 80189d4:	89bb      	ldrh	r3, [r7, #12]
 80189d6:	461a      	mov	r2, r3
 80189d8:	6879      	ldr	r1, [r7, #4]
 80189da:	68b8      	ldr	r0, [r7, #8]
 80189dc:	f7ff f93c 	bl	8017c58 <SD_ReadDisk>
 80189e0:	4603      	mov	r3, r0
 80189e2:	75fb      	strb	r3, [r7, #23]

  return (res);
 80189e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 80189e8:	4618      	mov	r0, r3
 80189ea:	3718      	adds	r7, #24
 80189ec:	46bd      	mov	sp, r7
 80189ee:	bd80      	pop	{r7, pc}

080189f0 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b086      	sub	sp, #24
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	60b9      	str	r1, [r7, #8]
 80189f8:	607a      	str	r2, [r7, #4]
 80189fa:	461a      	mov	r2, r3
 80189fc:	4603      	mov	r3, r0
 80189fe:	73fb      	strb	r3, [r7, #15]
 8018a00:	4613      	mov	r3, r2
 8018a02:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t res=0;
 8018a04:	2300      	movs	r3, #0
 8018a06:	75fb      	strb	r3, [r7, #23]
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);

    res=SD_WriteDisk(buf,blk_addr,blk_len);
 8018a08:	89bb      	ldrh	r3, [r7, #12]
 8018a0a:	461a      	mov	r2, r3
 8018a0c:	6879      	ldr	r1, [r7, #4]
 8018a0e:	68b8      	ldr	r0, [r7, #8]
 8018a10:	f7ff f958 	bl	8017cc4 <SD_WriteDisk>
 8018a14:	4603      	mov	r3, r0
 8018a16:	75fb      	strb	r3, [r7, #23]


  return (res);
 8018a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	3718      	adds	r7, #24
 8018a20:	46bd      	mov	sp, r7
 8018a22:	bd80      	pop	{r7, pc}

08018a24 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018a24:	b480      	push	{r7}
 8018a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018a28:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a32:	4770      	bx	lr

08018a34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b0ba      	sub	sp, #232	; 0xe8
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018a3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8018a40:	2200      	movs	r2, #0
 8018a42:	601a      	str	r2, [r3, #0]
 8018a44:	605a      	str	r2, [r3, #4]
 8018a46:	609a      	str	r2, [r3, #8]
 8018a48:	60da      	str	r2, [r3, #12]
 8018a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018a4c:	f107 0310 	add.w	r3, r7, #16
 8018a50:	22c0      	movs	r2, #192	; 0xc0
 8018a52:	2100      	movs	r1, #0
 8018a54:	4618      	mov	r0, r3
 8018a56:	f002 faf1 	bl	801b03c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	4a2c      	ldr	r2, [pc, #176]	; (8018b10 <HAL_PCD_MspInit+0xdc>)
 8018a60:	4293      	cmp	r3, r2
 8018a62:	d151      	bne.n	8018b08 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018a64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8018a68:	f04f 0300 	mov.w	r3, #0
 8018a6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018a70:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8018a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018a78:	f107 0310 	add.w	r3, r7, #16
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	f7ef ff57 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8018a82:	4603      	mov	r3, r0
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d001      	beq.n	8018a8c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8018a88:	f7e8 f88e 	bl	8000ba8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8018a8c:	f7ee ff06 	bl	800789c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018a90:	4b20      	ldr	r3, [pc, #128]	; (8018b14 <HAL_PCD_MspInit+0xe0>)
 8018a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018a96:	4a1f      	ldr	r2, [pc, #124]	; (8018b14 <HAL_PCD_MspInit+0xe0>)
 8018a98:	f043 0301 	orr.w	r3, r3, #1
 8018a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018aa0:	4b1c      	ldr	r3, [pc, #112]	; (8018b14 <HAL_PCD_MspInit+0xe0>)
 8018aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018aa6:	f003 0301 	and.w	r3, r3, #1
 8018aaa:	60fb      	str	r3, [r7, #12]
 8018aac:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8018aae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018ab6:	2302      	movs	r3, #2
 8018ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018abc:	2300      	movs	r3, #0
 8018abe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8018ac2:	2302      	movs	r3, #2
 8018ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018ac8:	230a      	movs	r3, #10
 8018aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018ace:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	4810      	ldr	r0, [pc, #64]	; (8018b18 <HAL_PCD_MspInit+0xe4>)
 8018ad6:	f7ec fbe9 	bl	80052ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018ada:	4b0e      	ldr	r3, [pc, #56]	; (8018b14 <HAL_PCD_MspInit+0xe0>)
 8018adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018ae0:	4a0c      	ldr	r2, [pc, #48]	; (8018b14 <HAL_PCD_MspInit+0xe0>)
 8018ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018ae6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8018aea:	4b0a      	ldr	r3, [pc, #40]	; (8018b14 <HAL_PCD_MspInit+0xe0>)
 8018aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018af4:	60bb      	str	r3, [r7, #8]
 8018af6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 8018af8:	2200      	movs	r2, #0
 8018afa:	2102      	movs	r1, #2
 8018afc:	2065      	movs	r0, #101	; 0x65
 8018afe:	f7e8 fd70 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018b02:	2065      	movs	r0, #101	; 0x65
 8018b04:	f7e8 fd87 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018b08:	bf00      	nop
 8018b0a:	37e8      	adds	r7, #232	; 0xe8
 8018b0c:	46bd      	mov	sp, r7
 8018b0e:	bd80      	pop	{r7, pc}
 8018b10:	40080000 	.word	0x40080000
 8018b14:	58024400 	.word	0x58024400
 8018b18:	58020000 	.word	0x58020000

08018b1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b082      	sub	sp, #8
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018b30:	4619      	mov	r1, r3
 8018b32:	4610      	mov	r0, r2
 8018b34:	f7fa f8b3 	bl	8012c9e <USBD_LL_SetupStage>
}
 8018b38:	bf00      	nop
 8018b3a:	3708      	adds	r7, #8
 8018b3c:	46bd      	mov	sp, r7
 8018b3e:	bd80      	pop	{r7, pc}

08018b40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b082      	sub	sp, #8
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
 8018b48:	460b      	mov	r3, r1
 8018b4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018b52:	78fa      	ldrb	r2, [r7, #3]
 8018b54:	6879      	ldr	r1, [r7, #4]
 8018b56:	4613      	mov	r3, r2
 8018b58:	00db      	lsls	r3, r3, #3
 8018b5a:	4413      	add	r3, r2
 8018b5c:	009b      	lsls	r3, r3, #2
 8018b5e:	440b      	add	r3, r1
 8018b60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8018b64:	681a      	ldr	r2, [r3, #0]
 8018b66:	78fb      	ldrb	r3, [r7, #3]
 8018b68:	4619      	mov	r1, r3
 8018b6a:	f7fa f8ed 	bl	8012d48 <USBD_LL_DataOutStage>
}
 8018b6e:	bf00      	nop
 8018b70:	3708      	adds	r7, #8
 8018b72:	46bd      	mov	sp, r7
 8018b74:	bd80      	pop	{r7, pc}

08018b76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b76:	b580      	push	{r7, lr}
 8018b78:	b082      	sub	sp, #8
 8018b7a:	af00      	add	r7, sp, #0
 8018b7c:	6078      	str	r0, [r7, #4]
 8018b7e:	460b      	mov	r3, r1
 8018b80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018b88:	78fa      	ldrb	r2, [r7, #3]
 8018b8a:	6879      	ldr	r1, [r7, #4]
 8018b8c:	4613      	mov	r3, r2
 8018b8e:	00db      	lsls	r3, r3, #3
 8018b90:	4413      	add	r3, r2
 8018b92:	009b      	lsls	r3, r3, #2
 8018b94:	440b      	add	r3, r1
 8018b96:	3348      	adds	r3, #72	; 0x48
 8018b98:	681a      	ldr	r2, [r3, #0]
 8018b9a:	78fb      	ldrb	r3, [r7, #3]
 8018b9c:	4619      	mov	r1, r3
 8018b9e:	f7fa f986 	bl	8012eae <USBD_LL_DataInStage>
}
 8018ba2:	bf00      	nop
 8018ba4:	3708      	adds	r7, #8
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}

08018baa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018baa:	b580      	push	{r7, lr}
 8018bac:	b082      	sub	sp, #8
 8018bae:	af00      	add	r7, sp, #0
 8018bb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7fa fadf 	bl	801317c <USBD_LL_SOF>
}
 8018bbe:	bf00      	nop
 8018bc0:	3708      	adds	r7, #8
 8018bc2:	46bd      	mov	sp, r7
 8018bc4:	bd80      	pop	{r7, pc}

08018bc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018bc6:	b580      	push	{r7, lr}
 8018bc8:	b084      	sub	sp, #16
 8018bca:	af00      	add	r7, sp, #0
 8018bcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018bce:	2301      	movs	r3, #1
 8018bd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	691b      	ldr	r3, [r3, #16]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d102      	bne.n	8018be0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018bda:	2300      	movs	r3, #0
 8018bdc:	73fb      	strb	r3, [r7, #15]
 8018bde:	e008      	b.n	8018bf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	691b      	ldr	r3, [r3, #16]
 8018be4:	2b02      	cmp	r3, #2
 8018be6:	d102      	bne.n	8018bee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018be8:	2301      	movs	r3, #1
 8018bea:	73fb      	strb	r3, [r7, #15]
 8018bec:	e001      	b.n	8018bf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018bee:	f7e7 ffdb 	bl	8000ba8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018bf8:	7bfa      	ldrb	r2, [r7, #15]
 8018bfa:	4611      	mov	r1, r2
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	f7fa fa79 	bl	80130f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f7fa fa02 	bl	8013012 <USBD_LL_Reset>
}
 8018c0e:	bf00      	nop
 8018c10:	3710      	adds	r7, #16
 8018c12:	46bd      	mov	sp, r7
 8018c14:	bd80      	pop	{r7, pc}
	...

08018c18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b082      	sub	sp, #8
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7fa fa74 	bl	8013114 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	687a      	ldr	r2, [r7, #4]
 8018c38:	6812      	ldr	r2, [r2, #0]
 8018c3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018c3e:	f043 0301 	orr.w	r3, r3, #1
 8018c42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	6a1b      	ldr	r3, [r3, #32]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d005      	beq.n	8018c58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018c4c:	4b04      	ldr	r3, [pc, #16]	; (8018c60 <HAL_PCD_SuspendCallback+0x48>)
 8018c4e:	691b      	ldr	r3, [r3, #16]
 8018c50:	4a03      	ldr	r2, [pc, #12]	; (8018c60 <HAL_PCD_SuspendCallback+0x48>)
 8018c52:	f043 0306 	orr.w	r3, r3, #6
 8018c56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018c58:	bf00      	nop
 8018c5a:	3708      	adds	r7, #8
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	e000ed00 	.word	0xe000ed00

08018c64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018c72:	4618      	mov	r0, r3
 8018c74:	f7fa fa6a 	bl	801314c <USBD_LL_Resume>
}
 8018c78:	bf00      	nop
 8018c7a:	3708      	adds	r7, #8
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}

08018c80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b082      	sub	sp, #8
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
 8018c88:	460b      	mov	r3, r1
 8018c8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018c92:	78fa      	ldrb	r2, [r7, #3]
 8018c94:	4611      	mov	r1, r2
 8018c96:	4618      	mov	r0, r3
 8018c98:	f7fa fae1 	bl	801325e <USBD_LL_IsoOUTIncomplete>
}
 8018c9c:	bf00      	nop
 8018c9e:	3708      	adds	r7, #8
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bd80      	pop	{r7, pc}

08018ca4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b082      	sub	sp, #8
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	460b      	mov	r3, r1
 8018cae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018cb6:	78fa      	ldrb	r2, [r7, #3]
 8018cb8:	4611      	mov	r1, r2
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f7fa fa9d 	bl	80131fa <USBD_LL_IsoINIncomplete>
}
 8018cc0:	bf00      	nop
 8018cc2:	3708      	adds	r7, #8
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	bd80      	pop	{r7, pc}

08018cc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b082      	sub	sp, #8
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7fa faf3 	bl	80132c2 <USBD_LL_DevConnected>
}
 8018cdc:	bf00      	nop
 8018cde:	3708      	adds	r7, #8
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	bd80      	pop	{r7, pc}

08018ce4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b082      	sub	sp, #8
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7fa faf0 	bl	80132d8 <USBD_LL_DevDisconnected>
}
 8018cf8:	bf00      	nop
 8018cfa:	3708      	adds	r7, #8
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd80      	pop	{r7, pc}

08018d00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b082      	sub	sp, #8
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	781b      	ldrb	r3, [r3, #0]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d140      	bne.n	8018d92 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018d10:	4a22      	ldr	r2, [pc, #136]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	4a20      	ldr	r2, [pc, #128]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d1c:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018d20:	4b1e      	ldr	r3, [pc, #120]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d22:	4a1f      	ldr	r2, [pc, #124]	; (8018da0 <USBD_LL_Init+0xa0>)
 8018d24:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018d26:	4b1d      	ldr	r3, [pc, #116]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d28:	2204      	movs	r2, #4
 8018d2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018d2c:	4b1b      	ldr	r3, [pc, #108]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d2e:	2202      	movs	r2, #2
 8018d30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018d32:	4b1a      	ldr	r3, [pc, #104]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d34:	2200      	movs	r2, #0
 8018d36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018d38:	4b18      	ldr	r3, [pc, #96]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d3a:	2202      	movs	r2, #2
 8018d3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018d3e:	4b17      	ldr	r3, [pc, #92]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d40:	2200      	movs	r2, #0
 8018d42:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018d44:	4b15      	ldr	r3, [pc, #84]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d46:	2200      	movs	r2, #0
 8018d48:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018d4a:	4b14      	ldr	r3, [pc, #80]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d4c:	2200      	movs	r2, #0
 8018d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018d50:	4b12      	ldr	r3, [pc, #72]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d52:	2200      	movs	r2, #0
 8018d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018d56:	4b11      	ldr	r3, [pc, #68]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d58:	2200      	movs	r2, #0
 8018d5a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018d5c:	480f      	ldr	r0, [pc, #60]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d5e:	f7ed fa7c 	bl	800625a <HAL_PCD_Init>
 8018d62:	4603      	mov	r3, r0
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d001      	beq.n	8018d6c <USBD_LL_Init+0x6c>
  {
    Error_Handler( );
 8018d68:	f7e7 ff1e 	bl	8000ba8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018d6c:	2180      	movs	r1, #128	; 0x80
 8018d6e:	480b      	ldr	r0, [pc, #44]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d70:	f7ee fd19 	bl	80077a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018d74:	2240      	movs	r2, #64	; 0x40
 8018d76:	2100      	movs	r1, #0
 8018d78:	4808      	ldr	r0, [pc, #32]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d7a:	f7ee fccd 	bl	8007718 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8018d7e:	2240      	movs	r2, #64	; 0x40
 8018d80:	2101      	movs	r1, #1
 8018d82:	4806      	ldr	r0, [pc, #24]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d84:	f7ee fcc8 	bl	8007718 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 8018d88:	2240      	movs	r2, #64	; 0x40
 8018d8a:	2103      	movs	r1, #3
 8018d8c:	4803      	ldr	r0, [pc, #12]	; (8018d9c <USBD_LL_Init+0x9c>)
 8018d8e:	f7ee fcc3 	bl	8007718 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018d92:	2300      	movs	r3, #0
}
 8018d94:	4618      	mov	r0, r3
 8018d96:	3708      	adds	r7, #8
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	bd80      	pop	{r7, pc}
 8018d9c:	24002668 	.word	0x24002668
 8018da0:	40080000 	.word	0x40080000

08018da4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b084      	sub	sp, #16
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018dac:	2300      	movs	r3, #0
 8018dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018db0:	2300      	movs	r3, #0
 8018db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8018dba:	4618      	mov	r0, r3
 8018dbc:	f7ed fb71 	bl	80064a2 <HAL_PCD_Start>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018dc4:	7bfb      	ldrb	r3, [r7, #15]
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f000 f94a 	bl	8019060 <USBD_Get_USB_Status>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	3710      	adds	r7, #16
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bd80      	pop	{r7, pc}

08018dda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018dda:	b580      	push	{r7, lr}
 8018ddc:	b084      	sub	sp, #16
 8018dde:	af00      	add	r7, sp, #0
 8018de0:	6078      	str	r0, [r7, #4]
 8018de2:	4608      	mov	r0, r1
 8018de4:	4611      	mov	r1, r2
 8018de6:	461a      	mov	r2, r3
 8018de8:	4603      	mov	r3, r0
 8018dea:	70fb      	strb	r3, [r7, #3]
 8018dec:	460b      	mov	r3, r1
 8018dee:	70bb      	strb	r3, [r7, #2]
 8018df0:	4613      	mov	r3, r2
 8018df2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018df4:	2300      	movs	r3, #0
 8018df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8018e02:	78bb      	ldrb	r3, [r7, #2]
 8018e04:	883a      	ldrh	r2, [r7, #0]
 8018e06:	78f9      	ldrb	r1, [r7, #3]
 8018e08:	f7ee f871 	bl	8006eee <HAL_PCD_EP_Open>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e10:	7bfb      	ldrb	r3, [r7, #15]
 8018e12:	4618      	mov	r0, r3
 8018e14:	f000 f924 	bl	8019060 <USBD_Get_USB_Status>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e1e:	4618      	mov	r0, r3
 8018e20:	3710      	adds	r7, #16
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}

08018e26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e26:	b580      	push	{r7, lr}
 8018e28:	b084      	sub	sp, #16
 8018e2a:	af00      	add	r7, sp, #0
 8018e2c:	6078      	str	r0, [r7, #4]
 8018e2e:	460b      	mov	r3, r1
 8018e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e32:	2300      	movs	r3, #0
 8018e34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e36:	2300      	movs	r3, #0
 8018e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8018e40:	78fa      	ldrb	r2, [r7, #3]
 8018e42:	4611      	mov	r1, r2
 8018e44:	4618      	mov	r0, r3
 8018e46:	f7ee f8ba 	bl	8006fbe <HAL_PCD_EP_Close>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e4e:	7bfb      	ldrb	r3, [r7, #15]
 8018e50:	4618      	mov	r0, r3
 8018e52:	f000 f905 	bl	8019060 <USBD_Get_USB_Status>
 8018e56:	4603      	mov	r3, r0
 8018e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	3710      	adds	r7, #16
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}

08018e64 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b084      	sub	sp, #16
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	460b      	mov	r3, r1
 8018e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e70:	2300      	movs	r3, #0
 8018e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e74:	2300      	movs	r3, #0
 8018e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8018e7e:	78fa      	ldrb	r2, [r7, #3]
 8018e80:	4611      	mov	r1, r2
 8018e82:	4618      	mov	r0, r3
 8018e84:	f7ee fa5f 	bl	8007346 <HAL_PCD_EP_Flush>
 8018e88:	4603      	mov	r3, r0
 8018e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e8c:	7bfb      	ldrb	r3, [r7, #15]
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f000 f8e6 	bl	8019060 <USBD_Get_USB_Status>
 8018e94:	4603      	mov	r3, r0
 8018e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	3710      	adds	r7, #16
 8018e9e:	46bd      	mov	sp, r7
 8018ea0:	bd80      	pop	{r7, pc}

08018ea2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018ea2:	b580      	push	{r7, lr}
 8018ea4:	b084      	sub	sp, #16
 8018ea6:	af00      	add	r7, sp, #0
 8018ea8:	6078      	str	r0, [r7, #4]
 8018eaa:	460b      	mov	r3, r1
 8018eac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8018ebc:	78fa      	ldrb	r2, [r7, #3]
 8018ebe:	4611      	mov	r1, r2
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f7ee f955 	bl	8007170 <HAL_PCD_EP_SetStall>
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018eca:	7bfb      	ldrb	r3, [r7, #15]
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f000 f8c7 	bl	8019060 <USBD_Get_USB_Status>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ed6:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3710      	adds	r7, #16
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}

08018ee0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b084      	sub	sp, #16
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
 8018ee8:	460b      	mov	r3, r1
 8018eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018eec:	2300      	movs	r3, #0
 8018eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8018efa:	78fa      	ldrb	r2, [r7, #3]
 8018efc:	4611      	mov	r1, r2
 8018efe:	4618      	mov	r0, r3
 8018f00:	f7ee f99a 	bl	8007238 <HAL_PCD_EP_ClrStall>
 8018f04:	4603      	mov	r3, r0
 8018f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f08:	7bfb      	ldrb	r3, [r7, #15]
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f000 f8a8 	bl	8019060 <USBD_Get_USB_Status>
 8018f10:	4603      	mov	r3, r0
 8018f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f16:	4618      	mov	r0, r3
 8018f18:	3710      	adds	r7, #16
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bd80      	pop	{r7, pc}

08018f1e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f1e:	b480      	push	{r7}
 8018f20:	b085      	sub	sp, #20
 8018f22:	af00      	add	r7, sp, #0
 8018f24:	6078      	str	r0, [r7, #4]
 8018f26:	460b      	mov	r3, r1
 8018f28:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8018f30:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	da0b      	bge.n	8018f52 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018f3a:	78fb      	ldrb	r3, [r7, #3]
 8018f3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018f40:	68f9      	ldr	r1, [r7, #12]
 8018f42:	4613      	mov	r3, r2
 8018f44:	00db      	lsls	r3, r3, #3
 8018f46:	4413      	add	r3, r2
 8018f48:	009b      	lsls	r3, r3, #2
 8018f4a:	440b      	add	r3, r1
 8018f4c:	333e      	adds	r3, #62	; 0x3e
 8018f4e:	781b      	ldrb	r3, [r3, #0]
 8018f50:	e00b      	b.n	8018f6a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018f52:	78fb      	ldrb	r3, [r7, #3]
 8018f54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018f58:	68f9      	ldr	r1, [r7, #12]
 8018f5a:	4613      	mov	r3, r2
 8018f5c:	00db      	lsls	r3, r3, #3
 8018f5e:	4413      	add	r3, r2
 8018f60:	009b      	lsls	r3, r3, #2
 8018f62:	440b      	add	r3, r1
 8018f64:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018f68:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	3714      	adds	r7, #20
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f74:	4770      	bx	lr

08018f76 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018f76:	b580      	push	{r7, lr}
 8018f78:	b084      	sub	sp, #16
 8018f7a:	af00      	add	r7, sp, #0
 8018f7c:	6078      	str	r0, [r7, #4]
 8018f7e:	460b      	mov	r3, r1
 8018f80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f82:	2300      	movs	r3, #0
 8018f84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f86:	2300      	movs	r3, #0
 8018f88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8018f90:	78fa      	ldrb	r2, [r7, #3]
 8018f92:	4611      	mov	r1, r2
 8018f94:	4618      	mov	r0, r3
 8018f96:	f7ed ff85 	bl	8006ea4 <HAL_PCD_SetAddress>
 8018f9a:	4603      	mov	r3, r0
 8018f9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f9e:	7bfb      	ldrb	r3, [r7, #15]
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	f000 f85d 	bl	8019060 <USBD_Get_USB_Status>
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018faa:	7bbb      	ldrb	r3, [r7, #14]
}
 8018fac:	4618      	mov	r0, r3
 8018fae:	3710      	adds	r7, #16
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}

08018fb4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b086      	sub	sp, #24
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	60f8      	str	r0, [r7, #12]
 8018fbc:	607a      	str	r2, [r7, #4]
 8018fbe:	603b      	str	r3, [r7, #0]
 8018fc0:	460b      	mov	r3, r1
 8018fc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fc8:	2300      	movs	r3, #0
 8018fca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8018fd2:	7af9      	ldrb	r1, [r7, #11]
 8018fd4:	683b      	ldr	r3, [r7, #0]
 8018fd6:	687a      	ldr	r2, [r7, #4]
 8018fd8:	f7ee f88f 	bl	80070fa <HAL_PCD_EP_Transmit>
 8018fdc:	4603      	mov	r3, r0
 8018fde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fe0:	7dfb      	ldrb	r3, [r7, #23]
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f000 f83c 	bl	8019060 <USBD_Get_USB_Status>
 8018fe8:	4603      	mov	r3, r0
 8018fea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018fec:	7dbb      	ldrb	r3, [r7, #22]
}
 8018fee:	4618      	mov	r0, r3
 8018ff0:	3718      	adds	r7, #24
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	bd80      	pop	{r7, pc}

08018ff6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018ff6:	b580      	push	{r7, lr}
 8018ff8:	b086      	sub	sp, #24
 8018ffa:	af00      	add	r7, sp, #0
 8018ffc:	60f8      	str	r0, [r7, #12]
 8018ffe:	607a      	str	r2, [r7, #4]
 8019000:	603b      	str	r3, [r7, #0]
 8019002:	460b      	mov	r3, r1
 8019004:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019006:	2300      	movs	r3, #0
 8019008:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801900a:	2300      	movs	r3, #0
 801900c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8019014:	7af9      	ldrb	r1, [r7, #11]
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	687a      	ldr	r2, [r7, #4]
 801901a:	f7ee f81a 	bl	8007052 <HAL_PCD_EP_Receive>
 801901e:	4603      	mov	r3, r0
 8019020:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019022:	7dfb      	ldrb	r3, [r7, #23]
 8019024:	4618      	mov	r0, r3
 8019026:	f000 f81b 	bl	8019060 <USBD_Get_USB_Status>
 801902a:	4603      	mov	r3, r0
 801902c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801902e:	7dbb      	ldrb	r3, [r7, #22]
}
 8019030:	4618      	mov	r0, r3
 8019032:	3718      	adds	r7, #24
 8019034:	46bd      	mov	sp, r7
 8019036:	bd80      	pop	{r7, pc}

08019038 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b082      	sub	sp, #8
 801903c:	af00      	add	r7, sp, #0
 801903e:	6078      	str	r0, [r7, #4]
 8019040:	460b      	mov	r3, r1
 8019042:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801904a:	78fa      	ldrb	r2, [r7, #3]
 801904c:	4611      	mov	r1, r2
 801904e:	4618      	mov	r0, r3
 8019050:	f7ee f83b 	bl	80070ca <HAL_PCD_EP_GetRxCount>
 8019054:	4603      	mov	r3, r0
}
 8019056:	4618      	mov	r0, r3
 8019058:	3708      	adds	r7, #8
 801905a:	46bd      	mov	sp, r7
 801905c:	bd80      	pop	{r7, pc}
	...

08019060 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019060:	b480      	push	{r7}
 8019062:	b085      	sub	sp, #20
 8019064:	af00      	add	r7, sp, #0
 8019066:	4603      	mov	r3, r0
 8019068:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801906a:	2300      	movs	r3, #0
 801906c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801906e:	79fb      	ldrb	r3, [r7, #7]
 8019070:	2b03      	cmp	r3, #3
 8019072:	d817      	bhi.n	80190a4 <USBD_Get_USB_Status+0x44>
 8019074:	a201      	add	r2, pc, #4	; (adr r2, 801907c <USBD_Get_USB_Status+0x1c>)
 8019076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801907a:	bf00      	nop
 801907c:	0801908d 	.word	0x0801908d
 8019080:	08019093 	.word	0x08019093
 8019084:	08019099 	.word	0x08019099
 8019088:	0801909f 	.word	0x0801909f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801908c:	2300      	movs	r3, #0
 801908e:	73fb      	strb	r3, [r7, #15]
    break;
 8019090:	e00b      	b.n	80190aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019092:	2303      	movs	r3, #3
 8019094:	73fb      	strb	r3, [r7, #15]
    break;
 8019096:	e008      	b.n	80190aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019098:	2301      	movs	r3, #1
 801909a:	73fb      	strb	r3, [r7, #15]
    break;
 801909c:	e005      	b.n	80190aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801909e:	2303      	movs	r3, #3
 80190a0:	73fb      	strb	r3, [r7, #15]
    break;
 80190a2:	e002      	b.n	80190aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80190a4:	2303      	movs	r3, #3
 80190a6:	73fb      	strb	r3, [r7, #15]
    break;
 80190a8:	bf00      	nop
  }
  return usb_status;
 80190aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80190ac:	4618      	mov	r0, r3
 80190ae:	3714      	adds	r7, #20
 80190b0:	46bd      	mov	sp, r7
 80190b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b6:	4770      	bx	lr

080190b8 <camera_JPEG_init>:
    }

}

void camera_JPEG_init(void)
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b082      	sub	sp, #8
 80190bc:	af00      	add	r7, sp, #0
	uint8_t ret;
    ret  = ov5640_init();                                               /* 初始化OV5640模块 */
 80190be:	f001 fc01 	bl	801a8c4 <ov5640_init>
 80190c2:	4603      	mov	r3, r0
 80190c4:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_output_format(OV5640_OUTPUT_FORMAT_JPEG);   /* 设置OV5640输出JPEG图像数据 */
 80190c6:	2001      	movs	r0, #1
 80190c8:	f001 fb34 	bl	801a734 <ov5640_set_output_format>
 80190cc:	4603      	mov	r3, r0
 80190ce:	461a      	mov	r2, r3
 80190d0:	79fb      	ldrb	r3, [r7, #7]
 80190d2:	4413      	add	r3, r2
 80190d4:	71fb      	strb	r3, [r7, #7]
//    ret += ov5640_auto_focus_init();                                    /* 初始化OV5640模块自动对焦 */
//    ret += ov5640_auto_focus_continuance();                             /* OV5640模块持续自动对焦 */
    ret += ov5640_set_light_mode(OV5640_LIGHT_MODE_ADVANCED_AWB);   /* 设置OV5640模块灯光模式 */
 80190d6:	2000      	movs	r0, #0
 80190d8:	f000 faaa 	bl	8019630 <ov5640_set_light_mode>
 80190dc:	4603      	mov	r3, r0
 80190de:	461a      	mov	r2, r3
 80190e0:	79fb      	ldrb	r3, [r7, #7]
 80190e2:	4413      	add	r3, r2
 80190e4:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_color_saturation(OV5640_COLOR_SATURATION_4);  /* 设置OV5640模块色彩饱度 */
 80190e6:	2004      	movs	r0, #4
 80190e8:	f000 fbda 	bl	80198a0 <ov5640_set_color_saturation>
 80190ec:	4603      	mov	r3, r0
 80190ee:	461a      	mov	r2, r3
 80190f0:	79fb      	ldrb	r3, [r7, #7]
 80190f2:	4413      	add	r3, r2
 80190f4:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_brightness(OV5640_BRIGHTNESS_4);              /* 设置OV5640模块亮度 */
 80190f6:	2004      	movs	r0, #4
 80190f8:	f000 fce2 	bl	8019ac0 <ov5640_set_brightness>
 80190fc:	4603      	mov	r3, r0
 80190fe:	461a      	mov	r2, r3
 8019100:	79fb      	ldrb	r3, [r7, #7]
 8019102:	4413      	add	r3, r2
 8019104:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_contrast(OV5640_CONTRAST_4);                  /* 设置OV5640模块对比度 */
 8019106:	2004      	movs	r0, #4
 8019108:	f000 fdbc 	bl	8019c84 <ov5640_set_contrast>
 801910c:	4603      	mov	r3, r0
 801910e:	461a      	mov	r2, r3
 8019110:	79fb      	ldrb	r3, [r7, #7]
 8019112:	4413      	add	r3, r2
 8019114:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_hue(OV5640_HUE_6);                            /* 设置OV5640模块色相 */
 8019116:	2006      	movs	r0, #6
 8019118:	f000 fed2 	bl	8019ec0 <ov5640_set_hue>
 801911c:	4603      	mov	r3, r0
 801911e:	461a      	mov	r2, r3
 8019120:	79fb      	ldrb	r3, [r7, #7]
 8019122:	4413      	add	r3, r2
 8019124:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_special_effect(OV5640_SPECIAL_EFFECT_NORMAL); /* 设置OV5640模块特殊效果 */
 8019126:	2000      	movs	r0, #0
 8019128:	f001 f82e 	bl	801a188 <ov5640_set_special_effect>
 801912c:	4603      	mov	r3, r0
 801912e:	461a      	mov	r2, r3
 8019130:	79fb      	ldrb	r3, [r7, #7]
 8019132:	4413      	add	r3, r2
 8019134:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_exposure_level(OV5640_EXPOSURE_LEVEL_5);      /* 设置OV5640模块曝光度 */
 8019136:	2005      	movs	r0, #5
 8019138:	f001 f8c6 	bl	801a2c8 <ov5640_set_exposure_level>
 801913c:	4603      	mov	r3, r0
 801913e:	461a      	mov	r2, r3
 8019140:	79fb      	ldrb	r3, [r7, #7]
 8019142:	4413      	add	r3, r2
 8019144:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_sharpness_level(OV5640_SHARPNESS_OFF);        /* 设置OV5640模块锐度 */
 8019146:	2000      	movs	r0, #0
 8019148:	f001 fa3c 	bl	801a5c4 <ov5640_set_sharpness_level>
 801914c:	4603      	mov	r3, r0
 801914e:	461a      	mov	r2, r3
 8019150:	79fb      	ldrb	r3, [r7, #7]
 8019152:	4413      	add	r3, r2
 8019154:	71fb      	strb	r3, [r7, #7]
//    ret += ov5640_set_mirror_flip(OV5640_MIRROR_FLIP_1);            /* 设置OV5640模块镜像/翻转 */
//    ret += ov5640_set_test_pattern(OV5640_TEST_PATTERN_OFF);        /* 设置OV5640模块测试图案 */
//    ret += ov5640_set_pre_scaling_window(4, 0);
    ret += ov5640_set_output_size(IMAGE_WIDTH, IMAGE_HEIGHT);         /* 设置OV5640模块输出图像尺寸 */
 8019156:	21a0      	movs	r1, #160	; 0xa0
 8019158:	2080      	movs	r0, #128	; 0x80
 801915a:	f001 fb4d 	bl	801a7f8 <ov5640_set_output_size>
 801915e:	4603      	mov	r3, r0
 8019160:	461a      	mov	r2, r3
 8019162:	79fb      	ldrb	r3, [r7, #7]
 8019164:	4413      	add	r3, r2
 8019166:	71fb      	strb	r3, [r7, #7]
    if (ret != 0)
 8019168:	79fb      	ldrb	r3, [r7, #7]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d003      	beq.n	8019176 <camera_JPEG_init+0xbe>
    {
        printf("OV5640 init failed!\r\n");
 801916e:	4804      	ldr	r0, [pc, #16]	; (8019180 <camera_JPEG_init+0xc8>)
 8019170:	f001 fe4a 	bl	801ae08 <puts>
        while (1)
 8019174:	e7fe      	b.n	8019174 <camera_JPEG_init+0xbc>
        {

        }
    }

}
 8019176:	bf00      	nop
 8019178:	3708      	adds	r7, #8
 801917a:	46bd      	mov	sp, r7
 801917c:	bd80      	pop	{r7, pc}
 801917e:	bf00      	nop
 8019180:	0801bbc8 	.word	0x0801bbc8

08019184 <HAL_DCMI_FrameEventCallback>:
 * @brief      DCMI接口帧中断回调函数
 * @param
 * @retval
 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b082      	sub	sp, #8
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 801918c:	b672      	cpsid	i
}
 801918e:	bf00      	nop
	__disable_irq();
    HAL_DCMI_Suspend(hdcmi); // 拍照完成，挂起 DCMI
 8019190:	6878      	ldr	r0, [r7, #4]
 8019192:	f7e8 fbf7 	bl	8001984 <HAL_DCMI_Suspend>
//    HAL_DCMI_Stop(hdcmi);    // 拍照完成，停止 DMA传输
	cam.frame_sta = 1;  //帧中断完成标志置位
 8019196:	4b04      	ldr	r3, [pc, #16]	; (80191a8 <HAL_DCMI_FrameEventCallback+0x24>)
 8019198:	2201      	movs	r2, #1
 801919a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 801919c:	b662      	cpsie	i
}
 801919e:	bf00      	nop
	__enable_irq();
}
 80191a0:	bf00      	nop
 80191a2:	3708      	adds	r7, #8
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bd80      	pop	{r7, pc}
 80191a8:	24007b74 	.word	0x24007b74

080191ac <ov5640_dcmi_start>:
 * @param       dts_addr        : 帧数据的接收目的地址
 *              len             : 传输的帧数据大小
 * @retval      无
 */
void ov5640_dcmi_start(ov5640_output_format_t mode,uint32_t dts_addr,uint32_t len)
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b084      	sub	sp, #16
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	4603      	mov	r3, r0
 80191b4:	60b9      	str	r1, [r7, #8]
 80191b6:	607a      	str	r2, [r7, #4]
 80191b8:	73fb      	strb	r3, [r7, #15]
	/* 清空帧接收完成标记
	 * 使能DCMI帧接收中断
	 */
	cam.frame_sta = 0;
 80191ba:	4b23      	ldr	r3, [pc, #140]	; (8019248 <ov5640_dcmi_start+0x9c>)
 80191bc:	2200      	movs	r2, #0
 80191be:	701a      	strb	r2, [r3, #0]
	if(mode==OV5640_OUTPUT_FORMAT_RGB565)
 80191c0:	7bfb      	ldrb	r3, [r7, #15]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d118      	bne.n	80191f8 <ov5640_dcmi_start+0x4c>
	{
		hdcmi.DMA_Handle->Init.MemInc = DMA_MINC_ENABLE;
 80191c6:	4b21      	ldr	r3, [pc, #132]	; (801924c <ov5640_dcmi_start+0xa0>)
 80191c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80191ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80191ce:	611a      	str	r2, [r3, #16]
		hdcmi.DMA_Handle->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80191d0:	4b1e      	ldr	r3, [pc, #120]	; (801924c <ov5640_dcmi_start+0xa0>)
 80191d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80191d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80191d8:	619a      	str	r2, [r3, #24]
	    __HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
 80191da:	4b1c      	ldr	r3, [pc, #112]	; (801924c <ov5640_dcmi_start+0xa0>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	68da      	ldr	r2, [r3, #12]
 80191e0:	4b1a      	ldr	r3, [pc, #104]	; (801924c <ov5640_dcmi_start+0xa0>)
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	f042 0201 	orr.w	r2, r2, #1
 80191e8:	60da      	str	r2, [r3, #12]
		HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, dts_addr, len);
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	68ba      	ldr	r2, [r7, #8]
 80191ee:	2102      	movs	r1, #2
 80191f0:	4816      	ldr	r0, [pc, #88]	; (801924c <ov5640_dcmi_start+0xa0>)
 80191f2:	f7e8 faa5 	bl	8001740 <HAL_DCMI_Start_DMA>
 80191f6:	e01a      	b.n	801922e <ov5640_dcmi_start+0x82>
	}
	else if(mode==OV5640_OUTPUT_FORMAT_JPEG)
 80191f8:	7bfb      	ldrb	r3, [r7, #15]
 80191fa:	2b01      	cmp	r3, #1
 80191fc:	d117      	bne.n	801922e <ov5640_dcmi_start+0x82>
	{
		hdcmi.DMA_Handle->Init.MemInc = DMA_MINC_ENABLE;
 80191fe:	4b13      	ldr	r3, [pc, #76]	; (801924c <ov5640_dcmi_start+0xa0>)
 8019200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019206:	611a      	str	r2, [r3, #16]
		hdcmi.DMA_Handle->Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8019208:	4b10      	ldr	r3, [pc, #64]	; (801924c <ov5640_dcmi_start+0xa0>)
 801920a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801920c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019210:	619a      	str	r2, [r3, #24]
		__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
 8019212:	4b0e      	ldr	r3, [pc, #56]	; (801924c <ov5640_dcmi_start+0xa0>)
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	68da      	ldr	r2, [r3, #12]
 8019218:	4b0c      	ldr	r3, [pc, #48]	; (801924c <ov5640_dcmi_start+0xa0>)
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	f042 0201 	orr.w	r2, r2, #1
 8019220:	60da      	str	r2, [r3, #12]

		HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)dts_addr, len);
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	68ba      	ldr	r2, [r7, #8]
 8019226:	2102      	movs	r1, #2
 8019228:	4808      	ldr	r0, [pc, #32]	; (801924c <ov5640_dcmi_start+0xa0>)
 801922a:	f7e8 fa89 	bl	8001740 <HAL_DCMI_Start_DMA>
	}

	/* 等待传输完成 */
	while (cam.frame_sta == 0);
 801922e:	bf00      	nop
 8019230:	4b05      	ldr	r3, [pc, #20]	; (8019248 <ov5640_dcmi_start+0x9c>)
 8019232:	781b      	ldrb	r3, [r3, #0]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d0fb      	beq.n	8019230 <ov5640_dcmi_start+0x84>
	HAL_DCMI_Stop(&hdcmi);
 8019238:	4804      	ldr	r0, [pc, #16]	; (801924c <ov5640_dcmi_start+0xa0>)
 801923a:	f7e8 fb43 	bl	80018c4 <HAL_DCMI_Stop>
}
 801923e:	bf00      	nop
 8019240:	3710      	adds	r7, #16
 8019242:	46bd      	mov	sp, r7
 8019244:	bd80      	pop	{r7, pc}
 8019246:	bf00      	nop
 8019248:	24007b74 	.word	0x24007b74
 801924c:	240008b4 	.word	0x240008b4

08019250 <JPEG_run>:
}



void JPEG_run(void) //目前测试图像会有断层，未找到解决办法
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b082      	sub	sp, #8
 8019254:	af00      	add	r7, sp, #0
	p_jpeg_buf = (uint8_t *)g_jpeg_buf;
 8019256:	4b5d      	ldr	r3, [pc, #372]	; (80193cc <JPEG_run+0x17c>)
 8019258:	4a5d      	ldr	r2, [pc, #372]	; (80193d0 <JPEG_run+0x180>)
 801925a:	601a      	str	r2, [r3, #0]
    jpeg_len = JPEG_BUF_SIZE / (sizeof(uint32_t));
 801925c:	4b5d      	ldr	r3, [pc, #372]	; (80193d4 <JPEG_run+0x184>)
 801925e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8019262:	601a      	str	r2, [r3, #0]
    uint16_t packet_num,remain_index,i;

    memset((void *)g_jpeg_buf, 0, JPEG_BUF_SIZE);
 8019264:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8019268:	2100      	movs	r1, #0
 801926a:	4859      	ldr	r0, [pc, #356]	; (80193d0 <JPEG_run+0x180>)
 801926c:	f001 fee6 	bl	801b03c <memset>

   ov5640_dcmi_start(OV5640_OUTPUT_FORMAT_JPEG,(uint32_t)g_jpeg_buf,160*120/sizeof(uint32_t) );
 8019270:	4b57      	ldr	r3, [pc, #348]	; (80193d0 <JPEG_run+0x180>)
 8019272:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8019276:	4619      	mov	r1, r3
 8019278:	2001      	movs	r0, #1
 801927a:	f7ff ff97 	bl	80191ac <ov5640_dcmi_start>
  /* 获取JPEG图像数据起始位置 */
  jpeg_start_index = 0xffffffff;
 801927e:	4b56      	ldr	r3, [pc, #344]	; (80193d8 <JPEG_run+0x188>)
 8019280:	f04f 32ff 	mov.w	r2, #4294967295
 8019284:	601a      	str	r2, [r3, #0]
  do
  {
	  for (jpeg_index=0; jpeg_index<JPEG_BUF_SIZE - 1; jpeg_index++)
 8019286:	4b55      	ldr	r3, [pc, #340]	; (80193dc <JPEG_run+0x18c>)
 8019288:	2200      	movs	r2, #0
 801928a:	601a      	str	r2, [r3, #0]
 801928c:	e023      	b.n	80192d6 <JPEG_run+0x86>
	  {
		   if ((p_jpeg_buf[jpeg_index] == 0xFF) && (p_jpeg_buf[jpeg_index + 1] == 0xD8)&& (p_jpeg_buf[jpeg_index + 2] == 0xFF))
 801928e:	4b4f      	ldr	r3, [pc, #316]	; (80193cc <JPEG_run+0x17c>)
 8019290:	681a      	ldr	r2, [r3, #0]
 8019292:	4b52      	ldr	r3, [pc, #328]	; (80193dc <JPEG_run+0x18c>)
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	4413      	add	r3, r2
 8019298:	781b      	ldrb	r3, [r3, #0]
 801929a:	2bff      	cmp	r3, #255	; 0xff
 801929c:	d116      	bne.n	80192cc <JPEG_run+0x7c>
 801929e:	4b4b      	ldr	r3, [pc, #300]	; (80193cc <JPEG_run+0x17c>)
 80192a0:	681a      	ldr	r2, [r3, #0]
 80192a2:	4b4e      	ldr	r3, [pc, #312]	; (80193dc <JPEG_run+0x18c>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	3301      	adds	r3, #1
 80192a8:	4413      	add	r3, r2
 80192aa:	781b      	ldrb	r3, [r3, #0]
 80192ac:	2bd8      	cmp	r3, #216	; 0xd8
 80192ae:	d10d      	bne.n	80192cc <JPEG_run+0x7c>
 80192b0:	4b46      	ldr	r3, [pc, #280]	; (80193cc <JPEG_run+0x17c>)
 80192b2:	681a      	ldr	r2, [r3, #0]
 80192b4:	4b49      	ldr	r3, [pc, #292]	; (80193dc <JPEG_run+0x18c>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	3302      	adds	r3, #2
 80192ba:	4413      	add	r3, r2
 80192bc:	781b      	ldrb	r3, [r3, #0]
 80192be:	2bff      	cmp	r3, #255	; 0xff
 80192c0:	d104      	bne.n	80192cc <JPEG_run+0x7c>
		   {
//			   HAL_GPIO_TogglePin(LED_G_GPIO_Port,LED_G_Pin);
			   jpeg_start_index = jpeg_index;
 80192c2:	4b46      	ldr	r3, [pc, #280]	; (80193dc <JPEG_run+0x18c>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	4a44      	ldr	r2, [pc, #272]	; (80193d8 <JPEG_run+0x188>)
 80192c8:	6013      	str	r3, [r2, #0]
			   break;
 80192ca:	e00a      	b.n	80192e2 <JPEG_run+0x92>
	  for (jpeg_index=0; jpeg_index<JPEG_BUF_SIZE - 1; jpeg_index++)
 80192cc:	4b43      	ldr	r3, [pc, #268]	; (80193dc <JPEG_run+0x18c>)
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	3301      	adds	r3, #1
 80192d2:	4a42      	ldr	r2, [pc, #264]	; (80193dc <JPEG_run+0x18c>)
 80192d4:	6013      	str	r3, [r2, #0]
 80192d6:	4b41      	ldr	r3, [pc, #260]	; (80193dc <JPEG_run+0x18c>)
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	f644 72fe 	movw	r2, #20478	; 0x4ffe
 80192de:	4293      	cmp	r3, r2
 80192e0:	d9d5      	bls.n	801928e <JPEG_run+0x3e>
		   }
	  }
  }while(jpeg_start_index==0xffffffff);
 80192e2:	4b3d      	ldr	r3, [pc, #244]	; (80193d8 <JPEG_run+0x188>)
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192ea:	d0cc      	beq.n	8019286 <JPEG_run+0x36>


//   /* 获取JPEG图像数据结束位置 */
  jpeg_end_index = 0xffffffff;
 80192ec:	4b3c      	ldr	r3, [pc, #240]	; (80193e0 <JPEG_run+0x190>)
 80192ee:	f04f 32ff 	mov.w	r2, #4294967295
 80192f2:	601a      	str	r2, [r3, #0]
  do
  {
	  for (jpeg_index=0; jpeg_index<JPEG_BUF_SIZE - 1; jpeg_index++)
 80192f4:	4b39      	ldr	r3, [pc, #228]	; (80193dc <JPEG_run+0x18c>)
 80192f6:	2200      	movs	r2, #0
 80192f8:	601a      	str	r2, [r3, #0]
 80192fa:	e01a      	b.n	8019332 <JPEG_run+0xe2>
	  {
		   if ((p_jpeg_buf[jpeg_index] == 0xFF) && (p_jpeg_buf[jpeg_index + 1] == 0xD9))
 80192fc:	4b33      	ldr	r3, [pc, #204]	; (80193cc <JPEG_run+0x17c>)
 80192fe:	681a      	ldr	r2, [r3, #0]
 8019300:	4b36      	ldr	r3, [pc, #216]	; (80193dc <JPEG_run+0x18c>)
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	4413      	add	r3, r2
 8019306:	781b      	ldrb	r3, [r3, #0]
 8019308:	2bff      	cmp	r3, #255	; 0xff
 801930a:	d10d      	bne.n	8019328 <JPEG_run+0xd8>
 801930c:	4b2f      	ldr	r3, [pc, #188]	; (80193cc <JPEG_run+0x17c>)
 801930e:	681a      	ldr	r2, [r3, #0]
 8019310:	4b32      	ldr	r3, [pc, #200]	; (80193dc <JPEG_run+0x18c>)
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	3301      	adds	r3, #1
 8019316:	4413      	add	r3, r2
 8019318:	781b      	ldrb	r3, [r3, #0]
 801931a:	2bd9      	cmp	r3, #217	; 0xd9
 801931c:	d104      	bne.n	8019328 <JPEG_run+0xd8>
		   {
			   jpeg_end_index = jpeg_index;
 801931e:	4b2f      	ldr	r3, [pc, #188]	; (80193dc <JPEG_run+0x18c>)
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	4a2f      	ldr	r2, [pc, #188]	; (80193e0 <JPEG_run+0x190>)
 8019324:	6013      	str	r3, [r2, #0]
//			   HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
			   break;
 8019326:	e00a      	b.n	801933e <JPEG_run+0xee>
	  for (jpeg_index=0; jpeg_index<JPEG_BUF_SIZE - 1; jpeg_index++)
 8019328:	4b2c      	ldr	r3, [pc, #176]	; (80193dc <JPEG_run+0x18c>)
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	3301      	adds	r3, #1
 801932e:	4a2b      	ldr	r2, [pc, #172]	; (80193dc <JPEG_run+0x18c>)
 8019330:	6013      	str	r3, [r2, #0]
 8019332:	4b2a      	ldr	r3, [pc, #168]	; (80193dc <JPEG_run+0x18c>)
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	f644 72fe 	movw	r2, #20478	; 0x4ffe
 801933a:	4293      	cmp	r3, r2
 801933c:	d9de      	bls.n	80192fc <JPEG_run+0xac>
		   }
	  }
  }while(jpeg_end_index==0xffffffff);
 801933e:	4b28      	ldr	r3, [pc, #160]	; (80193e0 <JPEG_run+0x190>)
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019346:	d0d5      	beq.n	80192f4 <JPEG_run+0xa4>


     /* 获取JPEG图像数据的长度 */
     jpeg_len = jpeg_end_index - jpeg_start_index + (sizeof(uint32_t) >> 1);
 8019348:	4b25      	ldr	r3, [pc, #148]	; (80193e0 <JPEG_run+0x190>)
 801934a:	681a      	ldr	r2, [r3, #0]
 801934c:	4b22      	ldr	r3, [pc, #136]	; (80193d8 <JPEG_run+0x188>)
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	1ad3      	subs	r3, r2, r3
 8019352:	3302      	adds	r3, #2
 8019354:	4a1f      	ldr	r2, [pc, #124]	; (80193d4 <JPEG_run+0x184>)
 8019356:	6013      	str	r3, [r2, #0]
     packet_num = jpeg_len/200;
 8019358:	4b1e      	ldr	r3, [pc, #120]	; (80193d4 <JPEG_run+0x184>)
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	4a21      	ldr	r2, [pc, #132]	; (80193e4 <JPEG_run+0x194>)
 801935e:	fba2 2303 	umull	r2, r3, r2, r3
 8019362:	099b      	lsrs	r3, r3, #6
 8019364:	80bb      	strh	r3, [r7, #4]
     remain_index = jpeg_len%200;
 8019366:	4b1b      	ldr	r3, [pc, #108]	; (80193d4 <JPEG_run+0x184>)
 8019368:	681a      	ldr	r2, [r3, #0]
 801936a:	4b1e      	ldr	r3, [pc, #120]	; (80193e4 <JPEG_run+0x194>)
 801936c:	fba3 1302 	umull	r1, r3, r3, r2
 8019370:	099b      	lsrs	r3, r3, #6
 8019372:	21c8      	movs	r1, #200	; 0xc8
 8019374:	fb01 f303 	mul.w	r3, r1, r3
 8019378:	1ad3      	subs	r3, r2, r3
 801937a:	807b      	strh	r3, [r7, #2]
     for(i=0;i<packet_num;i++) //分包发送
 801937c:	2300      	movs	r3, #0
 801937e:	80fb      	strh	r3, [r7, #6]
 8019380:	e010      	b.n	80193a4 <JPEG_run+0x154>
     {
    	usb_send_data((uint8_t*)p_jpeg_buf+i*200,200); //USB cdc最多只能发送200多个字节，还未找到问题
 8019382:	4b12      	ldr	r3, [pc, #72]	; (80193cc <JPEG_run+0x17c>)
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	88fa      	ldrh	r2, [r7, #6]
 8019388:	21c8      	movs	r1, #200	; 0xc8
 801938a:	fb01 f202 	mul.w	r2, r1, r2
 801938e:	4413      	add	r3, r2
 8019390:	21c8      	movs	r1, #200	; 0xc8
 8019392:	4618      	mov	r0, r3
 8019394:	f001 fb69 	bl	801aa6a <usb_send_data>
    	HAL_Delay(1);
 8019398:	2001      	movs	r0, #1
 801939a:	f7e8 f817 	bl	80013cc <HAL_Delay>
     for(i=0;i<packet_num;i++) //分包发送
 801939e:	88fb      	ldrh	r3, [r7, #6]
 80193a0:	3301      	adds	r3, #1
 80193a2:	80fb      	strh	r3, [r7, #6]
 80193a4:	88fa      	ldrh	r2, [r7, #6]
 80193a6:	88bb      	ldrh	r3, [r7, #4]
 80193a8:	429a      	cmp	r2, r3
 80193aa:	d3ea      	bcc.n	8019382 <JPEG_run+0x132>
     }
     usb_send_data((uint8_t*)p_jpeg_buf+packet_num*200,remain_index);//发送最后一包
 80193ac:	4b07      	ldr	r3, [pc, #28]	; (80193cc <JPEG_run+0x17c>)
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	88ba      	ldrh	r2, [r7, #4]
 80193b2:	21c8      	movs	r1, #200	; 0xc8
 80193b4:	fb01 f202 	mul.w	r2, r1, r2
 80193b8:	4413      	add	r3, r2
 80193ba:	887a      	ldrh	r2, [r7, #2]
 80193bc:	4611      	mov	r1, r2
 80193be:	4618      	mov	r0, r3
 80193c0:	f001 fb53 	bl	801aa6a <usb_send_data>



}
 80193c4:	bf00      	nop
 80193c6:	3708      	adds	r7, #8
 80193c8:	46bd      	mov	sp, r7
 80193ca:	bd80      	pop	{r7, pc}
 80193cc:	24007b78 	.word	0x24007b78
 80193d0:	24002b74 	.word	0x24002b74
 80193d4:	24007b7c 	.word	0x24007b7c
 80193d8:	24007b84 	.word	0x24007b84
 80193dc:	24007b80 	.word	0x24007b80
 80193e0:	24007b88 	.word	0x24007b88
 80193e4:	51eb851f 	.word	0x51eb851f

080193e8 <ov5640_write_reg>:
 * @param       reg: 寄存器地址
 *              dat: 待写入的值
 * @retval      无
 */
static void ov5640_write_reg(uint16_t reg, uint8_t dat)
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b082      	sub	sp, #8
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	4603      	mov	r3, r0
 80193f0:	460a      	mov	r2, r1
 80193f2:	80fb      	strh	r3, [r7, #6]
 80193f4:	4613      	mov	r3, r2
 80193f6:	717b      	strb	r3, [r7, #5]
    BSP_I2C2_WriteReg16(OV5640_IIC_ADDR,reg,&dat,1);
 80193f8:	1d7a      	adds	r2, r7, #5
 80193fa:	88f9      	ldrh	r1, [r7, #6]
 80193fc:	2301      	movs	r3, #1
 80193fe:	2078      	movs	r0, #120	; 0x78
 8019400:	f001 fad4 	bl	801a9ac <BSP_I2C2_WriteReg16>
}
 8019404:	bf00      	nop
 8019406:	3708      	adds	r7, #8
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}

0801940c <ov5640_read_reg>:
 * @brief       OV5640模块读寄存器
 * @param       reg: 寄存器的地址
 * @retval      读取到的寄存器值
 */
static uint8_t ov5640_read_reg(uint16_t reg)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b084      	sub	sp, #16
 8019410:	af00      	add	r7, sp, #0
 8019412:	4603      	mov	r3, r0
 8019414:	80fb      	strh	r3, [r7, #6]
    uint8_t dat = 0;
 8019416:	2300      	movs	r3, #0
 8019418:	73fb      	strb	r3, [r7, #15]

    BSP_I2C2_ReadReg16(OV5640_IIC_ADDR,reg,&dat,1);
 801941a:	f107 020f 	add.w	r2, r7, #15
 801941e:	88f9      	ldrh	r1, [r7, #6]
 8019420:	2301      	movs	r3, #1
 8019422:	2078      	movs	r0, #120	; 0x78
 8019424:	f001 fadf 	bl	801a9e6 <BSP_I2C2_ReadReg16>

    return dat;
 8019428:	7bfb      	ldrb	r3, [r7, #15]
}
 801942a:	4618      	mov	r0, r3
 801942c:	3710      	adds	r7, #16
 801942e:	46bd      	mov	sp, r7
 8019430:	bd80      	pop	{r7, pc}
	...

08019434 <ov5640_hw_init>:
 * @brief       OV5640模块硬件初始化
 * @param       无
 * @retval      无
 */
static void ov5640_hw_init(void)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 8019438:	2201      	movs	r2, #1
 801943a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801943e:	4805      	ldr	r0, [pc, #20]	; (8019454 <ov5640_hw_init+0x20>)
 8019440:	f7ec f8e4 	bl	800560c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 8019444:	2201      	movs	r2, #1
 8019446:	2180      	movs	r1, #128	; 0x80
 8019448:	4803      	ldr	r0, [pc, #12]	; (8019458 <ov5640_hw_init+0x24>)
 801944a:	f7ec f8df 	bl	800560c <HAL_GPIO_WritePin>

}
 801944e:	bf00      	nop
 8019450:	bd80      	pop	{r7, pc}
 8019452:	bf00      	nop
 8019454:	58020000 	.word	0x58020000
 8019458:	58020c00 	.word	0x58020c00

0801945c <ov5640_exit_power_down>:
 * @brief       OV5640模块退出掉电模式
 * @param       无
 * @retval      无
 */
static void ov5640_exit_power_down(void)
{
 801945c:	b580      	push	{r7, lr}
 801945e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 8019460:	2200      	movs	r2, #0
 8019462:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019466:	480c      	ldr	r0, [pc, #48]	; (8019498 <ov5640_exit_power_down+0x3c>)
 8019468:	f7ec f8d0 	bl	800560c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 801946c:	2014      	movs	r0, #20
 801946e:	f7e7 ffad 	bl	80013cc <HAL_Delay>
    HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_RESET);
 8019472:	2200      	movs	r2, #0
 8019474:	2180      	movs	r1, #128	; 0x80
 8019476:	4809      	ldr	r0, [pc, #36]	; (801949c <ov5640_exit_power_down+0x40>)
 8019478:	f7ec f8c8 	bl	800560c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 801947c:	2005      	movs	r0, #5
 801947e:	f7e7 ffa5 	bl	80013cc <HAL_Delay>
    HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 8019482:	2201      	movs	r2, #1
 8019484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019488:	4803      	ldr	r0, [pc, #12]	; (8019498 <ov5640_exit_power_down+0x3c>)
 801948a:	f7ec f8bf 	bl	800560c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 801948e:	2014      	movs	r0, #20
 8019490:	f7e7 ff9c 	bl	80013cc <HAL_Delay>
}
 8019494:	bf00      	nop
 8019496:	bd80      	pop	{r7, pc}
 8019498:	58020000 	.word	0x58020000
 801949c:	58020c00 	.word	0x58020c00

080194a0 <ov5640_hw_reset>:
 * @brief       OV5640模块硬件复位
 * @param       无
 * @retval      无
 */
static void ov5640_hw_reset(void)
{
 80194a0:	b580      	push	{r7, lr}
 80194a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 80194a4:	2200      	movs	r2, #0
 80194a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80194aa:	4808      	ldr	r0, [pc, #32]	; (80194cc <ov5640_hw_reset+0x2c>)
 80194ac:	f7ec f8ae 	bl	800560c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80194b0:	2014      	movs	r0, #20
 80194b2:	f7e7 ff8b 	bl	80013cc <HAL_Delay>
    HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 80194b6:	2201      	movs	r2, #1
 80194b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80194bc:	4803      	ldr	r0, [pc, #12]	; (80194cc <ov5640_hw_reset+0x2c>)
 80194be:	f7ec f8a5 	bl	800560c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80194c2:	2014      	movs	r0, #20
 80194c4:	f7e7 ff82 	bl	80013cc <HAL_Delay>
}
 80194c8:	bf00      	nop
 80194ca:	bd80      	pop	{r7, pc}
 80194cc:	58020000 	.word	0x58020000

080194d0 <ov5640_sw_reset>:
 * @brief       OV5640模块软件复位
 * @param       无
 * @retval      无
 */
static void ov5640_sw_reset(void)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b082      	sub	sp, #8
 80194d4:	af00      	add	r7, sp, #0
    uint8_t reg3103;
    reg3103 = ov5640_read_reg(0x3103);
 80194d6:	f243 1003 	movw	r0, #12547	; 0x3103
 80194da:	f7ff ff97 	bl	801940c <ov5640_read_reg>
 80194de:	4603      	mov	r3, r0
 80194e0:	71fb      	strb	r3, [r7, #7]
    reg3103 &= ~(0x01 << 1);
 80194e2:	79fb      	ldrb	r3, [r7, #7]
 80194e4:	f023 0302 	bic.w	r3, r3, #2
 80194e8:	71fb      	strb	r3, [r7, #7]
    ov5640_write_reg(0x3103, reg3103);
 80194ea:	79fb      	ldrb	r3, [r7, #7]
 80194ec:	4619      	mov	r1, r3
 80194ee:	f243 1003 	movw	r0, #12547	; 0x3103
 80194f2:	f7ff ff79 	bl	80193e8 <ov5640_write_reg>
    ov5640_write_reg(0x3008, 0x80);
 80194f6:	2180      	movs	r1, #128	; 0x80
 80194f8:	f243 0008 	movw	r0, #12296	; 0x3008
 80194fc:	f7ff ff74 	bl	80193e8 <ov5640_write_reg>
    HAL_Delay(10);
 8019500:	200a      	movs	r0, #10
 8019502:	f7e7 ff63 	bl	80013cc <HAL_Delay>
}
 8019506:	bf00      	nop
 8019508:	3708      	adds	r7, #8
 801950a:	46bd      	mov	sp, r7
 801950c:	bd80      	pop	{r7, pc}

0801950e <ov5640_get_chip_id>:
 * @brief       获取OV5640模块芯片ID
 * @param       无
 * @retval      芯片ID
 */
static uint16_t ov5640_get_chip_id(void)
{
 801950e:	b580      	push	{r7, lr}
 8019510:	b082      	sub	sp, #8
 8019512:	af00      	add	r7, sp, #0
    uint16_t chip_id;

    chip_id = ov5640_read_reg(0x300A) << 8;
 8019514:	f243 000a 	movw	r0, #12298	; 0x300a
 8019518:	f7ff ff78 	bl	801940c <ov5640_read_reg>
 801951c:	4603      	mov	r3, r0
 801951e:	b29b      	uxth	r3, r3
 8019520:	021b      	lsls	r3, r3, #8
 8019522:	80fb      	strh	r3, [r7, #6]
    chip_id |= ov5640_read_reg(0x300B);
 8019524:	f243 000b 	movw	r0, #12299	; 0x300b
 8019528:	f7ff ff70 	bl	801940c <ov5640_read_reg>
 801952c:	4603      	mov	r3, r0
 801952e:	b29a      	uxth	r2, r3
 8019530:	88fb      	ldrh	r3, [r7, #6]
 8019532:	4313      	orrs	r3, r2
 8019534:	80fb      	strh	r3, [r7, #6]

    return chip_id;
 8019536:	88fb      	ldrh	r3, [r7, #6]
}
 8019538:	4618      	mov	r0, r3
 801953a:	3708      	adds	r7, #8
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}

08019540 <ov5640_init_reg>:
 * @brief       初始化OV5640寄存器配置
 * @param       无
 * @retval      无
 */
static void ov5640_init_reg(void)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b082      	sub	sp, #8
 8019544:	af00      	add	r7, sp, #0
    uint32_t cfg_index;

    for (cfg_index=0; cfg_index<sizeof(ov5640_init_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 8019546:	2300      	movs	r3, #0
 8019548:	607b      	str	r3, [r7, #4]
 801954a:	e021      	b.n	8019590 <ov5640_init_reg+0x50>
    {
    	if(ov5640_init_cfg[cfg_index].reg==0&&ov5640_init_cfg[cfg_index].dat==0)
 801954c:	4a15      	ldr	r2, [pc, #84]	; (80195a4 <ov5640_init_reg+0x64>)
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d106      	bne.n	8019566 <ov5640_init_reg+0x26>
 8019558:	4a12      	ldr	r2, [pc, #72]	; (80195a4 <ov5640_init_reg+0x64>)
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	009b      	lsls	r3, r3, #2
 801955e:	4413      	add	r3, r2
 8019560:	789b      	ldrb	r3, [r3, #2]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d010      	beq.n	8019588 <ov5640_init_reg+0x48>
    	{
    		continue;
    	}
        ov5640_write_reg(ov5640_init_cfg[cfg_index].reg, ov5640_init_cfg[cfg_index].dat);
 8019566:	4a0f      	ldr	r2, [pc, #60]	; (80195a4 <ov5640_init_reg+0x64>)
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 801956e:	490d      	ldr	r1, [pc, #52]	; (80195a4 <ov5640_init_reg+0x64>)
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	009b      	lsls	r3, r3, #2
 8019574:	440b      	add	r3, r1
 8019576:	789b      	ldrb	r3, [r3, #2]
 8019578:	4619      	mov	r1, r3
 801957a:	4610      	mov	r0, r2
 801957c:	f7ff ff34 	bl	80193e8 <ov5640_write_reg>
        HAL_Delay(1);
 8019580:	2001      	movs	r0, #1
 8019582:	f7e7 ff23 	bl	80013cc <HAL_Delay>
 8019586:	e000      	b.n	801958a <ov5640_init_reg+0x4a>
    		continue;
 8019588:	bf00      	nop
    for (cfg_index=0; cfg_index<sizeof(ov5640_init_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	3301      	adds	r3, #1
 801958e:	607b      	str	r3, [r7, #4]
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019596:	d3d9      	bcc.n	801954c <ov5640_init_reg+0xc>

    }
}
 8019598:	bf00      	nop
 801959a:	bf00      	nop
 801959c:	3708      	adds	r7, #8
 801959e:	46bd      	mov	sp, r7
 80195a0:	bd80      	pop	{r7, pc}
 80195a2:	bf00      	nop
 80195a4:	24000234 	.word	0x24000234

080195a8 <ov5640_get_output_size>:
 * @brief       获取OV5640模块输出图像尺寸
 * @param       无
 * @retval      无
 */
static void ov5640_get_output_size(void)
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b082      	sub	sp, #8
 80195ac:	af00      	add	r7, sp, #0
    uint8_t reg380A;
    uint8_t reg380B;
    uint16_t x_output_size;
    uint16_t y_output_size;

    HAL_Delay(100);
 80195ae:	2064      	movs	r0, #100	; 0x64
 80195b0:	f7e7 ff0c 	bl	80013cc <HAL_Delay>

    reg3808 = ov5640_read_reg(0x3808);
 80195b4:	f643 0008 	movw	r0, #14344	; 0x3808
 80195b8:	f7ff ff28 	bl	801940c <ov5640_read_reg>
 80195bc:	4603      	mov	r3, r0
 80195be:	71fb      	strb	r3, [r7, #7]
    reg3809 = ov5640_read_reg(0x3809);
 80195c0:	f643 0009 	movw	r0, #14345	; 0x3809
 80195c4:	f7ff ff22 	bl	801940c <ov5640_read_reg>
 80195c8:	4603      	mov	r3, r0
 80195ca:	71bb      	strb	r3, [r7, #6]
    reg380A = ov5640_read_reg(0x380A);
 80195cc:	f643 000a 	movw	r0, #14346	; 0x380a
 80195d0:	f7ff ff1c 	bl	801940c <ov5640_read_reg>
 80195d4:	4603      	mov	r3, r0
 80195d6:	717b      	strb	r3, [r7, #5]
    reg380B = ov5640_read_reg(0x380B);
 80195d8:	f643 000b 	movw	r0, #14347	; 0x380b
 80195dc:	f7ff ff16 	bl	801940c <ov5640_read_reg>
 80195e0:	4603      	mov	r3, r0
 80195e2:	713b      	strb	r3, [r7, #4]

    x_output_size = (uint16_t)((reg3808 & 0x0F) << 8) | reg3809;
 80195e4:	79fb      	ldrb	r3, [r7, #7]
 80195e6:	b29b      	uxth	r3, r3
 80195e8:	021b      	lsls	r3, r3, #8
 80195ea:	b29b      	uxth	r3, r3
 80195ec:	b21b      	sxth	r3, r3
 80195ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80195f2:	b21a      	sxth	r2, r3
 80195f4:	79bb      	ldrb	r3, [r7, #6]
 80195f6:	b21b      	sxth	r3, r3
 80195f8:	4313      	orrs	r3, r2
 80195fa:	b21b      	sxth	r3, r3
 80195fc:	807b      	strh	r3, [r7, #2]
    y_output_size = (uint16_t)((reg380A & 0x07) << 8) | reg380B;
 80195fe:	797b      	ldrb	r3, [r7, #5]
 8019600:	b29b      	uxth	r3, r3
 8019602:	021b      	lsls	r3, r3, #8
 8019604:	b29b      	uxth	r3, r3
 8019606:	b21b      	sxth	r3, r3
 8019608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801960c:	b21a      	sxth	r2, r3
 801960e:	793b      	ldrb	r3, [r7, #4]
 8019610:	b21b      	sxth	r3, r3
 8019612:	4313      	orrs	r3, r2
 8019614:	b21b      	sxth	r3, r3
 8019616:	803b      	strh	r3, [r7, #0]

    ov5640_sta.output.width = x_output_size;
 8019618:	4a04      	ldr	r2, [pc, #16]	; (801962c <ov5640_get_output_size+0x84>)
 801961a:	887b      	ldrh	r3, [r7, #2]
 801961c:	8113      	strh	r3, [r2, #8]
    ov5640_sta.output.height = y_output_size;
 801961e:	4a03      	ldr	r2, [pc, #12]	; (801962c <ov5640_get_output_size+0x84>)
 8019620:	883b      	ldrh	r3, [r7, #0]
 8019622:	8153      	strh	r3, [r2, #10]
}
 8019624:	bf00      	nop
 8019626:	3708      	adds	r7, #8
 8019628:	46bd      	mov	sp, r7
 801962a:	bd80      	pop	{r7, pc}
 801962c:	24007b8c 	.word	0x24007b8c

08019630 <ov5640_set_light_mode>:
 *                    OV5640_LIGHT_MODE_MANUAL_CLOUDY: Manual cloudy
 * @retval      OV5640_EOK   : 设置OV5640模块灯光模式成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_light_mode(ov5640_light_mode_t mode)
{
 8019630:	b580      	push	{r7, lr}
 8019632:	b082      	sub	sp, #8
 8019634:	af00      	add	r7, sp, #0
 8019636:	4603      	mov	r3, r0
 8019638:	71fb      	strb	r3, [r7, #7]
    switch (mode)
 801963a:	79fb      	ldrb	r3, [r7, #7]
 801963c:	2b05      	cmp	r3, #5
 801963e:	f200 8128 	bhi.w	8019892 <ov5640_set_light_mode+0x262>
 8019642:	a201      	add	r2, pc, #4	; (adr r2, 8019648 <ov5640_set_light_mode+0x18>)
 8019644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019648:	08019661 	.word	0x08019661
 801964c:	08019749 	.word	0x08019749
 8019650:	08019773 	.word	0x08019773
 8019654:	080197bb 	.word	0x080197bb
 8019658:	08019803 	.word	0x08019803
 801965c:	0801984b 	.word	0x0801984b
    {
        case OV5640_LIGHT_MODE_ADVANCED_AWB:
        {
            ov5640_write_reg(0x3406, 0x00);
 8019660:	2100      	movs	r1, #0
 8019662:	f243 4006 	movw	r0, #13318	; 0x3406
 8019666:	f7ff febf 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5192, 0x04);
 801966a:	2104      	movs	r1, #4
 801966c:	f245 1092 	movw	r0, #20882	; 0x5192
 8019670:	f7ff feba 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5191, 0xF8);
 8019674:	21f8      	movs	r1, #248	; 0xf8
 8019676:	f245 1091 	movw	r0, #20881	; 0x5191
 801967a:	f7ff feb5 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5193, 0x70);
 801967e:	2170      	movs	r1, #112	; 0x70
 8019680:	f245 1093 	movw	r0, #20883	; 0x5193
 8019684:	f7ff feb0 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5194, 0xF0);
 8019688:	21f0      	movs	r1, #240	; 0xf0
 801968a:	f245 1094 	movw	r0, #20884	; 0x5194
 801968e:	f7ff feab 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5195, 0xF0);
 8019692:	21f0      	movs	r1, #240	; 0xf0
 8019694:	f245 1095 	movw	r0, #20885	; 0x5195
 8019698:	f7ff fea6 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x518D, 0x3D);
 801969c:	213d      	movs	r1, #61	; 0x3d
 801969e:	f245 108d 	movw	r0, #20877	; 0x518d
 80196a2:	f7ff fea1 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x518F, 0x54);
 80196a6:	2154      	movs	r1, #84	; 0x54
 80196a8:	f245 108f 	movw	r0, #20879	; 0x518f
 80196ac:	f7ff fe9c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x518E, 0x3D);
 80196b0:	213d      	movs	r1, #61	; 0x3d
 80196b2:	f245 108e 	movw	r0, #20878	; 0x518e
 80196b6:	f7ff fe97 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5190, 0x54);
 80196ba:	2154      	movs	r1, #84	; 0x54
 80196bc:	f245 1090 	movw	r0, #20880	; 0x5190
 80196c0:	f7ff fe92 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x518B, 0xA8);
 80196c4:	21a8      	movs	r1, #168	; 0xa8
 80196c6:	f245 108b 	movw	r0, #20875	; 0x518b
 80196ca:	f7ff fe8d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x518C, 0xA8);
 80196ce:	21a8      	movs	r1, #168	; 0xa8
 80196d0:	f245 108c 	movw	r0, #20876	; 0x518c
 80196d4:	f7ff fe88 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5187, 0x18);
 80196d8:	2118      	movs	r1, #24
 80196da:	f245 1087 	movw	r0, #20871	; 0x5187
 80196de:	f7ff fe83 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5188, 0x18);
 80196e2:	2118      	movs	r1, #24
 80196e4:	f245 1088 	movw	r0, #20872	; 0x5188
 80196e8:	f7ff fe7e 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5189, 0x6E);
 80196ec:	216e      	movs	r1, #110	; 0x6e
 80196ee:	f245 1089 	movw	r0, #20873	; 0x5189
 80196f2:	f7ff fe79 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x518A, 0x68);
 80196f6:	2168      	movs	r1, #104	; 0x68
 80196f8:	f245 108a 	movw	r0, #20874	; 0x518a
 80196fc:	f7ff fe74 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5186, 0x1C);
 8019700:	211c      	movs	r1, #28
 8019702:	f245 1086 	movw	r0, #20870	; 0x5186
 8019706:	f7ff fe6f 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5181, 0x50);
 801970a:	2150      	movs	r1, #80	; 0x50
 801970c:	f245 1081 	movw	r0, #20865	; 0x5181
 8019710:	f7ff fe6a 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5184, 0x25);
 8019714:	2125      	movs	r1, #37	; 0x25
 8019716:	f245 1084 	movw	r0, #20868	; 0x5184
 801971a:	f7ff fe65 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5182, 0x11);
 801971e:	2111      	movs	r1, #17
 8019720:	f245 1082 	movw	r0, #20866	; 0x5182
 8019724:	f7ff fe60 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5183, 0x14);
 8019728:	2114      	movs	r1, #20
 801972a:	f245 1083 	movw	r0, #20867	; 0x5183
 801972e:	f7ff fe5b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5184, 0x25);
 8019732:	2125      	movs	r1, #37	; 0x25
 8019734:	f245 1084 	movw	r0, #20868	; 0x5184
 8019738:	f7ff fe56 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5185, 0x24);
 801973c:	2124      	movs	r1, #36	; 0x24
 801973e:	f245 1085 	movw	r0, #20869	; 0x5185
 8019742:	f7ff fe51 	bl	80193e8 <ov5640_write_reg>
            break;
 8019746:	e0a6      	b.n	8019896 <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_SIMPLE_AWB:
        {
            ov5640_write_reg(0x3406, 0x00);
 8019748:	2100      	movs	r1, #0
 801974a:	f243 4006 	movw	r0, #13318	; 0x3406
 801974e:	f7ff fe4b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5183, 0x94);
 8019752:	2194      	movs	r1, #148	; 0x94
 8019754:	f245 1083 	movw	r0, #20867	; 0x5183
 8019758:	f7ff fe46 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5191, 0xFF);
 801975c:	21ff      	movs	r1, #255	; 0xff
 801975e:	f245 1091 	movw	r0, #20881	; 0x5191
 8019762:	f7ff fe41 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5192, 0x00);
 8019766:	2100      	movs	r1, #0
 8019768:	f245 1092 	movw	r0, #20882	; 0x5192
 801976c:	f7ff fe3c 	bl	80193e8 <ov5640_write_reg>
            break;
 8019770:	e091      	b.n	8019896 <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_DAY:
        {
            ov5640_write_reg(0x3406, 0x01);
 8019772:	2101      	movs	r1, #1
 8019774:	f243 4006 	movw	r0, #13318	; 0x3406
 8019778:	f7ff fe36 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x06);
 801977c:	2106      	movs	r1, #6
 801977e:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8019782:	f7ff fe31 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x1C);
 8019786:	211c      	movs	r1, #28
 8019788:	f243 4001 	movw	r0, #13313	; 0x3401
 801978c:	f7ff fe2c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 8019790:	2104      	movs	r1, #4
 8019792:	f243 4002 	movw	r0, #13314	; 0x3402
 8019796:	f7ff fe27 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 801979a:	2100      	movs	r1, #0
 801979c:	f243 4003 	movw	r0, #13315	; 0x3403
 80197a0:	f7ff fe22 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x04);
 80197a4:	2104      	movs	r1, #4
 80197a6:	f243 4004 	movw	r0, #13316	; 0x3404
 80197aa:	f7ff fe1d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xF3);
 80197ae:	21f3      	movs	r1, #243	; 0xf3
 80197b0:	f243 4005 	movw	r0, #13317	; 0x3405
 80197b4:	f7ff fe18 	bl	80193e8 <ov5640_write_reg>
            break;
 80197b8:	e06d      	b.n	8019896 <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_A:
        {
            ov5640_write_reg(0x3406, 0x01);
 80197ba:	2101      	movs	r1, #1
 80197bc:	f243 4006 	movw	r0, #13318	; 0x3406
 80197c0:	f7ff fe12 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x04);
 80197c4:	2104      	movs	r1, #4
 80197c6:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 80197ca:	f7ff fe0d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x10);
 80197ce:	2110      	movs	r1, #16
 80197d0:	f243 4001 	movw	r0, #13313	; 0x3401
 80197d4:	f7ff fe08 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 80197d8:	2104      	movs	r1, #4
 80197da:	f243 4002 	movw	r0, #13314	; 0x3402
 80197de:	f7ff fe03 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 80197e2:	2100      	movs	r1, #0
 80197e4:	f243 4003 	movw	r0, #13315	; 0x3403
 80197e8:	f7ff fdfe 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x08);
 80197ec:	2108      	movs	r1, #8
 80197ee:	f243 4004 	movw	r0, #13316	; 0x3404
 80197f2:	f7ff fdf9 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xB6);
 80197f6:	21b6      	movs	r1, #182	; 0xb6
 80197f8:	f243 4005 	movw	r0, #13317	; 0x3405
 80197fc:	f7ff fdf4 	bl	80193e8 <ov5640_write_reg>
            break;
 8019800:	e049      	b.n	8019896 <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_CWF:
        {
            ov5640_write_reg(0x3406, 0x01);
 8019802:	2101      	movs	r1, #1
 8019804:	f243 4006 	movw	r0, #13318	; 0x3406
 8019808:	f7ff fdee 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x05);
 801980c:	2105      	movs	r1, #5
 801980e:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8019812:	f7ff fde9 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x48);
 8019816:	2148      	movs	r1, #72	; 0x48
 8019818:	f243 4001 	movw	r0, #13313	; 0x3401
 801981c:	f7ff fde4 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 8019820:	2104      	movs	r1, #4
 8019822:	f243 4002 	movw	r0, #13314	; 0x3402
 8019826:	f7ff fddf 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 801982a:	2100      	movs	r1, #0
 801982c:	f243 4003 	movw	r0, #13315	; 0x3403
 8019830:	f7ff fdda 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x07);
 8019834:	2107      	movs	r1, #7
 8019836:	f243 4004 	movw	r0, #13316	; 0x3404
 801983a:	f7ff fdd5 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xCF);
 801983e:	21cf      	movs	r1, #207	; 0xcf
 8019840:	f243 4005 	movw	r0, #13317	; 0x3405
 8019844:	f7ff fdd0 	bl	80193e8 <ov5640_write_reg>
            break;
 8019848:	e025      	b.n	8019896 <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_CLOUDY:
        {
            ov5640_write_reg(0x3406, 0x01);
 801984a:	2101      	movs	r1, #1
 801984c:	f243 4006 	movw	r0, #13318	; 0x3406
 8019850:	f7ff fdca 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x06);
 8019854:	2106      	movs	r1, #6
 8019856:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 801985a:	f7ff fdc5 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x48);
 801985e:	2148      	movs	r1, #72	; 0x48
 8019860:	f243 4001 	movw	r0, #13313	; 0x3401
 8019864:	f7ff fdc0 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 8019868:	2104      	movs	r1, #4
 801986a:	f243 4002 	movw	r0, #13314	; 0x3402
 801986e:	f7ff fdbb 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 8019872:	2100      	movs	r1, #0
 8019874:	f243 4003 	movw	r0, #13315	; 0x3403
 8019878:	f7ff fdb6 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x04);
 801987c:	2104      	movs	r1, #4
 801987e:	f243 4004 	movw	r0, #13316	; 0x3404
 8019882:	f7ff fdb1 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xD3);
 8019886:	21d3      	movs	r1, #211	; 0xd3
 8019888:	f243 4005 	movw	r0, #13317	; 0x3405
 801988c:	f7ff fdac 	bl	80193e8 <ov5640_write_reg>
            break;
 8019890:	e001      	b.n	8019896 <ov5640_set_light_mode+0x266>
        }
        default:
        {
            return OV5640_EINVAL;
 8019892:	2302      	movs	r3, #2
 8019894:	e000      	b.n	8019898 <ov5640_set_light_mode+0x268>
        }
    }

    return OV5640_EOK;
 8019896:	2300      	movs	r3, #0
}
 8019898:	4618      	mov	r0, r3
 801989a:	3708      	adds	r7, #8
 801989c:	46bd      	mov	sp, r7
 801989e:	bd80      	pop	{r7, pc}

080198a0 <ov5640_set_color_saturation>:
 *                          OV5640_COLOR_SATURATION_8: -4
 * @retval      OV5640_EOK   : 设置OV5640模块色彩饱和度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_color_saturation(ov5640_color_saturation_t saturation)
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b082      	sub	sp, #8
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	4603      	mov	r3, r0
 80198a8:	71fb      	strb	r3, [r7, #7]
    switch (saturation)
 80198aa:	79fb      	ldrb	r3, [r7, #7]
 80198ac:	2b08      	cmp	r3, #8
 80198ae:	f200 80ff 	bhi.w	8019ab0 <ov5640_set_color_saturation+0x210>
 80198b2:	a201      	add	r2, pc, #4	; (adr r2, 80198b8 <ov5640_set_color_saturation+0x18>)
 80198b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198b8:	080198dd 	.word	0x080198dd
 80198bc:	08019911 	.word	0x08019911
 80198c0:	08019945 	.word	0x08019945
 80198c4:	08019979 	.word	0x08019979
 80198c8:	080199ad 	.word	0x080199ad
 80198cc:	080199e1 	.word	0x080199e1
 80198d0:	08019a15 	.word	0x08019a15
 80198d4:	08019a49 	.word	0x08019a49
 80198d8:	08019a7d 	.word	0x08019a7d
    {
        case OV5640_COLOR_SATURATION_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80198dc:	21ff      	movs	r1, #255	; 0xff
 80198de:	f245 0001 	movw	r0, #20481	; 0x5001
 80198e2:	f7ff fd81 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x80);
 80198e6:	2180      	movs	r1, #128	; 0x80
 80198e8:	f245 5083 	movw	r0, #21891	; 0x5583
 80198ec:	f7ff fd7c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x80);
 80198f0:	2180      	movs	r1, #128	; 0x80
 80198f2:	f245 5084 	movw	r0, #21892	; 0x5584
 80198f6:	f7ff fd77 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 80198fa:	2102      	movs	r1, #2
 80198fc:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019900:	f7ff fd72 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019904:	2141      	movs	r1, #65	; 0x41
 8019906:	f245 5088 	movw	r0, #21896	; 0x5588
 801990a:	f7ff fd6d 	bl	80193e8 <ov5640_write_reg>
            break;
 801990e:	e0d1      	b.n	8019ab4 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019910:	21ff      	movs	r1, #255	; 0xff
 8019912:	f245 0001 	movw	r0, #20481	; 0x5001
 8019916:	f7ff fd67 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x70);
 801991a:	2170      	movs	r1, #112	; 0x70
 801991c:	f245 5083 	movw	r0, #21891	; 0x5583
 8019920:	f7ff fd62 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x70);
 8019924:	2170      	movs	r1, #112	; 0x70
 8019926:	f245 5084 	movw	r0, #21892	; 0x5584
 801992a:	f7ff fd5d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 801992e:	2102      	movs	r1, #2
 8019930:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019934:	f7ff fd58 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019938:	2141      	movs	r1, #65	; 0x41
 801993a:	f245 5088 	movw	r0, #21896	; 0x5588
 801993e:	f7ff fd53 	bl	80193e8 <ov5640_write_reg>
            break;
 8019942:	e0b7      	b.n	8019ab4 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019944:	21ff      	movs	r1, #255	; 0xff
 8019946:	f245 0001 	movw	r0, #20481	; 0x5001
 801994a:	f7ff fd4d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x60);
 801994e:	2160      	movs	r1, #96	; 0x60
 8019950:	f245 5083 	movw	r0, #21891	; 0x5583
 8019954:	f7ff fd48 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x60);
 8019958:	2160      	movs	r1, #96	; 0x60
 801995a:	f245 5084 	movw	r0, #21892	; 0x5584
 801995e:	f7ff fd43 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019962:	2102      	movs	r1, #2
 8019964:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019968:	f7ff fd3e 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 801996c:	2141      	movs	r1, #65	; 0x41
 801996e:	f245 5088 	movw	r0, #21896	; 0x5588
 8019972:	f7ff fd39 	bl	80193e8 <ov5640_write_reg>
            break;
 8019976:	e09d      	b.n	8019ab4 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019978:	21ff      	movs	r1, #255	; 0xff
 801997a:	f245 0001 	movw	r0, #20481	; 0x5001
 801997e:	f7ff fd33 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x50);
 8019982:	2150      	movs	r1, #80	; 0x50
 8019984:	f245 5083 	movw	r0, #21891	; 0x5583
 8019988:	f7ff fd2e 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x50);
 801998c:	2150      	movs	r1, #80	; 0x50
 801998e:	f245 5084 	movw	r0, #21892	; 0x5584
 8019992:	f7ff fd29 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019996:	2102      	movs	r1, #2
 8019998:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801999c:	f7ff fd24 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 80199a0:	2141      	movs	r1, #65	; 0x41
 80199a2:	f245 5088 	movw	r0, #21896	; 0x5588
 80199a6:	f7ff fd1f 	bl	80193e8 <ov5640_write_reg>
            break;
 80199aa:	e083      	b.n	8019ab4 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_4:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80199ac:	21ff      	movs	r1, #255	; 0xff
 80199ae:	f245 0001 	movw	r0, #20481	; 0x5001
 80199b2:	f7ff fd19 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x40);
 80199b6:	2140      	movs	r1, #64	; 0x40
 80199b8:	f245 5083 	movw	r0, #21891	; 0x5583
 80199bc:	f7ff fd14 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x40);
 80199c0:	2140      	movs	r1, #64	; 0x40
 80199c2:	f245 5084 	movw	r0, #21892	; 0x5584
 80199c6:	f7ff fd0f 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 80199ca:	2102      	movs	r1, #2
 80199cc:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80199d0:	f7ff fd0a 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 80199d4:	2141      	movs	r1, #65	; 0x41
 80199d6:	f245 5088 	movw	r0, #21896	; 0x5588
 80199da:	f7ff fd05 	bl	80193e8 <ov5640_write_reg>
            break;
 80199de:	e069      	b.n	8019ab4 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80199e0:	21ff      	movs	r1, #255	; 0xff
 80199e2:	f245 0001 	movw	r0, #20481	; 0x5001
 80199e6:	f7ff fcff 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x30);
 80199ea:	2130      	movs	r1, #48	; 0x30
 80199ec:	f245 5083 	movw	r0, #21891	; 0x5583
 80199f0:	f7ff fcfa 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x30);
 80199f4:	2130      	movs	r1, #48	; 0x30
 80199f6:	f245 5084 	movw	r0, #21892	; 0x5584
 80199fa:	f7ff fcf5 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 80199fe:	2102      	movs	r1, #2
 8019a00:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019a04:	f7ff fcf0 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019a08:	2141      	movs	r1, #65	; 0x41
 8019a0a:	f245 5088 	movw	r0, #21896	; 0x5588
 8019a0e:	f7ff fceb 	bl	80193e8 <ov5640_write_reg>
            break;
 8019a12:	e04f      	b.n	8019ab4 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019a14:	21ff      	movs	r1, #255	; 0xff
 8019a16:	f245 0001 	movw	r0, #20481	; 0x5001
 8019a1a:	f7ff fce5 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x20);
 8019a1e:	2120      	movs	r1, #32
 8019a20:	f245 5083 	movw	r0, #21891	; 0x5583
 8019a24:	f7ff fce0 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x20);
 8019a28:	2120      	movs	r1, #32
 8019a2a:	f245 5084 	movw	r0, #21892	; 0x5584
 8019a2e:	f7ff fcdb 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019a32:	2102      	movs	r1, #2
 8019a34:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019a38:	f7ff fcd6 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019a3c:	2141      	movs	r1, #65	; 0x41
 8019a3e:	f245 5088 	movw	r0, #21896	; 0x5588
 8019a42:	f7ff fcd1 	bl	80193e8 <ov5640_write_reg>
            break;
 8019a46:	e035      	b.n	8019ab4 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019a48:	21ff      	movs	r1, #255	; 0xff
 8019a4a:	f245 0001 	movw	r0, #20481	; 0x5001
 8019a4e:	f7ff fccb 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x10);
 8019a52:	2110      	movs	r1, #16
 8019a54:	f245 5083 	movw	r0, #21891	; 0x5583
 8019a58:	f7ff fcc6 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x10);
 8019a5c:	2110      	movs	r1, #16
 8019a5e:	f245 5084 	movw	r0, #21892	; 0x5584
 8019a62:	f7ff fcc1 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019a66:	2102      	movs	r1, #2
 8019a68:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019a6c:	f7ff fcbc 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019a70:	2141      	movs	r1, #65	; 0x41
 8019a72:	f245 5088 	movw	r0, #21896	; 0x5588
 8019a76:	f7ff fcb7 	bl	80193e8 <ov5640_write_reg>
            break;
 8019a7a:	e01b      	b.n	8019ab4 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019a7c:	21ff      	movs	r1, #255	; 0xff
 8019a7e:	f245 0001 	movw	r0, #20481	; 0x5001
 8019a82:	f7ff fcb1 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x00);
 8019a86:	2100      	movs	r1, #0
 8019a88:	f245 5083 	movw	r0, #21891	; 0x5583
 8019a8c:	f7ff fcac 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x00);
 8019a90:	2100      	movs	r1, #0
 8019a92:	f245 5084 	movw	r0, #21892	; 0x5584
 8019a96:	f7ff fca7 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019a9a:	2102      	movs	r1, #2
 8019a9c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019aa0:	f7ff fca2 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019aa4:	2141      	movs	r1, #65	; 0x41
 8019aa6:	f245 5088 	movw	r0, #21896	; 0x5588
 8019aaa:	f7ff fc9d 	bl	80193e8 <ov5640_write_reg>
            break;
 8019aae:	e001      	b.n	8019ab4 <ov5640_set_color_saturation+0x214>
        }
        default:
        {
            return OV5640_EINVAL;
 8019ab0:	2302      	movs	r3, #2
 8019ab2:	e000      	b.n	8019ab6 <ov5640_set_color_saturation+0x216>
        }
    }

    return OV5640_EOK;
 8019ab4:	2300      	movs	r3, #0
}
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	3708      	adds	r7, #8
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}
 8019abe:	bf00      	nop

08019ac0 <ov5640_set_brightness>:
 *                          OV5640_BRIGHTNESS_8: -4
 * @retval      OV5640_EOK   : 设置OV5640模块亮度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_brightness(ov5640_brightness_t brightness)
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b082      	sub	sp, #8
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	71fb      	strb	r3, [r7, #7]
    switch (brightness)
 8019aca:	79fb      	ldrb	r3, [r7, #7]
 8019acc:	2b08      	cmp	r3, #8
 8019ace:	f200 80d2 	bhi.w	8019c76 <ov5640_set_brightness+0x1b6>
 8019ad2:	a201      	add	r2, pc, #4	; (adr r2, 8019ad8 <ov5640_set_brightness+0x18>)
 8019ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ad8:	08019afd 	.word	0x08019afd
 8019adc:	08019b27 	.word	0x08019b27
 8019ae0:	08019b51 	.word	0x08019b51
 8019ae4:	08019b7b 	.word	0x08019b7b
 8019ae8:	08019ba5 	.word	0x08019ba5
 8019aec:	08019bcf 	.word	0x08019bcf
 8019af0:	08019bf9 	.word	0x08019bf9
 8019af4:	08019c23 	.word	0x08019c23
 8019af8:	08019c4d 	.word	0x08019c4d
    {
        case OV5640_BRIGHTNESS_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019afc:	21ff      	movs	r1, #255	; 0xff
 8019afe:	f245 0001 	movw	r0, #20481	; 0x5001
 8019b02:	f7ff fc71 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x40);
 8019b06:	2140      	movs	r1, #64	; 0x40
 8019b08:	f245 5087 	movw	r0, #21895	; 0x5587
 8019b0c:	f7ff fc6c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019b10:	2104      	movs	r1, #4
 8019b12:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019b16:	f7ff fc67 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8019b1a:	2101      	movs	r1, #1
 8019b1c:	f245 5088 	movw	r0, #21896	; 0x5588
 8019b20:	f7ff fc62 	bl	80193e8 <ov5640_write_reg>
            break;
 8019b24:	e0a9      	b.n	8019c7a <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019b26:	21ff      	movs	r1, #255	; 0xff
 8019b28:	f245 0001 	movw	r0, #20481	; 0x5001
 8019b2c:	f7ff fc5c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x30);
 8019b30:	2130      	movs	r1, #48	; 0x30
 8019b32:	f245 5087 	movw	r0, #21895	; 0x5587
 8019b36:	f7ff fc57 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019b3a:	2104      	movs	r1, #4
 8019b3c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019b40:	f7ff fc52 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8019b44:	2101      	movs	r1, #1
 8019b46:	f245 5088 	movw	r0, #21896	; 0x5588
 8019b4a:	f7ff fc4d 	bl	80193e8 <ov5640_write_reg>
            break;
 8019b4e:	e094      	b.n	8019c7a <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019b50:	21ff      	movs	r1, #255	; 0xff
 8019b52:	f245 0001 	movw	r0, #20481	; 0x5001
 8019b56:	f7ff fc47 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x20);
 8019b5a:	2120      	movs	r1, #32
 8019b5c:	f245 5087 	movw	r0, #21895	; 0x5587
 8019b60:	f7ff fc42 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019b64:	2104      	movs	r1, #4
 8019b66:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019b6a:	f7ff fc3d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8019b6e:	2101      	movs	r1, #1
 8019b70:	f245 5088 	movw	r0, #21896	; 0x5588
 8019b74:	f7ff fc38 	bl	80193e8 <ov5640_write_reg>
            break;
 8019b78:	e07f      	b.n	8019c7a <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019b7a:	21ff      	movs	r1, #255	; 0xff
 8019b7c:	f245 0001 	movw	r0, #20481	; 0x5001
 8019b80:	f7ff fc32 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x10);
 8019b84:	2110      	movs	r1, #16
 8019b86:	f245 5087 	movw	r0, #21895	; 0x5587
 8019b8a:	f7ff fc2d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019b8e:	2104      	movs	r1, #4
 8019b90:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019b94:	f7ff fc28 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8019b98:	2101      	movs	r1, #1
 8019b9a:	f245 5088 	movw	r0, #21896	; 0x5588
 8019b9e:	f7ff fc23 	bl	80193e8 <ov5640_write_reg>
            break;
 8019ba2:	e06a      	b.n	8019c7a <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_4:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019ba4:	21ff      	movs	r1, #255	; 0xff
 8019ba6:	f245 0001 	movw	r0, #20481	; 0x5001
 8019baa:	f7ff fc1d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x00);
 8019bae:	2100      	movs	r1, #0
 8019bb0:	f245 5087 	movw	r0, #21895	; 0x5587
 8019bb4:	f7ff fc18 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019bb8:	2104      	movs	r1, #4
 8019bba:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019bbe:	f7ff fc13 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8019bc2:	2101      	movs	r1, #1
 8019bc4:	f245 5088 	movw	r0, #21896	; 0x5588
 8019bc8:	f7ff fc0e 	bl	80193e8 <ov5640_write_reg>
            break;
 8019bcc:	e055      	b.n	8019c7a <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019bce:	21ff      	movs	r1, #255	; 0xff
 8019bd0:	f245 0001 	movw	r0, #20481	; 0x5001
 8019bd4:	f7ff fc08 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x10);
 8019bd8:	2110      	movs	r1, #16
 8019bda:	f245 5087 	movw	r0, #21895	; 0x5587
 8019bde:	f7ff fc03 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019be2:	2104      	movs	r1, #4
 8019be4:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019be8:	f7ff fbfe 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 8019bec:	2109      	movs	r1, #9
 8019bee:	f245 5088 	movw	r0, #21896	; 0x5588
 8019bf2:	f7ff fbf9 	bl	80193e8 <ov5640_write_reg>
            break;
 8019bf6:	e040      	b.n	8019c7a <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019bf8:	21ff      	movs	r1, #255	; 0xff
 8019bfa:	f245 0001 	movw	r0, #20481	; 0x5001
 8019bfe:	f7ff fbf3 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x20);
 8019c02:	2120      	movs	r1, #32
 8019c04:	f245 5087 	movw	r0, #21895	; 0x5587
 8019c08:	f7ff fbee 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019c0c:	2104      	movs	r1, #4
 8019c0e:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019c12:	f7ff fbe9 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 8019c16:	2109      	movs	r1, #9
 8019c18:	f245 5088 	movw	r0, #21896	; 0x5588
 8019c1c:	f7ff fbe4 	bl	80193e8 <ov5640_write_reg>
            break;
 8019c20:	e02b      	b.n	8019c7a <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019c22:	21ff      	movs	r1, #255	; 0xff
 8019c24:	f245 0001 	movw	r0, #20481	; 0x5001
 8019c28:	f7ff fbde 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x30);
 8019c2c:	2130      	movs	r1, #48	; 0x30
 8019c2e:	f245 5087 	movw	r0, #21895	; 0x5587
 8019c32:	f7ff fbd9 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019c36:	2104      	movs	r1, #4
 8019c38:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019c3c:	f7ff fbd4 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 8019c40:	2109      	movs	r1, #9
 8019c42:	f245 5088 	movw	r0, #21896	; 0x5588
 8019c46:	f7ff fbcf 	bl	80193e8 <ov5640_write_reg>
            break;
 8019c4a:	e016      	b.n	8019c7a <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019c4c:	21ff      	movs	r1, #255	; 0xff
 8019c4e:	f245 0001 	movw	r0, #20481	; 0x5001
 8019c52:	f7ff fbc9 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x40);
 8019c56:	2140      	movs	r1, #64	; 0x40
 8019c58:	f245 5087 	movw	r0, #21895	; 0x5587
 8019c5c:	f7ff fbc4 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019c60:	2104      	movs	r1, #4
 8019c62:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019c66:	f7ff fbbf 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 8019c6a:	2109      	movs	r1, #9
 8019c6c:	f245 5088 	movw	r0, #21896	; 0x5588
 8019c70:	f7ff fbba 	bl	80193e8 <ov5640_write_reg>
            break;
 8019c74:	e001      	b.n	8019c7a <ov5640_set_brightness+0x1ba>
        }
        default:
        {
            return OV5640_EINVAL;
 8019c76:	2302      	movs	r3, #2
 8019c78:	e000      	b.n	8019c7c <ov5640_set_brightness+0x1bc>
        }
    }

    return OV5640_EOK;
 8019c7a:	2300      	movs	r3, #0
}
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	3708      	adds	r7, #8
 8019c80:	46bd      	mov	sp, r7
 8019c82:	bd80      	pop	{r7, pc}

08019c84 <ov5640_set_contrast>:
 *                        OV5640_CONTRAST_8: -4
 * @retval      OV5640_EOK   : 设置OV5640模块对比度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_contrast(ov5640_contrast_t contrast)
{
 8019c84:	b580      	push	{r7, lr}
 8019c86:	b082      	sub	sp, #8
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	4603      	mov	r3, r0
 8019c8c:	71fb      	strb	r3, [r7, #7]
    switch (contrast)
 8019c8e:	79fb      	ldrb	r3, [r7, #7]
 8019c90:	2b08      	cmp	r3, #8
 8019c92:	f200 810e 	bhi.w	8019eb2 <ov5640_set_contrast+0x22e>
 8019c96:	a201      	add	r2, pc, #4	; (adr r2, 8019c9c <ov5640_set_contrast+0x18>)
 8019c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c9c:	08019cc1 	.word	0x08019cc1
 8019ca0:	08019cf5 	.word	0x08019cf5
 8019ca4:	08019d29 	.word	0x08019d29
 8019ca8:	08019d5d 	.word	0x08019d5d
 8019cac:	08019d91 	.word	0x08019d91
 8019cb0:	08019de3 	.word	0x08019de3
 8019cb4:	08019e17 	.word	0x08019e17
 8019cb8:	08019e4b 	.word	0x08019e4b
 8019cbc:	08019e7f 	.word	0x08019e7f
    {
        case OV5640_CONTRAST_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019cc0:	21ff      	movs	r1, #255	; 0xff
 8019cc2:	f245 0001 	movw	r0, #20481	; 0x5001
 8019cc6:	f7ff fb8f 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019cca:	2104      	movs	r1, #4
 8019ccc:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019cd0:	f7ff fb8a 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x30);
 8019cd4:	2130      	movs	r1, #48	; 0x30
 8019cd6:	f245 5086 	movw	r0, #21894	; 0x5586
 8019cda:	f7ff fb85 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x30);
 8019cde:	2130      	movs	r1, #48	; 0x30
 8019ce0:	f245 5085 	movw	r0, #21893	; 0x5585
 8019ce4:	f7ff fb80 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019ce8:	2141      	movs	r1, #65	; 0x41
 8019cea:	f245 5088 	movw	r0, #21896	; 0x5588
 8019cee:	f7ff fb7b 	bl	80193e8 <ov5640_write_reg>
            break;
 8019cf2:	e0e0      	b.n	8019eb6 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019cf4:	21ff      	movs	r1, #255	; 0xff
 8019cf6:	f245 0001 	movw	r0, #20481	; 0x5001
 8019cfa:	f7ff fb75 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019cfe:	2104      	movs	r1, #4
 8019d00:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019d04:	f7ff fb70 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x2C);
 8019d08:	212c      	movs	r1, #44	; 0x2c
 8019d0a:	f245 5086 	movw	r0, #21894	; 0x5586
 8019d0e:	f7ff fb6b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x2C);
 8019d12:	212c      	movs	r1, #44	; 0x2c
 8019d14:	f245 5085 	movw	r0, #21893	; 0x5585
 8019d18:	f7ff fb66 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019d1c:	2141      	movs	r1, #65	; 0x41
 8019d1e:	f245 5088 	movw	r0, #21896	; 0x5588
 8019d22:	f7ff fb61 	bl	80193e8 <ov5640_write_reg>
            break;
 8019d26:	e0c6      	b.n	8019eb6 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019d28:	21ff      	movs	r1, #255	; 0xff
 8019d2a:	f245 0001 	movw	r0, #20481	; 0x5001
 8019d2e:	f7ff fb5b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019d32:	2104      	movs	r1, #4
 8019d34:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019d38:	f7ff fb56 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x28);
 8019d3c:	2128      	movs	r1, #40	; 0x28
 8019d3e:	f245 5086 	movw	r0, #21894	; 0x5586
 8019d42:	f7ff fb51 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x28);
 8019d46:	2128      	movs	r1, #40	; 0x28
 8019d48:	f245 5085 	movw	r0, #21893	; 0x5585
 8019d4c:	f7ff fb4c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019d50:	2141      	movs	r1, #65	; 0x41
 8019d52:	f245 5088 	movw	r0, #21896	; 0x5588
 8019d56:	f7ff fb47 	bl	80193e8 <ov5640_write_reg>
            break;
 8019d5a:	e0ac      	b.n	8019eb6 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019d5c:	21ff      	movs	r1, #255	; 0xff
 8019d5e:	f245 0001 	movw	r0, #20481	; 0x5001
 8019d62:	f7ff fb41 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019d66:	2104      	movs	r1, #4
 8019d68:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019d6c:	f7ff fb3c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x24);
 8019d70:	2124      	movs	r1, #36	; 0x24
 8019d72:	f245 5086 	movw	r0, #21894	; 0x5586
 8019d76:	f7ff fb37 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x24);
 8019d7a:	2124      	movs	r1, #36	; 0x24
 8019d7c:	f245 5085 	movw	r0, #21893	; 0x5585
 8019d80:	f7ff fb32 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019d84:	2141      	movs	r1, #65	; 0x41
 8019d86:	f245 5088 	movw	r0, #21896	; 0x5588
 8019d8a:	f7ff fb2d 	bl	80193e8 <ov5640_write_reg>
            break;
 8019d8e:	e092      	b.n	8019eb6 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_4:
        {
        	ov5640_write_reg(0x3212, 0x03);
 8019d90:	2103      	movs	r1, #3
 8019d92:	f243 2012 	movw	r0, #12818	; 0x3212
 8019d96:	f7ff fb27 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5001, 0xFF);
 8019d9a:	21ff      	movs	r1, #255	; 0xff
 8019d9c:	f245 0001 	movw	r0, #20481	; 0x5001
 8019da0:	f7ff fb22 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019da4:	2104      	movs	r1, #4
 8019da6:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019daa:	f7ff fb1d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x20);
 8019dae:	2120      	movs	r1, #32
 8019db0:	f245 5086 	movw	r0, #21894	; 0x5586
 8019db4:	f7ff fb18 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x20);
 8019db8:	2120      	movs	r1, #32
 8019dba:	f245 5085 	movw	r0, #21893	; 0x5585
 8019dbe:	f7ff fb13 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019dc2:	2141      	movs	r1, #65	; 0x41
 8019dc4:	f245 5088 	movw	r0, #21896	; 0x5588
 8019dc8:	f7ff fb0e 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3212, 0x13);
 8019dcc:	2113      	movs	r1, #19
 8019dce:	f243 2012 	movw	r0, #12818	; 0x3212
 8019dd2:	f7ff fb09 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3212, 0xa3);
 8019dd6:	21a3      	movs	r1, #163	; 0xa3
 8019dd8:	f243 2012 	movw	r0, #12818	; 0x3212
 8019ddc:	f7ff fb04 	bl	80193e8 <ov5640_write_reg>
            break;
 8019de0:	e069      	b.n	8019eb6 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019de2:	21ff      	movs	r1, #255	; 0xff
 8019de4:	f245 0001 	movw	r0, #20481	; 0x5001
 8019de8:	f7ff fafe 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019dec:	2104      	movs	r1, #4
 8019dee:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019df2:	f7ff faf9 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x1C);
 8019df6:	211c      	movs	r1, #28
 8019df8:	f245 5086 	movw	r0, #21894	; 0x5586
 8019dfc:	f7ff faf4 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x1C);
 8019e00:	211c      	movs	r1, #28
 8019e02:	f245 5085 	movw	r0, #21893	; 0x5585
 8019e06:	f7ff faef 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019e0a:	2141      	movs	r1, #65	; 0x41
 8019e0c:	f245 5088 	movw	r0, #21896	; 0x5588
 8019e10:	f7ff faea 	bl	80193e8 <ov5640_write_reg>
            break;
 8019e14:	e04f      	b.n	8019eb6 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019e16:	21ff      	movs	r1, #255	; 0xff
 8019e18:	f245 0001 	movw	r0, #20481	; 0x5001
 8019e1c:	f7ff fae4 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019e20:	2104      	movs	r1, #4
 8019e22:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019e26:	f7ff fadf 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x18);
 8019e2a:	2118      	movs	r1, #24
 8019e2c:	f245 5086 	movw	r0, #21894	; 0x5586
 8019e30:	f7ff fada 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x18);
 8019e34:	2118      	movs	r1, #24
 8019e36:	f245 5085 	movw	r0, #21893	; 0x5585
 8019e3a:	f7ff fad5 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019e3e:	2141      	movs	r1, #65	; 0x41
 8019e40:	f245 5088 	movw	r0, #21896	; 0x5588
 8019e44:	f7ff fad0 	bl	80193e8 <ov5640_write_reg>
            break;
 8019e48:	e035      	b.n	8019eb6 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019e4a:	21ff      	movs	r1, #255	; 0xff
 8019e4c:	f245 0001 	movw	r0, #20481	; 0x5001
 8019e50:	f7ff faca 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019e54:	2104      	movs	r1, #4
 8019e56:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019e5a:	f7ff fac5 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x14);
 8019e5e:	2114      	movs	r1, #20
 8019e60:	f245 5086 	movw	r0, #21894	; 0x5586
 8019e64:	f7ff fac0 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x14);
 8019e68:	2114      	movs	r1, #20
 8019e6a:	f245 5085 	movw	r0, #21893	; 0x5585
 8019e6e:	f7ff fabb 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019e72:	2141      	movs	r1, #65	; 0x41
 8019e74:	f245 5088 	movw	r0, #21896	; 0x5588
 8019e78:	f7ff fab6 	bl	80193e8 <ov5640_write_reg>
            break;
 8019e7c:	e01b      	b.n	8019eb6 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019e7e:	21ff      	movs	r1, #255	; 0xff
 8019e80:	f245 0001 	movw	r0, #20481	; 0x5001
 8019e84:	f7ff fab0 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019e88:	2104      	movs	r1, #4
 8019e8a:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019e8e:	f7ff faab 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x10);
 8019e92:	2110      	movs	r1, #16
 8019e94:	f245 5086 	movw	r0, #21894	; 0x5586
 8019e98:	f7ff faa6 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x10);
 8019e9c:	2110      	movs	r1, #16
 8019e9e:	f245 5085 	movw	r0, #21893	; 0x5585
 8019ea2:	f7ff faa1 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019ea6:	2141      	movs	r1, #65	; 0x41
 8019ea8:	f245 5088 	movw	r0, #21896	; 0x5588
 8019eac:	f7ff fa9c 	bl	80193e8 <ov5640_write_reg>
            break;
 8019eb0:	e001      	b.n	8019eb6 <ov5640_set_contrast+0x232>
        }
        default:
        {
            return OV5640_EINVAL;
 8019eb2:	2302      	movs	r3, #2
 8019eb4:	e000      	b.n	8019eb8 <ov5640_set_contrast+0x234>
        }
    }

    return OV5640_EOK;
 8019eb6:	2300      	movs	r3, #0
}
 8019eb8:	4618      	mov	r0, r3
 8019eba:	3708      	adds	r7, #8
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	bd80      	pop	{r7, pc}

08019ec0 <ov5640_set_hue>:
 *                        OV5640_HUE_11: +150 degree
 * @retval      OV5640_EOK   : 设置OV5640模块色相成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_hue(ov5640_hue_t hue)
{
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	b082      	sub	sp, #8
 8019ec4:	af00      	add	r7, sp, #0
 8019ec6:	4603      	mov	r3, r0
 8019ec8:	71fb      	strb	r3, [r7, #7]
    switch (hue)
 8019eca:	79fb      	ldrb	r3, [r7, #7]
 8019ecc:	2b0b      	cmp	r3, #11
 8019ece:	f200 8153 	bhi.w	801a178 <ov5640_set_hue+0x2b8>
 8019ed2:	a201      	add	r2, pc, #4	; (adr r2, 8019ed8 <ov5640_set_hue+0x18>)
 8019ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ed8:	08019f09 	.word	0x08019f09
 8019edc:	08019f3d 	.word	0x08019f3d
 8019ee0:	08019f71 	.word	0x08019f71
 8019ee4:	08019fa5 	.word	0x08019fa5
 8019ee8:	08019fd9 	.word	0x08019fd9
 8019eec:	0801a00d 	.word	0x0801a00d
 8019ef0:	0801a041 	.word	0x0801a041
 8019ef4:	0801a075 	.word	0x0801a075
 8019ef8:	0801a0a9 	.word	0x0801a0a9
 8019efc:	0801a0dd 	.word	0x0801a0dd
 8019f00:	0801a111 	.word	0x0801a111
 8019f04:	0801a145 	.word	0x0801a145
    {
        case OV5640_HUE_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019f08:	21ff      	movs	r1, #255	; 0xff
 8019f0a:	f245 0001 	movw	r0, #20481	; 0x5001
 8019f0e:	f7ff fa6b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 8019f12:	2101      	movs	r1, #1
 8019f14:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019f18:	f7ff fa66 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x80);
 8019f1c:	2180      	movs	r1, #128	; 0x80
 8019f1e:	f245 5081 	movw	r0, #21889	; 0x5581
 8019f22:	f7ff fa61 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x00);
 8019f26:	2100      	movs	r1, #0
 8019f28:	f245 5082 	movw	r0, #21890	; 0x5582
 8019f2c:	f7ff fa5c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x32);
 8019f30:	2132      	movs	r1, #50	; 0x32
 8019f32:	f245 5088 	movw	r0, #21896	; 0x5588
 8019f36:	f7ff fa57 	bl	80193e8 <ov5640_write_reg>
            break;
 8019f3a:	e11f      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019f3c:	21ff      	movs	r1, #255	; 0xff
 8019f3e:	f245 0001 	movw	r0, #20481	; 0x5001
 8019f42:	f7ff fa51 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 8019f46:	2101      	movs	r1, #1
 8019f48:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019f4c:	f7ff fa4c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 8019f50:	216f      	movs	r1, #111	; 0x6f
 8019f52:	f245 5081 	movw	r0, #21889	; 0x5581
 8019f56:	f7ff fa47 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 8019f5a:	2140      	movs	r1, #64	; 0x40
 8019f5c:	f245 5082 	movw	r0, #21890	; 0x5582
 8019f60:	f7ff fa42 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x32);
 8019f64:	2132      	movs	r1, #50	; 0x32
 8019f66:	f245 5088 	movw	r0, #21896	; 0x5588
 8019f6a:	f7ff fa3d 	bl	80193e8 <ov5640_write_reg>
            break;
 8019f6e:	e105      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019f70:	21ff      	movs	r1, #255	; 0xff
 8019f72:	f245 0001 	movw	r0, #20481	; 0x5001
 8019f76:	f7ff fa37 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 8019f7a:	2101      	movs	r1, #1
 8019f7c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019f80:	f7ff fa32 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 8019f84:	2140      	movs	r1, #64	; 0x40
 8019f86:	f245 5081 	movw	r0, #21889	; 0x5581
 8019f8a:	f7ff fa2d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 8019f8e:	216f      	movs	r1, #111	; 0x6f
 8019f90:	f245 5082 	movw	r0, #21890	; 0x5582
 8019f94:	f7ff fa28 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x32);
 8019f98:	2132      	movs	r1, #50	; 0x32
 8019f9a:	f245 5088 	movw	r0, #21896	; 0x5588
 8019f9e:	f7ff fa23 	bl	80193e8 <ov5640_write_reg>
            break;
 8019fa2:	e0eb      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019fa4:	21ff      	movs	r1, #255	; 0xff
 8019fa6:	f245 0001 	movw	r0, #20481	; 0x5001
 8019faa:	f7ff fa1d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 8019fae:	2101      	movs	r1, #1
 8019fb0:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019fb4:	f7ff fa18 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x00);
 8019fb8:	2100      	movs	r1, #0
 8019fba:	f245 5081 	movw	r0, #21889	; 0x5581
 8019fbe:	f7ff fa13 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x80);
 8019fc2:	2180      	movs	r1, #128	; 0x80
 8019fc4:	f245 5082 	movw	r0, #21890	; 0x5582
 8019fc8:	f7ff fa0e 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x02);
 8019fcc:	2102      	movs	r1, #2
 8019fce:	f245 5088 	movw	r0, #21896	; 0x5588
 8019fd2:	f7ff fa09 	bl	80193e8 <ov5640_write_reg>
            break;
 8019fd6:	e0d1      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_4:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019fd8:	21ff      	movs	r1, #255	; 0xff
 8019fda:	f245 0001 	movw	r0, #20481	; 0x5001
 8019fde:	f7ff fa03 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 8019fe2:	2101      	movs	r1, #1
 8019fe4:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019fe8:	f7ff f9fe 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 8019fec:	2140      	movs	r1, #64	; 0x40
 8019fee:	f245 5081 	movw	r0, #21889	; 0x5581
 8019ff2:	f7ff f9f9 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 8019ff6:	216f      	movs	r1, #111	; 0x6f
 8019ff8:	f245 5082 	movw	r0, #21890	; 0x5582
 8019ffc:	f7ff f9f4 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x02);
 801a000:	2102      	movs	r1, #2
 801a002:	f245 5088 	movw	r0, #21896	; 0x5588
 801a006:	f7ff f9ef 	bl	80193e8 <ov5640_write_reg>
            break;
 801a00a:	e0b7      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a00c:	21ff      	movs	r1, #255	; 0xff
 801a00e:	f245 0001 	movw	r0, #20481	; 0x5001
 801a012:	f7ff f9e9 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a016:	2101      	movs	r1, #1
 801a018:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a01c:	f7ff f9e4 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 801a020:	216f      	movs	r1, #111	; 0x6f
 801a022:	f245 5081 	movw	r0, #21889	; 0x5581
 801a026:	f7ff f9df 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 801a02a:	2140      	movs	r1, #64	; 0x40
 801a02c:	f245 5082 	movw	r0, #21890	; 0x5582
 801a030:	f7ff f9da 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x02);
 801a034:	2102      	movs	r1, #2
 801a036:	f245 5088 	movw	r0, #21896	; 0x5588
 801a03a:	f7ff f9d5 	bl	80193e8 <ov5640_write_reg>
            break;
 801a03e:	e09d      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a040:	21ff      	movs	r1, #255	; 0xff
 801a042:	f245 0001 	movw	r0, #20481	; 0x5001
 801a046:	f7ff f9cf 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a04a:	2101      	movs	r1, #1
 801a04c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a050:	f7ff f9ca 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x80);
 801a054:	2180      	movs	r1, #128	; 0x80
 801a056:	f245 5081 	movw	r0, #21889	; 0x5581
 801a05a:	f7ff f9c5 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x00);
 801a05e:	2100      	movs	r1, #0
 801a060:	f245 5082 	movw	r0, #21890	; 0x5582
 801a064:	f7ff f9c0 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 801a068:	2101      	movs	r1, #1
 801a06a:	f245 5088 	movw	r0, #21896	; 0x5588
 801a06e:	f7ff f9bb 	bl	80193e8 <ov5640_write_reg>
            break;
 801a072:	e083      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a074:	21ff      	movs	r1, #255	; 0xff
 801a076:	f245 0001 	movw	r0, #20481	; 0x5001
 801a07a:	f7ff f9b5 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a07e:	2101      	movs	r1, #1
 801a080:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a084:	f7ff f9b0 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 801a088:	216f      	movs	r1, #111	; 0x6f
 801a08a:	f245 5081 	movw	r0, #21889	; 0x5581
 801a08e:	f7ff f9ab 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 801a092:	2140      	movs	r1, #64	; 0x40
 801a094:	f245 5082 	movw	r0, #21890	; 0x5582
 801a098:	f7ff f9a6 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 801a09c:	2101      	movs	r1, #1
 801a09e:	f245 5088 	movw	r0, #21896	; 0x5588
 801a0a2:	f7ff f9a1 	bl	80193e8 <ov5640_write_reg>
            break;
 801a0a6:	e069      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a0a8:	21ff      	movs	r1, #255	; 0xff
 801a0aa:	f245 0001 	movw	r0, #20481	; 0x5001
 801a0ae:	f7ff f99b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a0b2:	2101      	movs	r1, #1
 801a0b4:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a0b8:	f7ff f996 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 801a0bc:	2140      	movs	r1, #64	; 0x40
 801a0be:	f245 5081 	movw	r0, #21889	; 0x5581
 801a0c2:	f7ff f991 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 801a0c6:	216f      	movs	r1, #111	; 0x6f
 801a0c8:	f245 5082 	movw	r0, #21890	; 0x5582
 801a0cc:	f7ff f98c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 801a0d0:	2101      	movs	r1, #1
 801a0d2:	f245 5088 	movw	r0, #21896	; 0x5588
 801a0d6:	f7ff f987 	bl	80193e8 <ov5640_write_reg>
            break;
 801a0da:	e04f      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_9:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a0dc:	21ff      	movs	r1, #255	; 0xff
 801a0de:	f245 0001 	movw	r0, #20481	; 0x5001
 801a0e2:	f7ff f981 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a0e6:	2101      	movs	r1, #1
 801a0e8:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a0ec:	f7ff f97c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x00);
 801a0f0:	2100      	movs	r1, #0
 801a0f2:	f245 5081 	movw	r0, #21889	; 0x5581
 801a0f6:	f7ff f977 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x80);
 801a0fa:	2180      	movs	r1, #128	; 0x80
 801a0fc:	f245 5082 	movw	r0, #21890	; 0x5582
 801a100:	f7ff f972 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x31);
 801a104:	2131      	movs	r1, #49	; 0x31
 801a106:	f245 5088 	movw	r0, #21896	; 0x5588
 801a10a:	f7ff f96d 	bl	80193e8 <ov5640_write_reg>
            break;
 801a10e:	e035      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_10:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a110:	21ff      	movs	r1, #255	; 0xff
 801a112:	f245 0001 	movw	r0, #20481	; 0x5001
 801a116:	f7ff f967 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a11a:	2101      	movs	r1, #1
 801a11c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a120:	f7ff f962 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 801a124:	2140      	movs	r1, #64	; 0x40
 801a126:	f245 5081 	movw	r0, #21889	; 0x5581
 801a12a:	f7ff f95d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 801a12e:	216f      	movs	r1, #111	; 0x6f
 801a130:	f245 5082 	movw	r0, #21890	; 0x5582
 801a134:	f7ff f958 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x31);
 801a138:	2131      	movs	r1, #49	; 0x31
 801a13a:	f245 5088 	movw	r0, #21896	; 0x5588
 801a13e:	f7ff f953 	bl	80193e8 <ov5640_write_reg>
            break;
 801a142:	e01b      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_11:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a144:	21ff      	movs	r1, #255	; 0xff
 801a146:	f245 0001 	movw	r0, #20481	; 0x5001
 801a14a:	f7ff f94d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a14e:	2101      	movs	r1, #1
 801a150:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a154:	f7ff f948 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 801a158:	216f      	movs	r1, #111	; 0x6f
 801a15a:	f245 5081 	movw	r0, #21889	; 0x5581
 801a15e:	f7ff f943 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 801a162:	2140      	movs	r1, #64	; 0x40
 801a164:	f245 5082 	movw	r0, #21890	; 0x5582
 801a168:	f7ff f93e 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x31);
 801a16c:	2131      	movs	r1, #49	; 0x31
 801a16e:	f245 5088 	movw	r0, #21896	; 0x5588
 801a172:	f7ff f939 	bl	80193e8 <ov5640_write_reg>
            break;
 801a176:	e001      	b.n	801a17c <ov5640_set_hue+0x2bc>
        }
        default:
        {
            return OV5640_EINVAL;
 801a178:	2302      	movs	r3, #2
 801a17a:	e000      	b.n	801a17e <ov5640_set_hue+0x2be>
        }
    }

    return OV5640_EOK;
 801a17c:	2300      	movs	r3, #0
}
 801a17e:	4618      	mov	r0, r3
 801a180:	3708      	adds	r7, #8
 801a182:	46bd      	mov	sp, r7
 801a184:	bd80      	pop	{r7, pc}
 801a186:	bf00      	nop

0801a188 <ov5640_set_special_effect>:
 *                        OV5640_SPECIAL_EFFECT_NEGATIVE: Negative
 * @retval      OV5640_EOK   : 设置OV5640模块特殊效果成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_special_effect(ov5640_special_effect_t effect)
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b082      	sub	sp, #8
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	4603      	mov	r3, r0
 801a190:	71fb      	strb	r3, [r7, #7]
    switch (effect)
 801a192:	79fb      	ldrb	r3, [r7, #7]
 801a194:	2b06      	cmp	r3, #6
 801a196:	f200 8090 	bhi.w	801a2ba <ov5640_set_special_effect+0x132>
 801a19a:	a201      	add	r2, pc, #4	; (adr r2, 801a1a0 <ov5640_set_special_effect+0x18>)
 801a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1a0:	0801a1bd 	.word	0x0801a1bd
 801a1a4:	0801a1d3 	.word	0x0801a1d3
 801a1a8:	0801a1fd 	.word	0x0801a1fd
 801a1ac:	0801a227 	.word	0x0801a227
 801a1b0:	0801a251 	.word	0x0801a251
 801a1b4:	0801a27b 	.word	0x0801a27b
 801a1b8:	0801a2a5 	.word	0x0801a2a5
    {
        case OV5640_SPECIAL_EFFECT_NORMAL:
        {
            ov5640_write_reg(0x5001, 0x7F);
 801a1bc:	217f      	movs	r1, #127	; 0x7f
 801a1be:	f245 0001 	movw	r0, #20481	; 0x5001
 801a1c2:	f7ff f911 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x00);
 801a1c6:	2100      	movs	r1, #0
 801a1c8:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a1cc:	f7ff f90c 	bl	80193e8 <ov5640_write_reg>
            break;
 801a1d0:	e075      	b.n	801a2be <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_BW:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a1d2:	21ff      	movs	r1, #255	; 0xff
 801a1d4:	f245 0001 	movw	r0, #20481	; 0x5001
 801a1d8:	f7ff f906 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 801a1dc:	2118      	movs	r1, #24
 801a1de:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a1e2:	f7ff f901 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x80);
 801a1e6:	2180      	movs	r1, #128	; 0x80
 801a1e8:	f245 5083 	movw	r0, #21891	; 0x5583
 801a1ec:	f7ff f8fc 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x80);
 801a1f0:	2180      	movs	r1, #128	; 0x80
 801a1f2:	f245 5084 	movw	r0, #21892	; 0x5584
 801a1f6:	f7ff f8f7 	bl	80193e8 <ov5640_write_reg>
            break;
 801a1fa:	e060      	b.n	801a2be <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_BLUISH:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a1fc:	21ff      	movs	r1, #255	; 0xff
 801a1fe:	f245 0001 	movw	r0, #20481	; 0x5001
 801a202:	f7ff f8f1 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 801a206:	2118      	movs	r1, #24
 801a208:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a20c:	f7ff f8ec 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0xA0);
 801a210:	21a0      	movs	r1, #160	; 0xa0
 801a212:	f245 5083 	movw	r0, #21891	; 0x5583
 801a216:	f7ff f8e7 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x40);
 801a21a:	2140      	movs	r1, #64	; 0x40
 801a21c:	f245 5084 	movw	r0, #21892	; 0x5584
 801a220:	f7ff f8e2 	bl	80193e8 <ov5640_write_reg>
            break;
 801a224:	e04b      	b.n	801a2be <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_SEPIA:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a226:	21ff      	movs	r1, #255	; 0xff
 801a228:	f245 0001 	movw	r0, #20481	; 0x5001
 801a22c:	f7ff f8dc 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 801a230:	2118      	movs	r1, #24
 801a232:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a236:	f7ff f8d7 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x40);
 801a23a:	2140      	movs	r1, #64	; 0x40
 801a23c:	f245 5083 	movw	r0, #21891	; 0x5583
 801a240:	f7ff f8d2 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0xA0);
 801a244:	21a0      	movs	r1, #160	; 0xa0
 801a246:	f245 5084 	movw	r0, #21892	; 0x5584
 801a24a:	f7ff f8cd 	bl	80193e8 <ov5640_write_reg>
            break;
 801a24e:	e036      	b.n	801a2be <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_REDDISH:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a250:	21ff      	movs	r1, #255	; 0xff
 801a252:	f245 0001 	movw	r0, #20481	; 0x5001
 801a256:	f7ff f8c7 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 801a25a:	2118      	movs	r1, #24
 801a25c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a260:	f7ff f8c2 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x80);
 801a264:	2180      	movs	r1, #128	; 0x80
 801a266:	f245 5083 	movw	r0, #21891	; 0x5583
 801a26a:	f7ff f8bd 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0xC0);
 801a26e:	21c0      	movs	r1, #192	; 0xc0
 801a270:	f245 5084 	movw	r0, #21892	; 0x5584
 801a274:	f7ff f8b8 	bl	80193e8 <ov5640_write_reg>
            break;
 801a278:	e021      	b.n	801a2be <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_GREENISH:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a27a:	21ff      	movs	r1, #255	; 0xff
 801a27c:	f245 0001 	movw	r0, #20481	; 0x5001
 801a280:	f7ff f8b2 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 801a284:	2118      	movs	r1, #24
 801a286:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a28a:	f7ff f8ad 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x60);
 801a28e:	2160      	movs	r1, #96	; 0x60
 801a290:	f245 5083 	movw	r0, #21891	; 0x5583
 801a294:	f7ff f8a8 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x60);
 801a298:	2160      	movs	r1, #96	; 0x60
 801a29a:	f245 5084 	movw	r0, #21892	; 0x5584
 801a29e:	f7ff f8a3 	bl	80193e8 <ov5640_write_reg>
            break;
 801a2a2:	e00c      	b.n	801a2be <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_NEGATIVE:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a2a4:	21ff      	movs	r1, #255	; 0xff
 801a2a6:	f245 0001 	movw	r0, #20481	; 0x5001
 801a2aa:	f7ff f89d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x40);
 801a2ae:	2140      	movs	r1, #64	; 0x40
 801a2b0:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a2b4:	f7ff f898 	bl	80193e8 <ov5640_write_reg>
            break;
 801a2b8:	e001      	b.n	801a2be <ov5640_set_special_effect+0x136>
        }
        default:
        {
            return OV5640_EINVAL;
 801a2ba:	2302      	movs	r3, #2
 801a2bc:	e000      	b.n	801a2c0 <ov5640_set_special_effect+0x138>
        }
    }

    return OV5640_EOK;
 801a2be:	2300      	movs	r3, #0
}
 801a2c0:	4618      	mov	r0, r3
 801a2c2:	3708      	adds	r7, #8
 801a2c4:	46bd      	mov	sp, r7
 801a2c6:	bd80      	pop	{r7, pc}

0801a2c8 <ov5640_set_exposure_level>:
 *                        OV5640_EXPOSURE_LEVEL_10: 1.7EV
 * @retval      OV5640_EOK   : 设置OV5640模块曝光度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_exposure_level(ov5640_exposure_level_t level)
{
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	b082      	sub	sp, #8
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	4603      	mov	r3, r0
 801a2d0:	71fb      	strb	r3, [r7, #7]
    switch (level)
 801a2d2:	79fb      	ldrb	r3, [r7, #7]
 801a2d4:	2b0a      	cmp	r3, #10
 801a2d6:	f200 816e 	bhi.w	801a5b6 <ov5640_set_exposure_level+0x2ee>
 801a2da:	a201      	add	r2, pc, #4	; (adr r2, 801a2e0 <ov5640_set_exposure_level+0x18>)
 801a2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2e0:	0801a30d 	.word	0x0801a30d
 801a2e4:	0801a34b 	.word	0x0801a34b
 801a2e8:	0801a389 	.word	0x0801a389
 801a2ec:	0801a3c7 	.word	0x0801a3c7
 801a2f0:	0801a405 	.word	0x0801a405
 801a2f4:	0801a443 	.word	0x0801a443
 801a2f8:	0801a481 	.word	0x0801a481
 801a2fc:	0801a4bf 	.word	0x0801a4bf
 801a300:	0801a4fd 	.word	0x0801a4fd
 801a304:	0801a53b 	.word	0x0801a53b
 801a308:	0801a579 	.word	0x0801a579
    {
        case OV5640_EXPOSURE_LEVEL_0:
        {
            ov5640_write_reg(0x3A0F, 0x10);
 801a30c:	2110      	movs	r1, #16
 801a30e:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a312:	f7ff f869 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x08);
 801a316:	2108      	movs	r1, #8
 801a318:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a31c:	f7ff f864 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x10);
 801a320:	2110      	movs	r1, #16
 801a322:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a326:	f7ff f85f 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x08);
 801a32a:	2108      	movs	r1, #8
 801a32c:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a330:	f7ff f85a 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x20);
 801a334:	2120      	movs	r1, #32
 801a336:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a33a:	f7ff f855 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a33e:	2110      	movs	r1, #16
 801a340:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a344:	f7ff f850 	bl	80193e8 <ov5640_write_reg>
            break;
 801a348:	e137      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_1:
        {
            ov5640_write_reg(0x3A0F, 0x18);
 801a34a:	2118      	movs	r1, #24
 801a34c:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a350:	f7ff f84a 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x10);
 801a354:	2110      	movs	r1, #16
 801a356:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a35a:	f7ff f845 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x18);
 801a35e:	2118      	movs	r1, #24
 801a360:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a364:	f7ff f840 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x10);
 801a368:	2110      	movs	r1, #16
 801a36a:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a36e:	f7ff f83b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x30);
 801a372:	2130      	movs	r1, #48	; 0x30
 801a374:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a378:	f7ff f836 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a37c:	2110      	movs	r1, #16
 801a37e:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a382:	f7ff f831 	bl	80193e8 <ov5640_write_reg>
            break;
 801a386:	e118      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_2:
        {
            ov5640_write_reg(0x3A0F, 0x20);
 801a388:	2120      	movs	r1, #32
 801a38a:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a38e:	f7ff f82b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x18);
 801a392:	2118      	movs	r1, #24
 801a394:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a398:	f7ff f826 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x41);
 801a39c:	2141      	movs	r1, #65	; 0x41
 801a39e:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a3a2:	f7ff f821 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x20);
 801a3a6:	2120      	movs	r1, #32
 801a3a8:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a3ac:	f7ff f81c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x18);
 801a3b0:	2118      	movs	r1, #24
 801a3b2:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a3b6:	f7ff f817 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a3ba:	2110      	movs	r1, #16
 801a3bc:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a3c0:	f7ff f812 	bl	80193e8 <ov5640_write_reg>
            break;
 801a3c4:	e0f9      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_3:
        {
            ov5640_write_reg(0x3A0F, 0x28);
 801a3c6:	2128      	movs	r1, #40	; 0x28
 801a3c8:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a3cc:	f7ff f80c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x20);
 801a3d0:	2120      	movs	r1, #32
 801a3d2:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a3d6:	f7ff f807 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x51);
 801a3da:	2151      	movs	r1, #81	; 0x51
 801a3dc:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a3e0:	f7ff f802 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x28);
 801a3e4:	2128      	movs	r1, #40	; 0x28
 801a3e6:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a3ea:	f7fe fffd 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x20);
 801a3ee:	2120      	movs	r1, #32
 801a3f0:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a3f4:	f7fe fff8 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a3f8:	2110      	movs	r1, #16
 801a3fa:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a3fe:	f7fe fff3 	bl	80193e8 <ov5640_write_reg>
            break;
 801a402:	e0da      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_4:
        {
            ov5640_write_reg(0x3A0F, 0x30);
 801a404:	2130      	movs	r1, #48	; 0x30
 801a406:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a40a:	f7fe ffed 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x28);
 801a40e:	2128      	movs	r1, #40	; 0x28
 801a410:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a414:	f7fe ffe8 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x61);
 801a418:	2161      	movs	r1, #97	; 0x61
 801a41a:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a41e:	f7fe ffe3 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x30);
 801a422:	2130      	movs	r1, #48	; 0x30
 801a424:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a428:	f7fe ffde 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x28);
 801a42c:	2128      	movs	r1, #40	; 0x28
 801a42e:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a432:	f7fe ffd9 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a436:	2110      	movs	r1, #16
 801a438:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a43c:	f7fe ffd4 	bl	80193e8 <ov5640_write_reg>
            break;
 801a440:	e0bb      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_5:
        {
            ov5640_write_reg(0x3A0F, 0x38);
 801a442:	2138      	movs	r1, #56	; 0x38
 801a444:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a448:	f7fe ffce 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x30);
 801a44c:	2130      	movs	r1, #48	; 0x30
 801a44e:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a452:	f7fe ffc9 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x61);
 801a456:	2161      	movs	r1, #97	; 0x61
 801a458:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a45c:	f7fe ffc4 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x38);
 801a460:	2138      	movs	r1, #56	; 0x38
 801a462:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a466:	f7fe ffbf 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x30);
 801a46a:	2130      	movs	r1, #48	; 0x30
 801a46c:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a470:	f7fe ffba 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a474:	2110      	movs	r1, #16
 801a476:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a47a:	f7fe ffb5 	bl	80193e8 <ov5640_write_reg>
            break;
 801a47e:	e09c      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_6:
        {
            ov5640_write_reg(0x3A0F, 0x40);
 801a480:	2140      	movs	r1, #64	; 0x40
 801a482:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a486:	f7fe ffaf 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x38);
 801a48a:	2138      	movs	r1, #56	; 0x38
 801a48c:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a490:	f7fe ffaa 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x71);
 801a494:	2171      	movs	r1, #113	; 0x71
 801a496:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a49a:	f7fe ffa5 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x40);
 801a49e:	2140      	movs	r1, #64	; 0x40
 801a4a0:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a4a4:	f7fe ffa0 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x38);
 801a4a8:	2138      	movs	r1, #56	; 0x38
 801a4aa:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a4ae:	f7fe ff9b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a4b2:	2110      	movs	r1, #16
 801a4b4:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a4b8:	f7fe ff96 	bl	80193e8 <ov5640_write_reg>
            break;
 801a4bc:	e07d      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_7:
        {
            ov5640_write_reg(0x3A0F, 0x48);
 801a4be:	2148      	movs	r1, #72	; 0x48
 801a4c0:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a4c4:	f7fe ff90 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x40);
 801a4c8:	2140      	movs	r1, #64	; 0x40
 801a4ca:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a4ce:	f7fe ff8b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x80);
 801a4d2:	2180      	movs	r1, #128	; 0x80
 801a4d4:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a4d8:	f7fe ff86 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x48);
 801a4dc:	2148      	movs	r1, #72	; 0x48
 801a4de:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a4e2:	f7fe ff81 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x40);
 801a4e6:	2140      	movs	r1, #64	; 0x40
 801a4e8:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a4ec:	f7fe ff7c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 801a4f0:	2120      	movs	r1, #32
 801a4f2:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a4f6:	f7fe ff77 	bl	80193e8 <ov5640_write_reg>
            break;
 801a4fa:	e05e      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_8:
        {
            ov5640_write_reg(0x3A0F, 0x50);
 801a4fc:	2150      	movs	r1, #80	; 0x50
 801a4fe:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a502:	f7fe ff71 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x48);
 801a506:	2148      	movs	r1, #72	; 0x48
 801a508:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a50c:	f7fe ff6c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x90);
 801a510:	2190      	movs	r1, #144	; 0x90
 801a512:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a516:	f7fe ff67 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x50);
 801a51a:	2150      	movs	r1, #80	; 0x50
 801a51c:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a520:	f7fe ff62 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x48);
 801a524:	2148      	movs	r1, #72	; 0x48
 801a526:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a52a:	f7fe ff5d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 801a52e:	2120      	movs	r1, #32
 801a530:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a534:	f7fe ff58 	bl	80193e8 <ov5640_write_reg>
            break;
 801a538:	e03f      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_9:
        {
            ov5640_write_reg(0x3A0F, 0x58);
 801a53a:	2158      	movs	r1, #88	; 0x58
 801a53c:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a540:	f7fe ff52 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x50);
 801a544:	2150      	movs	r1, #80	; 0x50
 801a546:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a54a:	f7fe ff4d 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x91);
 801a54e:	2191      	movs	r1, #145	; 0x91
 801a550:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a554:	f7fe ff48 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x58);
 801a558:	2158      	movs	r1, #88	; 0x58
 801a55a:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a55e:	f7fe ff43 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x50);
 801a562:	2150      	movs	r1, #80	; 0x50
 801a564:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a568:	f7fe ff3e 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 801a56c:	2120      	movs	r1, #32
 801a56e:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a572:	f7fe ff39 	bl	80193e8 <ov5640_write_reg>
            break;
 801a576:	e020      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_10:
        {
            ov5640_write_reg(0x3A0F, 0x60);
 801a578:	2160      	movs	r1, #96	; 0x60
 801a57a:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a57e:	f7fe ff33 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x58);
 801a582:	2158      	movs	r1, #88	; 0x58
 801a584:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a588:	f7fe ff2e 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0xA0);
 801a58c:	21a0      	movs	r1, #160	; 0xa0
 801a58e:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a592:	f7fe ff29 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x60);
 801a596:	2160      	movs	r1, #96	; 0x60
 801a598:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a59c:	f7fe ff24 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x58);
 801a5a0:	2158      	movs	r1, #88	; 0x58
 801a5a2:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a5a6:	f7fe ff1f 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 801a5aa:	2120      	movs	r1, #32
 801a5ac:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a5b0:	f7fe ff1a 	bl	80193e8 <ov5640_write_reg>
            break;
 801a5b4:	e001      	b.n	801a5ba <ov5640_set_exposure_level+0x2f2>
        }
        default:
        {
            return OV5640_EINVAL;
 801a5b6:	2302      	movs	r3, #2
 801a5b8:	e000      	b.n	801a5bc <ov5640_set_exposure_level+0x2f4>
        }
    }

    return OV5640_EOK;
 801a5ba:	2300      	movs	r3, #0
}
 801a5bc:	4618      	mov	r0, r3
 801a5be:	3708      	adds	r7, #8
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	bd80      	pop	{r7, pc}

0801a5c4 <ov5640_set_sharpness_level>:
 *                        OV5640_SHARPNESS_AUTO : Sharpness Auto
 * @retval      OV5640_EOK   : 设置OV5640模块锐度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_sharpness_level(ov5640_sharpness_t sharpness)
{
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	b082      	sub	sp, #8
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	4603      	mov	r3, r0
 801a5cc:	71fb      	strb	r3, [r7, #7]
    switch (sharpness)
 801a5ce:	79fb      	ldrb	r3, [r7, #7]
 801a5d0:	2b09      	cmp	r3, #9
 801a5d2:	f200 80a8 	bhi.w	801a726 <ov5640_set_sharpness_level+0x162>
 801a5d6:	a201      	add	r2, pc, #4	; (adr r2, 801a5dc <ov5640_set_sharpness_level+0x18>)
 801a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5dc:	0801a605 	.word	0x0801a605
 801a5e0:	0801a61b 	.word	0x0801a61b
 801a5e4:	0801a631 	.word	0x0801a631
 801a5e8:	0801a647 	.word	0x0801a647
 801a5ec:	0801a65d 	.word	0x0801a65d
 801a5f0:	0801a673 	.word	0x0801a673
 801a5f4:	0801a689 	.word	0x0801a689
 801a5f8:	0801a69f 	.word	0x0801a69f
 801a5fc:	0801a6b5 	.word	0x0801a6b5
 801a600:	0801a6cb 	.word	0x0801a6cb
    {
        case OV5640_SHARPNESS_OFF:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a604:	2165      	movs	r1, #101	; 0x65
 801a606:	f245 3008 	movw	r0, #21256	; 0x5308
 801a60a:	f7fe feed 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x00);
 801a60e:	2100      	movs	r1, #0
 801a610:	f245 3002 	movw	r0, #21250	; 0x5302
 801a614:	f7fe fee8 	bl	80193e8 <ov5640_write_reg>
            break;
 801a618:	e087      	b.n	801a72a <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_1:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a61a:	2165      	movs	r1, #101	; 0x65
 801a61c:	f245 3008 	movw	r0, #21256	; 0x5308
 801a620:	f7fe fee2 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x02);
 801a624:	2102      	movs	r1, #2
 801a626:	f245 3002 	movw	r0, #21250	; 0x5302
 801a62a:	f7fe fedd 	bl	80193e8 <ov5640_write_reg>
            break;
 801a62e:	e07c      	b.n	801a72a <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_2:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a630:	2165      	movs	r1, #101	; 0x65
 801a632:	f245 3008 	movw	r0, #21256	; 0x5308
 801a636:	f7fe fed7 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x04);
 801a63a:	2104      	movs	r1, #4
 801a63c:	f245 3002 	movw	r0, #21250	; 0x5302
 801a640:	f7fe fed2 	bl	80193e8 <ov5640_write_reg>
            break;
 801a644:	e071      	b.n	801a72a <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_3:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a646:	2165      	movs	r1, #101	; 0x65
 801a648:	f245 3008 	movw	r0, #21256	; 0x5308
 801a64c:	f7fe fecc 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x08);
 801a650:	2108      	movs	r1, #8
 801a652:	f245 3002 	movw	r0, #21250	; 0x5302
 801a656:	f7fe fec7 	bl	80193e8 <ov5640_write_reg>
            break;
 801a65a:	e066      	b.n	801a72a <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_4:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a65c:	2165      	movs	r1, #101	; 0x65
 801a65e:	f245 3008 	movw	r0, #21256	; 0x5308
 801a662:	f7fe fec1 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x0C);
 801a666:	210c      	movs	r1, #12
 801a668:	f245 3002 	movw	r0, #21250	; 0x5302
 801a66c:	f7fe febc 	bl	80193e8 <ov5640_write_reg>
            break;
 801a670:	e05b      	b.n	801a72a <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_5:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a672:	2165      	movs	r1, #101	; 0x65
 801a674:	f245 3008 	movw	r0, #21256	; 0x5308
 801a678:	f7fe feb6 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x10);
 801a67c:	2110      	movs	r1, #16
 801a67e:	f245 3002 	movw	r0, #21250	; 0x5302
 801a682:	f7fe feb1 	bl	80193e8 <ov5640_write_reg>
            break;
 801a686:	e050      	b.n	801a72a <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_6:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a688:	2165      	movs	r1, #101	; 0x65
 801a68a:	f245 3008 	movw	r0, #21256	; 0x5308
 801a68e:	f7fe feab 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x14);
 801a692:	2114      	movs	r1, #20
 801a694:	f245 3002 	movw	r0, #21250	; 0x5302
 801a698:	f7fe fea6 	bl	80193e8 <ov5640_write_reg>
            break;
 801a69c:	e045      	b.n	801a72a <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_7:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a69e:	2165      	movs	r1, #101	; 0x65
 801a6a0:	f245 3008 	movw	r0, #21256	; 0x5308
 801a6a4:	f7fe fea0 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x18);
 801a6a8:	2118      	movs	r1, #24
 801a6aa:	f245 3002 	movw	r0, #21250	; 0x5302
 801a6ae:	f7fe fe9b 	bl	80193e8 <ov5640_write_reg>
            break;
 801a6b2:	e03a      	b.n	801a72a <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_8:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a6b4:	2165      	movs	r1, #101	; 0x65
 801a6b6:	f245 3008 	movw	r0, #21256	; 0x5308
 801a6ba:	f7fe fe95 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x20);
 801a6be:	2120      	movs	r1, #32
 801a6c0:	f245 3002 	movw	r0, #21250	; 0x5302
 801a6c4:	f7fe fe90 	bl	80193e8 <ov5640_write_reg>
            break;
 801a6c8:	e02f      	b.n	801a72a <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_AUTO:
        {
            ov5640_write_reg(0x5308, 0x25);
 801a6ca:	2125      	movs	r1, #37	; 0x25
 801a6cc:	f245 3008 	movw	r0, #21256	; 0x5308
 801a6d0:	f7fe fe8a 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5300, 0x08);
 801a6d4:	2108      	movs	r1, #8
 801a6d6:	f44f 40a6 	mov.w	r0, #21248	; 0x5300
 801a6da:	f7fe fe85 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5301, 0x30);
 801a6de:	2130      	movs	r1, #48	; 0x30
 801a6e0:	f245 3001 	movw	r0, #21249	; 0x5301
 801a6e4:	f7fe fe80 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x10);
 801a6e8:	2110      	movs	r1, #16
 801a6ea:	f245 3002 	movw	r0, #21250	; 0x5302
 801a6ee:	f7fe fe7b 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5303, 0x00);
 801a6f2:	2100      	movs	r1, #0
 801a6f4:	f245 3003 	movw	r0, #21251	; 0x5303
 801a6f8:	f7fe fe76 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x5309, 0x08);
 801a6fc:	2108      	movs	r1, #8
 801a6fe:	f245 3009 	movw	r0, #21257	; 0x5309
 801a702:	f7fe fe71 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x530A, 0x30);
 801a706:	2130      	movs	r1, #48	; 0x30
 801a708:	f245 300a 	movw	r0, #21258	; 0x530a
 801a70c:	f7fe fe6c 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x530B, 0x04);
 801a710:	2104      	movs	r1, #4
 801a712:	f245 300b 	movw	r0, #21259	; 0x530b
 801a716:	f7fe fe67 	bl	80193e8 <ov5640_write_reg>
            ov5640_write_reg(0x530C, 0x06);
 801a71a:	2106      	movs	r1, #6
 801a71c:	f245 300c 	movw	r0, #21260	; 0x530c
 801a720:	f7fe fe62 	bl	80193e8 <ov5640_write_reg>
            break;
 801a724:	e001      	b.n	801a72a <ov5640_set_sharpness_level+0x166>
        }
        default:
        {
            return OV5640_EINVAL;
 801a726:	2302      	movs	r3, #2
 801a728:	e000      	b.n	801a72c <ov5640_set_sharpness_level+0x168>
        }
    }

    return OV5640_EOK;
 801a72a:	2300      	movs	r3, #0
}
 801a72c:	4618      	mov	r0, r3
 801a72e:	3708      	adds	r7, #8
 801a730:	46bd      	mov	sp, r7
 801a732:	bd80      	pop	{r7, pc}

0801a734 <ov5640_set_output_format>:
 *                    OV5640_OUTPUT_FORMAT_JPEG  : JPEG
 * @retval      OV5640_EOK   : 设置OV5640模块输出图像格式成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_output_format(ov5640_output_format_t format)
{
 801a734:	b580      	push	{r7, lr}
 801a736:	b084      	sub	sp, #16
 801a738:	af00      	add	r7, sp, #0
 801a73a:	4603      	mov	r3, r0
 801a73c:	71fb      	strb	r3, [r7, #7]
    uint32_t cfg_index;

    switch (format)
 801a73e:	79fb      	ldrb	r3, [r7, #7]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d002      	beq.n	801a74a <ov5640_set_output_format+0x16>
 801a744:	2b01      	cmp	r3, #1
 801a746:	d026      	beq.n	801a796 <ov5640_set_output_format+0x62>
 801a748:	e04b      	b.n	801a7e2 <ov5640_set_output_format+0xae>
    {
        case OV5640_OUTPUT_FORMAT_RGB565:
        {
            for (cfg_index=0; cfg_index<sizeof(ov5640_rgb565_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 801a74a:	2300      	movs	r3, #0
 801a74c:	60fb      	str	r3, [r7, #12]
 801a74e:	e01e      	b.n	801a78e <ov5640_set_output_format+0x5a>
            {
            	if(ov5640_rgb565_cfg[cfg_index].reg==0&&ov5640_rgb565_cfg[cfg_index].dat==0)
 801a750:	4a27      	ldr	r2, [pc, #156]	; (801a7f0 <ov5640_set_output_format+0xbc>)
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d106      	bne.n	801a76a <ov5640_set_output_format+0x36>
 801a75c:	4a24      	ldr	r2, [pc, #144]	; (801a7f0 <ov5640_set_output_format+0xbc>)
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	009b      	lsls	r3, r3, #2
 801a762:	4413      	add	r3, r2
 801a764:	789b      	ldrb	r3, [r3, #2]
 801a766:	2b00      	cmp	r3, #0
 801a768:	d00d      	beq.n	801a786 <ov5640_set_output_format+0x52>
            	{
            		continue;
            	}
                ov5640_write_reg(ov5640_rgb565_cfg[cfg_index].reg, ov5640_rgb565_cfg[cfg_index].dat);
 801a76a:	4a21      	ldr	r2, [pc, #132]	; (801a7f0 <ov5640_set_output_format+0xbc>)
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 801a772:	491f      	ldr	r1, [pc, #124]	; (801a7f0 <ov5640_set_output_format+0xbc>)
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	009b      	lsls	r3, r3, #2
 801a778:	440b      	add	r3, r1
 801a77a:	789b      	ldrb	r3, [r3, #2]
 801a77c:	4619      	mov	r1, r3
 801a77e:	4610      	mov	r0, r2
 801a780:	f7fe fe32 	bl	80193e8 <ov5640_write_reg>
 801a784:	e000      	b.n	801a788 <ov5640_set_output_format+0x54>
            		continue;
 801a786:	bf00      	nop
            for (cfg_index=0; cfg_index<sizeof(ov5640_rgb565_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	3301      	adds	r3, #1
 801a78c:	60fb      	str	r3, [r7, #12]
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	2b2c      	cmp	r3, #44	; 0x2c
 801a792:	d9dd      	bls.n	801a750 <ov5640_set_output_format+0x1c>
            }
            break;
 801a794:	e027      	b.n	801a7e6 <ov5640_set_output_format+0xb2>
        }
        case OV5640_OUTPUT_FORMAT_JPEG:
        {
            for (cfg_index=0; cfg_index<sizeof(ov5640_jpeg_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 801a796:	2300      	movs	r3, #0
 801a798:	60fb      	str	r3, [r7, #12]
 801a79a:	e01e      	b.n	801a7da <ov5640_set_output_format+0xa6>
            {
            	if(ov5640_jpeg_cfg[cfg_index].reg==0&&ov5640_jpeg_cfg[cfg_index].dat==0)
 801a79c:	4a15      	ldr	r2, [pc, #84]	; (801a7f4 <ov5640_set_output_format+0xc0>)
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d106      	bne.n	801a7b6 <ov5640_set_output_format+0x82>
 801a7a8:	4a12      	ldr	r2, [pc, #72]	; (801a7f4 <ov5640_set_output_format+0xc0>)
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	009b      	lsls	r3, r3, #2
 801a7ae:	4413      	add	r3, r2
 801a7b0:	789b      	ldrb	r3, [r3, #2]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d00d      	beq.n	801a7d2 <ov5640_set_output_format+0x9e>
            	{
            		continue;
            	}
                ov5640_write_reg(ov5640_jpeg_cfg[cfg_index].reg, ov5640_jpeg_cfg[cfg_index].dat);
 801a7b6:	4a0f      	ldr	r2, [pc, #60]	; (801a7f4 <ov5640_set_output_format+0xc0>)
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 801a7be:	490d      	ldr	r1, [pc, #52]	; (801a7f4 <ov5640_set_output_format+0xc0>)
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	009b      	lsls	r3, r3, #2
 801a7c4:	440b      	add	r3, r1
 801a7c6:	789b      	ldrb	r3, [r3, #2]
 801a7c8:	4619      	mov	r1, r3
 801a7ca:	4610      	mov	r0, r2
 801a7cc:	f7fe fe0c 	bl	80193e8 <ov5640_write_reg>
 801a7d0:	e000      	b.n	801a7d4 <ov5640_set_output_format+0xa0>
            		continue;
 801a7d2:	bf00      	nop
            for (cfg_index=0; cfg_index<sizeof(ov5640_jpeg_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	3301      	adds	r3, #1
 801a7d8:	60fb      	str	r3, [r7, #12]
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	2b28      	cmp	r3, #40	; 0x28
 801a7de:	d9dd      	bls.n	801a79c <ov5640_set_output_format+0x68>
            }
            break;
 801a7e0:	e001      	b.n	801a7e6 <ov5640_set_output_format+0xb2>
        }
        default:
        {
            return OV5640_EINVAL;
 801a7e2:	2302      	movs	r3, #2
 801a7e4:	e000      	b.n	801a7e8 <ov5640_set_output_format+0xb4>
        }
    }

    return OV5640_EOK;
 801a7e6:	2300      	movs	r3, #0
}
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	3710      	adds	r7, #16
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	bd80      	pop	{r7, pc}
 801a7f0:	240006e4 	.word	0x240006e4
 801a7f4:	24000798 	.word	0x24000798

0801a7f8 <ov5640_set_output_size>:
 * @param       width : 实际输出图像的宽度（可能被缩放）
 *              height: 实际输出图像的高度（可能被缩放）
 * @retval      OV5640_EOK   : 设置OV5640模块输出图像窗口成功
 */
uint8_t ov5640_set_output_size(uint16_t width, uint16_t height)
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b084      	sub	sp, #16
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	4603      	mov	r3, r0
 801a800:	460a      	mov	r2, r1
 801a802:	80fb      	strh	r3, [r7, #6]
 801a804:	4613      	mov	r3, r2
 801a806:	80bb      	strh	r3, [r7, #4]
    uint8_t reg3808;
    uint8_t reg3809;
    uint8_t reg380A;
    uint8_t reg380B;

    reg3808 = ov5640_read_reg(0x3808);
 801a808:	f643 0008 	movw	r0, #14344	; 0x3808
 801a80c:	f7fe fdfe 	bl	801940c <ov5640_read_reg>
 801a810:	4603      	mov	r3, r0
 801a812:	73fb      	strb	r3, [r7, #15]
    reg380A = ov5640_read_reg(0x380A);
 801a814:	f643 000a 	movw	r0, #14346	; 0x380a
 801a818:	f7fe fdf8 	bl	801940c <ov5640_read_reg>
 801a81c:	4603      	mov	r3, r0
 801a81e:	73bb      	strb	r3, [r7, #14]

    reg3808 &= ~0x0F;
 801a820:	7bfb      	ldrb	r3, [r7, #15]
 801a822:	f023 030f 	bic.w	r3, r3, #15
 801a826:	73fb      	strb	r3, [r7, #15]
    reg3808 |= (uint8_t)(width >> 8) & 0x0F;
 801a828:	88fb      	ldrh	r3, [r7, #6]
 801a82a:	0a1b      	lsrs	r3, r3, #8
 801a82c:	b29b      	uxth	r3, r3
 801a82e:	b25b      	sxtb	r3, r3
 801a830:	f003 030f 	and.w	r3, r3, #15
 801a834:	b25a      	sxtb	r2, r3
 801a836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a83a:	4313      	orrs	r3, r2
 801a83c:	b25b      	sxtb	r3, r3
 801a83e:	73fb      	strb	r3, [r7, #15]
    reg3809 = (uint8_t)width & 0xFF;
 801a840:	88fb      	ldrh	r3, [r7, #6]
 801a842:	737b      	strb	r3, [r7, #13]
    reg380A &= ~0x07;
 801a844:	7bbb      	ldrb	r3, [r7, #14]
 801a846:	f023 0307 	bic.w	r3, r3, #7
 801a84a:	73bb      	strb	r3, [r7, #14]
    reg380A |= (uint8_t)(height >> 8) & 0x07;
 801a84c:	88bb      	ldrh	r3, [r7, #4]
 801a84e:	0a1b      	lsrs	r3, r3, #8
 801a850:	b29b      	uxth	r3, r3
 801a852:	b25b      	sxtb	r3, r3
 801a854:	f003 0307 	and.w	r3, r3, #7
 801a858:	b25a      	sxtb	r2, r3
 801a85a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a85e:	4313      	orrs	r3, r2
 801a860:	b25b      	sxtb	r3, r3
 801a862:	73bb      	strb	r3, [r7, #14]
    reg380B = (uint8_t)height & 0xFF;
 801a864:	88bb      	ldrh	r3, [r7, #4]
 801a866:	733b      	strb	r3, [r7, #12]

    ov5640_write_reg(0x3212, 0x03);
 801a868:	2103      	movs	r1, #3
 801a86a:	f243 2012 	movw	r0, #12818	; 0x3212
 801a86e:	f7fe fdbb 	bl	80193e8 <ov5640_write_reg>
    ov5640_write_reg(0x3808, reg3808);
 801a872:	7bfb      	ldrb	r3, [r7, #15]
 801a874:	4619      	mov	r1, r3
 801a876:	f643 0008 	movw	r0, #14344	; 0x3808
 801a87a:	f7fe fdb5 	bl	80193e8 <ov5640_write_reg>
    ov5640_write_reg(0x3809, reg3809);
 801a87e:	7b7b      	ldrb	r3, [r7, #13]
 801a880:	4619      	mov	r1, r3
 801a882:	f643 0009 	movw	r0, #14345	; 0x3809
 801a886:	f7fe fdaf 	bl	80193e8 <ov5640_write_reg>
    ov5640_write_reg(0x380A, reg380A);
 801a88a:	7bbb      	ldrb	r3, [r7, #14]
 801a88c:	4619      	mov	r1, r3
 801a88e:	f643 000a 	movw	r0, #14346	; 0x380a
 801a892:	f7fe fda9 	bl	80193e8 <ov5640_write_reg>
    ov5640_write_reg(0x380B, reg380B);
 801a896:	7b3b      	ldrb	r3, [r7, #12]
 801a898:	4619      	mov	r1, r3
 801a89a:	f643 000b 	movw	r0, #14347	; 0x380b
 801a89e:	f7fe fda3 	bl	80193e8 <ov5640_write_reg>
    ov5640_write_reg(0x3212, 0x13);
 801a8a2:	2113      	movs	r1, #19
 801a8a4:	f243 2012 	movw	r0, #12818	; 0x3212
 801a8a8:	f7fe fd9e 	bl	80193e8 <ov5640_write_reg>
    ov5640_write_reg(0x3212, 0xA3);
 801a8ac:	21a3      	movs	r1, #163	; 0xa3
 801a8ae:	f243 2012 	movw	r0, #12818	; 0x3212
 801a8b2:	f7fe fd99 	bl	80193e8 <ov5640_write_reg>

    ov5640_get_output_size();
 801a8b6:	f7fe fe77 	bl	80195a8 <ov5640_get_output_size>

    return OV5640_EOK;
 801a8ba:	2300      	movs	r3, #0
}
 801a8bc:	4618      	mov	r0, r3
 801a8be:	3710      	adds	r7, #16
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	bd80      	pop	{r7, pc}

0801a8c4 <ov5640_init>:
 * @retval      OV5640_EOK   : OV5640模块初始化成功
 *              OV5640_ERROR : 通讯出错，OV5640模块初始化失败
 *              OV5640_ENOMEM: 内存不足，OV5640模块初始化失败
 */
uint8_t ov5640_init(void)
{
 801a8c4:	b580      	push	{r7, lr}
 801a8c6:	b082      	sub	sp, #8
 801a8c8:	af00      	add	r7, sp, #0
    uint16_t chip_id = 0x0000;
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	80fb      	strh	r3, [r7, #6]

    ov5640_hw_init();               /* OV5640模块硬件初始化 */
 801a8ce:	f7fe fdb1 	bl	8019434 <ov5640_hw_init>
    ov5640_exit_power_down();       /* OV5640模块退出掉电模式 */
 801a8d2:	f7fe fdc3 	bl	801945c <ov5640_exit_power_down>
    ov5640_hw_reset();              /* OV5640模块硬件复位 */
 801a8d6:	f7fe fde3 	bl	80194a0 <ov5640_hw_reset>
    ov5640_sw_reset();              /* OV5640模块软件复位 */
 801a8da:	f7fe fdf9 	bl	80194d0 <ov5640_sw_reset>

    chip_id = ov5640_get_chip_id(); /* 获取芯片ID */
 801a8de:	f7fe fe16 	bl	801950e <ov5640_get_chip_id>
 801a8e2:	4603      	mov	r3, r0
 801a8e4:	80fb      	strh	r3, [r7, #6]
    usb_printf("chip id is %x \r\n",chip_id);
 801a8e6:	88fb      	ldrh	r3, [r7, #6]
 801a8e8:	4619      	mov	r1, r3
 801a8ea:	480a      	ldr	r0, [pc, #40]	; (801a914 <ov5640_init+0x50>)
 801a8ec:	f000 f898 	bl	801aa20 <usb_printf>
    if (chip_id != OV5640_CHIP_ID)
 801a8f0:	88fb      	ldrh	r3, [r7, #6]
 801a8f2:	f245 6240 	movw	r2, #22080	; 0x5640
 801a8f6:	4293      	cmp	r3, r2
 801a8f8:	d004      	beq.n	801a904 <ov5640_init+0x40>
    {
    	usb_printf("no ov5640 \r\n");
 801a8fa:	4807      	ldr	r0, [pc, #28]	; (801a918 <ov5640_init+0x54>)
 801a8fc:	f000 f890 	bl	801aa20 <usb_printf>
        return OV5640_ERROR;
 801a900:	23ff      	movs	r3, #255	; 0xff
 801a902:	e002      	b.n	801a90a <ov5640_init+0x46>
    }

    ov5640_init_reg();              /* 初始化OV5640寄存器配置 */
 801a904:	f7fe fe1c 	bl	8019540 <ov5640_init_reg>
    return OV5640_OK;
 801a908:	2300      	movs	r3, #0
}
 801a90a:	4618      	mov	r0, r3
 801a90c:	3708      	adds	r7, #8
 801a90e:	46bd      	mov	sp, r7
 801a910:	bd80      	pop	{r7, pc}
 801a912:	bf00      	nop
 801a914:	0801bbe0 	.word	0x0801bbe0
 801a918:	0801bbf4 	.word	0x0801bbf4

0801a91c <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b088      	sub	sp, #32
 801a920:	af04      	add	r7, sp, #16
 801a922:	607b      	str	r3, [r7, #4]
 801a924:	4603      	mov	r3, r0
 801a926:	81fb      	strh	r3, [r7, #14]
 801a928:	460b      	mov	r3, r1
 801a92a:	81bb      	strh	r3, [r7, #12]
 801a92c:	4613      	mov	r3, r2
 801a92e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 801a930:	8978      	ldrh	r0, [r7, #10]
 801a932:	89ba      	ldrh	r2, [r7, #12]
 801a934:	89f9      	ldrh	r1, [r7, #14]
 801a936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a93a:	9302      	str	r3, [sp, #8]
 801a93c:	8b3b      	ldrh	r3, [r7, #24]
 801a93e:	9301      	str	r3, [sp, #4]
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	9300      	str	r3, [sp, #0]
 801a944:	4603      	mov	r3, r0
 801a946:	4806      	ldr	r0, [pc, #24]	; (801a960 <I2C1_WriteReg+0x44>)
 801a948:	f7ea ff0a 	bl	8005760 <HAL_I2C_Mem_Write>
 801a94c:	4603      	mov	r3, r0
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d101      	bne.n	801a956 <I2C1_WriteReg+0x3a>
  {
    return HAL_OK;
 801a952:	2300      	movs	r3, #0
 801a954:	e000      	b.n	801a958 <I2C1_WriteReg+0x3c>
  }

  return HAL_ERROR;
 801a956:	2301      	movs	r3, #1
}
 801a958:	4618      	mov	r0, r3
 801a95a:	3710      	adds	r7, #16
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	2400097c 	.word	0x2400097c

0801a964 <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b088      	sub	sp, #32
 801a968:	af04      	add	r7, sp, #16
 801a96a:	607b      	str	r3, [r7, #4]
 801a96c:	4603      	mov	r3, r0
 801a96e:	81fb      	strh	r3, [r7, #14]
 801a970:	460b      	mov	r3, r1
 801a972:	81bb      	strh	r3, [r7, #12]
 801a974:	4613      	mov	r3, r2
 801a976:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 801a978:	8978      	ldrh	r0, [r7, #10]
 801a97a:	89ba      	ldrh	r2, [r7, #12]
 801a97c:	89f9      	ldrh	r1, [r7, #14]
 801a97e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a982:	9302      	str	r3, [sp, #8]
 801a984:	8b3b      	ldrh	r3, [r7, #24]
 801a986:	9301      	str	r3, [sp, #4]
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	9300      	str	r3, [sp, #0]
 801a98c:	4603      	mov	r3, r0
 801a98e:	4806      	ldr	r0, [pc, #24]	; (801a9a8 <I2C1_ReadReg+0x44>)
 801a990:	f7ea fffa 	bl	8005988 <HAL_I2C_Mem_Read>
 801a994:	4603      	mov	r3, r0
 801a996:	2b00      	cmp	r3, #0
 801a998:	d101      	bne.n	801a99e <I2C1_ReadReg+0x3a>
  {
    return HAL_OK;
 801a99a:	2300      	movs	r3, #0
 801a99c:	e000      	b.n	801a9a0 <I2C1_ReadReg+0x3c>
  }

  return HAL_ERROR;
 801a99e:	2301      	movs	r3, #1
}
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	3710      	adds	r7, #16
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	bd80      	pop	{r7, pc}
 801a9a8:	2400097c 	.word	0x2400097c

0801a9ac <BSP_I2C2_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b086      	sub	sp, #24
 801a9b0:	af02      	add	r7, sp, #8
 801a9b2:	60ba      	str	r2, [r7, #8]
 801a9b4:	461a      	mov	r2, r3
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	81fb      	strh	r3, [r7, #14]
 801a9ba:	460b      	mov	r3, r1
 801a9bc:	81bb      	strh	r3, [r7, #12]
 801a9be:	4613      	mov	r3, r2
 801a9c0:	80fb      	strh	r3, [r7, #6]
  if(I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 801a9c2:	89b9      	ldrh	r1, [r7, #12]
 801a9c4:	89f8      	ldrh	r0, [r7, #14]
 801a9c6:	88fb      	ldrh	r3, [r7, #6]
 801a9c8:	9300      	str	r3, [sp, #0]
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	2202      	movs	r2, #2
 801a9ce:	f7ff ffa5 	bl	801a91c <I2C1_WriteReg>
 801a9d2:	4603      	mov	r3, r0
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d101      	bne.n	801a9dc <BSP_I2C2_WriteReg16+0x30>
  {
	 return HAL_OK;
 801a9d8:	2300      	movs	r3, #0
 801a9da:	e000      	b.n	801a9de <BSP_I2C2_WriteReg16+0x32>
  }
  return HAL_ERROR;
 801a9dc:	2301      	movs	r3, #1
}
 801a9de:	4618      	mov	r0, r3
 801a9e0:	3710      	adds	r7, #16
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}

0801a9e6 <BSP_I2C2_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 801a9e6:	b580      	push	{r7, lr}
 801a9e8:	b086      	sub	sp, #24
 801a9ea:	af02      	add	r7, sp, #8
 801a9ec:	60ba      	str	r2, [r7, #8]
 801a9ee:	461a      	mov	r2, r3
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	81fb      	strh	r3, [r7, #14]
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	81bb      	strh	r3, [r7, #12]
 801a9f8:	4613      	mov	r3, r2
 801a9fa:	80fb      	strh	r3, [r7, #6]
  if(I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 801a9fc:	89b9      	ldrh	r1, [r7, #12]
 801a9fe:	89f8      	ldrh	r0, [r7, #14]
 801aa00:	88fb      	ldrh	r3, [r7, #6]
 801aa02:	9300      	str	r3, [sp, #0]
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	2202      	movs	r2, #2
 801aa08:	f7ff ffac 	bl	801a964 <I2C1_ReadReg>
 801aa0c:	4603      	mov	r3, r0
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d101      	bne.n	801aa16 <BSP_I2C2_ReadReg16+0x30>
  {
	 return HAL_OK;
 801aa12:	2300      	movs	r3, #0
 801aa14:	e000      	b.n	801aa18 <BSP_I2C2_ReadReg16+0x32>
  }
  return HAL_ERROR;
 801aa16:	2301      	movs	r3, #1
}
 801aa18:	4618      	mov	r0, r3
 801aa1a:	3710      	adds	r7, #16
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	bd80      	pop	{r7, pc}

0801aa20 <usb_printf>:
#include "usbd_cdc_if.h"

//extern uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];

void usb_printf(const char *format, ...)
{
 801aa20:	b40f      	push	{r0, r1, r2, r3}
 801aa22:	b580      	push	{r7, lr}
 801aa24:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 801aa28:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
    uint8_t buf[APP_TX_DATA_SIZE];

    va_start(args, format);
 801aa2a:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801aa2e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
    length = vsnprintf((char *)buf, APP_TX_DATA_SIZE, (char *)format, args);
 801aa32:	4638      	mov	r0, r7
 801aa34:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 801aa38:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 801aa3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801aa40:	f000 fa58 	bl	801aef4 <vsniprintf>
 801aa44:	4603      	mov	r3, r0
 801aa46:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    va_end(args);
    CDC_Transmit_FS(buf, length);
 801aa4a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 801aa4e:	b29a      	uxth	r2, r3
 801aa50:	463b      	mov	r3, r7
 801aa52:	4611      	mov	r1, r2
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7fd fe11 	bl	801867c <CDC_Transmit_FS>
}
 801aa5a:	bf00      	nop
 801aa5c:	f607 0708 	addw	r7, r7, #2056	; 0x808
 801aa60:	46bd      	mov	sp, r7
 801aa62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801aa66:	b004      	add	sp, #16
 801aa68:	4770      	bx	lr

0801aa6a <usb_send_data>:

void usb_send_data(uint8_t* Buf, uint16_t Len)
{
 801aa6a:	b580      	push	{r7, lr}
 801aa6c:	b082      	sub	sp, #8
 801aa6e:	af00      	add	r7, sp, #0
 801aa70:	6078      	str	r0, [r7, #4]
 801aa72:	460b      	mov	r3, r1
 801aa74:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(Buf,Len);
 801aa76:	887b      	ldrh	r3, [r7, #2]
 801aa78:	4619      	mov	r1, r3
 801aa7a:	6878      	ldr	r0, [r7, #4]
 801aa7c:	f7fd fdfe 	bl	801867c <CDC_Transmit_FS>

}
 801aa80:	bf00      	nop
 801aa82:	3708      	adds	r7, #8
 801aa84:	46bd      	mov	sp, r7
 801aa86:	bd80      	pop	{r7, pc}

0801aa88 <malloc>:
 801aa88:	4b02      	ldr	r3, [pc, #8]	; (801aa94 <malloc+0xc>)
 801aa8a:	4601      	mov	r1, r0
 801aa8c:	6818      	ldr	r0, [r3, #0]
 801aa8e:	f000 b82b 	b.w	801aae8 <_malloc_r>
 801aa92:	bf00      	nop
 801aa94:	24000894 	.word	0x24000894

0801aa98 <free>:
 801aa98:	4b02      	ldr	r3, [pc, #8]	; (801aaa4 <free+0xc>)
 801aa9a:	4601      	mov	r1, r0
 801aa9c:	6818      	ldr	r0, [r3, #0]
 801aa9e:	f000 bb57 	b.w	801b150 <_free_r>
 801aaa2:	bf00      	nop
 801aaa4:	24000894 	.word	0x24000894

0801aaa8 <sbrk_aligned>:
 801aaa8:	b570      	push	{r4, r5, r6, lr}
 801aaaa:	4e0e      	ldr	r6, [pc, #56]	; (801aae4 <sbrk_aligned+0x3c>)
 801aaac:	460c      	mov	r4, r1
 801aaae:	6831      	ldr	r1, [r6, #0]
 801aab0:	4605      	mov	r5, r0
 801aab2:	b911      	cbnz	r1, 801aaba <sbrk_aligned+0x12>
 801aab4:	f000 fafe 	bl	801b0b4 <_sbrk_r>
 801aab8:	6030      	str	r0, [r6, #0]
 801aaba:	4621      	mov	r1, r4
 801aabc:	4628      	mov	r0, r5
 801aabe:	f000 faf9 	bl	801b0b4 <_sbrk_r>
 801aac2:	1c43      	adds	r3, r0, #1
 801aac4:	d00a      	beq.n	801aadc <sbrk_aligned+0x34>
 801aac6:	1cc4      	adds	r4, r0, #3
 801aac8:	f024 0403 	bic.w	r4, r4, #3
 801aacc:	42a0      	cmp	r0, r4
 801aace:	d007      	beq.n	801aae0 <sbrk_aligned+0x38>
 801aad0:	1a21      	subs	r1, r4, r0
 801aad2:	4628      	mov	r0, r5
 801aad4:	f000 faee 	bl	801b0b4 <_sbrk_r>
 801aad8:	3001      	adds	r0, #1
 801aada:	d101      	bne.n	801aae0 <sbrk_aligned+0x38>
 801aadc:	f04f 34ff 	mov.w	r4, #4294967295
 801aae0:	4620      	mov	r0, r4
 801aae2:	bd70      	pop	{r4, r5, r6, pc}
 801aae4:	24007b9c 	.word	0x24007b9c

0801aae8 <_malloc_r>:
 801aae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aaec:	1ccd      	adds	r5, r1, #3
 801aaee:	f025 0503 	bic.w	r5, r5, #3
 801aaf2:	3508      	adds	r5, #8
 801aaf4:	2d0c      	cmp	r5, #12
 801aaf6:	bf38      	it	cc
 801aaf8:	250c      	movcc	r5, #12
 801aafa:	2d00      	cmp	r5, #0
 801aafc:	4607      	mov	r7, r0
 801aafe:	db01      	blt.n	801ab04 <_malloc_r+0x1c>
 801ab00:	42a9      	cmp	r1, r5
 801ab02:	d905      	bls.n	801ab10 <_malloc_r+0x28>
 801ab04:	230c      	movs	r3, #12
 801ab06:	603b      	str	r3, [r7, #0]
 801ab08:	2600      	movs	r6, #0
 801ab0a:	4630      	mov	r0, r6
 801ab0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801abe4 <_malloc_r+0xfc>
 801ab14:	f000 f868 	bl	801abe8 <__malloc_lock>
 801ab18:	f8d8 3000 	ldr.w	r3, [r8]
 801ab1c:	461c      	mov	r4, r3
 801ab1e:	bb5c      	cbnz	r4, 801ab78 <_malloc_r+0x90>
 801ab20:	4629      	mov	r1, r5
 801ab22:	4638      	mov	r0, r7
 801ab24:	f7ff ffc0 	bl	801aaa8 <sbrk_aligned>
 801ab28:	1c43      	adds	r3, r0, #1
 801ab2a:	4604      	mov	r4, r0
 801ab2c:	d155      	bne.n	801abda <_malloc_r+0xf2>
 801ab2e:	f8d8 4000 	ldr.w	r4, [r8]
 801ab32:	4626      	mov	r6, r4
 801ab34:	2e00      	cmp	r6, #0
 801ab36:	d145      	bne.n	801abc4 <_malloc_r+0xdc>
 801ab38:	2c00      	cmp	r4, #0
 801ab3a:	d048      	beq.n	801abce <_malloc_r+0xe6>
 801ab3c:	6823      	ldr	r3, [r4, #0]
 801ab3e:	4631      	mov	r1, r6
 801ab40:	4638      	mov	r0, r7
 801ab42:	eb04 0903 	add.w	r9, r4, r3
 801ab46:	f000 fab5 	bl	801b0b4 <_sbrk_r>
 801ab4a:	4581      	cmp	r9, r0
 801ab4c:	d13f      	bne.n	801abce <_malloc_r+0xe6>
 801ab4e:	6821      	ldr	r1, [r4, #0]
 801ab50:	1a6d      	subs	r5, r5, r1
 801ab52:	4629      	mov	r1, r5
 801ab54:	4638      	mov	r0, r7
 801ab56:	f7ff ffa7 	bl	801aaa8 <sbrk_aligned>
 801ab5a:	3001      	adds	r0, #1
 801ab5c:	d037      	beq.n	801abce <_malloc_r+0xe6>
 801ab5e:	6823      	ldr	r3, [r4, #0]
 801ab60:	442b      	add	r3, r5
 801ab62:	6023      	str	r3, [r4, #0]
 801ab64:	f8d8 3000 	ldr.w	r3, [r8]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d038      	beq.n	801abde <_malloc_r+0xf6>
 801ab6c:	685a      	ldr	r2, [r3, #4]
 801ab6e:	42a2      	cmp	r2, r4
 801ab70:	d12b      	bne.n	801abca <_malloc_r+0xe2>
 801ab72:	2200      	movs	r2, #0
 801ab74:	605a      	str	r2, [r3, #4]
 801ab76:	e00f      	b.n	801ab98 <_malloc_r+0xb0>
 801ab78:	6822      	ldr	r2, [r4, #0]
 801ab7a:	1b52      	subs	r2, r2, r5
 801ab7c:	d41f      	bmi.n	801abbe <_malloc_r+0xd6>
 801ab7e:	2a0b      	cmp	r2, #11
 801ab80:	d917      	bls.n	801abb2 <_malloc_r+0xca>
 801ab82:	1961      	adds	r1, r4, r5
 801ab84:	42a3      	cmp	r3, r4
 801ab86:	6025      	str	r5, [r4, #0]
 801ab88:	bf18      	it	ne
 801ab8a:	6059      	strne	r1, [r3, #4]
 801ab8c:	6863      	ldr	r3, [r4, #4]
 801ab8e:	bf08      	it	eq
 801ab90:	f8c8 1000 	streq.w	r1, [r8]
 801ab94:	5162      	str	r2, [r4, r5]
 801ab96:	604b      	str	r3, [r1, #4]
 801ab98:	4638      	mov	r0, r7
 801ab9a:	f104 060b 	add.w	r6, r4, #11
 801ab9e:	f000 f829 	bl	801abf4 <__malloc_unlock>
 801aba2:	f026 0607 	bic.w	r6, r6, #7
 801aba6:	1d23      	adds	r3, r4, #4
 801aba8:	1af2      	subs	r2, r6, r3
 801abaa:	d0ae      	beq.n	801ab0a <_malloc_r+0x22>
 801abac:	1b9b      	subs	r3, r3, r6
 801abae:	50a3      	str	r3, [r4, r2]
 801abb0:	e7ab      	b.n	801ab0a <_malloc_r+0x22>
 801abb2:	42a3      	cmp	r3, r4
 801abb4:	6862      	ldr	r2, [r4, #4]
 801abb6:	d1dd      	bne.n	801ab74 <_malloc_r+0x8c>
 801abb8:	f8c8 2000 	str.w	r2, [r8]
 801abbc:	e7ec      	b.n	801ab98 <_malloc_r+0xb0>
 801abbe:	4623      	mov	r3, r4
 801abc0:	6864      	ldr	r4, [r4, #4]
 801abc2:	e7ac      	b.n	801ab1e <_malloc_r+0x36>
 801abc4:	4634      	mov	r4, r6
 801abc6:	6876      	ldr	r6, [r6, #4]
 801abc8:	e7b4      	b.n	801ab34 <_malloc_r+0x4c>
 801abca:	4613      	mov	r3, r2
 801abcc:	e7cc      	b.n	801ab68 <_malloc_r+0x80>
 801abce:	230c      	movs	r3, #12
 801abd0:	603b      	str	r3, [r7, #0]
 801abd2:	4638      	mov	r0, r7
 801abd4:	f000 f80e 	bl	801abf4 <__malloc_unlock>
 801abd8:	e797      	b.n	801ab0a <_malloc_r+0x22>
 801abda:	6025      	str	r5, [r4, #0]
 801abdc:	e7dc      	b.n	801ab98 <_malloc_r+0xb0>
 801abde:	605b      	str	r3, [r3, #4]
 801abe0:	deff      	udf	#255	; 0xff
 801abe2:	bf00      	nop
 801abe4:	24007b98 	.word	0x24007b98

0801abe8 <__malloc_lock>:
 801abe8:	4801      	ldr	r0, [pc, #4]	; (801abf0 <__malloc_lock+0x8>)
 801abea:	f000 baaf 	b.w	801b14c <__retarget_lock_acquire_recursive>
 801abee:	bf00      	nop
 801abf0:	24007ce0 	.word	0x24007ce0

0801abf4 <__malloc_unlock>:
 801abf4:	4801      	ldr	r0, [pc, #4]	; (801abfc <__malloc_unlock+0x8>)
 801abf6:	f000 baaa 	b.w	801b14e <__retarget_lock_release_recursive>
 801abfa:	bf00      	nop
 801abfc:	24007ce0 	.word	0x24007ce0

0801ac00 <std>:
 801ac00:	2300      	movs	r3, #0
 801ac02:	b510      	push	{r4, lr}
 801ac04:	4604      	mov	r4, r0
 801ac06:	e9c0 3300 	strd	r3, r3, [r0]
 801ac0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ac0e:	6083      	str	r3, [r0, #8]
 801ac10:	8181      	strh	r1, [r0, #12]
 801ac12:	6643      	str	r3, [r0, #100]	; 0x64
 801ac14:	81c2      	strh	r2, [r0, #14]
 801ac16:	6183      	str	r3, [r0, #24]
 801ac18:	4619      	mov	r1, r3
 801ac1a:	2208      	movs	r2, #8
 801ac1c:	305c      	adds	r0, #92	; 0x5c
 801ac1e:	f000 fa0d 	bl	801b03c <memset>
 801ac22:	4b05      	ldr	r3, [pc, #20]	; (801ac38 <std+0x38>)
 801ac24:	6263      	str	r3, [r4, #36]	; 0x24
 801ac26:	4b05      	ldr	r3, [pc, #20]	; (801ac3c <std+0x3c>)
 801ac28:	62a3      	str	r3, [r4, #40]	; 0x28
 801ac2a:	4b05      	ldr	r3, [pc, #20]	; (801ac40 <std+0x40>)
 801ac2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ac2e:	4b05      	ldr	r3, [pc, #20]	; (801ac44 <std+0x44>)
 801ac30:	6224      	str	r4, [r4, #32]
 801ac32:	6323      	str	r3, [r4, #48]	; 0x30
 801ac34:	bd10      	pop	{r4, pc}
 801ac36:	bf00      	nop
 801ac38:	0801ae19 	.word	0x0801ae19
 801ac3c:	0801ae3b 	.word	0x0801ae3b
 801ac40:	0801ae73 	.word	0x0801ae73
 801ac44:	0801ae97 	.word	0x0801ae97

0801ac48 <stdio_exit_handler>:
 801ac48:	4a02      	ldr	r2, [pc, #8]	; (801ac54 <stdio_exit_handler+0xc>)
 801ac4a:	4903      	ldr	r1, [pc, #12]	; (801ac58 <stdio_exit_handler+0x10>)
 801ac4c:	4803      	ldr	r0, [pc, #12]	; (801ac5c <stdio_exit_handler+0x14>)
 801ac4e:	f000 b869 	b.w	801ad24 <_fwalk_sglue>
 801ac52:	bf00      	nop
 801ac54:	2400083c 	.word	0x2400083c
 801ac58:	0801b8c5 	.word	0x0801b8c5
 801ac5c:	24000848 	.word	0x24000848

0801ac60 <cleanup_stdio>:
 801ac60:	6841      	ldr	r1, [r0, #4]
 801ac62:	4b0c      	ldr	r3, [pc, #48]	; (801ac94 <cleanup_stdio+0x34>)
 801ac64:	4299      	cmp	r1, r3
 801ac66:	b510      	push	{r4, lr}
 801ac68:	4604      	mov	r4, r0
 801ac6a:	d001      	beq.n	801ac70 <cleanup_stdio+0x10>
 801ac6c:	f000 fe2a 	bl	801b8c4 <_fflush_r>
 801ac70:	68a1      	ldr	r1, [r4, #8]
 801ac72:	4b09      	ldr	r3, [pc, #36]	; (801ac98 <cleanup_stdio+0x38>)
 801ac74:	4299      	cmp	r1, r3
 801ac76:	d002      	beq.n	801ac7e <cleanup_stdio+0x1e>
 801ac78:	4620      	mov	r0, r4
 801ac7a:	f000 fe23 	bl	801b8c4 <_fflush_r>
 801ac7e:	68e1      	ldr	r1, [r4, #12]
 801ac80:	4b06      	ldr	r3, [pc, #24]	; (801ac9c <cleanup_stdio+0x3c>)
 801ac82:	4299      	cmp	r1, r3
 801ac84:	d004      	beq.n	801ac90 <cleanup_stdio+0x30>
 801ac86:	4620      	mov	r0, r4
 801ac88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac8c:	f000 be1a 	b.w	801b8c4 <_fflush_r>
 801ac90:	bd10      	pop	{r4, pc}
 801ac92:	bf00      	nop
 801ac94:	24007ba0 	.word	0x24007ba0
 801ac98:	24007c08 	.word	0x24007c08
 801ac9c:	24007c70 	.word	0x24007c70

0801aca0 <global_stdio_init.part.0>:
 801aca0:	b510      	push	{r4, lr}
 801aca2:	4b0b      	ldr	r3, [pc, #44]	; (801acd0 <global_stdio_init.part.0+0x30>)
 801aca4:	4c0b      	ldr	r4, [pc, #44]	; (801acd4 <global_stdio_init.part.0+0x34>)
 801aca6:	4a0c      	ldr	r2, [pc, #48]	; (801acd8 <global_stdio_init.part.0+0x38>)
 801aca8:	601a      	str	r2, [r3, #0]
 801acaa:	4620      	mov	r0, r4
 801acac:	2200      	movs	r2, #0
 801acae:	2104      	movs	r1, #4
 801acb0:	f7ff ffa6 	bl	801ac00 <std>
 801acb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801acb8:	2201      	movs	r2, #1
 801acba:	2109      	movs	r1, #9
 801acbc:	f7ff ffa0 	bl	801ac00 <std>
 801acc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801acc4:	2202      	movs	r2, #2
 801acc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acca:	2112      	movs	r1, #18
 801accc:	f7ff bf98 	b.w	801ac00 <std>
 801acd0:	24007cd8 	.word	0x24007cd8
 801acd4:	24007ba0 	.word	0x24007ba0
 801acd8:	0801ac49 	.word	0x0801ac49

0801acdc <__sfp_lock_acquire>:
 801acdc:	4801      	ldr	r0, [pc, #4]	; (801ace4 <__sfp_lock_acquire+0x8>)
 801acde:	f000 ba35 	b.w	801b14c <__retarget_lock_acquire_recursive>
 801ace2:	bf00      	nop
 801ace4:	24007ce1 	.word	0x24007ce1

0801ace8 <__sfp_lock_release>:
 801ace8:	4801      	ldr	r0, [pc, #4]	; (801acf0 <__sfp_lock_release+0x8>)
 801acea:	f000 ba30 	b.w	801b14e <__retarget_lock_release_recursive>
 801acee:	bf00      	nop
 801acf0:	24007ce1 	.word	0x24007ce1

0801acf4 <__sinit>:
 801acf4:	b510      	push	{r4, lr}
 801acf6:	4604      	mov	r4, r0
 801acf8:	f7ff fff0 	bl	801acdc <__sfp_lock_acquire>
 801acfc:	6a23      	ldr	r3, [r4, #32]
 801acfe:	b11b      	cbz	r3, 801ad08 <__sinit+0x14>
 801ad00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad04:	f7ff bff0 	b.w	801ace8 <__sfp_lock_release>
 801ad08:	4b04      	ldr	r3, [pc, #16]	; (801ad1c <__sinit+0x28>)
 801ad0a:	6223      	str	r3, [r4, #32]
 801ad0c:	4b04      	ldr	r3, [pc, #16]	; (801ad20 <__sinit+0x2c>)
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d1f5      	bne.n	801ad00 <__sinit+0xc>
 801ad14:	f7ff ffc4 	bl	801aca0 <global_stdio_init.part.0>
 801ad18:	e7f2      	b.n	801ad00 <__sinit+0xc>
 801ad1a:	bf00      	nop
 801ad1c:	0801ac61 	.word	0x0801ac61
 801ad20:	24007cd8 	.word	0x24007cd8

0801ad24 <_fwalk_sglue>:
 801ad24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad28:	4607      	mov	r7, r0
 801ad2a:	4688      	mov	r8, r1
 801ad2c:	4614      	mov	r4, r2
 801ad2e:	2600      	movs	r6, #0
 801ad30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ad34:	f1b9 0901 	subs.w	r9, r9, #1
 801ad38:	d505      	bpl.n	801ad46 <_fwalk_sglue+0x22>
 801ad3a:	6824      	ldr	r4, [r4, #0]
 801ad3c:	2c00      	cmp	r4, #0
 801ad3e:	d1f7      	bne.n	801ad30 <_fwalk_sglue+0xc>
 801ad40:	4630      	mov	r0, r6
 801ad42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad46:	89ab      	ldrh	r3, [r5, #12]
 801ad48:	2b01      	cmp	r3, #1
 801ad4a:	d907      	bls.n	801ad5c <_fwalk_sglue+0x38>
 801ad4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ad50:	3301      	adds	r3, #1
 801ad52:	d003      	beq.n	801ad5c <_fwalk_sglue+0x38>
 801ad54:	4629      	mov	r1, r5
 801ad56:	4638      	mov	r0, r7
 801ad58:	47c0      	blx	r8
 801ad5a:	4306      	orrs	r6, r0
 801ad5c:	3568      	adds	r5, #104	; 0x68
 801ad5e:	e7e9      	b.n	801ad34 <_fwalk_sglue+0x10>

0801ad60 <_puts_r>:
 801ad60:	6a03      	ldr	r3, [r0, #32]
 801ad62:	b570      	push	{r4, r5, r6, lr}
 801ad64:	6884      	ldr	r4, [r0, #8]
 801ad66:	4605      	mov	r5, r0
 801ad68:	460e      	mov	r6, r1
 801ad6a:	b90b      	cbnz	r3, 801ad70 <_puts_r+0x10>
 801ad6c:	f7ff ffc2 	bl	801acf4 <__sinit>
 801ad70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad72:	07db      	lsls	r3, r3, #31
 801ad74:	d405      	bmi.n	801ad82 <_puts_r+0x22>
 801ad76:	89a3      	ldrh	r3, [r4, #12]
 801ad78:	0598      	lsls	r0, r3, #22
 801ad7a:	d402      	bmi.n	801ad82 <_puts_r+0x22>
 801ad7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad7e:	f000 f9e5 	bl	801b14c <__retarget_lock_acquire_recursive>
 801ad82:	89a3      	ldrh	r3, [r4, #12]
 801ad84:	0719      	lsls	r1, r3, #28
 801ad86:	d513      	bpl.n	801adb0 <_puts_r+0x50>
 801ad88:	6923      	ldr	r3, [r4, #16]
 801ad8a:	b18b      	cbz	r3, 801adb0 <_puts_r+0x50>
 801ad8c:	3e01      	subs	r6, #1
 801ad8e:	68a3      	ldr	r3, [r4, #8]
 801ad90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ad94:	3b01      	subs	r3, #1
 801ad96:	60a3      	str	r3, [r4, #8]
 801ad98:	b9e9      	cbnz	r1, 801add6 <_puts_r+0x76>
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	da2e      	bge.n	801adfc <_puts_r+0x9c>
 801ad9e:	4622      	mov	r2, r4
 801ada0:	210a      	movs	r1, #10
 801ada2:	4628      	mov	r0, r5
 801ada4:	f000 f8b4 	bl	801af10 <__swbuf_r>
 801ada8:	3001      	adds	r0, #1
 801adaa:	d007      	beq.n	801adbc <_puts_r+0x5c>
 801adac:	250a      	movs	r5, #10
 801adae:	e007      	b.n	801adc0 <_puts_r+0x60>
 801adb0:	4621      	mov	r1, r4
 801adb2:	4628      	mov	r0, r5
 801adb4:	f000 f8ea 	bl	801af8c <__swsetup_r>
 801adb8:	2800      	cmp	r0, #0
 801adba:	d0e7      	beq.n	801ad8c <_puts_r+0x2c>
 801adbc:	f04f 35ff 	mov.w	r5, #4294967295
 801adc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801adc2:	07da      	lsls	r2, r3, #31
 801adc4:	d405      	bmi.n	801add2 <_puts_r+0x72>
 801adc6:	89a3      	ldrh	r3, [r4, #12]
 801adc8:	059b      	lsls	r3, r3, #22
 801adca:	d402      	bmi.n	801add2 <_puts_r+0x72>
 801adcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801adce:	f000 f9be 	bl	801b14e <__retarget_lock_release_recursive>
 801add2:	4628      	mov	r0, r5
 801add4:	bd70      	pop	{r4, r5, r6, pc}
 801add6:	2b00      	cmp	r3, #0
 801add8:	da04      	bge.n	801ade4 <_puts_r+0x84>
 801adda:	69a2      	ldr	r2, [r4, #24]
 801addc:	429a      	cmp	r2, r3
 801adde:	dc06      	bgt.n	801adee <_puts_r+0x8e>
 801ade0:	290a      	cmp	r1, #10
 801ade2:	d004      	beq.n	801adee <_puts_r+0x8e>
 801ade4:	6823      	ldr	r3, [r4, #0]
 801ade6:	1c5a      	adds	r2, r3, #1
 801ade8:	6022      	str	r2, [r4, #0]
 801adea:	7019      	strb	r1, [r3, #0]
 801adec:	e7cf      	b.n	801ad8e <_puts_r+0x2e>
 801adee:	4622      	mov	r2, r4
 801adf0:	4628      	mov	r0, r5
 801adf2:	f000 f88d 	bl	801af10 <__swbuf_r>
 801adf6:	3001      	adds	r0, #1
 801adf8:	d1c9      	bne.n	801ad8e <_puts_r+0x2e>
 801adfa:	e7df      	b.n	801adbc <_puts_r+0x5c>
 801adfc:	6823      	ldr	r3, [r4, #0]
 801adfe:	250a      	movs	r5, #10
 801ae00:	1c5a      	adds	r2, r3, #1
 801ae02:	6022      	str	r2, [r4, #0]
 801ae04:	701d      	strb	r5, [r3, #0]
 801ae06:	e7db      	b.n	801adc0 <_puts_r+0x60>

0801ae08 <puts>:
 801ae08:	4b02      	ldr	r3, [pc, #8]	; (801ae14 <puts+0xc>)
 801ae0a:	4601      	mov	r1, r0
 801ae0c:	6818      	ldr	r0, [r3, #0]
 801ae0e:	f7ff bfa7 	b.w	801ad60 <_puts_r>
 801ae12:	bf00      	nop
 801ae14:	24000894 	.word	0x24000894

0801ae18 <__sread>:
 801ae18:	b510      	push	{r4, lr}
 801ae1a:	460c      	mov	r4, r1
 801ae1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae20:	f000 f936 	bl	801b090 <_read_r>
 801ae24:	2800      	cmp	r0, #0
 801ae26:	bfab      	itete	ge
 801ae28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ae2a:	89a3      	ldrhlt	r3, [r4, #12]
 801ae2c:	181b      	addge	r3, r3, r0
 801ae2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ae32:	bfac      	ite	ge
 801ae34:	6563      	strge	r3, [r4, #84]	; 0x54
 801ae36:	81a3      	strhlt	r3, [r4, #12]
 801ae38:	bd10      	pop	{r4, pc}

0801ae3a <__swrite>:
 801ae3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae3e:	461f      	mov	r7, r3
 801ae40:	898b      	ldrh	r3, [r1, #12]
 801ae42:	05db      	lsls	r3, r3, #23
 801ae44:	4605      	mov	r5, r0
 801ae46:	460c      	mov	r4, r1
 801ae48:	4616      	mov	r6, r2
 801ae4a:	d505      	bpl.n	801ae58 <__swrite+0x1e>
 801ae4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae50:	2302      	movs	r3, #2
 801ae52:	2200      	movs	r2, #0
 801ae54:	f000 f90a 	bl	801b06c <_lseek_r>
 801ae58:	89a3      	ldrh	r3, [r4, #12]
 801ae5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ae62:	81a3      	strh	r3, [r4, #12]
 801ae64:	4632      	mov	r2, r6
 801ae66:	463b      	mov	r3, r7
 801ae68:	4628      	mov	r0, r5
 801ae6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae6e:	f000 b931 	b.w	801b0d4 <_write_r>

0801ae72 <__sseek>:
 801ae72:	b510      	push	{r4, lr}
 801ae74:	460c      	mov	r4, r1
 801ae76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae7a:	f000 f8f7 	bl	801b06c <_lseek_r>
 801ae7e:	1c43      	adds	r3, r0, #1
 801ae80:	89a3      	ldrh	r3, [r4, #12]
 801ae82:	bf15      	itete	ne
 801ae84:	6560      	strne	r0, [r4, #84]	; 0x54
 801ae86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ae8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ae8e:	81a3      	strheq	r3, [r4, #12]
 801ae90:	bf18      	it	ne
 801ae92:	81a3      	strhne	r3, [r4, #12]
 801ae94:	bd10      	pop	{r4, pc}

0801ae96 <__sclose>:
 801ae96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae9a:	f000 b8d7 	b.w	801b04c <_close_r>

0801ae9e <_vsniprintf_r>:
 801ae9e:	b530      	push	{r4, r5, lr}
 801aea0:	4614      	mov	r4, r2
 801aea2:	2c00      	cmp	r4, #0
 801aea4:	b09b      	sub	sp, #108	; 0x6c
 801aea6:	4605      	mov	r5, r0
 801aea8:	461a      	mov	r2, r3
 801aeaa:	da05      	bge.n	801aeb8 <_vsniprintf_r+0x1a>
 801aeac:	238b      	movs	r3, #139	; 0x8b
 801aeae:	6003      	str	r3, [r0, #0]
 801aeb0:	f04f 30ff 	mov.w	r0, #4294967295
 801aeb4:	b01b      	add	sp, #108	; 0x6c
 801aeb6:	bd30      	pop	{r4, r5, pc}
 801aeb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801aebc:	f8ad 300c 	strh.w	r3, [sp, #12]
 801aec0:	bf14      	ite	ne
 801aec2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801aec6:	4623      	moveq	r3, r4
 801aec8:	9302      	str	r3, [sp, #8]
 801aeca:	9305      	str	r3, [sp, #20]
 801aecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aed0:	9100      	str	r1, [sp, #0]
 801aed2:	9104      	str	r1, [sp, #16]
 801aed4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801aed8:	4669      	mov	r1, sp
 801aeda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801aedc:	f000 f9de 	bl	801b29c <_svfiprintf_r>
 801aee0:	1c43      	adds	r3, r0, #1
 801aee2:	bfbc      	itt	lt
 801aee4:	238b      	movlt	r3, #139	; 0x8b
 801aee6:	602b      	strlt	r3, [r5, #0]
 801aee8:	2c00      	cmp	r4, #0
 801aeea:	d0e3      	beq.n	801aeb4 <_vsniprintf_r+0x16>
 801aeec:	9b00      	ldr	r3, [sp, #0]
 801aeee:	2200      	movs	r2, #0
 801aef0:	701a      	strb	r2, [r3, #0]
 801aef2:	e7df      	b.n	801aeb4 <_vsniprintf_r+0x16>

0801aef4 <vsniprintf>:
 801aef4:	b507      	push	{r0, r1, r2, lr}
 801aef6:	9300      	str	r3, [sp, #0]
 801aef8:	4613      	mov	r3, r2
 801aefa:	460a      	mov	r2, r1
 801aefc:	4601      	mov	r1, r0
 801aefe:	4803      	ldr	r0, [pc, #12]	; (801af0c <vsniprintf+0x18>)
 801af00:	6800      	ldr	r0, [r0, #0]
 801af02:	f7ff ffcc 	bl	801ae9e <_vsniprintf_r>
 801af06:	b003      	add	sp, #12
 801af08:	f85d fb04 	ldr.w	pc, [sp], #4
 801af0c:	24000894 	.word	0x24000894

0801af10 <__swbuf_r>:
 801af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af12:	460e      	mov	r6, r1
 801af14:	4614      	mov	r4, r2
 801af16:	4605      	mov	r5, r0
 801af18:	b118      	cbz	r0, 801af22 <__swbuf_r+0x12>
 801af1a:	6a03      	ldr	r3, [r0, #32]
 801af1c:	b90b      	cbnz	r3, 801af22 <__swbuf_r+0x12>
 801af1e:	f7ff fee9 	bl	801acf4 <__sinit>
 801af22:	69a3      	ldr	r3, [r4, #24]
 801af24:	60a3      	str	r3, [r4, #8]
 801af26:	89a3      	ldrh	r3, [r4, #12]
 801af28:	071a      	lsls	r2, r3, #28
 801af2a:	d525      	bpl.n	801af78 <__swbuf_r+0x68>
 801af2c:	6923      	ldr	r3, [r4, #16]
 801af2e:	b31b      	cbz	r3, 801af78 <__swbuf_r+0x68>
 801af30:	6823      	ldr	r3, [r4, #0]
 801af32:	6922      	ldr	r2, [r4, #16]
 801af34:	1a98      	subs	r0, r3, r2
 801af36:	6963      	ldr	r3, [r4, #20]
 801af38:	b2f6      	uxtb	r6, r6
 801af3a:	4283      	cmp	r3, r0
 801af3c:	4637      	mov	r7, r6
 801af3e:	dc04      	bgt.n	801af4a <__swbuf_r+0x3a>
 801af40:	4621      	mov	r1, r4
 801af42:	4628      	mov	r0, r5
 801af44:	f000 fcbe 	bl	801b8c4 <_fflush_r>
 801af48:	b9e0      	cbnz	r0, 801af84 <__swbuf_r+0x74>
 801af4a:	68a3      	ldr	r3, [r4, #8]
 801af4c:	3b01      	subs	r3, #1
 801af4e:	60a3      	str	r3, [r4, #8]
 801af50:	6823      	ldr	r3, [r4, #0]
 801af52:	1c5a      	adds	r2, r3, #1
 801af54:	6022      	str	r2, [r4, #0]
 801af56:	701e      	strb	r6, [r3, #0]
 801af58:	6962      	ldr	r2, [r4, #20]
 801af5a:	1c43      	adds	r3, r0, #1
 801af5c:	429a      	cmp	r2, r3
 801af5e:	d004      	beq.n	801af6a <__swbuf_r+0x5a>
 801af60:	89a3      	ldrh	r3, [r4, #12]
 801af62:	07db      	lsls	r3, r3, #31
 801af64:	d506      	bpl.n	801af74 <__swbuf_r+0x64>
 801af66:	2e0a      	cmp	r6, #10
 801af68:	d104      	bne.n	801af74 <__swbuf_r+0x64>
 801af6a:	4621      	mov	r1, r4
 801af6c:	4628      	mov	r0, r5
 801af6e:	f000 fca9 	bl	801b8c4 <_fflush_r>
 801af72:	b938      	cbnz	r0, 801af84 <__swbuf_r+0x74>
 801af74:	4638      	mov	r0, r7
 801af76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af78:	4621      	mov	r1, r4
 801af7a:	4628      	mov	r0, r5
 801af7c:	f000 f806 	bl	801af8c <__swsetup_r>
 801af80:	2800      	cmp	r0, #0
 801af82:	d0d5      	beq.n	801af30 <__swbuf_r+0x20>
 801af84:	f04f 37ff 	mov.w	r7, #4294967295
 801af88:	e7f4      	b.n	801af74 <__swbuf_r+0x64>
	...

0801af8c <__swsetup_r>:
 801af8c:	b538      	push	{r3, r4, r5, lr}
 801af8e:	4b2a      	ldr	r3, [pc, #168]	; (801b038 <__swsetup_r+0xac>)
 801af90:	4605      	mov	r5, r0
 801af92:	6818      	ldr	r0, [r3, #0]
 801af94:	460c      	mov	r4, r1
 801af96:	b118      	cbz	r0, 801afa0 <__swsetup_r+0x14>
 801af98:	6a03      	ldr	r3, [r0, #32]
 801af9a:	b90b      	cbnz	r3, 801afa0 <__swsetup_r+0x14>
 801af9c:	f7ff feaa 	bl	801acf4 <__sinit>
 801afa0:	89a3      	ldrh	r3, [r4, #12]
 801afa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801afa6:	0718      	lsls	r0, r3, #28
 801afa8:	d422      	bmi.n	801aff0 <__swsetup_r+0x64>
 801afaa:	06d9      	lsls	r1, r3, #27
 801afac:	d407      	bmi.n	801afbe <__swsetup_r+0x32>
 801afae:	2309      	movs	r3, #9
 801afb0:	602b      	str	r3, [r5, #0]
 801afb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801afb6:	81a3      	strh	r3, [r4, #12]
 801afb8:	f04f 30ff 	mov.w	r0, #4294967295
 801afbc:	e034      	b.n	801b028 <__swsetup_r+0x9c>
 801afbe:	0758      	lsls	r0, r3, #29
 801afc0:	d512      	bpl.n	801afe8 <__swsetup_r+0x5c>
 801afc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afc4:	b141      	cbz	r1, 801afd8 <__swsetup_r+0x4c>
 801afc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afca:	4299      	cmp	r1, r3
 801afcc:	d002      	beq.n	801afd4 <__swsetup_r+0x48>
 801afce:	4628      	mov	r0, r5
 801afd0:	f000 f8be 	bl	801b150 <_free_r>
 801afd4:	2300      	movs	r3, #0
 801afd6:	6363      	str	r3, [r4, #52]	; 0x34
 801afd8:	89a3      	ldrh	r3, [r4, #12]
 801afda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801afde:	81a3      	strh	r3, [r4, #12]
 801afe0:	2300      	movs	r3, #0
 801afe2:	6063      	str	r3, [r4, #4]
 801afe4:	6923      	ldr	r3, [r4, #16]
 801afe6:	6023      	str	r3, [r4, #0]
 801afe8:	89a3      	ldrh	r3, [r4, #12]
 801afea:	f043 0308 	orr.w	r3, r3, #8
 801afee:	81a3      	strh	r3, [r4, #12]
 801aff0:	6923      	ldr	r3, [r4, #16]
 801aff2:	b94b      	cbnz	r3, 801b008 <__swsetup_r+0x7c>
 801aff4:	89a3      	ldrh	r3, [r4, #12]
 801aff6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801affa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801affe:	d003      	beq.n	801b008 <__swsetup_r+0x7c>
 801b000:	4621      	mov	r1, r4
 801b002:	4628      	mov	r0, r5
 801b004:	f000 fcac 	bl	801b960 <__smakebuf_r>
 801b008:	89a0      	ldrh	r0, [r4, #12]
 801b00a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b00e:	f010 0301 	ands.w	r3, r0, #1
 801b012:	d00a      	beq.n	801b02a <__swsetup_r+0x9e>
 801b014:	2300      	movs	r3, #0
 801b016:	60a3      	str	r3, [r4, #8]
 801b018:	6963      	ldr	r3, [r4, #20]
 801b01a:	425b      	negs	r3, r3
 801b01c:	61a3      	str	r3, [r4, #24]
 801b01e:	6923      	ldr	r3, [r4, #16]
 801b020:	b943      	cbnz	r3, 801b034 <__swsetup_r+0xa8>
 801b022:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b026:	d1c4      	bne.n	801afb2 <__swsetup_r+0x26>
 801b028:	bd38      	pop	{r3, r4, r5, pc}
 801b02a:	0781      	lsls	r1, r0, #30
 801b02c:	bf58      	it	pl
 801b02e:	6963      	ldrpl	r3, [r4, #20]
 801b030:	60a3      	str	r3, [r4, #8]
 801b032:	e7f4      	b.n	801b01e <__swsetup_r+0x92>
 801b034:	2000      	movs	r0, #0
 801b036:	e7f7      	b.n	801b028 <__swsetup_r+0x9c>
 801b038:	24000894 	.word	0x24000894

0801b03c <memset>:
 801b03c:	4402      	add	r2, r0
 801b03e:	4603      	mov	r3, r0
 801b040:	4293      	cmp	r3, r2
 801b042:	d100      	bne.n	801b046 <memset+0xa>
 801b044:	4770      	bx	lr
 801b046:	f803 1b01 	strb.w	r1, [r3], #1
 801b04a:	e7f9      	b.n	801b040 <memset+0x4>

0801b04c <_close_r>:
 801b04c:	b538      	push	{r3, r4, r5, lr}
 801b04e:	4d06      	ldr	r5, [pc, #24]	; (801b068 <_close_r+0x1c>)
 801b050:	2300      	movs	r3, #0
 801b052:	4604      	mov	r4, r0
 801b054:	4608      	mov	r0, r1
 801b056:	602b      	str	r3, [r5, #0]
 801b058:	f7e6 f809 	bl	800106e <_close>
 801b05c:	1c43      	adds	r3, r0, #1
 801b05e:	d102      	bne.n	801b066 <_close_r+0x1a>
 801b060:	682b      	ldr	r3, [r5, #0]
 801b062:	b103      	cbz	r3, 801b066 <_close_r+0x1a>
 801b064:	6023      	str	r3, [r4, #0]
 801b066:	bd38      	pop	{r3, r4, r5, pc}
 801b068:	24007cdc 	.word	0x24007cdc

0801b06c <_lseek_r>:
 801b06c:	b538      	push	{r3, r4, r5, lr}
 801b06e:	4d07      	ldr	r5, [pc, #28]	; (801b08c <_lseek_r+0x20>)
 801b070:	4604      	mov	r4, r0
 801b072:	4608      	mov	r0, r1
 801b074:	4611      	mov	r1, r2
 801b076:	2200      	movs	r2, #0
 801b078:	602a      	str	r2, [r5, #0]
 801b07a:	461a      	mov	r2, r3
 801b07c:	f7e6 f81e 	bl	80010bc <_lseek>
 801b080:	1c43      	adds	r3, r0, #1
 801b082:	d102      	bne.n	801b08a <_lseek_r+0x1e>
 801b084:	682b      	ldr	r3, [r5, #0]
 801b086:	b103      	cbz	r3, 801b08a <_lseek_r+0x1e>
 801b088:	6023      	str	r3, [r4, #0]
 801b08a:	bd38      	pop	{r3, r4, r5, pc}
 801b08c:	24007cdc 	.word	0x24007cdc

0801b090 <_read_r>:
 801b090:	b538      	push	{r3, r4, r5, lr}
 801b092:	4d07      	ldr	r5, [pc, #28]	; (801b0b0 <_read_r+0x20>)
 801b094:	4604      	mov	r4, r0
 801b096:	4608      	mov	r0, r1
 801b098:	4611      	mov	r1, r2
 801b09a:	2200      	movs	r2, #0
 801b09c:	602a      	str	r2, [r5, #0]
 801b09e:	461a      	mov	r2, r3
 801b0a0:	f7e5 ffac 	bl	8000ffc <_read>
 801b0a4:	1c43      	adds	r3, r0, #1
 801b0a6:	d102      	bne.n	801b0ae <_read_r+0x1e>
 801b0a8:	682b      	ldr	r3, [r5, #0]
 801b0aa:	b103      	cbz	r3, 801b0ae <_read_r+0x1e>
 801b0ac:	6023      	str	r3, [r4, #0]
 801b0ae:	bd38      	pop	{r3, r4, r5, pc}
 801b0b0:	24007cdc 	.word	0x24007cdc

0801b0b4 <_sbrk_r>:
 801b0b4:	b538      	push	{r3, r4, r5, lr}
 801b0b6:	4d06      	ldr	r5, [pc, #24]	; (801b0d0 <_sbrk_r+0x1c>)
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	4604      	mov	r4, r0
 801b0bc:	4608      	mov	r0, r1
 801b0be:	602b      	str	r3, [r5, #0]
 801b0c0:	f7e6 f80a 	bl	80010d8 <_sbrk>
 801b0c4:	1c43      	adds	r3, r0, #1
 801b0c6:	d102      	bne.n	801b0ce <_sbrk_r+0x1a>
 801b0c8:	682b      	ldr	r3, [r5, #0]
 801b0ca:	b103      	cbz	r3, 801b0ce <_sbrk_r+0x1a>
 801b0cc:	6023      	str	r3, [r4, #0]
 801b0ce:	bd38      	pop	{r3, r4, r5, pc}
 801b0d0:	24007cdc 	.word	0x24007cdc

0801b0d4 <_write_r>:
 801b0d4:	b538      	push	{r3, r4, r5, lr}
 801b0d6:	4d07      	ldr	r5, [pc, #28]	; (801b0f4 <_write_r+0x20>)
 801b0d8:	4604      	mov	r4, r0
 801b0da:	4608      	mov	r0, r1
 801b0dc:	4611      	mov	r1, r2
 801b0de:	2200      	movs	r2, #0
 801b0e0:	602a      	str	r2, [r5, #0]
 801b0e2:	461a      	mov	r2, r3
 801b0e4:	f7e5 ffa7 	bl	8001036 <_write>
 801b0e8:	1c43      	adds	r3, r0, #1
 801b0ea:	d102      	bne.n	801b0f2 <_write_r+0x1e>
 801b0ec:	682b      	ldr	r3, [r5, #0]
 801b0ee:	b103      	cbz	r3, 801b0f2 <_write_r+0x1e>
 801b0f0:	6023      	str	r3, [r4, #0]
 801b0f2:	bd38      	pop	{r3, r4, r5, pc}
 801b0f4:	24007cdc 	.word	0x24007cdc

0801b0f8 <__errno>:
 801b0f8:	4b01      	ldr	r3, [pc, #4]	; (801b100 <__errno+0x8>)
 801b0fa:	6818      	ldr	r0, [r3, #0]
 801b0fc:	4770      	bx	lr
 801b0fe:	bf00      	nop
 801b100:	24000894 	.word	0x24000894

0801b104 <__libc_init_array>:
 801b104:	b570      	push	{r4, r5, r6, lr}
 801b106:	4d0d      	ldr	r5, [pc, #52]	; (801b13c <__libc_init_array+0x38>)
 801b108:	4c0d      	ldr	r4, [pc, #52]	; (801b140 <__libc_init_array+0x3c>)
 801b10a:	1b64      	subs	r4, r4, r5
 801b10c:	10a4      	asrs	r4, r4, #2
 801b10e:	2600      	movs	r6, #0
 801b110:	42a6      	cmp	r6, r4
 801b112:	d109      	bne.n	801b128 <__libc_init_array+0x24>
 801b114:	4d0b      	ldr	r5, [pc, #44]	; (801b144 <__libc_init_array+0x40>)
 801b116:	4c0c      	ldr	r4, [pc, #48]	; (801b148 <__libc_init_array+0x44>)
 801b118:	f000 fce0 	bl	801badc <_init>
 801b11c:	1b64      	subs	r4, r4, r5
 801b11e:	10a4      	asrs	r4, r4, #2
 801b120:	2600      	movs	r6, #0
 801b122:	42a6      	cmp	r6, r4
 801b124:	d105      	bne.n	801b132 <__libc_init_array+0x2e>
 801b126:	bd70      	pop	{r4, r5, r6, pc}
 801b128:	f855 3b04 	ldr.w	r3, [r5], #4
 801b12c:	4798      	blx	r3
 801b12e:	3601      	adds	r6, #1
 801b130:	e7ee      	b.n	801b110 <__libc_init_array+0xc>
 801b132:	f855 3b04 	ldr.w	r3, [r5], #4
 801b136:	4798      	blx	r3
 801b138:	3601      	adds	r6, #1
 801b13a:	e7f2      	b.n	801b122 <__libc_init_array+0x1e>
 801b13c:	0804af8c 	.word	0x0804af8c
 801b140:	0804af8c 	.word	0x0804af8c
 801b144:	0804af8c 	.word	0x0804af8c
 801b148:	0804af90 	.word	0x0804af90

0801b14c <__retarget_lock_acquire_recursive>:
 801b14c:	4770      	bx	lr

0801b14e <__retarget_lock_release_recursive>:
 801b14e:	4770      	bx	lr

0801b150 <_free_r>:
 801b150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b152:	2900      	cmp	r1, #0
 801b154:	d044      	beq.n	801b1e0 <_free_r+0x90>
 801b156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b15a:	9001      	str	r0, [sp, #4]
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	f1a1 0404 	sub.w	r4, r1, #4
 801b162:	bfb8      	it	lt
 801b164:	18e4      	addlt	r4, r4, r3
 801b166:	f7ff fd3f 	bl	801abe8 <__malloc_lock>
 801b16a:	4a1e      	ldr	r2, [pc, #120]	; (801b1e4 <_free_r+0x94>)
 801b16c:	9801      	ldr	r0, [sp, #4]
 801b16e:	6813      	ldr	r3, [r2, #0]
 801b170:	b933      	cbnz	r3, 801b180 <_free_r+0x30>
 801b172:	6063      	str	r3, [r4, #4]
 801b174:	6014      	str	r4, [r2, #0]
 801b176:	b003      	add	sp, #12
 801b178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b17c:	f7ff bd3a 	b.w	801abf4 <__malloc_unlock>
 801b180:	42a3      	cmp	r3, r4
 801b182:	d908      	bls.n	801b196 <_free_r+0x46>
 801b184:	6825      	ldr	r5, [r4, #0]
 801b186:	1961      	adds	r1, r4, r5
 801b188:	428b      	cmp	r3, r1
 801b18a:	bf01      	itttt	eq
 801b18c:	6819      	ldreq	r1, [r3, #0]
 801b18e:	685b      	ldreq	r3, [r3, #4]
 801b190:	1949      	addeq	r1, r1, r5
 801b192:	6021      	streq	r1, [r4, #0]
 801b194:	e7ed      	b.n	801b172 <_free_r+0x22>
 801b196:	461a      	mov	r2, r3
 801b198:	685b      	ldr	r3, [r3, #4]
 801b19a:	b10b      	cbz	r3, 801b1a0 <_free_r+0x50>
 801b19c:	42a3      	cmp	r3, r4
 801b19e:	d9fa      	bls.n	801b196 <_free_r+0x46>
 801b1a0:	6811      	ldr	r1, [r2, #0]
 801b1a2:	1855      	adds	r5, r2, r1
 801b1a4:	42a5      	cmp	r5, r4
 801b1a6:	d10b      	bne.n	801b1c0 <_free_r+0x70>
 801b1a8:	6824      	ldr	r4, [r4, #0]
 801b1aa:	4421      	add	r1, r4
 801b1ac:	1854      	adds	r4, r2, r1
 801b1ae:	42a3      	cmp	r3, r4
 801b1b0:	6011      	str	r1, [r2, #0]
 801b1b2:	d1e0      	bne.n	801b176 <_free_r+0x26>
 801b1b4:	681c      	ldr	r4, [r3, #0]
 801b1b6:	685b      	ldr	r3, [r3, #4]
 801b1b8:	6053      	str	r3, [r2, #4]
 801b1ba:	440c      	add	r4, r1
 801b1bc:	6014      	str	r4, [r2, #0]
 801b1be:	e7da      	b.n	801b176 <_free_r+0x26>
 801b1c0:	d902      	bls.n	801b1c8 <_free_r+0x78>
 801b1c2:	230c      	movs	r3, #12
 801b1c4:	6003      	str	r3, [r0, #0]
 801b1c6:	e7d6      	b.n	801b176 <_free_r+0x26>
 801b1c8:	6825      	ldr	r5, [r4, #0]
 801b1ca:	1961      	adds	r1, r4, r5
 801b1cc:	428b      	cmp	r3, r1
 801b1ce:	bf04      	itt	eq
 801b1d0:	6819      	ldreq	r1, [r3, #0]
 801b1d2:	685b      	ldreq	r3, [r3, #4]
 801b1d4:	6063      	str	r3, [r4, #4]
 801b1d6:	bf04      	itt	eq
 801b1d8:	1949      	addeq	r1, r1, r5
 801b1da:	6021      	streq	r1, [r4, #0]
 801b1dc:	6054      	str	r4, [r2, #4]
 801b1de:	e7ca      	b.n	801b176 <_free_r+0x26>
 801b1e0:	b003      	add	sp, #12
 801b1e2:	bd30      	pop	{r4, r5, pc}
 801b1e4:	24007b98 	.word	0x24007b98

0801b1e8 <__ssputs_r>:
 801b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1ec:	688e      	ldr	r6, [r1, #8]
 801b1ee:	461f      	mov	r7, r3
 801b1f0:	42be      	cmp	r6, r7
 801b1f2:	680b      	ldr	r3, [r1, #0]
 801b1f4:	4682      	mov	sl, r0
 801b1f6:	460c      	mov	r4, r1
 801b1f8:	4690      	mov	r8, r2
 801b1fa:	d82c      	bhi.n	801b256 <__ssputs_r+0x6e>
 801b1fc:	898a      	ldrh	r2, [r1, #12]
 801b1fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b202:	d026      	beq.n	801b252 <__ssputs_r+0x6a>
 801b204:	6965      	ldr	r5, [r4, #20]
 801b206:	6909      	ldr	r1, [r1, #16]
 801b208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b20c:	eba3 0901 	sub.w	r9, r3, r1
 801b210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b214:	1c7b      	adds	r3, r7, #1
 801b216:	444b      	add	r3, r9
 801b218:	106d      	asrs	r5, r5, #1
 801b21a:	429d      	cmp	r5, r3
 801b21c:	bf38      	it	cc
 801b21e:	461d      	movcc	r5, r3
 801b220:	0553      	lsls	r3, r2, #21
 801b222:	d527      	bpl.n	801b274 <__ssputs_r+0x8c>
 801b224:	4629      	mov	r1, r5
 801b226:	f7ff fc5f 	bl	801aae8 <_malloc_r>
 801b22a:	4606      	mov	r6, r0
 801b22c:	b360      	cbz	r0, 801b288 <__ssputs_r+0xa0>
 801b22e:	6921      	ldr	r1, [r4, #16]
 801b230:	464a      	mov	r2, r9
 801b232:	f000 fc0d 	bl	801ba50 <memcpy>
 801b236:	89a3      	ldrh	r3, [r4, #12]
 801b238:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b23c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b240:	81a3      	strh	r3, [r4, #12]
 801b242:	6126      	str	r6, [r4, #16]
 801b244:	6165      	str	r5, [r4, #20]
 801b246:	444e      	add	r6, r9
 801b248:	eba5 0509 	sub.w	r5, r5, r9
 801b24c:	6026      	str	r6, [r4, #0]
 801b24e:	60a5      	str	r5, [r4, #8]
 801b250:	463e      	mov	r6, r7
 801b252:	42be      	cmp	r6, r7
 801b254:	d900      	bls.n	801b258 <__ssputs_r+0x70>
 801b256:	463e      	mov	r6, r7
 801b258:	6820      	ldr	r0, [r4, #0]
 801b25a:	4632      	mov	r2, r6
 801b25c:	4641      	mov	r1, r8
 801b25e:	f000 fbbb 	bl	801b9d8 <memmove>
 801b262:	68a3      	ldr	r3, [r4, #8]
 801b264:	1b9b      	subs	r3, r3, r6
 801b266:	60a3      	str	r3, [r4, #8]
 801b268:	6823      	ldr	r3, [r4, #0]
 801b26a:	4433      	add	r3, r6
 801b26c:	6023      	str	r3, [r4, #0]
 801b26e:	2000      	movs	r0, #0
 801b270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b274:	462a      	mov	r2, r5
 801b276:	f000 fbf9 	bl	801ba6c <_realloc_r>
 801b27a:	4606      	mov	r6, r0
 801b27c:	2800      	cmp	r0, #0
 801b27e:	d1e0      	bne.n	801b242 <__ssputs_r+0x5a>
 801b280:	6921      	ldr	r1, [r4, #16]
 801b282:	4650      	mov	r0, sl
 801b284:	f7ff ff64 	bl	801b150 <_free_r>
 801b288:	230c      	movs	r3, #12
 801b28a:	f8ca 3000 	str.w	r3, [sl]
 801b28e:	89a3      	ldrh	r3, [r4, #12]
 801b290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b294:	81a3      	strh	r3, [r4, #12]
 801b296:	f04f 30ff 	mov.w	r0, #4294967295
 801b29a:	e7e9      	b.n	801b270 <__ssputs_r+0x88>

0801b29c <_svfiprintf_r>:
 801b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2a0:	4698      	mov	r8, r3
 801b2a2:	898b      	ldrh	r3, [r1, #12]
 801b2a4:	061b      	lsls	r3, r3, #24
 801b2a6:	b09d      	sub	sp, #116	; 0x74
 801b2a8:	4607      	mov	r7, r0
 801b2aa:	460d      	mov	r5, r1
 801b2ac:	4614      	mov	r4, r2
 801b2ae:	d50e      	bpl.n	801b2ce <_svfiprintf_r+0x32>
 801b2b0:	690b      	ldr	r3, [r1, #16]
 801b2b2:	b963      	cbnz	r3, 801b2ce <_svfiprintf_r+0x32>
 801b2b4:	2140      	movs	r1, #64	; 0x40
 801b2b6:	f7ff fc17 	bl	801aae8 <_malloc_r>
 801b2ba:	6028      	str	r0, [r5, #0]
 801b2bc:	6128      	str	r0, [r5, #16]
 801b2be:	b920      	cbnz	r0, 801b2ca <_svfiprintf_r+0x2e>
 801b2c0:	230c      	movs	r3, #12
 801b2c2:	603b      	str	r3, [r7, #0]
 801b2c4:	f04f 30ff 	mov.w	r0, #4294967295
 801b2c8:	e0d0      	b.n	801b46c <_svfiprintf_r+0x1d0>
 801b2ca:	2340      	movs	r3, #64	; 0x40
 801b2cc:	616b      	str	r3, [r5, #20]
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	9309      	str	r3, [sp, #36]	; 0x24
 801b2d2:	2320      	movs	r3, #32
 801b2d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b2d8:	f8cd 800c 	str.w	r8, [sp, #12]
 801b2dc:	2330      	movs	r3, #48	; 0x30
 801b2de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b484 <_svfiprintf_r+0x1e8>
 801b2e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b2e6:	f04f 0901 	mov.w	r9, #1
 801b2ea:	4623      	mov	r3, r4
 801b2ec:	469a      	mov	sl, r3
 801b2ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2f2:	b10a      	cbz	r2, 801b2f8 <_svfiprintf_r+0x5c>
 801b2f4:	2a25      	cmp	r2, #37	; 0x25
 801b2f6:	d1f9      	bne.n	801b2ec <_svfiprintf_r+0x50>
 801b2f8:	ebba 0b04 	subs.w	fp, sl, r4
 801b2fc:	d00b      	beq.n	801b316 <_svfiprintf_r+0x7a>
 801b2fe:	465b      	mov	r3, fp
 801b300:	4622      	mov	r2, r4
 801b302:	4629      	mov	r1, r5
 801b304:	4638      	mov	r0, r7
 801b306:	f7ff ff6f 	bl	801b1e8 <__ssputs_r>
 801b30a:	3001      	adds	r0, #1
 801b30c:	f000 80a9 	beq.w	801b462 <_svfiprintf_r+0x1c6>
 801b310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b312:	445a      	add	r2, fp
 801b314:	9209      	str	r2, [sp, #36]	; 0x24
 801b316:	f89a 3000 	ldrb.w	r3, [sl]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	f000 80a1 	beq.w	801b462 <_svfiprintf_r+0x1c6>
 801b320:	2300      	movs	r3, #0
 801b322:	f04f 32ff 	mov.w	r2, #4294967295
 801b326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b32a:	f10a 0a01 	add.w	sl, sl, #1
 801b32e:	9304      	str	r3, [sp, #16]
 801b330:	9307      	str	r3, [sp, #28]
 801b332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b336:	931a      	str	r3, [sp, #104]	; 0x68
 801b338:	4654      	mov	r4, sl
 801b33a:	2205      	movs	r2, #5
 801b33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b340:	4850      	ldr	r0, [pc, #320]	; (801b484 <_svfiprintf_r+0x1e8>)
 801b342:	f7e4 ffcd 	bl	80002e0 <memchr>
 801b346:	9a04      	ldr	r2, [sp, #16]
 801b348:	b9d8      	cbnz	r0, 801b382 <_svfiprintf_r+0xe6>
 801b34a:	06d0      	lsls	r0, r2, #27
 801b34c:	bf44      	itt	mi
 801b34e:	2320      	movmi	r3, #32
 801b350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b354:	0711      	lsls	r1, r2, #28
 801b356:	bf44      	itt	mi
 801b358:	232b      	movmi	r3, #43	; 0x2b
 801b35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b35e:	f89a 3000 	ldrb.w	r3, [sl]
 801b362:	2b2a      	cmp	r3, #42	; 0x2a
 801b364:	d015      	beq.n	801b392 <_svfiprintf_r+0xf6>
 801b366:	9a07      	ldr	r2, [sp, #28]
 801b368:	4654      	mov	r4, sl
 801b36a:	2000      	movs	r0, #0
 801b36c:	f04f 0c0a 	mov.w	ip, #10
 801b370:	4621      	mov	r1, r4
 801b372:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b376:	3b30      	subs	r3, #48	; 0x30
 801b378:	2b09      	cmp	r3, #9
 801b37a:	d94d      	bls.n	801b418 <_svfiprintf_r+0x17c>
 801b37c:	b1b0      	cbz	r0, 801b3ac <_svfiprintf_r+0x110>
 801b37e:	9207      	str	r2, [sp, #28]
 801b380:	e014      	b.n	801b3ac <_svfiprintf_r+0x110>
 801b382:	eba0 0308 	sub.w	r3, r0, r8
 801b386:	fa09 f303 	lsl.w	r3, r9, r3
 801b38a:	4313      	orrs	r3, r2
 801b38c:	9304      	str	r3, [sp, #16]
 801b38e:	46a2      	mov	sl, r4
 801b390:	e7d2      	b.n	801b338 <_svfiprintf_r+0x9c>
 801b392:	9b03      	ldr	r3, [sp, #12]
 801b394:	1d19      	adds	r1, r3, #4
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	9103      	str	r1, [sp, #12]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	bfbb      	ittet	lt
 801b39e:	425b      	neglt	r3, r3
 801b3a0:	f042 0202 	orrlt.w	r2, r2, #2
 801b3a4:	9307      	strge	r3, [sp, #28]
 801b3a6:	9307      	strlt	r3, [sp, #28]
 801b3a8:	bfb8      	it	lt
 801b3aa:	9204      	strlt	r2, [sp, #16]
 801b3ac:	7823      	ldrb	r3, [r4, #0]
 801b3ae:	2b2e      	cmp	r3, #46	; 0x2e
 801b3b0:	d10c      	bne.n	801b3cc <_svfiprintf_r+0x130>
 801b3b2:	7863      	ldrb	r3, [r4, #1]
 801b3b4:	2b2a      	cmp	r3, #42	; 0x2a
 801b3b6:	d134      	bne.n	801b422 <_svfiprintf_r+0x186>
 801b3b8:	9b03      	ldr	r3, [sp, #12]
 801b3ba:	1d1a      	adds	r2, r3, #4
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	9203      	str	r2, [sp, #12]
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	bfb8      	it	lt
 801b3c4:	f04f 33ff 	movlt.w	r3, #4294967295
 801b3c8:	3402      	adds	r4, #2
 801b3ca:	9305      	str	r3, [sp, #20]
 801b3cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b494 <_svfiprintf_r+0x1f8>
 801b3d0:	7821      	ldrb	r1, [r4, #0]
 801b3d2:	2203      	movs	r2, #3
 801b3d4:	4650      	mov	r0, sl
 801b3d6:	f7e4 ff83 	bl	80002e0 <memchr>
 801b3da:	b138      	cbz	r0, 801b3ec <_svfiprintf_r+0x150>
 801b3dc:	9b04      	ldr	r3, [sp, #16]
 801b3de:	eba0 000a 	sub.w	r0, r0, sl
 801b3e2:	2240      	movs	r2, #64	; 0x40
 801b3e4:	4082      	lsls	r2, r0
 801b3e6:	4313      	orrs	r3, r2
 801b3e8:	3401      	adds	r4, #1
 801b3ea:	9304      	str	r3, [sp, #16]
 801b3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3f0:	4825      	ldr	r0, [pc, #148]	; (801b488 <_svfiprintf_r+0x1ec>)
 801b3f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b3f6:	2206      	movs	r2, #6
 801b3f8:	f7e4 ff72 	bl	80002e0 <memchr>
 801b3fc:	2800      	cmp	r0, #0
 801b3fe:	d038      	beq.n	801b472 <_svfiprintf_r+0x1d6>
 801b400:	4b22      	ldr	r3, [pc, #136]	; (801b48c <_svfiprintf_r+0x1f0>)
 801b402:	bb1b      	cbnz	r3, 801b44c <_svfiprintf_r+0x1b0>
 801b404:	9b03      	ldr	r3, [sp, #12]
 801b406:	3307      	adds	r3, #7
 801b408:	f023 0307 	bic.w	r3, r3, #7
 801b40c:	3308      	adds	r3, #8
 801b40e:	9303      	str	r3, [sp, #12]
 801b410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b412:	4433      	add	r3, r6
 801b414:	9309      	str	r3, [sp, #36]	; 0x24
 801b416:	e768      	b.n	801b2ea <_svfiprintf_r+0x4e>
 801b418:	fb0c 3202 	mla	r2, ip, r2, r3
 801b41c:	460c      	mov	r4, r1
 801b41e:	2001      	movs	r0, #1
 801b420:	e7a6      	b.n	801b370 <_svfiprintf_r+0xd4>
 801b422:	2300      	movs	r3, #0
 801b424:	3401      	adds	r4, #1
 801b426:	9305      	str	r3, [sp, #20]
 801b428:	4619      	mov	r1, r3
 801b42a:	f04f 0c0a 	mov.w	ip, #10
 801b42e:	4620      	mov	r0, r4
 801b430:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b434:	3a30      	subs	r2, #48	; 0x30
 801b436:	2a09      	cmp	r2, #9
 801b438:	d903      	bls.n	801b442 <_svfiprintf_r+0x1a6>
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d0c6      	beq.n	801b3cc <_svfiprintf_r+0x130>
 801b43e:	9105      	str	r1, [sp, #20]
 801b440:	e7c4      	b.n	801b3cc <_svfiprintf_r+0x130>
 801b442:	fb0c 2101 	mla	r1, ip, r1, r2
 801b446:	4604      	mov	r4, r0
 801b448:	2301      	movs	r3, #1
 801b44a:	e7f0      	b.n	801b42e <_svfiprintf_r+0x192>
 801b44c:	ab03      	add	r3, sp, #12
 801b44e:	9300      	str	r3, [sp, #0]
 801b450:	462a      	mov	r2, r5
 801b452:	4b0f      	ldr	r3, [pc, #60]	; (801b490 <_svfiprintf_r+0x1f4>)
 801b454:	a904      	add	r1, sp, #16
 801b456:	4638      	mov	r0, r7
 801b458:	f3af 8000 	nop.w
 801b45c:	1c42      	adds	r2, r0, #1
 801b45e:	4606      	mov	r6, r0
 801b460:	d1d6      	bne.n	801b410 <_svfiprintf_r+0x174>
 801b462:	89ab      	ldrh	r3, [r5, #12]
 801b464:	065b      	lsls	r3, r3, #25
 801b466:	f53f af2d 	bmi.w	801b2c4 <_svfiprintf_r+0x28>
 801b46a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b46c:	b01d      	add	sp, #116	; 0x74
 801b46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b472:	ab03      	add	r3, sp, #12
 801b474:	9300      	str	r3, [sp, #0]
 801b476:	462a      	mov	r2, r5
 801b478:	4b05      	ldr	r3, [pc, #20]	; (801b490 <_svfiprintf_r+0x1f4>)
 801b47a:	a904      	add	r1, sp, #16
 801b47c:	4638      	mov	r0, r7
 801b47e:	f000 f879 	bl	801b574 <_printf_i>
 801b482:	e7eb      	b.n	801b45c <_svfiprintf_r+0x1c0>
 801b484:	0804af58 	.word	0x0804af58
 801b488:	0804af62 	.word	0x0804af62
 801b48c:	00000000 	.word	0x00000000
 801b490:	0801b1e9 	.word	0x0801b1e9
 801b494:	0804af5e 	.word	0x0804af5e

0801b498 <_printf_common>:
 801b498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b49c:	4616      	mov	r6, r2
 801b49e:	4699      	mov	r9, r3
 801b4a0:	688a      	ldr	r2, [r1, #8]
 801b4a2:	690b      	ldr	r3, [r1, #16]
 801b4a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b4a8:	4293      	cmp	r3, r2
 801b4aa:	bfb8      	it	lt
 801b4ac:	4613      	movlt	r3, r2
 801b4ae:	6033      	str	r3, [r6, #0]
 801b4b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b4b4:	4607      	mov	r7, r0
 801b4b6:	460c      	mov	r4, r1
 801b4b8:	b10a      	cbz	r2, 801b4be <_printf_common+0x26>
 801b4ba:	3301      	adds	r3, #1
 801b4bc:	6033      	str	r3, [r6, #0]
 801b4be:	6823      	ldr	r3, [r4, #0]
 801b4c0:	0699      	lsls	r1, r3, #26
 801b4c2:	bf42      	ittt	mi
 801b4c4:	6833      	ldrmi	r3, [r6, #0]
 801b4c6:	3302      	addmi	r3, #2
 801b4c8:	6033      	strmi	r3, [r6, #0]
 801b4ca:	6825      	ldr	r5, [r4, #0]
 801b4cc:	f015 0506 	ands.w	r5, r5, #6
 801b4d0:	d106      	bne.n	801b4e0 <_printf_common+0x48>
 801b4d2:	f104 0a19 	add.w	sl, r4, #25
 801b4d6:	68e3      	ldr	r3, [r4, #12]
 801b4d8:	6832      	ldr	r2, [r6, #0]
 801b4da:	1a9b      	subs	r3, r3, r2
 801b4dc:	42ab      	cmp	r3, r5
 801b4de:	dc26      	bgt.n	801b52e <_printf_common+0x96>
 801b4e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b4e4:	1e13      	subs	r3, r2, #0
 801b4e6:	6822      	ldr	r2, [r4, #0]
 801b4e8:	bf18      	it	ne
 801b4ea:	2301      	movne	r3, #1
 801b4ec:	0692      	lsls	r2, r2, #26
 801b4ee:	d42b      	bmi.n	801b548 <_printf_common+0xb0>
 801b4f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b4f4:	4649      	mov	r1, r9
 801b4f6:	4638      	mov	r0, r7
 801b4f8:	47c0      	blx	r8
 801b4fa:	3001      	adds	r0, #1
 801b4fc:	d01e      	beq.n	801b53c <_printf_common+0xa4>
 801b4fe:	6823      	ldr	r3, [r4, #0]
 801b500:	6922      	ldr	r2, [r4, #16]
 801b502:	f003 0306 	and.w	r3, r3, #6
 801b506:	2b04      	cmp	r3, #4
 801b508:	bf02      	ittt	eq
 801b50a:	68e5      	ldreq	r5, [r4, #12]
 801b50c:	6833      	ldreq	r3, [r6, #0]
 801b50e:	1aed      	subeq	r5, r5, r3
 801b510:	68a3      	ldr	r3, [r4, #8]
 801b512:	bf0c      	ite	eq
 801b514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b518:	2500      	movne	r5, #0
 801b51a:	4293      	cmp	r3, r2
 801b51c:	bfc4      	itt	gt
 801b51e:	1a9b      	subgt	r3, r3, r2
 801b520:	18ed      	addgt	r5, r5, r3
 801b522:	2600      	movs	r6, #0
 801b524:	341a      	adds	r4, #26
 801b526:	42b5      	cmp	r5, r6
 801b528:	d11a      	bne.n	801b560 <_printf_common+0xc8>
 801b52a:	2000      	movs	r0, #0
 801b52c:	e008      	b.n	801b540 <_printf_common+0xa8>
 801b52e:	2301      	movs	r3, #1
 801b530:	4652      	mov	r2, sl
 801b532:	4649      	mov	r1, r9
 801b534:	4638      	mov	r0, r7
 801b536:	47c0      	blx	r8
 801b538:	3001      	adds	r0, #1
 801b53a:	d103      	bne.n	801b544 <_printf_common+0xac>
 801b53c:	f04f 30ff 	mov.w	r0, #4294967295
 801b540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b544:	3501      	adds	r5, #1
 801b546:	e7c6      	b.n	801b4d6 <_printf_common+0x3e>
 801b548:	18e1      	adds	r1, r4, r3
 801b54a:	1c5a      	adds	r2, r3, #1
 801b54c:	2030      	movs	r0, #48	; 0x30
 801b54e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b552:	4422      	add	r2, r4
 801b554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b55c:	3302      	adds	r3, #2
 801b55e:	e7c7      	b.n	801b4f0 <_printf_common+0x58>
 801b560:	2301      	movs	r3, #1
 801b562:	4622      	mov	r2, r4
 801b564:	4649      	mov	r1, r9
 801b566:	4638      	mov	r0, r7
 801b568:	47c0      	blx	r8
 801b56a:	3001      	adds	r0, #1
 801b56c:	d0e6      	beq.n	801b53c <_printf_common+0xa4>
 801b56e:	3601      	adds	r6, #1
 801b570:	e7d9      	b.n	801b526 <_printf_common+0x8e>
	...

0801b574 <_printf_i>:
 801b574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b578:	7e0f      	ldrb	r7, [r1, #24]
 801b57a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b57c:	2f78      	cmp	r7, #120	; 0x78
 801b57e:	4691      	mov	r9, r2
 801b580:	4680      	mov	r8, r0
 801b582:	460c      	mov	r4, r1
 801b584:	469a      	mov	sl, r3
 801b586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b58a:	d807      	bhi.n	801b59c <_printf_i+0x28>
 801b58c:	2f62      	cmp	r7, #98	; 0x62
 801b58e:	d80a      	bhi.n	801b5a6 <_printf_i+0x32>
 801b590:	2f00      	cmp	r7, #0
 801b592:	f000 80d4 	beq.w	801b73e <_printf_i+0x1ca>
 801b596:	2f58      	cmp	r7, #88	; 0x58
 801b598:	f000 80c0 	beq.w	801b71c <_printf_i+0x1a8>
 801b59c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b5a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b5a4:	e03a      	b.n	801b61c <_printf_i+0xa8>
 801b5a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b5aa:	2b15      	cmp	r3, #21
 801b5ac:	d8f6      	bhi.n	801b59c <_printf_i+0x28>
 801b5ae:	a101      	add	r1, pc, #4	; (adr r1, 801b5b4 <_printf_i+0x40>)
 801b5b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b5b4:	0801b60d 	.word	0x0801b60d
 801b5b8:	0801b621 	.word	0x0801b621
 801b5bc:	0801b59d 	.word	0x0801b59d
 801b5c0:	0801b59d 	.word	0x0801b59d
 801b5c4:	0801b59d 	.word	0x0801b59d
 801b5c8:	0801b59d 	.word	0x0801b59d
 801b5cc:	0801b621 	.word	0x0801b621
 801b5d0:	0801b59d 	.word	0x0801b59d
 801b5d4:	0801b59d 	.word	0x0801b59d
 801b5d8:	0801b59d 	.word	0x0801b59d
 801b5dc:	0801b59d 	.word	0x0801b59d
 801b5e0:	0801b725 	.word	0x0801b725
 801b5e4:	0801b64d 	.word	0x0801b64d
 801b5e8:	0801b6df 	.word	0x0801b6df
 801b5ec:	0801b59d 	.word	0x0801b59d
 801b5f0:	0801b59d 	.word	0x0801b59d
 801b5f4:	0801b747 	.word	0x0801b747
 801b5f8:	0801b59d 	.word	0x0801b59d
 801b5fc:	0801b64d 	.word	0x0801b64d
 801b600:	0801b59d 	.word	0x0801b59d
 801b604:	0801b59d 	.word	0x0801b59d
 801b608:	0801b6e7 	.word	0x0801b6e7
 801b60c:	682b      	ldr	r3, [r5, #0]
 801b60e:	1d1a      	adds	r2, r3, #4
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	602a      	str	r2, [r5, #0]
 801b614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b61c:	2301      	movs	r3, #1
 801b61e:	e09f      	b.n	801b760 <_printf_i+0x1ec>
 801b620:	6820      	ldr	r0, [r4, #0]
 801b622:	682b      	ldr	r3, [r5, #0]
 801b624:	0607      	lsls	r7, r0, #24
 801b626:	f103 0104 	add.w	r1, r3, #4
 801b62a:	6029      	str	r1, [r5, #0]
 801b62c:	d501      	bpl.n	801b632 <_printf_i+0xbe>
 801b62e:	681e      	ldr	r6, [r3, #0]
 801b630:	e003      	b.n	801b63a <_printf_i+0xc6>
 801b632:	0646      	lsls	r6, r0, #25
 801b634:	d5fb      	bpl.n	801b62e <_printf_i+0xba>
 801b636:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b63a:	2e00      	cmp	r6, #0
 801b63c:	da03      	bge.n	801b646 <_printf_i+0xd2>
 801b63e:	232d      	movs	r3, #45	; 0x2d
 801b640:	4276      	negs	r6, r6
 801b642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b646:	485a      	ldr	r0, [pc, #360]	; (801b7b0 <_printf_i+0x23c>)
 801b648:	230a      	movs	r3, #10
 801b64a:	e012      	b.n	801b672 <_printf_i+0xfe>
 801b64c:	682b      	ldr	r3, [r5, #0]
 801b64e:	6820      	ldr	r0, [r4, #0]
 801b650:	1d19      	adds	r1, r3, #4
 801b652:	6029      	str	r1, [r5, #0]
 801b654:	0605      	lsls	r5, r0, #24
 801b656:	d501      	bpl.n	801b65c <_printf_i+0xe8>
 801b658:	681e      	ldr	r6, [r3, #0]
 801b65a:	e002      	b.n	801b662 <_printf_i+0xee>
 801b65c:	0641      	lsls	r1, r0, #25
 801b65e:	d5fb      	bpl.n	801b658 <_printf_i+0xe4>
 801b660:	881e      	ldrh	r6, [r3, #0]
 801b662:	4853      	ldr	r0, [pc, #332]	; (801b7b0 <_printf_i+0x23c>)
 801b664:	2f6f      	cmp	r7, #111	; 0x6f
 801b666:	bf0c      	ite	eq
 801b668:	2308      	moveq	r3, #8
 801b66a:	230a      	movne	r3, #10
 801b66c:	2100      	movs	r1, #0
 801b66e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b672:	6865      	ldr	r5, [r4, #4]
 801b674:	60a5      	str	r5, [r4, #8]
 801b676:	2d00      	cmp	r5, #0
 801b678:	bfa2      	ittt	ge
 801b67a:	6821      	ldrge	r1, [r4, #0]
 801b67c:	f021 0104 	bicge.w	r1, r1, #4
 801b680:	6021      	strge	r1, [r4, #0]
 801b682:	b90e      	cbnz	r6, 801b688 <_printf_i+0x114>
 801b684:	2d00      	cmp	r5, #0
 801b686:	d04b      	beq.n	801b720 <_printf_i+0x1ac>
 801b688:	4615      	mov	r5, r2
 801b68a:	fbb6 f1f3 	udiv	r1, r6, r3
 801b68e:	fb03 6711 	mls	r7, r3, r1, r6
 801b692:	5dc7      	ldrb	r7, [r0, r7]
 801b694:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b698:	4637      	mov	r7, r6
 801b69a:	42bb      	cmp	r3, r7
 801b69c:	460e      	mov	r6, r1
 801b69e:	d9f4      	bls.n	801b68a <_printf_i+0x116>
 801b6a0:	2b08      	cmp	r3, #8
 801b6a2:	d10b      	bne.n	801b6bc <_printf_i+0x148>
 801b6a4:	6823      	ldr	r3, [r4, #0]
 801b6a6:	07de      	lsls	r6, r3, #31
 801b6a8:	d508      	bpl.n	801b6bc <_printf_i+0x148>
 801b6aa:	6923      	ldr	r3, [r4, #16]
 801b6ac:	6861      	ldr	r1, [r4, #4]
 801b6ae:	4299      	cmp	r1, r3
 801b6b0:	bfde      	ittt	le
 801b6b2:	2330      	movle	r3, #48	; 0x30
 801b6b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b6b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b6bc:	1b52      	subs	r2, r2, r5
 801b6be:	6122      	str	r2, [r4, #16]
 801b6c0:	f8cd a000 	str.w	sl, [sp]
 801b6c4:	464b      	mov	r3, r9
 801b6c6:	aa03      	add	r2, sp, #12
 801b6c8:	4621      	mov	r1, r4
 801b6ca:	4640      	mov	r0, r8
 801b6cc:	f7ff fee4 	bl	801b498 <_printf_common>
 801b6d0:	3001      	adds	r0, #1
 801b6d2:	d14a      	bne.n	801b76a <_printf_i+0x1f6>
 801b6d4:	f04f 30ff 	mov.w	r0, #4294967295
 801b6d8:	b004      	add	sp, #16
 801b6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b6de:	6823      	ldr	r3, [r4, #0]
 801b6e0:	f043 0320 	orr.w	r3, r3, #32
 801b6e4:	6023      	str	r3, [r4, #0]
 801b6e6:	4833      	ldr	r0, [pc, #204]	; (801b7b4 <_printf_i+0x240>)
 801b6e8:	2778      	movs	r7, #120	; 0x78
 801b6ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b6ee:	6823      	ldr	r3, [r4, #0]
 801b6f0:	6829      	ldr	r1, [r5, #0]
 801b6f2:	061f      	lsls	r7, r3, #24
 801b6f4:	f851 6b04 	ldr.w	r6, [r1], #4
 801b6f8:	d402      	bmi.n	801b700 <_printf_i+0x18c>
 801b6fa:	065f      	lsls	r7, r3, #25
 801b6fc:	bf48      	it	mi
 801b6fe:	b2b6      	uxthmi	r6, r6
 801b700:	07df      	lsls	r7, r3, #31
 801b702:	bf48      	it	mi
 801b704:	f043 0320 	orrmi.w	r3, r3, #32
 801b708:	6029      	str	r1, [r5, #0]
 801b70a:	bf48      	it	mi
 801b70c:	6023      	strmi	r3, [r4, #0]
 801b70e:	b91e      	cbnz	r6, 801b718 <_printf_i+0x1a4>
 801b710:	6823      	ldr	r3, [r4, #0]
 801b712:	f023 0320 	bic.w	r3, r3, #32
 801b716:	6023      	str	r3, [r4, #0]
 801b718:	2310      	movs	r3, #16
 801b71a:	e7a7      	b.n	801b66c <_printf_i+0xf8>
 801b71c:	4824      	ldr	r0, [pc, #144]	; (801b7b0 <_printf_i+0x23c>)
 801b71e:	e7e4      	b.n	801b6ea <_printf_i+0x176>
 801b720:	4615      	mov	r5, r2
 801b722:	e7bd      	b.n	801b6a0 <_printf_i+0x12c>
 801b724:	682b      	ldr	r3, [r5, #0]
 801b726:	6826      	ldr	r6, [r4, #0]
 801b728:	6961      	ldr	r1, [r4, #20]
 801b72a:	1d18      	adds	r0, r3, #4
 801b72c:	6028      	str	r0, [r5, #0]
 801b72e:	0635      	lsls	r5, r6, #24
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	d501      	bpl.n	801b738 <_printf_i+0x1c4>
 801b734:	6019      	str	r1, [r3, #0]
 801b736:	e002      	b.n	801b73e <_printf_i+0x1ca>
 801b738:	0670      	lsls	r0, r6, #25
 801b73a:	d5fb      	bpl.n	801b734 <_printf_i+0x1c0>
 801b73c:	8019      	strh	r1, [r3, #0]
 801b73e:	2300      	movs	r3, #0
 801b740:	6123      	str	r3, [r4, #16]
 801b742:	4615      	mov	r5, r2
 801b744:	e7bc      	b.n	801b6c0 <_printf_i+0x14c>
 801b746:	682b      	ldr	r3, [r5, #0]
 801b748:	1d1a      	adds	r2, r3, #4
 801b74a:	602a      	str	r2, [r5, #0]
 801b74c:	681d      	ldr	r5, [r3, #0]
 801b74e:	6862      	ldr	r2, [r4, #4]
 801b750:	2100      	movs	r1, #0
 801b752:	4628      	mov	r0, r5
 801b754:	f7e4 fdc4 	bl	80002e0 <memchr>
 801b758:	b108      	cbz	r0, 801b75e <_printf_i+0x1ea>
 801b75a:	1b40      	subs	r0, r0, r5
 801b75c:	6060      	str	r0, [r4, #4]
 801b75e:	6863      	ldr	r3, [r4, #4]
 801b760:	6123      	str	r3, [r4, #16]
 801b762:	2300      	movs	r3, #0
 801b764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b768:	e7aa      	b.n	801b6c0 <_printf_i+0x14c>
 801b76a:	6923      	ldr	r3, [r4, #16]
 801b76c:	462a      	mov	r2, r5
 801b76e:	4649      	mov	r1, r9
 801b770:	4640      	mov	r0, r8
 801b772:	47d0      	blx	sl
 801b774:	3001      	adds	r0, #1
 801b776:	d0ad      	beq.n	801b6d4 <_printf_i+0x160>
 801b778:	6823      	ldr	r3, [r4, #0]
 801b77a:	079b      	lsls	r3, r3, #30
 801b77c:	d413      	bmi.n	801b7a6 <_printf_i+0x232>
 801b77e:	68e0      	ldr	r0, [r4, #12]
 801b780:	9b03      	ldr	r3, [sp, #12]
 801b782:	4298      	cmp	r0, r3
 801b784:	bfb8      	it	lt
 801b786:	4618      	movlt	r0, r3
 801b788:	e7a6      	b.n	801b6d8 <_printf_i+0x164>
 801b78a:	2301      	movs	r3, #1
 801b78c:	4632      	mov	r2, r6
 801b78e:	4649      	mov	r1, r9
 801b790:	4640      	mov	r0, r8
 801b792:	47d0      	blx	sl
 801b794:	3001      	adds	r0, #1
 801b796:	d09d      	beq.n	801b6d4 <_printf_i+0x160>
 801b798:	3501      	adds	r5, #1
 801b79a:	68e3      	ldr	r3, [r4, #12]
 801b79c:	9903      	ldr	r1, [sp, #12]
 801b79e:	1a5b      	subs	r3, r3, r1
 801b7a0:	42ab      	cmp	r3, r5
 801b7a2:	dcf2      	bgt.n	801b78a <_printf_i+0x216>
 801b7a4:	e7eb      	b.n	801b77e <_printf_i+0x20a>
 801b7a6:	2500      	movs	r5, #0
 801b7a8:	f104 0619 	add.w	r6, r4, #25
 801b7ac:	e7f5      	b.n	801b79a <_printf_i+0x226>
 801b7ae:	bf00      	nop
 801b7b0:	0804af69 	.word	0x0804af69
 801b7b4:	0804af7a 	.word	0x0804af7a

0801b7b8 <__sflush_r>:
 801b7b8:	898a      	ldrh	r2, [r1, #12]
 801b7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7be:	4605      	mov	r5, r0
 801b7c0:	0710      	lsls	r0, r2, #28
 801b7c2:	460c      	mov	r4, r1
 801b7c4:	d458      	bmi.n	801b878 <__sflush_r+0xc0>
 801b7c6:	684b      	ldr	r3, [r1, #4]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	dc05      	bgt.n	801b7d8 <__sflush_r+0x20>
 801b7cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	dc02      	bgt.n	801b7d8 <__sflush_r+0x20>
 801b7d2:	2000      	movs	r0, #0
 801b7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b7da:	2e00      	cmp	r6, #0
 801b7dc:	d0f9      	beq.n	801b7d2 <__sflush_r+0x1a>
 801b7de:	2300      	movs	r3, #0
 801b7e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b7e4:	682f      	ldr	r7, [r5, #0]
 801b7e6:	6a21      	ldr	r1, [r4, #32]
 801b7e8:	602b      	str	r3, [r5, #0]
 801b7ea:	d032      	beq.n	801b852 <__sflush_r+0x9a>
 801b7ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b7ee:	89a3      	ldrh	r3, [r4, #12]
 801b7f0:	075a      	lsls	r2, r3, #29
 801b7f2:	d505      	bpl.n	801b800 <__sflush_r+0x48>
 801b7f4:	6863      	ldr	r3, [r4, #4]
 801b7f6:	1ac0      	subs	r0, r0, r3
 801b7f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b7fa:	b10b      	cbz	r3, 801b800 <__sflush_r+0x48>
 801b7fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b7fe:	1ac0      	subs	r0, r0, r3
 801b800:	2300      	movs	r3, #0
 801b802:	4602      	mov	r2, r0
 801b804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b806:	6a21      	ldr	r1, [r4, #32]
 801b808:	4628      	mov	r0, r5
 801b80a:	47b0      	blx	r6
 801b80c:	1c43      	adds	r3, r0, #1
 801b80e:	89a3      	ldrh	r3, [r4, #12]
 801b810:	d106      	bne.n	801b820 <__sflush_r+0x68>
 801b812:	6829      	ldr	r1, [r5, #0]
 801b814:	291d      	cmp	r1, #29
 801b816:	d82b      	bhi.n	801b870 <__sflush_r+0xb8>
 801b818:	4a29      	ldr	r2, [pc, #164]	; (801b8c0 <__sflush_r+0x108>)
 801b81a:	410a      	asrs	r2, r1
 801b81c:	07d6      	lsls	r6, r2, #31
 801b81e:	d427      	bmi.n	801b870 <__sflush_r+0xb8>
 801b820:	2200      	movs	r2, #0
 801b822:	6062      	str	r2, [r4, #4]
 801b824:	04d9      	lsls	r1, r3, #19
 801b826:	6922      	ldr	r2, [r4, #16]
 801b828:	6022      	str	r2, [r4, #0]
 801b82a:	d504      	bpl.n	801b836 <__sflush_r+0x7e>
 801b82c:	1c42      	adds	r2, r0, #1
 801b82e:	d101      	bne.n	801b834 <__sflush_r+0x7c>
 801b830:	682b      	ldr	r3, [r5, #0]
 801b832:	b903      	cbnz	r3, 801b836 <__sflush_r+0x7e>
 801b834:	6560      	str	r0, [r4, #84]	; 0x54
 801b836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b838:	602f      	str	r7, [r5, #0]
 801b83a:	2900      	cmp	r1, #0
 801b83c:	d0c9      	beq.n	801b7d2 <__sflush_r+0x1a>
 801b83e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b842:	4299      	cmp	r1, r3
 801b844:	d002      	beq.n	801b84c <__sflush_r+0x94>
 801b846:	4628      	mov	r0, r5
 801b848:	f7ff fc82 	bl	801b150 <_free_r>
 801b84c:	2000      	movs	r0, #0
 801b84e:	6360      	str	r0, [r4, #52]	; 0x34
 801b850:	e7c0      	b.n	801b7d4 <__sflush_r+0x1c>
 801b852:	2301      	movs	r3, #1
 801b854:	4628      	mov	r0, r5
 801b856:	47b0      	blx	r6
 801b858:	1c41      	adds	r1, r0, #1
 801b85a:	d1c8      	bne.n	801b7ee <__sflush_r+0x36>
 801b85c:	682b      	ldr	r3, [r5, #0]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d0c5      	beq.n	801b7ee <__sflush_r+0x36>
 801b862:	2b1d      	cmp	r3, #29
 801b864:	d001      	beq.n	801b86a <__sflush_r+0xb2>
 801b866:	2b16      	cmp	r3, #22
 801b868:	d101      	bne.n	801b86e <__sflush_r+0xb6>
 801b86a:	602f      	str	r7, [r5, #0]
 801b86c:	e7b1      	b.n	801b7d2 <__sflush_r+0x1a>
 801b86e:	89a3      	ldrh	r3, [r4, #12]
 801b870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b874:	81a3      	strh	r3, [r4, #12]
 801b876:	e7ad      	b.n	801b7d4 <__sflush_r+0x1c>
 801b878:	690f      	ldr	r7, [r1, #16]
 801b87a:	2f00      	cmp	r7, #0
 801b87c:	d0a9      	beq.n	801b7d2 <__sflush_r+0x1a>
 801b87e:	0793      	lsls	r3, r2, #30
 801b880:	680e      	ldr	r6, [r1, #0]
 801b882:	bf08      	it	eq
 801b884:	694b      	ldreq	r3, [r1, #20]
 801b886:	600f      	str	r7, [r1, #0]
 801b888:	bf18      	it	ne
 801b88a:	2300      	movne	r3, #0
 801b88c:	eba6 0807 	sub.w	r8, r6, r7
 801b890:	608b      	str	r3, [r1, #8]
 801b892:	f1b8 0f00 	cmp.w	r8, #0
 801b896:	dd9c      	ble.n	801b7d2 <__sflush_r+0x1a>
 801b898:	6a21      	ldr	r1, [r4, #32]
 801b89a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b89c:	4643      	mov	r3, r8
 801b89e:	463a      	mov	r2, r7
 801b8a0:	4628      	mov	r0, r5
 801b8a2:	47b0      	blx	r6
 801b8a4:	2800      	cmp	r0, #0
 801b8a6:	dc06      	bgt.n	801b8b6 <__sflush_r+0xfe>
 801b8a8:	89a3      	ldrh	r3, [r4, #12]
 801b8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b8ae:	81a3      	strh	r3, [r4, #12]
 801b8b0:	f04f 30ff 	mov.w	r0, #4294967295
 801b8b4:	e78e      	b.n	801b7d4 <__sflush_r+0x1c>
 801b8b6:	4407      	add	r7, r0
 801b8b8:	eba8 0800 	sub.w	r8, r8, r0
 801b8bc:	e7e9      	b.n	801b892 <__sflush_r+0xda>
 801b8be:	bf00      	nop
 801b8c0:	dfbffffe 	.word	0xdfbffffe

0801b8c4 <_fflush_r>:
 801b8c4:	b538      	push	{r3, r4, r5, lr}
 801b8c6:	690b      	ldr	r3, [r1, #16]
 801b8c8:	4605      	mov	r5, r0
 801b8ca:	460c      	mov	r4, r1
 801b8cc:	b913      	cbnz	r3, 801b8d4 <_fflush_r+0x10>
 801b8ce:	2500      	movs	r5, #0
 801b8d0:	4628      	mov	r0, r5
 801b8d2:	bd38      	pop	{r3, r4, r5, pc}
 801b8d4:	b118      	cbz	r0, 801b8de <_fflush_r+0x1a>
 801b8d6:	6a03      	ldr	r3, [r0, #32]
 801b8d8:	b90b      	cbnz	r3, 801b8de <_fflush_r+0x1a>
 801b8da:	f7ff fa0b 	bl	801acf4 <__sinit>
 801b8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d0f3      	beq.n	801b8ce <_fflush_r+0xa>
 801b8e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b8e8:	07d0      	lsls	r0, r2, #31
 801b8ea:	d404      	bmi.n	801b8f6 <_fflush_r+0x32>
 801b8ec:	0599      	lsls	r1, r3, #22
 801b8ee:	d402      	bmi.n	801b8f6 <_fflush_r+0x32>
 801b8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b8f2:	f7ff fc2b 	bl	801b14c <__retarget_lock_acquire_recursive>
 801b8f6:	4628      	mov	r0, r5
 801b8f8:	4621      	mov	r1, r4
 801b8fa:	f7ff ff5d 	bl	801b7b8 <__sflush_r>
 801b8fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b900:	07da      	lsls	r2, r3, #31
 801b902:	4605      	mov	r5, r0
 801b904:	d4e4      	bmi.n	801b8d0 <_fflush_r+0xc>
 801b906:	89a3      	ldrh	r3, [r4, #12]
 801b908:	059b      	lsls	r3, r3, #22
 801b90a:	d4e1      	bmi.n	801b8d0 <_fflush_r+0xc>
 801b90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b90e:	f7ff fc1e 	bl	801b14e <__retarget_lock_release_recursive>
 801b912:	e7dd      	b.n	801b8d0 <_fflush_r+0xc>

0801b914 <__swhatbuf_r>:
 801b914:	b570      	push	{r4, r5, r6, lr}
 801b916:	460c      	mov	r4, r1
 801b918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b91c:	2900      	cmp	r1, #0
 801b91e:	b096      	sub	sp, #88	; 0x58
 801b920:	4615      	mov	r5, r2
 801b922:	461e      	mov	r6, r3
 801b924:	da0d      	bge.n	801b942 <__swhatbuf_r+0x2e>
 801b926:	89a3      	ldrh	r3, [r4, #12]
 801b928:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b92c:	f04f 0100 	mov.w	r1, #0
 801b930:	bf0c      	ite	eq
 801b932:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b936:	2340      	movne	r3, #64	; 0x40
 801b938:	2000      	movs	r0, #0
 801b93a:	6031      	str	r1, [r6, #0]
 801b93c:	602b      	str	r3, [r5, #0]
 801b93e:	b016      	add	sp, #88	; 0x58
 801b940:	bd70      	pop	{r4, r5, r6, pc}
 801b942:	466a      	mov	r2, sp
 801b944:	f000 f862 	bl	801ba0c <_fstat_r>
 801b948:	2800      	cmp	r0, #0
 801b94a:	dbec      	blt.n	801b926 <__swhatbuf_r+0x12>
 801b94c:	9901      	ldr	r1, [sp, #4]
 801b94e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b952:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b956:	4259      	negs	r1, r3
 801b958:	4159      	adcs	r1, r3
 801b95a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b95e:	e7eb      	b.n	801b938 <__swhatbuf_r+0x24>

0801b960 <__smakebuf_r>:
 801b960:	898b      	ldrh	r3, [r1, #12]
 801b962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b964:	079d      	lsls	r5, r3, #30
 801b966:	4606      	mov	r6, r0
 801b968:	460c      	mov	r4, r1
 801b96a:	d507      	bpl.n	801b97c <__smakebuf_r+0x1c>
 801b96c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b970:	6023      	str	r3, [r4, #0]
 801b972:	6123      	str	r3, [r4, #16]
 801b974:	2301      	movs	r3, #1
 801b976:	6163      	str	r3, [r4, #20]
 801b978:	b002      	add	sp, #8
 801b97a:	bd70      	pop	{r4, r5, r6, pc}
 801b97c:	ab01      	add	r3, sp, #4
 801b97e:	466a      	mov	r2, sp
 801b980:	f7ff ffc8 	bl	801b914 <__swhatbuf_r>
 801b984:	9900      	ldr	r1, [sp, #0]
 801b986:	4605      	mov	r5, r0
 801b988:	4630      	mov	r0, r6
 801b98a:	f7ff f8ad 	bl	801aae8 <_malloc_r>
 801b98e:	b948      	cbnz	r0, 801b9a4 <__smakebuf_r+0x44>
 801b990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b994:	059a      	lsls	r2, r3, #22
 801b996:	d4ef      	bmi.n	801b978 <__smakebuf_r+0x18>
 801b998:	f023 0303 	bic.w	r3, r3, #3
 801b99c:	f043 0302 	orr.w	r3, r3, #2
 801b9a0:	81a3      	strh	r3, [r4, #12]
 801b9a2:	e7e3      	b.n	801b96c <__smakebuf_r+0xc>
 801b9a4:	89a3      	ldrh	r3, [r4, #12]
 801b9a6:	6020      	str	r0, [r4, #0]
 801b9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b9ac:	81a3      	strh	r3, [r4, #12]
 801b9ae:	9b00      	ldr	r3, [sp, #0]
 801b9b0:	6163      	str	r3, [r4, #20]
 801b9b2:	9b01      	ldr	r3, [sp, #4]
 801b9b4:	6120      	str	r0, [r4, #16]
 801b9b6:	b15b      	cbz	r3, 801b9d0 <__smakebuf_r+0x70>
 801b9b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b9bc:	4630      	mov	r0, r6
 801b9be:	f000 f837 	bl	801ba30 <_isatty_r>
 801b9c2:	b128      	cbz	r0, 801b9d0 <__smakebuf_r+0x70>
 801b9c4:	89a3      	ldrh	r3, [r4, #12]
 801b9c6:	f023 0303 	bic.w	r3, r3, #3
 801b9ca:	f043 0301 	orr.w	r3, r3, #1
 801b9ce:	81a3      	strh	r3, [r4, #12]
 801b9d0:	89a3      	ldrh	r3, [r4, #12]
 801b9d2:	431d      	orrs	r5, r3
 801b9d4:	81a5      	strh	r5, [r4, #12]
 801b9d6:	e7cf      	b.n	801b978 <__smakebuf_r+0x18>

0801b9d8 <memmove>:
 801b9d8:	4288      	cmp	r0, r1
 801b9da:	b510      	push	{r4, lr}
 801b9dc:	eb01 0402 	add.w	r4, r1, r2
 801b9e0:	d902      	bls.n	801b9e8 <memmove+0x10>
 801b9e2:	4284      	cmp	r4, r0
 801b9e4:	4623      	mov	r3, r4
 801b9e6:	d807      	bhi.n	801b9f8 <memmove+0x20>
 801b9e8:	1e43      	subs	r3, r0, #1
 801b9ea:	42a1      	cmp	r1, r4
 801b9ec:	d008      	beq.n	801ba00 <memmove+0x28>
 801b9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b9f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b9f6:	e7f8      	b.n	801b9ea <memmove+0x12>
 801b9f8:	4402      	add	r2, r0
 801b9fa:	4601      	mov	r1, r0
 801b9fc:	428a      	cmp	r2, r1
 801b9fe:	d100      	bne.n	801ba02 <memmove+0x2a>
 801ba00:	bd10      	pop	{r4, pc}
 801ba02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ba06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ba0a:	e7f7      	b.n	801b9fc <memmove+0x24>

0801ba0c <_fstat_r>:
 801ba0c:	b538      	push	{r3, r4, r5, lr}
 801ba0e:	4d07      	ldr	r5, [pc, #28]	; (801ba2c <_fstat_r+0x20>)
 801ba10:	2300      	movs	r3, #0
 801ba12:	4604      	mov	r4, r0
 801ba14:	4608      	mov	r0, r1
 801ba16:	4611      	mov	r1, r2
 801ba18:	602b      	str	r3, [r5, #0]
 801ba1a:	f7e5 fb34 	bl	8001086 <_fstat>
 801ba1e:	1c43      	adds	r3, r0, #1
 801ba20:	d102      	bne.n	801ba28 <_fstat_r+0x1c>
 801ba22:	682b      	ldr	r3, [r5, #0]
 801ba24:	b103      	cbz	r3, 801ba28 <_fstat_r+0x1c>
 801ba26:	6023      	str	r3, [r4, #0]
 801ba28:	bd38      	pop	{r3, r4, r5, pc}
 801ba2a:	bf00      	nop
 801ba2c:	24007cdc 	.word	0x24007cdc

0801ba30 <_isatty_r>:
 801ba30:	b538      	push	{r3, r4, r5, lr}
 801ba32:	4d06      	ldr	r5, [pc, #24]	; (801ba4c <_isatty_r+0x1c>)
 801ba34:	2300      	movs	r3, #0
 801ba36:	4604      	mov	r4, r0
 801ba38:	4608      	mov	r0, r1
 801ba3a:	602b      	str	r3, [r5, #0]
 801ba3c:	f7e5 fb33 	bl	80010a6 <_isatty>
 801ba40:	1c43      	adds	r3, r0, #1
 801ba42:	d102      	bne.n	801ba4a <_isatty_r+0x1a>
 801ba44:	682b      	ldr	r3, [r5, #0]
 801ba46:	b103      	cbz	r3, 801ba4a <_isatty_r+0x1a>
 801ba48:	6023      	str	r3, [r4, #0]
 801ba4a:	bd38      	pop	{r3, r4, r5, pc}
 801ba4c:	24007cdc 	.word	0x24007cdc

0801ba50 <memcpy>:
 801ba50:	440a      	add	r2, r1
 801ba52:	4291      	cmp	r1, r2
 801ba54:	f100 33ff 	add.w	r3, r0, #4294967295
 801ba58:	d100      	bne.n	801ba5c <memcpy+0xc>
 801ba5a:	4770      	bx	lr
 801ba5c:	b510      	push	{r4, lr}
 801ba5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba62:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ba66:	4291      	cmp	r1, r2
 801ba68:	d1f9      	bne.n	801ba5e <memcpy+0xe>
 801ba6a:	bd10      	pop	{r4, pc}

0801ba6c <_realloc_r>:
 801ba6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba70:	4680      	mov	r8, r0
 801ba72:	4614      	mov	r4, r2
 801ba74:	460e      	mov	r6, r1
 801ba76:	b921      	cbnz	r1, 801ba82 <_realloc_r+0x16>
 801ba78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba7c:	4611      	mov	r1, r2
 801ba7e:	f7ff b833 	b.w	801aae8 <_malloc_r>
 801ba82:	b92a      	cbnz	r2, 801ba90 <_realloc_r+0x24>
 801ba84:	f7ff fb64 	bl	801b150 <_free_r>
 801ba88:	4625      	mov	r5, r4
 801ba8a:	4628      	mov	r0, r5
 801ba8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba90:	f000 f81b 	bl	801baca <_malloc_usable_size_r>
 801ba94:	4284      	cmp	r4, r0
 801ba96:	4607      	mov	r7, r0
 801ba98:	d802      	bhi.n	801baa0 <_realloc_r+0x34>
 801ba9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ba9e:	d812      	bhi.n	801bac6 <_realloc_r+0x5a>
 801baa0:	4621      	mov	r1, r4
 801baa2:	4640      	mov	r0, r8
 801baa4:	f7ff f820 	bl	801aae8 <_malloc_r>
 801baa8:	4605      	mov	r5, r0
 801baaa:	2800      	cmp	r0, #0
 801baac:	d0ed      	beq.n	801ba8a <_realloc_r+0x1e>
 801baae:	42bc      	cmp	r4, r7
 801bab0:	4622      	mov	r2, r4
 801bab2:	4631      	mov	r1, r6
 801bab4:	bf28      	it	cs
 801bab6:	463a      	movcs	r2, r7
 801bab8:	f7ff ffca 	bl	801ba50 <memcpy>
 801babc:	4631      	mov	r1, r6
 801babe:	4640      	mov	r0, r8
 801bac0:	f7ff fb46 	bl	801b150 <_free_r>
 801bac4:	e7e1      	b.n	801ba8a <_realloc_r+0x1e>
 801bac6:	4635      	mov	r5, r6
 801bac8:	e7df      	b.n	801ba8a <_realloc_r+0x1e>

0801baca <_malloc_usable_size_r>:
 801baca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bace:	1f18      	subs	r0, r3, #4
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	bfbc      	itt	lt
 801bad4:	580b      	ldrlt	r3, [r1, r0]
 801bad6:	18c0      	addlt	r0, r0, r3
 801bad8:	4770      	bx	lr
	...

0801badc <_init>:
 801badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bade:	bf00      	nop
 801bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bae2:	bc08      	pop	{r3}
 801bae4:	469e      	mov	lr, r3
 801bae6:	4770      	bx	lr

0801bae8 <_fini>:
 801bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801baea:	bf00      	nop
 801baec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801baee:	bc08      	pop	{r3}
 801baf0:	469e      	mov	lr, r3
 801baf2:	4770      	bx	lr
