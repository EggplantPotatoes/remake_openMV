
remake_openMV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000147e0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f428  08014a78  08014a78  00024a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08043ea0  08043ea0  00053ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08043ea4  08043ea4  00053ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000158  24000000  08043ea8  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00009130  24000158  08044000  00060158  2**2
                  ALLOC
  7 ._user_heap_stack 00006000  24009288  08044000  00069288  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00060158  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00060186  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021a5c  00000000  00000000  000601c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000057d7  00000000  00000000  00081c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019f0  00000000  00000000  00087400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000136a  00000000  00000000  00088df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e5b3  00000000  00000000  0008a15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b8a3  00000000  00000000  000c870d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ffae  00000000  00000000  000f3fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006838  00000000  00000000  00253f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  0025a798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000158 	.word	0x24000158
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08014a60 	.word	0x08014a60

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400015c 	.word	0x2400015c
 80002d4:	08014a60 	.word	0x08014a60

080002d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002de:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <MX_DMA_Init+0x3c>)
 80002e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80002e4:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <MX_DMA_Init+0x3c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_DMA_Init+0x3c>)
 80002f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	200b      	movs	r0, #11
 8000302:	f000 fdd0 	bl	8000ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000306:	200b      	movs	r0, #11
 8000308:	f000 fde7 	bl	8000eda <HAL_NVIC_EnableIRQ>

}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	58024400 	.word	0x58024400

08000318 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	; 0x28
 800031c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	4b4f      	ldr	r3, [pc, #316]	; (800046c <MX_GPIO_Init+0x154>)
 8000330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000334:	4a4d      	ldr	r2, [pc, #308]	; (800046c <MX_GPIO_Init+0x154>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033e:	4b4b      	ldr	r3, [pc, #300]	; (800046c <MX_GPIO_Init+0x154>)
 8000340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000344:	f003 0304 	and.w	r3, r3, #4
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034c:	4b47      	ldr	r3, [pc, #284]	; (800046c <MX_GPIO_Init+0x154>)
 800034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000352:	4a46      	ldr	r2, [pc, #280]	; (800046c <MX_GPIO_Init+0x154>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035c:	4b43      	ldr	r3, [pc, #268]	; (800046c <MX_GPIO_Init+0x154>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036a:	4b40      	ldr	r3, [pc, #256]	; (800046c <MX_GPIO_Init+0x154>)
 800036c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000370:	4a3e      	ldr	r2, [pc, #248]	; (800046c <MX_GPIO_Init+0x154>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800037a:	4b3c      	ldr	r3, [pc, #240]	; (800046c <MX_GPIO_Init+0x154>)
 800037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000380:	f003 0308 	and.w	r3, r3, #8
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000388:	4b38      	ldr	r3, [pc, #224]	; (800046c <MX_GPIO_Init+0x154>)
 800038a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800038e:	4a37      	ldr	r2, [pc, #220]	; (800046c <MX_GPIO_Init+0x154>)
 8000390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000398:	4b34      	ldr	r3, [pc, #208]	; (800046c <MX_GPIO_Init+0x154>)
 800039a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a6:	4b31      	ldr	r3, [pc, #196]	; (800046c <MX_GPIO_Init+0x154>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	4a2f      	ldr	r2, [pc, #188]	; (800046c <MX_GPIO_Init+0x154>)
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003b6:	4b2d      	ldr	r3, [pc, #180]	; (800046c <MX_GPIO_Init+0x154>)
 80003b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003bc:	f003 0302 	and.w	r3, r3, #2
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2107      	movs	r1, #7
 80003c8:	4829      	ldr	r0, [pc, #164]	; (8000470 <MX_GPIO_Init+0x158>)
 80003ca:	f002 fe59 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80003d4:	4827      	ldr	r0, [pc, #156]	; (8000474 <MX_GPIO_Init+0x15c>)
 80003d6:	f002 fe53 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2120      	movs	r1, #32
 80003de:	4826      	ldr	r0, [pc, #152]	; (8000478 <MX_GPIO_Init+0x160>)
 80003e0:	f002 fe4e 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ea:	4824      	ldr	r0, [pc, #144]	; (800047c <MX_GPIO_Init+0x164>)
 80003ec:	f002 fe48 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80003f0:	2307      	movs	r3, #7
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2300      	movs	r3, #0
 80003fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4619      	mov	r1, r3
 8000406:	481a      	ldr	r0, [pc, #104]	; (8000470 <MX_GPIO_Init+0x158>)
 8000408:	f002 fc8a 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RST_Pin;
 800040c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2300      	movs	r3, #0
 800041c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	4619      	mov	r1, r3
 8000424:	4813      	ldr	r0, [pc, #76]	; (8000474 <MX_GPIO_Init+0x15c>)
 8000426:	f002 fc7b 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 800042a:	2320      	movs	r3, #32
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2300      	movs	r3, #0
 8000438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 800043a:	f107 0314 	add.w	r3, r7, #20
 800043e:	4619      	mov	r1, r3
 8000440:	480d      	ldr	r0, [pc, #52]	; (8000478 <MX_GPIO_Init+0x160>)
 8000442:	f002 fc6d 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4619      	mov	r1, r3
 800045e:	4807      	ldr	r0, [pc, #28]	; (800047c <MX_GPIO_Init+0x164>)
 8000460:	f002 fc5e 	bl	8002d20 <HAL_GPIO_Init>

}
 8000464:	bf00      	nop
 8000466:	3728      	adds	r7, #40	; 0x28
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	58024400 	.word	0x58024400
 8000470:	58020800 	.word	0x58020800
 8000474:	58020c00 	.word	0x58020c00
 8000478:	58020000 	.word	0x58020000
 800047c:	58020400 	.word	0x58020400

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fb72 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f82e 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f7ff ff44 	bl	8000318 <MX_GPIO_Init>
  MX_DMA_Init();
 8000490:	f7ff ff22 	bl	80002d8 <MX_DMA_Init>
  MX_SPI2_Init();
 8000494:	f000 f95c 	bl	8000750 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000498:	f013 fda0 	bl	8013fdc <MX_USB_DEVICE_Init>
  MX_SDMMC1_SD_Init();
 800049c:	f000 f8a6 	bl	80005ec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80004a0:	f00c f916 	bl	800c6d0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80004a4:	f013 fb08 	bl	8013ab8 <lcd_init>
  FatFs_read_Check();
 80004a8:	f013 f8ae 	bl	8013608 <FatFs_read_Check>
  FatFs_write_Check();
 80004ac:	f013 f8f6 	bl	801369c <FatFs_write_Check>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
 80004b0:	2101      	movs	r1, #1
 80004b2:	480c      	ldr	r0, [pc, #48]	; (80004e4 <main+0x64>)
 80004b4:	f002 fdfd 	bl	80030b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004bc:	f000 fbe8 	bl	8000c90 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_G_GPIO_Port,LED_G_Pin);
 80004c0:	2102      	movs	r1, #2
 80004c2:	4808      	ldr	r0, [pc, #32]	; (80004e4 <main+0x64>)
 80004c4:	f002 fdf5 	bl	80030b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004cc:	f000 fbe0 	bl	8000c90 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);
 80004d0:	2104      	movs	r1, #4
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <main+0x64>)
 80004d4:	f002 fded 	bl	80030b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004dc:	f000 fbd8 	bl	8000c90 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
 80004e0:	e7e6      	b.n	80004b0 <main+0x30>
 80004e2:	bf00      	nop
 80004e4:	58020800 	.word	0x58020800

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	; 0x70
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f2:	224c      	movs	r2, #76	; 0x4c
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f014 fa86 	bl	8014a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2220      	movs	r2, #32
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f014 fa80 	bl	8014a08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000508:	2002      	movs	r0, #2
 800050a:	f004 f8d3 	bl	80046b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <SystemClock_Config+0xf0>)
 8000514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000516:	4a30      	ldr	r2, [pc, #192]	; (80005d8 <SystemClock_Config+0xf0>)
 8000518:	f023 0301 	bic.w	r3, r3, #1
 800051c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800051e:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <SystemClock_Config+0xf0>)
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <SystemClock_Config+0xf4>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a2b      	ldr	r2, [pc, #172]	; (80005dc <SystemClock_Config+0xf4>)
 800052e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <SystemClock_Config+0xf4>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000540:	bf00      	nop
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <SystemClock_Config+0xf4>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800054a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800054e:	d1f8      	bne.n	8000542 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000550:	2321      	movs	r3, #33	; 0x21
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	2302      	movs	r3, #2
 8000564:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000566:	2303      	movs	r3, #3
 8000568:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 200;
 800056a:	23c8      	movs	r3, #200	; 0xc8
 800056c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800056e:	2302      	movs	r3, #2
 8000570:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000572:	2308      	movs	r3, #8
 8000574:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000576:	2302      	movs	r3, #2
 8000578:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800057a:	2308      	movs	r3, #8
 800057c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800057e:	2300      	movs	r3, #0
 8000580:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f8dc 	bl	8004748 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000596:	f000 f823 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	233f      	movs	r3, #63	; 0x3f
 800059c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005a6:	2308      	movs	r3, #8
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005aa:	2340      	movs	r3, #64	; 0x40
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ae:	2340      	movs	r3, #64	; 0x40
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005b8:	2340      	movs	r3, #64	; 0x40
 80005ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2102      	movs	r1, #2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f004 fd1b 	bl	8004ffc <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80005cc:	f000 f808 	bl	80005e0 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3770      	adds	r7, #112	; 0x70
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	58000400 	.word	0x58000400
 80005dc:	58024800 	.word	0x58024800

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <Error_Handler+0x8>
	...

080005ec <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_SDMMC1_SD_Init+0x40>)
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <MX_SDMMC1_SD_Init+0x44>)
 80005f4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_SDMMC1_SD_Init+0x40>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_SDMMC1_SD_Init+0x40>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_SDMMC1_SD_Init+0x40>)
 8000604:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000608:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_SDMMC1_SD_Init+0x40>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_SDMMC1_SD_Init+0x40>)
 8000612:	2204      	movs	r2, #4
 8000614:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_SDMMC1_SD_Init+0x40>)
 8000618:	f007 fd64 	bl	80080e4 <HAL_SD_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000622:	f7ff ffdd 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	24000174 	.word	0x24000174
 8000630:	52007000 	.word	0x52007000

08000634 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0bc      	sub	sp, #240	; 0xf0
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	22c0      	movs	r2, #192	; 0xc0
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f014 f9d7 	bl	8014a08 <memset>
  if(sdHandle->Instance==SDMMC1)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a38      	ldr	r2, [pc, #224]	; (8000740 <HAL_SD_MspInit+0x10c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d169      	bne.n	8000738 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000664:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000668:	f04f 0300 	mov.w	r3, #0
 800066c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000670:	2300      	movs	r3, #0
 8000672:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	4618      	mov	r0, r3
 800067a:	f005 f835 	bl	80056e8 <HAL_RCCEx_PeriphCLKConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000684:	f7ff ffac 	bl	80005e0 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000688:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <HAL_SD_MspInit+0x110>)
 800068a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800068e:	4a2d      	ldr	r2, [pc, #180]	; (8000744 <HAL_SD_MspInit+0x110>)
 8000690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000694:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <HAL_SD_MspInit+0x110>)
 800069a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800069e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b27      	ldr	r3, [pc, #156]	; (8000744 <HAL_SD_MspInit+0x110>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ac:	4a25      	ldr	r2, [pc, #148]	; (8000744 <HAL_SD_MspInit+0x110>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <HAL_SD_MspInit+0x110>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <HAL_SD_MspInit+0x110>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ca:	4a1e      	ldr	r2, [pc, #120]	; (8000744 <HAL_SD_MspInit+0x110>)
 80006cc:	f043 0308 	orr.w	r3, r3, #8
 80006d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <HAL_SD_MspInit+0x110>)
 80006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80006e2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80006e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80006fc:	230c      	movs	r3, #12
 80006fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000706:	4619      	mov	r1, r3
 8000708:	480f      	ldr	r0, [pc, #60]	; (8000748 <HAL_SD_MspInit+0x114>)
 800070a:	f002 fb09 	bl	8002d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800070e:	2304      	movs	r3, #4
 8000710:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000726:	230c      	movs	r3, #12
 8000728:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000730:	4619      	mov	r1, r3
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_SD_MspInit+0x118>)
 8000734:	f002 faf4 	bl	8002d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000738:	bf00      	nop
 800073a:	37f0      	adds	r7, #240	; 0xf0
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	52007000 	.word	0x52007000
 8000744:	58024400 	.word	0x58024400
 8000748:	58020800 	.word	0x58020800
 800074c:	58020c00 	.word	0x58020c00

08000750 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <MX_SPI2_Init+0xa8>)
 8000756:	4a29      	ldr	r2, [pc, #164]	; (80007fc <MX_SPI2_Init+0xac>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <MX_SPI2_Init+0xa8>)
 800075c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000760:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000762:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <MX_SPI2_Init+0xa8>)
 8000764:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000768:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_SPI2_Init+0xa8>)
 800076c:	2207      	movs	r2, #7
 800076e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_SPI2_Init+0xa8>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_SPI2_Init+0xa8>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_SPI2_Init+0xa8>)
 800077e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000782:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_SPI2_Init+0xa8>)
 8000786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800078a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_SPI2_Init+0xa8>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_SPI2_Init+0xa8>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_SPI2_Init+0xa8>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_SPI2_Init+0xa8>)
 80007e4:	f009 f830 	bl	8009848 <HAL_SPI_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80007ee:	f7ff fef7 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	240001f0 	.word	0x240001f0
 80007fc:	40003800 	.word	0x40003800

08000800 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0ba      	sub	sp, #232	; 0xe8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	22c0      	movs	r2, #192	; 0xc0
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f014 f8f1 	bl	8014a08 <memset>
  if(spiHandle->Instance==SPI2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a41      	ldr	r2, [pc, #260]	; (8000930 <HAL_SPI_MspInit+0x130>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d17a      	bne.n	8000926 <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000834:	f04f 0300 	mov.w	r3, #0
 8000838:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800083c:	2300      	movs	r3, #0
 800083e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4618      	mov	r0, r3
 8000846:	f004 ff4f 	bl	80056e8 <HAL_RCCEx_PeriphCLKConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000850:	f7ff fec6 	bl	80005e0 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000854:	4b37      	ldr	r3, [pc, #220]	; (8000934 <HAL_SPI_MspInit+0x134>)
 8000856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800085a:	4a36      	ldr	r2, [pc, #216]	; (8000934 <HAL_SPI_MspInit+0x134>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000864:	4b33      	ldr	r3, [pc, #204]	; (8000934 <HAL_SPI_MspInit+0x134>)
 8000866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b30      	ldr	r3, [pc, #192]	; (8000934 <HAL_SPI_MspInit+0x134>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000878:	4a2e      	ldr	r2, [pc, #184]	; (8000934 <HAL_SPI_MspInit+0x134>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000882:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <HAL_SPI_MspInit+0x134>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000890:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008aa:	2305      	movs	r3, #5
 80008ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4820      	ldr	r0, [pc, #128]	; (8000938 <HAL_SPI_MspInit+0x138>)
 80008b8:	f002 fa32 	bl	8002d20 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008be:	4a20      	ldr	r2, [pc, #128]	; (8000940 <HAL_SPI_MspInit+0x140>)
 80008c0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008c4:	2228      	movs	r2, #40	; 0x28
 80008c6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008ca:	2240      	movs	r2, #64	; 0x40
 80008cc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008da:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80008fa:	4810      	ldr	r0, [pc, #64]	; (800093c <HAL_SPI_MspInit+0x13c>)
 80008fc:	f000 fb08 	bl	8000f10 <HAL_DMA_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8000906:	f7ff fe6b 	bl	80005e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a0b      	ldr	r2, [pc, #44]	; (800093c <HAL_SPI_MspInit+0x13c>)
 800090e:	679a      	str	r2, [r3, #120]	; 0x78
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_SPI_MspInit+0x13c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2024      	movs	r0, #36	; 0x24
 800091c:	f000 fac3 	bl	8000ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000920:	2024      	movs	r0, #36	; 0x24
 8000922:	f000 fada 	bl	8000eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000926:	bf00      	nop
 8000928:	37e8      	adds	r7, #232	; 0xe8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40003800 	.word	0x40003800
 8000934:	58024400 	.word	0x58024400
 8000938:	58020400 	.word	0x58020400
 800093c:	24000278 	.word	0x24000278
 8000940:	40020010 	.word	0x40020010

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_MspInit+0x30>)
 800094c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000950:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x30>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x30>)
 800095c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	58024400 	.word	0x58024400

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f944 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <DMA1_Stream0_IRQHandler+0x10>)
 80009d2:	f001 f83f 	bl	8001a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	24000278 	.word	0x24000278

080009e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <SPI2_IRQHandler+0x10>)
 80009e6:	f009 fa4f 	bl	8009e88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	240001f0 	.word	0x240001f0

080009f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <OTG_FS_IRQHandler+0x10>)
 80009fa:	f002 fccd 	bl	8003398 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	24000d04 	.word	0x24000d04

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b37      	ldr	r3, [pc, #220]	; (8000aec <SystemInit+0xe4>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a36      	ldr	r2, [pc, #216]	; (8000aec <SystemInit+0xe4>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a1c:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <SystemInit+0xe8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 030f 	and.w	r3, r3, #15
 8000a24:	2b06      	cmp	r3, #6
 8000a26:	d807      	bhi.n	8000a38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a28:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <SystemInit+0xe8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f023 030f 	bic.w	r3, r3, #15
 8000a30:	4a2f      	ldr	r2, [pc, #188]	; (8000af0 <SystemInit+0xe8>)
 8000a32:	f043 0307 	orr.w	r3, r3, #7
 8000a36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a38:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <SystemInit+0xec>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <SystemInit+0xec>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <SystemInit+0xec>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <SystemInit+0xec>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4929      	ldr	r1, [pc, #164]	; (8000af4 <SystemInit+0xec>)
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <SystemInit+0xf0>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <SystemInit+0xe8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d007      	beq.n	8000a72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <SystemInit+0xe8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f023 030f 	bic.w	r3, r3, #15
 8000a6a:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <SystemInit+0xe8>)
 8000a6c:	f043 0307 	orr.w	r3, r3, #7
 8000a70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <SystemInit+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <SystemInit+0xec>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <SystemInit+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <SystemInit+0xec>)
 8000a86:	4a1d      	ldr	r2, [pc, #116]	; (8000afc <SystemInit+0xf4>)
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <SystemInit+0xec>)
 8000a8c:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <SystemInit+0xf8>)
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <SystemInit+0xec>)
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <SystemInit+0xfc>)
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <SystemInit+0xec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <SystemInit+0xec>)
 8000a9e:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <SystemInit+0xfc>)
 8000aa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <SystemInit+0xec>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <SystemInit+0xec>)
 8000aaa:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <SystemInit+0xfc>)
 8000aac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <SystemInit+0xec>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <SystemInit+0xec>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <SystemInit+0xec>)
 8000aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000abe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <SystemInit+0xec>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <SystemInit+0x100>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <SystemInit+0x104>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ad2:	d202      	bcs.n	8000ada <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <SystemInit+0x108>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <SystemInit+0x10c>)
 8000adc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ae0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00
 8000af0:	52002000 	.word	0x52002000
 8000af4:	58024400 	.word	0x58024400
 8000af8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000afc:	02020200 	.word	0x02020200
 8000b00:	01ff0000 	.word	0x01ff0000
 8000b04:	01010280 	.word	0x01010280
 8000b08:	5c001000 	.word	0x5c001000
 8000b0c:	ffff0000 	.word	0xffff0000
 8000b10:	51008108 	.word	0x51008108
 8000b14:	52004000 	.word	0x52004000

08000b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b1c:	f7ff ff74 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	; (8000b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	; (8000b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f013 ff67 	bl	8014a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4a:	f7ff fc99 	bl	8000480 <main>
  bx  lr
 8000b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b58:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 8000b5c:	08043ea8 	.word	0x08043ea8
  ldr r2, =_sbss
 8000b60:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8000b64:	24009288 	.word	0x24009288

08000b68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC3_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b72:	2003      	movs	r0, #3
 8000b74:	f000 f98c 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b78:	f004 fbf6 	bl	8005368 <HAL_RCC_GetSysClockFreq>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_Init+0x68>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	0a1b      	lsrs	r3, r3, #8
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	4913      	ldr	r1, [pc, #76]	; (8000bd8 <HAL_Init+0x6c>)
 8000b8a:	5ccb      	ldrb	r3, [r1, r3]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	fa22 f303 	lsr.w	r3, r2, r3
 8000b94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_Init+0x68>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_Init+0x6c>)
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	f003 031f 	and.w	r3, r3, #31
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <HAL_Init+0x70>)
 8000bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_Init+0x74>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f000 f814 	bl	8000be4 <HAL_InitTick>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e002      	b.n	8000bcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc6:	f7ff febd 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	08014b4c 	.word	0x08014b4c
 8000bdc:	24000004 	.word	0x24000004
 8000be0:	24000000 	.word	0x24000000

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_InitTick+0x60>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e021      	b.n	8000c3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_InitTick+0x64>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_InitTick+0x60>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f971 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00e      	b.n	8000c3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d80a      	bhi.n	8000c3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f000 f93b 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_InitTick+0x68>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2400000c 	.word	0x2400000c
 8000c48:	24000000 	.word	0x24000000
 8000c4c:	24000008 	.word	0x24000008

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	2400000c 	.word	0x2400000c
 8000c74:	240002f0 	.word	0x240002f0

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	240002f0 	.word	0x240002f0

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c98:	f7ff ffee 	bl	8000c78 <HAL_GetTick>
 8000c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca8:	d005      	beq.n	8000cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_Delay+0x44>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb6:	bf00      	nop
 8000cb8:	f7ff ffde 	bl	8000c78 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8f7      	bhi.n	8000cb8 <HAL_Delay+0x28>
  {
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2400000c 	.word	0x2400000c

08000cd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetREVID+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	0c1b      	lsrs	r3, r3, #16
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	5c001000 	.word	0x5c001000

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <__NVIC_SetPriorityGrouping+0x40>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x40>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00
 8000d34:	05fa0000 	.word	0x05fa0000

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff29 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff40 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff90 	bl	8000de4 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5f 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff33 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa4 	bl	8000e4c <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff feae 	bl	8000c78 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e316      	b.n	8001556 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a66      	ldr	r2, [pc, #408]	; (80010c8 <HAL_DMA_Init+0x1b8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d04a      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a65      	ldr	r2, [pc, #404]	; (80010cc <HAL_DMA_Init+0x1bc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d045      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a63      	ldr	r2, [pc, #396]	; (80010d0 <HAL_DMA_Init+0x1c0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d040      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a62      	ldr	r2, [pc, #392]	; (80010d4 <HAL_DMA_Init+0x1c4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d03b      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a60      	ldr	r2, [pc, #384]	; (80010d8 <HAL_DMA_Init+0x1c8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d036      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a5f      	ldr	r2, [pc, #380]	; (80010dc <HAL_DMA_Init+0x1cc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d031      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a5d      	ldr	r2, [pc, #372]	; (80010e0 <HAL_DMA_Init+0x1d0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d02c      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a5c      	ldr	r2, [pc, #368]	; (80010e4 <HAL_DMA_Init+0x1d4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d027      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a5a      	ldr	r2, [pc, #360]	; (80010e8 <HAL_DMA_Init+0x1d8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d022      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a59      	ldr	r2, [pc, #356]	; (80010ec <HAL_DMA_Init+0x1dc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d01d      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a57      	ldr	r2, [pc, #348]	; (80010f0 <HAL_DMA_Init+0x1e0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d018      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a56      	ldr	r2, [pc, #344]	; (80010f4 <HAL_DMA_Init+0x1e4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d013      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a54      	ldr	r2, [pc, #336]	; (80010f8 <HAL_DMA_Init+0x1e8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00e      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a53      	ldr	r2, [pc, #332]	; (80010fc <HAL_DMA_Init+0x1ec>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d009      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a51      	ldr	r2, [pc, #324]	; (8001100 <HAL_DMA_Init+0x1f0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d004      	beq.n	8000fc8 <HAL_DMA_Init+0xb8>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a50      	ldr	r2, [pc, #320]	; (8001104 <HAL_DMA_Init+0x1f4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_DMA_Init+0xbc>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <HAL_DMA_Init+0xbe>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 813b 	beq.w	800124a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a37      	ldr	r2, [pc, #220]	; (80010c8 <HAL_DMA_Init+0x1b8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d04a      	beq.n	8001084 <HAL_DMA_Init+0x174>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a36      	ldr	r2, [pc, #216]	; (80010cc <HAL_DMA_Init+0x1bc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d045      	beq.n	8001084 <HAL_DMA_Init+0x174>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a34      	ldr	r2, [pc, #208]	; (80010d0 <HAL_DMA_Init+0x1c0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d040      	beq.n	8001084 <HAL_DMA_Init+0x174>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <HAL_DMA_Init+0x1c4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d03b      	beq.n	8001084 <HAL_DMA_Init+0x174>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <HAL_DMA_Init+0x1c8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d036      	beq.n	8001084 <HAL_DMA_Init+0x174>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a30      	ldr	r2, [pc, #192]	; (80010dc <HAL_DMA_Init+0x1cc>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d031      	beq.n	8001084 <HAL_DMA_Init+0x174>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2e      	ldr	r2, [pc, #184]	; (80010e0 <HAL_DMA_Init+0x1d0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d02c      	beq.n	8001084 <HAL_DMA_Init+0x174>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <HAL_DMA_Init+0x1d4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d027      	beq.n	8001084 <HAL_DMA_Init+0x174>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a2b      	ldr	r2, [pc, #172]	; (80010e8 <HAL_DMA_Init+0x1d8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d022      	beq.n	8001084 <HAL_DMA_Init+0x174>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a2a      	ldr	r2, [pc, #168]	; (80010ec <HAL_DMA_Init+0x1dc>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d01d      	beq.n	8001084 <HAL_DMA_Init+0x174>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a28      	ldr	r2, [pc, #160]	; (80010f0 <HAL_DMA_Init+0x1e0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d018      	beq.n	8001084 <HAL_DMA_Init+0x174>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_DMA_Init+0x1e4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d013      	beq.n	8001084 <HAL_DMA_Init+0x174>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <HAL_DMA_Init+0x1e8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00e      	beq.n	8001084 <HAL_DMA_Init+0x174>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a24      	ldr	r2, [pc, #144]	; (80010fc <HAL_DMA_Init+0x1ec>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d009      	beq.n	8001084 <HAL_DMA_Init+0x174>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_DMA_Init+0x1f0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d004      	beq.n	8001084 <HAL_DMA_Init+0x174>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a21      	ldr	r2, [pc, #132]	; (8001104 <HAL_DMA_Init+0x1f4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d108      	bne.n	8001096 <HAL_DMA_Init+0x186>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e007      	b.n	80010a6 <HAL_DMA_Init+0x196>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80010a6:	e02f      	b.n	8001108 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010a8:	f7ff fde6 	bl	8000c78 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d928      	bls.n	8001108 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2220      	movs	r2, #32
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2203      	movs	r2, #3
 80010c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e246      	b.n	8001556 <HAL_DMA_Init+0x646>
 80010c8:	40020010 	.word	0x40020010
 80010cc:	40020028 	.word	0x40020028
 80010d0:	40020040 	.word	0x40020040
 80010d4:	40020058 	.word	0x40020058
 80010d8:	40020070 	.word	0x40020070
 80010dc:	40020088 	.word	0x40020088
 80010e0:	400200a0 	.word	0x400200a0
 80010e4:	400200b8 	.word	0x400200b8
 80010e8:	40020410 	.word	0x40020410
 80010ec:	40020428 	.word	0x40020428
 80010f0:	40020440 	.word	0x40020440
 80010f4:	40020458 	.word	0x40020458
 80010f8:	40020470 	.word	0x40020470
 80010fc:	40020488 	.word	0x40020488
 8001100:	400204a0 	.word	0x400204a0
 8001104:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1c8      	bne.n	80010a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4b83      	ldr	r3, [pc, #524]	; (8001330 <HAL_DMA_Init+0x420>)
 8001122:	4013      	ands	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800112e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001146:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4313      	orrs	r3, r2
 8001152:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	2b04      	cmp	r3, #4
 800115a:	d107      	bne.n	800116c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	4313      	orrs	r3, r2
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4313      	orrs	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800116c:	4b71      	ldr	r3, [pc, #452]	; (8001334 <HAL_DMA_Init+0x424>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b71      	ldr	r3, [pc, #452]	; (8001338 <HAL_DMA_Init+0x428>)
 8001172:	4013      	ands	r3, r2
 8001174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001178:	d328      	bcc.n	80011cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b28      	cmp	r3, #40	; 0x28
 8001180:	d903      	bls.n	800118a <HAL_DMA_Init+0x27a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b2e      	cmp	r3, #46	; 0x2e
 8001188:	d917      	bls.n	80011ba <HAL_DMA_Init+0x2aa>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b3e      	cmp	r3, #62	; 0x3e
 8001190:	d903      	bls.n	800119a <HAL_DMA_Init+0x28a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b42      	cmp	r3, #66	; 0x42
 8001198:	d90f      	bls.n	80011ba <HAL_DMA_Init+0x2aa>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b46      	cmp	r3, #70	; 0x46
 80011a0:	d903      	bls.n	80011aa <HAL_DMA_Init+0x29a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b48      	cmp	r3, #72	; 0x48
 80011a8:	d907      	bls.n	80011ba <HAL_DMA_Init+0x2aa>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b4e      	cmp	r3, #78	; 0x4e
 80011b0:	d905      	bls.n	80011be <HAL_DMA_Init+0x2ae>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b52      	cmp	r3, #82	; 0x52
 80011b8:	d801      	bhi.n	80011be <HAL_DMA_Init+0x2ae>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_DMA_Init+0x2b0>
 80011be:	2300      	movs	r3, #0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f023 0307 	bic.w	r3, r3, #7
 80011e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d117      	bne.n	8001226 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00e      	beq.n	8001226 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f001 fbff 	bl	8002a0c <DMA_CheckFifoParam>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2240      	movs	r2, #64	; 0x40
 8001218:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e197      	b.n	8001556 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f001 fb3a 	bl	80028a8 <DMA_CalcBaseAndBitshift>
 8001234:	4603      	mov	r3, r0
 8001236:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	223f      	movs	r2, #63	; 0x3f
 8001242:	409a      	lsls	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	e0cd      	b.n	80013e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a3b      	ldr	r2, [pc, #236]	; (800133c <HAL_DMA_Init+0x42c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d022      	beq.n	800129a <HAL_DMA_Init+0x38a>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a39      	ldr	r2, [pc, #228]	; (8001340 <HAL_DMA_Init+0x430>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01d      	beq.n	800129a <HAL_DMA_Init+0x38a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a38      	ldr	r2, [pc, #224]	; (8001344 <HAL_DMA_Init+0x434>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d018      	beq.n	800129a <HAL_DMA_Init+0x38a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a36      	ldr	r2, [pc, #216]	; (8001348 <HAL_DMA_Init+0x438>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_DMA_Init+0x38a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a35      	ldr	r2, [pc, #212]	; (800134c <HAL_DMA_Init+0x43c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d00e      	beq.n	800129a <HAL_DMA_Init+0x38a>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a33      	ldr	r2, [pc, #204]	; (8001350 <HAL_DMA_Init+0x440>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d009      	beq.n	800129a <HAL_DMA_Init+0x38a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <HAL_DMA_Init+0x444>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d004      	beq.n	800129a <HAL_DMA_Init+0x38a>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a30      	ldr	r2, [pc, #192]	; (8001358 <HAL_DMA_Init+0x448>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_DMA_Init+0x38e>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_DMA_Init+0x390>
 800129e:	2300      	movs	r3, #0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 8097 	beq.w	80013d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a24      	ldr	r2, [pc, #144]	; (800133c <HAL_DMA_Init+0x42c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d021      	beq.n	80012f4 <HAL_DMA_Init+0x3e4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <HAL_DMA_Init+0x430>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01c      	beq.n	80012f4 <HAL_DMA_Init+0x3e4>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a21      	ldr	r2, [pc, #132]	; (8001344 <HAL_DMA_Init+0x434>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d017      	beq.n	80012f4 <HAL_DMA_Init+0x3e4>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_DMA_Init+0x438>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d012      	beq.n	80012f4 <HAL_DMA_Init+0x3e4>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1e      	ldr	r2, [pc, #120]	; (800134c <HAL_DMA_Init+0x43c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d00d      	beq.n	80012f4 <HAL_DMA_Init+0x3e4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <HAL_DMA_Init+0x440>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d008      	beq.n	80012f4 <HAL_DMA_Init+0x3e4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_DMA_Init+0x444>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d003      	beq.n	80012f4 <HAL_DMA_Init+0x3e4>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_DMA_Init+0x448>)
 80012f2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_DMA_Init+0x44c>)
 8001310:	4013      	ands	r3, r2
 8001312:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b40      	cmp	r3, #64	; 0x40
 800131a:	d021      	beq.n	8001360 <HAL_DMA_Init+0x450>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b80      	cmp	r3, #128	; 0x80
 8001322:	d102      	bne.n	800132a <HAL_DMA_Init+0x41a>
 8001324:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001328:	e01b      	b.n	8001362 <HAL_DMA_Init+0x452>
 800132a:	2300      	movs	r3, #0
 800132c:	e019      	b.n	8001362 <HAL_DMA_Init+0x452>
 800132e:	bf00      	nop
 8001330:	fe10803f 	.word	0xfe10803f
 8001334:	5c001000 	.word	0x5c001000
 8001338:	ffff0000 	.word	0xffff0000
 800133c:	58025408 	.word	0x58025408
 8001340:	5802541c 	.word	0x5802541c
 8001344:	58025430 	.word	0x58025430
 8001348:	58025444 	.word	0x58025444
 800134c:	58025458 	.word	0x58025458
 8001350:	5802546c 	.word	0x5802546c
 8001354:	58025480 	.word	0x58025480
 8001358:	58025494 	.word	0x58025494
 800135c:	fffe000f 	.word	0xfffe000f
 8001360:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68d2      	ldr	r2, [r2, #12]
 8001366:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001380:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001388:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001390:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4313      	orrs	r3, r2
 8001396:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b6e      	ldr	r3, [pc, #440]	; (8001560 <HAL_DMA_Init+0x650>)
 80013a8:	4413      	add	r3, r2
 80013aa:	4a6e      	ldr	r2, [pc, #440]	; (8001564 <HAL_DMA_Init+0x654>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	009a      	lsls	r2, r3, #2
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f001 fa75 	bl	80028a8 <DMA_CalcBaseAndBitshift>
 80013be:	4603      	mov	r3, r0
 80013c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	2201      	movs	r2, #1
 80013cc:	409a      	lsls	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	e008      	b.n	80013e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2240      	movs	r2, #64	; 0x40
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2203      	movs	r2, #3
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e0b7      	b.n	8001556 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a5f      	ldr	r2, [pc, #380]	; (8001568 <HAL_DMA_Init+0x658>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d072      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a5d      	ldr	r2, [pc, #372]	; (800156c <HAL_DMA_Init+0x65c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d06d      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a5c      	ldr	r2, [pc, #368]	; (8001570 <HAL_DMA_Init+0x660>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d068      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a5a      	ldr	r2, [pc, #360]	; (8001574 <HAL_DMA_Init+0x664>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d063      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a59      	ldr	r2, [pc, #356]	; (8001578 <HAL_DMA_Init+0x668>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d05e      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a57      	ldr	r2, [pc, #348]	; (800157c <HAL_DMA_Init+0x66c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d059      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a56      	ldr	r2, [pc, #344]	; (8001580 <HAL_DMA_Init+0x670>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d054      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a54      	ldr	r2, [pc, #336]	; (8001584 <HAL_DMA_Init+0x674>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d04f      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a53      	ldr	r2, [pc, #332]	; (8001588 <HAL_DMA_Init+0x678>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d04a      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a51      	ldr	r2, [pc, #324]	; (800158c <HAL_DMA_Init+0x67c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d045      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a50      	ldr	r2, [pc, #320]	; (8001590 <HAL_DMA_Init+0x680>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d040      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a4e      	ldr	r2, [pc, #312]	; (8001594 <HAL_DMA_Init+0x684>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d03b      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a4d      	ldr	r2, [pc, #308]	; (8001598 <HAL_DMA_Init+0x688>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d036      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a4b      	ldr	r2, [pc, #300]	; (800159c <HAL_DMA_Init+0x68c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d031      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a4a      	ldr	r2, [pc, #296]	; (80015a0 <HAL_DMA_Init+0x690>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d02c      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a48      	ldr	r2, [pc, #288]	; (80015a4 <HAL_DMA_Init+0x694>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d027      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a47      	ldr	r2, [pc, #284]	; (80015a8 <HAL_DMA_Init+0x698>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d022      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a45      	ldr	r2, [pc, #276]	; (80015ac <HAL_DMA_Init+0x69c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01d      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a44      	ldr	r2, [pc, #272]	; (80015b0 <HAL_DMA_Init+0x6a0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d018      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a42      	ldr	r2, [pc, #264]	; (80015b4 <HAL_DMA_Init+0x6a4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a41      	ldr	r2, [pc, #260]	; (80015b8 <HAL_DMA_Init+0x6a8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d00e      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a3f      	ldr	r2, [pc, #252]	; (80015bc <HAL_DMA_Init+0x6ac>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d009      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a3e      	ldr	r2, [pc, #248]	; (80015c0 <HAL_DMA_Init+0x6b0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d004      	beq.n	80014d6 <HAL_DMA_Init+0x5c6>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a3c      	ldr	r2, [pc, #240]	; (80015c4 <HAL_DMA_Init+0x6b4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_DMA_Init+0x5ca>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_DMA_Init+0x5cc>
 80014da:	2300      	movs	r3, #0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d032      	beq.n	8001546 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f001 fb0f 	bl	8002b04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b80      	cmp	r3, #128	; 0x80
 80014ec:	d102      	bne.n	80014f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001508:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d010      	beq.n	8001534 <HAL_DMA_Init+0x624>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b08      	cmp	r3, #8
 8001518:	d80c      	bhi.n	8001534 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f001 fb8c 	bl	8002c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	e008      	b.n	8001546 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	a7fdabf8 	.word	0xa7fdabf8
 8001564:	cccccccd 	.word	0xcccccccd
 8001568:	40020010 	.word	0x40020010
 800156c:	40020028 	.word	0x40020028
 8001570:	40020040 	.word	0x40020040
 8001574:	40020058 	.word	0x40020058
 8001578:	40020070 	.word	0x40020070
 800157c:	40020088 	.word	0x40020088
 8001580:	400200a0 	.word	0x400200a0
 8001584:	400200b8 	.word	0x400200b8
 8001588:	40020410 	.word	0x40020410
 800158c:	40020428 	.word	0x40020428
 8001590:	40020440 	.word	0x40020440
 8001594:	40020458 	.word	0x40020458
 8001598:	40020470 	.word	0x40020470
 800159c:	40020488 	.word	0x40020488
 80015a0:	400204a0 	.word	0x400204a0
 80015a4:	400204b8 	.word	0x400204b8
 80015a8:	58025408 	.word	0x58025408
 80015ac:	5802541c 	.word	0x5802541c
 80015b0:	58025430 	.word	0x58025430
 80015b4:	58025444 	.word	0x58025444
 80015b8:	58025458 	.word	0x58025458
 80015bc:	5802546c 	.word	0x5802546c
 80015c0:	58025480 	.word	0x58025480
 80015c4:	58025494 	.word	0x58025494

080015c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e237      	b.n	8001a4a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d004      	beq.n	80015f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e22c      	b.n	8001a4a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a5c      	ldr	r2, [pc, #368]	; (8001768 <HAL_DMA_Abort_IT+0x1a0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d04a      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a5b      	ldr	r2, [pc, #364]	; (800176c <HAL_DMA_Abort_IT+0x1a4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d045      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a59      	ldr	r2, [pc, #356]	; (8001770 <HAL_DMA_Abort_IT+0x1a8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d040      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_DMA_Abort_IT+0x1ac>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d03b      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a56      	ldr	r2, [pc, #344]	; (8001778 <HAL_DMA_Abort_IT+0x1b0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d036      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a55      	ldr	r2, [pc, #340]	; (800177c <HAL_DMA_Abort_IT+0x1b4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d031      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a53      	ldr	r2, [pc, #332]	; (8001780 <HAL_DMA_Abort_IT+0x1b8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d02c      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_DMA_Abort_IT+0x1bc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d027      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a50      	ldr	r2, [pc, #320]	; (8001788 <HAL_DMA_Abort_IT+0x1c0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d022      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a4f      	ldr	r2, [pc, #316]	; (800178c <HAL_DMA_Abort_IT+0x1c4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d01d      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a4d      	ldr	r2, [pc, #308]	; (8001790 <HAL_DMA_Abort_IT+0x1c8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d018      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a4c      	ldr	r2, [pc, #304]	; (8001794 <HAL_DMA_Abort_IT+0x1cc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d013      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <HAL_DMA_Abort_IT+0x1d0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00e      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a49      	ldr	r2, [pc, #292]	; (800179c <HAL_DMA_Abort_IT+0x1d4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d009      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a47      	ldr	r2, [pc, #284]	; (80017a0 <HAL_DMA_Abort_IT+0x1d8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d004      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a46      	ldr	r2, [pc, #280]	; (80017a4 <HAL_DMA_Abort_IT+0x1dc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <HAL_DMA_Abort_IT+0xcc>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_DMA_Abort_IT+0xce>
 8001694:	2300      	movs	r3, #0
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8086 	beq.w	80017a8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2204      	movs	r2, #4
 80016a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a2f      	ldr	r2, [pc, #188]	; (8001768 <HAL_DMA_Abort_IT+0x1a0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d04a      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a2e      	ldr	r2, [pc, #184]	; (800176c <HAL_DMA_Abort_IT+0x1a4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d045      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a2c      	ldr	r2, [pc, #176]	; (8001770 <HAL_DMA_Abort_IT+0x1a8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d040      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a2b      	ldr	r2, [pc, #172]	; (8001774 <HAL_DMA_Abort_IT+0x1ac>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d03b      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a29      	ldr	r2, [pc, #164]	; (8001778 <HAL_DMA_Abort_IT+0x1b0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d036      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a28      	ldr	r2, [pc, #160]	; (800177c <HAL_DMA_Abort_IT+0x1b4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d031      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a26      	ldr	r2, [pc, #152]	; (8001780 <HAL_DMA_Abort_IT+0x1b8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d02c      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a25      	ldr	r2, [pc, #148]	; (8001784 <HAL_DMA_Abort_IT+0x1bc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d027      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_DMA_Abort_IT+0x1c0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d022      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a22      	ldr	r2, [pc, #136]	; (800178c <HAL_DMA_Abort_IT+0x1c4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d01d      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a20      	ldr	r2, [pc, #128]	; (8001790 <HAL_DMA_Abort_IT+0x1c8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d018      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <HAL_DMA_Abort_IT+0x1cc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d013      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <HAL_DMA_Abort_IT+0x1d0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00e      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1c      	ldr	r2, [pc, #112]	; (800179c <HAL_DMA_Abort_IT+0x1d4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d009      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1a      	ldr	r2, [pc, #104]	; (80017a0 <HAL_DMA_Abort_IT+0x1d8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d004      	beq.n	8001744 <HAL_DMA_Abort_IT+0x17c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <HAL_DMA_Abort_IT+0x1dc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d108      	bne.n	8001756 <HAL_DMA_Abort_IT+0x18e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e178      	b.n	8001a48 <HAL_DMA_Abort_IT+0x480>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e16f      	b.n	8001a48 <HAL_DMA_Abort_IT+0x480>
 8001768:	40020010 	.word	0x40020010
 800176c:	40020028 	.word	0x40020028
 8001770:	40020040 	.word	0x40020040
 8001774:	40020058 	.word	0x40020058
 8001778:	40020070 	.word	0x40020070
 800177c:	40020088 	.word	0x40020088
 8001780:	400200a0 	.word	0x400200a0
 8001784:	400200b8 	.word	0x400200b8
 8001788:	40020410 	.word	0x40020410
 800178c:	40020428 	.word	0x40020428
 8001790:	40020440 	.word	0x40020440
 8001794:	40020458 	.word	0x40020458
 8001798:	40020470 	.word	0x40020470
 800179c:	40020488 	.word	0x40020488
 80017a0:	400204a0 	.word	0x400204a0
 80017a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 020e 	bic.w	r2, r2, #14
 80017b6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6c      	ldr	r2, [pc, #432]	; (8001970 <HAL_DMA_Abort_IT+0x3a8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d04a      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6b      	ldr	r2, [pc, #428]	; (8001974 <HAL_DMA_Abort_IT+0x3ac>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d045      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a69      	ldr	r2, [pc, #420]	; (8001978 <HAL_DMA_Abort_IT+0x3b0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d040      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a68      	ldr	r2, [pc, #416]	; (800197c <HAL_DMA_Abort_IT+0x3b4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d03b      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a66      	ldr	r2, [pc, #408]	; (8001980 <HAL_DMA_Abort_IT+0x3b8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d036      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_DMA_Abort_IT+0x3bc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d031      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a63      	ldr	r2, [pc, #396]	; (8001988 <HAL_DMA_Abort_IT+0x3c0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d02c      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a62      	ldr	r2, [pc, #392]	; (800198c <HAL_DMA_Abort_IT+0x3c4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d027      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a60      	ldr	r2, [pc, #384]	; (8001990 <HAL_DMA_Abort_IT+0x3c8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d022      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a5f      	ldr	r2, [pc, #380]	; (8001994 <HAL_DMA_Abort_IT+0x3cc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d01d      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a5d      	ldr	r2, [pc, #372]	; (8001998 <HAL_DMA_Abort_IT+0x3d0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d018      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a5c      	ldr	r2, [pc, #368]	; (800199c <HAL_DMA_Abort_IT+0x3d4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a5a      	ldr	r2, [pc, #360]	; (80019a0 <HAL_DMA_Abort_IT+0x3d8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00e      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a59      	ldr	r2, [pc, #356]	; (80019a4 <HAL_DMA_Abort_IT+0x3dc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d009      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <HAL_DMA_Abort_IT+0x3e0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d004      	beq.n	8001858 <HAL_DMA_Abort_IT+0x290>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a56      	ldr	r2, [pc, #344]	; (80019ac <HAL_DMA_Abort_IT+0x3e4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d108      	bne.n	800186a <HAL_DMA_Abort_IT+0x2a2>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e007      	b.n	800187a <HAL_DMA_Abort_IT+0x2b2>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0201 	bic.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a3c      	ldr	r2, [pc, #240]	; (8001970 <HAL_DMA_Abort_IT+0x3a8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d072      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <HAL_DMA_Abort_IT+0x3ac>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d06d      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a39      	ldr	r2, [pc, #228]	; (8001978 <HAL_DMA_Abort_IT+0x3b0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d068      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a37      	ldr	r2, [pc, #220]	; (800197c <HAL_DMA_Abort_IT+0x3b4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d063      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a36      	ldr	r2, [pc, #216]	; (8001980 <HAL_DMA_Abort_IT+0x3b8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d05e      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a34      	ldr	r2, [pc, #208]	; (8001984 <HAL_DMA_Abort_IT+0x3bc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d059      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a33      	ldr	r2, [pc, #204]	; (8001988 <HAL_DMA_Abort_IT+0x3c0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d054      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a31      	ldr	r2, [pc, #196]	; (800198c <HAL_DMA_Abort_IT+0x3c4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d04f      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a30      	ldr	r2, [pc, #192]	; (8001990 <HAL_DMA_Abort_IT+0x3c8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d04a      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a2e      	ldr	r2, [pc, #184]	; (8001994 <HAL_DMA_Abort_IT+0x3cc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d045      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a2d      	ldr	r2, [pc, #180]	; (8001998 <HAL_DMA_Abort_IT+0x3d0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d040      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a2b      	ldr	r2, [pc, #172]	; (800199c <HAL_DMA_Abort_IT+0x3d4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d03b      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a2a      	ldr	r2, [pc, #168]	; (80019a0 <HAL_DMA_Abort_IT+0x3d8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d036      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <HAL_DMA_Abort_IT+0x3dc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d031      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <HAL_DMA_Abort_IT+0x3e0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d02c      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a25      	ldr	r2, [pc, #148]	; (80019ac <HAL_DMA_Abort_IT+0x3e4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d027      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <HAL_DMA_Abort_IT+0x3e8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d022      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <HAL_DMA_Abort_IT+0x3ec>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01d      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <HAL_DMA_Abort_IT+0x3f0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d018      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <HAL_DMA_Abort_IT+0x3f4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <HAL_DMA_Abort_IT+0x3f8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d00e      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <HAL_DMA_Abort_IT+0x3fc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d009      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <HAL_DMA_Abort_IT+0x400>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d004      	beq.n	800196a <HAL_DMA_Abort_IT+0x3a2>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <HAL_DMA_Abort_IT+0x404>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d132      	bne.n	80019d0 <HAL_DMA_Abort_IT+0x408>
 800196a:	2301      	movs	r3, #1
 800196c:	e031      	b.n	80019d2 <HAL_DMA_Abort_IT+0x40a>
 800196e:	bf00      	nop
 8001970:	40020010 	.word	0x40020010
 8001974:	40020028 	.word	0x40020028
 8001978:	40020040 	.word	0x40020040
 800197c:	40020058 	.word	0x40020058
 8001980:	40020070 	.word	0x40020070
 8001984:	40020088 	.word	0x40020088
 8001988:	400200a0 	.word	0x400200a0
 800198c:	400200b8 	.word	0x400200b8
 8001990:	40020410 	.word	0x40020410
 8001994:	40020428 	.word	0x40020428
 8001998:	40020440 	.word	0x40020440
 800199c:	40020458 	.word	0x40020458
 80019a0:	40020470 	.word	0x40020470
 80019a4:	40020488 	.word	0x40020488
 80019a8:	400204a0 	.word	0x400204a0
 80019ac:	400204b8 	.word	0x400204b8
 80019b0:	58025408 	.word	0x58025408
 80019b4:	5802541c 	.word	0x5802541c
 80019b8:	58025430 	.word	0x58025430
 80019bc:	58025444 	.word	0x58025444
 80019c0:	58025458 	.word	0x58025458
 80019c4:	5802546c 	.word	0x5802546c
 80019c8:	58025480 	.word	0x58025480
 80019cc:	58025494 	.word	0x58025494
 80019d0:	2300      	movs	r3, #0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d028      	beq.n	8001a28 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2201      	movs	r2, #1
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a04:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00c      	beq.n	8001a28 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a1c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a26:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop

08001a54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a60:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_DMA_IRQHandler+0x1ac>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a67      	ldr	r2, [pc, #412]	; (8001c04 <HAL_DMA_IRQHandler+0x1b0>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0a9b      	lsrs	r3, r3, #10
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5f      	ldr	r2, [pc, #380]	; (8001c08 <HAL_DMA_IRQHandler+0x1b4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d04a      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a5d      	ldr	r2, [pc, #372]	; (8001c0c <HAL_DMA_IRQHandler+0x1b8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d045      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a5c      	ldr	r2, [pc, #368]	; (8001c10 <HAL_DMA_IRQHandler+0x1bc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d040      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a5a      	ldr	r2, [pc, #360]	; (8001c14 <HAL_DMA_IRQHandler+0x1c0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d03b      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a59      	ldr	r2, [pc, #356]	; (8001c18 <HAL_DMA_IRQHandler+0x1c4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d036      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a57      	ldr	r2, [pc, #348]	; (8001c1c <HAL_DMA_IRQHandler+0x1c8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d031      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a56      	ldr	r2, [pc, #344]	; (8001c20 <HAL_DMA_IRQHandler+0x1cc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d02c      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a54      	ldr	r2, [pc, #336]	; (8001c24 <HAL_DMA_IRQHandler+0x1d0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d027      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a53      	ldr	r2, [pc, #332]	; (8001c28 <HAL_DMA_IRQHandler+0x1d4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d022      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <HAL_DMA_IRQHandler+0x1d8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01d      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a50      	ldr	r2, [pc, #320]	; (8001c30 <HAL_DMA_IRQHandler+0x1dc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d018      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <HAL_DMA_IRQHandler+0x1e0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <HAL_DMA_IRQHandler+0x1e4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00e      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <HAL_DMA_IRQHandler+0x1e8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d009      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a4a      	ldr	r2, [pc, #296]	; (8001c40 <HAL_DMA_IRQHandler+0x1ec>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d004      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xd2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_DMA_IRQHandler+0x1f0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_DMA_IRQHandler+0xd6>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_DMA_IRQHandler+0xd8>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 842b 	beq.w	8002388 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80a2 	beq.w	8001c8c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <HAL_DMA_IRQHandler+0x1b4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d04a      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a2d      	ldr	r2, [pc, #180]	; (8001c0c <HAL_DMA_IRQHandler+0x1b8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d045      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <HAL_DMA_IRQHandler+0x1bc>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d040      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2a      	ldr	r2, [pc, #168]	; (8001c14 <HAL_DMA_IRQHandler+0x1c0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d03b      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <HAL_DMA_IRQHandler+0x1c4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d036      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <HAL_DMA_IRQHandler+0x1c8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d031      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <HAL_DMA_IRQHandler+0x1cc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d02c      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a24      	ldr	r2, [pc, #144]	; (8001c24 <HAL_DMA_IRQHandler+0x1d0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d027      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_DMA_IRQHandler+0x1d4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d022      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a21      	ldr	r2, [pc, #132]	; (8001c2c <HAL_DMA_IRQHandler+0x1d8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d01d      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_DMA_IRQHandler+0x1dc>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d018      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_DMA_IRQHandler+0x1e0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_DMA_IRQHandler+0x1e4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00e      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <HAL_DMA_IRQHandler+0x1e8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d009      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_DMA_IRQHandler+0x1ec>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d004      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x194>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a18      	ldr	r2, [pc, #96]	; (8001c44 <HAL_DMA_IRQHandler+0x1f0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d12f      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x1f4>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	bf14      	ite	ne
 8001bf6:	2301      	movne	r3, #1
 8001bf8:	2300      	moveq	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	e02e      	b.n	8001c5c <HAL_DMA_IRQHandler+0x208>
 8001bfe:	bf00      	nop
 8001c00:	24000000 	.word	0x24000000
 8001c04:	1b4e81b5 	.word	0x1b4e81b5
 8001c08:	40020010 	.word	0x40020010
 8001c0c:	40020028 	.word	0x40020028
 8001c10:	40020040 	.word	0x40020040
 8001c14:	40020058 	.word	0x40020058
 8001c18:	40020070 	.word	0x40020070
 8001c1c:	40020088 	.word	0x40020088
 8001c20:	400200a0 	.word	0x400200a0
 8001c24:	400200b8 	.word	0x400200b8
 8001c28:	40020410 	.word	0x40020410
 8001c2c:	40020428 	.word	0x40020428
 8001c30:	40020440 	.word	0x40020440
 8001c34:	40020458 	.word	0x40020458
 8001c38:	40020470 	.word	0x40020470
 8001c3c:	40020488 	.word	0x40020488
 8001c40:	400204a0 	.word	0x400204a0
 8001c44:	400204b8 	.word	0x400204b8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d015      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0204 	bic.w	r2, r2, #4
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2208      	movs	r2, #8
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d06e      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a69      	ldr	r2, [pc, #420]	; (8001e4c <HAL_DMA_IRQHandler+0x3f8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d04a      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a67      	ldr	r2, [pc, #412]	; (8001e50 <HAL_DMA_IRQHandler+0x3fc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d045      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a66      	ldr	r2, [pc, #408]	; (8001e54 <HAL_DMA_IRQHandler+0x400>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d040      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a64      	ldr	r2, [pc, #400]	; (8001e58 <HAL_DMA_IRQHandler+0x404>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d03b      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a63      	ldr	r2, [pc, #396]	; (8001e5c <HAL_DMA_IRQHandler+0x408>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d036      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a61      	ldr	r2, [pc, #388]	; (8001e60 <HAL_DMA_IRQHandler+0x40c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d031      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a60      	ldr	r2, [pc, #384]	; (8001e64 <HAL_DMA_IRQHandler+0x410>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d02c      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a5e      	ldr	r2, [pc, #376]	; (8001e68 <HAL_DMA_IRQHandler+0x414>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d027      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a5d      	ldr	r2, [pc, #372]	; (8001e6c <HAL_DMA_IRQHandler+0x418>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d022      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a5b      	ldr	r2, [pc, #364]	; (8001e70 <HAL_DMA_IRQHandler+0x41c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d01d      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a5a      	ldr	r2, [pc, #360]	; (8001e74 <HAL_DMA_IRQHandler+0x420>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d018      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <HAL_DMA_IRQHandler+0x424>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a57      	ldr	r2, [pc, #348]	; (8001e7c <HAL_DMA_IRQHandler+0x428>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00e      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a55      	ldr	r2, [pc, #340]	; (8001e80 <HAL_DMA_IRQHandler+0x42c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d009      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a54      	ldr	r2, [pc, #336]	; (8001e84 <HAL_DMA_IRQHandler+0x430>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d004      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2ee>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <HAL_DMA_IRQHandler+0x434>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10a      	bne.n	8001d58 <HAL_DMA_IRQHandler+0x304>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf14      	ite	ne
 8001d50:	2301      	movne	r3, #1
 8001d52:	2300      	moveq	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e003      	b.n	8001d60 <HAL_DMA_IRQHandler+0x30c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00d      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	f043 0202 	orr.w	r2, r3, #2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2204      	movs	r2, #4
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 808f 	beq.w	8001eb4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	; (8001e4c <HAL_DMA_IRQHandler+0x3f8>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d04a      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <HAL_DMA_IRQHandler+0x3fc>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d045      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <HAL_DMA_IRQHandler+0x400>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d040      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <HAL_DMA_IRQHandler+0x404>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d03b      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_DMA_IRQHandler+0x408>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d036      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_DMA_IRQHandler+0x40c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d031      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <HAL_DMA_IRQHandler+0x410>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d02c      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <HAL_DMA_IRQHandler+0x414>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d027      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <HAL_DMA_IRQHandler+0x418>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d022      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <HAL_DMA_IRQHandler+0x41c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01d      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <HAL_DMA_IRQHandler+0x420>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d018      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_DMA_IRQHandler+0x424>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <HAL_DMA_IRQHandler+0x428>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00e      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <HAL_DMA_IRQHandler+0x42c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d009      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <HAL_DMA_IRQHandler+0x430>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d004      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x3e2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <HAL_DMA_IRQHandler+0x434>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12a      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x438>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	e023      	b.n	8001e94 <HAL_DMA_IRQHandler+0x440>
 8001e4c:	40020010 	.word	0x40020010
 8001e50:	40020028 	.word	0x40020028
 8001e54:	40020040 	.word	0x40020040
 8001e58:	40020058 	.word	0x40020058
 8001e5c:	40020070 	.word	0x40020070
 8001e60:	40020088 	.word	0x40020088
 8001e64:	400200a0 	.word	0x400200a0
 8001e68:	400200b8 	.word	0x400200b8
 8001e6c:	40020410 	.word	0x40020410
 8001e70:	40020428 	.word	0x40020428
 8001e74:	40020440 	.word	0x40020440
 8001e78:	40020458 	.word	0x40020458
 8001e7c:	40020470 	.word	0x40020470
 8001e80:	40020488 	.word	0x40020488
 8001e84:	400204a0 	.word	0x400204a0
 8001e88:	400204b8 	.word	0x400204b8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00d      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a6 	beq.w	8002016 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a85      	ldr	r2, [pc, #532]	; (80020e4 <HAL_DMA_IRQHandler+0x690>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d04a      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a83      	ldr	r2, [pc, #524]	; (80020e8 <HAL_DMA_IRQHandler+0x694>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d045      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a82      	ldr	r2, [pc, #520]	; (80020ec <HAL_DMA_IRQHandler+0x698>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d040      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a80      	ldr	r2, [pc, #512]	; (80020f0 <HAL_DMA_IRQHandler+0x69c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d03b      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7f      	ldr	r2, [pc, #508]	; (80020f4 <HAL_DMA_IRQHandler+0x6a0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d036      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a7d      	ldr	r2, [pc, #500]	; (80020f8 <HAL_DMA_IRQHandler+0x6a4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d031      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7c      	ldr	r2, [pc, #496]	; (80020fc <HAL_DMA_IRQHandler+0x6a8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d02c      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a7a      	ldr	r2, [pc, #488]	; (8002100 <HAL_DMA_IRQHandler+0x6ac>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d027      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a79      	ldr	r2, [pc, #484]	; (8002104 <HAL_DMA_IRQHandler+0x6b0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d022      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a77      	ldr	r2, [pc, #476]	; (8002108 <HAL_DMA_IRQHandler+0x6b4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01d      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a76      	ldr	r2, [pc, #472]	; (800210c <HAL_DMA_IRQHandler+0x6b8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d018      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a74      	ldr	r2, [pc, #464]	; (8002110 <HAL_DMA_IRQHandler+0x6bc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a73      	ldr	r2, [pc, #460]	; (8002114 <HAL_DMA_IRQHandler+0x6c0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00e      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a71      	ldr	r2, [pc, #452]	; (8002118 <HAL_DMA_IRQHandler+0x6c4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d009      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a70      	ldr	r2, [pc, #448]	; (800211c <HAL_DMA_IRQHandler+0x6c8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d004      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x516>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a6e      	ldr	r2, [pc, #440]	; (8002120 <HAL_DMA_IRQHandler+0x6cc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10a      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x52c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e009      	b.n	8001f94 <HAL_DMA_IRQHandler+0x540>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d03e      	beq.n	8002016 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d018      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d108      	bne.n	8001fd6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d024      	beq.n	8002016 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	e01f      	b.n	8002016 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01b      	beq.n	8002016 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	4798      	blx	r3
 8001fe6:	e016      	b.n	8002016 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d107      	bne.n	8002006 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0208 	bic.w	r2, r2, #8
 8002004:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2220      	movs	r2, #32
 8002020:	409a      	lsls	r2, r3
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8110 	beq.w	800224c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2c      	ldr	r2, [pc, #176]	; (80020e4 <HAL_DMA_IRQHandler+0x690>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d04a      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <HAL_DMA_IRQHandler+0x694>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d045      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a29      	ldr	r2, [pc, #164]	; (80020ec <HAL_DMA_IRQHandler+0x698>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d040      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_DMA_IRQHandler+0x69c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d03b      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_DMA_IRQHandler+0x6a0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d036      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <HAL_DMA_IRQHandler+0x6a4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d031      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a23      	ldr	r2, [pc, #140]	; (80020fc <HAL_DMA_IRQHandler+0x6a8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d02c      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a22      	ldr	r2, [pc, #136]	; (8002100 <HAL_DMA_IRQHandler+0x6ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d027      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a20      	ldr	r2, [pc, #128]	; (8002104 <HAL_DMA_IRQHandler+0x6b0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d022      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <HAL_DMA_IRQHandler+0x6b4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d01d      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_DMA_IRQHandler+0x6b8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d018      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_DMA_IRQHandler+0x6bc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d013      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_DMA_IRQHandler+0x6c0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00e      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_DMA_IRQHandler+0x6c4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d009      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_DMA_IRQHandler+0x6c8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <HAL_DMA_IRQHandler+0x678>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a16      	ldr	r2, [pc, #88]	; (8002120 <HAL_DMA_IRQHandler+0x6cc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d12b      	bne.n	8002124 <HAL_DMA_IRQHandler+0x6d0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf14      	ite	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	2300      	moveq	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	e02a      	b.n	8002138 <HAL_DMA_IRQHandler+0x6e4>
 80020e2:	bf00      	nop
 80020e4:	40020010 	.word	0x40020010
 80020e8:	40020028 	.word	0x40020028
 80020ec:	40020040 	.word	0x40020040
 80020f0:	40020058 	.word	0x40020058
 80020f4:	40020070 	.word	0x40020070
 80020f8:	40020088 	.word	0x40020088
 80020fc:	400200a0 	.word	0x400200a0
 8002100:	400200b8 	.word	0x400200b8
 8002104:	40020410 	.word	0x40020410
 8002108:	40020428 	.word	0x40020428
 800210c:	40020440 	.word	0x40020440
 8002110:	40020458 	.word	0x40020458
 8002114:	40020470 	.word	0x40020470
 8002118:	40020488 	.word	0x40020488
 800211c:	400204a0 	.word	0x400204a0
 8002120:	400204b8 	.word	0x400204b8
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	bf14      	ite	ne
 8002132:	2301      	movne	r3, #1
 8002134:	2300      	moveq	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8087 	beq.w	800224c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2220      	movs	r2, #32
 8002148:	409a      	lsls	r2, r3
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b04      	cmp	r3, #4
 8002158:	d139      	bne.n	80021ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0216 	bic.w	r2, r2, #22
 8002168:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_DMA_IRQHandler+0x736>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	223f      	movs	r2, #63	; 0x3f
 80021a4:	409a      	lsls	r2, r3
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 834a 	beq.w	8002858 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
          }
          return;
 80021cc:	e344      	b.n	8002858 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d018      	beq.n	800220e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02c      	beq.n	800224c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	4798      	blx	r3
 80021fa:	e027      	b.n	800224c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d023      	beq.n	800224c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
 800220c:	e01e      	b.n	800224c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10f      	bne.n	800223c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0210 	bic.w	r2, r2, #16
 800222a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 8306 	beq.w	8002862 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8088 	beq.w	8002374 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2204      	movs	r2, #4
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7a      	ldr	r2, [pc, #488]	; (800245c <HAL_DMA_IRQHandler+0xa08>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d04a      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a79      	ldr	r2, [pc, #484]	; (8002460 <HAL_DMA_IRQHandler+0xa0c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d045      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a77      	ldr	r2, [pc, #476]	; (8002464 <HAL_DMA_IRQHandler+0xa10>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d040      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a76      	ldr	r2, [pc, #472]	; (8002468 <HAL_DMA_IRQHandler+0xa14>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d03b      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a74      	ldr	r2, [pc, #464]	; (800246c <HAL_DMA_IRQHandler+0xa18>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d036      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a73      	ldr	r2, [pc, #460]	; (8002470 <HAL_DMA_IRQHandler+0xa1c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d031      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a71      	ldr	r2, [pc, #452]	; (8002474 <HAL_DMA_IRQHandler+0xa20>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02c      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a70      	ldr	r2, [pc, #448]	; (8002478 <HAL_DMA_IRQHandler+0xa24>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d027      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6e      	ldr	r2, [pc, #440]	; (800247c <HAL_DMA_IRQHandler+0xa28>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d022      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a6d      	ldr	r2, [pc, #436]	; (8002480 <HAL_DMA_IRQHandler+0xa2c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d01d      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6b      	ldr	r2, [pc, #428]	; (8002484 <HAL_DMA_IRQHandler+0xa30>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d018      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6a      	ldr	r2, [pc, #424]	; (8002488 <HAL_DMA_IRQHandler+0xa34>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d013      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a68      	ldr	r2, [pc, #416]	; (800248c <HAL_DMA_IRQHandler+0xa38>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00e      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a67      	ldr	r2, [pc, #412]	; (8002490 <HAL_DMA_IRQHandler+0xa3c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a65      	ldr	r2, [pc, #404]	; (8002494 <HAL_DMA_IRQHandler+0xa40>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_DMA_IRQHandler+0x8b8>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a64      	ldr	r2, [pc, #400]	; (8002498 <HAL_DMA_IRQHandler+0xa44>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <HAL_DMA_IRQHandler+0x8ca>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e007      	b.n	800232e <HAL_DMA_IRQHandler+0x8da>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	429a      	cmp	r2, r3
 8002338:	d307      	bcc.n	800234a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f2      	bne.n	800232e <HAL_DMA_IRQHandler+0x8da>
 8002348:	e000      	b.n	800234c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800234a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2203      	movs	r2, #3
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002362:	e003      	b.n	800236c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8272 	beq.w	8002862 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
 8002386:	e26c      	b.n	8002862 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a43      	ldr	r2, [pc, #268]	; (800249c <HAL_DMA_IRQHandler+0xa48>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x984>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a42      	ldr	r2, [pc, #264]	; (80024a0 <HAL_DMA_IRQHandler+0xa4c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d01d      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x984>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <HAL_DMA_IRQHandler+0xa50>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x984>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3f      	ldr	r2, [pc, #252]	; (80024a8 <HAL_DMA_IRQHandler+0xa54>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x984>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3d      	ldr	r2, [pc, #244]	; (80024ac <HAL_DMA_IRQHandler+0xa58>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x984>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a3c      	ldr	r2, [pc, #240]	; (80024b0 <HAL_DMA_IRQHandler+0xa5c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x984>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <HAL_DMA_IRQHandler+0xa60>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x984>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a39      	ldr	r2, [pc, #228]	; (80024b8 <HAL_DMA_IRQHandler+0xa64>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_DMA_IRQHandler+0x988>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_DMA_IRQHandler+0x98a>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 823f 	beq.w	8002862 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2204      	movs	r2, #4
 80023f6:	409a      	lsls	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80cd 	beq.w	800259c <HAL_DMA_IRQHandler+0xb48>
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80c7 	beq.w	800259c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2204      	movs	r2, #4
 8002418:	409a      	lsls	r2, r3
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d049      	beq.n	80024bc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8210 	beq.w	800285c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002444:	e20a      	b.n	800285c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8206 	beq.w	800285c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002458:	e200      	b.n	800285c <HAL_DMA_IRQHandler+0xe08>
 800245a:	bf00      	nop
 800245c:	40020010 	.word	0x40020010
 8002460:	40020028 	.word	0x40020028
 8002464:	40020040 	.word	0x40020040
 8002468:	40020058 	.word	0x40020058
 800246c:	40020070 	.word	0x40020070
 8002470:	40020088 	.word	0x40020088
 8002474:	400200a0 	.word	0x400200a0
 8002478:	400200b8 	.word	0x400200b8
 800247c:	40020410 	.word	0x40020410
 8002480:	40020428 	.word	0x40020428
 8002484:	40020440 	.word	0x40020440
 8002488:	40020458 	.word	0x40020458
 800248c:	40020470 	.word	0x40020470
 8002490:	40020488 	.word	0x40020488
 8002494:	400204a0 	.word	0x400204a0
 8002498:	400204b8 	.word	0x400204b8
 800249c:	58025408 	.word	0x58025408
 80024a0:	5802541c 	.word	0x5802541c
 80024a4:	58025430 	.word	0x58025430
 80024a8:	58025444 	.word	0x58025444
 80024ac:	58025458 	.word	0x58025458
 80024b0:	5802546c 	.word	0x5802546c
 80024b4:	58025480 	.word	0x58025480
 80024b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d160      	bne.n	8002588 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a7f      	ldr	r2, [pc, #508]	; (80026c8 <HAL_DMA_IRQHandler+0xc74>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d04a      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a7d      	ldr	r2, [pc, #500]	; (80026cc <HAL_DMA_IRQHandler+0xc78>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d045      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a7c      	ldr	r2, [pc, #496]	; (80026d0 <HAL_DMA_IRQHandler+0xc7c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d040      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a7a      	ldr	r2, [pc, #488]	; (80026d4 <HAL_DMA_IRQHandler+0xc80>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d03b      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a79      	ldr	r2, [pc, #484]	; (80026d8 <HAL_DMA_IRQHandler+0xc84>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d036      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a77      	ldr	r2, [pc, #476]	; (80026dc <HAL_DMA_IRQHandler+0xc88>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d031      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a76      	ldr	r2, [pc, #472]	; (80026e0 <HAL_DMA_IRQHandler+0xc8c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d02c      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a74      	ldr	r2, [pc, #464]	; (80026e4 <HAL_DMA_IRQHandler+0xc90>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d027      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a73      	ldr	r2, [pc, #460]	; (80026e8 <HAL_DMA_IRQHandler+0xc94>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a71      	ldr	r2, [pc, #452]	; (80026ec <HAL_DMA_IRQHandler+0xc98>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01d      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a70      	ldr	r2, [pc, #448]	; (80026f0 <HAL_DMA_IRQHandler+0xc9c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d018      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a6e      	ldr	r2, [pc, #440]	; (80026f4 <HAL_DMA_IRQHandler+0xca0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6d      	ldr	r2, [pc, #436]	; (80026f8 <HAL_DMA_IRQHandler+0xca4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00e      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6b      	ldr	r2, [pc, #428]	; (80026fc <HAL_DMA_IRQHandler+0xca8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6a      	ldr	r2, [pc, #424]	; (8002700 <HAL_DMA_IRQHandler+0xcac>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_DMA_IRQHandler+0xb12>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a68      	ldr	r2, [pc, #416]	; (8002704 <HAL_DMA_IRQHandler+0xcb0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d108      	bne.n	8002578 <HAL_DMA_IRQHandler+0xb24>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0208 	bic.w	r2, r2, #8
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e007      	b.n	8002588 <HAL_DMA_IRQHandler+0xb34>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0204 	bic.w	r2, r2, #4
 8002586:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8165 	beq.w	800285c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800259a:	e15f      	b.n	800285c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2202      	movs	r2, #2
 80025a6:	409a      	lsls	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80c5 	beq.w	800273c <HAL_DMA_IRQHandler+0xce8>
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80bf 	beq.w	800273c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	2202      	movs	r2, #2
 80025c8:	409a      	lsls	r2, r3
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d018      	beq.n	800260a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 813a 	beq.w	8002860 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025f4:	e134      	b.n	8002860 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8130 	beq.w	8002860 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002608:	e12a      	b.n	8002860 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	f040 8089 	bne.w	8002728 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <HAL_DMA_IRQHandler+0xc74>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d04a      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a29      	ldr	r2, [pc, #164]	; (80026cc <HAL_DMA_IRQHandler+0xc78>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d045      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a28      	ldr	r2, [pc, #160]	; (80026d0 <HAL_DMA_IRQHandler+0xc7c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d040      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a26      	ldr	r2, [pc, #152]	; (80026d4 <HAL_DMA_IRQHandler+0xc80>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d03b      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <HAL_DMA_IRQHandler+0xc84>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d036      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a23      	ldr	r2, [pc, #140]	; (80026dc <HAL_DMA_IRQHandler+0xc88>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d031      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_DMA_IRQHandler+0xc8c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d02c      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a20      	ldr	r2, [pc, #128]	; (80026e4 <HAL_DMA_IRQHandler+0xc90>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d027      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_DMA_IRQHandler+0xc94>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d022      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <HAL_DMA_IRQHandler+0xc98>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01d      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_DMA_IRQHandler+0xc9c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d018      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_DMA_IRQHandler+0xca0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_DMA_IRQHandler+0xca4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00e      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_DMA_IRQHandler+0xca8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d009      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a16      	ldr	r2, [pc, #88]	; (8002700 <HAL_DMA_IRQHandler+0xcac>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d004      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xc62>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <HAL_DMA_IRQHandler+0xcb0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d128      	bne.n	8002708 <HAL_DMA_IRQHandler+0xcb4>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0214 	bic.w	r2, r2, #20
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e027      	b.n	8002718 <HAL_DMA_IRQHandler+0xcc4>
 80026c8:	40020010 	.word	0x40020010
 80026cc:	40020028 	.word	0x40020028
 80026d0:	40020040 	.word	0x40020040
 80026d4:	40020058 	.word	0x40020058
 80026d8:	40020070 	.word	0x40020070
 80026dc:	40020088 	.word	0x40020088
 80026e0:	400200a0 	.word	0x400200a0
 80026e4:	400200b8 	.word	0x400200b8
 80026e8:	40020410 	.word	0x40020410
 80026ec:	40020428 	.word	0x40020428
 80026f0:	40020440 	.word	0x40020440
 80026f4:	40020458 	.word	0x40020458
 80026f8:	40020470 	.word	0x40020470
 80026fc:	40020488 	.word	0x40020488
 8002700:	400204a0 	.word	0x400204a0
 8002704:	400204b8 	.word	0x400204b8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 020a 	bic.w	r2, r2, #10
 8002716:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8097 	beq.w	8002860 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800273a:	e091      	b.n	8002860 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2208      	movs	r2, #8
 8002746:	409a      	lsls	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8088 	beq.w	8002862 <HAL_DMA_IRQHandler+0xe0e>
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8082 	beq.w	8002862 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a41      	ldr	r2, [pc, #260]	; (8002868 <HAL_DMA_IRQHandler+0xe14>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d04a      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3f      	ldr	r2, [pc, #252]	; (800286c <HAL_DMA_IRQHandler+0xe18>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d045      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a3e      	ldr	r2, [pc, #248]	; (8002870 <HAL_DMA_IRQHandler+0xe1c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d040      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a3c      	ldr	r2, [pc, #240]	; (8002874 <HAL_DMA_IRQHandler+0xe20>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d03b      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a3b      	ldr	r2, [pc, #236]	; (8002878 <HAL_DMA_IRQHandler+0xe24>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d036      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a39      	ldr	r2, [pc, #228]	; (800287c <HAL_DMA_IRQHandler+0xe28>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d031      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a38      	ldr	r2, [pc, #224]	; (8002880 <HAL_DMA_IRQHandler+0xe2c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d02c      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a36      	ldr	r2, [pc, #216]	; (8002884 <HAL_DMA_IRQHandler+0xe30>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d027      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a35      	ldr	r2, [pc, #212]	; (8002888 <HAL_DMA_IRQHandler+0xe34>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d022      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a33      	ldr	r2, [pc, #204]	; (800288c <HAL_DMA_IRQHandler+0xe38>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01d      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a32      	ldr	r2, [pc, #200]	; (8002890 <HAL_DMA_IRQHandler+0xe3c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d018      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a30      	ldr	r2, [pc, #192]	; (8002894 <HAL_DMA_IRQHandler+0xe40>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2f      	ldr	r2, [pc, #188]	; (8002898 <HAL_DMA_IRQHandler+0xe44>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00e      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2d      	ldr	r2, [pc, #180]	; (800289c <HAL_DMA_IRQHandler+0xe48>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d009      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2c      	ldr	r2, [pc, #176]	; (80028a0 <HAL_DMA_IRQHandler+0xe4c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d004      	beq.n	80027fe <HAL_DMA_IRQHandler+0xdaa>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <HAL_DMA_IRQHandler+0xe50>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <HAL_DMA_IRQHandler+0xdbc>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 021c 	bic.w	r2, r2, #28
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e007      	b.n	8002820 <HAL_DMA_IRQHandler+0xdcc>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020e 	bic.w	r2, r2, #14
 800281e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2201      	movs	r2, #1
 800282a:	409a      	lsls	r2, r3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
 8002856:	e004      	b.n	8002862 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002858:	bf00      	nop
 800285a:	e002      	b.n	8002862 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002860:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002862:	3728      	adds	r7, #40	; 0x28
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40020010 	.word	0x40020010
 800286c:	40020028 	.word	0x40020028
 8002870:	40020040 	.word	0x40020040
 8002874:	40020058 	.word	0x40020058
 8002878:	40020070 	.word	0x40020070
 800287c:	40020088 	.word	0x40020088
 8002880:	400200a0 	.word	0x400200a0
 8002884:	400200b8 	.word	0x400200b8
 8002888:	40020410 	.word	0x40020410
 800288c:	40020428 	.word	0x40020428
 8002890:	40020440 	.word	0x40020440
 8002894:	40020458 	.word	0x40020458
 8002898:	40020470 	.word	0x40020470
 800289c:	40020488 	.word	0x40020488
 80028a0:	400204a0 	.word	0x400204a0
 80028a4:	400204b8 	.word	0x400204b8

080028a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a42      	ldr	r2, [pc, #264]	; (80029c0 <DMA_CalcBaseAndBitshift+0x118>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d04a      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a41      	ldr	r2, [pc, #260]	; (80029c4 <DMA_CalcBaseAndBitshift+0x11c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d045      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3f      	ldr	r2, [pc, #252]	; (80029c8 <DMA_CalcBaseAndBitshift+0x120>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d040      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a3e      	ldr	r2, [pc, #248]	; (80029cc <DMA_CalcBaseAndBitshift+0x124>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d03b      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <DMA_CalcBaseAndBitshift+0x128>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d036      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a3b      	ldr	r2, [pc, #236]	; (80029d4 <DMA_CalcBaseAndBitshift+0x12c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d031      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a39      	ldr	r2, [pc, #228]	; (80029d8 <DMA_CalcBaseAndBitshift+0x130>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02c      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a38      	ldr	r2, [pc, #224]	; (80029dc <DMA_CalcBaseAndBitshift+0x134>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d027      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a36      	ldr	r2, [pc, #216]	; (80029e0 <DMA_CalcBaseAndBitshift+0x138>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d022      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a35      	ldr	r2, [pc, #212]	; (80029e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d01d      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a33      	ldr	r2, [pc, #204]	; (80029e8 <DMA_CalcBaseAndBitshift+0x140>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d018      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a32      	ldr	r2, [pc, #200]	; (80029ec <DMA_CalcBaseAndBitshift+0x144>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <DMA_CalcBaseAndBitshift+0x148>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2f      	ldr	r2, [pc, #188]	; (80029f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <DMA_CalcBaseAndBitshift+0x150>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <DMA_CalcBaseAndBitshift+0xa8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2c      	ldr	r2, [pc, #176]	; (80029fc <DMA_CalcBaseAndBitshift+0x154>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <DMA_CalcBaseAndBitshift+0xac>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <DMA_CalcBaseAndBitshift+0xae>
 8002954:	2300      	movs	r3, #0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d024      	beq.n	80029a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	3b10      	subs	r3, #16
 8002962:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <DMA_CalcBaseAndBitshift+0x158>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <DMA_CalcBaseAndBitshift+0x15c>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d908      	bls.n	8002994 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <DMA_CalcBaseAndBitshift+0x160>)
 800298a:	4013      	ands	r3, r2
 800298c:	1d1a      	adds	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	659a      	str	r2, [r3, #88]	; 0x58
 8002992:	e00d      	b.n	80029b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <DMA_CalcBaseAndBitshift+0x160>)
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6593      	str	r3, [r2, #88]	; 0x58
 80029a2:	e005      	b.n	80029b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40020010 	.word	0x40020010
 80029c4:	40020028 	.word	0x40020028
 80029c8:	40020040 	.word	0x40020040
 80029cc:	40020058 	.word	0x40020058
 80029d0:	40020070 	.word	0x40020070
 80029d4:	40020088 	.word	0x40020088
 80029d8:	400200a0 	.word	0x400200a0
 80029dc:	400200b8 	.word	0x400200b8
 80029e0:	40020410 	.word	0x40020410
 80029e4:	40020428 	.word	0x40020428
 80029e8:	40020440 	.word	0x40020440
 80029ec:	40020458 	.word	0x40020458
 80029f0:	40020470 	.word	0x40020470
 80029f4:	40020488 	.word	0x40020488
 80029f8:	400204a0 	.word	0x400204a0
 80029fc:	400204b8 	.word	0x400204b8
 8002a00:	aaaaaaab 	.word	0xaaaaaaab
 8002a04:	08014b5c 	.word	0x08014b5c
 8002a08:	fffffc00 	.word	0xfffffc00

08002a0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d120      	bne.n	8002a62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d858      	bhi.n	8002ada <DMA_CheckFifoParam+0xce>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <DMA_CheckFifoParam+0x24>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002a53 	.word	0x08002a53
 8002a38:	08002a41 	.word	0x08002a41
 8002a3c:	08002adb 	.word	0x08002adb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d048      	beq.n	8002ade <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a50:	e045      	b.n	8002ade <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a5a:	d142      	bne.n	8002ae2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a60:	e03f      	b.n	8002ae2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6a:	d123      	bne.n	8002ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d838      	bhi.n	8002ae6 <DMA_CheckFifoParam+0xda>
 8002a74:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <DMA_CheckFifoParam+0x70>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002a93 	.word	0x08002a93
 8002a84:	08002a8d 	.word	0x08002a8d
 8002a88:	08002aa5 	.word	0x08002aa5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
        break;
 8002a90:	e030      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d025      	beq.n	8002aea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002aa2:	e022      	b.n	8002aea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aac:	d11f      	bne.n	8002aee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ab2:	e01c      	b.n	8002aee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d902      	bls.n	8002ac2 <DMA_CheckFifoParam+0xb6>
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d003      	beq.n	8002ac8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002ac0:	e018      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ac6:	e015      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00e      	beq.n	8002af2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8002ad8:	e00b      	b.n	8002af2 <DMA_CheckFifoParam+0xe6>
        break;
 8002ada:	bf00      	nop
 8002adc:	e00a      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
        break;
 8002ade:	bf00      	nop
 8002ae0:	e008      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
        break;
 8002ae2:	bf00      	nop
 8002ae4:	e006      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
        break;
 8002ae6:	bf00      	nop
 8002ae8:	e004      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
        break;
 8002aea:	bf00      	nop
 8002aec:	e002      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
        break;
 8002aee:	bf00      	nop
 8002af0:	e000      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
    break;
 8002af2:	bf00      	nop
    }
  }

  return status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop

08002b04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a38      	ldr	r2, [pc, #224]	; (8002bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a36      	ldr	r2, [pc, #216]	; (8002bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01d      	beq.n	8002b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a35      	ldr	r2, [pc, #212]	; (8002c00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a33      	ldr	r2, [pc, #204]	; (8002c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a32      	ldr	r2, [pc, #200]	; (8002c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a30      	ldr	r2, [pc, #192]	; (8002c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a2f      	ldr	r2, [pc, #188]	; (8002c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a2d      	ldr	r2, [pc, #180]	; (8002c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01a      	beq.n	8002ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3b08      	subs	r3, #8
 8002b74:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4b26      	ldr	r3, [pc, #152]	; (8002c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a24      	ldr	r2, [pc, #144]	; (8002c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002b90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2201      	movs	r2, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002ba0:	e024      	b.n	8002bec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3b10      	subs	r3, #16
 8002baa:	4a1e      	ldr	r2, [pc, #120]	; (8002c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d806      	bhi.n	8002bca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d902      	bls.n	8002bca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002bdc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2201      	movs	r2, #1
 8002be6:	409a      	lsls	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	58025408 	.word	0x58025408
 8002bfc:	5802541c 	.word	0x5802541c
 8002c00:	58025430 	.word	0x58025430
 8002c04:	58025444 	.word	0x58025444
 8002c08:	58025458 	.word	0x58025458
 8002c0c:	5802546c 	.word	0x5802546c
 8002c10:	58025480 	.word	0x58025480
 8002c14:	58025494 	.word	0x58025494
 8002c18:	cccccccd 	.word	0xcccccccd
 8002c1c:	16009600 	.word	0x16009600
 8002c20:	58025880 	.word	0x58025880
 8002c24:	aaaaaaab 	.word	0xaaaaaaab
 8002c28:	400204b8 	.word	0x400204b8
 8002c2c:	4002040f 	.word	0x4002040f
 8002c30:	10008200 	.word	0x10008200
 8002c34:	40020880 	.word	0x40020880

08002c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d04a      	beq.n	8002ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d847      	bhi.n	8002ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a25      	ldr	r2, [pc, #148]	; (8002cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d022      	beq.n	8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a24      	ldr	r2, [pc, #144]	; (8002cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d01d      	beq.n	8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d018      	beq.n	8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00e      	beq.n	8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002cc0:	671a      	str	r2, [r3, #112]	; 0x70
 8002cc2:	e009      	b.n	8002cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a11      	ldr	r2, [pc, #68]	; (8002d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002cd6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	2201      	movs	r2, #1
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	58025408 	.word	0x58025408
 8002cf4:	5802541c 	.word	0x5802541c
 8002cf8:	58025430 	.word	0x58025430
 8002cfc:	58025444 	.word	0x58025444
 8002d00:	58025458 	.word	0x58025458
 8002d04:	5802546c 	.word	0x5802546c
 8002d08:	58025480 	.word	0x58025480
 8002d0c:	58025494 	.word	0x58025494
 8002d10:	1600963f 	.word	0x1600963f
 8002d14:	58025940 	.word	0x58025940
 8002d18:	1000823f 	.word	0x1000823f
 8002d1c:	40020940 	.word	0x40020940

08002d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d2e:	4b89      	ldr	r3, [pc, #548]	; (8002f54 <HAL_GPIO_Init+0x234>)
 8002d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d32:	e194      	b.n	800305e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8186 	beq.w	8003058 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d005      	beq.n	8002d64 <HAL_GPIO_Init+0x44>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d130      	bne.n	8002dc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f003 0201 	and.w	r2, r3, #1
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d017      	beq.n	8002e02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	2203      	movs	r2, #3
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d123      	bne.n	8002e56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	08da      	lsrs	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3208      	adds	r2, #8
 8002e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	220f      	movs	r2, #15
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	08da      	lsrs	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	69b9      	ldr	r1, [r7, #24]
 8002e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	2203      	movs	r2, #3
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0203 	and.w	r2, r3, #3
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80e0 	beq.w	8003058 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_GPIO_Init+0x238>)
 8002e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e9e:	4a2e      	ldr	r2, [pc, #184]	; (8002f58 <HAL_GPIO_Init+0x238>)
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
 8002ea4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_GPIO_Init+0x238>)
 8002eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb6:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <HAL_GPIO_Init+0x23c>)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	220f      	movs	r2, #15
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a20      	ldr	r2, [pc, #128]	; (8002f60 <HAL_GPIO_Init+0x240>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d052      	beq.n	8002f88 <HAL_GPIO_Init+0x268>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <HAL_GPIO_Init+0x244>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d031      	beq.n	8002f4e <HAL_GPIO_Init+0x22e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_GPIO_Init+0x248>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02b      	beq.n	8002f4a <HAL_GPIO_Init+0x22a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_GPIO_Init+0x24c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d025      	beq.n	8002f46 <HAL_GPIO_Init+0x226>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <HAL_GPIO_Init+0x250>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01f      	beq.n	8002f42 <HAL_GPIO_Init+0x222>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_GPIO_Init+0x254>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d019      	beq.n	8002f3e <HAL_GPIO_Init+0x21e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <HAL_GPIO_Init+0x258>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_GPIO_Init+0x21a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_GPIO_Init+0x25c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00d      	beq.n	8002f36 <HAL_GPIO_Init+0x216>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_GPIO_Init+0x260>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <HAL_GPIO_Init+0x212>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <HAL_GPIO_Init+0x264>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_GPIO_Init+0x20e>
 8002f2a:	2309      	movs	r3, #9
 8002f2c:	e02d      	b.n	8002f8a <HAL_GPIO_Init+0x26a>
 8002f2e:	230a      	movs	r3, #10
 8002f30:	e02b      	b.n	8002f8a <HAL_GPIO_Init+0x26a>
 8002f32:	2308      	movs	r3, #8
 8002f34:	e029      	b.n	8002f8a <HAL_GPIO_Init+0x26a>
 8002f36:	2307      	movs	r3, #7
 8002f38:	e027      	b.n	8002f8a <HAL_GPIO_Init+0x26a>
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	e025      	b.n	8002f8a <HAL_GPIO_Init+0x26a>
 8002f3e:	2305      	movs	r3, #5
 8002f40:	e023      	b.n	8002f8a <HAL_GPIO_Init+0x26a>
 8002f42:	2304      	movs	r3, #4
 8002f44:	e021      	b.n	8002f8a <HAL_GPIO_Init+0x26a>
 8002f46:	2303      	movs	r3, #3
 8002f48:	e01f      	b.n	8002f8a <HAL_GPIO_Init+0x26a>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e01d      	b.n	8002f8a <HAL_GPIO_Init+0x26a>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e01b      	b.n	8002f8a <HAL_GPIO_Init+0x26a>
 8002f52:	bf00      	nop
 8002f54:	58000080 	.word	0x58000080
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	58000400 	.word	0x58000400
 8002f60:	58020000 	.word	0x58020000
 8002f64:	58020400 	.word	0x58020400
 8002f68:	58020800 	.word	0x58020800
 8002f6c:	58020c00 	.word	0x58020c00
 8002f70:	58021000 	.word	0x58021000
 8002f74:	58021400 	.word	0x58021400
 8002f78:	58021800 	.word	0x58021800
 8002f7c:	58021c00 	.word	0x58021c00
 8002f80:	58022000 	.word	0x58022000
 8002f84:	58022400 	.word	0x58022400
 8002f88:	2300      	movs	r3, #0
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	f002 0203 	and.w	r2, r2, #3
 8002f90:	0092      	lsls	r2, r2, #2
 8002f92:	4093      	lsls	r3, r2
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f9a:	4938      	ldr	r1, [pc, #224]	; (800307c <HAL_GPIO_Init+0x35c>)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	3301      	adds	r3, #1
 800305c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	f47f ae63 	bne.w	8002d34 <HAL_GPIO_Init+0x14>
  }
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	3724      	adds	r7, #36	; 0x24
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	58000400 	.word	0x58000400

08003080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
 800308c:	4613      	mov	r3, r2
 800308e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003090:	787b      	ldrb	r3, [r7, #1]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800309c:	e003      	b.n	80030a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800309e:	887b      	ldrh	r3, [r7, #2]
 80030a0:	041a      	lsls	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	619a      	str	r2, [r3, #24]
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030c4:	887a      	ldrh	r2, [r7, #2]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4013      	ands	r3, r2
 80030ca:	041a      	lsls	r2, r3, #16
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	887b      	ldrh	r3, [r7, #2]
 80030d2:	400b      	ands	r3, r1
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	619a      	str	r2, [r3, #24]
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e8:	b08f      	sub	sp, #60	; 0x3c
 80030ea:	af0a      	add	r7, sp, #40	; 0x28
 80030ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e116      	b.n	8003326 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f011 f920 	bl	8014358 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2203      	movs	r2, #3
 800311c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f008 f895 	bl	800b266 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	687e      	ldr	r6, [r7, #4]
 8003144:	466d      	mov	r5, sp
 8003146:	f106 0410 	add.w	r4, r6, #16
 800314a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800314c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003152:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003156:	e885 0003 	stmia.w	r5, {r0, r1}
 800315a:	1d33      	adds	r3, r6, #4
 800315c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800315e:	6838      	ldr	r0, [r7, #0]
 8003160:	f007 ff60 	bl	800b024 <USB_CoreInit>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0d7      	b.n	8003326 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f008 f883 	bl	800b288 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
 8003186:	e04a      	b.n	800321e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	333d      	adds	r3, #61	; 0x3d
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	333c      	adds	r3, #60	; 0x3c
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	b298      	uxth	r0, r3
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	3356      	adds	r3, #86	; 0x56
 80031c4:	4602      	mov	r2, r0
 80031c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3340      	adds	r3, #64	; 0x40
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	3344      	adds	r3, #68	; 0x44
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	3348      	adds	r3, #72	; 0x48
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	334c      	adds	r3, #76	; 0x4c
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	3301      	adds	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d3af      	bcc.n	8003188 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	e044      	b.n	80032b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	3301      	adds	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d3b5      	bcc.n	800322e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	687e      	ldr	r6, [r7, #4]
 80032ca:	466d      	mov	r5, sp
 80032cc:	f106 0410 	add.w	r4, r6, #16
 80032d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80032e0:	1d33      	adds	r3, r6, #4
 80032e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e4:	6838      	ldr	r0, [r7, #0]
 80032e6:	f008 f81b 	bl	800b320 <USB_DevInit>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e014      	b.n	8003326 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	2b01      	cmp	r3, #1
 8003312:	d102      	bne.n	800331a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f001 f99d 	bl	8004654 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f009 f85d 	bl	800c3de <USB_DevDisconnect>

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800332e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_PCD_Start+0x1c>
 8003346:	2302      	movs	r3, #2
 8003348:	e022      	b.n	8003390 <HAL_PCD_Start+0x62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f007 ff64 	bl	800b244 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f009 f80b 	bl	800c39c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b08d      	sub	sp, #52	; 0x34
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f009 f8c9 	bl	800c546 <USB_GetMode>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 84b7 	bne.w	8003d2a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f009 f82d 	bl	800c420 <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 84ad 	beq.w	8003d28 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f009 f81a 	bl	800c420 <USB_ReadInterrupts>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d107      	bne.n	8003406 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f002 0202 	and.w	r2, r2, #2
 8003404:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f009 f808 	bl	800c420 <USB_ReadInterrupts>
 8003410:	4603      	mov	r3, r0
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b10      	cmp	r3, #16
 8003418:	d161      	bne.n	80034de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699a      	ldr	r2, [r3, #24]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0210 	bic.w	r2, r2, #16
 8003428:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	3304      	adds	r3, #4
 8003448:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	0c5b      	lsrs	r3, r3, #17
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	2b02      	cmp	r3, #2
 8003454:	d124      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d035      	beq.n	80034ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800346c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003470:	b29b      	uxth	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	6a38      	ldr	r0, [r7, #32]
 8003476:	f008 fe3f 	bl	800c0f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003486:	441a      	add	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003498:	441a      	add	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	615a      	str	r2, [r3, #20]
 800349e:	e016      	b.n	80034ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	0c5b      	lsrs	r3, r3, #17
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	d110      	bne.n	80034ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034b2:	2208      	movs	r2, #8
 80034b4:	4619      	mov	r1, r3
 80034b6:	6a38      	ldr	r0, [r7, #32]
 80034b8:	f008 fe1e 	bl	800c0f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c8:	441a      	add	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0210 	orr.w	r2, r2, #16
 80034dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f008 ff9c 	bl	800c420 <USB_ReadInterrupts>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034f2:	f040 80a7 	bne.w	8003644 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f008 ffa1 	bl	800c446 <USB_ReadDevAllOutEpInterrupt>
 8003504:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003506:	e099      	b.n	800363c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 808e 	beq.w	8003630 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f008 ffc5 	bl	800c4ae <USB_ReadDevOutEPInterrupt>
 8003524:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00c      	beq.n	800354a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353c:	461a      	mov	r2, r3
 800353e:	2301      	movs	r3, #1
 8003540:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 feff 	bl	8004348 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00c      	beq.n	800356e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003560:	461a      	mov	r2, r3
 8003562:	2308      	movs	r3, #8
 8003564:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 ffd5 	bl	8004518 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003584:	461a      	mov	r2, r3
 8003586:	2310      	movs	r3, #16
 8003588:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d030      	beq.n	80035f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b80      	cmp	r3, #128	; 0x80
 800359e:	d109      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	3304      	adds	r3, #4
 80035c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d108      	bne.n	80035e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f010 ffe0 	bl	80145a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	2302      	movs	r3, #2
 80035f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360c:	461a      	mov	r2, r3
 800360e:	2320      	movs	r3, #32
 8003610:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	461a      	mov	r2, r3
 800362a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800362e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	3301      	adds	r3, #1
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	f47f af62 	bne.w	8003508 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f008 fee9 	bl	800c420 <USB_ReadInterrupts>
 800364e:	4603      	mov	r3, r0
 8003650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003658:	f040 80db 	bne.w	8003812 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f008 ff0a 	bl	800c47a <USB_ReadDevAllInEpInterrupt>
 8003666:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800366c:	e0cd      	b.n	800380a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80c2 	beq.w	80037fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f008 ff30 	bl	800c4ea <USB_ReadDevInEPInterrupt>
 800368a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d057      	beq.n	8003746 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	2201      	movs	r2, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69f9      	ldr	r1, [r7, #28]
 80036b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036b6:	4013      	ands	r3, r2
 80036b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	461a      	mov	r2, r3
 80036c8:	2301      	movs	r3, #1
 80036ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d132      	bne.n	800373a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	3348      	adds	r3, #72	; 0x48
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4403      	add	r3, r0
 80036f4:	3344      	adds	r3, #68	; 0x44
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4419      	add	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4403      	add	r3, r0
 8003708:	3348      	adds	r3, #72	; 0x48
 800370a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	2b00      	cmp	r3, #0
 8003710:	d113      	bne.n	800373a <HAL_PCD_IRQHandler+0x3a2>
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	334c      	adds	r3, #76	; 0x4c
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d108      	bne.n	800373a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003732:	461a      	mov	r2, r3
 8003734:	2101      	movs	r1, #1
 8003736:	f008 ff39 	bl	800c5ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f010 feaa 	bl	801449a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375c:	461a      	mov	r2, r3
 800375e:	2308      	movs	r3, #8
 8003760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	461a      	mov	r2, r3
 800377a:	2310      	movs	r3, #16
 800377c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003794:	461a      	mov	r2, r3
 8003796:	2340      	movs	r3, #64	; 0x40
 8003798:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d023      	beq.n	80037ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a6:	6a38      	ldr	r0, [r7, #32]
 80037a8:	f007 ff18 	bl	800b5dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	3338      	adds	r3, #56	; 0x38
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	3304      	adds	r3, #4
 80037be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	78db      	ldrb	r3, [r3, #3]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d108      	bne.n	80037da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f010 fef7 	bl	80145c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e6:	461a      	mov	r2, r3
 80037e8:	2302      	movs	r3, #2
 80037ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fd17 	bl	800422c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	3301      	adds	r3, #1
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	2b00      	cmp	r3, #0
 800380e:	f47f af2e 	bne.w	800366e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f008 fe02 	bl	800c420 <USB_ReadInterrupts>
 800381c:	4603      	mov	r3, r0
 800381e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003826:	d122      	bne.n	800386e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003842:	2b01      	cmp	r3, #1
 8003844:	d108      	bne.n	8003858 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800384e:	2100      	movs	r1, #0
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 ff23 	bl	800469c <HAL_PCDEx_LPM_Callback>
 8003856:	e002      	b.n	800385e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f010 fe95 	bl	8014588 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800386c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f008 fdd4 	bl	800c420 <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003882:	d112      	bne.n	80038aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d102      	bne.n	800389a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f010 fe51 	bl	801453c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f008 fdb6 	bl	800c420 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038be:	d121      	bne.n	8003904 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80038ce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d111      	bne.n	80038fe <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	f003 020f 	and.w	r2, r3, #15
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038f4:	2101      	movs	r1, #1
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fed0 	bl	800469c <HAL_PCDEx_LPM_Callback>
 80038fc:	e002      	b.n	8003904 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f010 fe1c 	bl	801453c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f008 fd89 	bl	800c420 <USB_ReadInterrupts>
 800390e:	4603      	mov	r3, r0
 8003910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003918:	f040 80b7 	bne.w	8003a8a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2110      	movs	r1, #16
 8003936:	4618      	mov	r0, r3
 8003938:	f007 fe50 	bl	800b5dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800393c:	2300      	movs	r3, #0
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003940:	e046      	b.n	80039d0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394e:	461a      	mov	r2, r3
 8003950:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003954:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003966:	0151      	lsls	r1, r2, #5
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	440a      	add	r2, r1
 800396c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003970:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003974:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003982:	461a      	mov	r2, r3
 8003984:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003988:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ba:	0151      	lsls	r1, r2, #5
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	440a      	add	r2, r1
 80039c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	3301      	adds	r3, #1
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3b3      	bcc.n	8003942 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a06:	f043 030b 	orr.w	r3, r3, #11
 8003a0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a1c:	f043 030b 	orr.w	r3, r3, #11
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	e015      	b.n	8003a50 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	4619      	mov	r1, r3
 8003a34:	f242 032b 	movw	r3, #8235	; 0x202b
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a4a:	f043 030b 	orr.w	r3, r3, #11
 8003a4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a74:	461a      	mov	r2, r3
 8003a76:	f008 fd99 	bl	800c5ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f008 fcc6 	bl	800c420 <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9e:	d124      	bne.n	8003aea <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f008 fd5d 	bl	800c564 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f007 fe11 	bl	800b6d6 <USB_GetDevSpeed>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681c      	ldr	r4, [r3, #0]
 8003ac0:	f001 fdcc 	bl	800565c <HAL_RCC_GetHCLKFreq>
 8003ac4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f007 fb16 	bl	800b100 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f010 fd08 	bl	80144ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f008 fc96 	bl	800c420 <USB_ReadInterrupts>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d10a      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f010 fce5 	bl	80144ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f002 0208 	and.w	r2, r2, #8
 8003b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f008 fc81 	bl	800c420 <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b80      	cmp	r3, #128	; 0x80
 8003b26:	d122      	bne.n	8003b6e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b34:	2301      	movs	r3, #1
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	e014      	b.n	8003b64 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d105      	bne.n	8003b5e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	4619      	mov	r1, r3
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fb09 	bl	8004170 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	3301      	adds	r3, #1
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d3e5      	bcc.n	8003b3a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f008 fc54 	bl	800c420 <USB_ReadInterrupts>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b82:	d13b      	bne.n	8003bfc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b84:	2301      	movs	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	e02b      	b.n	8003be2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3340      	adds	r3, #64	; 0x40
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d115      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	da12      	bge.n	8003bdc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	333f      	adds	r3, #63	; 0x3f
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 faca 	bl	8004170 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	3301      	adds	r3, #1
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d3ce      	bcc.n	8003b8a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f008 fc0d 	bl	800c420 <USB_ReadInterrupts>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c10:	d155      	bne.n	8003cbe <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c12:	2301      	movs	r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	e045      	b.n	8003ca4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d12e      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	da2b      	bge.n	8003c9e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d121      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c9a:	6053      	str	r3, [r2, #4]
            break;
 8003c9c:	e007      	b.n	8003cae <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3b4      	bcc.n	8003c18 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f008 fbac 	bl	800c420 <USB_ReadInterrupts>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd2:	d10a      	bne.n	8003cea <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f010 fc89 	bl	80145ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f008 fb96 	bl	800c420 <USB_ReadInterrupts>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d115      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f010 fc79 	bl	8014608 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	e000      	b.n	8003d2a <HAL_PCD_IRQHandler+0x992>
      return;
 8003d28:	bf00      	nop
    }
  }
}
 8003d2a:	3734      	adds	r7, #52	; 0x34
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd90      	pop	{r4, r7, pc}

08003d30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_PCD_SetAddress+0x1a>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e013      	b.n	8003d72 <HAL_PCD_SetAddress+0x42>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f008 faf4 	bl	800c350 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	4608      	mov	r0, r1
 8003d84:	4611      	mov	r1, r2
 8003d86:	461a      	mov	r2, r3
 8003d88:	4603      	mov	r3, r0
 8003d8a:	70fb      	strb	r3, [r7, #3]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	803b      	strh	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	da0f      	bge.n	8003dc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 020f 	and.w	r2, r3, #15
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	3338      	adds	r3, #56	; 0x38
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4413      	add	r3, r2
 8003db4:	3304      	adds	r3, #4
 8003db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	705a      	strb	r2, [r3, #1]
 8003dbe:	e00f      	b.n	8003de0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dec:	883a      	ldrh	r2, [r7, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	78ba      	ldrb	r2, [r7, #2]
 8003df6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e0a:	78bb      	ldrb	r3, [r7, #2]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d102      	bne.n	8003e16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_PCD_EP_Open+0xaa>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e00e      	b.n	8003e42 <HAL_PCD_EP_Open+0xc8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68f9      	ldr	r1, [r7, #12]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f007 fc74 	bl	800b720 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e40:	7afb      	ldrb	r3, [r7, #11]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	da0f      	bge.n	8003e7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 020f 	and.w	r2, r3, #15
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	3338      	adds	r3, #56	; 0x38
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	3304      	adds	r3, #4
 8003e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	705a      	strb	r2, [r3, #1]
 8003e7c:	e00f      	b.n	8003e9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	f003 020f 	and.w	r2, r3, #15
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	3304      	adds	r3, #4
 8003e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_PCD_EP_Close+0x6e>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e00e      	b.n	8003ed6 <HAL_PCD_EP_Close+0x8c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f007 fcb2 	bl	800b830 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	460b      	mov	r3, r1
 8003eec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eee:	7afb      	ldrb	r3, [r7, #11]
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	3304      	adds	r3, #4
 8003f06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2200      	movs	r2, #0
 8003f18:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f20:	7afb      	ldrb	r3, [r7, #11]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d102      	bne.n	8003f3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	6979      	ldr	r1, [r7, #20]
 8003f48:	f007 fd4e 	bl	800b9e8 <USB_EPStartXfer>

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003f78:	681b      	ldr	r3, [r3, #0]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b086      	sub	sp, #24
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	460b      	mov	r3, r1
 8003f94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f96:	7afb      	ldrb	r3, [r7, #11]
 8003f98:	f003 020f 	and.w	r2, r3, #15
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	3338      	adds	r3, #56	; 0x38
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	3304      	adds	r3, #4
 8003fac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc6:	7afb      	ldrb	r3, [r7, #11]
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	6979      	ldr	r1, [r7, #20]
 8003fee:	f007 fcfb 	bl	800b9e8 <USB_EPStartXfer>

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	f003 020f 	and.w	r2, r3, #15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	d901      	bls.n	800401a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e050      	b.n	80040bc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800401a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800401e:	2b00      	cmp	r3, #0
 8004020:	da0f      	bge.n	8004042 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 020f 	and.w	r2, r3, #15
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	3338      	adds	r3, #56	; 0x38
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	3304      	adds	r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	705a      	strb	r2, [r3, #1]
 8004040:	e00d      	b.n	800405e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	3304      	adds	r3, #4
 8004056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_PCD_EP_SetStall+0x82>
 800407a:	2302      	movs	r3, #2
 800407c:	e01e      	b.n	80040bc <HAL_PCD_EP_SetStall+0xc0>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	4618      	mov	r0, r3
 800408e:	f008 f88b 	bl	800c1a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	b2d9      	uxtb	r1, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040ac:	461a      	mov	r2, r3
 80040ae:	f008 fa7d 	bl	800c5ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	f003 020f 	and.w	r2, r3, #15
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d901      	bls.n	80040e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e042      	b.n	8004168 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	da0f      	bge.n	800410a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	f003 020f 	and.w	r2, r3, #15
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	3338      	adds	r3, #56	; 0x38
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	3304      	adds	r3, #4
 8004100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	705a      	strb	r2, [r3, #1]
 8004108:	e00f      	b.n	800412a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	f003 020f 	and.w	r2, r3, #15
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4413      	add	r3, r2
 8004120:	3304      	adds	r3, #4
 8004122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	b2da      	uxtb	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_PCD_EP_ClrStall+0x86>
 8004146:	2302      	movs	r3, #2
 8004148:	e00e      	b.n	8004168 <HAL_PCD_EP_ClrStall+0xa4>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68f9      	ldr	r1, [r7, #12]
 8004158:	4618      	mov	r0, r3
 800415a:	f008 f893 	bl	800c284 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800417c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004180:	2b00      	cmp	r3, #0
 8004182:	da0c      	bge.n	800419e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	f003 020f 	and.w	r2, r3, #15
 800418a:	4613      	mov	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	3338      	adds	r3, #56	; 0x38
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	3304      	adds	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e00c      	b.n	80041b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	f003 020f 	and.w	r2, r3, #15
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	3304      	adds	r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68f9      	ldr	r1, [r7, #12]
 80041be:	4618      	mov	r0, r3
 80041c0:	f007 feb2 	bl	800bf28 <USB_EPStopXfer>
 80041c4:	4603      	mov	r3, r0
 80041c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041c8:	7afb      	ldrb	r3, [r7, #11]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_PCD_EP_Flush+0x1a>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e01b      	b.n	8004224 <HAL_PCD_EP_Flush+0x52>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 80041f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	da09      	bge.n	8004210 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f007 f9e7 	bl	800b5dc <USB_FlushTxFifo>
 800420e:	e004      	b.n	800421a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f007 fa15 	bl	800b644 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	3338      	adds	r3, #56	; 0x38
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4413      	add	r3, r2
 8004250:	3304      	adds	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	429a      	cmp	r2, r3
 800425e:	d901      	bls.n	8004264 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e06c      	b.n	800433e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	429a      	cmp	r2, r3
 8004278:	d902      	bls.n	8004280 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3303      	adds	r3, #3
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004288:	e02b      	b.n	80042e2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	429a      	cmp	r2, r3
 800429e:	d902      	bls.n	80042a6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3303      	adds	r3, #3
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68d9      	ldr	r1, [r3, #12]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	4603      	mov	r3, r0
 80042c4:	6978      	ldr	r0, [r7, #20]
 80042c6:	f007 fed9 	bl	800c07c <USB_WritePacket>

    ep->xfer_buff  += len;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	441a      	add	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	441a      	add	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d809      	bhi.n	800430c <PCD_WriteEmptyTxFifo+0xe0>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004300:	429a      	cmp	r2, r3
 8004302:	d203      	bcs.n	800430c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1be      	bne.n	800428a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	429a      	cmp	r2, r3
 8004316:	d811      	bhi.n	800433c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	2201      	movs	r2, #1
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	43db      	mvns	r3, r3
 8004332:	6939      	ldr	r1, [r7, #16]
 8004334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004338:	4013      	ands	r3, r2
 800433a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	333c      	adds	r3, #60	; 0x3c
 8004360:	3304      	adds	r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d17b      	bne.n	8004476 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d015      	beq.n	80043b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4a61      	ldr	r2, [pc, #388]	; (8004510 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	f240 80b9 	bls.w	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80b3 	beq.w	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	461a      	mov	r2, r3
 80043ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b0:	6093      	str	r3, [r2, #8]
 80043b2:	e0a7      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	2320      	movs	r3, #32
 80043ce:	6093      	str	r3, [r2, #8]
 80043d0:	e098      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f040 8093 	bne.w	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4a4b      	ldr	r2, [pc, #300]	; (8004510 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d90f      	bls.n	8004406 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004402:	6093      	str	r3, [r2, #8]
 8004404:	e07e      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4413      	add	r3, r2
 8004418:	3304      	adds	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	0159      	lsls	r1, r3, #5
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	440b      	add	r3, r1
 8004428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004432:	1ad2      	subs	r2, r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d114      	bne.n	8004468 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004450:	461a      	mov	r2, r3
 8004452:	2101      	movs	r1, #1
 8004454:	f008 f8aa 	bl	800c5ac <USB_EP0_OutStart>
 8004458:	e006      	b.n	8004468 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	441a      	add	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f00f fff8 	bl	8014464 <HAL_PCD_DataOutStageCallback>
 8004474:	e046      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4a26      	ldr	r2, [pc, #152]	; (8004514 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d124      	bne.n	80044c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	461a      	mov	r2, r3
 8004496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449a:	6093      	str	r3, [r2, #8]
 800449c:	e032      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b4:	461a      	mov	r2, r3
 80044b6:	2320      	movs	r3, #32
 80044b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f00f ffcf 	bl	8014464 <HAL_PCD_DataOutStageCallback>
 80044c6:	e01d      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d114      	bne.n	80044f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	4613      	mov	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d108      	bne.n	80044f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044f0:	461a      	mov	r2, r3
 80044f2:	2100      	movs	r1, #0
 80044f4:	f008 f85a 	bl	800c5ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f00f ffb0 	bl	8014464 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	4f54300a 	.word	0x4f54300a
 8004514:	4f54310a 	.word	0x4f54310a

08004518 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	333c      	adds	r3, #60	; 0x3c
 8004530:	3304      	adds	r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d90e      	bls.n	800456c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f00f ff67 	bl	8014440 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a0a      	ldr	r2, [pc, #40]	; (80045a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d90c      	bls.n	8004594 <PCD_EP_OutSetupPacket_int+0x7c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d108      	bne.n	8004594 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800458c:	461a      	mov	r2, r3
 800458e:	2101      	movs	r1, #1
 8004590:	f008 f80c 	bl	800c5ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	4f54300a 	.word	0x4f54300a

080045a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
 80045b0:	4613      	mov	r3, r2
 80045b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045c2:	883b      	ldrh	r3, [r7, #0]
 80045c4:	0419      	lsls	r1, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
 80045d0:	e028      	b.n	8004624 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4413      	add	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
 80045e4:	e00d      	b.n	8004602 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	3340      	adds	r3, #64	; 0x40
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4413      	add	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	3301      	adds	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	3b01      	subs	r3, #1
 8004608:	429a      	cmp	r2, r3
 800460a:	d3ec      	bcc.n	80045e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800460c:	883b      	ldrh	r3, [r7, #0]
 800460e:	0418      	lsls	r0, r3, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	3b01      	subs	r3, #1
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	4302      	orrs	r2, r0
 800461c:	3340      	adds	r3, #64	; 0x40
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	460b      	mov	r3, r1
 800463c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	887a      	ldrh	r2, [r7, #2]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_PCDEx_ActivateLPM+0x44>)
 8004684:	4313      	orrs	r3, r2
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	10000003 	.word	0x10000003

0800469c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_PWREx_ConfigSupply+0x70>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d00a      	beq.n	80046de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046c8:	4b16      	ldr	r3, [pc, #88]	; (8004724 <HAL_PWREx_ConfigSupply+0x70>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d001      	beq.n	80046da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e01f      	b.n	800471a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e01d      	b.n	800471a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <HAL_PWREx_ConfigSupply+0x70>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f023 0207 	bic.w	r2, r3, #7
 80046e6:	490f      	ldr	r1, [pc, #60]	; (8004724 <HAL_PWREx_ConfigSupply+0x70>)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046ee:	f7fc fac3 	bl	8000c78 <HAL_GetTick>
 80046f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046f4:	e009      	b.n	800470a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046f6:	f7fc fabf 	bl	8000c78 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004704:	d901      	bls.n	800470a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e007      	b.n	800471a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_PWREx_ConfigSupply+0x70>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	d1ee      	bne.n	80046f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	58024800 	.word	0x58024800

08004728 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4a04      	ldr	r2, [pc, #16]	; (8004744 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004736:	60d3      	str	r3, [r2, #12]
}
 8004738:	bf00      	nop
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	58024800 	.word	0x58024800

08004748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	; 0x30
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f000 bc48 	b.w	8004fec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8088 	beq.w	800487a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800476a:	4b99      	ldr	r3, [pc, #612]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004774:	4b96      	ldr	r3, [pc, #600]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	2b10      	cmp	r3, #16
 800477e:	d007      	beq.n	8004790 <HAL_RCC_OscConfig+0x48>
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	2b18      	cmp	r3, #24
 8004784:	d111      	bne.n	80047aa <HAL_RCC_OscConfig+0x62>
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d10c      	bne.n	80047aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004790:	4b8f      	ldr	r3, [pc, #572]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d06d      	beq.n	8004878 <HAL_RCC_OscConfig+0x130>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d169      	bne.n	8004878 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f000 bc21 	b.w	8004fec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x7a>
 80047b4:	4b86      	ldr	r3, [pc, #536]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a85      	ldr	r2, [pc, #532]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80047ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e02e      	b.n	8004820 <HAL_RCC_OscConfig+0xd8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x9c>
 80047ca:	4b81      	ldr	r3, [pc, #516]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a80      	ldr	r2, [pc, #512]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80047d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	4b7e      	ldr	r3, [pc, #504]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a7d      	ldr	r2, [pc, #500]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80047dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e01d      	b.n	8004820 <HAL_RCC_OscConfig+0xd8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0xc0>
 80047ee:	4b78      	ldr	r3, [pc, #480]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a77      	ldr	r2, [pc, #476]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80047f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	4b75      	ldr	r3, [pc, #468]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a74      	ldr	r2, [pc, #464]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e00b      	b.n	8004820 <HAL_RCC_OscConfig+0xd8>
 8004808:	4b71      	ldr	r3, [pc, #452]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a70      	ldr	r2, [pc, #448]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 800480e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4b6e      	ldr	r3, [pc, #440]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6d      	ldr	r2, [pc, #436]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 800481a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800481e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d013      	beq.n	8004850 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fc fa26 	bl	8000c78 <HAL_GetTick>
 800482c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004830:	f7fc fa22 	bl	8000c78 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e3d4      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004842:	4b63      	ldr	r3, [pc, #396]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0xe8>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fc fa12 	bl	8000c78 <HAL_GetTick>
 8004854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004858:	f7fc fa0e 	bl	8000c78 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	; 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e3c0      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800486a:	4b59      	ldr	r3, [pc, #356]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x110>
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 80ca 	beq.w	8004a1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004888:	4b51      	ldr	r3, [pc, #324]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004890:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004892:	4b4f      	ldr	r3, [pc, #316]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <HAL_RCC_OscConfig+0x166>
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	2b18      	cmp	r3, #24
 80048a2:	d156      	bne.n	8004952 <HAL_RCC_OscConfig+0x20a>
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d151      	bne.n	8004952 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048ae:	4b48      	ldr	r3, [pc, #288]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_RCC_OscConfig+0x17e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e392      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048c6:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 0219 	bic.w	r2, r3, #25
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	493f      	ldr	r1, [pc, #252]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7fc f9ce 	bl	8000c78 <HAL_GetTick>
 80048dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e0:	f7fc f9ca 	bl	8000c78 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e37c      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048f2:	4b37      	ldr	r3, [pc, #220]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fe:	f7fc f9eb 	bl	8000cd8 <HAL_GetREVID>
 8004902:	4603      	mov	r3, r0
 8004904:	f241 0203 	movw	r2, #4099	; 0x1003
 8004908:	4293      	cmp	r3, r2
 800490a:	d817      	bhi.n	800493c <HAL_RCC_OscConfig+0x1f4>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d108      	bne.n	8004926 <HAL_RCC_OscConfig+0x1de>
 8004914:	4b2e      	ldr	r3, [pc, #184]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800491c:	4a2c      	ldr	r2, [pc, #176]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 800491e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004922:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004924:	e07a      	b.n	8004a1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004926:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	031b      	lsls	r3, r3, #12
 8004934:	4926      	ldr	r1, [pc, #152]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004936:	4313      	orrs	r3, r2
 8004938:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800493a:	e06f      	b.n	8004a1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493c:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	061b      	lsls	r3, r3, #24
 800494a:	4921      	ldr	r1, [pc, #132]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 800494c:	4313      	orrs	r3, r2
 800494e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004950:	e064      	b.n	8004a1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d047      	beq.n	80049ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800495a:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 0219 	bic.w	r2, r3, #25
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	491a      	ldr	r1, [pc, #104]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fc f984 	bl	8000c78 <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004974:	f7fc f980 	bl	8000c78 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e332      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004986:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004992:	f7fc f9a1 	bl	8000cd8 <HAL_GetREVID>
 8004996:	4603      	mov	r3, r0
 8004998:	f241 0203 	movw	r2, #4099	; 0x1003
 800499c:	4293      	cmp	r3, r2
 800499e:	d819      	bhi.n	80049d4 <HAL_RCC_OscConfig+0x28c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d108      	bne.n	80049ba <HAL_RCC_OscConfig+0x272>
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80049b0:	4a07      	ldr	r2, [pc, #28]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80049b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b6:	6053      	str	r3, [r2, #4]
 80049b8:	e030      	b.n	8004a1c <HAL_RCC_OscConfig+0x2d4>
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	031b      	lsls	r3, r3, #12
 80049c8:	4901      	ldr	r1, [pc, #4]	; (80049d0 <HAL_RCC_OscConfig+0x288>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	604b      	str	r3, [r1, #4]
 80049ce:	e025      	b.n	8004a1c <HAL_RCC_OscConfig+0x2d4>
 80049d0:	58024400 	.word	0x58024400
 80049d4:	4b9a      	ldr	r3, [pc, #616]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	061b      	lsls	r3, r3, #24
 80049e2:	4997      	ldr	r1, [pc, #604]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	604b      	str	r3, [r1, #4]
 80049e8:	e018      	b.n	8004a1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ea:	4b95      	ldr	r3, [pc, #596]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a94      	ldr	r2, [pc, #592]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fc f93f 	bl	8000c78 <HAL_GetTick>
 80049fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fe:	f7fc f93b 	bl	8000c78 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e2ed      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a10:	4b8b      	ldr	r3, [pc, #556]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f0      	bne.n	80049fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80a9 	beq.w	8004b7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2a:	4b85      	ldr	r3, [pc, #532]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a34:	4b82      	ldr	r3, [pc, #520]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d007      	beq.n	8004a50 <HAL_RCC_OscConfig+0x308>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b18      	cmp	r3, #24
 8004a44:	d13a      	bne.n	8004abc <HAL_RCC_OscConfig+0x374>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d135      	bne.n	8004abc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a50:	4b7b      	ldr	r3, [pc, #492]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_OscConfig+0x320>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e2c1      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a68:	f7fc f936 	bl	8000cd8 <HAL_GetREVID>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d817      	bhi.n	8004aa6 <HAL_RCC_OscConfig+0x35e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d108      	bne.n	8004a90 <HAL_RCC_OscConfig+0x348>
 8004a7e:	4b70      	ldr	r3, [pc, #448]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004a86:	4a6e      	ldr	r2, [pc, #440]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a8c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a8e:	e075      	b.n	8004b7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a90:	4b6b      	ldr	r3, [pc, #428]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	069b      	lsls	r3, r3, #26
 8004a9e:	4968      	ldr	r1, [pc, #416]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aa4:	e06a      	b.n	8004b7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aa6:	4b66      	ldr	r3, [pc, #408]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	061b      	lsls	r3, r3, #24
 8004ab4:	4962      	ldr	r1, [pc, #392]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aba:	e05f      	b.n	8004b7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d042      	beq.n	8004b4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ac4:	4b5e      	ldr	r3, [pc, #376]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a5d      	ldr	r2, [pc, #372]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fc f8d2 	bl	8000c78 <HAL_GetTick>
 8004ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ad8:	f7fc f8ce 	bl	8000c78 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e280      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004aea:	4b55      	ldr	r3, [pc, #340]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004af6:	f7fc f8ef 	bl	8000cd8 <HAL_GetREVID>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d817      	bhi.n	8004b34 <HAL_RCC_OscConfig+0x3ec>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d108      	bne.n	8004b1e <HAL_RCC_OscConfig+0x3d6>
 8004b0c:	4b4c      	ldr	r3, [pc, #304]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b14:	4a4a      	ldr	r2, [pc, #296]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b1a:	6053      	str	r3, [r2, #4]
 8004b1c:	e02e      	b.n	8004b7c <HAL_RCC_OscConfig+0x434>
 8004b1e:	4b48      	ldr	r3, [pc, #288]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	069b      	lsls	r3, r3, #26
 8004b2c:	4944      	ldr	r1, [pc, #272]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	604b      	str	r3, [r1, #4]
 8004b32:	e023      	b.n	8004b7c <HAL_RCC_OscConfig+0x434>
 8004b34:	4b42      	ldr	r3, [pc, #264]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	061b      	lsls	r3, r3, #24
 8004b42:	493f      	ldr	r1, [pc, #252]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60cb      	str	r3, [r1, #12]
 8004b48:	e018      	b.n	8004b7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b4a:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a3c      	ldr	r2, [pc, #240]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b56:	f7fc f88f 	bl	8000c78 <HAL_GetTick>
 8004b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b5e:	f7fc f88b 	bl	8000c78 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e23d      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b70:	4b33      	ldr	r3, [pc, #204]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d036      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d019      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b94:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9c:	f7fc f86c 	bl	8000c78 <HAL_GetTick>
 8004ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba4:	f7fc f868 	bl	8000c78 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e21a      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x45c>
 8004bc2:	e018      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd0:	f7fc f852 	bl	8000c78 <HAL_GetTick>
 8004bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd8:	f7fc f84e 	bl	8000c78 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e200      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bea:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d039      	beq.n	8004c76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01c      	beq.n	8004c44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c16:	f7fc f82f 	bl	8000c78 <HAL_GetTick>
 8004c1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c1e:	f7fc f82b 	bl	8000c78 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e1dd      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <HAL_RCC_OscConfig+0x4f8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCC_OscConfig+0x4d6>
 8004c3c:	e01b      	b.n	8004c76 <HAL_RCC_OscConfig+0x52e>
 8004c3e:	bf00      	nop
 8004c40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c44:	4b9b      	ldr	r3, [pc, #620]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a9a      	ldr	r2, [pc, #616]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c50:	f7fc f812 	bl	8000c78 <HAL_GetTick>
 8004c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c58:	f7fc f80e 	bl	8000c78 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e1c0      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c6a:	4b92      	ldr	r3, [pc, #584]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8081 	beq.w	8004d86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c84:	4b8c      	ldr	r3, [pc, #560]	; (8004eb8 <HAL_RCC_OscConfig+0x770>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a8b      	ldr	r2, [pc, #556]	; (8004eb8 <HAL_RCC_OscConfig+0x770>)
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c90:	f7fb fff2 	bl	8000c78 <HAL_GetTick>
 8004c94:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c98:	f7fb ffee 	bl	8000c78 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e1a0      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004caa:	4b83      	ldr	r3, [pc, #524]	; (8004eb8 <HAL_RCC_OscConfig+0x770>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d106      	bne.n	8004ccc <HAL_RCC_OscConfig+0x584>
 8004cbe:	4b7d      	ldr	r3, [pc, #500]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	4a7c      	ldr	r2, [pc, #496]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cca:	e02d      	b.n	8004d28 <HAL_RCC_OscConfig+0x5e0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10c      	bne.n	8004cee <HAL_RCC_OscConfig+0x5a6>
 8004cd4:	4b77      	ldr	r3, [pc, #476]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	4a76      	ldr	r2, [pc, #472]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce0:	4b74      	ldr	r3, [pc, #464]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	4a73      	ldr	r2, [pc, #460]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004ce6:	f023 0304 	bic.w	r3, r3, #4
 8004cea:	6713      	str	r3, [r2, #112]	; 0x70
 8004cec:	e01c      	b.n	8004d28 <HAL_RCC_OscConfig+0x5e0>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x5c8>
 8004cf6:	4b6f      	ldr	r3, [pc, #444]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	4a6e      	ldr	r2, [pc, #440]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004cfc:	f043 0304 	orr.w	r3, r3, #4
 8004d00:	6713      	str	r3, [r2, #112]	; 0x70
 8004d02:	4b6c      	ldr	r3, [pc, #432]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	4a6b      	ldr	r2, [pc, #428]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0e:	e00b      	b.n	8004d28 <HAL_RCC_OscConfig+0x5e0>
 8004d10:	4b68      	ldr	r3, [pc, #416]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	4a67      	ldr	r2, [pc, #412]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1c:	4b65      	ldr	r3, [pc, #404]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	4a64      	ldr	r2, [pc, #400]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004d22:	f023 0304 	bic.w	r3, r3, #4
 8004d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d015      	beq.n	8004d5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fb ffa2 	bl	8000c78 <HAL_GetTick>
 8004d34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d38:	f7fb ff9e 	bl	8000c78 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e14e      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d4e:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0ee      	beq.n	8004d38 <HAL_RCC_OscConfig+0x5f0>
 8004d5a:	e014      	b.n	8004d86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fb ff8c 	bl	8000c78 <HAL_GetTick>
 8004d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d64:	f7fb ff88 	bl	8000c78 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e138      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d7a:	4b4e      	ldr	r3, [pc, #312]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1ee      	bne.n	8004d64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 812d 	beq.w	8004fea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d90:	4b48      	ldr	r3, [pc, #288]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d98:	2b18      	cmp	r3, #24
 8004d9a:	f000 80bd 	beq.w	8004f18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	f040 809e 	bne.w	8004ee4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da8:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a41      	ldr	r2, [pc, #260]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fb ff60 	bl	8000c78 <HAL_GetTick>
 8004db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dbc:	f7fb ff5c 	bl	8000c78 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e10e      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dce:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dda:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dde:	4b37      	ldr	r3, [pc, #220]	; (8004ebc <HAL_RCC_OscConfig+0x774>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dea:	0112      	lsls	r2, r2, #4
 8004dec:	430a      	orrs	r2, r1
 8004dee:	4931      	ldr	r1, [pc, #196]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	628b      	str	r3, [r1, #40]	; 0x28
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e02:	3b01      	subs	r3, #1
 8004e04:	025b      	lsls	r3, r3, #9
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	041b      	lsls	r3, r3, #16
 8004e12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	061b      	lsls	r3, r3, #24
 8004e20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e24:	4923      	ldr	r1, [pc, #140]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e2a:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e36:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3a:	4b21      	ldr	r3, [pc, #132]	; (8004ec0 <HAL_RCC_OscConfig+0x778>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e42:	00d2      	lsls	r2, r2, #3
 8004e44:	491b      	ldr	r1, [pc, #108]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e4a:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	f023 020c 	bic.w	r2, r3, #12
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4917      	ldr	r1, [pc, #92]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	f023 0202 	bic.w	r2, r3, #2
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e68:	4912      	ldr	r1, [pc, #72]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e6e:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	4a0d      	ldr	r2, [pc, #52]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	4a0a      	ldr	r2, [pc, #40]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e92:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eaa:	f7fb fee5 	bl	8000c78 <HAL_GetTick>
 8004eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004eb0:	e011      	b.n	8004ed6 <HAL_RCC_OscConfig+0x78e>
 8004eb2:	bf00      	nop
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	58024800 	.word	0x58024800
 8004ebc:	fffffc0c 	.word	0xfffffc0c
 8004ec0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec4:	f7fb fed8 	bl	8000c78 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e08a      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ed6:	4b47      	ldr	r3, [pc, #284]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x77c>
 8004ee2:	e082      	b.n	8004fea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee4:	4b43      	ldr	r3, [pc, #268]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a42      	ldr	r2, [pc, #264]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fb fec2 	bl	8000c78 <HAL_GetTick>
 8004ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fb febe 	bl	8000c78 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e070      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f0a:	4b3a      	ldr	r3, [pc, #232]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x7b0>
 8004f16:	e068      	b.n	8004fea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f18:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f1e:	4b35      	ldr	r3, [pc, #212]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d031      	beq.n	8004f90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f003 0203 	and.w	r2, r3, #3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d12a      	bne.n	8004f90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d122      	bne.n	8004f90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d11a      	bne.n	8004f90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	0a5b      	lsrs	r3, r3, #9
 8004f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d111      	bne.n	8004f90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	0c1b      	lsrs	r3, r3, #16
 8004f70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d108      	bne.n	8004f90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	0e1b      	lsrs	r3, r3, #24
 8004f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e02b      	b.n	8004fec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f94:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	08db      	lsrs	r3, r3, #3
 8004f9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d01f      	beq.n	8004fea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fb6:	f7fb fe5f 	bl	8000c78 <HAL_GetTick>
 8004fba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004fbc:	bf00      	nop
 8004fbe:	f7fb fe5b 	bl	8000c78 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d0f9      	beq.n	8004fbe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fce:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <HAL_RCC_OscConfig+0x8b0>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fd6:	00d2      	lsls	r2, r2, #3
 8004fd8:	4906      	ldr	r1, [pc, #24]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	4a04      	ldr	r2, [pc, #16]	; (8004ff4 <HAL_RCC_OscConfig+0x8ac>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3730      	adds	r7, #48	; 0x30
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	58024400 	.word	0x58024400
 8004ff8:	ffff0007 	.word	0xffff0007

08004ffc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e19c      	b.n	800534a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b8a      	ldr	r3, [pc, #552]	; (800523c <HAL_RCC_ClockConfig+0x240>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d910      	bls.n	8005040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b87      	ldr	r3, [pc, #540]	; (800523c <HAL_RCC_ClockConfig+0x240>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 020f 	bic.w	r2, r3, #15
 8005026:	4985      	ldr	r1, [pc, #532]	; (800523c <HAL_RCC_ClockConfig+0x240>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	4b83      	ldr	r3, [pc, #524]	; (800523c <HAL_RCC_ClockConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e184      	b.n	800534a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d010      	beq.n	800506e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	4b7b      	ldr	r3, [pc, #492]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005058:	429a      	cmp	r2, r3
 800505a:	d908      	bls.n	800506e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800505c:	4b78      	ldr	r3, [pc, #480]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	4975      	ldr	r1, [pc, #468]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 800506a:	4313      	orrs	r3, r2
 800506c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d010      	beq.n	800509c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695a      	ldr	r2, [r3, #20]
 800507e:	4b70      	ldr	r3, [pc, #448]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005086:	429a      	cmp	r2, r3
 8005088:	d908      	bls.n	800509c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800508a:	4b6d      	ldr	r3, [pc, #436]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	496a      	ldr	r1, [pc, #424]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 8005098:	4313      	orrs	r3, r2
 800509a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d010      	beq.n	80050ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699a      	ldr	r2, [r3, #24]
 80050ac:	4b64      	ldr	r3, [pc, #400]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d908      	bls.n	80050ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050b8:	4b61      	ldr	r3, [pc, #388]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	495e      	ldr	r1, [pc, #376]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d010      	beq.n	80050f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69da      	ldr	r2, [r3, #28]
 80050da:	4b59      	ldr	r3, [pc, #356]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d908      	bls.n	80050f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050e6:	4b56      	ldr	r3, [pc, #344]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	4953      	ldr	r1, [pc, #332]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d010      	beq.n	8005126 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	4b4d      	ldr	r3, [pc, #308]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	429a      	cmp	r2, r3
 8005112:	d908      	bls.n	8005126 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005114:	4b4a      	ldr	r3, [pc, #296]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f023 020f 	bic.w	r2, r3, #15
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4947      	ldr	r1, [pc, #284]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 8005122:	4313      	orrs	r3, r2
 8005124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d055      	beq.n	80051de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005132:	4b43      	ldr	r3, [pc, #268]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	4940      	ldr	r1, [pc, #256]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 8005140:	4313      	orrs	r3, r2
 8005142:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d107      	bne.n	800515c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800514c:	4b3c      	ldr	r3, [pc, #240]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d121      	bne.n	800519c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0f6      	b.n	800534a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d107      	bne.n	8005174 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005164:	4b36      	ldr	r3, [pc, #216]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d115      	bne.n	800519c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0ea      	b.n	800534a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d107      	bne.n	800518c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800517c:	4b30      	ldr	r3, [pc, #192]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005184:	2b00      	cmp	r3, #0
 8005186:	d109      	bne.n	800519c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0de      	b.n	800534a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800518c:	4b2c      	ldr	r3, [pc, #176]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0d6      	b.n	800534a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800519c:	4b28      	ldr	r3, [pc, #160]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f023 0207 	bic.w	r2, r3, #7
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4925      	ldr	r1, [pc, #148]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ae:	f7fb fd63 	bl	8000c78 <HAL_GetTick>
 80051b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b4:	e00a      	b.n	80051cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b6:	f7fb fd5f 	bl	8000c78 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e0be      	b.n	800534a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051cc:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	429a      	cmp	r2, r3
 80051dc:	d1eb      	bne.n	80051b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d010      	beq.n	800520c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	4b14      	ldr	r3, [pc, #80]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d208      	bcs.n	800520c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fa:	4b11      	ldr	r3, [pc, #68]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f023 020f 	bic.w	r2, r3, #15
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	490e      	ldr	r1, [pc, #56]	; (8005240 <HAL_RCC_ClockConfig+0x244>)
 8005208:	4313      	orrs	r3, r2
 800520a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_RCC_ClockConfig+0x240>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d214      	bcs.n	8005244 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <HAL_RCC_ClockConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 020f 	bic.w	r2, r3, #15
 8005222:	4906      	ldr	r1, [pc, #24]	; (800523c <HAL_RCC_ClockConfig+0x240>)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b04      	ldr	r3, [pc, #16]	; (800523c <HAL_RCC_ClockConfig+0x240>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d005      	beq.n	8005244 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e086      	b.n	800534a <HAL_RCC_ClockConfig+0x34e>
 800523c:	52002000 	.word	0x52002000
 8005240:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d010      	beq.n	8005272 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	4b3f      	ldr	r3, [pc, #252]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800525c:	429a      	cmp	r2, r3
 800525e:	d208      	bcs.n	8005272 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005260:	4b3c      	ldr	r3, [pc, #240]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	4939      	ldr	r1, [pc, #228]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 800526e:	4313      	orrs	r3, r2
 8005270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	4b34      	ldr	r3, [pc, #208]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800528a:	429a      	cmp	r2, r3
 800528c:	d208      	bcs.n	80052a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800528e:	4b31      	ldr	r3, [pc, #196]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	492e      	ldr	r1, [pc, #184]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 800529c:	4313      	orrs	r3, r2
 800529e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d010      	beq.n	80052ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	4b28      	ldr	r3, [pc, #160]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d208      	bcs.n	80052ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052bc:	4b25      	ldr	r3, [pc, #148]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	4922      	ldr	r1, [pc, #136]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d010      	beq.n	80052fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d208      	bcs.n	80052fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052ea:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4917      	ldr	r1, [pc, #92]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052fc:	f000 f834 	bl	8005368 <HAL_RCC_GetSysClockFreq>
 8005300:	4602      	mov	r2, r0
 8005302:	4b14      	ldr	r3, [pc, #80]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	4912      	ldr	r1, [pc, #72]	; (8005358 <HAL_RCC_ClockConfig+0x35c>)
 800530e:	5ccb      	ldrb	r3, [r1, r3]
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <HAL_RCC_ClockConfig+0x358>)
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	4a0d      	ldr	r2, [pc, #52]	; (8005358 <HAL_RCC_ClockConfig+0x35c>)
 8005324:	5cd3      	ldrb	r3, [r2, r3]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <HAL_RCC_ClockConfig+0x360>)
 8005332:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005334:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <HAL_RCC_ClockConfig+0x364>)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <HAL_RCC_ClockConfig+0x368>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fb fc50 	bl	8000be4 <HAL_InitTick>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	58024400 	.word	0x58024400
 8005358:	08014b4c 	.word	0x08014b4c
 800535c:	24000004 	.word	0x24000004
 8005360:	24000000 	.word	0x24000000
 8005364:	24000008 	.word	0x24000008

08005368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	; 0x24
 800536c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800536e:	4bb3      	ldr	r3, [pc, #716]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005376:	2b18      	cmp	r3, #24
 8005378:	f200 8155 	bhi.w	8005626 <HAL_RCC_GetSysClockFreq+0x2be>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <HAL_RCC_GetSysClockFreq+0x1c>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	080053e9 	.word	0x080053e9
 8005388:	08005627 	.word	0x08005627
 800538c:	08005627 	.word	0x08005627
 8005390:	08005627 	.word	0x08005627
 8005394:	08005627 	.word	0x08005627
 8005398:	08005627 	.word	0x08005627
 800539c:	08005627 	.word	0x08005627
 80053a0:	08005627 	.word	0x08005627
 80053a4:	0800540f 	.word	0x0800540f
 80053a8:	08005627 	.word	0x08005627
 80053ac:	08005627 	.word	0x08005627
 80053b0:	08005627 	.word	0x08005627
 80053b4:	08005627 	.word	0x08005627
 80053b8:	08005627 	.word	0x08005627
 80053bc:	08005627 	.word	0x08005627
 80053c0:	08005627 	.word	0x08005627
 80053c4:	08005415 	.word	0x08005415
 80053c8:	08005627 	.word	0x08005627
 80053cc:	08005627 	.word	0x08005627
 80053d0:	08005627 	.word	0x08005627
 80053d4:	08005627 	.word	0x08005627
 80053d8:	08005627 	.word	0x08005627
 80053dc:	08005627 	.word	0x08005627
 80053e0:	08005627 	.word	0x08005627
 80053e4:	0800541b 	.word	0x0800541b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053e8:	4b94      	ldr	r3, [pc, #592]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d009      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053f4:	4b91      	ldr	r3, [pc, #580]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	08db      	lsrs	r3, r3, #3
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	4a90      	ldr	r2, [pc, #576]	; (8005640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
 8005404:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005406:	e111      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005408:	4b8d      	ldr	r3, [pc, #564]	; (8005640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800540a:	61bb      	str	r3, [r7, #24]
      break;
 800540c:	e10e      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800540e:	4b8d      	ldr	r3, [pc, #564]	; (8005644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005410:	61bb      	str	r3, [r7, #24]
      break;
 8005412:	e10b      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005414:	4b8c      	ldr	r3, [pc, #560]	; (8005648 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005416:	61bb      	str	r3, [r7, #24]
      break;
 8005418:	e108      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800541a:	4b88      	ldr	r3, [pc, #544]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005424:	4b85      	ldr	r3, [pc, #532]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800542e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005430:	4b82      	ldr	r3, [pc, #520]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800543a:	4b80      	ldr	r3, [pc, #512]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543e:	08db      	lsrs	r3, r3, #3
 8005440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80e1 	beq.w	8005620 <HAL_RCC_GetSysClockFreq+0x2b8>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b02      	cmp	r3, #2
 8005462:	f000 8083 	beq.w	800556c <HAL_RCC_GetSysClockFreq+0x204>
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b02      	cmp	r3, #2
 800546a:	f200 80a1 	bhi.w	80055b0 <HAL_RCC_GetSysClockFreq+0x248>
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_RCC_GetSysClockFreq+0x114>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d056      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0x1c0>
 800547a:	e099      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800547c:	4b6f      	ldr	r3, [pc, #444]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d02d      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005488:	4b6c      	ldr	r3, [pc, #432]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	08db      	lsrs	r3, r3, #3
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	4a6b      	ldr	r2, [pc, #428]	; (8005640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
 8005498:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	ee07 3a90 	vmov	s15, r3
 80054a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b2:	4b62      	ldr	r3, [pc, #392]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800564c <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80054e2:	e087      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005650 <HAL_RCC_GetSysClockFreq+0x2e8>
 80054f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f6:	4b51      	ldr	r3, [pc, #324]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005506:	ed97 6a02 	vldr	s12, [r7, #8]
 800550a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800564c <HAL_RCC_GetSysClockFreq+0x2e4>
 800550e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800551a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005526:	e065      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005532:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005654 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553a:	4b40      	ldr	r3, [pc, #256]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554a:	ed97 6a02 	vldr	s12, [r7, #8]
 800554e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800564c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800555a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800555e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800556a:	e043      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005576:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005658 <HAL_RCC_GetSysClockFreq+0x2f0>
 800557a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800557e:	4b2f      	ldr	r3, [pc, #188]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800558e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005592:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800564c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800559a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800559e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055ae:	e021      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005654 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c2:	4b1e      	ldr	r3, [pc, #120]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800564c <HAL_RCC_GetSysClockFreq+0x2e4>
 80055da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055f4:	4b11      	ldr	r3, [pc, #68]	; (800563c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	0a5b      	lsrs	r3, r3, #9
 80055fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fe:	3301      	adds	r3, #1
 8005600:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	ee07 3a90 	vmov	s15, r3
 8005608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800560c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005618:	ee17 3a90 	vmov	r3, s15
 800561c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800561e:	e005      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	61bb      	str	r3, [r7, #24]
      break;
 8005624:	e002      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005626:	4b07      	ldr	r3, [pc, #28]	; (8005644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005628:	61bb      	str	r3, [r7, #24]
      break;
 800562a:	bf00      	nop
  }

  return sysclockfreq;
 800562c:	69bb      	ldr	r3, [r7, #24]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3724      	adds	r7, #36	; 0x24
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	58024400 	.word	0x58024400
 8005640:	03d09000 	.word	0x03d09000
 8005644:	003d0900 	.word	0x003d0900
 8005648:	00b71b00 	.word	0x00b71b00
 800564c:	46000000 	.word	0x46000000
 8005650:	4c742400 	.word	0x4c742400
 8005654:	4a742400 	.word	0x4a742400
 8005658:	4b371b00 	.word	0x4b371b00

0800565c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005662:	f7ff fe81 	bl	8005368 <HAL_RCC_GetSysClockFreq>
 8005666:	4602      	mov	r2, r0
 8005668:	4b10      	ldr	r3, [pc, #64]	; (80056ac <HAL_RCC_GetHCLKFreq+0x50>)
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	490f      	ldr	r1, [pc, #60]	; (80056b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005674:	5ccb      	ldrb	r3, [r1, r3]
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	fa22 f303 	lsr.w	r3, r2, r3
 800567e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <HAL_RCC_GetHCLKFreq+0x50>)
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800568a:	5cd3      	ldrb	r3, [r2, r3]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	fa22 f303 	lsr.w	r3, r2, r3
 8005696:	4a07      	ldr	r2, [pc, #28]	; (80056b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005698:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800569a:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80056a2:	681b      	ldr	r3, [r3, #0]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	58024400 	.word	0x58024400
 80056b0:	08014b4c 	.word	0x08014b4c
 80056b4:	24000004 	.word	0x24000004
 80056b8:	24000000 	.word	0x24000000

080056bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80056c0:	f7ff ffcc 	bl	800565c <HAL_RCC_GetHCLKFreq>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	091b      	lsrs	r3, r3, #4
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	4904      	ldr	r1, [pc, #16]	; (80056e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056d2:	5ccb      	ldrb	r3, [r1, r3]
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80056dc:	4618      	mov	r0, r3
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	58024400 	.word	0x58024400
 80056e4:	08014b4c 	.word	0x08014b4c

080056e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056ec:	b0ca      	sub	sp, #296	; 0x128
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056fa:	2300      	movs	r3, #0
 80056fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800570c:	2500      	movs	r5, #0
 800570e:	ea54 0305 	orrs.w	r3, r4, r5
 8005712:	d049      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800571a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800571e:	d02f      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005720:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005724:	d828      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800572a:	d01a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800572c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005730:	d822      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573a:	d007      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800573c:	e01c      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800573e:	4bb8      	ldr	r3, [pc, #736]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	4ab7      	ldr	r2, [pc, #732]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800574a:	e01a      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005750:	3308      	adds	r3, #8
 8005752:	2102      	movs	r1, #2
 8005754:	4618      	mov	r0, r3
 8005756:	f002 fb61 	bl	8007e1c <RCCEx_PLL2_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005760:	e00f      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005766:	3328      	adds	r3, #40	; 0x28
 8005768:	2102      	movs	r1, #2
 800576a:	4618      	mov	r0, r3
 800576c:	f002 fc08 	bl	8007f80 <RCCEx_PLL3_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005776:	e004      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800577e:	e000      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800578a:	4ba5      	ldr	r3, [pc, #660]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800578c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005798:	4aa1      	ldr	r2, [pc, #644]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800579a:	430b      	orrs	r3, r1
 800579c:	6513      	str	r3, [r2, #80]	; 0x50
 800579e:	e003      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80057b4:	f04f 0900 	mov.w	r9, #0
 80057b8:	ea58 0309 	orrs.w	r3, r8, r9
 80057bc:	d047      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d82a      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057e5 	.word	0x080057e5
 80057d4:	080057f3 	.word	0x080057f3
 80057d8:	08005809 	.word	0x08005809
 80057dc:	08005827 	.word	0x08005827
 80057e0:	08005827 	.word	0x08005827
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e4:	4b8e      	ldr	r3, [pc, #568]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4a8d      	ldr	r2, [pc, #564]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057f0:	e01a      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f6:	3308      	adds	r3, #8
 80057f8:	2100      	movs	r1, #0
 80057fa:	4618      	mov	r0, r3
 80057fc:	f002 fb0e 	bl	8007e1c <RCCEx_PLL2_Config>
 8005800:	4603      	mov	r3, r0
 8005802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005806:	e00f      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580c:	3328      	adds	r3, #40	; 0x28
 800580e:	2100      	movs	r1, #0
 8005810:	4618      	mov	r0, r3
 8005812:	f002 fbb5 	bl	8007f80 <RCCEx_PLL3_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800581c:	e004      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005824:	e000      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005830:	4b7b      	ldr	r3, [pc, #492]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005834:	f023 0107 	bic.w	r1, r3, #7
 8005838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583e:	4a78      	ldr	r2, [pc, #480]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005840:	430b      	orrs	r3, r1
 8005842:	6513      	str	r3, [r2, #80]	; 0x50
 8005844:	e003      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800584a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800584e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800585a:	f04f 0b00 	mov.w	fp, #0
 800585e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005862:	d04c      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586e:	d030      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005874:	d829      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005876:	2bc0      	cmp	r3, #192	; 0xc0
 8005878:	d02d      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800587a:	2bc0      	cmp	r3, #192	; 0xc0
 800587c:	d825      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800587e:	2b80      	cmp	r3, #128	; 0x80
 8005880:	d018      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005882:	2b80      	cmp	r3, #128	; 0x80
 8005884:	d821      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d007      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800588e:	e01c      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005890:	4b63      	ldr	r3, [pc, #396]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	4a62      	ldr	r2, [pc, #392]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800589a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800589c:	e01c      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800589e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a2:	3308      	adds	r3, #8
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f002 fab8 	bl	8007e1c <RCCEx_PLL2_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058b2:	e011      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b8:	3328      	adds	r3, #40	; 0x28
 80058ba:	2100      	movs	r1, #0
 80058bc:	4618      	mov	r0, r3
 80058be:	f002 fb5f 	bl	8007f80 <RCCEx_PLL3_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058c8:	e006      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058d0:	e002      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058d2:	bf00      	nop
 80058d4:	e000      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80058e0:	4b4f      	ldr	r3, [pc, #316]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80058e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ee:	4a4c      	ldr	r2, [pc, #304]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058f0:	430b      	orrs	r3, r1
 80058f2:	6513      	str	r3, [r2, #80]	; 0x50
 80058f4:	e003      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800590a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800590e:	2300      	movs	r3, #0
 8005910:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005914:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005918:	460b      	mov	r3, r1
 800591a:	4313      	orrs	r3, r2
 800591c:	d053      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800591e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800592a:	d035      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800592c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005930:	d82e      	bhi.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005932:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005936:	d031      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005938:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800593c:	d828      	bhi.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800593e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005942:	d01a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005948:	d822      	bhi.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800594e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005952:	d007      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005954:	e01c      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005956:	4b32      	ldr	r3, [pc, #200]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	4a31      	ldr	r2, [pc, #196]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800595c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005960:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005962:	e01c      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005968:	3308      	adds	r3, #8
 800596a:	2100      	movs	r1, #0
 800596c:	4618      	mov	r0, r3
 800596e:	f002 fa55 	bl	8007e1c <RCCEx_PLL2_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005978:	e011      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597e:	3328      	adds	r3, #40	; 0x28
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f002 fafc 	bl	8007f80 <RCCEx_PLL3_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800598e:	e006      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005996:	e002      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005998:	bf00      	nop
 800599a:	e000      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800599c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800599e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059a6:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80059ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059b6:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6593      	str	r3, [r2, #88]	; 0x58
 80059bc:	e003      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80059d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059d6:	2300      	movs	r3, #0
 80059d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80059e0:	460b      	mov	r3, r1
 80059e2:	4313      	orrs	r3, r2
 80059e4:	d056      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059f2:	d038      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80059f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059f8:	d831      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80059fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059fe:	d034      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a04:	d82b      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a0a:	d01d      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a10:	d825      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d006      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a1c:	e01f      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a24:	4ba2      	ldr	r3, [pc, #648]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	4aa1      	ldr	r2, [pc, #644]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a30:	e01c      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a36:	3308      	adds	r3, #8
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f002 f9ee 	bl	8007e1c <RCCEx_PLL2_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a46:	e011      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4c:	3328      	adds	r3, #40	; 0x28
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f002 fa95 	bl	8007f80 <RCCEx_PLL3_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a5c:	e006      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a64:	e002      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a66:	bf00      	nop
 8005a68:	e000      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10b      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a74:	4b8e      	ldr	r3, [pc, #568]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a78:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a84:	4a8a      	ldr	r2, [pc, #552]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a86:	430b      	orrs	r3, r1
 8005a88:	6593      	str	r3, [r2, #88]	; 0x58
 8005a8a:	e003      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005aaa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	d03a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aba:	2b30      	cmp	r3, #48	; 0x30
 8005abc:	d01f      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005abe:	2b30      	cmp	r3, #48	; 0x30
 8005ac0:	d819      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d00c      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d815      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d019      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005ace:	2b10      	cmp	r3, #16
 8005ad0:	d111      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad2:	4b77      	ldr	r3, [pc, #476]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	4a76      	ldr	r2, [pc, #472]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ade:	e011      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	2102      	movs	r1, #2
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f002 f997 	bl	8007e1c <RCCEx_PLL2_Config>
 8005aee:	4603      	mov	r3, r0
 8005af0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005af4:	e006      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005afc:	e002      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b0c:	4b68      	ldr	r3, [pc, #416]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b10:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1a:	4a65      	ldr	r2, [pc, #404]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b20:	e003      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005b36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4313      	orrs	r3, r2
 8005b48:	d051      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b54:	d035      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b5a:	d82e      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b60:	d031      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005b62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b66:	d828      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6c:	d01a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b72:	d822      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7c:	d007      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005b7e:	e01c      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b80:	4b4b      	ldr	r3, [pc, #300]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	4a4a      	ldr	r2, [pc, #296]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b8c:	e01c      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b92:	3308      	adds	r3, #8
 8005b94:	2100      	movs	r1, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f002 f940 	bl	8007e1c <RCCEx_PLL2_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ba2:	e011      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba8:	3328      	adds	r3, #40	; 0x28
 8005baa:	2100      	movs	r1, #0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f002 f9e7 	bl	8007f80 <RCCEx_PLL3_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bb8:	e006      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bc0:	e002      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bc2:	bf00      	nop
 8005bc4:	e000      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bd0:	4b37      	ldr	r3, [pc, #220]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bde:	4a34      	ldr	r2, [pc, #208]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005be0:	430b      	orrs	r3, r1
 8005be2:	6513      	str	r3, [r2, #80]	; 0x50
 8005be4:	e003      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	d056      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c18:	d033      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c1e:	d82c      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c24:	d02f      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c2a:	d826      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c30:	d02b      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005c32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c36:	d820      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c3c:	d012      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005c3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c42:	d81a      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d022      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4c:	d115      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c52:	3308      	adds	r3, #8
 8005c54:	2101      	movs	r1, #1
 8005c56:	4618      	mov	r0, r3
 8005c58:	f002 f8e0 	bl	8007e1c <RCCEx_PLL2_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c62:	e015      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c68:	3328      	adds	r3, #40	; 0x28
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f002 f987 	bl	8007f80 <RCCEx_PLL3_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c78:	e00a      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c80:	e006      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c82:	bf00      	nop
 8005c84:	e004      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c86:	bf00      	nop
 8005c88:	e002      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c8a:	bf00      	nop
 8005c8c:	e000      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10d      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ca6:	4a02      	ldr	r2, [pc, #8]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	6513      	str	r3, [r2, #80]	; 0x50
 8005cac:	e006      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005cae:	bf00      	nop
 8005cb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cd2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	d055      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ce8:	d033      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cee:	d82c      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf4:	d02f      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d826      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005cfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d00:	d02b      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d06:	d820      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d0c:	d012      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d12:	d81a      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d022      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d1c:	d115      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d22:	3308      	adds	r3, #8
 8005d24:	2101      	movs	r1, #1
 8005d26:	4618      	mov	r0, r3
 8005d28:	f002 f878 	bl	8007e1c <RCCEx_PLL2_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d32:	e015      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d38:	3328      	adds	r3, #40	; 0x28
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f002 f91f 	bl	8007f80 <RCCEx_PLL3_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d48:	e00a      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d50:	e006      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d52:	bf00      	nop
 8005d54:	e004      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d56:	bf00      	nop
 8005d58:	e002      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d5a:	bf00      	nop
 8005d5c:	e000      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10b      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d68:	4ba3      	ldr	r3, [pc, #652]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d78:	4a9f      	ldr	r2, [pc, #636]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d7e:	e003      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005da2:	460b      	mov	r3, r1
 8005da4:	4313      	orrs	r3, r2
 8005da6:	d037      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db2:	d00e      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db8:	d816      	bhi.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d018      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc2:	d111      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc4:	4b8c      	ldr	r3, [pc, #560]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	4a8b      	ldr	r2, [pc, #556]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005dd0:	e00f      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f002 f81e 	bl	8007e1c <RCCEx_PLL2_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005de6:	e004      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005dee:	e000      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dfa:	4b7f      	ldr	r3, [pc, #508]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	4a7b      	ldr	r2, [pc, #492]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	6513      	str	r3, [r2, #80]	; 0x50
 8005e0e:	e003      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4313      	orrs	r3, r2
 8005e36:	d039      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d81c      	bhi.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005e42:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e85 	.word	0x08005e85
 8005e4c:	08005e59 	.word	0x08005e59
 8005e50:	08005e67 	.word	0x08005e67
 8005e54:	08005e85 	.word	0x08005e85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e58:	4b67      	ldr	r3, [pc, #412]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	4a66      	ldr	r2, [pc, #408]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e64:	e00f      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 ffd4 	bl	8007e1c <RCCEx_PLL2_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e7a:	e004      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e8e:	4b5a      	ldr	r3, [pc, #360]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e92:	f023 0103 	bic.w	r1, r3, #3
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9c:	4a56      	ldr	r2, [pc, #344]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e9e:	430b      	orrs	r3, r1
 8005ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ea2:	e003      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ea8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ec2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f000 809f 	beq.w	800600c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ece:	4b4b      	ldr	r3, [pc, #300]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a4a      	ldr	r2, [pc, #296]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eda:	f7fa fecd 	bl	8000c78 <HAL_GetTick>
 8005ede:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee2:	e00b      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee4:	f7fa fec8 	bl	8000c78 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b64      	cmp	r3, #100	; 0x64
 8005ef2:	d903      	bls.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005efa:	e005      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005efc:	4b3f      	ldr	r3, [pc, #252]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0ed      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005f08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d179      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f10:	4b39      	ldr	r3, [pc, #228]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f1c:	4053      	eors	r3, r2
 8005f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d015      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f26:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f32:	4b31      	ldr	r3, [pc, #196]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	4a30      	ldr	r2, [pc, #192]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f3e:	4b2e      	ldr	r3, [pc, #184]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	4a2d      	ldr	r2, [pc, #180]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f4a:	4a2b      	ldr	r2, [pc, #172]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5e:	d118      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f60:	f7fa fe8a 	bl	8000c78 <HAL_GetTick>
 8005f64:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f68:	e00d      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6a:	f7fa fe85 	bl	8000c78 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f74:	1ad2      	subs	r2, r2, r3
 8005f76:	f241 3388 	movw	r3, #5000	; 0x1388
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d903      	bls.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005f84:	e005      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f86:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0eb      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d129      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005faa:	d10e      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005fac:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fbc:	091a      	lsrs	r2, r3, #4
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	4a0d      	ldr	r2, [pc, #52]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6113      	str	r3, [r2, #16]
 8005fc8:	e005      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005fca:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fd4:	6113      	str	r3, [r2, #16]
 8005fd6:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe6:	4a04      	ldr	r2, [pc, #16]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6713      	str	r3, [r2, #112]	; 0x70
 8005fec:	e00e      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ff2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005ff6:	e009      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005ff8:	58024400 	.word	0x58024400
 8005ffc:	58024800 	.word	0x58024800
 8006000:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006008:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f002 0301 	and.w	r3, r2, #1
 8006018:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800601c:	2300      	movs	r3, #0
 800601e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006022:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006026:	460b      	mov	r3, r1
 8006028:	4313      	orrs	r3, r2
 800602a:	f000 8089 	beq.w	8006140 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006034:	2b28      	cmp	r3, #40	; 0x28
 8006036:	d86b      	bhi.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006038:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	08006119 	.word	0x08006119
 8006044:	08006111 	.word	0x08006111
 8006048:	08006111 	.word	0x08006111
 800604c:	08006111 	.word	0x08006111
 8006050:	08006111 	.word	0x08006111
 8006054:	08006111 	.word	0x08006111
 8006058:	08006111 	.word	0x08006111
 800605c:	08006111 	.word	0x08006111
 8006060:	080060e5 	.word	0x080060e5
 8006064:	08006111 	.word	0x08006111
 8006068:	08006111 	.word	0x08006111
 800606c:	08006111 	.word	0x08006111
 8006070:	08006111 	.word	0x08006111
 8006074:	08006111 	.word	0x08006111
 8006078:	08006111 	.word	0x08006111
 800607c:	08006111 	.word	0x08006111
 8006080:	080060fb 	.word	0x080060fb
 8006084:	08006111 	.word	0x08006111
 8006088:	08006111 	.word	0x08006111
 800608c:	08006111 	.word	0x08006111
 8006090:	08006111 	.word	0x08006111
 8006094:	08006111 	.word	0x08006111
 8006098:	08006111 	.word	0x08006111
 800609c:	08006111 	.word	0x08006111
 80060a0:	08006119 	.word	0x08006119
 80060a4:	08006111 	.word	0x08006111
 80060a8:	08006111 	.word	0x08006111
 80060ac:	08006111 	.word	0x08006111
 80060b0:	08006111 	.word	0x08006111
 80060b4:	08006111 	.word	0x08006111
 80060b8:	08006111 	.word	0x08006111
 80060bc:	08006111 	.word	0x08006111
 80060c0:	08006119 	.word	0x08006119
 80060c4:	08006111 	.word	0x08006111
 80060c8:	08006111 	.word	0x08006111
 80060cc:	08006111 	.word	0x08006111
 80060d0:	08006111 	.word	0x08006111
 80060d4:	08006111 	.word	0x08006111
 80060d8:	08006111 	.word	0x08006111
 80060dc:	08006111 	.word	0x08006111
 80060e0:	08006119 	.word	0x08006119
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e8:	3308      	adds	r3, #8
 80060ea:	2101      	movs	r1, #1
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 fe95 	bl	8007e1c <RCCEx_PLL2_Config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80060f8:	e00f      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fe:	3328      	adds	r3, #40	; 0x28
 8006100:	2101      	movs	r1, #1
 8006102:	4618      	mov	r0, r3
 8006104:	f001 ff3c 	bl	8007f80 <RCCEx_PLL3_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800610e:	e004      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006122:	4bbf      	ldr	r3, [pc, #764]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006126:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006130:	4abb      	ldr	r2, [pc, #748]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006132:	430b      	orrs	r3, r1
 8006134:	6553      	str	r3, [r2, #84]	; 0x54
 8006136:	e003      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800613c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f002 0302 	and.w	r3, r2, #2
 800614c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006150:	2300      	movs	r3, #0
 8006152:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006156:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800615a:	460b      	mov	r3, r1
 800615c:	4313      	orrs	r3, r2
 800615e:	d041      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006166:	2b05      	cmp	r3, #5
 8006168:	d824      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	080061bd 	.word	0x080061bd
 8006174:	08006189 	.word	0x08006189
 8006178:	0800619f 	.word	0x0800619f
 800617c:	080061bd 	.word	0x080061bd
 8006180:	080061bd 	.word	0x080061bd
 8006184:	080061bd 	.word	0x080061bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618c:	3308      	adds	r3, #8
 800618e:	2101      	movs	r1, #1
 8006190:	4618      	mov	r0, r3
 8006192:	f001 fe43 	bl	8007e1c <RCCEx_PLL2_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800619c:	e00f      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800619e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a2:	3328      	adds	r3, #40	; 0x28
 80061a4:	2101      	movs	r1, #1
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 feea 	bl	8007f80 <RCCEx_PLL3_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061b2:	e004      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061ba:	e000      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80061bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061c6:	4b96      	ldr	r3, [pc, #600]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ca:	f023 0107 	bic.w	r1, r3, #7
 80061ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d4:	4a92      	ldr	r2, [pc, #584]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061d6:	430b      	orrs	r3, r1
 80061d8:	6553      	str	r3, [r2, #84]	; 0x54
 80061da:	e003      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f002 0304 	and.w	r3, r2, #4
 80061f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061f4:	2300      	movs	r3, #0
 80061f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80061fe:	460b      	mov	r3, r1
 8006200:	4313      	orrs	r3, r2
 8006202:	d044      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800620c:	2b05      	cmp	r3, #5
 800620e:	d825      	bhi.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006210:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006216:	bf00      	nop
 8006218:	08006265 	.word	0x08006265
 800621c:	08006231 	.word	0x08006231
 8006220:	08006247 	.word	0x08006247
 8006224:	08006265 	.word	0x08006265
 8006228:	08006265 	.word	0x08006265
 800622c:	08006265 	.word	0x08006265
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006234:	3308      	adds	r3, #8
 8006236:	2101      	movs	r1, #1
 8006238:	4618      	mov	r0, r3
 800623a:	f001 fdef 	bl	8007e1c <RCCEx_PLL2_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006244:	e00f      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800624a:	3328      	adds	r3, #40	; 0x28
 800624c:	2101      	movs	r1, #1
 800624e:	4618      	mov	r0, r3
 8006250:	f001 fe96 	bl	8007f80 <RCCEx_PLL3_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800625a:	e004      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006262:	e000      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10b      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800626e:	4b6c      	ldr	r3, [pc, #432]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006272:	f023 0107 	bic.w	r1, r3, #7
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800627e:	4a68      	ldr	r2, [pc, #416]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006280:	430b      	orrs	r3, r1
 8006282:	6593      	str	r3, [r2, #88]	; 0x58
 8006284:	e003      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800628a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800628e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	f002 0320 	and.w	r3, r2, #32
 800629a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800629e:	2300      	movs	r3, #0
 80062a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062a8:	460b      	mov	r3, r1
 80062aa:	4313      	orrs	r3, r2
 80062ac:	d055      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062ba:	d033      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80062bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062c0:	d82c      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c6:	d02f      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062cc:	d826      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062d2:	d02b      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80062d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062d8:	d820      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062de:	d012      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80062e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062e4:	d81a      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d022      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80062ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ee:	d115      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f4:	3308      	adds	r3, #8
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fd8f 	bl	8007e1c <RCCEx_PLL2_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006304:	e015      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630a:	3328      	adds	r3, #40	; 0x28
 800630c:	2102      	movs	r1, #2
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fe36 	bl	8007f80 <RCCEx_PLL3_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800631a:	e00a      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006322:	e006      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006324:	bf00      	nop
 8006326:	e004      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006328:	bf00      	nop
 800632a:	e002      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800633a:	4b39      	ldr	r3, [pc, #228]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634a:	4a35      	ldr	r2, [pc, #212]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800634c:	430b      	orrs	r3, r1
 800634e:	6553      	str	r3, [r2, #84]	; 0x54
 8006350:	e003      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800636a:	2300      	movs	r3, #0
 800636c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006370:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006374:	460b      	mov	r3, r1
 8006376:	4313      	orrs	r3, r2
 8006378:	d058      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006386:	d033      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800638c:	d82c      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800638e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006392:	d02f      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006398:	d826      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800639a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800639e:	d02b      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80063a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063a4:	d820      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063aa:	d012      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80063ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063b0:	d81a      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d022      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80063b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ba:	d115      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c0:	3308      	adds	r3, #8
 80063c2:	2100      	movs	r1, #0
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 fd29 	bl	8007e1c <RCCEx_PLL2_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063d0:	e015      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d6:	3328      	adds	r3, #40	; 0x28
 80063d8:	2102      	movs	r1, #2
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 fdd0 	bl	8007f80 <RCCEx_PLL3_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063e6:	e00a      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063ee:	e006      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063f0:	bf00      	nop
 80063f2:	e004      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063f4:	bf00      	nop
 80063f6:	e002      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063f8:	bf00      	nop
 80063fa:	e000      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10e      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006406:	4b06      	ldr	r3, [pc, #24]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006416:	4a02      	ldr	r2, [pc, #8]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006418:	430b      	orrs	r3, r1
 800641a:	6593      	str	r3, [r2, #88]	; 0x58
 800641c:	e006      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800641e:	bf00      	nop
 8006420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006428:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006434:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800643c:	2300      	movs	r3, #0
 800643e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006442:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006446:	460b      	mov	r3, r1
 8006448:	4313      	orrs	r3, r2
 800644a:	d055      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006450:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006454:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006458:	d033      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800645a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800645e:	d82c      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006464:	d02f      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800646a:	d826      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800646c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006470:	d02b      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006472:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006476:	d820      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800647c:	d012      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800647e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006482:	d81a      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d022      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648c:	d115      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006492:	3308      	adds	r3, #8
 8006494:	2100      	movs	r1, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f001 fcc0 	bl	8007e1c <RCCEx_PLL2_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064a2:	e015      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a8:	3328      	adds	r3, #40	; 0x28
 80064aa:	2102      	movs	r1, #2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 fd67 	bl	8007f80 <RCCEx_PLL3_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064b8:	e00a      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064c0:	e006      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064c2:	bf00      	nop
 80064c4:	e004      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064c6:	bf00      	nop
 80064c8:	e002      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064ca:	bf00      	nop
 80064cc:	e000      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064d8:	4ba1      	ldr	r3, [pc, #644]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064dc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064e8:	4a9d      	ldr	r2, [pc, #628]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ea:	430b      	orrs	r3, r1
 80064ec:	6593      	str	r3, [r2, #88]	; 0x58
 80064ee:	e003      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f002 0308 	and.w	r3, r2, #8
 8006504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800650e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006512:	460b      	mov	r3, r1
 8006514:	4313      	orrs	r3, r2
 8006516:	d01e      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006524:	d10c      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652a:	3328      	adds	r3, #40	; 0x28
 800652c:	2102      	movs	r1, #2
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fd26 	bl	8007f80 <RCCEx_PLL3_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006540:	4b87      	ldr	r3, [pc, #540]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006544:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006550:	4a83      	ldr	r2, [pc, #524]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006552:	430b      	orrs	r3, r1
 8006554:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f002 0310 	and.w	r3, r2, #16
 8006562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006566:	2300      	movs	r3, #0
 8006568:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800656c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006570:	460b      	mov	r3, r1
 8006572:	4313      	orrs	r3, r2
 8006574:	d01e      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800657e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006582:	d10c      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006588:	3328      	adds	r3, #40	; 0x28
 800658a:	2102      	movs	r1, #2
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fcf7 	bl	8007f80 <RCCEx_PLL3_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800659e:	4b70      	ldr	r3, [pc, #448]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065ae:	4a6c      	ldr	r2, [pc, #432]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80065c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065c4:	2300      	movs	r3, #0
 80065c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80065ce:	460b      	mov	r3, r1
 80065d0:	4313      	orrs	r3, r2
 80065d2:	d03e      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065e0:	d022      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80065e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065e6:	d81b      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f0:	d00b      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80065f2:	e015      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f8:	3308      	adds	r3, #8
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 fc0d 	bl	8007e1c <RCCEx_PLL2_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006608:	e00f      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660e:	3328      	adds	r3, #40	; 0x28
 8006610:	2102      	movs	r1, #2
 8006612:	4618      	mov	r0, r3
 8006614:	f001 fcb4 	bl	8007f80 <RCCEx_PLL3_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800661e:	e004      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006626:	e000      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006632:	4b4b      	ldr	r3, [pc, #300]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006636:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006642:	4a47      	ldr	r2, [pc, #284]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006644:	430b      	orrs	r3, r1
 8006646:	6593      	str	r3, [r2, #88]	; 0x58
 8006648:	e003      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800664e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800665e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006660:	2300      	movs	r3, #0
 8006662:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006664:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006668:	460b      	mov	r3, r1
 800666a:	4313      	orrs	r3, r2
 800666c:	d03b      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006676:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800667a:	d01f      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800667c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006680:	d818      	bhi.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d003      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800668c:	d007      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800668e:	e011      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006690:	4b33      	ldr	r3, [pc, #204]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	4a32      	ldr	r2, [pc, #200]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800669c:	e00f      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a2:	3328      	adds	r3, #40	; 0x28
 80066a4:	2101      	movs	r1, #1
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 fc6a 	bl	8007f80 <RCCEx_PLL3_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80066b2:	e004      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066ba:	e000      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80066bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066c6:	4b26      	ldr	r3, [pc, #152]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	4a22      	ldr	r2, [pc, #136]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066d8:	430b      	orrs	r3, r1
 80066da:	6553      	str	r3, [r2, #84]	; 0x54
 80066dc:	e003      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80066f2:	673b      	str	r3, [r7, #112]	; 0x70
 80066f4:	2300      	movs	r3, #0
 80066f6:	677b      	str	r3, [r7, #116]	; 0x74
 80066f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80066fc:	460b      	mov	r3, r1
 80066fe:	4313      	orrs	r3, r2
 8006700:	d034      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006710:	d007      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006712:	e011      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006714:	4b12      	ldr	r3, [pc, #72]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4a11      	ldr	r2, [pc, #68]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006720:	e00e      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006726:	3308      	adds	r3, #8
 8006728:	2102      	movs	r1, #2
 800672a:	4618      	mov	r0, r3
 800672c:	f001 fb76 	bl	8007e1c <RCCEx_PLL2_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006736:	e003      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800673e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10d      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800674a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006756:	4a02      	ldr	r2, [pc, #8]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006758:	430b      	orrs	r3, r1
 800675a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800675c:	e006      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800675e:	bf00      	nop
 8006760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006778:	66bb      	str	r3, [r7, #104]	; 0x68
 800677a:	2300      	movs	r3, #0
 800677c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800677e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006782:	460b      	mov	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	d00c      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800678c:	3328      	adds	r3, #40	; 0x28
 800678e:	2102      	movs	r1, #2
 8006790:	4618      	mov	r0, r3
 8006792:	f001 fbf5 	bl	8007f80 <RCCEx_PLL3_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80067ae:	663b      	str	r3, [r7, #96]	; 0x60
 80067b0:	2300      	movs	r3, #0
 80067b2:	667b      	str	r3, [r7, #100]	; 0x64
 80067b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d038      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ca:	d018      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80067cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d0:	d811      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d6:	d014      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80067d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067dc:	d80b      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d011      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80067e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e6:	d106      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e8:	4bc3      	ldr	r3, [pc, #780]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	4ac2      	ldr	r2, [pc, #776]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80067f4:	e008      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067fc:	e004      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80067fe:	bf00      	nop
 8006800:	e002      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006802:	bf00      	nop
 8006804:	e000      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10b      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006810:	4bb9      	ldr	r3, [pc, #740]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800681c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006820:	4ab5      	ldr	r2, [pc, #724]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006822:	430b      	orrs	r3, r1
 8006824:	6553      	str	r3, [r2, #84]	; 0x54
 8006826:	e003      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800682c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800683c:	65bb      	str	r3, [r7, #88]	; 0x58
 800683e:	2300      	movs	r3, #0
 8006840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006842:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006846:	460b      	mov	r3, r1
 8006848:	4313      	orrs	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800684c:	4baa      	ldr	r3, [pc, #680]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685a:	4aa7      	ldr	r2, [pc, #668]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800685c:	430b      	orrs	r3, r1
 800685e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800686c:	653b      	str	r3, [r7, #80]	; 0x50
 800686e:	2300      	movs	r3, #0
 8006870:	657b      	str	r3, [r7, #84]	; 0x54
 8006872:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006876:	460b      	mov	r3, r1
 8006878:	4313      	orrs	r3, r2
 800687a:	d00a      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800687c:	4b9e      	ldr	r3, [pc, #632]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006888:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800688c:	4a9a      	ldr	r2, [pc, #616]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800688e:	430b      	orrs	r3, r1
 8006890:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800689e:	64bb      	str	r3, [r7, #72]	; 0x48
 80068a0:	2300      	movs	r3, #0
 80068a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80068a8:	460b      	mov	r3, r1
 80068aa:	4313      	orrs	r3, r2
 80068ac:	d009      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068ae:	4b92      	ldr	r3, [pc, #584]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068bc:	4a8e      	ldr	r2, [pc, #568]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068be:	430b      	orrs	r3, r1
 80068c0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80068ce:	643b      	str	r3, [r7, #64]	; 0x40
 80068d0:	2300      	movs	r3, #0
 80068d2:	647b      	str	r3, [r7, #68]	; 0x44
 80068d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80068d8:	460b      	mov	r3, r1
 80068da:	4313      	orrs	r3, r2
 80068dc:	d00e      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068de:	4b86      	ldr	r3, [pc, #536]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	4a85      	ldr	r2, [pc, #532]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068e8:	6113      	str	r3, [r2, #16]
 80068ea:	4b83      	ldr	r3, [pc, #524]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ec:	6919      	ldr	r1, [r3, #16]
 80068ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80068f6:	4a80      	ldr	r2, [pc, #512]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006908:	63bb      	str	r3, [r7, #56]	; 0x38
 800690a:	2300      	movs	r3, #0
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006918:	4b77      	ldr	r3, [pc, #476]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800691a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006926:	4a74      	ldr	r2, [pc, #464]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006928:	430b      	orrs	r3, r1
 800692a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006938:	633b      	str	r3, [r7, #48]	; 0x30
 800693a:	2300      	movs	r3, #0
 800693c:	637b      	str	r3, [r7, #52]	; 0x34
 800693e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006942:	460b      	mov	r3, r1
 8006944:	4313      	orrs	r3, r2
 8006946:	d00a      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006948:	4b6b      	ldr	r3, [pc, #428]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800694a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006958:	4a67      	ldr	r2, [pc, #412]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800695a:	430b      	orrs	r3, r1
 800695c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	2100      	movs	r1, #0
 8006968:	62b9      	str	r1, [r7, #40]	; 0x28
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006970:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006974:	460b      	mov	r3, r1
 8006976:	4313      	orrs	r3, r2
 8006978:	d011      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800697e:	3308      	adds	r3, #8
 8006980:	2100      	movs	r1, #0
 8006982:	4618      	mov	r0, r3
 8006984:	f001 fa4a 	bl	8007e1c <RCCEx_PLL2_Config>
 8006988:	4603      	mov	r3, r0
 800698a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800698e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800699a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	2100      	movs	r1, #0
 80069a8:	6239      	str	r1, [r7, #32]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
 80069b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069b4:	460b      	mov	r3, r1
 80069b6:	4313      	orrs	r3, r2
 80069b8:	d011      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069be:	3308      	adds	r3, #8
 80069c0:	2101      	movs	r1, #1
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 fa2a 	bl	8007e1c <RCCEx_PLL2_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80069ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	2100      	movs	r1, #0
 80069e8:	61b9      	str	r1, [r7, #24]
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80069f4:	460b      	mov	r3, r1
 80069f6:	4313      	orrs	r3, r2
 80069f8:	d011      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fe:	3308      	adds	r3, #8
 8006a00:	2102      	movs	r1, #2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 fa0a 	bl	8007e1c <RCCEx_PLL2_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	2100      	movs	r1, #0
 8006a28:	6139      	str	r1, [r7, #16]
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a34:	460b      	mov	r3, r1
 8006a36:	4313      	orrs	r3, r2
 8006a38:	d011      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a3e:	3328      	adds	r3, #40	; 0x28
 8006a40:	2100      	movs	r1, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 fa9c 	bl	8007f80 <RCCEx_PLL3_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	2100      	movs	r1, #0
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a74:	460b      	mov	r3, r1
 8006a76:	4313      	orrs	r3, r2
 8006a78:	d011      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a7e:	3328      	adds	r3, #40	; 0x28
 8006a80:	2101      	movs	r1, #1
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 fa7c 	bl	8007f80 <RCCEx_PLL3_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	6039      	str	r1, [r7, #0]
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	607b      	str	r3, [r7, #4]
 8006ab0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d011      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006abe:	3328      	adds	r3, #40	; 0x28
 8006ac0:	2102      	movs	r1, #2
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f001 fa5c 	bl	8007f80 <RCCEx_PLL3_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006ade:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e000      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006af2:	46bd      	mov	sp, r7
 8006af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006af8:	58024400 	.word	0x58024400

08006afc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b090      	sub	sp, #64	; 0x40
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	f040 8094 	bne.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006b14:	4b9e      	ldr	r3, [pc, #632]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	f200 8087 	bhi.w	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b41 	.word	0x08006b41
 8006b30:	08006b69 	.word	0x08006b69
 8006b34:	08006b91 	.word	0x08006b91
 8006b38:	08006c2d 	.word	0x08006c2d
 8006b3c:	08006bb9 	.word	0x08006bb9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b40:	4b93      	ldr	r3, [pc, #588]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b4c:	d108      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 f810 	bl	8007b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5c:	f000 bd45 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b64:	f000 bd41 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b68:	4b89      	ldr	r3, [pc, #548]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b74:	d108      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b76:	f107 0318 	add.w	r3, r7, #24
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fd54 	bl	8007628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b84:	f000 bd31 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b8c:	f000 bd2d 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b90:	4b7f      	ldr	r3, [pc, #508]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9c:	d108      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9e:	f107 030c 	add.w	r3, r7, #12
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fe94 	bl	80078d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bac:	f000 bd1d 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bb4:	f000 bd19 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bb8:	4b75      	ldr	r3, [pc, #468]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bc0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bc2:	4b73      	ldr	r3, [pc, #460]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d109      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bd4:	4b6e      	ldr	r3, [pc, #440]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	08db      	lsrs	r3, r3, #3
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	4a6d      	ldr	r2, [pc, #436]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
 8006be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be6:	e01f      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006be8:	4b69      	ldr	r3, [pc, #420]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf4:	d106      	bne.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bfc:	d102      	bne.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bfe:	4b66      	ldr	r3, [pc, #408]	; (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c02:	e011      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c04:	4b62      	ldr	r3, [pc, #392]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c10:	d106      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c18:	d102      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c1a:	4b60      	ldr	r3, [pc, #384]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1e:	e003      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c24:	f000 bce1 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c28:	f000 bcdf 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c2c:	4b5c      	ldr	r3, [pc, #368]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c30:	f000 bcdb 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c38:	f000 bcd7 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c40:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006c44:	430b      	orrs	r3, r1
 8006c46:	f040 80ad 	bne.w	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006c4a:	4b51      	ldr	r3, [pc, #324]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c4e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006c52:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5a:	d056      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c62:	f200 8090 	bhi.w	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	2bc0      	cmp	r3, #192	; 0xc0
 8006c6a:	f000 8088 	beq.w	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2bc0      	cmp	r3, #192	; 0xc0
 8006c72:	f200 8088 	bhi.w	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	2b80      	cmp	r3, #128	; 0x80
 8006c7a:	d032      	beq.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	2b80      	cmp	r3, #128	; 0x80
 8006c80:	f200 8081 	bhi.w	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	2b40      	cmp	r3, #64	; 0x40
 8006c8e:	d014      	beq.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006c90:	e079      	b.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c92:	4b3f      	ldr	r3, [pc, #252]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c9e:	d108      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 ff67 	bl	8007b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cae:	f000 bc9c 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb6:	f000 bc98 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cba:	4b35      	ldr	r3, [pc, #212]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cc6:	d108      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cc8:	f107 0318 	add.w	r3, r7, #24
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fcab 	bl	8007628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cd6:	f000 bc88 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cde:	f000 bc84 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ce2:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cee:	d108      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf0:	f107 030c 	add.w	r3, r7, #12
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fdeb 	bl	80078d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cfe:	f000 bc74 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d06:	f000 bc70 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d0a:	4b21      	ldr	r3, [pc, #132]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d14:	4b1e      	ldr	r3, [pc, #120]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d10c      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d26:	4b1a      	ldr	r3, [pc, #104]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	08db      	lsrs	r3, r3, #3
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d32:	fa22 f303 	lsr.w	r3, r2, r3
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d38:	e01f      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d3a:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d46:	d106      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d4e:	d102      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d50:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d54:	e011      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d56:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d62:	d106      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d6a:	d102      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d70:	e003      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d76:	f000 bc38 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d7a:	f000 bc36 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d7e:	4b08      	ldr	r3, [pc, #32]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d82:	f000 bc32 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d8a:	f000 bc2e 	b.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
 8006d94:	03d09000 	.word	0x03d09000
 8006d98:	003d0900 	.word	0x003d0900
 8006d9c:	00b71b00 	.word	0x00b71b00
 8006da0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006dac:	430b      	orrs	r3, r1
 8006dae:	f040 809c 	bne.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006db2:	4b9e      	ldr	r3, [pc, #632]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006dba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dc2:	d054      	beq.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dca:	f200 808b 	bhi.w	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dd4:	f000 8083 	beq.w	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dde:	f200 8081 	bhi.w	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006de8:	d02f      	beq.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006df0:	d878      	bhi.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d004      	beq.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dfe:	d012      	beq.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006e00:	e070      	b.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e02:	4b8a      	ldr	r3, [pc, #552]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e0e:	d107      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 feaf 	bl	8007b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e1e:	e3e4      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e24:	e3e1      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e26:	4b81      	ldr	r3, [pc, #516]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e32:	d107      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e34:	f107 0318 	add.w	r3, r7, #24
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fbf5 	bl	8007628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e42:	e3d2      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e48:	e3cf      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e4a:	4b78      	ldr	r3, [pc, #480]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e56:	d107      	bne.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e58:	f107 030c 	add.w	r3, r7, #12
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fd37 	bl	80078d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e66:	e3c0      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e6c:	e3bd      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e6e:	4b6f      	ldr	r3, [pc, #444]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e78:	4b6c      	ldr	r3, [pc, #432]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d10c      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d109      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e8a:	4b68      	ldr	r3, [pc, #416]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	08db      	lsrs	r3, r3, #3
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	4a66      	ldr	r2, [pc, #408]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006e96:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e9c:	e01e      	b.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e9e:	4b63      	ldr	r3, [pc, #396]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eaa:	d106      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eb2:	d102      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006eb4:	4b5f      	ldr	r3, [pc, #380]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb8:	e010      	b.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006eba:	4b5c      	ldr	r3, [pc, #368]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ec6:	d106      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ece:	d102      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ed0:	4b59      	ldr	r3, [pc, #356]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed4:	e002      	b.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006eda:	e386      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006edc:	e385      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ede:	4b57      	ldr	r3, [pc, #348]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ee2:	e382      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ee8:	e37f      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eee:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	f040 80a7 	bne.w	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006ef8:	4b4c      	ldr	r3, [pc, #304]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006f00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f08:	d055      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f10:	f200 8096 	bhi.w	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f1a:	f000 8084 	beq.w	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f24:	f200 808c 	bhi.w	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f2e:	d030      	beq.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f36:	f200 8083 	bhi.w	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f46:	d012      	beq.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006f48:	e07a      	b.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f4a:	4b38      	ldr	r3, [pc, #224]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f56:	d107      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fe0b 	bl	8007b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f66:	e340      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f6c:	e33d      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f6e:	4b2f      	ldr	r3, [pc, #188]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f7a:	d107      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f7c:	f107 0318 	add.w	r3, r7, #24
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fb51 	bl	8007628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f8a:	e32e      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f90:	e32b      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f92:	4b26      	ldr	r3, [pc, #152]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f9e:	d107      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fa0:	f107 030c 	add.w	r3, r7, #12
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fc93 	bl	80078d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fae:	e31c      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fb4:	e319      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d10c      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fd2:	4b16      	ldr	r3, [pc, #88]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	08db      	lsrs	r3, r3, #3
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	4a14      	ldr	r2, [pc, #80]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006fde:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fe4:	e01e      	b.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fe6:	4b11      	ldr	r3, [pc, #68]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff2:	d106      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ffa:	d102      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ffc:	4b0d      	ldr	r3, [pc, #52]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007000:	e010      	b.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007002:	4b0a      	ldr	r3, [pc, #40]	; (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800700e:	d106      	bne.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007016:	d102      	bne.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007018:	4b07      	ldr	r3, [pc, #28]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800701c:	e002      	b.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007022:	e2e2      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007024:	e2e1      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702a:	e2de      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800702c:	58024400 	.word	0x58024400
 8007030:	03d09000 	.word	0x03d09000
 8007034:	003d0900 	.word	0x003d0900
 8007038:	00b71b00 	.word	0x00b71b00
 800703c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007044:	e2d1      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800704a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800704e:	430b      	orrs	r3, r1
 8007050:	f040 809c 	bne.w	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007054:	4b93      	ldr	r3, [pc, #588]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007058:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800705c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007064:	d054      	beq.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800706c:	f200 808b 	bhi.w	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007076:	f000 8083 	beq.w	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007080:	f200 8081 	bhi.w	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800708a:	d02f      	beq.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007092:	d878      	bhi.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a0:	d012      	beq.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80070a2:	e070      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070a4:	4b7f      	ldr	r3, [pc, #508]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070b0:	d107      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fd5e 	bl	8007b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c0:	e293      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c6:	e290      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070c8:	4b76      	ldr	r3, [pc, #472]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070d4:	d107      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070d6:	f107 0318 	add.w	r3, r7, #24
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 faa4 	bl	8007628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070e4:	e281      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ea:	e27e      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070ec:	4b6d      	ldr	r3, [pc, #436]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f8:	d107      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070fa:	f107 030c 	add.w	r3, r7, #12
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fbe6 	bl	80078d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007108:	e26f      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800710e:	e26c      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007110:	4b64      	ldr	r3, [pc, #400]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007118:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800711a:	4b62      	ldr	r3, [pc, #392]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b04      	cmp	r3, #4
 8007124:	d10c      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007128:	2b00      	cmp	r3, #0
 800712a:	d109      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800712c:	4b5d      	ldr	r3, [pc, #372]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	08db      	lsrs	r3, r3, #3
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	4a5c      	ldr	r2, [pc, #368]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007138:	fa22 f303 	lsr.w	r3, r2, r3
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713e:	e01e      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007140:	4b58      	ldr	r3, [pc, #352]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800714c:	d106      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007154:	d102      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007156:	4b55      	ldr	r3, [pc, #340]	; (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800715a:	e010      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800715c:	4b51      	ldr	r3, [pc, #324]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007168:	d106      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007170:	d102      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007172:	4b4f      	ldr	r3, [pc, #316]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007176:	e002      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800717c:	e235      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800717e:	e234      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007180:	4b4c      	ldr	r3, [pc, #304]	; (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007184:	e231      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800718a:	e22e      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800718c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007190:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007194:	430b      	orrs	r3, r1
 8007196:	f040 808f 	bne.w	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800719a:	4b42      	ldr	r3, [pc, #264]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800719c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80071a2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071aa:	d06b      	beq.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071b2:	d874      	bhi.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80071b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071ba:	d056      	beq.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80071bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071c2:	d86c      	bhi.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80071c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071ca:	d03b      	beq.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071d2:	d864      	bhi.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071da:	d021      	beq.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071e2:	d85c      	bhi.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d004      	beq.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f0:	d004      	beq.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80071f2:	e054      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80071f4:	f7fe fa62 	bl	80056bc <HAL_RCC_GetPCLK1Freq>
 80071f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071fa:	e1f6      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071fc:	4b29      	ldr	r3, [pc, #164]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007208:	d107      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800720a:	f107 0318 	add.w	r3, r7, #24
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fa0a 	bl	8007628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007218:	e1e7      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721e:	e1e4      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007220:	4b20      	ldr	r3, [pc, #128]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800722c:	d107      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800722e:	f107 030c 	add.w	r3, r7, #12
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fb4c 	bl	80078d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800723c:	e1d5      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007242:	e1d2      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007244:	4b17      	ldr	r3, [pc, #92]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b04      	cmp	r3, #4
 800724e:	d109      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007250:	4b14      	ldr	r3, [pc, #80]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	08db      	lsrs	r3, r3, #3
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	4a13      	ldr	r2, [pc, #76]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007262:	e1c2      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007268:	e1bf      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800726a:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007276:	d102      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007278:	4b0c      	ldr	r3, [pc, #48]	; (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800727c:	e1b5      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007282:	e1b2      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007284:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007290:	d102      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007292:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007296:	e1a8      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800729c:	e1a5      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a2:	e1a2      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072a4:	58024400 	.word	0x58024400
 80072a8:	03d09000 	.word	0x03d09000
 80072ac:	003d0900 	.word	0x003d0900
 80072b0:	00b71b00 	.word	0x00b71b00
 80072b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80072b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072bc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80072c0:	430b      	orrs	r3, r1
 80072c2:	d173      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80072c4:	4b9c      	ldr	r3, [pc, #624]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072d4:	d02f      	beq.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072dc:	d863      	bhi.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ea:	d012      	beq.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80072ec:	e05b      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072ee:	4b92      	ldr	r3, [pc, #584]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072fa:	d107      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072fc:	f107 0318 	add.w	r3, r7, #24
 8007300:	4618      	mov	r0, r3
 8007302:	f000 f991 	bl	8007628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800730a:	e16e      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007310:	e16b      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007312:	4b89      	ldr	r3, [pc, #548]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800731a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800731e:	d107      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fad3 	bl	80078d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800732e:	e15c      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007334:	e159      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007336:	4b80      	ldr	r3, [pc, #512]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800733e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007340:	4b7d      	ldr	r3, [pc, #500]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b04      	cmp	r3, #4
 800734a:	d10c      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007352:	4b79      	ldr	r3, [pc, #484]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	08db      	lsrs	r3, r3, #3
 8007358:	f003 0303 	and.w	r3, r3, #3
 800735c:	4a77      	ldr	r2, [pc, #476]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800735e:	fa22 f303 	lsr.w	r3, r2, r3
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007364:	e01e      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007366:	4b74      	ldr	r3, [pc, #464]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007372:	d106      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800737a:	d102      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800737c:	4b70      	ldr	r3, [pc, #448]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800737e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007380:	e010      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007382:	4b6d      	ldr	r3, [pc, #436]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800738e:	d106      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007396:	d102      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007398:	4b6a      	ldr	r3, [pc, #424]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800739c:	e002      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80073a2:	e122      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073a4:	e121      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073aa:	e11e      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80073ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80073b4:	430b      	orrs	r3, r1
 80073b6:	d133      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80073b8:	4b5f      	ldr	r3, [pc, #380]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ce:	d012      	beq.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80073d0:	e023      	b.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073d2:	4b59      	ldr	r3, [pc, #356]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073de:	d107      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fbc7 	bl	8007b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ee:	e0fc      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f4:	e0f9      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073f6:	4b50      	ldr	r3, [pc, #320]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007402:	d107      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007404:	f107 0318 	add.w	r3, r7, #24
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f90d 	bl	8007628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007412:	e0ea      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007418:	e0e7      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800741e:	e0e4      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007424:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007428:	430b      	orrs	r3, r1
 800742a:	f040 808d 	bne.w	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800742e:	4b42      	ldr	r3, [pc, #264]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007432:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007436:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800743e:	d06b      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007446:	d874      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744e:	d056      	beq.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007456:	d86c      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800745e:	d03b      	beq.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007466:	d864      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800746e:	d021      	beq.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007476:	d85c      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	2b00      	cmp	r3, #0
 800747c:	d004      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007484:	d004      	beq.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007486:	e054      	b.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007488:	f000 f8b8 	bl	80075fc <HAL_RCCEx_GetD3PCLK1Freq>
 800748c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800748e:	e0ac      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007490:	4b29      	ldr	r3, [pc, #164]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800749c:	d107      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800749e:	f107 0318 	add.w	r3, r7, #24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f8c0 	bl	8007628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ac:	e09d      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074b2:	e09a      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074b4:	4b20      	ldr	r3, [pc, #128]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074c0:	d107      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074c2:	f107 030c 	add.w	r3, r7, #12
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fa02 	bl	80078d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074d0:	e08b      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074d6:	e088      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074d8:	4b17      	ldr	r3, [pc, #92]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d109      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e4:	4b14      	ldr	r3, [pc, #80]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	08db      	lsrs	r3, r3, #3
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	4a13      	ldr	r2, [pc, #76]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074f6:	e078      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074fc:	e075      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80074fe:	4b0e      	ldr	r3, [pc, #56]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800750a:	d102      	bne.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800750c:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007510:	e06b      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007516:	e068      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007524:	d102      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007526:	4b07      	ldr	r3, [pc, #28]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007528:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800752a:	e05e      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007530:	e05b      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007536:	e058      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007538:	58024400 	.word	0x58024400
 800753c:	03d09000 	.word	0x03d09000
 8007540:	003d0900 	.word	0x003d0900
 8007544:	00b71b00 	.word	0x00b71b00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007550:	430b      	orrs	r3, r1
 8007552:	d148      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007554:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800755c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007564:	d02a      	beq.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800756c:	d838      	bhi.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800757a:	d00d      	beq.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800757c:	e030      	b.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800757e:	4b1d      	ldr	r3, [pc, #116]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800758a:	d102      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800758c:	4b1a      	ldr	r3, [pc, #104]	; (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007590:	e02b      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007596:	e028      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007598:	4b16      	ldr	r3, [pc, #88]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075a4:	d107      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fae4 	bl	8007b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b4:	e019      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ba:	e016      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075bc:	4b0d      	ldr	r3, [pc, #52]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075c8:	d107      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ca:	f107 0318 	add.w	r3, r7, #24
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 f82a 	bl	8007628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d8:	e007      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075de:	e004      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e4:	e001      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80075ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3740      	adds	r7, #64	; 0x40
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	58024400 	.word	0x58024400
 80075f8:	00b71b00 	.word	0x00b71b00

080075fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007600:	f7fe f82c 	bl	800565c <HAL_RCC_GetHCLKFreq>
 8007604:	4602      	mov	r2, r0
 8007606:	4b06      	ldr	r3, [pc, #24]	; (8007620 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	091b      	lsrs	r3, r3, #4
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	4904      	ldr	r1, [pc, #16]	; (8007624 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007612:	5ccb      	ldrb	r3, [r1, r3]
 8007614:	f003 031f 	and.w	r3, r3, #31
 8007618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800761c:	4618      	mov	r0, r3
 800761e:	bd80      	pop	{r7, pc}
 8007620:	58024400 	.word	0x58024400
 8007624:	08014b4c 	.word	0x08014b4c

08007628 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007628:	b480      	push	{r7}
 800762a:	b089      	sub	sp, #36	; 0x24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007630:	4ba1      	ldr	r3, [pc, #644]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800763a:	4b9f      	ldr	r3, [pc, #636]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	0b1b      	lsrs	r3, r3, #12
 8007640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007644:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007646:	4b9c      	ldr	r3, [pc, #624]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	091b      	lsrs	r3, r3, #4
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007652:	4b99      	ldr	r3, [pc, #612]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007656:	08db      	lsrs	r3, r3, #3
 8007658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	fb02 f303 	mul.w	r3, r2, r3
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8111 	beq.w	8007898 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b02      	cmp	r3, #2
 800767a:	f000 8083 	beq.w	8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b02      	cmp	r3, #2
 8007682:	f200 80a1 	bhi.w	80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d056      	beq.n	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007692:	e099      	b.n	80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007694:	4b88      	ldr	r3, [pc, #544]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0320 	and.w	r3, r3, #32
 800769c:	2b00      	cmp	r3, #0
 800769e:	d02d      	beq.n	80076fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076a0:	4b85      	ldr	r3, [pc, #532]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	08db      	lsrs	r3, r3, #3
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	4a84      	ldr	r2, [pc, #528]	; (80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80076ac:	fa22 f303 	lsr.w	r3, r2, r3
 80076b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ca:	4b7b      	ldr	r3, [pc, #492]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076da:	ed97 6a03 	vldr	s12, [r7, #12]
 80076de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076fa:	e087      	b.n	800780c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800770a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770e:	4b6a      	ldr	r3, [pc, #424]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007722:	eddf 5a67 	vldr	s11, [pc, #412]	; 80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800773e:	e065      	b.n	800780c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800774e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007752:	4b59      	ldr	r3, [pc, #356]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007762:	ed97 6a03 	vldr	s12, [r7, #12]
 8007766:	eddf 5a56 	vldr	s11, [pc, #344]	; 80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800776a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007782:	e043      	b.n	800780c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007796:	4b48      	ldr	r3, [pc, #288]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779e:	ee07 3a90 	vmov	s15, r3
 80077a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c6:	e021      	b.n	800780c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80078c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077da:	4b37      	ldr	r3, [pc, #220]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800780a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800780c:	4b2a      	ldr	r3, [pc, #168]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	0a5b      	lsrs	r3, r3, #9
 8007812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007826:	edd7 6a07 	vldr	s13, [r7, #28]
 800782a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007832:	ee17 2a90 	vmov	r2, s15
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800783a:	4b1f      	ldr	r3, [pc, #124]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783e:	0c1b      	lsrs	r3, r3, #16
 8007840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007844:	ee07 3a90 	vmov	s15, r3
 8007848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007854:	edd7 6a07 	vldr	s13, [r7, #28]
 8007858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800785c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007860:	ee17 2a90 	vmov	r2, s15
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007868:	4b13      	ldr	r3, [pc, #76]	; (80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	0e1b      	lsrs	r3, r3, #24
 800786e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800787e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007882:	edd7 6a07 	vldr	s13, [r7, #28]
 8007886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800788a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800788e:	ee17 2a90 	vmov	r2, s15
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007896:	e008      	b.n	80078aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	609a      	str	r2, [r3, #8]
}
 80078aa:	bf00      	nop
 80078ac:	3724      	adds	r7, #36	; 0x24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	58024400 	.word	0x58024400
 80078bc:	03d09000 	.word	0x03d09000
 80078c0:	46000000 	.word	0x46000000
 80078c4:	4c742400 	.word	0x4c742400
 80078c8:	4a742400 	.word	0x4a742400
 80078cc:	4b371b00 	.word	0x4b371b00

080078d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b089      	sub	sp, #36	; 0x24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078d8:	4ba1      	ldr	r3, [pc, #644]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80078e2:	4b9f      	ldr	r3, [pc, #636]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	0d1b      	lsrs	r3, r3, #20
 80078e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078ee:	4b9c      	ldr	r3, [pc, #624]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	0a1b      	lsrs	r3, r3, #8
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80078fa:	4b99      	ldr	r3, [pc, #612]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	08db      	lsrs	r3, r3, #3
 8007900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	fb02 f303 	mul.w	r3, r2, r3
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 8111 	beq.w	8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b02      	cmp	r3, #2
 8007922:	f000 8083 	beq.w	8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b02      	cmp	r3, #2
 800792a:	f200 80a1 	bhi.w	8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d056      	beq.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800793a:	e099      	b.n	8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800793c:	4b88      	ldr	r3, [pc, #544]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d02d      	beq.n	80079a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007948:	4b85      	ldr	r3, [pc, #532]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	08db      	lsrs	r3, r3, #3
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	4a84      	ldr	r2, [pc, #528]	; (8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007954:	fa22 f303 	lsr.w	r3, r2, r3
 8007958:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	ee07 3a90 	vmov	s15, r3
 8007960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007972:	4b7b      	ldr	r3, [pc, #492]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007982:	ed97 6a03 	vldr	s12, [r7, #12]
 8007986:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800798a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80079a2:	e087      	b.n	8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80079b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b6:	4b6a      	ldr	r3, [pc, #424]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079e6:	e065      	b.n	8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079fa:	4b59      	ldr	r3, [pc, #356]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a2a:	e043      	b.n	8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a3e:	4b48      	ldr	r3, [pc, #288]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a6e:	e021      	b.n	8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a82:	4b37      	ldr	r3, [pc, #220]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ab2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007ab4:	4b2a      	ldr	r3, [pc, #168]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	0a5b      	lsrs	r3, r3, #9
 8007aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ada:	ee17 2a90 	vmov	r2, s15
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007ae2:	4b1f      	ldr	r3, [pc, #124]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	0c1b      	lsrs	r3, r3, #16
 8007ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aec:	ee07 3a90 	vmov	s15, r3
 8007af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007af8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b08:	ee17 2a90 	vmov	r2, s15
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007b10:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b14:	0e1b      	lsrs	r3, r3, #24
 8007b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b36:	ee17 2a90 	vmov	r2, s15
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007b3e:	e008      	b.n	8007b52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	609a      	str	r2, [r3, #8]
}
 8007b52:	bf00      	nop
 8007b54:	3724      	adds	r7, #36	; 0x24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	58024400 	.word	0x58024400
 8007b64:	03d09000 	.word	0x03d09000
 8007b68:	46000000 	.word	0x46000000
 8007b6c:	4c742400 	.word	0x4c742400
 8007b70:	4a742400 	.word	0x4a742400
 8007b74:	4b371b00 	.word	0x4b371b00

08007b78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b089      	sub	sp, #36	; 0x24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b80:	4ba0      	ldr	r3, [pc, #640]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007b8a:	4b9e      	ldr	r3, [pc, #632]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8e:	091b      	lsrs	r3, r3, #4
 8007b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b94:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b96:	4b9b      	ldr	r3, [pc, #620]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ba0:	4b98      	ldr	r3, [pc, #608]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba4:	08db      	lsrs	r3, r3, #3
 8007ba6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	fb02 f303 	mul.w	r3, r2, r3
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 8111 	beq.w	8007de6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	f000 8083 	beq.w	8007cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	f200 80a1 	bhi.w	8007d16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d056      	beq.n	8007c8e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007be0:	e099      	b.n	8007d16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007be2:	4b88      	ldr	r3, [pc, #544]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d02d      	beq.n	8007c4a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bee:	4b85      	ldr	r3, [pc, #532]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	08db      	lsrs	r3, r3, #3
 8007bf4:	f003 0303 	and.w	r3, r3, #3
 8007bf8:	4a83      	ldr	r2, [pc, #524]	; (8007e08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	ee07 3a90 	vmov	s15, r3
 8007c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c18:	4b7a      	ldr	r3, [pc, #488]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c20:	ee07 3a90 	vmov	s15, r3
 8007c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c28:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c2c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c44:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c48:	e087      	b.n	8007d5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c54:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007e10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5c:	4b69      	ldr	r3, [pc, #420]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c64:	ee07 3a90 	vmov	s15, r3
 8007c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c70:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c8c:	e065      	b.n	8007d5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	ee07 3a90 	vmov	s15, r3
 8007c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c98:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007e14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca0:	4b58      	ldr	r3, [pc, #352]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca8:	ee07 3a90 	vmov	s15, r3
 8007cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cb4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cd0:	e043      	b.n	8007d5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	ee07 3a90 	vmov	s15, r3
 8007cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cdc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce4:	4b47      	ldr	r3, [pc, #284]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cf8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d14:	e021      	b.n	8007d5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d20:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007e10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d28:	4b36      	ldr	r3, [pc, #216]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d30:	ee07 3a90 	vmov	s15, r3
 8007d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d3c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d58:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007d5a:	4b2a      	ldr	r3, [pc, #168]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	0a5b      	lsrs	r3, r3, #9
 8007d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d64:	ee07 3a90 	vmov	s15, r3
 8007d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d80:	ee17 2a90 	vmov	r2, s15
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007d88:	4b1e      	ldr	r3, [pc, #120]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8c:	0c1b      	lsrs	r3, r3, #16
 8007d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dae:	ee17 2a90 	vmov	r2, s15
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007db6:	4b13      	ldr	r3, [pc, #76]	; (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	0e1b      	lsrs	r3, r3, #24
 8007dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc0:	ee07 3a90 	vmov	s15, r3
 8007dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ddc:	ee17 2a90 	vmov	r2, s15
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007de4:	e008      	b.n	8007df8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	3724      	adds	r7, #36	; 0x24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	58024400 	.word	0x58024400
 8007e08:	03d09000 	.word	0x03d09000
 8007e0c:	46000000 	.word	0x46000000
 8007e10:	4c742400 	.word	0x4c742400
 8007e14:	4a742400 	.word	0x4a742400
 8007e18:	4b371b00 	.word	0x4b371b00

08007e1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e2a:	4b53      	ldr	r3, [pc, #332]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d101      	bne.n	8007e3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e099      	b.n	8007f6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e3a:	4b4f      	ldr	r3, [pc, #316]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a4e      	ldr	r2, [pc, #312]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007e40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e46:	f7f8 ff17 	bl	8000c78 <HAL_GetTick>
 8007e4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e4c:	e008      	b.n	8007e60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e4e:	f7f8 ff13 	bl	8000c78 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d901      	bls.n	8007e60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e086      	b.n	8007f6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e60:	4b45      	ldr	r3, [pc, #276]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1f0      	bne.n	8007e4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e6c:	4b42      	ldr	r3, [pc, #264]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	031b      	lsls	r3, r3, #12
 8007e7a:	493f      	ldr	r1, [pc, #252]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	628b      	str	r3, [r1, #40]	; 0x28
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	025b      	lsls	r3, r3, #9
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	431a      	orrs	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	041b      	lsls	r3, r3, #16
 8007e9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	061b      	lsls	r3, r3, #24
 8007eac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007eb0:	4931      	ldr	r1, [pc, #196]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007eb6:	4b30      	ldr	r3, [pc, #192]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	492d      	ldr	r1, [pc, #180]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ec8:	4b2b      	ldr	r3, [pc, #172]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	f023 0220 	bic.w	r2, r3, #32
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	4928      	ldr	r1, [pc, #160]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007eda:	4b27      	ldr	r3, [pc, #156]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	4a26      	ldr	r2, [pc, #152]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007ee0:	f023 0310 	bic.w	r3, r3, #16
 8007ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ee6:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007ee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eea:	4b24      	ldr	r3, [pc, #144]	; (8007f7c <RCCEx_PLL2_Config+0x160>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	69d2      	ldr	r2, [r2, #28]
 8007ef2:	00d2      	lsls	r2, r2, #3
 8007ef4:	4920      	ldr	r1, [pc, #128]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007efa:	4b1f      	ldr	r3, [pc, #124]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	4a1e      	ldr	r2, [pc, #120]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007f00:	f043 0310 	orr.w	r3, r3, #16
 8007f04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007f0c:	4b1a      	ldr	r3, [pc, #104]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	4a19      	ldr	r2, [pc, #100]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f18:	e00f      	b.n	8007f3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d106      	bne.n	8007f2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f20:	4b15      	ldr	r3, [pc, #84]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	4a14      	ldr	r2, [pc, #80]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f2c:	e005      	b.n	8007f3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f2e:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f32:	4a11      	ldr	r2, [pc, #68]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f3a:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a0e      	ldr	r2, [pc, #56]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007f40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f46:	f7f8 fe97 	bl	8000c78 <HAL_GetTick>
 8007f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f4c:	e008      	b.n	8007f60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f4e:	f7f8 fe93 	bl	8000c78 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d901      	bls.n	8007f60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e006      	b.n	8007f6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <RCCEx_PLL2_Config+0x15c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0f0      	beq.n	8007f4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	58024400 	.word	0x58024400
 8007f7c:	ffff0007 	.word	0xffff0007

08007f80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f8e:	4b53      	ldr	r3, [pc, #332]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8007f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d101      	bne.n	8007f9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e099      	b.n	80080d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f9e:	4b4f      	ldr	r3, [pc, #316]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a4e      	ldr	r2, [pc, #312]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8007fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007faa:	f7f8 fe65 	bl	8000c78 <HAL_GetTick>
 8007fae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fb0:	e008      	b.n	8007fc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007fb2:	f7f8 fe61 	bl	8000c78 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d901      	bls.n	8007fc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e086      	b.n	80080d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fc4:	4b45      	ldr	r3, [pc, #276]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1f0      	bne.n	8007fb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007fd0:	4b42      	ldr	r3, [pc, #264]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	051b      	lsls	r3, r3, #20
 8007fde:	493f      	ldr	r1, [pc, #252]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	628b      	str	r3, [r1, #40]	; 0x28
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	025b      	lsls	r3, r3, #9
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	041b      	lsls	r3, r3, #16
 8008002:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	3b01      	subs	r3, #1
 800800e:	061b      	lsls	r3, r3, #24
 8008010:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008014:	4931      	ldr	r1, [pc, #196]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008016:	4313      	orrs	r3, r2
 8008018:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800801a:	4b30      	ldr	r3, [pc, #192]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	492d      	ldr	r1, [pc, #180]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008028:	4313      	orrs	r3, r2
 800802a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800802c:	4b2b      	ldr	r3, [pc, #172]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 800802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008030:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	4928      	ldr	r1, [pc, #160]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 800803a:	4313      	orrs	r3, r2
 800803c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800803e:	4b27      	ldr	r3, [pc, #156]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	4a26      	ldr	r2, [pc, #152]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800804a:	4b24      	ldr	r3, [pc, #144]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 800804c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800804e:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <RCCEx_PLL3_Config+0x160>)
 8008050:	4013      	ands	r3, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	69d2      	ldr	r2, [r2, #28]
 8008056:	00d2      	lsls	r2, r2, #3
 8008058:	4920      	ldr	r1, [pc, #128]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 800805a:	4313      	orrs	r3, r2
 800805c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800805e:	4b1f      	ldr	r3, [pc, #124]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	4a1e      	ldr	r2, [pc, #120]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008068:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d106      	bne.n	800807e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008070:	4b1a      	ldr	r3, [pc, #104]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	4a19      	ldr	r2, [pc, #100]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008076:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800807a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800807c:	e00f      	b.n	800809e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d106      	bne.n	8008092 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008084:	4b15      	ldr	r3, [pc, #84]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	4a14      	ldr	r2, [pc, #80]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 800808a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800808e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008090:	e005      	b.n	800809e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008092:	4b12      	ldr	r3, [pc, #72]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008096:	4a11      	ldr	r2, [pc, #68]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 8008098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800809c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800809e:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a0e      	ldr	r2, [pc, #56]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 80080a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080aa:	f7f8 fde5 	bl	8000c78 <HAL_GetTick>
 80080ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080b0:	e008      	b.n	80080c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080b2:	f7f8 fde1 	bl	8000c78 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e006      	b.n	80080d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080c4:	4b05      	ldr	r3, [pc, #20]	; (80080dc <RCCEx_PLL3_Config+0x15c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0f0      	beq.n	80080b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	58024400 	.word	0x58024400
 80080e0:	ffff0007 	.word	0xffff0007

080080e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08a      	sub	sp, #40	; 0x28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e075      	b.n	80081e2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7f8 fa93 	bl	8000634 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2204      	movs	r2, #4
 8008112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f868 	bl	80081ec <HAL_SD_InitCard>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e05d      	b.n	80081e2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008126:	f107 0308 	add.w	r3, r7, #8
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fdb5 	bl	8008c9c <HAL_SD_GetCardStatus>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e052      	b.n	80081e2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800813c:	7e3b      	ldrb	r3, [r7, #24]
 800813e:	b2db      	uxtb	r3, r3
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008142:	7e7b      	ldrb	r3, [r7, #25]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814c:	2b01      	cmp	r3, #1
 800814e:	d10a      	bne.n	8008166 <HAL_SD_Init+0x82>
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	2b00      	cmp	r3, #0
 8008154:	d102      	bne.n	800815c <HAL_SD_Init+0x78>
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d004      	beq.n	8008166 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008162:	659a      	str	r2, [r3, #88]	; 0x58
 8008164:	e00b      	b.n	800817e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	2b01      	cmp	r3, #1
 800816c:	d104      	bne.n	8008178 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008174:	659a      	str	r2, [r3, #88]	; 0x58
 8008176:	e002      	b.n	800817e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fe73 	bl	8008e70 <HAL_SD_ConfigWideBusOperation>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e026      	b.n	80081e2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008194:	f7f8 fd70 	bl	8000c78 <HAL_GetTick>
 8008198:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800819a:	e011      	b.n	80081c0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800819c:	f7f8 fd6c 	bl	8000c78 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d109      	bne.n	80081c0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081b2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e010      	b.n	80081e2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 ff67 	bl	8009094 <HAL_SD_GetCardState>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d1e7      	bne.n	800819c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3728      	adds	r7, #40	; 0x28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80081ec:	b590      	push	{r4, r7, lr}
 80081ee:	b08d      	sub	sp, #52	; 0x34
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008200:	2300      	movs	r3, #0
 8008202:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008204:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008208:	f04f 0100 	mov.w	r1, #0
 800820c:	f7fe fc76 	bl	8006afc <HAL_RCCEx_GetPeriphCLKFreq>
 8008210:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	d109      	bne.n	800822c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008226:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e070      	b.n	800830e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	0a1b      	lsrs	r3, r3, #8
 8008230:	4a39      	ldr	r2, [pc, #228]	; (8008318 <HAL_SD_InitCard+0x12c>)
 8008232:	fba2 2303 	umull	r2, r3, r2, r3
 8008236:	091b      	lsrs	r3, r3, #4
 8008238:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681c      	ldr	r4, [r3, #0]
 800823e:	466a      	mov	r2, sp
 8008240:	f107 0318 	add.w	r3, r7, #24
 8008244:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008248:	e882 0003 	stmia.w	r2, {r0, r1}
 800824c:	f107 030c 	add.w	r3, r7, #12
 8008250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008252:	4620      	mov	r0, r4
 8008254:	f002 f91c 	bl	800a490 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4618      	mov	r0, r3
 800825e:	f002 f95f 	bl	800a520 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d005      	beq.n	8008274 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800827a:	4a28      	ldr	r2, [pc, #160]	; (800831c <HAL_SD_InitCard+0x130>)
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008282:	3301      	adds	r3, #1
 8008284:	4618      	mov	r0, r3
 8008286:	f7f8 fd03 	bl	8000c90 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fff0 	bl	8009270 <SD_PowerON>
 8008290:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e02e      	b.n	800830e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 ff0f 	bl	80090d4 <SD_InitCard>
 80082b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e01b      	b.n	800830e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082de:	4618      	mov	r0, r3
 80082e0:	f002 f9b4 	bl	800a64c <SDMMC_CmdBlockLength>
 80082e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00f      	beq.n	800830c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a0b      	ldr	r2, [pc, #44]	; (8008320 <HAL_SD_InitCard+0x134>)
 80082f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	372c      	adds	r7, #44	; 0x2c
 8008312:	46bd      	mov	sp, r7
 8008314:	bd90      	pop	{r4, r7, pc}
 8008316:	bf00      	nop
 8008318:	014f8b59 	.word	0x014f8b59
 800831c:	00012110 	.word	0x00012110
 8008320:	1fe00fff 	.word	0x1fe00fff

08008324 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b092      	sub	sp, #72	; 0x48
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008332:	f7f8 fca1 	bl	8000c78 <HAL_GetTick>
 8008336:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d107      	bne.n	8008356 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e167      	b.n	8008626 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b01      	cmp	r3, #1
 8008360:	f040 815a 	bne.w	8008618 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800836a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	441a      	add	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008374:	429a      	cmp	r2, r3
 8008376:	d907      	bls.n	8008388 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e14e      	b.n	8008626 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2203      	movs	r2, #3
 800838c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2200      	movs	r2, #0
 8008396:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	2b01      	cmp	r3, #1
 800839e:	d002      	beq.n	80083a6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	025b      	lsls	r3, r3, #9
 80083a4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083a6:	f04f 33ff 	mov.w	r3, #4294967295
 80083aa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	025b      	lsls	r3, r3, #9
 80083b0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80083b2:	2390      	movs	r3, #144	; 0x90
 80083b4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80083b6:	2302      	movs	r3, #2
 80083b8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80083be:	2300      	movs	r3, #0
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f107 0214 	add.w	r2, r7, #20
 80083ca:	4611      	mov	r1, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f002 f911 	bl	800a5f4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083e0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d90a      	bls.n	80083fe <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2202      	movs	r2, #2
 80083ec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083f4:	4618      	mov	r0, r3
 80083f6:	f002 f96f 	bl	800a6d8 <SDMMC_CmdReadMultiBlock>
 80083fa:	6478      	str	r0, [r7, #68]	; 0x44
 80083fc:	e009      	b.n	8008412 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800840a:	4618      	mov	r0, r3
 800840c:	f002 f941 	bl	800a692 <SDMMC_CmdReadSingleBlock>
 8008410:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008414:	2b00      	cmp	r3, #0
 8008416:	d012      	beq.n	800843e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a84      	ldr	r2, [pc, #528]	; (8008630 <HAL_SD_ReadBlocks+0x30c>)
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008426:	431a      	orrs	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e0f3      	b.n	8008626 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008442:	e058      	b.n	80084f6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d033      	beq.n	80084ba <HAL_SD_ReadBlocks+0x196>
 8008452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008454:	2b1f      	cmp	r3, #31
 8008456:	d930      	bls.n	80084ba <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008458:	2300      	movs	r3, #0
 800845a:	643b      	str	r3, [r7, #64]	; 0x40
 800845c:	e027      	b.n	80084ae <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f002 f83e 	bl	800a4e4 <SDMMC_ReadFIFO>
 8008468:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	b2da      	uxtb	r2, r3
 800846e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008470:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008474:	3301      	adds	r3, #1
 8008476:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847a:	0a1b      	lsrs	r3, r3, #8
 800847c:	b2da      	uxtb	r2, r3
 800847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008480:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008484:	3301      	adds	r3, #1
 8008486:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	0c1b      	lsrs	r3, r3, #16
 800848c:	b2da      	uxtb	r2, r3
 800848e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008490:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008494:	3301      	adds	r3, #1
 8008496:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849a:	0e1b      	lsrs	r3, r3, #24
 800849c:	b2da      	uxtb	r2, r3
 800849e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a4:	3301      	adds	r3, #1
 80084a6:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 80084a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084aa:	3301      	adds	r3, #1
 80084ac:	643b      	str	r3, [r7, #64]	; 0x40
 80084ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b0:	2b07      	cmp	r3, #7
 80084b2:	d9d4      	bls.n	800845e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80084b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b6:	3b20      	subs	r3, #32
 80084b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80084ba:	f7f8 fbdd 	bl	8000c78 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d902      	bls.n	80084d0 <HAL_SD_ReadBlocks+0x1ac>
 80084ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d112      	bne.n	80084f6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a56      	ldr	r2, [pc, #344]	; (8008630 <HAL_SD_ReadBlocks+0x30c>)
 80084d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e097      	b.n	8008626 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008500:	2b00      	cmp	r3, #0
 8008502:	d09f      	beq.n	8008444 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008512:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851e:	2b00      	cmp	r3, #0
 8008520:	d022      	beq.n	8008568 <HAL_SD_ReadBlocks+0x244>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d91f      	bls.n	8008568 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852c:	2b03      	cmp	r3, #3
 800852e:	d01b      	beq.n	8008568 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f002 f939 	bl	800a7ac <SDMMC_CmdStopTransfer>
 800853a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800853c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800853e:	2b00      	cmp	r3, #0
 8008540:	d012      	beq.n	8008568 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a3a      	ldr	r2, [pc, #232]	; (8008630 <HAL_SD_ReadBlocks+0x30c>)
 8008548:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800854e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008550:	431a      	orrs	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e05e      	b.n	8008626 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856e:	f003 0308 	and.w	r3, r3, #8
 8008572:	2b00      	cmp	r3, #0
 8008574:	d012      	beq.n	800859c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a2d      	ldr	r2, [pc, #180]	; (8008630 <HAL_SD_ReadBlocks+0x30c>)
 800857c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008582:	f043 0208 	orr.w	r2, r3, #8
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e044      	b.n	8008626 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d012      	beq.n	80085d0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a20      	ldr	r2, [pc, #128]	; (8008630 <HAL_SD_ReadBlocks+0x30c>)
 80085b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b6:	f043 0202 	orr.w	r2, r3, #2
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e02a      	b.n	8008626 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d012      	beq.n	8008604 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a13      	ldr	r2, [pc, #76]	; (8008630 <HAL_SD_ReadBlocks+0x30c>)
 80085e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ea:	f043 0220 	orr.w	r2, r3, #32
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e010      	b.n	8008626 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a0a      	ldr	r2, [pc, #40]	; (8008634 <HAL_SD_ReadBlocks+0x310>)
 800860a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e006      	b.n	8008626 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
  }
}
 8008626:	4618      	mov	r0, r3
 8008628:	3748      	adds	r7, #72	; 0x48
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	1fe00fff 	.word	0x1fe00fff
 8008634:	18000f3a 	.word	0x18000f3a

08008638 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b092      	sub	sp, #72	; 0x48
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008646:	f7f8 fb17 	bl	8000c78 <HAL_GetTick>
 800864a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d107      	bne.n	800866a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e16b      	b.n	8008942 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b01      	cmp	r3, #1
 8008674:	f040 815e 	bne.w	8008934 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800867e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	441a      	add	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008688:	429a      	cmp	r2, r3
 800868a:	d907      	bls.n	800869c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008690:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e152      	b.n	8008942 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2203      	movs	r2, #3
 80086a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2200      	movs	r2, #0
 80086aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d002      	beq.n	80086ba <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	025b      	lsls	r3, r3, #9
 80086b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086ba:	f04f 33ff 	mov.w	r3, #4294967295
 80086be:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	025b      	lsls	r3, r3, #9
 80086c4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80086c6:	2390      	movs	r3, #144	; 0x90
 80086c8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80086ca:	2300      	movs	r3, #0
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80086d2:	2300      	movs	r3, #0
 80086d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f107 0218 	add.w	r2, r7, #24
 80086de:	4611      	mov	r1, r2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 ff87 	bl	800a5f4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086f4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d90a      	bls.n	8008712 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2220      	movs	r2, #32
 8008700:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008708:	4618      	mov	r0, r3
 800870a:	f002 f82b 	bl	800a764 <SDMMC_CmdWriteMultiBlock>
 800870e:	6478      	str	r0, [r7, #68]	; 0x44
 8008710:	e009      	b.n	8008726 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2210      	movs	r2, #16
 8008716:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800871e:	4618      	mov	r0, r3
 8008720:	f001 fffd 	bl	800a71e <SDMMC_CmdWriteSingleBlock>
 8008724:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008728:	2b00      	cmp	r3, #0
 800872a:	d012      	beq.n	8008752 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a86      	ldr	r2, [pc, #536]	; (800894c <HAL_SD_WriteBlocks+0x314>)
 8008732:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800873a:	431a      	orrs	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e0f7      	b.n	8008942 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008756:	e05c      	b.n	8008812 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d037      	beq.n	80087d6 <HAL_SD_WriteBlocks+0x19e>
 8008766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008768:	2b1f      	cmp	r3, #31
 800876a:	d934      	bls.n	80087d6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800876c:	2300      	movs	r3, #0
 800876e:	643b      	str	r3, [r7, #64]	; 0x40
 8008770:	e02b      	b.n	80087ca <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877a:	3301      	adds	r3, #1
 800877c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800877e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	021a      	lsls	r2, r3, #8
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	4313      	orrs	r3, r2
 8008788:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800878a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878c:	3301      	adds	r3, #1
 800878e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	041a      	lsls	r2, r3, #16
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800879c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879e:	3301      	adds	r3, #1
 80087a0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80087a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	061a      	lsls	r2, r3, #24
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	3301      	adds	r3, #1
 80087b2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f107 0214 	add.w	r2, r7, #20
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 fe9d 	bl	800a4fe <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80087c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c6:	3301      	adds	r3, #1
 80087c8:	643b      	str	r3, [r7, #64]	; 0x40
 80087ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087cc:	2b07      	cmp	r3, #7
 80087ce:	d9d0      	bls.n	8008772 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80087d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d2:	3b20      	subs	r3, #32
 80087d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80087d6:	f7f8 fa4f 	bl	8000c78 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d902      	bls.n	80087ec <HAL_SD_WriteBlocks+0x1b4>
 80087e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d112      	bne.n	8008812 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a56      	ldr	r2, [pc, #344]	; (800894c <HAL_SD_WriteBlocks+0x314>)
 80087f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087fa:	431a      	orrs	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e097      	b.n	8008942 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008818:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800881c:	2b00      	cmp	r3, #0
 800881e:	d09b      	beq.n	8008758 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800882e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883a:	2b00      	cmp	r3, #0
 800883c:	d022      	beq.n	8008884 <HAL_SD_WriteBlocks+0x24c>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d91f      	bls.n	8008884 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	2b03      	cmp	r3, #3
 800884a:	d01b      	beq.n	8008884 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4618      	mov	r0, r3
 8008852:	f001 ffab 	bl	800a7ac <SDMMC_CmdStopTransfer>
 8008856:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800885a:	2b00      	cmp	r3, #0
 800885c:	d012      	beq.n	8008884 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a3a      	ldr	r2, [pc, #232]	; (800894c <HAL_SD_WriteBlocks+0x314>)
 8008864:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800886a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886c:	431a      	orrs	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e05e      	b.n	8008942 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d012      	beq.n	80088b8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a2d      	ldr	r2, [pc, #180]	; (800894c <HAL_SD_WriteBlocks+0x314>)
 8008898:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889e:	f043 0208 	orr.w	r2, r3, #8
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e044      	b.n	8008942 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d012      	beq.n	80088ec <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a20      	ldr	r2, [pc, #128]	; (800894c <HAL_SD_WriteBlocks+0x314>)
 80088cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d2:	f043 0202 	orr.w	r2, r3, #2
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e02a      	b.n	8008942 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f2:	f003 0310 	and.w	r3, r3, #16
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d012      	beq.n	8008920 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a13      	ldr	r2, [pc, #76]	; (800894c <HAL_SD_WriteBlocks+0x314>)
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008906:	f043 0210 	orr.w	r2, r3, #16
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e010      	b.n	8008942 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a0a      	ldr	r2, [pc, #40]	; (8008950 <HAL_SD_WriteBlocks+0x318>)
 8008926:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	e006      	b.n	8008942 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008938:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
  }
}
 8008942:	4618      	mov	r0, r3
 8008944:	3748      	adds	r7, #72	; 0x48
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	1fe00fff 	.word	0x1fe00fff
 8008950:	18000f3a 	.word	0x18000f3a

08008954 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008962:	0f9b      	lsrs	r3, r3, #30
 8008964:	b2da      	uxtb	r2, r3
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800896e:	0e9b      	lsrs	r3, r3, #26
 8008970:	b2db      	uxtb	r3, r3
 8008972:	f003 030f 	and.w	r3, r3, #15
 8008976:	b2da      	uxtb	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008980:	0e1b      	lsrs	r3, r3, #24
 8008982:	b2db      	uxtb	r3, r3
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	b2da      	uxtb	r2, r3
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008992:	0c1b      	lsrs	r3, r3, #16
 8008994:	b2da      	uxtb	r2, r3
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899e:	0a1b      	lsrs	r3, r3, #8
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089b4:	0d1b      	lsrs	r3, r3, #20
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c0:	0c1b      	lsrs	r3, r3, #16
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089d2:	0bdb      	lsrs	r3, r3, #15
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089e4:	0b9b      	lsrs	r3, r3, #14
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f6:	0b5b      	lsrs	r3, r3, #13
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a08:	0b1b      	lsrs	r3, r3, #12
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d163      	bne.n	8008aec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a28:	009a      	lsls	r2, r3, #2
 8008a2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a2e:	4013      	ands	r3, r2
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008a34:	0f92      	lsrs	r2, r2, #30
 8008a36:	431a      	orrs	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a40:	0edb      	lsrs	r3, r3, #27
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 0307 	and.w	r3, r3, #7
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a52:	0e1b      	lsrs	r3, r3, #24
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a64:	0d5b      	lsrs	r3, r3, #21
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	f003 0307 	and.w	r3, r3, #7
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a76:	0c9b      	lsrs	r3, r3, #18
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	f003 0307 	and.w	r3, r3, #7
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a88:	0bdb      	lsrs	r3, r3, #15
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	f003 0307 	and.w	r3, r3, #7
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	7e1b      	ldrb	r3, [r3, #24]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	3302      	adds	r3, #2
 8008aac:	2201      	movs	r2, #1
 8008aae:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ab6:	fb03 f202 	mul.w	r2, r3, r2
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	7a1b      	ldrb	r3, [r3, #8]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 030f 	and.w	r3, r3, #15
 8008ac8:	2201      	movs	r2, #1
 8008aca:	409a      	lsls	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008ad8:	0a52      	lsrs	r2, r2, #9
 8008ada:	fb03 f202 	mul.w	r2, r3, r2
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ae8:	655a      	str	r2, [r3, #84]	; 0x54
 8008aea:	e031      	b.n	8008b50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d11d      	bne.n	8008b30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008af8:	041b      	lsls	r3, r3, #16
 8008afa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b02:	0c1b      	lsrs	r3, r3, #16
 8008b04:	431a      	orrs	r2, r3
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	029a      	lsls	r2, r3, #10
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b24:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	655a      	str	r2, [r3, #84]	; 0x54
 8008b2e:	e00f      	b.n	8008b50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a58      	ldr	r2, [pc, #352]	; (8008c98 <HAL_SD_GetCardCSD+0x344>)
 8008b36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e09d      	b.n	8008c8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b54:	0b9b      	lsrs	r3, r3, #14
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b66:	09db      	lsrs	r3, r3, #7
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b88:	0fdb      	lsrs	r3, r3, #31
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b94:	0f5b      	lsrs	r3, r3, #29
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba6:	0e9b      	lsrs	r3, r3, #26
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bb8:	0d9b      	lsrs	r3, r3, #22
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	f003 030f 	and.w	r3, r3, #15
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bca:	0d5b      	lsrs	r3, r3, #21
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008be6:	0c1b      	lsrs	r3, r3, #16
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bfa:	0bdb      	lsrs	r3, r3, #15
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c0e:	0b9b      	lsrs	r3, r3, #14
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c22:	0b5b      	lsrs	r3, r3, #13
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c36:	0b1b      	lsrs	r3, r3, #12
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c4a:	0a9b      	lsrs	r3, r3, #10
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c5e:	0a1b      	lsrs	r3, r3, #8
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c72:	085b      	lsrs	r3, r3, #1
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	1fe00fff 	.word	0x1fe00fff

08008c9c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b094      	sub	sp, #80	; 0x50
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d101      	bne.n	8008cbc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0a7      	b.n	8008e0c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008cbc:	f107 0308 	add.w	r3, r7, #8
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fb62 	bl	800938c <SD_SendSDStatus>
 8008cc8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d011      	beq.n	8008cf4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a4f      	ldr	r2, [pc, #316]	; (8008e14 <HAL_SD_GetCardStatus+0x178>)
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008cf2:	e070      	b.n	8008dd6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	099b      	lsrs	r3, r3, #6
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	095b      	lsrs	r3, r3, #5
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	0e1b      	lsrs	r3, r3, #24
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	4313      	orrs	r3, r2
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	061a      	lsls	r2, r3, #24
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	021b      	lsls	r3, r3, #8
 8008d36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d3a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	0a1b      	lsrs	r3, r3, #8
 8008d40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008d44:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	0e1b      	lsrs	r3, r3, #24
 8008d4a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	0a1b      	lsrs	r3, r3, #8
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	0d1b      	lsrs	r3, r3, #20
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	0c1b      	lsrs	r3, r3, #16
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	4313      	orrs	r3, r2
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	0a9b      	lsrs	r3, r3, #10
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	0a1b      	lsrs	r3, r3, #8
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	f003 0303 	and.w	r3, r3, #3
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	091b      	lsrs	r3, r3, #4
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	0e1b      	lsrs	r3, r3, #24
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 fc34 	bl	800a64c <SDMMC_CmdBlockLength>
 8008de4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00d      	beq.n	8008e08 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <HAL_SD_GetCardStatus+0x178>)
 8008df2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008df8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008e08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3750      	adds	r7, #80	; 0x50
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	1fe00fff 	.word	0x1fe00fff

08008e18 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008e70:	b590      	push	{r4, r7, lr}
 8008e72:	b08d      	sub	sp, #52	; 0x34
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2203      	movs	r2, #3
 8008e84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	2b03      	cmp	r3, #3
 8008e8e:	d02e      	beq.n	8008eee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e96:	d106      	bne.n	8008ea6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	635a      	str	r2, [r3, #52]	; 0x34
 8008ea4:	e029      	b.n	8008efa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008eac:	d10a      	bne.n	8008ec4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fb64 	bl	800957c <SD_WideBus_Enable>
 8008eb4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8008ec2:	e01a      	b.n	8008efa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10a      	bne.n	8008ee0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fba1 	bl	8009612 <SD_WideBus_Disable>
 8008ed0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	431a      	orrs	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	635a      	str	r2, [r3, #52]	; 0x34
 8008ede:	e00c      	b.n	8008efa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	635a      	str	r2, [r3, #52]	; 0x34
 8008eec:	e005      	b.n	8008efa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d007      	beq.n	8008f12 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a5f      	ldr	r2, [pc, #380]	; (8009084 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f10:	e096      	b.n	8009040 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008f12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008f16:	f04f 0100 	mov.w	r1, #0
 8008f1a:	f7fd fdef 	bl	8006afc <HAL_RCCEx_GetPeriphCLKFreq>
 8008f1e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 8083 	beq.w	800902e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	695a      	ldr	r2, [r3, #20]
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4950      	ldr	r1, [pc, #320]	; (8009088 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008f46:	fba1 1303 	umull	r1, r3, r1, r3
 8008f4a:	0e1b      	lsrs	r3, r3, #24
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d303      	bcc.n	8008f58 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	61bb      	str	r3, [r7, #24]
 8008f56:	e05a      	b.n	800900e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f60:	d103      	bne.n	8008f6a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	61bb      	str	r3, [r7, #24]
 8008f68:	e051      	b.n	800900e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f72:	d126      	bne.n	8008fc2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10e      	bne.n	8008f9a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	4a43      	ldr	r2, [pc, #268]	; (800908c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d906      	bls.n	8008f92 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	4a40      	ldr	r2, [pc, #256]	; (8009088 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008f88:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8c:	0e5b      	lsrs	r3, r3, #25
 8008f8e:	61bb      	str	r3, [r7, #24]
 8008f90:	e03d      	b.n	800900e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	e039      	b.n	800900e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	69fa      	ldr	r2, [r7, #28]
 8008fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa6:	4a39      	ldr	r2, [pc, #228]	; (800908c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d906      	bls.n	8008fba <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	4a36      	ldr	r2, [pc, #216]	; (8009088 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb4:	0e5b      	lsrs	r3, r3, #25
 8008fb6:	61bb      	str	r3, [r7, #24]
 8008fb8:	e029      	b.n	800900e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	61bb      	str	r3, [r7, #24]
 8008fc0:	e025      	b.n	800900e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10e      	bne.n	8008fe8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	4a30      	ldr	r2, [pc, #192]	; (8009090 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d906      	bls.n	8008fe0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	4a2c      	ldr	r2, [pc, #176]	; (8009088 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fda:	0e1b      	lsrs	r3, r3, #24
 8008fdc:	61bb      	str	r3, [r7, #24]
 8008fde:	e016      	b.n	800900e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	61bb      	str	r3, [r7, #24]
 8008fe6:	e012      	b.n	800900e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff4:	4a26      	ldr	r2, [pc, #152]	; (8009090 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d906      	bls.n	8009008 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	4a22      	ldr	r2, [pc, #136]	; (8009088 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8009002:	0e1b      	lsrs	r3, r3, #24
 8009004:	61bb      	str	r3, [r7, #24]
 8009006:	e002      	b.n	800900e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681c      	ldr	r4, [r3, #0]
 8009012:	466a      	mov	r2, sp
 8009014:	f107 0314 	add.w	r3, r7, #20
 8009018:	e893 0003 	ldmia.w	r3, {r0, r1}
 800901c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009020:	f107 0308 	add.w	r3, r7, #8
 8009024:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009026:	4620      	mov	r0, r4
 8009028:	f001 fa32 	bl	800a490 <SDMMC_Init>
 800902c:	e008      	b.n	8009040 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009032:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009048:	4618      	mov	r0, r3
 800904a:	f001 faff 	bl	800a64c <SDMMC_CmdBlockLength>
 800904e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00c      	beq.n	8009070 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a0a      	ldr	r2, [pc, #40]	; (8009084 <HAL_SD_ConfigWideBusOperation+0x214>)
 800905c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	431a      	orrs	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800907c:	4618      	mov	r0, r3
 800907e:	372c      	adds	r7, #44	; 0x2c
 8009080:	46bd      	mov	sp, r7
 8009082:	bd90      	pop	{r4, r7, pc}
 8009084:	1fe00fff 	.word	0x1fe00fff
 8009088:	55e63b89 	.word	0x55e63b89
 800908c:	02faf080 	.word	0x02faf080
 8009090:	017d7840 	.word	0x017d7840

08009094 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80090a0:	f107 030c 	add.w	r3, r7, #12
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa40 	bl	800952c <SD_SendStatus>
 80090ac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	0a5b      	lsrs	r3, r3, #9
 80090c4:	f003 030f 	and.w	r3, r3, #15
 80090c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80090ca:	693b      	ldr	r3, [r7, #16]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b090      	sub	sp, #64	; 0x40
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80090e0:	f7f7 fdca 	bl	8000c78 <HAL_GetTick>
 80090e4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 fa29 	bl	800a542 <SDMMC_GetPowerState>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d102      	bne.n	80090fc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80090fa:	e0b5      	b.n	8009268 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009100:	2b03      	cmp	r3, #3
 8009102:	d02e      	beq.n	8009162 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f001 fc74 	bl	800a9f6 <SDMMC_CmdSendCID>
 800910e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <SD_InitCard+0x46>
    {
      return errorstate;
 8009116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009118:	e0a6      	b.n	8009268 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2100      	movs	r1, #0
 8009120:	4618      	mov	r0, r3
 8009122:	f001 fa54 	bl	800a5ce <SDMMC_GetResponse>
 8009126:	4602      	mov	r2, r0
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2104      	movs	r1, #4
 8009132:	4618      	mov	r0, r3
 8009134:	f001 fa4b 	bl	800a5ce <SDMMC_GetResponse>
 8009138:	4602      	mov	r2, r0
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2108      	movs	r1, #8
 8009144:	4618      	mov	r0, r3
 8009146:	f001 fa42 	bl	800a5ce <SDMMC_GetResponse>
 800914a:	4602      	mov	r2, r0
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	210c      	movs	r1, #12
 8009156:	4618      	mov	r0, r3
 8009158:	f001 fa39 	bl	800a5ce <SDMMC_GetResponse>
 800915c:	4602      	mov	r2, r0
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009166:	2b03      	cmp	r3, #3
 8009168:	d01d      	beq.n	80091a6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800916a:	e019      	b.n	80091a0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f107 020a 	add.w	r2, r7, #10
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f001 fc7c 	bl	800aa74 <SDMMC_CmdSetRelAdd>
 800917c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800917e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	e06f      	b.n	8009268 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009188:	f7f7 fd76 	bl	8000c78 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	f241 3287 	movw	r2, #4999	; 0x1387
 8009196:	4293      	cmp	r3, r2
 8009198:	d902      	bls.n	80091a0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800919a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800919e:	e063      	b.n	8009268 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80091a0:	897b      	ldrh	r3, [r7, #10]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0e2      	beq.n	800916c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d036      	beq.n	800921c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80091ae:	897b      	ldrh	r3, [r7, #10]
 80091b0:	461a      	mov	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091be:	041b      	lsls	r3, r3, #16
 80091c0:	4619      	mov	r1, r3
 80091c2:	4610      	mov	r0, r2
 80091c4:	f001 fc36 	bl	800aa34 <SDMMC_CmdSendCSD>
 80091c8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <SD_InitCard+0x100>
    {
      return errorstate;
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	e049      	b.n	8009268 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2100      	movs	r1, #0
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 f9f7 	bl	800a5ce <SDMMC_GetResponse>
 80091e0:	4602      	mov	r2, r0
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2104      	movs	r1, #4
 80091ec:	4618      	mov	r0, r3
 80091ee:	f001 f9ee 	bl	800a5ce <SDMMC_GetResponse>
 80091f2:	4602      	mov	r2, r0
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2108      	movs	r1, #8
 80091fe:	4618      	mov	r0, r3
 8009200:	f001 f9e5 	bl	800a5ce <SDMMC_GetResponse>
 8009204:	4602      	mov	r2, r0
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	210c      	movs	r1, #12
 8009210:	4618      	mov	r0, r3
 8009212:	f001 f9dc 	bl	800a5ce <SDMMC_GetResponse>
 8009216:	4602      	mov	r2, r0
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2104      	movs	r1, #4
 8009222:	4618      	mov	r0, r3
 8009224:	f001 f9d3 	bl	800a5ce <SDMMC_GetResponse>
 8009228:	4603      	mov	r3, r0
 800922a:	0d1a      	lsrs	r2, r3, #20
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009230:	f107 030c 	add.w	r3, r7, #12
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7ff fb8c 	bl	8008954 <HAL_SD_GetCardCSD>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009242:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009246:	e00f      	b.n	8009268 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009250:	041b      	lsls	r3, r3, #16
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f001 fae5 	bl	800a824 <SDMMC_CmdSelDesel>
 800925a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <SD_InitCard+0x192>
  {
    return errorstate;
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	e000      	b.n	8009268 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3740      	adds	r7, #64	; 0x40
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4618      	mov	r0, r3
 800928a:	f001 faee 	bl	800a86a <SDMMC_CmdGoIdleState>
 800928e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	e072      	b.n	8009380 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 fb01 	bl	800a8a6 <SDMMC_CmdOperCond>
 80092a4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ac:	d10d      	bne.n	80092ca <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 fad6 	bl	800a86a <SDMMC_CmdGoIdleState>
 80092be:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d004      	beq.n	80092d0 <SD_PowerON+0x60>
    {
      return errorstate;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	e05a      	b.n	8009380 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d137      	bne.n	8009348 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 fb01 	bl	800a8e6 <SDMMC_CmdAppCommand>
 80092e4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d02d      	beq.n	8009348 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80092f0:	e046      	b.n	8009380 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2100      	movs	r1, #0
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 faf4 	bl	800a8e6 <SDMMC_CmdAppCommand>
 80092fe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <SD_PowerON+0x9a>
    {
      return errorstate;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	e03a      	b.n	8009380 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	491e      	ldr	r1, [pc, #120]	; (8009388 <SD_PowerON+0x118>)
 8009310:	4618      	mov	r0, r3
 8009312:	f001 fb0b 	bl	800a92c <SDMMC_CmdAppOperCommand>
 8009316:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800931e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009322:	e02d      	b.n	8009380 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2100      	movs	r1, #0
 800932a:	4618      	mov	r0, r3
 800932c:	f001 f94f 	bl	800a5ce <SDMMC_GetResponse>
 8009330:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	0fdb      	lsrs	r3, r3, #31
 8009336:	2b01      	cmp	r3, #1
 8009338:	d101      	bne.n	800933e <SD_PowerON+0xce>
 800933a:	2301      	movs	r3, #1
 800933c:	e000      	b.n	8009340 <SD_PowerON+0xd0>
 800933e:	2300      	movs	r3, #0
 8009340:	613b      	str	r3, [r7, #16]

    count++;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	3301      	adds	r3, #1
 8009346:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800934e:	4293      	cmp	r3, r2
 8009350:	d802      	bhi.n	8009358 <SD_PowerON+0xe8>
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0cc      	beq.n	80092f2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800935e:	4293      	cmp	r3, r2
 8009360:	d902      	bls.n	8009368 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009362:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009366:	e00b      	b.n	8009380 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	c1100000 	.word	0xc1100000

0800938c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08c      	sub	sp, #48	; 0x30
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009396:	f7f7 fc6f 	bl	8000c78 <HAL_GetTick>
 800939a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2100      	movs	r1, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 f911 	bl	800a5ce <SDMMC_GetResponse>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093b6:	d102      	bne.n	80093be <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093bc:	e0b0      	b.n	8009520 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2140      	movs	r1, #64	; 0x40
 80093c4:	4618      	mov	r0, r3
 80093c6:	f001 f941 	bl	800a64c <SDMMC_CmdBlockLength>
 80093ca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	e0a0      	b.n	8009520 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e6:	041b      	lsls	r3, r3, #16
 80093e8:	4619      	mov	r1, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	f001 fa7b 	bl	800a8e6 <SDMMC_CmdAppCommand>
 80093f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d005      	beq.n	8009404 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	e08d      	b.n	8009520 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009404:	f04f 33ff 	mov.w	r3, #4294967295
 8009408:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800940a:	2340      	movs	r3, #64	; 0x40
 800940c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800940e:	2360      	movs	r3, #96	; 0x60
 8009410:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009412:	2302      	movs	r3, #2
 8009414:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009416:	2300      	movs	r3, #0
 8009418:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800941a:	2301      	movs	r3, #1
 800941c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f107 0208 	add.w	r2, r7, #8
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f001 f8e3 	bl	800a5f4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f001 fb63 	bl	800aafe <SDMMC_CmdStatusRegister>
 8009438:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d02b      	beq.n	8009498 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	e069      	b.n	8009520 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d013      	beq.n	8009482 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800945a:	2300      	movs	r3, #0
 800945c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800945e:	e00d      	b.n	800947c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4618      	mov	r0, r3
 8009466:	f001 f83d 	bl	800a4e4 <SDMMC_ReadFIFO>
 800946a:	4602      	mov	r2, r0
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	601a      	str	r2, [r3, #0]
        pData++;
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	3304      	adds	r3, #4
 8009474:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8009476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009478:	3301      	adds	r3, #1
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	2b07      	cmp	r3, #7
 8009480:	d9ee      	bls.n	8009460 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009482:	f7f7 fbf9 	bl	8000c78 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009490:	d102      	bne.n	8009498 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009492:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009496:	e043      	b.n	8009520 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0d2      	beq.n	800944c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094b4:	2308      	movs	r3, #8
 80094b6:	e033      	b.n	8009520 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094be:	f003 0302 	and.w	r3, r3, #2
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094c6:	2302      	movs	r3, #2
 80094c8:	e02a      	b.n	8009520 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d017      	beq.n	8009508 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80094d8:	2320      	movs	r3, #32
 80094da:	e021      	b.n	8009520 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 ffff 	bl	800a4e4 <SDMMC_ReadFIFO>
 80094e6:	4602      	mov	r2, r0
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	601a      	str	r2, [r3, #0]
    pData++;
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	3304      	adds	r3, #4
 80094f0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80094f2:	f7f7 fbc1 	bl	8000c78 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009500:	d102      	bne.n	8009508 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009506:	e00b      	b.n	8009520 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e2      	bne.n	80094dc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a03      	ldr	r2, [pc, #12]	; (8009528 <SD_SendSDStatus+0x19c>)
 800951c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3730      	adds	r7, #48	; 0x30
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	18000f3a 	.word	0x18000f3a

0800952c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800953c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009540:	e018      	b.n	8009574 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954a:	041b      	lsls	r3, r3, #16
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	f001 fab2 	bl	800aab8 <SDMMC_CmdSendStatus>
 8009554:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <SD_SendStatus+0x34>
  {
    return errorstate;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	e009      	b.n	8009574 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2100      	movs	r1, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f001 f831 	bl	800a5ce <SDMMC_GetResponse>
 800956c:	4602      	mov	r2, r0
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009584:	2300      	movs	r3, #0
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	2300      	movs	r3, #0
 800958a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2100      	movs	r1, #0
 8009592:	4618      	mov	r0, r3
 8009594:	f001 f81b 	bl	800a5ce <SDMMC_GetResponse>
 8009598:	4603      	mov	r3, r0
 800959a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800959e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095a2:	d102      	bne.n	80095aa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80095a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095a8:	e02f      	b.n	800960a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80095aa:	f107 030c 	add.w	r3, r7, #12
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f879 	bl	80096a8 <SD_FindSCR>
 80095b6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	e023      	b.n	800960a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01c      	beq.n	8009606 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d4:	041b      	lsls	r3, r3, #16
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f001 f984 	bl	800a8e6 <SDMMC_CmdAppCommand>
 80095de:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	e00f      	b.n	800960a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2102      	movs	r1, #2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f001 f9bb 	bl	800a96c <SDMMC_CmdBusWidth>
 80095f6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d001      	beq.n	8009602 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	e003      	b.n	800960a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009602:	2300      	movs	r3, #0
 8009604:	e001      	b.n	800960a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009606:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b086      	sub	sp, #24
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]
 800961e:	2300      	movs	r3, #0
 8009620:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2100      	movs	r1, #0
 8009628:	4618      	mov	r0, r3
 800962a:	f000 ffd0 	bl	800a5ce <SDMMC_GetResponse>
 800962e:	4603      	mov	r3, r0
 8009630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009638:	d102      	bne.n	8009640 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800963a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800963e:	e02f      	b.n	80096a0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009640:	f107 030c 	add.w	r3, r7, #12
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f82e 	bl	80096a8 <SD_FindSCR>
 800964c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	e023      	b.n	80096a0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d01c      	beq.n	800969c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966a:	041b      	lsls	r3, r3, #16
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f001 f939 	bl	800a8e6 <SDMMC_CmdAppCommand>
 8009674:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	e00f      	b.n	80096a0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2100      	movs	r1, #0
 8009686:	4618      	mov	r0, r3
 8009688:	f001 f970 	bl	800a96c <SDMMC_CmdBusWidth>
 800968c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	e003      	b.n	80096a0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009698:	2300      	movs	r3, #0
 800969a:	e001      	b.n	80096a0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800969c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08e      	sub	sp, #56	; 0x38
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80096b2:	f7f7 fae1 	bl	8000c78 <HAL_GetTick>
 80096b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80096bc:	2300      	movs	r3, #0
 80096be:	60bb      	str	r3, [r7, #8]
 80096c0:	2300      	movs	r3, #0
 80096c2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2108      	movs	r1, #8
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 ffbc 	bl	800a64c <SDMMC_CmdBlockLength>
 80096d4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	e0ad      	b.n	800983c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e8:	041b      	lsls	r3, r3, #16
 80096ea:	4619      	mov	r1, r3
 80096ec:	4610      	mov	r0, r2
 80096ee:	f001 f8fa 	bl	800a8e6 <SDMMC_CmdAppCommand>
 80096f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80096f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <SD_FindSCR+0x56>
  {
    return errorstate;
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	e09e      	b.n	800983c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009702:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009704:	2308      	movs	r3, #8
 8009706:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009708:	2330      	movs	r3, #48	; 0x30
 800970a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800970c:	2302      	movs	r3, #2
 800970e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009710:	2300      	movs	r3, #0
 8009712:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009714:	2301      	movs	r3, #1
 8009716:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f107 0210 	add.w	r2, r7, #16
 8009720:	4611      	mov	r1, r2
 8009722:	4618      	mov	r0, r3
 8009724:	f000 ff66 	bl	800a5f4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4618      	mov	r0, r3
 800972e:	f001 f940 	bl	800a9b2 <SDMMC_CmdSendSCR>
 8009732:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	2b00      	cmp	r3, #0
 8009738:	d027      	beq.n	800978a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	e07e      	b.n	800983c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d113      	bne.n	8009774 <SD_FindSCR+0xcc>
 800974c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974e:	2b00      	cmp	r3, #0
 8009750:	d110      	bne.n	8009774 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 fec4 	bl	800a4e4 <SDMMC_ReadFIFO>
 800975c:	4603      	mov	r3, r0
 800975e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4618      	mov	r0, r3
 8009766:	f000 febd 	bl	800a4e4 <SDMMC_ReadFIFO>
 800976a:	4603      	mov	r3, r0
 800976c:	60fb      	str	r3, [r7, #12]
      index++;
 800976e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009770:	3301      	adds	r3, #1
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009774:	f7f7 fa80 	bl	8000c78 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009782:	d102      	bne.n	800978a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009788:	e058      	b.n	800983c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009790:	f240 532a 	movw	r3, #1322	; 0x52a
 8009794:	4013      	ands	r3, r2
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0d1      	beq.n	800973e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a0:	f003 0308 	and.w	r3, r3, #8
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d005      	beq.n	80097b4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2208      	movs	r2, #8
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80097b0:	2308      	movs	r3, #8
 80097b2:	e043      	b.n	800983c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d005      	beq.n	80097ce <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2202      	movs	r2, #2
 80097c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80097ca:	2302      	movs	r3, #2
 80097cc:	e036      	b.n	800983c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d4:	f003 0320 	and.w	r3, r3, #32
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d005      	beq.n	80097e8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2220      	movs	r2, #32
 80097e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80097e4:	2320      	movs	r3, #32
 80097e6:	e029      	b.n	800983c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a15      	ldr	r2, [pc, #84]	; (8009844 <SD_FindSCR+0x19c>)
 80097ee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	061a      	lsls	r2, r3, #24
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	021b      	lsls	r3, r3, #8
 80097f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	0a1b      	lsrs	r3, r3, #8
 8009802:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009806:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	0e1b      	lsrs	r3, r3, #24
 800980c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	601a      	str	r2, [r3, #0]
    scr++;
 8009812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009814:	3304      	adds	r3, #4
 8009816:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	061a      	lsls	r2, r3, #24
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	021b      	lsls	r3, r3, #8
 8009820:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009824:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	0a1b      	lsrs	r3, r3, #8
 800982a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800982e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	0e1b      	lsrs	r3, r3, #24
 8009834:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009838:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3738      	adds	r7, #56	; 0x38
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	18000f3a 	.word	0x18000f3a

08009848 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e10f      	b.n	8009a7a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a87      	ldr	r2, [pc, #540]	; (8009a84 <HAL_SPI_Init+0x23c>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00f      	beq.n	800988a <HAL_SPI_Init+0x42>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a86      	ldr	r2, [pc, #536]	; (8009a88 <HAL_SPI_Init+0x240>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00a      	beq.n	800988a <HAL_SPI_Init+0x42>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a84      	ldr	r2, [pc, #528]	; (8009a8c <HAL_SPI_Init+0x244>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d005      	beq.n	800988a <HAL_SPI_Init+0x42>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	2b0f      	cmp	r3, #15
 8009884:	d901      	bls.n	800988a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e0f7      	b.n	8009a7a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fde4 	bl	800a458 <SPI_GetPacketSize>
 8009890:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a7b      	ldr	r2, [pc, #492]	; (8009a84 <HAL_SPI_Init+0x23c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d00c      	beq.n	80098b6 <HAL_SPI_Init+0x6e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a79      	ldr	r2, [pc, #484]	; (8009a88 <HAL_SPI_Init+0x240>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d007      	beq.n	80098b6 <HAL_SPI_Init+0x6e>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a78      	ldr	r2, [pc, #480]	; (8009a8c <HAL_SPI_Init+0x244>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d002      	beq.n	80098b6 <HAL_SPI_Init+0x6e>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b08      	cmp	r3, #8
 80098b4:	d811      	bhi.n	80098da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098ba:	4a72      	ldr	r2, [pc, #456]	; (8009a84 <HAL_SPI_Init+0x23c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d009      	beq.n	80098d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a70      	ldr	r2, [pc, #448]	; (8009a88 <HAL_SPI_Init+0x240>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d004      	beq.n	80098d4 <HAL_SPI_Init+0x8c>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a6f      	ldr	r2, [pc, #444]	; (8009a8c <HAL_SPI_Init+0x244>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d104      	bne.n	80098de <HAL_SPI_Init+0x96>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b10      	cmp	r3, #16
 80098d8:	d901      	bls.n	80098de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e0cd      	b.n	8009a7a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7f6 ff84 	bl	8000800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 0201 	bic.w	r2, r2, #1
 800990e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800991a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009924:	d119      	bne.n	800995a <HAL_SPI_Init+0x112>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800992e:	d103      	bne.n	8009938 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009934:	2b00      	cmp	r3, #0
 8009936:	d008      	beq.n	800994a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10c      	bne.n	800995a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009948:	d107      	bne.n	800995a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009958:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00f      	beq.n	8009986 <HAL_SPI_Init+0x13e>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	2b06      	cmp	r3, #6
 800996c:	d90b      	bls.n	8009986 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	430a      	orrs	r2, r1
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	e007      	b.n	8009996 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009994:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	69da      	ldr	r2, [r3, #28]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999e:	431a      	orrs	r2, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a8:	ea42 0103 	orr.w	r1, r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68da      	ldr	r2, [r3, #12]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	431a      	orrs	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	431a      	orrs	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	431a      	orrs	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	431a      	orrs	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	431a      	orrs	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	431a      	orrs	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	431a      	orrs	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ea:	431a      	orrs	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	431a      	orrs	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099f6:	ea42 0103 	orr.w	r1, r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d113      	bne.n	8009a36 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a20:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a34:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0201 	bic.w	r2, r2, #1
 8009a44:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00a      	beq.n	8009a68 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	430a      	orrs	r2, r1
 8009a66:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	40013000 	.word	0x40013000
 8009a88:	40003800 	.word	0x40003800
 8009a8c:	40003c00 	.word	0x40003c00

08009a90 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	; 0x28
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3320      	adds	r3, #32
 8009aa6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d101      	bne.n	8009aba <HAL_SPI_Transmit+0x2a>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e1e1      	b.n	8009e7e <HAL_SPI_Transmit+0x3ee>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ac2:	f7f7 f8d9 	bl	8000c78 <HAL_GetTick>
 8009ac6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d007      	beq.n	8009ae4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009ae0:	7efb      	ldrb	r3, [r7, #27]
 8009ae2:	e1cc      	b.n	8009e7e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d002      	beq.n	8009af0 <HAL_SPI_Transmit+0x60>
 8009aea:	88fb      	ldrh	r3, [r7, #6]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d107      	bne.n	8009b00 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009afc:	7efb      	ldrb	r3, [r7, #27]
 8009afe:	e1be      	b.n	8009e7e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2203      	movs	r2, #3
 8009b04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	88fa      	ldrh	r2, [r7, #6]
 8009b1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	88fa      	ldrh	r2, [r7, #6]
 8009b22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009b50:	d108      	bne.n	8009b64 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	e009      	b.n	8009b78 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009b76:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	4b96      	ldr	r3, [pc, #600]	; (8009dd8 <HAL_SPI_Transmit+0x348>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	88f9      	ldrh	r1, [r7, #6]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	6812      	ldr	r2, [r2, #0]
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0201 	orr.w	r2, r2, #1
 8009b9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ba4:	d107      	bne.n	8009bb6 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	2b0f      	cmp	r3, #15
 8009bbc:	d947      	bls.n	8009c4e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009bbe:	e03f      	b.n	8009c40 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d114      	bne.n	8009bf8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6812      	ldr	r2, [r2, #0]
 8009bd8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bde:	1d1a      	adds	r2, r3, #4
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	3b01      	subs	r3, #1
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009bf6:	e023      	b.n	8009c40 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bf8:	f7f7 f83e 	bl	8000c78 <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d803      	bhi.n	8009c10 <HAL_SPI_Transmit+0x180>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0e:	d102      	bne.n	8009c16 <HAL_SPI_Transmit+0x186>
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d114      	bne.n	8009c40 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 fb50 	bl	800a2bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e11e      	b.n	8009e7e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1b9      	bne.n	8009bc0 <HAL_SPI_Transmit+0x130>
 8009c4c:	e0f1      	b.n	8009e32 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	2b07      	cmp	r3, #7
 8009c54:	f240 80e6 	bls.w	8009e24 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009c58:	e05d      	b.n	8009d16 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	f003 0302 	and.w	r3, r3, #2
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d132      	bne.n	8009cce <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d918      	bls.n	8009ca6 <HAL_SPI_Transmit+0x216>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d014      	beq.n	8009ca6 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6812      	ldr	r2, [r2, #0]
 8009c86:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c8c:	1d1a      	adds	r2, r3, #4
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	3b02      	subs	r3, #2
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009ca4:	e037      	b.n	8009d16 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009caa:	881a      	ldrh	r2, [r3, #0]
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb4:	1c9a      	adds	r2, r3, #2
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009ccc:	e023      	b.n	8009d16 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cce:	f7f6 ffd3 	bl	8000c78 <HAL_GetTick>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d803      	bhi.n	8009ce6 <HAL_SPI_Transmit+0x256>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce4:	d102      	bne.n	8009cec <HAL_SPI_Transmit+0x25c>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d114      	bne.n	8009d16 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 fae5 	bl	800a2bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e0b3      	b.n	8009e7e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d19b      	bne.n	8009c5a <HAL_SPI_Transmit+0x1ca>
 8009d22:	e086      	b.n	8009e32 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d154      	bne.n	8009ddc <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d918      	bls.n	8009d70 <HAL_SPI_Transmit+0x2e0>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d42:	2b40      	cmp	r3, #64	; 0x40
 8009d44:	d914      	bls.n	8009d70 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6812      	ldr	r2, [r2, #0]
 8009d50:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d56:	1d1a      	adds	r2, r3, #4
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	3b04      	subs	r3, #4
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009d6e:	e059      	b.n	8009e24 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d917      	bls.n	8009dac <HAL_SPI_Transmit+0x31c>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d013      	beq.n	8009dac <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d88:	881a      	ldrh	r2, [r3, #0]
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d92:	1c9a      	adds	r2, r3, #2
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	3b02      	subs	r3, #2
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009daa:	e03b      	b.n	8009e24 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3320      	adds	r3, #32
 8009db6:	7812      	ldrb	r2, [r2, #0]
 8009db8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009dd6:	e025      	b.n	8009e24 <HAL_SPI_Transmit+0x394>
 8009dd8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ddc:	f7f6 ff4c 	bl	8000c78 <HAL_GetTick>
 8009de0:	4602      	mov	r2, r0
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d803      	bhi.n	8009df4 <HAL_SPI_Transmit+0x364>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df2:	d102      	bne.n	8009dfa <HAL_SPI_Transmit+0x36a>
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d114      	bne.n	8009e24 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 fa5e 	bl	800a2bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e02c      	b.n	8009e7e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f47f af79 	bne.w	8009d24 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2108      	movs	r1, #8
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 fadd 	bl	800a3fc <SPI_WaitOnFlagUntilTimeout>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d007      	beq.n	8009e58 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e4e:	f043 0220 	orr.w	r2, r3, #32
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 fa2f 	bl	800a2bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e000      	b.n	8009e7e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8009e7c:	7efb      	ldrb	r3, [r7, #27]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3720      	adds	r7, #32
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop

08009e88 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b08a      	sub	sp, #40	; 0x28
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009ea0:	6a3a      	ldr	r2, [r7, #32]
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009eba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3330      	adds	r3, #48	; 0x30
 8009ec2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d010      	beq.n	8009ef0 <HAL_SPI_IRQHandler+0x68>
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	f003 0308 	and.w	r3, r3, #8
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	699a      	ldr	r2, [r3, #24]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ee6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f9c3 	bl	800a274 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009eee:	e192      	b.n	800a216 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d113      	bne.n	8009f22 <HAL_SPI_IRQHandler+0x9a>
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	f003 0320 	and.w	r3, r3, #32
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10e      	bne.n	8009f22 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d009      	beq.n	8009f22 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	4798      	blx	r3
    handled = 1UL;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10f      	bne.n	8009f4c <HAL_SPI_IRQHandler+0xc4>
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00a      	beq.n	8009f4c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d105      	bne.n	8009f4c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	4798      	blx	r3
    handled = 1UL;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	f003 0320 	and.w	r3, r3, #32
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10f      	bne.n	8009f76 <HAL_SPI_IRQHandler+0xee>
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	f003 0302 	and.w	r3, r3, #2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00a      	beq.n	8009f76 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d105      	bne.n	8009f76 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
    handled = 1UL;
 8009f72:	2301      	movs	r3, #1
 8009f74:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f040 8147 	bne.w	800a20c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	f003 0308 	and.w	r3, r3, #8
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 808b 	beq.w	800a0a0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	699a      	ldr	r2, [r3, #24]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f042 0208 	orr.w	r2, r2, #8
 8009f98:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	699a      	ldr	r2, [r3, #24]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f042 0210 	orr.w	r2, r2, #16
 8009fa8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	699a      	ldr	r2, [r3, #24]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fb8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	691a      	ldr	r2, [r3, #16]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0208 	bic.w	r2, r2, #8
 8009fc8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d13d      	bne.n	800a054 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009fd8:	e036      	b.n	800a048 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	2b0f      	cmp	r3, #15
 8009fe0:	d90b      	bls.n	8009ffa <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009fec:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ff2:	1d1a      	adds	r2, r3, #4
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	665a      	str	r2, [r3, #100]	; 0x64
 8009ff8:	e01d      	b.n	800a036 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	2b07      	cmp	r3, #7
 800a000:	d90b      	bls.n	800a01a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	8812      	ldrh	r2, [r2, #0]
 800a00a:	b292      	uxth	r2, r2
 800a00c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a012:	1c9a      	adds	r2, r3, #2
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	665a      	str	r2, [r3, #100]	; 0x64
 800a018:	e00d      	b.n	800a036 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a026:	7812      	ldrb	r2, [r2, #0]
 800a028:	b2d2      	uxtb	r2, r2
 800a02a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	3b01      	subs	r3, #1
 800a040:	b29a      	uxth	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a04e:	b29b      	uxth	r3, r3
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1c2      	bne.n	8009fda <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f931 	bl	800a2bc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f8f7 	bl	800a260 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a072:	e0d0      	b.n	800a216 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a074:	7cfb      	ldrb	r3, [r7, #19]
 800a076:	2b05      	cmp	r3, #5
 800a078:	d103      	bne.n	800a082 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f8e6 	bl	800a24c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a080:	e0c6      	b.n	800a210 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a082:	7cfb      	ldrb	r3, [r7, #19]
 800a084:	2b04      	cmp	r3, #4
 800a086:	d103      	bne.n	800a090 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f8d5 	bl	800a238 <HAL_SPI_RxCpltCallback>
    return;
 800a08e:	e0bf      	b.n	800a210 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a090:	7cfb      	ldrb	r3, [r7, #19]
 800a092:	2b03      	cmp	r3, #3
 800a094:	f040 80bc 	bne.w	800a210 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f8c3 	bl	800a224 <HAL_SPI_TxCpltCallback>
    return;
 800a09e:	e0b7      	b.n	800a210 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 80b5 	beq.w	800a216 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00f      	beq.n	800a0d6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0bc:	f043 0204 	orr.w	r2, r3, #4
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	699a      	ldr	r2, [r3, #24]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00f      	beq.n	800a100 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0e6:	f043 0201 	orr.w	r2, r3, #1
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	699a      	ldr	r2, [r3, #24]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0fe:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00f      	beq.n	800a12a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a110:	f043 0208 	orr.w	r2, r3, #8
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a128:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	f003 0320 	and.w	r3, r3, #32
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00f      	beq.n	800a154 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a13a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699a      	ldr	r2, [r3, #24]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f042 0220 	orr.w	r2, r2, #32
 800a152:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d05a      	beq.n	800a214 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 0201 	bic.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6919      	ldr	r1, [r3, #16]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	4b28      	ldr	r3, [pc, #160]	; (800a21c <HAL_SPI_IRQHandler+0x394>)
 800a17a:	400b      	ands	r3, r1
 800a17c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a184:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a188:	d138      	bne.n	800a1fc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a198:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d013      	beq.n	800a1ca <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1a6:	4a1e      	ldr	r2, [pc, #120]	; (800a220 <HAL_SPI_IRQHandler+0x398>)
 800a1a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f7 fa0a 	bl	80015c8 <HAL_DMA_Abort_IT>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d007      	beq.n	800a1ca <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d020      	beq.n	800a214 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1d6:	4a12      	ldr	r2, [pc, #72]	; (800a220 <HAL_SPI_IRQHandler+0x398>)
 800a1d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7f7 f9f2 	bl	80015c8 <HAL_DMA_Abort_IT>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d014      	beq.n	800a214 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a1fa:	e00b      	b.n	800a214 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f82b 	bl	800a260 <HAL_SPI_ErrorCallback>
    return;
 800a20a:	e003      	b.n	800a214 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a20c:	bf00      	nop
 800a20e:	e002      	b.n	800a216 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a210:	bf00      	nop
 800a212:	e000      	b.n	800a216 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a214:	bf00      	nop
  }
}
 800a216:	3728      	adds	r7, #40	; 0x28
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	fffffc94 	.word	0xfffffc94
 800a220:	0800a289 	.word	0x0800a289

0800a224 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a294:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f7ff ffd6 	bl	800a260 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a2b4:	bf00      	nop
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	699a      	ldr	r2, [r3, #24]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f042 0208 	orr.w	r2, r2, #8
 800a2da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	699a      	ldr	r2, [r3, #24]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0210 	orr.w	r2, r2, #16
 800a2ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f022 0201 	bic.w	r2, r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6919      	ldr	r1, [r3, #16]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	4b3c      	ldr	r3, [pc, #240]	; (800a3f8 <SPI_CloseTransfer+0x13c>)
 800a308:	400b      	ands	r3, r1
 800a30a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689a      	ldr	r2, [r3, #8]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a31a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b04      	cmp	r3, #4
 800a326:	d014      	beq.n	800a352 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f003 0320 	and.w	r3, r3, #32
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00f      	beq.n	800a352 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a338:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	699a      	ldr	r2, [r3, #24]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f042 0220 	orr.w	r2, r2, #32
 800a350:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d014      	beq.n	800a388 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00f      	beq.n	800a388 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a36e:	f043 0204 	orr.w	r2, r3, #4
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	699a      	ldr	r2, [r3, #24]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a386:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00f      	beq.n	800a3b2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a398:	f043 0201 	orr.w	r2, r3, #1
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	699a      	ldr	r2, [r3, #24]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00f      	beq.n	800a3dc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3c2:	f043 0208 	orr.w	r2, r3, #8
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	699a      	ldr	r2, [r3, #24]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a3ec:	bf00      	nop
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr
 800a3f8:	fffffc90 	.word	0xfffffc90

0800a3fc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	603b      	str	r3, [r7, #0]
 800a408:	4613      	mov	r3, r2
 800a40a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a40c:	e010      	b.n	800a430 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a40e:	f7f6 fc33 	bl	8000c78 <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d803      	bhi.n	800a426 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a424:	d102      	bne.n	800a42c <SPI_WaitOnFlagUntilTimeout+0x30>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e00f      	b.n	800a450 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	695a      	ldr	r2, [r3, #20]
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	4013      	ands	r3, r2
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	bf0c      	ite	eq
 800a440:	2301      	moveq	r3, #1
 800a442:	2300      	movne	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	461a      	mov	r2, r3
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d0df      	beq.n	800a40e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a464:	095b      	lsrs	r3, r3, #5
 800a466:	3301      	adds	r3, #1
 800a468:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	3301      	adds	r3, #1
 800a470:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	3307      	adds	r3, #7
 800a476:	08db      	lsrs	r3, r3, #3
 800a478:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
	...

0800a490 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a490:	b084      	sub	sp, #16
 800a492:	b480      	push	{r7}
 800a494:	b085      	sub	sp, #20
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	f107 001c 	add.w	r0, r7, #28
 800a49e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a4a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a4aa:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800a4ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800a4b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800a4b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <SDMMC_Init+0x50>)
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	b004      	add	sp, #16
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	ffc02c00 	.word	0xffc02c00

0800a4e4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f043 0203 	orr.w	r2, r3, #3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a542:	b480      	push	{r7}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 0303 	and.w	r3, r3, #3
}
 800a552:	4618      	mov	r0, r3
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
	...

0800a560 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a57e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a584:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a58a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	4313      	orrs	r3, r2
 800a590:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68da      	ldr	r2, [r3, #12]
 800a596:	4b06      	ldr	r3, [pc, #24]	; (800a5b0 <SDMMC_SendCommand+0x50>)
 800a598:	4013      	ands	r3, r2
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	431a      	orrs	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	fffee0c0 	.word	0xfffee0c0

0800a5b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	b2db      	uxtb	r3, r3
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3314      	adds	r3, #20
 800a5dc:	461a      	mov	r2, r3
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	685a      	ldr	r2, [r3, #4]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a61a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a620:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a626:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a632:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	431a      	orrs	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a63e:	2300      	movs	r3, #0

}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a65a:	2310      	movs	r3, #16
 800a65c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a65e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a664:	2300      	movs	r3, #0
 800a666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a66c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a66e:	f107 0308 	add.w	r3, r7, #8
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff ff73 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67e:	2110      	movs	r1, #16
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fa5f 	bl	800ab44 <SDMMC_GetCmdResp1>
 800a686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a688:	69fb      	ldr	r3, [r7, #28]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b088      	sub	sp, #32
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a6a0:	2311      	movs	r3, #17
 800a6a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6b4:	f107 0308 	add.w	r3, r7, #8
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7ff ff50 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a6c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6c4:	2111      	movs	r1, #17
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fa3c 	bl	800ab44 <SDMMC_GetCmdResp1>
 800a6cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ce:	69fb      	ldr	r3, [r7, #28]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3720      	adds	r7, #32
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a6e6:	2312      	movs	r3, #18
 800a6e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6fa:	f107 0308 	add.w	r3, r7, #8
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff ff2d 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a706:	f241 3288 	movw	r2, #5000	; 0x1388
 800a70a:	2112      	movs	r1, #18
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fa19 	bl	800ab44 <SDMMC_GetCmdResp1>
 800a712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a714:	69fb      	ldr	r3, [r7, #28]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b088      	sub	sp, #32
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a72c:	2318      	movs	r3, #24
 800a72e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a730:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a736:	2300      	movs	r3, #0
 800a738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a73a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a73e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a740:	f107 0308 	add.w	r3, r7, #8
 800a744:	4619      	mov	r1, r3
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7ff ff0a 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a750:	2118      	movs	r1, #24
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f9f6 	bl	800ab44 <SDMMC_GetCmdResp1>
 800a758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a75a:	69fb      	ldr	r3, [r7, #28]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3720      	adds	r7, #32
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b088      	sub	sp, #32
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a772:	2319      	movs	r3, #25
 800a774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a77a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a77c:	2300      	movs	r3, #0
 800a77e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a786:	f107 0308 	add.w	r3, r7, #8
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff fee7 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a792:	f241 3288 	movw	r2, #5000	; 0x1388
 800a796:	2119      	movs	r1, #25
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f9d3 	bl	800ab44 <SDMMC_GetCmdResp1>
 800a79e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7a0:	69fb      	ldr	r3, [r7, #28]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3720      	adds	r7, #32
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
	...

0800a7ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a7b8:	230c      	movs	r3, #12
 800a7ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7ca:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7e4:	f107 0308 	add.w	r3, r7, #8
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff feb8 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a7f0:	4a0b      	ldr	r2, [pc, #44]	; (800a820 <SDMMC_CmdStopTransfer+0x74>)
 800a7f2:	210c      	movs	r1, #12
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f9a5 	bl	800ab44 <SDMMC_GetCmdResp1>
 800a7fa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a80e:	d101      	bne.n	800a814 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a810:	2300      	movs	r3, #0
 800a812:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a814:	69fb      	ldr	r3, [r7, #28]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3720      	adds	r7, #32
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	05f5e100 	.word	0x05f5e100

0800a824 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a832:	2307      	movs	r3, #7
 800a834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a83a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a83c:	2300      	movs	r3, #0
 800a83e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a844:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff fe87 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a852:	f241 3288 	movw	r2, #5000	; 0x1388
 800a856:	2107      	movs	r1, #7
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f973 	bl	800ab44 <SDMMC_GetCmdResp1>
 800a85e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a860:	69fb      	ldr	r3, [r7, #28]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3720      	adds	r7, #32
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b088      	sub	sp, #32
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a876:	2300      	movs	r3, #0
 800a878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a87a:	2300      	movs	r3, #0
 800a87c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a87e:	2300      	movs	r3, #0
 800a880:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a886:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a888:	f107 0308 	add.w	r3, r7, #8
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7ff fe66 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fb97 	bl	800afc8 <SDMMC_GetCmdError>
 800a89a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a89c:	69fb      	ldr	r3, [r7, #28]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b088      	sub	sp, #32
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a8ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a8b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a8b4:	2308      	movs	r3, #8
 800a8b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c8:	f107 0308 	add.w	r3, r7, #8
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7ff fe46 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fb29 	bl	800af2c <SDMMC_GetCmdResp7>
 800a8da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3720      	adds	r7, #32
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b088      	sub	sp, #32
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a8f4:	2337      	movs	r3, #55	; 0x37
 800a8f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8fe:	2300      	movs	r3, #0
 800a900:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a906:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a908:	f107 0308 	add.w	r3, r7, #8
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7ff fe26 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a914:	f241 3288 	movw	r2, #5000	; 0x1388
 800a918:	2137      	movs	r1, #55	; 0x37
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f912 	bl	800ab44 <SDMMC_GetCmdResp1>
 800a920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a922:	69fb      	ldr	r3, [r7, #28]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3720      	adds	r7, #32
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b088      	sub	sp, #32
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a93a:	2329      	movs	r3, #41	; 0x29
 800a93c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a93e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a944:	2300      	movs	r3, #0
 800a946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a94c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a94e:	f107 0308 	add.w	r3, r7, #8
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7ff fe03 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fa2e 	bl	800adbc <SDMMC_GetCmdResp3>
 800a960:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a962:	69fb      	ldr	r3, [r7, #28]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3720      	adds	r7, #32
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a97a:	2306      	movs	r3, #6
 800a97c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a97e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a984:	2300      	movs	r3, #0
 800a986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a98c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a98e:	f107 0308 	add.w	r3, r7, #8
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7ff fde3 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a99a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99e:	2106      	movs	r1, #6
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f8cf 	bl	800ab44 <SDMMC_GetCmdResp1>
 800a9a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9a8:	69fb      	ldr	r3, [r7, #28]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3720      	adds	r7, #32
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b088      	sub	sp, #32
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a9be:	2333      	movs	r3, #51	; 0x33
 800a9c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9d2:	f107 0308 	add.w	r3, r7, #8
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7ff fdc1 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a9de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e2:	2133      	movs	r1, #51	; 0x33
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f8ad 	bl	800ab44 <SDMMC_GetCmdResp1>
 800a9ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9ec:	69fb      	ldr	r3, [r7, #28]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3720      	adds	r7, #32
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b088      	sub	sp, #32
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aa02:	2302      	movs	r3, #2
 800aa04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aa06:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa16:	f107 0308 	add.w	r3, r7, #8
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7ff fd9f 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f980 	bl	800ad28 <SDMMC_GetCmdResp2>
 800aa28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa2a:	69fb      	ldr	r3, [r7, #28]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3720      	adds	r7, #32
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b088      	sub	sp, #32
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aa42:	2309      	movs	r3, #9
 800aa44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aa46:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa56:	f107 0308 	add.w	r3, r7, #8
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7ff fd7f 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f960 	bl	800ad28 <SDMMC_GetCmdResp2>
 800aa68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa6a:	69fb      	ldr	r3, [r7, #28]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3720      	adds	r7, #32
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b088      	sub	sp, #32
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aa82:	2303      	movs	r3, #3
 800aa84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa96:	f107 0308 	add.w	r3, r7, #8
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff fd5f 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	2103      	movs	r1, #3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f9c8 	bl	800ae3c <SDMMC_GetCmdResp6>
 800aaac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaae:	69fb      	ldr	r3, [r7, #28]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3720      	adds	r7, #32
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aac6:	230d      	movs	r3, #13
 800aac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aaca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aad0:	2300      	movs	r3, #0
 800aad2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aad8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aada:	f107 0308 	add.w	r3, r7, #8
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff fd3d 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aae6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaea:	210d      	movs	r1, #13
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f829 	bl	800ab44 <SDMMC_GetCmdResp1>
 800aaf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaf4:	69fb      	ldr	r3, [r7, #28]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3720      	adds	r7, #32
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b088      	sub	sp, #32
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ab0a:	230d      	movs	r3, #13
 800ab0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab14:	2300      	movs	r3, #0
 800ab16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab1e:	f107 0308 	add.w	r3, r7, #8
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff fd1b 	bl	800a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ab2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab2e:	210d      	movs	r1, #13
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f807 	bl	800ab44 <SDMMC_GetCmdResp1>
 800ab36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab38:	69fb      	ldr	r3, [r7, #28]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3720      	adds	r7, #32
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ab52:	4b70      	ldr	r3, [pc, #448]	; (800ad14 <SDMMC_GetCmdResp1+0x1d0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a70      	ldr	r2, [pc, #448]	; (800ad18 <SDMMC_GetCmdResp1+0x1d4>)
 800ab58:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5c:	0a5a      	lsrs	r2, r3, #9
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	fb02 f303 	mul.w	r3, r2, r3
 800ab64:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	1e5a      	subs	r2, r3, #1
 800ab6a:	61fa      	str	r2, [r7, #28]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d102      	bne.n	800ab76 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab74:	e0c9      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	4b67      	ldr	r3, [pc, #412]	; (800ad1c <SDMMC_GetCmdResp1+0x1d8>)
 800ab80:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0ef      	beq.n	800ab66 <SDMMC_GetCmdResp1+0x22>
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1ea      	bne.n	800ab66 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab94:	f003 0304 	and.w	r3, r3, #4
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d004      	beq.n	800aba6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2204      	movs	r2, #4
 800aba0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aba2:	2304      	movs	r3, #4
 800aba4:	e0b1      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2201      	movs	r2, #1
 800abb6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abb8:	2301      	movs	r3, #1
 800abba:	e0a6      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4a58      	ldr	r2, [pc, #352]	; (800ad20 <SDMMC_GetCmdResp1+0x1dc>)
 800abc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7ff fcf6 	bl	800a5b4 <SDMMC_GetCommandResponse>
 800abc8:	4603      	mov	r3, r0
 800abca:	461a      	mov	r2, r3
 800abcc:	7afb      	ldrb	r3, [r7, #11]
 800abce:	4293      	cmp	r3, r2
 800abd0:	d001      	beq.n	800abd6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e099      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800abd6:	2100      	movs	r1, #0
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f7ff fcf8 	bl	800a5ce <SDMMC_GetResponse>
 800abde:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	4b50      	ldr	r3, [pc, #320]	; (800ad24 <SDMMC_GetCmdResp1+0x1e0>)
 800abe4:	4013      	ands	r3, r2
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800abea:	2300      	movs	r3, #0
 800abec:	e08d      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	da02      	bge.n	800abfa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800abf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abf8:	e087      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ac04:	2340      	movs	r3, #64	; 0x40
 800ac06:	e080      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ac12:	2380      	movs	r3, #128	; 0x80
 800ac14:	e079      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ac20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac24:	e071      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ac30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac34:	e069      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ac40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac44:	e061      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ac50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac54:	e059      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac64:	e051      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac74:	e049      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ac80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac84:	e041      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ac90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac94:	e039      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aca4:	e031      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800acb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800acb4:	e029      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800acc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800acc4:	e021      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800acd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800acd4:	e019      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ace0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ace4:	e011      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800acf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800acf4:	e009      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f003 0308 	and.w	r3, r3, #8
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ad00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad04:	e001      	b.n	800ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3720      	adds	r7, #32
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	24000000 	.word	0x24000000
 800ad18:	10624dd3 	.word	0x10624dd3
 800ad1c:	00200045 	.word	0x00200045
 800ad20:	002000c5 	.word	0x002000c5
 800ad24:	fdffe008 	.word	0xfdffe008

0800ad28 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ad30:	4b1f      	ldr	r3, [pc, #124]	; (800adb0 <SDMMC_GetCmdResp2+0x88>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a1f      	ldr	r2, [pc, #124]	; (800adb4 <SDMMC_GetCmdResp2+0x8c>)
 800ad36:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3a:	0a5b      	lsrs	r3, r3, #9
 800ad3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad40:	fb02 f303 	mul.w	r3, r2, r3
 800ad44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	1e5a      	subs	r2, r3, #1
 800ad4a:	60fa      	str	r2, [r7, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d102      	bne.n	800ad56 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad54:	e026      	b.n	800ada4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0ef      	beq.n	800ad46 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1ea      	bne.n	800ad46 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad74:	f003 0304 	and.w	r3, r3, #4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d004      	beq.n	800ad86 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2204      	movs	r2, #4
 800ad80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad82:	2304      	movs	r3, #4
 800ad84:	e00e      	b.n	800ada4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d004      	beq.n	800ad9c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e003      	b.n	800ada4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a06      	ldr	r2, [pc, #24]	; (800adb8 <SDMMC_GetCmdResp2+0x90>)
 800ada0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	24000000 	.word	0x24000000
 800adb4:	10624dd3 	.word	0x10624dd3
 800adb8:	002000c5 	.word	0x002000c5

0800adbc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800adc4:	4b1a      	ldr	r3, [pc, #104]	; (800ae30 <SDMMC_GetCmdResp3+0x74>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a1a      	ldr	r2, [pc, #104]	; (800ae34 <SDMMC_GetCmdResp3+0x78>)
 800adca:	fba2 2303 	umull	r2, r3, r2, r3
 800adce:	0a5b      	lsrs	r3, r3, #9
 800add0:	f241 3288 	movw	r2, #5000	; 0x1388
 800add4:	fb02 f303 	mul.w	r3, r2, r3
 800add8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	1e5a      	subs	r2, r3, #1
 800adde:	60fa      	str	r2, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d102      	bne.n	800adea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ade4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ade8:	e01b      	b.n	800ae22 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0ef      	beq.n	800adda <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1ea      	bne.n	800adda <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d004      	beq.n	800ae1a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2204      	movs	r2, #4
 800ae14:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae16:	2304      	movs	r3, #4
 800ae18:	e003      	b.n	800ae22 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a06      	ldr	r2, [pc, #24]	; (800ae38 <SDMMC_GetCmdResp3+0x7c>)
 800ae1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	24000000 	.word	0x24000000
 800ae34:	10624dd3 	.word	0x10624dd3
 800ae38:	002000c5 	.word	0x002000c5

0800ae3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	460b      	mov	r3, r1
 800ae46:	607a      	str	r2, [r7, #4]
 800ae48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae4a:	4b35      	ldr	r3, [pc, #212]	; (800af20 <SDMMC_GetCmdResp6+0xe4>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a35      	ldr	r2, [pc, #212]	; (800af24 <SDMMC_GetCmdResp6+0xe8>)
 800ae50:	fba2 2303 	umull	r2, r3, r2, r3
 800ae54:	0a5b      	lsrs	r3, r3, #9
 800ae56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae5a:	fb02 f303 	mul.w	r3, r2, r3
 800ae5e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	1e5a      	subs	r2, r3, #1
 800ae64:	61fa      	str	r2, [r7, #28]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d102      	bne.n	800ae70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae6e:	e052      	b.n	800af16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae74:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d0ef      	beq.n	800ae60 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1ea      	bne.n	800ae60 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae8e:	f003 0304 	and.w	r3, r3, #4
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d004      	beq.n	800aea0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2204      	movs	r2, #4
 800ae9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae9c:	2304      	movs	r3, #4
 800ae9e:	e03a      	b.n	800af16 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d004      	beq.n	800aeb6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e02f      	b.n	800af16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f7ff fb7c 	bl	800a5b4 <SDMMC_GetCommandResponse>
 800aebc:	4603      	mov	r3, r0
 800aebe:	461a      	mov	r2, r3
 800aec0:	7afb      	ldrb	r3, [r7, #11]
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d001      	beq.n	800aeca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e025      	b.n	800af16 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	4a16      	ldr	r2, [pc, #88]	; (800af28 <SDMMC_GetCmdResp6+0xec>)
 800aece:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aed0:	2100      	movs	r1, #0
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f7ff fb7b 	bl	800a5ce <SDMMC_GetResponse>
 800aed8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d106      	bne.n	800aef2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	0c1b      	lsrs	r3, r3, #16
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	e011      	b.n	800af16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aefc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af00:	e009      	b.n	800af16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af10:	e001      	b.n	800af16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af16:	4618      	mov	r0, r3
 800af18:	3720      	adds	r7, #32
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	24000000 	.word	0x24000000
 800af24:	10624dd3 	.word	0x10624dd3
 800af28:	002000c5 	.word	0x002000c5

0800af2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800af34:	4b22      	ldr	r3, [pc, #136]	; (800afc0 <SDMMC_GetCmdResp7+0x94>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a22      	ldr	r2, [pc, #136]	; (800afc4 <SDMMC_GetCmdResp7+0x98>)
 800af3a:	fba2 2303 	umull	r2, r3, r2, r3
 800af3e:	0a5b      	lsrs	r3, r3, #9
 800af40:	f241 3288 	movw	r2, #5000	; 0x1388
 800af44:	fb02 f303 	mul.w	r3, r2, r3
 800af48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	1e5a      	subs	r2, r3, #1
 800af4e:	60fa      	str	r2, [r7, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d102      	bne.n	800af5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af58:	e02c      	b.n	800afb4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0ef      	beq.n	800af4a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1ea      	bne.n	800af4a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af78:	f003 0304 	and.w	r3, r3, #4
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d004      	beq.n	800af8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2204      	movs	r2, #4
 800af84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af86:	2304      	movs	r3, #4
 800af88:	e014      	b.n	800afb4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b00      	cmp	r3, #0
 800af94:	d004      	beq.n	800afa0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2201      	movs	r2, #1
 800af9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e009      	b.n	800afb4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2240      	movs	r2, #64	; 0x40
 800afb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800afb2:	2300      	movs	r3, #0

}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	24000000 	.word	0x24000000
 800afc4:	10624dd3 	.word	0x10624dd3

0800afc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800afd0:	4b11      	ldr	r3, [pc, #68]	; (800b018 <SDMMC_GetCmdError+0x50>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a11      	ldr	r2, [pc, #68]	; (800b01c <SDMMC_GetCmdError+0x54>)
 800afd6:	fba2 2303 	umull	r2, r3, r2, r3
 800afda:	0a5b      	lsrs	r3, r3, #9
 800afdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe0:	fb02 f303 	mul.w	r3, r2, r3
 800afe4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	1e5a      	subs	r2, r3, #1
 800afea:	60fa      	str	r2, [r7, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d102      	bne.n	800aff6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aff4:	e009      	b.n	800b00a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800affa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0f1      	beq.n	800afe6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a06      	ldr	r2, [pc, #24]	; (800b020 <SDMMC_GetCmdError+0x58>)
 800b006:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	24000000 	.word	0x24000000
 800b01c:	10624dd3 	.word	0x10624dd3
 800b020:	002000c5 	.word	0x002000c5

0800b024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b024:	b084      	sub	sp, #16
 800b026:	b580      	push	{r7, lr}
 800b028:	b084      	sub	sp, #16
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	f107 001c 	add.w	r0, r7, #28
 800b032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d120      	bne.n	800b07e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68da      	ldr	r2, [r3, #12]
 800b04c:	4b2a      	ldr	r3, [pc, #168]	; (800b0f8 <USB_CoreInit+0xd4>)
 800b04e:	4013      	ands	r3, r2
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b062:	2b01      	cmp	r3, #1
 800b064:	d105      	bne.n	800b072 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f001 faf8 	bl	800c668 <USB_CoreReset>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]
 800b07c:	e01a      	b.n	800b0b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f001 faec 	bl	800c668 <USB_CoreReset>
 800b090:	4603      	mov	r3, r0
 800b092:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	639a      	str	r2, [r3, #56]	; 0x38
 800b0a6:	e005      	b.n	800b0b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d116      	bne.n	800b0e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b0c8:	4b0c      	ldr	r3, [pc, #48]	; (800b0fc <USB_CoreInit+0xd8>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f043 0206 	orr.w	r2, r3, #6
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f043 0220 	orr.w	r2, r3, #32
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0f4:	b004      	add	sp, #16
 800b0f6:	4770      	bx	lr
 800b0f8:	ffbdffbf 	.word	0xffbdffbf
 800b0fc:	03ee0000 	.word	0x03ee0000

0800b100 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	4613      	mov	r3, r2
 800b10c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b10e:	79fb      	ldrb	r3, [r7, #7]
 800b110:	2b02      	cmp	r3, #2
 800b112:	d165      	bne.n	800b1e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	4a41      	ldr	r2, [pc, #260]	; (800b21c <USB_SetTurnaroundTime+0x11c>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d906      	bls.n	800b12a <USB_SetTurnaroundTime+0x2a>
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	4a40      	ldr	r2, [pc, #256]	; (800b220 <USB_SetTurnaroundTime+0x120>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d202      	bcs.n	800b12a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b124:	230f      	movs	r3, #15
 800b126:	617b      	str	r3, [r7, #20]
 800b128:	e062      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	4a3c      	ldr	r2, [pc, #240]	; (800b220 <USB_SetTurnaroundTime+0x120>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d306      	bcc.n	800b140 <USB_SetTurnaroundTime+0x40>
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	4a3b      	ldr	r2, [pc, #236]	; (800b224 <USB_SetTurnaroundTime+0x124>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d202      	bcs.n	800b140 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b13a:	230e      	movs	r3, #14
 800b13c:	617b      	str	r3, [r7, #20]
 800b13e:	e057      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	4a38      	ldr	r2, [pc, #224]	; (800b224 <USB_SetTurnaroundTime+0x124>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d306      	bcc.n	800b156 <USB_SetTurnaroundTime+0x56>
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	4a37      	ldr	r2, [pc, #220]	; (800b228 <USB_SetTurnaroundTime+0x128>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d202      	bcs.n	800b156 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b150:	230d      	movs	r3, #13
 800b152:	617b      	str	r3, [r7, #20]
 800b154:	e04c      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	4a33      	ldr	r2, [pc, #204]	; (800b228 <USB_SetTurnaroundTime+0x128>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d306      	bcc.n	800b16c <USB_SetTurnaroundTime+0x6c>
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	4a32      	ldr	r2, [pc, #200]	; (800b22c <USB_SetTurnaroundTime+0x12c>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d802      	bhi.n	800b16c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b166:	230c      	movs	r3, #12
 800b168:	617b      	str	r3, [r7, #20]
 800b16a:	e041      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	4a2f      	ldr	r2, [pc, #188]	; (800b22c <USB_SetTurnaroundTime+0x12c>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d906      	bls.n	800b182 <USB_SetTurnaroundTime+0x82>
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	4a2e      	ldr	r2, [pc, #184]	; (800b230 <USB_SetTurnaroundTime+0x130>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d802      	bhi.n	800b182 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b17c:	230b      	movs	r3, #11
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	e036      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	4a2a      	ldr	r2, [pc, #168]	; (800b230 <USB_SetTurnaroundTime+0x130>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d906      	bls.n	800b198 <USB_SetTurnaroundTime+0x98>
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	4a29      	ldr	r2, [pc, #164]	; (800b234 <USB_SetTurnaroundTime+0x134>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d802      	bhi.n	800b198 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b192:	230a      	movs	r3, #10
 800b194:	617b      	str	r3, [r7, #20]
 800b196:	e02b      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	4a26      	ldr	r2, [pc, #152]	; (800b234 <USB_SetTurnaroundTime+0x134>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d906      	bls.n	800b1ae <USB_SetTurnaroundTime+0xae>
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	4a25      	ldr	r2, [pc, #148]	; (800b238 <USB_SetTurnaroundTime+0x138>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d202      	bcs.n	800b1ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b1a8:	2309      	movs	r3, #9
 800b1aa:	617b      	str	r3, [r7, #20]
 800b1ac:	e020      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	4a21      	ldr	r2, [pc, #132]	; (800b238 <USB_SetTurnaroundTime+0x138>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d306      	bcc.n	800b1c4 <USB_SetTurnaroundTime+0xc4>
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	4a20      	ldr	r2, [pc, #128]	; (800b23c <USB_SetTurnaroundTime+0x13c>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d802      	bhi.n	800b1c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b1be:	2308      	movs	r3, #8
 800b1c0:	617b      	str	r3, [r7, #20]
 800b1c2:	e015      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	4a1d      	ldr	r2, [pc, #116]	; (800b23c <USB_SetTurnaroundTime+0x13c>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d906      	bls.n	800b1da <USB_SetTurnaroundTime+0xda>
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	4a1c      	ldr	r2, [pc, #112]	; (800b240 <USB_SetTurnaroundTime+0x140>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d202      	bcs.n	800b1da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b1d4:	2307      	movs	r3, #7
 800b1d6:	617b      	str	r3, [r7, #20]
 800b1d8:	e00a      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b1da:	2306      	movs	r3, #6
 800b1dc:	617b      	str	r3, [r7, #20]
 800b1de:	e007      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b1e0:	79fb      	ldrb	r3, [r7, #7]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d102      	bne.n	800b1ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b1e6:	2309      	movs	r3, #9
 800b1e8:	617b      	str	r3, [r7, #20]
 800b1ea:	e001      	b.n	800b1f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b1ec:	2309      	movs	r3, #9
 800b1ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	68da      	ldr	r2, [r3, #12]
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	029b      	lsls	r3, r3, #10
 800b204:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b208:	431a      	orrs	r2, r3
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	371c      	adds	r7, #28
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	00d8acbf 	.word	0x00d8acbf
 800b220:	00e4e1c0 	.word	0x00e4e1c0
 800b224:	00f42400 	.word	0x00f42400
 800b228:	01067380 	.word	0x01067380
 800b22c:	011a499f 	.word	0x011a499f
 800b230:	01312cff 	.word	0x01312cff
 800b234:	014ca43f 	.word	0x014ca43f
 800b238:	016e3600 	.word	0x016e3600
 800b23c:	01a6ab1f 	.word	0x01a6ab1f
 800b240:	01e84800 	.word	0x01e84800

0800b244 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f043 0201 	orr.w	r2, r3, #1
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	f023 0201 	bic.w	r2, r3, #1
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	460b      	mov	r3, r1
 800b292:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b294:	2300      	movs	r3, #0
 800b296:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b2a4:	78fb      	ldrb	r3, [r7, #3]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d115      	bne.n	800b2d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b2b6:	2001      	movs	r0, #1
 800b2b8:	f7f5 fcea 	bl	8000c90 <HAL_Delay>
      ms++;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 f93f 	bl	800c546 <USB_GetMode>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d01e      	beq.n	800b30c <USB_SetCurrentMode+0x84>
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2b31      	cmp	r3, #49	; 0x31
 800b2d2:	d9f0      	bls.n	800b2b6 <USB_SetCurrentMode+0x2e>
 800b2d4:	e01a      	b.n	800b30c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b2d6:	78fb      	ldrb	r3, [r7, #3]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d115      	bne.n	800b308 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	f7f5 fcd1 	bl	8000c90 <HAL_Delay>
      ms++;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f001 f926 	bl	800c546 <USB_GetMode>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d005      	beq.n	800b30c <USB_SetCurrentMode+0x84>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2b31      	cmp	r3, #49	; 0x31
 800b304:	d9f0      	bls.n	800b2e8 <USB_SetCurrentMode+0x60>
 800b306:	e001      	b.n	800b30c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	e005      	b.n	800b318 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2b32      	cmp	r3, #50	; 0x32
 800b310:	d101      	bne.n	800b316 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e000      	b.n	800b318 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b320:	b084      	sub	sp, #16
 800b322:	b580      	push	{r7, lr}
 800b324:	b086      	sub	sp, #24
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b32e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b33a:	2300      	movs	r3, #0
 800b33c:	613b      	str	r3, [r7, #16]
 800b33e:	e009      	b.n	800b354 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	3340      	adds	r3, #64	; 0x40
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	2200      	movs	r2, #0
 800b34c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	3301      	adds	r3, #1
 800b352:	613b      	str	r3, [r7, #16]
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	2b0e      	cmp	r3, #14
 800b358:	d9f2      	bls.n	800b340 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b35a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d11c      	bne.n	800b39a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b36e:	f043 0302 	orr.w	r3, r3, #2
 800b372:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b378:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	e005      	b.n	800b3a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	680b      	ldr	r3, [r1, #0]
 800b3c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d10c      	bne.n	800b3e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d104      	bne.n	800b3dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f965 	bl	800b6a4 <USB_SetDevSpeed>
 800b3da:	e008      	b.n	800b3ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b3dc:	2101      	movs	r1, #1
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f960 	bl	800b6a4 <USB_SetDevSpeed>
 800b3e4:	e003      	b.n	800b3ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b3e6:	2103      	movs	r1, #3
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f95b 	bl	800b6a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b3ee:	2110      	movs	r1, #16
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f8f3 	bl	800b5dc <USB_FlushTxFifo>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f91f 	bl	800b644 <USB_FlushRxFifo>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b416:	461a      	mov	r2, r3
 800b418:	2300      	movs	r3, #0
 800b41a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b422:	461a      	mov	r2, r3
 800b424:	2300      	movs	r3, #0
 800b426:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b42e:	461a      	mov	r2, r3
 800b430:	2300      	movs	r3, #0
 800b432:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b434:	2300      	movs	r3, #0
 800b436:	613b      	str	r3, [r7, #16]
 800b438:	e043      	b.n	800b4c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	015a      	lsls	r2, r3, #5
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	4413      	add	r3, r2
 800b442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b44c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b450:	d118      	bne.n	800b484 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10a      	bne.n	800b46e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b464:	461a      	mov	r2, r3
 800b466:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b46a:	6013      	str	r3, [r2, #0]
 800b46c:	e013      	b.n	800b496 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	4413      	add	r3, r2
 800b476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b47a:	461a      	mov	r2, r3
 800b47c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	e008      	b.n	800b496 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b490:	461a      	mov	r2, r3
 800b492:	2300      	movs	r3, #0
 800b494:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b4ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	613b      	str	r3, [r7, #16]
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d3b7      	bcc.n	800b43a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	613b      	str	r3, [r7, #16]
 800b4ce:	e043      	b.n	800b558 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	015a      	lsls	r2, r3, #5
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4e6:	d118      	bne.n	800b51a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	015a      	lsls	r2, r3, #5
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	e013      	b.n	800b52c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b510:	461a      	mov	r2, r3
 800b512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	e008      	b.n	800b52c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	015a      	lsls	r2, r3, #5
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	4413      	add	r3, r2
 800b522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b526:	461a      	mov	r2, r3
 800b528:	2300      	movs	r3, #0
 800b52a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	015a      	lsls	r2, r3, #5
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	4413      	add	r3, r2
 800b534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b538:	461a      	mov	r2, r3
 800b53a:	2300      	movs	r3, #0
 800b53c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	015a      	lsls	r2, r3, #5
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4413      	add	r3, r2
 800b546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b54a:	461a      	mov	r2, r3
 800b54c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b550:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	3301      	adds	r3, #1
 800b556:	613b      	str	r3, [r7, #16]
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d3b7      	bcc.n	800b4d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b56e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b572:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b580:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b584:	2b00      	cmp	r3, #0
 800b586:	d105      	bne.n	800b594 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	f043 0210 	orr.w	r2, r3, #16
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	699a      	ldr	r2, [r3, #24]
 800b598:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <USB_DevInit+0x2b4>)
 800b59a:	4313      	orrs	r3, r2
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d005      	beq.n	800b5b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	f043 0208 	orr.w	r2, r3, #8
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d105      	bne.n	800b5c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	699a      	ldr	r2, [r3, #24]
 800b5bc:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <USB_DevInit+0x2b8>)
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3718      	adds	r7, #24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5d0:	b004      	add	sp, #16
 800b5d2:	4770      	bx	lr
 800b5d4:	803c3800 	.word	0x803c3800
 800b5d8:	40000004 	.word	0x40000004

0800b5dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4a13      	ldr	r2, [pc, #76]	; (800b640 <USB_FlushTxFifo+0x64>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d901      	bls.n	800b5fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	e01b      	b.n	800b634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	daf2      	bge.n	800b5ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b604:	2300      	movs	r3, #0
 800b606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	019b      	lsls	r3, r3, #6
 800b60c:	f043 0220 	orr.w	r2, r3, #32
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3301      	adds	r3, #1
 800b618:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	4a08      	ldr	r2, [pc, #32]	; (800b640 <USB_FlushTxFifo+0x64>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d901      	bls.n	800b626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e006      	b.n	800b634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	f003 0320 	and.w	r3, r3, #32
 800b62e:	2b20      	cmp	r3, #32
 800b630:	d0f0      	beq.n	800b614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	00030d40 	.word	0x00030d40

0800b644 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b64c:	2300      	movs	r3, #0
 800b64e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3301      	adds	r3, #1
 800b654:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	4a11      	ldr	r2, [pc, #68]	; (800b6a0 <USB_FlushRxFifo+0x5c>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d901      	bls.n	800b662 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b65e:	2303      	movs	r3, #3
 800b660:	e018      	b.n	800b694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	daf2      	bge.n	800b650 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2210      	movs	r2, #16
 800b672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	3301      	adds	r3, #1
 800b678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4a08      	ldr	r2, [pc, #32]	; (800b6a0 <USB_FlushRxFifo+0x5c>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d901      	bls.n	800b686 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e006      	b.n	800b694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	f003 0310 	and.w	r3, r3, #16
 800b68e:	2b10      	cmp	r3, #16
 800b690:	d0f0      	beq.n	800b674 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	00030d40 	.word	0x00030d40

0800b6a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	78fb      	ldrb	r3, [r7, #3]
 800b6be:	68f9      	ldr	r1, [r7, #12]
 800b6c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3714      	adds	r7, #20
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr

0800b6d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b087      	sub	sp, #28
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	f003 0306 	and.w	r3, r3, #6
 800b6ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d102      	bne.n	800b6fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	75fb      	strb	r3, [r7, #23]
 800b6fa:	e00a      	b.n	800b712 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d002      	beq.n	800b708 <USB_GetDevSpeed+0x32>
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b06      	cmp	r3, #6
 800b706:	d102      	bne.n	800b70e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b708:	2302      	movs	r3, #2
 800b70a:	75fb      	strb	r3, [r7, #23]
 800b70c:	e001      	b.n	800b712 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b70e:	230f      	movs	r3, #15
 800b710:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b712:	7dfb      	ldrb	r3, [r7, #23]
}
 800b714:	4618      	mov	r0, r3
 800b716:	371c      	adds	r7, #28
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	785b      	ldrb	r3, [r3, #1]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d139      	bne.n	800b7b0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b742:	69da      	ldr	r2, [r3, #28]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	f003 030f 	and.w	r3, r3, #15
 800b74c:	2101      	movs	r1, #1
 800b74e:	fa01 f303 	lsl.w	r3, r1, r3
 800b752:	b29b      	uxth	r3, r3
 800b754:	68f9      	ldr	r1, [r7, #12]
 800b756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b75a:	4313      	orrs	r3, r2
 800b75c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	015a      	lsls	r2, r3, #5
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	4413      	add	r3, r2
 800b766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d153      	bne.n	800b81c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	015a      	lsls	r2, r3, #5
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	4413      	add	r3, r2
 800b77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	791b      	ldrb	r3, [r3, #4]
 800b78e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b790:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	059b      	lsls	r3, r3, #22
 800b796:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b798:	431a      	orrs	r2, r3
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	0159      	lsls	r1, r3, #5
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	440b      	add	r3, r1
 800b7a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	4b20      	ldr	r3, [pc, #128]	; (800b82c <USB_ActivateEndpoint+0x10c>)
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	600b      	str	r3, [r1, #0]
 800b7ae:	e035      	b.n	800b81c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b6:	69da      	ldr	r2, [r3, #28]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	f003 030f 	and.w	r3, r3, #15
 800b7c0:	2101      	movs	r1, #1
 800b7c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b7c6:	041b      	lsls	r3, r3, #16
 800b7c8:	68f9      	ldr	r1, [r7, #12]
 800b7ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	015a      	lsls	r2, r3, #5
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d119      	bne.n	800b81c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	791b      	ldrb	r3, [r3, #4]
 800b802:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b804:	430b      	orrs	r3, r1
 800b806:	431a      	orrs	r2, r3
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	0159      	lsls	r1, r3, #5
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	440b      	add	r3, r1
 800b810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b814:	4619      	mov	r1, r3
 800b816:	4b05      	ldr	r3, [pc, #20]	; (800b82c <USB_ActivateEndpoint+0x10c>)
 800b818:	4313      	orrs	r3, r2
 800b81a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	10008000 	.word	0x10008000

0800b830 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d161      	bne.n	800b910 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4413      	add	r3, r2
 800b854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b85e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b862:	d11f      	bne.n	800b8a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	015a      	lsls	r2, r3, #5
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4413      	add	r3, r2
 800b86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	0151      	lsls	r1, r2, #5
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	440a      	add	r2, r1
 800b87a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b87e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b882:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	015a      	lsls	r2, r3, #5
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	0151      	lsls	r1, r2, #5
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	440a      	add	r2, r1
 800b89a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b89e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	f003 030f 	and.w	r3, r3, #15
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	43db      	mvns	r3, r3
 800b8be:	68f9      	ldr	r1, [r7, #12]
 800b8c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ce:	69da      	ldr	r2, [r3, #28]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	f003 030f 	and.w	r3, r3, #15
 800b8d8:	2101      	movs	r1, #1
 800b8da:	fa01 f303 	lsl.w	r3, r1, r3
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	43db      	mvns	r3, r3
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	015a      	lsls	r2, r3, #5
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	0159      	lsls	r1, r3, #5
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	440b      	add	r3, r1
 800b902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b906:	4619      	mov	r1, r3
 800b908:	4b35      	ldr	r3, [pc, #212]	; (800b9e0 <USB_DeactivateEndpoint+0x1b0>)
 800b90a:	4013      	ands	r3, r2
 800b90c:	600b      	str	r3, [r1, #0]
 800b90e:	e060      	b.n	800b9d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	015a      	lsls	r2, r3, #5
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	4413      	add	r3, r2
 800b918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b926:	d11f      	bne.n	800b968 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	015a      	lsls	r2, r3, #5
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	4413      	add	r3, r2
 800b930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	68ba      	ldr	r2, [r7, #8]
 800b938:	0151      	lsls	r1, r2, #5
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	440a      	add	r2, r1
 800b93e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b946:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	0151      	lsls	r1, r2, #5
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	440a      	add	r2, r1
 800b95e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b966:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b96e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	f003 030f 	and.w	r3, r3, #15
 800b978:	2101      	movs	r1, #1
 800b97a:	fa01 f303 	lsl.w	r3, r1, r3
 800b97e:	041b      	lsls	r3, r3, #16
 800b980:	43db      	mvns	r3, r3
 800b982:	68f9      	ldr	r1, [r7, #12]
 800b984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b988:	4013      	ands	r3, r2
 800b98a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b992:	69da      	ldr	r2, [r3, #28]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	f003 030f 	and.w	r3, r3, #15
 800b99c:	2101      	movs	r1, #1
 800b99e:	fa01 f303 	lsl.w	r3, r1, r3
 800b9a2:	041b      	lsls	r3, r3, #16
 800b9a4:	43db      	mvns	r3, r3
 800b9a6:	68f9      	ldr	r1, [r7, #12]
 800b9a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	015a      	lsls	r2, r3, #5
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	0159      	lsls	r1, r3, #5
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	440b      	add	r3, r1
 800b9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	4b05      	ldr	r3, [pc, #20]	; (800b9e4 <USB_DeactivateEndpoint+0x1b4>)
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	ec337800 	.word	0xec337800
 800b9e4:	eff37800 	.word	0xeff37800

0800b9e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b08a      	sub	sp, #40	; 0x28
 800b9ec:	af02      	add	r7, sp, #8
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	785b      	ldrb	r3, [r3, #1]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	f040 8181 	bne.w	800bd0c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d132      	bne.n	800ba78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	015a      	lsls	r2, r3, #5
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	4413      	add	r3, r2
 800ba1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba1e:	691a      	ldr	r2, [r3, #16]
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	0159      	lsls	r1, r3, #5
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	440b      	add	r3, r1
 800ba28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4ba5      	ldr	r3, [pc, #660]	; (800bcc4 <USB_EPStartXfer+0x2dc>)
 800ba30:	4013      	ands	r3, r2
 800ba32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	015a      	lsls	r2, r3, #5
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	69ba      	ldr	r2, [r7, #24]
 800ba44:	0151      	lsls	r1, r2, #5
 800ba46:	69fa      	ldr	r2, [r7, #28]
 800ba48:	440a      	add	r2, r1
 800ba4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	015a      	lsls	r2, r3, #5
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba60:	691a      	ldr	r2, [r3, #16]
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	0159      	lsls	r1, r3, #5
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	440b      	add	r3, r1
 800ba6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba6e:	4619      	mov	r1, r3
 800ba70:	4b95      	ldr	r3, [pc, #596]	; (800bcc8 <USB_EPStartXfer+0x2e0>)
 800ba72:	4013      	ands	r3, r2
 800ba74:	610b      	str	r3, [r1, #16]
 800ba76:	e092      	b.n	800bb9e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	015a      	lsls	r2, r3, #5
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	4413      	add	r3, r2
 800ba80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba84:	691a      	ldr	r2, [r3, #16]
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	0159      	lsls	r1, r3, #5
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	440b      	add	r3, r1
 800ba8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba92:	4619      	mov	r1, r3
 800ba94:	4b8c      	ldr	r3, [pc, #560]	; (800bcc8 <USB_EPStartXfer+0x2e0>)
 800ba96:	4013      	ands	r3, r2
 800ba98:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	015a      	lsls	r2, r3, #5
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	4413      	add	r3, r2
 800baa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa6:	691a      	ldr	r2, [r3, #16]
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	0159      	lsls	r1, r3, #5
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	440b      	add	r3, r1
 800bab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab4:	4619      	mov	r1, r3
 800bab6:	4b83      	ldr	r3, [pc, #524]	; (800bcc4 <USB_EPStartXfer+0x2dc>)
 800bab8:	4013      	ands	r3, r2
 800baba:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d11a      	bne.n	800baf8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	691a      	ldr	r2, [r3, #16]
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d903      	bls.n	800bad6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	689a      	ldr	r2, [r3, #8]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	015a      	lsls	r2, r3, #5
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	4413      	add	r3, r2
 800bade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	69ba      	ldr	r2, [r7, #24]
 800bae6:	0151      	lsls	r1, r2, #5
 800bae8:	69fa      	ldr	r2, [r7, #28]
 800baea:	440a      	add	r2, r1
 800baec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800baf4:	6113      	str	r3, [r2, #16]
 800baf6:	e01b      	b.n	800bb30 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	015a      	lsls	r2, r3, #5
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	4413      	add	r3, r2
 800bb00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb04:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	6919      	ldr	r1, [r3, #16]
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	440b      	add	r3, r1
 800bb10:	1e59      	subs	r1, r3, #1
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	fbb1 f3f3 	udiv	r3, r1, r3
 800bb1a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bb1c:	4b6b      	ldr	r3, [pc, #428]	; (800bccc <USB_EPStartXfer+0x2e4>)
 800bb1e:	400b      	ands	r3, r1
 800bb20:	69b9      	ldr	r1, [r7, #24]
 800bb22:	0148      	lsls	r0, r1, #5
 800bb24:	69f9      	ldr	r1, [r7, #28]
 800bb26:	4401      	add	r1, r0
 800bb28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	015a      	lsls	r2, r3, #5
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	4413      	add	r3, r2
 800bb38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb3c:	691a      	ldr	r2, [r3, #16]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb46:	69b9      	ldr	r1, [r7, #24]
 800bb48:	0148      	lsls	r0, r1, #5
 800bb4a:	69f9      	ldr	r1, [r7, #28]
 800bb4c:	4401      	add	r1, r0
 800bb4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bb52:	4313      	orrs	r3, r2
 800bb54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	791b      	ldrb	r3, [r3, #4]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d11f      	bne.n	800bb9e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	015a      	lsls	r2, r3, #5
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	4413      	add	r3, r2
 800bb66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	69ba      	ldr	r2, [r7, #24]
 800bb6e:	0151      	lsls	r1, r2, #5
 800bb70:	69fa      	ldr	r2, [r7, #28]
 800bb72:	440a      	add	r2, r1
 800bb74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bb7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	015a      	lsls	r2, r3, #5
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	4413      	add	r3, r2
 800bb86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	69ba      	ldr	r2, [r7, #24]
 800bb8e:	0151      	lsls	r1, r2, #5
 800bb90:	69fa      	ldr	r2, [r7, #28]
 800bb92:	440a      	add	r2, r1
 800bb94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bb9e:	79fb      	ldrb	r3, [r7, #7]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d14b      	bne.n	800bc3c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d009      	beq.n	800bbc0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	015a      	lsls	r2, r3, #5
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb8:	461a      	mov	r2, r3
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	69db      	ldr	r3, [r3, #28]
 800bbbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	791b      	ldrb	r3, [r3, #4]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d128      	bne.n	800bc1a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d110      	bne.n	800bbfa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	015a      	lsls	r2, r3, #5
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	4413      	add	r3, r2
 800bbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	69ba      	ldr	r2, [r7, #24]
 800bbe8:	0151      	lsls	r1, r2, #5
 800bbea:	69fa      	ldr	r2, [r7, #28]
 800bbec:	440a      	add	r2, r1
 800bbee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbf6:	6013      	str	r3, [r2, #0]
 800bbf8:	e00f      	b.n	800bc1a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	015a      	lsls	r2, r3, #5
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	4413      	add	r3, r2
 800bc02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	69ba      	ldr	r2, [r7, #24]
 800bc0a:	0151      	lsls	r1, r2, #5
 800bc0c:	69fa      	ldr	r2, [r7, #28]
 800bc0e:	440a      	add	r2, r1
 800bc10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	015a      	lsls	r2, r3, #5
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	4413      	add	r3, r2
 800bc22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	69ba      	ldr	r2, [r7, #24]
 800bc2a:	0151      	lsls	r1, r2, #5
 800bc2c:	69fa      	ldr	r2, [r7, #28]
 800bc2e:	440a      	add	r2, r1
 800bc30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	e16a      	b.n	800bf12 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	015a      	lsls	r2, r3, #5
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	69ba      	ldr	r2, [r7, #24]
 800bc4c:	0151      	lsls	r1, r2, #5
 800bc4e:	69fa      	ldr	r2, [r7, #28]
 800bc50:	440a      	add	r2, r1
 800bc52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	791b      	ldrb	r3, [r3, #4]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d015      	beq.n	800bc90 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 8152 	beq.w	800bf12 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	f003 030f 	and.w	r3, r3, #15
 800bc7e:	2101      	movs	r1, #1
 800bc80:	fa01 f303 	lsl.w	r3, r1, r3
 800bc84:	69f9      	ldr	r1, [r7, #28]
 800bc86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	634b      	str	r3, [r1, #52]	; 0x34
 800bc8e:	e140      	b.n	800bf12 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d117      	bne.n	800bcd0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	015a      	lsls	r2, r3, #5
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	4413      	add	r3, r2
 800bca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	69ba      	ldr	r2, [r7, #24]
 800bcb0:	0151      	lsls	r1, r2, #5
 800bcb2:	69fa      	ldr	r2, [r7, #28]
 800bcb4:	440a      	add	r2, r1
 800bcb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcbe:	6013      	str	r3, [r2, #0]
 800bcc0:	e016      	b.n	800bcf0 <USB_EPStartXfer+0x308>
 800bcc2:	bf00      	nop
 800bcc4:	e007ffff 	.word	0xe007ffff
 800bcc8:	fff80000 	.word	0xfff80000
 800bccc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	69ba      	ldr	r2, [r7, #24]
 800bce0:	0151      	lsls	r1, r2, #5
 800bce2:	69fa      	ldr	r2, [r7, #28]
 800bce4:	440a      	add	r2, r1
 800bce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	68d9      	ldr	r1, [r3, #12]
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	781a      	ldrb	r2, [r3, #0]
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	b298      	uxth	r0, r3
 800bcfe:	79fb      	ldrb	r3, [r7, #7]
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	4603      	mov	r3, r0
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 f9b9 	bl	800c07c <USB_WritePacket>
 800bd0a:	e102      	b.n	800bf12 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	015a      	lsls	r2, r3, #5
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	4413      	add	r3, r2
 800bd14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd18:	691a      	ldr	r2, [r3, #16]
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	0159      	lsls	r1, r3, #5
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	440b      	add	r3, r1
 800bd22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd26:	4619      	mov	r1, r3
 800bd28:	4b7c      	ldr	r3, [pc, #496]	; (800bf1c <USB_EPStartXfer+0x534>)
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	015a      	lsls	r2, r3, #5
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	4413      	add	r3, r2
 800bd36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3a:	691a      	ldr	r2, [r3, #16]
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	0159      	lsls	r1, r3, #5
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	440b      	add	r3, r1
 800bd44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd48:	4619      	mov	r1, r3
 800bd4a:	4b75      	ldr	r3, [pc, #468]	; (800bf20 <USB_EPStartXfer+0x538>)
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d12f      	bne.n	800bdb6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d003      	beq.n	800bd66 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	689a      	ldr	r2, [r3, #8]
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	689a      	ldr	r2, [r3, #8]
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd7a:	691a      	ldr	r2, [r3, #16]
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd84:	69b9      	ldr	r1, [r7, #24]
 800bd86:	0148      	lsls	r0, r1, #5
 800bd88:	69f9      	ldr	r1, [r7, #28]
 800bd8a:	4401      	add	r1, r0
 800bd8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd90:	4313      	orrs	r3, r2
 800bd92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	015a      	lsls	r2, r3, #5
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	69ba      	ldr	r2, [r7, #24]
 800bda4:	0151      	lsls	r1, r2, #5
 800bda6:	69fa      	ldr	r2, [r7, #28]
 800bda8:	440a      	add	r2, r1
 800bdaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdb2:	6113      	str	r3, [r2, #16]
 800bdb4:	e05f      	b.n	800be76 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d123      	bne.n	800be06 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	015a      	lsls	r2, r3, #5
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdca:	691a      	ldr	r2, [r3, #16]
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdd4:	69b9      	ldr	r1, [r7, #24]
 800bdd6:	0148      	lsls	r0, r1, #5
 800bdd8:	69f9      	ldr	r1, [r7, #28]
 800bdda:	4401      	add	r1, r0
 800bddc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bde0:	4313      	orrs	r3, r2
 800bde2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	015a      	lsls	r2, r3, #5
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	4413      	add	r3, r2
 800bdec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	69ba      	ldr	r2, [r7, #24]
 800bdf4:	0151      	lsls	r1, r2, #5
 800bdf6:	69fa      	ldr	r2, [r7, #28]
 800bdf8:	440a      	add	r2, r1
 800bdfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be02:	6113      	str	r3, [r2, #16]
 800be04:	e037      	b.n	800be76 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	691a      	ldr	r2, [r3, #16]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	4413      	add	r3, r2
 800be10:	1e5a      	subs	r2, r3, #1
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	fbb2 f3f3 	udiv	r3, r2, r3
 800be1a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	8afa      	ldrh	r2, [r7, #22]
 800be22:	fb03 f202 	mul.w	r2, r3, r2
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	015a      	lsls	r2, r3, #5
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	4413      	add	r3, r2
 800be32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be36:	691a      	ldr	r2, [r3, #16]
 800be38:	8afb      	ldrh	r3, [r7, #22]
 800be3a:	04d9      	lsls	r1, r3, #19
 800be3c:	4b39      	ldr	r3, [pc, #228]	; (800bf24 <USB_EPStartXfer+0x53c>)
 800be3e:	400b      	ands	r3, r1
 800be40:	69b9      	ldr	r1, [r7, #24]
 800be42:	0148      	lsls	r0, r1, #5
 800be44:	69f9      	ldr	r1, [r7, #28]
 800be46:	4401      	add	r1, r0
 800be48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be4c:	4313      	orrs	r3, r2
 800be4e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	015a      	lsls	r2, r3, #5
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	4413      	add	r3, r2
 800be58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be5c:	691a      	ldr	r2, [r3, #16]
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be66:	69b9      	ldr	r1, [r7, #24]
 800be68:	0148      	lsls	r0, r1, #5
 800be6a:	69f9      	ldr	r1, [r7, #28]
 800be6c:	4401      	add	r1, r0
 800be6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be72:	4313      	orrs	r3, r2
 800be74:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800be76:	79fb      	ldrb	r3, [r7, #7]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d10d      	bne.n	800be98 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d009      	beq.n	800be98 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	68d9      	ldr	r1, [r3, #12]
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be94:	460a      	mov	r2, r1
 800be96:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	791b      	ldrb	r3, [r3, #4]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d128      	bne.n	800bef2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beac:	2b00      	cmp	r3, #0
 800beae:	d110      	bne.n	800bed2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	015a      	lsls	r2, r3, #5
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	4413      	add	r3, r2
 800beb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	0151      	lsls	r1, r2, #5
 800bec2:	69fa      	ldr	r2, [r7, #28]
 800bec4:	440a      	add	r2, r1
 800bec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bece:	6013      	str	r3, [r2, #0]
 800bed0:	e00f      	b.n	800bef2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	015a      	lsls	r2, r3, #5
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	4413      	add	r3, r2
 800beda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	0151      	lsls	r1, r2, #5
 800bee4:	69fa      	ldr	r2, [r7, #28]
 800bee6:	440a      	add	r2, r1
 800bee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bef0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	015a      	lsls	r2, r3, #5
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	4413      	add	r3, r2
 800befa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	69ba      	ldr	r2, [r7, #24]
 800bf02:	0151      	lsls	r1, r2, #5
 800bf04:	69fa      	ldr	r2, [r7, #28]
 800bf06:	440a      	add	r2, r1
 800bf08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3720      	adds	r7, #32
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	fff80000 	.word	0xfff80000
 800bf20:	e007ffff 	.word	0xe007ffff
 800bf24:	1ff80000 	.word	0x1ff80000

0800bf28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bf32:	2300      	movs	r3, #0
 800bf34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf36:	2300      	movs	r3, #0
 800bf38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	785b      	ldrb	r3, [r3, #1]
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d14a      	bne.n	800bfdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf5e:	f040 8086 	bne.w	800c06e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	015a      	lsls	r2, r3, #5
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	7812      	ldrb	r2, [r2, #0]
 800bf76:	0151      	lsls	r1, r2, #5
 800bf78:	693a      	ldr	r2, [r7, #16]
 800bf7a:	440a      	add	r2, r1
 800bf7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	015a      	lsls	r2, r3, #5
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	4413      	add	r3, r2
 800bf90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	7812      	ldrb	r2, [r2, #0]
 800bf9a:	0151      	lsls	r1, r2, #5
 800bf9c:	693a      	ldr	r2, [r7, #16]
 800bf9e:	440a      	add	r2, r1
 800bfa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3301      	adds	r3, #1
 800bfae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f242 7210 	movw	r2, #10000	; 0x2710
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d902      	bls.n	800bfc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	75fb      	strb	r3, [r7, #23]
          break;
 800bfbe:	e056      	b.n	800c06e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	015a      	lsls	r2, r3, #5
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	4413      	add	r3, r2
 800bfca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfd8:	d0e7      	beq.n	800bfaa <USB_EPStopXfer+0x82>
 800bfda:	e048      	b.n	800c06e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	015a      	lsls	r2, r3, #5
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bff4:	d13b      	bne.n	800c06e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	015a      	lsls	r2, r3, #5
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	4413      	add	r3, r2
 800c000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	683a      	ldr	r2, [r7, #0]
 800c008:	7812      	ldrb	r2, [r2, #0]
 800c00a:	0151      	lsls	r1, r2, #5
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	440a      	add	r2, r1
 800c010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c018:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	015a      	lsls	r2, r3, #5
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	4413      	add	r3, r2
 800c024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	7812      	ldrb	r2, [r2, #0]
 800c02e:	0151      	lsls	r1, r2, #5
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	440a      	add	r2, r1
 800c034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c03c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	3301      	adds	r3, #1
 800c042:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f242 7210 	movw	r2, #10000	; 0x2710
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d902      	bls.n	800c054 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	75fb      	strb	r3, [r7, #23]
          break;
 800c052:	e00c      	b.n	800c06e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c06c:	d0e7      	beq.n	800c03e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c070:	4618      	mov	r0, r3
 800c072:	371c      	adds	r7, #28
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b089      	sub	sp, #36	; 0x24
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	4611      	mov	r1, r2
 800c088:	461a      	mov	r2, r3
 800c08a:	460b      	mov	r3, r1
 800c08c:	71fb      	strb	r3, [r7, #7]
 800c08e:	4613      	mov	r3, r2
 800c090:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c09a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d123      	bne.n	800c0ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c0a2:	88bb      	ldrh	r3, [r7, #4]
 800c0a4:	3303      	adds	r3, #3
 800c0a6:	089b      	lsrs	r3, r3, #2
 800c0a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	61bb      	str	r3, [r7, #24]
 800c0ae:	e018      	b.n	800c0e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c0b0:	79fb      	ldrb	r3, [r7, #7]
 800c0b2:	031a      	lsls	r2, r3, #12
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0bc:	461a      	mov	r2, r3
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	61bb      	str	r3, [r7, #24]
 800c0e2:	69ba      	ldr	r2, [r7, #24]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d3e2      	bcc.n	800c0b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3724      	adds	r7, #36	; 0x24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b08b      	sub	sp, #44	; 0x2c
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	4613      	mov	r3, r2
 800c104:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c10e:	88fb      	ldrh	r3, [r7, #6]
 800c110:	089b      	lsrs	r3, r3, #2
 800c112:	b29b      	uxth	r3, r3
 800c114:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c116:	88fb      	ldrh	r3, [r7, #6]
 800c118:	f003 0303 	and.w	r3, r3, #3
 800c11c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c11e:	2300      	movs	r3, #0
 800c120:	623b      	str	r3, [r7, #32]
 800c122:	e014      	b.n	800c14e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12e:	601a      	str	r2, [r3, #0]
    pDest++;
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	3301      	adds	r3, #1
 800c134:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c138:	3301      	adds	r3, #1
 800c13a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13e:	3301      	adds	r3, #1
 800c140:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c144:	3301      	adds	r3, #1
 800c146:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c148:	6a3b      	ldr	r3, [r7, #32]
 800c14a:	3301      	adds	r3, #1
 800c14c:	623b      	str	r3, [r7, #32]
 800c14e:	6a3a      	ldr	r2, [r7, #32]
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	429a      	cmp	r2, r3
 800c154:	d3e6      	bcc.n	800c124 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c156:	8bfb      	ldrh	r3, [r7, #30]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d01e      	beq.n	800c19a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c166:	461a      	mov	r2, r3
 800c168:	f107 0310 	add.w	r3, r7, #16
 800c16c:	6812      	ldr	r2, [r2, #0]
 800c16e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	6a3b      	ldr	r3, [r7, #32]
 800c174:	b2db      	uxtb	r3, r3
 800c176:	00db      	lsls	r3, r3, #3
 800c178:	fa22 f303 	lsr.w	r3, r2, r3
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	701a      	strb	r2, [r3, #0]
      i++;
 800c182:	6a3b      	ldr	r3, [r7, #32]
 800c184:	3301      	adds	r3, #1
 800c186:	623b      	str	r3, [r7, #32]
      pDest++;
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	3301      	adds	r3, #1
 800c18c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c18e:	8bfb      	ldrh	r3, [r7, #30]
 800c190:	3b01      	subs	r3, #1
 800c192:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c194:	8bfb      	ldrh	r3, [r7, #30]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1ea      	bne.n	800c170 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	372c      	adds	r7, #44	; 0x2c
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	785b      	ldrb	r3, [r3, #1]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d12c      	bne.n	800c21e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	015a      	lsls	r2, r3, #5
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	db12      	blt.n	800c1fc <USB_EPSetStall+0x54>
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00f      	beq.n	800c1fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	0151      	lsls	r1, r2, #5
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	440a      	add	r2, r1
 800c1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c1fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	015a      	lsls	r2, r3, #5
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4413      	add	r3, r2
 800c204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	0151      	lsls	r1, r2, #5
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	440a      	add	r2, r1
 800c212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c21a:	6013      	str	r3, [r2, #0]
 800c21c:	e02b      	b.n	800c276 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	015a      	lsls	r2, r3, #5
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	4413      	add	r3, r2
 800c226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	db12      	blt.n	800c256 <USB_EPSetStall+0xae>
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00f      	beq.n	800c256 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	0151      	lsls	r1, r2, #5
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	440a      	add	r2, r1
 800c24c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c250:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c254:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	0151      	lsls	r1, r2, #5
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	440a      	add	r2, r1
 800c26c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c274:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3714      	adds	r7, #20
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	785b      	ldrb	r3, [r3, #1]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d128      	bne.n	800c2f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	015a      	lsls	r2, r3, #5
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	0151      	lsls	r1, r2, #5
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	440a      	add	r2, r1
 800c2b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	791b      	ldrb	r3, [r3, #4]
 800c2c4:	2b03      	cmp	r3, #3
 800c2c6:	d003      	beq.n	800c2d0 <USB_EPClearStall+0x4c>
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	791b      	ldrb	r3, [r3, #4]
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d138      	bne.n	800c342 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	015a      	lsls	r2, r3, #5
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	0151      	lsls	r1, r2, #5
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	440a      	add	r2, r1
 800c2e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2ee:	6013      	str	r3, [r2, #0]
 800c2f0:	e027      	b.n	800c342 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	0151      	lsls	r1, r2, #5
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	440a      	add	r2, r1
 800c308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c30c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c310:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	791b      	ldrb	r3, [r3, #4]
 800c316:	2b03      	cmp	r3, #3
 800c318:	d003      	beq.n	800c322 <USB_EPClearStall+0x9e>
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	791b      	ldrb	r3, [r3, #4]
 800c31e:	2b02      	cmp	r3, #2
 800c320:	d10f      	bne.n	800c342 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	015a      	lsls	r2, r3, #5
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	4413      	add	r3, r2
 800c32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	0151      	lsls	r1, r2, #5
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	440a      	add	r2, r1
 800c338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c33c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c340:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	460b      	mov	r3, r1
 800c35a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c36e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c372:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	78fb      	ldrb	r3, [r7, #3]
 800c37e:	011b      	lsls	r3, r3, #4
 800c380:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c384:	68f9      	ldr	r1, [r7, #12]
 800c386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c38a:	4313      	orrs	r3, r2
 800c38c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3714      	adds	r7, #20
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c3b6:	f023 0303 	bic.w	r3, r3, #3
 800c3ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3ca:	f023 0302 	bic.w	r3, r3, #2
 800c3ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b085      	sub	sp, #20
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c3f8:	f023 0303 	bic.w	r3, r3, #3
 800c3fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c40c:	f043 0302 	orr.w	r3, r3, #2
 800c410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	4013      	ands	r3, r2
 800c436:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c438:	68fb      	ldr	r3, [r7, #12]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c446:	b480      	push	{r7}
 800c448:	b085      	sub	sp, #20
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c462:	69db      	ldr	r3, [r3, #28]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	4013      	ands	r3, r2
 800c468:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	0c1b      	lsrs	r3, r3, #16
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b085      	sub	sp, #20
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c48c:	699b      	ldr	r3, [r3, #24]
 800c48e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c496:	69db      	ldr	r3, [r3, #28]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	4013      	ands	r3, r2
 800c49c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	b29b      	uxth	r3, r3
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b085      	sub	sp, #20
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c4be:	78fb      	ldrb	r3, [r7, #3]
 800c4c0:	015a      	lsls	r2, r3, #5
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4d4:	695b      	ldr	r3, [r3, #20]
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	4013      	ands	r3, r2
 800c4da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c4dc:	68bb      	ldr	r3, [r7, #8]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c4ea:	b480      	push	{r7}
 800c4ec:	b087      	sub	sp, #28
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c50c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c50e:	78fb      	ldrb	r3, [r7, #3]
 800c510:	f003 030f 	and.w	r3, r3, #15
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	fa22 f303 	lsr.w	r3, r2, r3
 800c51a:	01db      	lsls	r3, r3, #7
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	693a      	ldr	r2, [r7, #16]
 800c520:	4313      	orrs	r3, r2
 800c522:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c524:	78fb      	ldrb	r3, [r7, #3]
 800c526:	015a      	lsls	r2, r3, #5
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	4413      	add	r3, r2
 800c52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	693a      	ldr	r2, [r7, #16]
 800c534:	4013      	ands	r3, r2
 800c536:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c538:	68bb      	ldr	r3, [r7, #8]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	371c      	adds	r7, #28
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr

0800c546 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c546:	b480      	push	{r7}
 800c548:	b083      	sub	sp, #12
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	695b      	ldr	r3, [r3, #20]
 800c552:	f003 0301 	and.w	r3, r3, #1
}
 800c556:	4618      	mov	r0, r3
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
	...

0800c564 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c57e:	4619      	mov	r1, r3
 800c580:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <USB_ActivateSetup+0x44>)
 800c582:	4013      	ands	r3, r2
 800c584:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	fffff800 	.word	0xfffff800

0800c5ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b087      	sub	sp, #28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	333c      	adds	r3, #60	; 0x3c
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	4a26      	ldr	r2, [pc, #152]	; (800c664 <USB_EP0_OutStart+0xb8>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d90a      	bls.n	800c5e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5e0:	d101      	bne.n	800c5e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	e037      	b.n	800c656 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	697a      	ldr	r2, [r7, #20]
 800c610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c614:	f043 0318 	orr.w	r3, r3, #24
 800c618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c620:	691b      	ldr	r3, [r3, #16]
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c628:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c62c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c62e:	7afb      	ldrb	r3, [r7, #11]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d10f      	bne.n	800c654 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c63a:	461a      	mov	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c64e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	371c      	adds	r7, #28
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	4f54300a 	.word	0x4f54300a

0800c668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c670:	2300      	movs	r3, #0
 800c672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	3301      	adds	r3, #1
 800c678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	4a13      	ldr	r2, [pc, #76]	; (800c6cc <USB_CoreReset+0x64>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d901      	bls.n	800c686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c682:	2303      	movs	r3, #3
 800c684:	e01b      	b.n	800c6be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	691b      	ldr	r3, [r3, #16]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	daf2      	bge.n	800c674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c68e:	2300      	movs	r3, #0
 800c690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	f043 0201 	orr.w	r2, r3, #1
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	4a09      	ldr	r2, [pc, #36]	; (800c6cc <USB_CoreReset+0x64>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d901      	bls.n	800c6b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	e006      	b.n	800c6be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	691b      	ldr	r3, [r3, #16]
 800c6b4:	f003 0301 	and.w	r3, r3, #1
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d0f0      	beq.n	800c69e <USB_CoreReset+0x36>

  return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3714      	adds	r7, #20
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	00030d40 	.word	0x00030d40

0800c6d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c6d4:	4904      	ldr	r1, [pc, #16]	; (800c6e8 <MX_FATFS_Init+0x18>)
 800c6d6:	4805      	ldr	r0, [pc, #20]	; (800c6ec <MX_FATFS_Init+0x1c>)
 800c6d8:	f006 fe9e 	bl	8013418 <FATFS_LinkDriver>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	461a      	mov	r2, r3
 800c6e0:	4b03      	ldr	r3, [pc, #12]	; (800c6f0 <MX_FATFS_Init+0x20>)
 800c6e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c6e4:	bf00      	nop
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	240002f8 	.word	0x240002f8
 800c6ec:	24000010 	.word	0x24000010
 800c6f0:	240002f4 	.word	0x240002f4

0800c6f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c6f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	4603      	mov	r3, r0
 800c70c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return RES_OK;
 800c70e:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 800c710:	4618      	mov	r0, r3
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return RES_OK;
 800c726:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 800c728:	4618      	mov	r0, r3
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60b9      	str	r1, [r7, #8]
 800c73c:	607a      	str	r2, [r7, #4]
 800c73e:	603b      	str	r3, [r7, #0]
 800c740:	4603      	mov	r3, r0
 800c742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SD_ReadDisk(buff,sector,count);
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	6879      	ldr	r1, [r7, #4]
 800c748:	68b8      	ldr	r0, [r7, #8]
 800c74a:	f007 f847 	bl	80137dc <SD_ReadDisk>
    return RES_OK;
 800c74e:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60b9      	str	r1, [r7, #8]
 800c760:	607a      	str	r2, [r7, #4]
 800c762:	603b      	str	r3, [r7, #0]
 800c764:	4603      	mov	r3, r0
 800c766:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SD_WriteDisk((uint8_t*)buff,sector,count);
 800c768:	683a      	ldr	r2, [r7, #0]
 800c76a:	6879      	ldr	r1, [r7, #4]
 800c76c:	68b8      	ldr	r0, [r7, #8]
 800c76e:	f007 f86b 	bl	8013848 <SD_WriteDisk>
    return RES_OK;
 800c772:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	4603      	mov	r3, r0
 800c784:	603a      	str	r2, [r7, #0]
 800c786:	71fb      	strb	r3, [r7, #7]
 800c788:	460b      	mov	r3, r1
 800c78a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
	DRESULT res;
	switch(cmd)
 800c78c:	79bb      	ldrb	r3, [r7, #6]
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d823      	bhi.n	800c7da <USER_ioctl+0x5e>
 800c792:	a201      	add	r2, pc, #4	; (adr r2, 800c798 <USER_ioctl+0x1c>)
 800c794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c798:	0800c7a9 	.word	0x0800c7a9
 800c79c:	0800c7cd 	.word	0x0800c7cd
 800c7a0:	0800c7af 	.word	0x0800c7af
 800c7a4:	0800c7bd 	.word	0x0800c7bd
	{
		case CTRL_SYNC:
			res = RES_OK;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	73fb      	strb	r3, [r7, #15]
			break;
 800c7ac:	e018      	b.n	800c7e0 <USER_ioctl+0x64>
		case GET_SECTOR_SIZE:
			*(DWORD*)buff = 512;
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7b4:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	73fb      	strb	r3, [r7, #15]
			break;
 800c7ba:	e011      	b.n	800c7e0 <USER_ioctl+0x64>
		case GET_BLOCK_SIZE:
			*(WORD*)buff = SDCardInfo.LogBlockSize;
 800c7bc:	4b0c      	ldr	r3, [pc, #48]	; (800c7f0 <USER_ioctl+0x74>)
 800c7be:	69db      	ldr	r3, [r3, #28]
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	73fb      	strb	r3, [r7, #15]
			break;
 800c7ca:	e009      	b.n	800c7e0 <USER_ioctl+0x64>
		case GET_SECTOR_COUNT:
			*(DWORD*)buff = SDCardInfo.LogBlockNbr;
 800c7cc:	4b08      	ldr	r3, [pc, #32]	; (800c7f0 <USER_ioctl+0x74>)
 800c7ce:	699a      	ldr	r2, [r3, #24]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	73fb      	strb	r3, [r7, #15]
			break;
 800c7d8:	e002      	b.n	800c7e0 <USER_ioctl+0x64>
		default:
			res = RES_PARERR;
 800c7da:	2304      	movs	r3, #4
 800c7dc:	73fb      	strb	r3, [r7, #15]
			break;
 800c7de:	bf00      	nop
	}

    return res;
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3714      	adds	r7, #20
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr
 800c7ee:	bf00      	nop
 800c7f0:	24000804 	.word	0x24000804

0800c7f4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800c800:	f248 0074 	movw	r0, #32884	; 0x8074
 800c804:	f008 f8bc 	bl	8014980 <USBD_static_malloc>
 800c808:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d109      	bne.n	800c824 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	32b0      	adds	r2, #176	; 0xb0
 800c81a:	2100      	movs	r1, #0
 800c81c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c820:	2302      	movs	r3, #2
 800c822:	e06e      	b.n	800c902 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	32b0      	adds	r2, #176	; 0xb0
 800c82e:	68f9      	ldr	r1, [r7, #12]
 800c830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	32b0      	adds	r2, #176	; 0xb0
 800c83e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7c1b      	ldrb	r3, [r3, #16]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d12b      	bne.n	800c8a8 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800c850:	4b2e      	ldr	r3, [pc, #184]	; (800c90c <USBD_MSC_Init+0x118>)
 800c852:	7819      	ldrb	r1, [r3, #0]
 800c854:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c858:	2202      	movs	r2, #2
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f007 ff4d 	bl	80146fa <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800c860:	4b2a      	ldr	r3, [pc, #168]	; (800c90c <USBD_MSC_Init+0x118>)
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	f003 020f 	and.w	r2, r3, #15
 800c868:	6879      	ldr	r1, [r7, #4]
 800c86a:	4613      	mov	r3, r2
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4413      	add	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	440b      	add	r3, r1
 800c874:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c878:	2201      	movs	r2, #1
 800c87a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800c87c:	4b24      	ldr	r3, [pc, #144]	; (800c910 <USBD_MSC_Init+0x11c>)
 800c87e:	7819      	ldrb	r1, [r3, #0]
 800c880:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c884:	2202      	movs	r2, #2
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f007 ff37 	bl	80146fa <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800c88c:	4b20      	ldr	r3, [pc, #128]	; (800c910 <USBD_MSC_Init+0x11c>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	f003 020f 	and.w	r2, r3, #15
 800c894:	6879      	ldr	r1, [r7, #4]
 800c896:	4613      	mov	r3, r2
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	4413      	add	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	440b      	add	r3, r1
 800c8a0:	3324      	adds	r3, #36	; 0x24
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	801a      	strh	r2, [r3, #0]
 800c8a6:	e028      	b.n	800c8fa <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800c8a8:	4b18      	ldr	r3, [pc, #96]	; (800c90c <USBD_MSC_Init+0x118>)
 800c8aa:	7819      	ldrb	r1, [r3, #0]
 800c8ac:	2340      	movs	r3, #64	; 0x40
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f007 ff22 	bl	80146fa <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800c8b6:	4b15      	ldr	r3, [pc, #84]	; (800c90c <USBD_MSC_Init+0x118>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	f003 020f 	and.w	r2, r3, #15
 800c8be:	6879      	ldr	r1, [r7, #4]
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	440b      	add	r3, r1
 800c8ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800c8d2:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <USBD_MSC_Init+0x11c>)
 800c8d4:	7819      	ldrb	r1, [r3, #0]
 800c8d6:	2340      	movs	r3, #64	; 0x40
 800c8d8:	2202      	movs	r2, #2
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f007 ff0d 	bl	80146fa <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800c8e0:	4b0b      	ldr	r3, [pc, #44]	; (800c910 <USBD_MSC_Init+0x11c>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	f003 020f 	and.w	r2, r3, #15
 800c8e8:	6879      	ldr	r1, [r7, #4]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	440b      	add	r3, r1
 800c8f4:	3324      	adds	r3, #36	; 0x24
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fa2c 	bl	800cd58 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	24000087 	.word	0x24000087
 800c910:	24000086 	.word	0x24000086

0800c914 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	460b      	mov	r3, r1
 800c91e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800c920:	4b26      	ldr	r3, [pc, #152]	; (800c9bc <USBD_MSC_DeInit+0xa8>)
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f007 ff0d 	bl	8014746 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800c92c:	4b23      	ldr	r3, [pc, #140]	; (800c9bc <USBD_MSC_DeInit+0xa8>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	f003 020f 	and.w	r2, r3, #15
 800c934:	6879      	ldr	r1, [r7, #4]
 800c936:	4613      	mov	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	4413      	add	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	440b      	add	r3, r1
 800c940:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c944:	2200      	movs	r2, #0
 800c946:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800c948:	4b1d      	ldr	r3, [pc, #116]	; (800c9c0 <USBD_MSC_DeInit+0xac>)
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	4619      	mov	r1, r3
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f007 fef9 	bl	8014746 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800c954:	4b1a      	ldr	r3, [pc, #104]	; (800c9c0 <USBD_MSC_DeInit+0xac>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	f003 020f 	and.w	r2, r3, #15
 800c95c:	6879      	ldr	r1, [r7, #4]
 800c95e:	4613      	mov	r3, r2
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	4413      	add	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	440b      	add	r3, r1
 800c968:	3324      	adds	r3, #36	; 0x24
 800c96a:	2200      	movs	r2, #0
 800c96c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	32b0      	adds	r2, #176	; 0xb0
 800c978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d018      	beq.n	800c9b2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fa6f 	bl	800ce64 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	32b0      	adds	r2, #176	; 0xb0
 800c990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c994:	4618      	mov	r0, r3
 800c996:	f008 f801 	bl	801499c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	32b0      	adds	r2, #176	; 0xb0
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c9b2:	2300      	movs	r3, #0
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	24000087 	.word	0x24000087
 800c9c0:	24000086 	.word	0x24000086

0800c9c4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	32b0      	adds	r2, #176	; 0xb0
 800c9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9dc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d101      	bne.n	800c9f0 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	e0e1      	b.n	800cbb4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d053      	beq.n	800caa4 <USBD_MSC_Setup+0xe0>
 800c9fc:	2b20      	cmp	r3, #32
 800c9fe:	f040 80d1 	bne.w	800cba4 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	785b      	ldrb	r3, [r3, #1]
 800ca06:	2bfe      	cmp	r3, #254	; 0xfe
 800ca08:	d002      	beq.n	800ca10 <USBD_MSC_Setup+0x4c>
 800ca0a:	2bff      	cmp	r3, #255	; 0xff
 800ca0c:	d02a      	beq.n	800ca64 <USBD_MSC_Setup+0xa0>
 800ca0e:	e041      	b.n	800ca94 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	885b      	ldrh	r3, [r3, #2]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d11e      	bne.n	800ca56 <USBD_MSC_Setup+0x92>
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	88db      	ldrh	r3, [r3, #6]
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d11a      	bne.n	800ca56 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	da15      	bge.n	800ca56 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	33b0      	adds	r3, #176	; 0xb0
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4413      	add	r3, r2
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	4798      	blx	r3
 800ca3e:	4603      	mov	r3, r0
 800ca40:	461a      	mov	r2, r3
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f003 fa15 	bl	800fe7c <USBD_CtlSendData>
 800ca52:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca54:	e025      	b.n	800caa2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f003 f99e 	bl	800fd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	75fb      	strb	r3, [r7, #23]
          break;
 800ca62:	e01e      	b.n	800caa2 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	885b      	ldrh	r3, [r3, #2]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10c      	bne.n	800ca86 <USBD_MSC_Setup+0xc2>
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	88db      	ldrh	r3, [r3, #6]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d108      	bne.n	800ca86 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	db03      	blt.n	800ca86 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f9bc 	bl	800cdfc <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca84:	e00d      	b.n	800caa2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f003 f986 	bl	800fd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	75fb      	strb	r3, [r7, #23]
          break;
 800ca92:	e006      	b.n	800caa2 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800ca94:	6839      	ldr	r1, [r7, #0]
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f003 f97f 	bl	800fd9a <USBD_CtlError>
          ret = USBD_FAIL;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	75fb      	strb	r3, [r7, #23]
          break;
 800caa0:	bf00      	nop
      }
      break;
 800caa2:	e086      	b.n	800cbb2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	785b      	ldrb	r3, [r3, #1]
 800caa8:	2b0b      	cmp	r3, #11
 800caaa:	d872      	bhi.n	800cb92 <USBD_MSC_Setup+0x1ce>
 800caac:	a201      	add	r2, pc, #4	; (adr r2, 800cab4 <USBD_MSC_Setup+0xf0>)
 800caae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab2:	bf00      	nop
 800cab4:	0800cae5 	.word	0x0800cae5
 800cab8:	0800cb61 	.word	0x0800cb61
 800cabc:	0800cb93 	.word	0x0800cb93
 800cac0:	0800cb93 	.word	0x0800cb93
 800cac4:	0800cb93 	.word	0x0800cb93
 800cac8:	0800cb93 	.word	0x0800cb93
 800cacc:	0800cb93 	.word	0x0800cb93
 800cad0:	0800cb93 	.word	0x0800cb93
 800cad4:	0800cb93 	.word	0x0800cb93
 800cad8:	0800cb93 	.word	0x0800cb93
 800cadc:	0800cb0f 	.word	0x0800cb0f
 800cae0:	0800cb39 	.word	0x0800cb39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b03      	cmp	r3, #3
 800caee:	d107      	bne.n	800cb00 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800caf0:	f107 030e 	add.w	r3, r7, #14
 800caf4:	2202      	movs	r2, #2
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f003 f9bf 	bl	800fe7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cafe:	e050      	b.n	800cba2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800cb00:	6839      	ldr	r1, [r7, #0]
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f003 f949 	bl	800fd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800cb08:	2303      	movs	r3, #3
 800cb0a:	75fb      	strb	r3, [r7, #23]
          break;
 800cb0c:	e049      	b.n	800cba2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	2b03      	cmp	r3, #3
 800cb18:	d107      	bne.n	800cb2a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	2201      	movs	r2, #1
 800cb20:	4619      	mov	r1, r3
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f003 f9aa 	bl	800fe7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb28:	e03b      	b.n	800cba2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f003 f934 	bl	800fd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800cb32:	2303      	movs	r3, #3
 800cb34:	75fb      	strb	r3, [r7, #23]
          break;
 800cb36:	e034      	b.n	800cba2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	d106      	bne.n	800cb52 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	885b      	ldrh	r3, [r3, #2]
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb50:	e027      	b.n	800cba2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800cb52:	6839      	ldr	r1, [r7, #0]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f003 f920 	bl	800fd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	75fb      	strb	r3, [r7, #23]
          break;
 800cb5e:	e020      	b.n	800cba2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	2b03      	cmp	r3, #3
 800cb6a:	d119      	bne.n	800cba0 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	885b      	ldrh	r3, [r3, #2]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d115      	bne.n	800cba0 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	889b      	ldrh	r3, [r3, #4]
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f007 fe01 	bl	8014784 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	889b      	ldrh	r3, [r3, #4]
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fb54 	bl	800d238 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800cb90:	e006      	b.n	800cba0 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f003 f900 	bl	800fd9a <USBD_CtlError>
          ret = USBD_FAIL;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	75fb      	strb	r3, [r7, #23]
          break;
 800cb9e:	e000      	b.n	800cba2 <USBD_MSC_Setup+0x1de>
          break;
 800cba0:	bf00      	nop
      }
      break;
 800cba2:	e006      	b.n	800cbb2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800cba4:	6839      	ldr	r1, [r7, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f003 f8f7 	bl	800fd9a <USBD_CtlError>
      ret = USBD_FAIL;
 800cbac:	2303      	movs	r3, #3
 800cbae:	75fb      	strb	r3, [r7, #23]
      break;
 800cbb0:	bf00      	nop
  }

  return (uint8_t)ret;
 800cbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800cbc8:	78fb      	ldrb	r3, [r7, #3]
 800cbca:	4619      	mov	r1, r3
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 f961 	bl	800ce94 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3708      	adds	r7, #8
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800cbe8:	78fb      	ldrb	r3, [r7, #3]
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f98d 	bl	800cf0c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800cc04:	2181      	movs	r1, #129	; 0x81
 800cc06:	4812      	ldr	r0, [pc, #72]	; (800cc50 <USBD_MSC_GetHSCfgDesc+0x54>)
 800cc08:	f002 fa64 	bl	800f0d4 <USBD_GetEpDesc>
 800cc0c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800cc0e:	2101      	movs	r1, #1
 800cc10:	480f      	ldr	r0, [pc, #60]	; (800cc50 <USBD_MSC_GetHSCfgDesc+0x54>)
 800cc12:	f002 fa5f 	bl	800f0d4 <USBD_GetEpDesc>
 800cc16:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d006      	beq.n	800cc2c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	711a      	strb	r2, [r3, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f042 0202 	orr.w	r2, r2, #2
 800cc2a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d006      	beq.n	800cc40 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	2200      	movs	r2, #0
 800cc36:	711a      	strb	r2, [r3, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f042 0202 	orr.w	r2, r2, #2
 800cc3e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2220      	movs	r2, #32
 800cc44:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800cc46:	4b02      	ldr	r3, [pc, #8]	; (800cc50 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	2400005c 	.word	0x2400005c

0800cc54 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800cc5c:	2181      	movs	r1, #129	; 0x81
 800cc5e:	4812      	ldr	r0, [pc, #72]	; (800cca8 <USBD_MSC_GetFSCfgDesc+0x54>)
 800cc60:	f002 fa38 	bl	800f0d4 <USBD_GetEpDesc>
 800cc64:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800cc66:	2101      	movs	r1, #1
 800cc68:	480f      	ldr	r0, [pc, #60]	; (800cca8 <USBD_MSC_GetFSCfgDesc+0x54>)
 800cc6a:	f002 fa33 	bl	800f0d4 <USBD_GetEpDesc>
 800cc6e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d006      	beq.n	800cc84 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc7e:	711a      	strb	r2, [r3, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d006      	beq.n	800cc98 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc92:	711a      	strb	r2, [r3, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2220      	movs	r2, #32
 800cc9c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800cc9e:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	2400005c 	.word	0x2400005c

0800ccac <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ccb4:	2181      	movs	r1, #129	; 0x81
 800ccb6:	4812      	ldr	r0, [pc, #72]	; (800cd00 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800ccb8:	f002 fa0c 	bl	800f0d4 <USBD_GetEpDesc>
 800ccbc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800ccbe:	2101      	movs	r1, #1
 800ccc0:	480f      	ldr	r0, [pc, #60]	; (800cd00 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800ccc2:	f002 fa07 	bl	800f0d4 <USBD_GetEpDesc>
 800ccc6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d006      	beq.n	800ccdc <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccd6:	711a      	strb	r2, [r3, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d006      	beq.n	800ccf0 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccea:	711a      	strb	r2, [r3, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2220      	movs	r2, #32
 800ccf4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800ccf6:	4b02      	ldr	r3, [pc, #8]	; (800cd00 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	2400005c 	.word	0x2400005c

0800cd04 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	220a      	movs	r2, #10
 800cd10:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800cd12:	4b03      	ldr	r3, [pc, #12]	; (800cd20 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	2400007c 	.word	0x2400007c

0800cd24 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d101      	bne.n	800cd38 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd34:	2303      	movs	r3, #3
 800cd36:	e009      	b.n	800cd4c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	33b0      	adds	r3, #176	; 0xb0
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	4413      	add	r3, r2
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	32b0      	adds	r2, #176	; 0xb0
 800cd6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd6e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d039      	beq.n	800cdea <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cd94:	2200      	movs	r2, #0
 800cd96:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	33b0      	adds	r3, #176	; 0xb0
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4413      	add	r3, r2
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2000      	movs	r0, #0
 800cdba:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800cdbc:	4b0d      	ldr	r3, [pc, #52]	; (800cdf4 <MSC_BOT_Init+0x9c>)
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f007 fcde 	bl	8014784 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800cdc8:	4b0b      	ldr	r3, [pc, #44]	; (800cdf8 <MSC_BOT_Init+0xa0>)
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	4619      	mov	r1, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f007 fcd8 	bl	8014784 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800cdd4:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <MSC_BOT_Init+0x9c>)
 800cdd6:	7819      	ldrb	r1, [r3, #0]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f248 0210 	movw	r2, #32784	; 0x8010
 800cdde:	441a      	add	r2, r3
 800cde0:	231f      	movs	r3, #31
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f007 fd97 	bl	8014916 <USBD_LL_PrepareReceive>
 800cde8:	e000      	b.n	800cdec <MSC_BOT_Init+0x94>
    return;
 800cdea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	24000087 	.word	0x24000087
 800cdf8:	24000086 	.word	0x24000086

0800cdfc <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	32b0      	adds	r2, #176	; 0xb0
 800ce0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce12:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d01c      	beq.n	800ce54 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2201      	movs	r2, #1
 800ce24:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800ce26:	4b0d      	ldr	r3, [pc, #52]	; (800ce5c <MSC_BOT_Reset+0x60>)
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f007 fce7 	bl	8014800 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800ce32:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <MSC_BOT_Reset+0x64>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f007 fce1 	bl	8014800 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ce3e:	4b08      	ldr	r3, [pc, #32]	; (800ce60 <MSC_BOT_Reset+0x64>)
 800ce40:	7819      	ldrb	r1, [r3, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f248 0210 	movw	r2, #32784	; 0x8010
 800ce48:	441a      	add	r2, r3
 800ce4a:	231f      	movs	r3, #31
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f007 fd62 	bl	8014916 <USBD_LL_PrepareReceive>
 800ce52:	e000      	b.n	800ce56 <MSC_BOT_Reset+0x5a>
    return;
 800ce54:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800ce56:	3710      	adds	r7, #16
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	24000086 	.word	0x24000086
 800ce60:	24000087 	.word	0x24000087

0800ce64 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	32b0      	adds	r2, #176	; 0xb0
 800ce76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce7a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	721a      	strb	r2, [r3, #8]
  }
}
 800ce88:	bf00      	nop
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	32b0      	adds	r2, #176	; 0xb0
 800ceaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d022      	beq.n	800cefc <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	7a1b      	ldrb	r3, [r3, #8]
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d005      	beq.n	800ceca <MSC_BOT_DataIn+0x36>
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	db1e      	blt.n	800cf00 <MSC_BOT_DataIn+0x6c>
 800cec2:	3b03      	subs	r3, #3
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d81b      	bhi.n	800cf00 <MSC_BOT_DataIn+0x6c>
 800cec8:	e013      	b.n	800cef2 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ced0:	7f59      	ldrb	r1, [r3, #29]
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	f248 031f 	movw	r3, #32799	; 0x801f
 800ced8:	4413      	add	r3, r2
 800ceda:	461a      	mov	r2, r3
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 f9e5 	bl	800d2ac <SCSI_ProcessCmd>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	da0d      	bge.n	800cf04 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800cee8:	2101      	movs	r1, #1
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 f920 	bl	800d130 <MSC_BOT_SendCSW>
      }
      break;
 800cef0:	e008      	b.n	800cf04 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800cef2:	2100      	movs	r1, #0
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 f91b 	bl	800d130 <MSC_BOT_SendCSW>
      break;
 800cefa:	e004      	b.n	800cf06 <MSC_BOT_DataIn+0x72>
    return;
 800cefc:	bf00      	nop
 800cefe:	e002      	b.n	800cf06 <MSC_BOT_DataIn+0x72>

    default:
      break;
 800cf00:	bf00      	nop
 800cf02:	e000      	b.n	800cf06 <MSC_BOT_DataIn+0x72>
      break;
 800cf04:	bf00      	nop
  }
}
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	460b      	mov	r3, r1
 800cf16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	32b0      	adds	r2, #176	; 0xb0
 800cf22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf26:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d01e      	beq.n	800cf6c <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	7a1b      	ldrb	r3, [r3, #8]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d002      	beq.n	800cf3c <MSC_BOT_DataOut+0x30>
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d004      	beq.n	800cf44 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800cf3a:	e01a      	b.n	800cf72 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f81b 	bl	800cf78 <MSC_BOT_CBW_Decode>
      break;
 800cf42:	e016      	b.n	800cf72 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cf4a:	7f59      	ldrb	r1, [r3, #29]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	f248 031f 	movw	r3, #32799	; 0x801f
 800cf52:	4413      	add	r3, r2
 800cf54:	461a      	mov	r2, r3
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 f9a8 	bl	800d2ac <SCSI_ProcessCmd>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	da06      	bge.n	800cf70 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800cf62:	2101      	movs	r1, #1
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f8e3 	bl	800d130 <MSC_BOT_SendCSW>
      break;
 800cf6a:	e001      	b.n	800cf70 <MSC_BOT_DataOut+0x64>
    return;
 800cf6c:	bf00      	nop
 800cf6e:	e000      	b.n	800cf72 <MSC_BOT_DataOut+0x66>
      break;
 800cf70:	bf00      	nop
  }
}
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	32b0      	adds	r2, #176	; 0xb0
 800cf8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf8e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f000 8085 	beq.w	800d0a2 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cf9e:	695b      	ldr	r3, [r3, #20]
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800cfa6:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfae:	699b      	ldr	r3, [r3, #24]
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800cfb6:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800cfb8:	4b3d      	ldr	r3, [pc, #244]	; (800d0b0 <MSC_BOT_CBW_Decode+0x138>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f007 fcca 	bl	8014958 <USBD_LL_GetRxDataSize>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b1f      	cmp	r3, #31
 800cfc8:	d118      	bne.n	800cffc <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfd0:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800cfd2:	4a38      	ldr	r2, [pc, #224]	; (800d0b4 <MSC_BOT_CBW_Decode+0x13c>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d111      	bne.n	800cffc <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfde:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d80b      	bhi.n	800cffc <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfea:	7f9b      	ldrb	r3, [r3, #30]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d005      	beq.n	800cffc <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cff6:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800cff8:	2b10      	cmp	r3, #16
 800cffa:	d90f      	bls.n	800d01c <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d002:	7f59      	ldrb	r1, [r3, #29]
 800d004:	2320      	movs	r3, #32
 800d006:	2205      	movs	r2, #5
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fe80 	bl	800dd0e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2202      	movs	r2, #2
 800d012:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 f8cb 	bl	800d1b0 <MSC_BOT_Abort>
 800d01a:	e045      	b.n	800d0a8 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d022:	7f59      	ldrb	r1, [r3, #29]
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	f248 031f 	movw	r3, #32799	; 0x801f
 800d02a:	4413      	add	r3, r2
 800d02c:	461a      	mov	r2, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 f93c 	bl	800d2ac <SCSI_ProcessCmd>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	da0c      	bge.n	800d054 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	7a1b      	ldrb	r3, [r3, #8]
 800d03e:	2b05      	cmp	r3, #5
 800d040:	d104      	bne.n	800d04c <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d042:	2101      	movs	r1, #1
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f873 	bl	800d130 <MSC_BOT_SendCSW>
 800d04a:	e02d      	b.n	800d0a8 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f8af 	bl	800d1b0 <MSC_BOT_Abort>
 800d052:	e029      	b.n	800d0a8 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	7a1b      	ldrb	r3, [r3, #8]
 800d058:	2b02      	cmp	r3, #2
 800d05a:	d024      	beq.n	800d0a6 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d060:	2b01      	cmp	r3, #1
 800d062:	d020      	beq.n	800d0a6 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d068:	2b03      	cmp	r3, #3
 800d06a:	d01c      	beq.n	800d0a6 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d009      	beq.n	800d088 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f103 0110 	add.w	r1, r3, #16
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	461a      	mov	r2, r3
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f819 	bl	800d0b8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d086:	e00f      	b.n	800d0a8 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d104      	bne.n	800d09a <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d090:	2100      	movs	r1, #0
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f84c 	bl	800d130 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d098:	e006      	b.n	800d0a8 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f888 	bl	800d1b0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d0a0:	e002      	b.n	800d0a8 <MSC_BOT_CBW_Decode+0x130>
    return;
 800d0a2:	bf00      	nop
 800d0a4:	e000      	b.n	800d0a8 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 800d0a6:	bf00      	nop
    }
  }
}
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	24000087 	.word	0x24000087
 800d0b4:	43425355 	.word	0x43425355

0800d0b8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	32b0      	adds	r2, #176	; 0xb0
 800d0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0d2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d023      	beq.n	800d122 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d0e0:	699b      	ldr	r3, [r3, #24]
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	bf28      	it	cs
 800d0e8:	4613      	movcs	r3, r2
 800d0ea:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d0f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	697a      	ldr	r2, [r7, #20]
 800d0fa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800d0fe:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d106:	2200      	movs	r2, #0
 800d108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	2204      	movs	r2, #4
 800d110:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800d112:	4b06      	ldr	r3, [pc, #24]	; (800d12c <MSC_BOT_SendData+0x74>)
 800d114:	7819      	ldrb	r1, [r3, #0]
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	68ba      	ldr	r2, [r7, #8]
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f007 fbda 	bl	80148d4 <USBD_LL_Transmit>
 800d120:	e000      	b.n	800d124 <MSC_BOT_SendData+0x6c>
    return;
 800d122:	bf00      	nop
}
 800d124:	3718      	adds	r7, #24
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	24000086 	.word	0x24000086

0800d130 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	460b      	mov	r3, r1
 800d13a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	32b0      	adds	r2, #176	; 0xb0
 800d146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d14a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d024      	beq.n	800d19c <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d158:	461a      	mov	r2, r3
 800d15a:	4b12      	ldr	r3, [pc, #72]	; (800d1a4 <MSC_BOT_SendCSW+0x74>)
 800d15c:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d164:	461a      	mov	r2, r3
 800d166:	78fb      	ldrb	r3, [r7, #3]
 800d168:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2200      	movs	r2, #0
 800d170:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800d172:	4b0d      	ldr	r3, [pc, #52]	; (800d1a8 <MSC_BOT_SendCSW+0x78>)
 800d174:	7819      	ldrb	r1, [r3, #0]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f248 0230 	movw	r2, #32816	; 0x8030
 800d17c:	441a      	add	r2, r3
 800d17e:	230d      	movs	r3, #13
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f007 fba7 	bl	80148d4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800d186:	4b09      	ldr	r3, [pc, #36]	; (800d1ac <MSC_BOT_SendCSW+0x7c>)
 800d188:	7819      	ldrb	r1, [r3, #0]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f248 0210 	movw	r2, #32784	; 0x8010
 800d190:	441a      	add	r2, r3
 800d192:	231f      	movs	r3, #31
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f007 fbbe 	bl	8014916 <USBD_LL_PrepareReceive>
 800d19a:	e000      	b.n	800d19e <MSC_BOT_SendCSW+0x6e>
    return;
 800d19c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	53425355 	.word	0x53425355
 800d1a8:	24000086 	.word	0x24000086
 800d1ac:	24000087 	.word	0x24000087

0800d1b0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	32b0      	adds	r2, #176	; 0xb0
 800d1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1c6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d02c      	beq.n	800d228 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d1d4:	7f1b      	ldrb	r3, [r3, #28]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10f      	bne.n	800d1fa <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d1e0:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d009      	beq.n	800d1fa <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d105      	bne.n	800d1fa <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800d1ee:	4b10      	ldr	r3, [pc, #64]	; (800d230 <MSC_BOT_Abort+0x80>)
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f007 fae4 	bl	80147c2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800d1fa:	4b0e      	ldr	r3, [pc, #56]	; (800d234 <MSC_BOT_Abort+0x84>)
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	4619      	mov	r1, r3
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f007 fade 	bl	80147c2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	7a5b      	ldrb	r3, [r3, #9]
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d10d      	bne.n	800d22a <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800d20e:	4b09      	ldr	r3, [pc, #36]	; (800d234 <MSC_BOT_Abort+0x84>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f007 fad4 	bl	80147c2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800d21a:	4b05      	ldr	r3, [pc, #20]	; (800d230 <MSC_BOT_Abort+0x80>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	4619      	mov	r1, r3
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f007 face 	bl	80147c2 <USBD_LL_StallEP>
 800d226:	e000      	b.n	800d22a <MSC_BOT_Abort+0x7a>
    return;
 800d228:	bf00      	nop
  }
}
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	24000087 	.word	0x24000087
 800d234:	24000086 	.word	0x24000086

0800d238 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	32b0      	adds	r2, #176	; 0xb0
 800d24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d252:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d01d      	beq.n	800d296 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	7a5b      	ldrb	r3, [r3, #9]
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d10c      	bne.n	800d27c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800d262:	4b10      	ldr	r3, [pc, #64]	; (800d2a4 <MSC_BOT_CplClrFeature+0x6c>)
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f007 faaa 	bl	80147c2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800d26e:	4b0e      	ldr	r3, [pc, #56]	; (800d2a8 <MSC_BOT_CplClrFeature+0x70>)
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f007 faa4 	bl	80147c2 <USBD_LL_StallEP>
 800d27a:	e00f      	b.n	800d29c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d27c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d280:	2b00      	cmp	r3, #0
 800d282:	da0a      	bge.n	800d29a <MSC_BOT_CplClrFeature+0x62>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	7a5b      	ldrb	r3, [r3, #9]
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d006      	beq.n	800d29a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d28c:	2101      	movs	r1, #1
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7ff ff4e 	bl	800d130 <MSC_BOT_SendCSW>
 800d294:	e002      	b.n	800d29c <MSC_BOT_CplClrFeature+0x64>
    return;
 800d296:	bf00      	nop
 800d298:	e000      	b.n	800d29c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800d29a:	bf00      	nop
  }
}
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	24000086 	.word	0x24000086
 800d2a8:	24000087 	.word	0x24000087

0800d2ac <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	607a      	str	r2, [r7, #4]
 800d2b8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	32b0      	adds	r2, #176	; 0xb0
 800d2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d102      	bne.n	800d2d6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800d2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d4:	e168      	b.n	800d5a8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2baa      	cmp	r3, #170	; 0xaa
 800d2dc:	f000 8144 	beq.w	800d568 <SCSI_ProcessCmd+0x2bc>
 800d2e0:	2baa      	cmp	r3, #170	; 0xaa
 800d2e2:	f300 8153 	bgt.w	800d58c <SCSI_ProcessCmd+0x2e0>
 800d2e6:	2ba8      	cmp	r3, #168	; 0xa8
 800d2e8:	f000 812c 	beq.w	800d544 <SCSI_ProcessCmd+0x298>
 800d2ec:	2ba8      	cmp	r3, #168	; 0xa8
 800d2ee:	f300 814d 	bgt.w	800d58c <SCSI_ProcessCmd+0x2e0>
 800d2f2:	2b5a      	cmp	r3, #90	; 0x5a
 800d2f4:	f300 80c0 	bgt.w	800d478 <SCSI_ProcessCmd+0x1cc>
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f2c0 8147 	blt.w	800d58c <SCSI_ProcessCmd+0x2e0>
 800d2fe:	2b5a      	cmp	r3, #90	; 0x5a
 800d300:	f200 8144 	bhi.w	800d58c <SCSI_ProcessCmd+0x2e0>
 800d304:	a201      	add	r2, pc, #4	; (adr r2, 800d30c <SCSI_ProcessCmd+0x60>)
 800d306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30a:	bf00      	nop
 800d30c:	0800d47f 	.word	0x0800d47f
 800d310:	0800d58d 	.word	0x0800d58d
 800d314:	0800d58d 	.word	0x0800d58d
 800d318:	0800d491 	.word	0x0800d491
 800d31c:	0800d58d 	.word	0x0800d58d
 800d320:	0800d58d 	.word	0x0800d58d
 800d324:	0800d58d 	.word	0x0800d58d
 800d328:	0800d58d 	.word	0x0800d58d
 800d32c:	0800d58d 	.word	0x0800d58d
 800d330:	0800d58d 	.word	0x0800d58d
 800d334:	0800d58d 	.word	0x0800d58d
 800d338:	0800d58d 	.word	0x0800d58d
 800d33c:	0800d58d 	.word	0x0800d58d
 800d340:	0800d58d 	.word	0x0800d58d
 800d344:	0800d58d 	.word	0x0800d58d
 800d348:	0800d58d 	.word	0x0800d58d
 800d34c:	0800d58d 	.word	0x0800d58d
 800d350:	0800d58d 	.word	0x0800d58d
 800d354:	0800d4a3 	.word	0x0800d4a3
 800d358:	0800d58d 	.word	0x0800d58d
 800d35c:	0800d58d 	.word	0x0800d58d
 800d360:	0800d58d 	.word	0x0800d58d
 800d364:	0800d58d 	.word	0x0800d58d
 800d368:	0800d58d 	.word	0x0800d58d
 800d36c:	0800d58d 	.word	0x0800d58d
 800d370:	0800d58d 	.word	0x0800d58d
 800d374:	0800d4d9 	.word	0x0800d4d9
 800d378:	0800d4b5 	.word	0x0800d4b5
 800d37c:	0800d58d 	.word	0x0800d58d
 800d380:	0800d58d 	.word	0x0800d58d
 800d384:	0800d4c7 	.word	0x0800d4c7
 800d388:	0800d58d 	.word	0x0800d58d
 800d38c:	0800d58d 	.word	0x0800d58d
 800d390:	0800d58d 	.word	0x0800d58d
 800d394:	0800d58d 	.word	0x0800d58d
 800d398:	0800d4fd 	.word	0x0800d4fd
 800d39c:	0800d58d 	.word	0x0800d58d
 800d3a0:	0800d50f 	.word	0x0800d50f
 800d3a4:	0800d58d 	.word	0x0800d58d
 800d3a8:	0800d58d 	.word	0x0800d58d
 800d3ac:	0800d533 	.word	0x0800d533
 800d3b0:	0800d58d 	.word	0x0800d58d
 800d3b4:	0800d557 	.word	0x0800d557
 800d3b8:	0800d58d 	.word	0x0800d58d
 800d3bc:	0800d58d 	.word	0x0800d58d
 800d3c0:	0800d58d 	.word	0x0800d58d
 800d3c4:	0800d58d 	.word	0x0800d58d
 800d3c8:	0800d57b 	.word	0x0800d57b
 800d3cc:	0800d58d 	.word	0x0800d58d
 800d3d0:	0800d58d 	.word	0x0800d58d
 800d3d4:	0800d58d 	.word	0x0800d58d
 800d3d8:	0800d58d 	.word	0x0800d58d
 800d3dc:	0800d58d 	.word	0x0800d58d
 800d3e0:	0800d58d 	.word	0x0800d58d
 800d3e4:	0800d58d 	.word	0x0800d58d
 800d3e8:	0800d58d 	.word	0x0800d58d
 800d3ec:	0800d58d 	.word	0x0800d58d
 800d3f0:	0800d58d 	.word	0x0800d58d
 800d3f4:	0800d58d 	.word	0x0800d58d
 800d3f8:	0800d58d 	.word	0x0800d58d
 800d3fc:	0800d58d 	.word	0x0800d58d
 800d400:	0800d58d 	.word	0x0800d58d
 800d404:	0800d58d 	.word	0x0800d58d
 800d408:	0800d58d 	.word	0x0800d58d
 800d40c:	0800d58d 	.word	0x0800d58d
 800d410:	0800d58d 	.word	0x0800d58d
 800d414:	0800d58d 	.word	0x0800d58d
 800d418:	0800d58d 	.word	0x0800d58d
 800d41c:	0800d58d 	.word	0x0800d58d
 800d420:	0800d58d 	.word	0x0800d58d
 800d424:	0800d58d 	.word	0x0800d58d
 800d428:	0800d58d 	.word	0x0800d58d
 800d42c:	0800d58d 	.word	0x0800d58d
 800d430:	0800d58d 	.word	0x0800d58d
 800d434:	0800d58d 	.word	0x0800d58d
 800d438:	0800d58d 	.word	0x0800d58d
 800d43c:	0800d58d 	.word	0x0800d58d
 800d440:	0800d58d 	.word	0x0800d58d
 800d444:	0800d58d 	.word	0x0800d58d
 800d448:	0800d58d 	.word	0x0800d58d
 800d44c:	0800d58d 	.word	0x0800d58d
 800d450:	0800d58d 	.word	0x0800d58d
 800d454:	0800d58d 	.word	0x0800d58d
 800d458:	0800d58d 	.word	0x0800d58d
 800d45c:	0800d58d 	.word	0x0800d58d
 800d460:	0800d58d 	.word	0x0800d58d
 800d464:	0800d58d 	.word	0x0800d58d
 800d468:	0800d58d 	.word	0x0800d58d
 800d46c:	0800d58d 	.word	0x0800d58d
 800d470:	0800d58d 	.word	0x0800d58d
 800d474:	0800d4eb 	.word	0x0800d4eb
 800d478:	2b9e      	cmp	r3, #158	; 0x9e
 800d47a:	d051      	beq.n	800d520 <SCSI_ProcessCmd+0x274>
 800d47c:	e086      	b.n	800d58c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d47e:	7afb      	ldrb	r3, [r7, #11]
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	4619      	mov	r1, r3
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f000 f893 	bl	800d5b0 <SCSI_TestUnitReady>
 800d48a:	4603      	mov	r3, r0
 800d48c:	75fb      	strb	r3, [r7, #23]
      break;
 800d48e:	e089      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800d490:	7afb      	ldrb	r3, [r7, #11]
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	4619      	mov	r1, r3
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f000 fb9a 	bl	800dbd0 <SCSI_RequestSense>
 800d49c:	4603      	mov	r3, r0
 800d49e:	75fb      	strb	r3, [r7, #23]
      break;
 800d4a0:	e080      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800d4a2:	7afb      	ldrb	r3, [r7, #11]
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f000 f8df 	bl	800d66c <SCSI_Inquiry>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	75fb      	strb	r3, [r7, #23]
      break;
 800d4b2:	e077      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d4b4:	7afb      	ldrb	r3, [r7, #11]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f000 fc88 	bl	800ddd0 <SCSI_StartStopUnit>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	75fb      	strb	r3, [r7, #23]
      break;
 800d4c4:	e06e      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d4c6:	7afb      	ldrb	r3, [r7, #11]
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f000 fcdc 	bl	800de8a <SCSI_AllowPreventRemovable>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	75fb      	strb	r3, [r7, #23]
      break;
 800d4d6:	e065      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d4d8:	7afb      	ldrb	r3, [r7, #11]
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	4619      	mov	r1, r3
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f000 fb16 	bl	800db10 <SCSI_ModeSense6>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	75fb      	strb	r3, [r7, #23]
      break;
 800d4e8:	e05c      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d4ea:	7afb      	ldrb	r3, [r7, #11]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f000 fb3d 	bl	800db70 <SCSI_ModeSense10>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	75fb      	strb	r3, [r7, #23]
      break;
 800d4fa:	e053      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d4fc:	7afb      	ldrb	r3, [r7, #11]
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	4619      	mov	r1, r3
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f000 fa86 	bl	800da14 <SCSI_ReadFormatCapacity>
 800d508:	4603      	mov	r3, r0
 800d50a:	75fb      	strb	r3, [r7, #23]
      break;
 800d50c:	e04a      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d50e:	7afb      	ldrb	r3, [r7, #11]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	4619      	mov	r1, r3
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f000 f929 	bl	800d76c <SCSI_ReadCapacity10>
 800d51a:	4603      	mov	r3, r0
 800d51c:	75fb      	strb	r3, [r7, #23]
      break;
 800d51e:	e041      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d520:	7afb      	ldrb	r3, [r7, #11]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	4619      	mov	r1, r3
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 f9af 	bl	800d88a <SCSI_ReadCapacity16>
 800d52c:	4603      	mov	r3, r0
 800d52e:	75fb      	strb	r3, [r7, #23]
      break;
 800d530:	e038      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800d532:	7afb      	ldrb	r3, [r7, #11]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	4619      	mov	r1, r3
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f000 fcd7 	bl	800deec <SCSI_Read10>
 800d53e:	4603      	mov	r3, r0
 800d540:	75fb      	strb	r3, [r7, #23]
      break;
 800d542:	e02f      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800d544:	7afb      	ldrb	r3, [r7, #11]
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	4619      	mov	r1, r3
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 fd85 	bl	800e05a <SCSI_Read12>
 800d550:	4603      	mov	r3, r0
 800d552:	75fb      	strb	r3, [r7, #23]
      break;
 800d554:	e026      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800d556:	7afb      	ldrb	r3, [r7, #11]
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	4619      	mov	r1, r3
 800d55c:	68f8      	ldr	r0, [r7, #12]
 800d55e:	f000 fe3d 	bl	800e1dc <SCSI_Write10>
 800d562:	4603      	mov	r3, r0
 800d564:	75fb      	strb	r3, [r7, #23]
      break;
 800d566:	e01d      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800d568:	7afb      	ldrb	r3, [r7, #11]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	4619      	mov	r1, r3
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f000 ff18 	bl	800e3a4 <SCSI_Write12>
 800d574:	4603      	mov	r3, r0
 800d576:	75fb      	strb	r3, [r7, #23]
      break;
 800d578:	e014      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800d57a:	7afb      	ldrb	r3, [r7, #11]
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	4619      	mov	r1, r3
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f001 f803 	bl	800e58c <SCSI_Verify10>
 800d586:	4603      	mov	r3, r0
 800d588:	75fb      	strb	r3, [r7, #23]
      break;
 800d58a:	e00b      	b.n	800d5a4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d58c:	7af9      	ldrb	r1, [r7, #11]
 800d58e:	2320      	movs	r3, #32
 800d590:	2205      	movs	r2, #5
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f000 fbbb 	bl	800dd0e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	2202      	movs	r2, #2
 800d59c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800d59e:	23ff      	movs	r3, #255	; 0xff
 800d5a0:	75fb      	strb	r3, [r7, #23]
      break;
 800d5a2:	bf00      	nop
  }

  return ret;
 800d5a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3718      	adds	r7, #24
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	607a      	str	r2, [r7, #4]
 800d5bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	32b0      	adds	r2, #176	; 0xb0
 800d5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5cc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d102      	bne.n	800d5da <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800d5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d8:	e043      	b.n	800d662 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d5e0:	699b      	ldr	r3, [r3, #24]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00b      	beq.n	800d5fe <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d5ec:	7f59      	ldrb	r1, [r3, #29]
 800d5ee:	2320      	movs	r3, #32
 800d5f0:	2205      	movs	r2, #5
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f000 fb8b 	bl	800dd0e <SCSI_SenseCode>

    return -1;
 800d5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5fc:	e031      	b.n	800d662 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d604:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800d608:	2b02      	cmp	r3, #2
 800d60a:	d10b      	bne.n	800d624 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d60c:	7af9      	ldrb	r1, [r7, #11]
 800d60e:	233a      	movs	r3, #58	; 0x3a
 800d610:	2202      	movs	r2, #2
 800d612:	68f8      	ldr	r0, [r7, #12]
 800d614:	f000 fb7b 	bl	800dd0e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	2205      	movs	r2, #5
 800d61c:	721a      	strb	r2, [r3, #8]
    return -1;
 800d61e:	f04f 33ff 	mov.w	r3, #4294967295
 800d622:	e01e      	b.n	800d662 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	33b0      	adds	r3, #176	; 0xb0
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	7afa      	ldrb	r2, [r7, #11]
 800d638:	4610      	mov	r0, r2
 800d63a:	4798      	blx	r3
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00b      	beq.n	800d65a <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d642:	7af9      	ldrb	r1, [r7, #11]
 800d644:	233a      	movs	r3, #58	; 0x3a
 800d646:	2202      	movs	r2, #2
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f000 fb60 	bl	800dd0e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2205      	movs	r2, #5
 800d652:	721a      	strb	r2, [r3, #8]

    return -1;
 800d654:	f04f 33ff 	mov.w	r3, #4294967295
 800d658:	e003      	b.n	800d662 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2200      	movs	r2, #0
 800d65e:	60da      	str	r2, [r3, #12]

  return 0;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3718      	adds	r7, #24
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b088      	sub	sp, #32
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	460b      	mov	r3, r1
 800d676:	607a      	str	r2, [r7, #4]
 800d678:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	32b0      	adds	r2, #176	; 0xb0
 800d684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d688:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d102      	bne.n	800d696 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800d690:	f04f 33ff 	mov.w	r3, #4294967295
 800d694:	e062      	b.n	800d75c <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d69c:	699b      	ldr	r3, [r3, #24]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d10b      	bne.n	800d6ba <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d6a8:	7f59      	ldrb	r1, [r3, #29]
 800d6aa:	2320      	movs	r3, #32
 800d6ac:	2205      	movs	r2, #5
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f000 fb2d 	bl	800dd0e <SCSI_SenseCode>
    return -1;
 800d6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b8:	e050      	b.n	800d75c <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	f003 0301 	and.w	r3, r3, #1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d021      	beq.n	800d70c <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	3302      	adds	r3, #2
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d105      	bne.n	800d6de <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800d6d2:	2206      	movs	r2, #6
 800d6d4:	4923      	ldr	r1, [pc, #140]	; (800d764 <SCSI_Inquiry+0xf8>)
 800d6d6:	69b8      	ldr	r0, [r7, #24]
 800d6d8:	f001 f904 	bl	800e8e4 <SCSI_UpdateBotData>
 800d6dc:	e03d      	b.n	800d75a <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	3302      	adds	r3, #2
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	2b80      	cmp	r3, #128	; 0x80
 800d6e6:	d105      	bne.n	800d6f4 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800d6e8:	2208      	movs	r2, #8
 800d6ea:	491f      	ldr	r1, [pc, #124]	; (800d768 <SCSI_Inquiry+0xfc>)
 800d6ec:	69b8      	ldr	r0, [r7, #24]
 800d6ee:	f001 f8f9 	bl	800e8e4 <SCSI_UpdateBotData>
 800d6f2:	e032      	b.n	800d75a <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d6fa:	7f59      	ldrb	r1, [r3, #29]
 800d6fc:	2324      	movs	r3, #36	; 0x24
 800d6fe:	2205      	movs	r2, #5
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f000 fb04 	bl	800dd0e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800d706:	f04f 33ff 	mov.w	r3, #4294967295
 800d70a:	e027      	b.n	800d75c <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d712:	68fa      	ldr	r2, [r7, #12]
 800d714:	33b0      	adds	r3, #176	; 0xb0
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4413      	add	r3, r2
 800d71a:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800d71c:	69d9      	ldr	r1, [r3, #28]
 800d71e:	7afa      	ldrb	r2, [r7, #11]
 800d720:	4613      	mov	r3, r2
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	4413      	add	r3, r2
 800d726:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800d728:	440b      	add	r3, r1
 800d72a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	3304      	adds	r3, #4
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	b29b      	uxth	r3, r3
 800d734:	3305      	adds	r3, #5
 800d736:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	3304      	adds	r3, #4
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	b29b      	uxth	r3, r3
 800d740:	8bfa      	ldrh	r2, [r7, #30]
 800d742:	429a      	cmp	r2, r3
 800d744:	d303      	bcc.n	800d74e <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	3304      	adds	r3, #4
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800d74e:	8bfb      	ldrh	r3, [r7, #30]
 800d750:	461a      	mov	r2, r3
 800d752:	6979      	ldr	r1, [r7, #20]
 800d754:	69b8      	ldr	r0, [r7, #24]
 800d756:	f001 f8c5 	bl	800e8e4 <SCSI_UpdateBotData>
  }

  return 0;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3720      	adds	r7, #32
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	24000088 	.word	0x24000088
 800d768:	24000090 	.word	0x24000090

0800d76c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d76c:	b590      	push	{r4, r7, lr}
 800d76e:	b087      	sub	sp, #28
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	460b      	mov	r3, r1
 800d776:	607a      	str	r2, [r7, #4]
 800d778:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	32b0      	adds	r2, #176	; 0xb0
 800d784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d788:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d102      	bne.n	800d796 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800d790:	f04f 33ff 	mov.w	r3, #4294967295
 800d794:	e075      	b.n	800d882 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	33b0      	adds	r3, #176	; 0xb0
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	685c      	ldr	r4, [r3, #4]
 800d7a8:	697a      	ldr	r2, [r7, #20]
 800d7aa:	f248 0368 	movw	r3, #32872	; 0x8068
 800d7ae:	4413      	add	r3, r2
 800d7b0:	6979      	ldr	r1, [r7, #20]
 800d7b2:	f248 0264 	movw	r2, #32868	; 0x8064
 800d7b6:	440a      	add	r2, r1
 800d7b8:	7af8      	ldrb	r0, [r7, #11]
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	47a0      	blx	r4
 800d7be:	4603      	mov	r3, r0
 800d7c0:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d7c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d106      	bne.n	800d7d8 <SCSI_ReadCapacity10+0x6c>
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d7d0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d108      	bne.n	800d7ea <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d7d8:	7af9      	ldrb	r1, [r7, #11]
 800d7da:	233a      	movs	r3, #58	; 0x3a
 800d7dc:	2202      	movs	r2, #2
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f000 fa95 	bl	800dd0e <SCSI_SenseCode>
    return -1;
 800d7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7e8:	e04b      	b.n	800d882 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d7f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	0e1b      	lsrs	r3, r3, #24
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d804:	3b01      	subs	r3, #1
 800d806:	0c1b      	lsrs	r3, r3, #16
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d816:	3b01      	subs	r3, #1
 800d818:	0a1b      	lsrs	r3, r3, #8
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	3b01      	subs	r3, #1
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d838:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d83c:	161b      	asrs	r3, r3, #24
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d84a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d84e:	141b      	asrs	r3, r3, #16
 800d850:	b2da      	uxtb	r2, r3
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d85c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d860:	0a1b      	lsrs	r3, r3, #8
 800d862:	b29b      	uxth	r3, r3
 800d864:	b2da      	uxtb	r2, r3
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d870:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d874:	b2da      	uxtb	r2, r3
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	2208      	movs	r2, #8
 800d87e:	60da      	str	r2, [r3, #12]

  return 0;
 800d880:	2300      	movs	r3, #0

}
 800d882:	4618      	mov	r0, r3
 800d884:	371c      	adds	r7, #28
 800d886:	46bd      	mov	sp, r7
 800d888:	bd90      	pop	{r4, r7, pc}

0800d88a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d88a:	b590      	push	{r4, r7, lr}
 800d88c:	b089      	sub	sp, #36	; 0x24
 800d88e:	af00      	add	r7, sp, #0
 800d890:	60f8      	str	r0, [r7, #12]
 800d892:	460b      	mov	r3, r1
 800d894:	607a      	str	r2, [r7, #4]
 800d896:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	32b0      	adds	r2, #176	; 0xb0
 800d8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8a6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d102      	bne.n	800d8b4 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b2:	e0ab      	b.n	800da0c <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	33b0      	adds	r3, #176	; 0xb0
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	4413      	add	r3, r2
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	685c      	ldr	r4, [r3, #4]
 800d8c6:	69ba      	ldr	r2, [r7, #24]
 800d8c8:	f248 0368 	movw	r3, #32872	; 0x8068
 800d8cc:	4413      	add	r3, r2
 800d8ce:	69b9      	ldr	r1, [r7, #24]
 800d8d0:	f248 0264 	movw	r2, #32868	; 0x8064
 800d8d4:	440a      	add	r2, r1
 800d8d6:	7af8      	ldrb	r0, [r7, #11]
 800d8d8:	4619      	mov	r1, r3
 800d8da:	47a0      	blx	r4
 800d8dc:	4603      	mov	r3, r0
 800d8de:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d8e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d106      	bne.n	800d8f6 <SCSI_ReadCapacity16+0x6c>
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d8ee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d108      	bne.n	800d908 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d8f6:	7af9      	ldrb	r1, [r7, #11]
 800d8f8:	233a      	movs	r3, #58	; 0x3a
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f000 fa06 	bl	800dd0e <SCSI_SenseCode>
    return -1;
 800d902:	f04f 33ff 	mov.w	r3, #4294967295
 800d906:	e081      	b.n	800da0c <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	330a      	adds	r3, #10
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	330b      	adds	r3, #11
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d918:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	330c      	adds	r3, #12
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800d922:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	320d      	adds	r2, #13
 800d928:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800d92a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d930:	2300      	movs	r3, #0
 800d932:	61fb      	str	r3, [r7, #28]
 800d934:	e008      	b.n	800d948 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 800d936:	69ba      	ldr	r2, [r7, #24]
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	4413      	add	r3, r2
 800d93c:	3310      	adds	r3, #16
 800d93e:	2200      	movs	r2, #0
 800d940:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	3301      	adds	r3, #1
 800d946:	61fb      	str	r3, [r7, #28]
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	69fa      	ldr	r2, [r7, #28]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d3f1      	bcc.n	800d936 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d95a:	3b01      	subs	r3, #1
 800d95c:	0e1b      	lsrs	r3, r3, #24
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d96a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d96c:	3b01      	subs	r3, #1
 800d96e:	0c1b      	lsrs	r3, r3, #16
 800d970:	b2da      	uxtb	r2, r3
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d97c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d97e:	3b01      	subs	r3, #1
 800d980:	0a1b      	lsrs	r3, r3, #8
 800d982:	b2da      	uxtb	r2, r3
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d98e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d990:	b2db      	uxtb	r3, r3
 800d992:	3b01      	subs	r3, #1
 800d994:	b2da      	uxtb	r2, r3
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d9a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d9a4:	161b      	asrs	r3, r3, #24
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d9b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d9b6:	141b      	asrs	r3, r3, #16
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d9c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d9c8:	0a1b      	lsrs	r3, r3, #8
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d9d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	330a      	adds	r3, #10
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	330b      	adds	r3, #11
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d9f2:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	330c      	adds	r3, #12
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800d9fc:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	320d      	adds	r2, #13
 800da02:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800da04:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	60da      	str	r2, [r3, #12]

  return 0;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3724      	adds	r7, #36	; 0x24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd90      	pop	{r4, r7, pc}

0800da14 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b088      	sub	sp, #32
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	460b      	mov	r3, r1
 800da1e:	607a      	str	r2, [r7, #4]
 800da20:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	32b0      	adds	r2, #176	; 0xb0
 800da2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da30:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d102      	bne.n	800da3e <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800da38:	f04f 33ff 	mov.w	r3, #4294967295
 800da3c:	e063      	b.n	800db06 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	33b0      	adds	r3, #176	; 0xb0
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	4413      	add	r3, r2
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	f107 0214 	add.w	r2, r7, #20
 800da54:	f107 0110 	add.w	r1, r7, #16
 800da58:	7af8      	ldrb	r0, [r7, #11]
 800da5a:	4798      	blx	r3
 800da5c:	4603      	mov	r3, r0
 800da5e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800da60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d106      	bne.n	800da76 <SCSI_ReadFormatCapacity+0x62>
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800da6e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800da72:	2b02      	cmp	r3, #2
 800da74:	d108      	bne.n	800da88 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800da76:	7af9      	ldrb	r1, [r7, #11]
 800da78:	233a      	movs	r3, #58	; 0x3a
 800da7a:	2202      	movs	r2, #2
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 f946 	bl	800dd0e <SCSI_SenseCode>
    return -1;
 800da82:	f04f 33ff 	mov.w	r3, #4294967295
 800da86:	e03e      	b.n	800db06 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800da88:	2300      	movs	r3, #0
 800da8a:	83fb      	strh	r3, [r7, #30]
 800da8c:	e007      	b.n	800da9e <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800da8e:	8bfb      	ldrh	r3, [r7, #30]
 800da90:	69ba      	ldr	r2, [r7, #24]
 800da92:	4413      	add	r3, r2
 800da94:	2200      	movs	r2, #0
 800da96:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800da98:	8bfb      	ldrh	r3, [r7, #30]
 800da9a:	3301      	adds	r3, #1
 800da9c:	83fb      	strh	r3, [r7, #30]
 800da9e:	8bfb      	ldrh	r3, [r7, #30]
 800daa0:	2b0b      	cmp	r3, #11
 800daa2:	d9f4      	bls.n	800da8e <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	2208      	movs	r2, #8
 800daa8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	3b01      	subs	r3, #1
 800daae:	0e1b      	lsrs	r3, r3, #24
 800dab0:	b2da      	uxtb	r2, r3
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	3b01      	subs	r3, #1
 800daba:	0c1b      	lsrs	r3, r3, #16
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	3b01      	subs	r3, #1
 800dac6:	0a1b      	lsrs	r3, r3, #8
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	3b01      	subs	r3, #1
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	2202      	movs	r2, #2
 800dade:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800dae0:	8abb      	ldrh	r3, [r7, #20]
 800dae2:	141b      	asrs	r3, r3, #16
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800daea:	8abb      	ldrh	r3, [r7, #20]
 800daec:	0a1b      	lsrs	r3, r3, #8
 800daee:	b29b      	uxth	r3, r3
 800daf0:	b2da      	uxtb	r2, r3
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800daf6:	8abb      	ldrh	r3, [r7, #20]
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	220c      	movs	r2, #12
 800db02:	60da      	str	r2, [r3, #12]

  return 0;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3720      	adds	r7, #32
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
	...

0800db10 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	460b      	mov	r3, r1
 800db1a:	607a      	str	r2, [r7, #4]
 800db1c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	32b0      	adds	r2, #176	; 0xb0
 800db28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db2c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800db2e:	2317      	movs	r3, #23
 800db30:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d102      	bne.n	800db3e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800db38:	f04f 33ff 	mov.w	r3, #4294967295
 800db3c:	e011      	b.n	800db62 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	3304      	adds	r3, #4
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	b29b      	uxth	r3, r3
 800db46:	8afa      	ldrh	r2, [r7, #22]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d303      	bcc.n	800db54 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	3304      	adds	r3, #4
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800db54:	8afb      	ldrh	r3, [r7, #22]
 800db56:	461a      	mov	r2, r3
 800db58:	4904      	ldr	r1, [pc, #16]	; (800db6c <SCSI_ModeSense6+0x5c>)
 800db5a:	6938      	ldr	r0, [r7, #16]
 800db5c:	f000 fec2 	bl	800e8e4 <SCSI_UpdateBotData>

  return 0;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3718      	adds	r7, #24
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	24000098 	.word	0x24000098

0800db70 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	460b      	mov	r3, r1
 800db7a:	607a      	str	r2, [r7, #4]
 800db7c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	32b0      	adds	r2, #176	; 0xb0
 800db88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db8c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800db8e:	231b      	movs	r3, #27
 800db90:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d102      	bne.n	800db9e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800db98:	f04f 33ff 	mov.w	r3, #4294967295
 800db9c:	e011      	b.n	800dbc2 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	3308      	adds	r3, #8
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	8afa      	ldrh	r2, [r7, #22]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d303      	bcc.n	800dbb4 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	3308      	adds	r3, #8
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800dbb4:	8afb      	ldrh	r3, [r7, #22]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	4904      	ldr	r1, [pc, #16]	; (800dbcc <SCSI_ModeSense10+0x5c>)
 800dbba:	6938      	ldr	r0, [r7, #16]
 800dbbc:	f000 fe92 	bl	800e8e4 <SCSI_UpdateBotData>

  return 0;
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3718      	adds	r7, #24
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	240000b0 	.word	0x240000b0

0800dbd0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	607a      	str	r2, [r7, #4]
 800dbdc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	32b0      	adds	r2, #176	; 0xb0
 800dbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbec:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d102      	bne.n	800dbfa <SCSI_RequestSense+0x2a>
  {
    return -1;
 800dbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf8:	e085      	b.n	800dd06 <SCSI_RequestSense+0x136>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc00:	699b      	ldr	r3, [r3, #24]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d10b      	bne.n	800dc1e <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc0c:	7f59      	ldrb	r1, [r3, #29]
 800dc0e:	2320      	movs	r3, #32
 800dc10:	2205      	movs	r2, #5
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f000 f87b 	bl	800dd0e <SCSI_SenseCode>
    return -1;
 800dc18:	f04f 33ff 	mov.w	r3, #4294967295
 800dc1c:	e073      	b.n	800dd06 <SCSI_RequestSense+0x136>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dc1e:	2300      	movs	r3, #0
 800dc20:	75fb      	strb	r3, [r7, #23]
 800dc22:	e007      	b.n	800dc34 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800dc24:	7dfb      	ldrb	r3, [r7, #23]
 800dc26:	693a      	ldr	r2, [r7, #16]
 800dc28:	4413      	add	r3, r2
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
 800dc30:	3301      	adds	r3, #1
 800dc32:	75fb      	strb	r3, [r7, #23]
 800dc34:	7dfb      	ldrb	r3, [r7, #23]
 800dc36:	2b11      	cmp	r3, #17
 800dc38:	d9f4      	bls.n	800dc24 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	2270      	movs	r2, #112	; 0x70
 800dc3e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	220c      	movs	r2, #12
 800dc44:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc4c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc56:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d044      	beq.n	800dce8 <SCSI_RequestSense+0x118>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc64:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800dc68:	4619      	mov	r1, r3
 800dc6a:	693a      	ldr	r2, [r7, #16]
 800dc6c:	f241 0308 	movw	r3, #4104	; 0x1008
 800dc70:	440b      	add	r3, r1
 800dc72:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc80:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800dc84:	4619      	mov	r1, r3
 800dc86:	693a      	ldr	r2, [r7, #16]
 800dc88:	f241 0308 	movw	r3, #4104	; 0x1008
 800dc8c:	440b      	add	r3, r1
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	4413      	add	r3, r2
 800dc92:	791a      	ldrb	r2, [r3, #4]
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc9e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800dca2:	4619      	mov	r1, r3
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	f241 0308 	movw	r3, #4104	; 0x1008
 800dcaa:	440b      	add	r3, r1
 800dcac:	00db      	lsls	r3, r3, #3
 800dcae:	4413      	add	r3, r2
 800dcb0:	795a      	ldrb	r2, [r3, #5]
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dcbc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dcca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dcd4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800dcd8:	2b04      	cmp	r3, #4
 800dcda:	d105      	bne.n	800dce8 <SCSI_RequestSense+0x118>
    {
      hmsc->scsi_sense_head = 0U;
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	2212      	movs	r2, #18
 800dcec:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	2b12      	cmp	r3, #18
 800dcf6:	d805      	bhi.n	800dd04 <SCSI_RequestSense+0x134>
  {
    hmsc->bot_data_length = params[4];
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3718      	adds	r7, #24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800dd0e:	b480      	push	{r7}
 800dd10:	b085      	sub	sp, #20
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	4608      	mov	r0, r1
 800dd18:	4611      	mov	r1, r2
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	70fb      	strb	r3, [r7, #3]
 800dd20:	460b      	mov	r3, r1
 800dd22:	70bb      	strb	r3, [r7, #2]
 800dd24:	4613      	mov	r3, r2
 800dd26:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	32b0      	adds	r2, #176	; 0xb0
 800dd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd36:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d042      	beq.n	800ddc4 <SCSI_SenseCode+0xb6>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dd44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800dd48:	4619      	mov	r1, r3
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	f241 0308 	movw	r3, #4104	; 0x1008
 800dd50:	440b      	add	r3, r1
 800dd52:	78b9      	ldrb	r1, [r7, #2]
 800dd54:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dd5e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800dd62:	4619      	mov	r1, r3
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	f241 0308 	movw	r3, #4104	; 0x1008
 800dd6a:	440b      	add	r3, r1
 800dd6c:	00db      	lsls	r3, r3, #3
 800dd6e:	4413      	add	r3, r2
 800dd70:	787a      	ldrb	r2, [r7, #1]
 800dd72:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dd7a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800dd7e:	4619      	mov	r1, r3
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	f241 0308 	movw	r3, #4104	; 0x1008
 800dd86:	440b      	add	r3, r1
 800dd88:	00db      	lsls	r3, r3, #3
 800dd8a:	4413      	add	r3, r2
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dd96:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	b2da      	uxtb	r2, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dda4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ddae:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d107      	bne.n	800ddc6 <SCSI_SenseCode+0xb8>
  {
    hmsc->scsi_sense_tail = 0U;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800ddc2:	e000      	b.n	800ddc6 <SCSI_SenseCode+0xb8>
    return;
 800ddc4:	bf00      	nop
  }
}
 800ddc6:	3714      	adds	r7, #20
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	460b      	mov	r3, r1
 800ddda:	607a      	str	r2, [r7, #4]
 800dddc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	32b0      	adds	r2, #176	; 0xb0
 800dde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d102      	bne.n	800ddfa <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800ddf4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf8:	e043      	b.n	800de82 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de00:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800de04:	2b01      	cmp	r3, #1
 800de06:	d10f      	bne.n	800de28 <SCSI_StartStopUnit+0x58>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	3304      	adds	r3, #4
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	f003 0303 	and.w	r3, r3, #3
 800de12:	2b02      	cmp	r3, #2
 800de14:	d108      	bne.n	800de28 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800de16:	7af9      	ldrb	r1, [r7, #11]
 800de18:	2324      	movs	r3, #36	; 0x24
 800de1a:	2205      	movs	r2, #5
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f7ff ff76 	bl	800dd0e <SCSI_SenseCode>

    return -1;
 800de22:	f04f 33ff 	mov.w	r3, #4294967295
 800de26:	e02c      	b.n	800de82 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	3304      	adds	r3, #4
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	f003 0303 	and.w	r3, r3, #3
 800de32:	2b01      	cmp	r3, #1
 800de34:	d106      	bne.n	800de44 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de3c:	2200      	movs	r2, #0
 800de3e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800de42:	e01a      	b.n	800de7a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	3304      	adds	r3, #4
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	f003 0303 	and.w	r3, r3, #3
 800de4e:	2b02      	cmp	r3, #2
 800de50:	d106      	bne.n	800de60 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de58:	2202      	movs	r2, #2
 800de5a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800de5e:	e00c      	b.n	800de7a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	3304      	adds	r3, #4
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	f003 0303 	and.w	r3, r3, #3
 800de6a:	2b03      	cmp	r3, #3
 800de6c:	d105      	bne.n	800de7a <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de74:	2200      	movs	r2, #0
 800de76:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	2200      	movs	r2, #0
 800de7e:	60da      	str	r2, [r3, #12]

  return 0;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3718      	adds	r7, #24
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de8a:	b480      	push	{r7}
 800de8c:	b087      	sub	sp, #28
 800de8e:	af00      	add	r7, sp, #0
 800de90:	60f8      	str	r0, [r7, #12]
 800de92:	460b      	mov	r3, r1
 800de94:	607a      	str	r2, [r7, #4]
 800de96:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	32b0      	adds	r2, #176	; 0xb0
 800dea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dea6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d102      	bne.n	800deb4 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800deae:	f04f 33ff 	mov.w	r3, #4294967295
 800deb2:	e015      	b.n	800dee0 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	3304      	adds	r3, #4
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d106      	bne.n	800decc <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800deca:	e005      	b.n	800ded8 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	2200      	movs	r2, #0
 800dedc:	60da      	str	r2, [r3, #12]

  return 0;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	371c      	adds	r7, #28
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	460b      	mov	r3, r1
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	32b0      	adds	r2, #176	; 0xb0
 800df04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d102      	bne.n	800df16 <SCSI_Read10+0x2a>
  {
    return -1;
 800df10:	f04f 33ff 	mov.w	r3, #4294967295
 800df14:	e09d      	b.n	800e052 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	7a1b      	ldrb	r3, [r3, #8]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f040 808f 	bne.w	800e03e <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800df26:	7f1b      	ldrb	r3, [r3, #28]
 800df28:	b25b      	sxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	db0b      	blt.n	800df46 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800df34:	7f59      	ldrb	r1, [r3, #29]
 800df36:	2320      	movs	r3, #32
 800df38:	2205      	movs	r2, #5
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7ff fee7 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800df40:	f04f 33ff 	mov.w	r3, #4294967295
 800df44:	e085      	b.n	800e052 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800df4c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800df50:	2b02      	cmp	r3, #2
 800df52:	d108      	bne.n	800df66 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800df54:	7af9      	ldrb	r1, [r7, #11]
 800df56:	233a      	movs	r3, #58	; 0x3a
 800df58:	2202      	movs	r2, #2
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f7ff fed7 	bl	800dd0e <SCSI_SenseCode>

      return -1;
 800df60:	f04f 33ff 	mov.w	r3, #4294967295
 800df64:	e075      	b.n	800e052 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	33b0      	adds	r3, #176	; 0xb0
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	4413      	add	r3, r2
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	7afa      	ldrb	r2, [r7, #11]
 800df7a:	4610      	mov	r0, r2
 800df7c:	4798      	blx	r3
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d008      	beq.n	800df96 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800df84:	7af9      	ldrb	r1, [r7, #11]
 800df86:	233a      	movs	r3, #58	; 0x3a
 800df88:	2202      	movs	r2, #2
 800df8a:	68f8      	ldr	r0, [r7, #12]
 800df8c:	f7ff febf 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800df90:	f04f 33ff 	mov.w	r3, #4294967295
 800df94:	e05d      	b.n	800e052 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	3302      	adds	r3, #2
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3303      	adds	r3, #3
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dfa6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800dfb0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	3205      	adds	r2, #5
 800dfb6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800dfb8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dfba:	697a      	ldr	r2, [r7, #20]
 800dfbc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800dfc0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	3307      	adds	r3, #7
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	021b      	lsls	r3, r3, #8
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	3208      	adds	r2, #8
 800dfce:	7812      	ldrb	r2, [r2, #0]
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800dfd8:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dfe0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dfe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfea:	7af9      	ldrb	r1, [r7, #11]
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f000 fb0c 	bl	800e60a <SCSI_CheckAddressRange>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	da02      	bge.n	800dffe <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800dff8:	f04f 33ff 	mov.w	r3, #4294967295
 800dffc:	e029      	b.n	800e052 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e004:	699a      	ldr	r2, [r3, #24]
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e00e:	6979      	ldr	r1, [r7, #20]
 800e010:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800e014:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800e018:	fb01 f303 	mul.w	r3, r1, r3
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d00b      	beq.n	800e038 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e026:	7f59      	ldrb	r1, [r3, #29]
 800e028:	2320      	movs	r3, #32
 800e02a:	2205      	movs	r2, #5
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f7ff fe6e 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e032:	f04f 33ff 	mov.w	r3, #4294967295
 800e036:	e00c      	b.n	800e052 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	2202      	movs	r2, #2
 800e03c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e044:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e046:	7afb      	ldrb	r3, [r7, #11]
 800e048:	4619      	mov	r1, r3
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f000 fb0a 	bl	800e664 <SCSI_ProcessRead>
 800e050:	4603      	mov	r3, r0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3718      	adds	r7, #24
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b086      	sub	sp, #24
 800e05e:	af00      	add	r7, sp, #0
 800e060:	60f8      	str	r0, [r7, #12]
 800e062:	460b      	mov	r3, r1
 800e064:	607a      	str	r2, [r7, #4]
 800e066:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	32b0      	adds	r2, #176	; 0xb0
 800e072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e076:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d102      	bne.n	800e084 <SCSI_Read12+0x2a>
  {
    return -1;
 800e07e:	f04f 33ff 	mov.w	r3, #4294967295
 800e082:	e0a7      	b.n	800e1d4 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	7a1b      	ldrb	r3, [r3, #8]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f040 8099 	bne.w	800e1c0 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e094:	7f1b      	ldrb	r3, [r3, #28]
 800e096:	b25b      	sxtb	r3, r3
 800e098:	2b00      	cmp	r3, #0
 800e09a:	db0b      	blt.n	800e0b4 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e0a2:	7f59      	ldrb	r1, [r3, #29]
 800e0a4:	2320      	movs	r3, #32
 800e0a6:	2205      	movs	r2, #5
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f7ff fe30 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e0b2:	e08f      	b.n	800e1d4 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e0ba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	d108      	bne.n	800e0d4 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e0c2:	7af9      	ldrb	r1, [r7, #11]
 800e0c4:	233a      	movs	r3, #58	; 0x3a
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7ff fe20 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e0d2:	e07f      	b.n	800e1d4 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	33b0      	adds	r3, #176	; 0xb0
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	7afa      	ldrb	r2, [r7, #11]
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	4798      	blx	r3
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d008      	beq.n	800e104 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e0f2:	7af9      	ldrb	r1, [r7, #11]
 800e0f4:	233a      	movs	r3, #58	; 0x3a
 800e0f6:	2202      	movs	r2, #2
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f7ff fe08 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e102:	e067      	b.n	800e1d4 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	3302      	adds	r3, #2
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	3303      	adds	r3, #3
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e114:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3304      	adds	r3, #4
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e11e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	3205      	adds	r2, #5
 800e124:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e126:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e128:	697a      	ldr	r2, [r7, #20]
 800e12a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e12e:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	3306      	adds	r3, #6
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	3307      	adds	r3, #7
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e140:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	3308      	adds	r3, #8
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e14a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	3209      	adds	r2, #9
 800e150:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e152:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e154:	697a      	ldr	r2, [r7, #20]
 800e156:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e15a:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e162:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e16a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e16c:	7af9      	ldrb	r1, [r7, #11]
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f000 fa4b 	bl	800e60a <SCSI_CheckAddressRange>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	da02      	bge.n	800e180 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e17a:	f04f 33ff 	mov.w	r3, #4294967295
 800e17e:	e029      	b.n	800e1d4 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e186:	699a      	ldr	r2, [r3, #24]
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e190:	6979      	ldr	r1, [r7, #20]
 800e192:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800e196:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800e19a:	fb01 f303 	mul.w	r3, r1, r3
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d00b      	beq.n	800e1ba <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e1a8:	7f59      	ldrb	r1, [r3, #29]
 800e1aa:	2320      	movs	r3, #32
 800e1ac:	2205      	movs	r2, #5
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f7ff fdad 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b8:	e00c      	b.n	800e1d4 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2202      	movs	r2, #2
 800e1be:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e1c6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e1c8:	7afb      	ldrb	r3, [r7, #11]
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f000 fa49 	bl	800e664 <SCSI_ProcessRead>
 800e1d2:	4603      	mov	r3, r0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3718      	adds	r7, #24
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b086      	sub	sp, #24
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	607a      	str	r2, [r7, #4]
 800e1e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	32b0      	adds	r2, #176	; 0xb0
 800e1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1f8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d102      	bne.n	800e206 <SCSI_Write10+0x2a>
  {
    return -1;
 800e200:	f04f 33ff 	mov.w	r3, #4294967295
 800e204:	e0c7      	b.n	800e396 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	7a1b      	ldrb	r3, [r3, #8]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f040 80bd 	bne.w	800e38a <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e216:	699b      	ldr	r3, [r3, #24]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d10b      	bne.n	800e234 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e222:	7f59      	ldrb	r1, [r3, #29]
 800e224:	2320      	movs	r3, #32
 800e226:	2205      	movs	r2, #5
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f7ff fd70 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e22e:	f04f 33ff 	mov.w	r3, #4294967295
 800e232:	e0b0      	b.n	800e396 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e23a:	7f1b      	ldrb	r3, [r3, #28]
 800e23c:	b25b      	sxtb	r3, r3
 800e23e:	2b00      	cmp	r3, #0
 800e240:	da0b      	bge.n	800e25a <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e248:	7f59      	ldrb	r1, [r3, #29]
 800e24a:	2320      	movs	r3, #32
 800e24c:	2205      	movs	r2, #5
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	f7ff fd5d 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e254:	f04f 33ff 	mov.w	r3, #4294967295
 800e258:	e09d      	b.n	800e396 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e260:	68fa      	ldr	r2, [r7, #12]
 800e262:	33b0      	adds	r3, #176	; 0xb0
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	4413      	add	r3, r2
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	7afa      	ldrb	r2, [r7, #11]
 800e26e:	4610      	mov	r0, r2
 800e270:	4798      	blx	r3
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d008      	beq.n	800e28a <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e278:	7af9      	ldrb	r1, [r7, #11]
 800e27a:	233a      	movs	r3, #58	; 0x3a
 800e27c:	2202      	movs	r2, #2
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f7ff fd45 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e284:	f04f 33ff 	mov.w	r3, #4294967295
 800e288:	e085      	b.n	800e396 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	33b0      	adds	r3, #176	; 0xb0
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4413      	add	r3, r2
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	7afa      	ldrb	r2, [r7, #11]
 800e29e:	4610      	mov	r0, r2
 800e2a0:	4798      	blx	r3
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d008      	beq.n	800e2ba <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e2a8:	7af9      	ldrb	r1, [r7, #11]
 800e2aa:	2327      	movs	r3, #39	; 0x27
 800e2ac:	2202      	movs	r2, #2
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f7ff fd2d 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b8:	e06d      	b.n	800e396 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	3302      	adds	r3, #2
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	3303      	adds	r3, #3
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2ca:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e2d4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	3205      	adds	r2, #5
 800e2da:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e2dc:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e2e4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	3307      	adds	r3, #7
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	3208      	adds	r2, #8
 800e2f2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	697a      	ldr	r2, [r7, #20]
 800e2f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e2fc:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e304:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e30e:	7af9      	ldrb	r1, [r7, #11]
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f000 f97a 	bl	800e60a <SCSI_CheckAddressRange>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	da02      	bge.n	800e322 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e31c:	f04f 33ff 	mov.w	r3, #4294967295
 800e320:	e039      	b.n	800e396 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e32a:	697a      	ldr	r2, [r7, #20]
 800e32c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e330:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800e334:	fb02 f303 	mul.w	r3, r2, r3
 800e338:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e340:	699b      	ldr	r3, [r3, #24]
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	429a      	cmp	r2, r3
 800e346:	d00b      	beq.n	800e360 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e34e:	7f59      	ldrb	r1, [r3, #29]
 800e350:	2320      	movs	r3, #32
 800e352:	2205      	movs	r2, #5
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f7ff fcda 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e35a:	f04f 33ff 	mov.w	r3, #4294967295
 800e35e:	e01a      	b.n	800e396 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e366:	bf28      	it	cs
 800e368:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e36c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	2201      	movs	r2, #1
 800e372:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800e374:	4b0a      	ldr	r3, [pc, #40]	; (800e3a0 <SCSI_Write10+0x1c4>)
 800e376:	7819      	ldrb	r1, [r3, #0]
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	f103 0210 	add.w	r2, r3, #16
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f006 fac8 	bl	8014916 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e386:	2300      	movs	r3, #0
 800e388:	e005      	b.n	800e396 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800e38a:	7afb      	ldrb	r3, [r7, #11]
 800e38c:	4619      	mov	r1, r3
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f000 f9fe 	bl	800e790 <SCSI_ProcessWrite>
 800e394:	4603      	mov	r3, r0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	24000087 	.word	0x24000087

0800e3a4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b086      	sub	sp, #24
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	607a      	str	r2, [r7, #4]
 800e3b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	32b0      	adds	r2, #176	; 0xb0
 800e3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3c0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d102      	bne.n	800e3ce <SCSI_Write12+0x2a>
  {
    return -1;
 800e3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3cc:	e0d7      	b.n	800e57e <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	7a1b      	ldrb	r3, [r3, #8]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f040 80cd 	bne.w	800e572 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e3de:	699b      	ldr	r3, [r3, #24]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d10b      	bne.n	800e3fc <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e3ea:	7f59      	ldrb	r1, [r3, #29]
 800e3ec:	2320      	movs	r3, #32
 800e3ee:	2205      	movs	r2, #5
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f7ff fc8c 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3fa:	e0c0      	b.n	800e57e <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e402:	7f1b      	ldrb	r3, [r3, #28]
 800e404:	b25b      	sxtb	r3, r3
 800e406:	2b00      	cmp	r3, #0
 800e408:	da0b      	bge.n	800e422 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e410:	7f59      	ldrb	r1, [r3, #29]
 800e412:	2320      	movs	r3, #32
 800e414:	2205      	movs	r2, #5
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f7ff fc79 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e41c:	f04f 33ff 	mov.w	r3, #4294967295
 800e420:	e0ad      	b.n	800e57e <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	33b0      	adds	r3, #176	; 0xb0
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	4413      	add	r3, r2
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	7afa      	ldrb	r2, [r7, #11]
 800e436:	4610      	mov	r0, r2
 800e438:	4798      	blx	r3
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00b      	beq.n	800e458 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e440:	7af9      	ldrb	r1, [r7, #11]
 800e442:	233a      	movs	r3, #58	; 0x3a
 800e444:	2202      	movs	r2, #2
 800e446:	68f8      	ldr	r0, [r7, #12]
 800e448:	f7ff fc61 	bl	800dd0e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	2205      	movs	r2, #5
 800e450:	721a      	strb	r2, [r3, #8]
      return -1;
 800e452:	f04f 33ff 	mov.w	r3, #4294967295
 800e456:	e092      	b.n	800e57e <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	33b0      	adds	r3, #176	; 0xb0
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	4413      	add	r3, r2
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	7afa      	ldrb	r2, [r7, #11]
 800e46c:	4610      	mov	r0, r2
 800e46e:	4798      	blx	r3
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00b      	beq.n	800e48e <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e476:	7af9      	ldrb	r1, [r7, #11]
 800e478:	2327      	movs	r3, #39	; 0x27
 800e47a:	2202      	movs	r2, #2
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f7ff fc46 	bl	800dd0e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	2205      	movs	r2, #5
 800e486:	721a      	strb	r2, [r3, #8]
      return -1;
 800e488:	f04f 33ff 	mov.w	r3, #4294967295
 800e48c:	e077      	b.n	800e57e <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	3302      	adds	r3, #2
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	3303      	adds	r3, #3
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e49e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e4a8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	3205      	adds	r2, #5
 800e4ae:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e4b0:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e4b2:	697a      	ldr	r2, [r7, #20]
 800e4b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e4b8:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	3306      	adds	r3, #6
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3307      	adds	r3, #7
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e4ca:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	3308      	adds	r3, #8
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e4d4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	3209      	adds	r2, #9
 800e4da:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e4dc:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e4de:	697a      	ldr	r2, [r7, #20]
 800e4e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e4e4:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e4ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4f6:	7af9      	ldrb	r1, [r7, #11]
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f000 f886 	bl	800e60a <SCSI_CheckAddressRange>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	da02      	bge.n	800e50a <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e504:	f04f 33ff 	mov.w	r3, #4294967295
 800e508:	e039      	b.n	800e57e <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e512:	697a      	ldr	r2, [r7, #20]
 800e514:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e518:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800e51c:	fb02 f303 	mul.w	r3, r2, r3
 800e520:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	693a      	ldr	r2, [r7, #16]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d00b      	beq.n	800e548 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e536:	7f59      	ldrb	r1, [r3, #29]
 800e538:	2320      	movs	r3, #32
 800e53a:	2205      	movs	r2, #5
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f7ff fbe6 	bl	800dd0e <SCSI_SenseCode>
      return -1;
 800e542:	f04f 33ff 	mov.w	r3, #4294967295
 800e546:	e01a      	b.n	800e57e <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e54e:	bf28      	it	cs
 800e550:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e554:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	2201      	movs	r2, #1
 800e55a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800e55c:	4b0a      	ldr	r3, [pc, #40]	; (800e588 <SCSI_Write12+0x1e4>)
 800e55e:	7819      	ldrb	r1, [r3, #0]
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	f103 0210 	add.w	r2, r3, #16
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f006 f9d4 	bl	8014916 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e56e:	2300      	movs	r3, #0
 800e570:	e005      	b.n	800e57e <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800e572:	7afb      	ldrb	r3, [r7, #11]
 800e574:	4619      	mov	r1, r3
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f000 f90a 	bl	800e790 <SCSI_ProcessWrite>
 800e57c:	4603      	mov	r3, r0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3718      	adds	r7, #24
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	24000087 	.word	0x24000087

0800e58c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b086      	sub	sp, #24
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	460b      	mov	r3, r1
 800e596:	607a      	str	r2, [r7, #4]
 800e598:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	32b0      	adds	r2, #176	; 0xb0
 800e5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5a8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d102      	bne.n	800e5b6 <SCSI_Verify10+0x2a>
  {
    return -1;
 800e5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b4:	e025      	b.n	800e602 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	f003 0302 	and.w	r3, r3, #2
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d008      	beq.n	800e5d6 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e5c4:	7af9      	ldrb	r1, [r7, #11]
 800e5c6:	2324      	movs	r3, #36	; 0x24
 800e5c8:	2205      	movs	r2, #5
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f7ff fb9f 	bl	800dd0e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d4:	e015      	b.n	800e602 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e5dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e6:	7af9      	ldrb	r1, [r7, #11]
 800e5e8:	68f8      	ldr	r0, [r7, #12]
 800e5ea:	f000 f80e 	bl	800e60a <SCSI_CheckAddressRange>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	da02      	bge.n	800e5fa <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800e5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f8:	e003      	b.n	800e602 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	60da      	str	r2, [r3, #12]

  return 0;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3718      	adds	r7, #24
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b086      	sub	sp, #24
 800e60e:	af00      	add	r7, sp, #0
 800e610:	60f8      	str	r0, [r7, #12]
 800e612:	607a      	str	r2, [r7, #4]
 800e614:	603b      	str	r3, [r7, #0]
 800e616:	460b      	mov	r3, r1
 800e618:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	32b0      	adds	r2, #176	; 0xb0
 800e624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e628:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d102      	bne.n	800e636 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800e630:	f04f 33ff 	mov.w	r3, #4294967295
 800e634:	e012      	b.n	800e65c <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	441a      	add	r2, r3
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e644:	429a      	cmp	r2, r3
 800e646:	d908      	bls.n	800e65a <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e648:	7af9      	ldrb	r1, [r7, #11]
 800e64a:	2321      	movs	r3, #33	; 0x21
 800e64c:	2205      	movs	r2, #5
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	f7ff fb5d 	bl	800dd0e <SCSI_SenseCode>
    return -1;
 800e654:	f04f 33ff 	mov.w	r3, #4294967295
 800e658:	e000      	b.n	800e65c <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800e65a:	2300      	movs	r3, #0
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3718      	adds	r7, #24
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e664:	b590      	push	{r4, r7, lr}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	460b      	mov	r3, r1
 800e66e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	32b0      	adds	r2, #176	; 0xb0
 800e67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e67e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d102      	bne.n	800e68c <SCSI_ProcessRead+0x28>
  {
    return -1;
 800e686:	f04f 33ff 	mov.w	r3, #4294967295
 800e68a:	e07b      	b.n	800e784 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e694:	68fa      	ldr	r2, [r7, #12]
 800e696:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e69a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800e69e:	fb02 f303 	mul.w	r3, r2, r3
 800e6a2:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6aa:	bf28      	it	cs
 800e6ac:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e6b0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	33b0      	adds	r3, #176	; 0xb0
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	4413      	add	r3, r2
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	691c      	ldr	r4, [r3, #16]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f103 0110 	add.w	r1, r3, #16
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e6d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e6d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e6dc:	4618      	mov	r0, r3
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	78f8      	ldrb	r0, [r7, #3]
 800e6e8:	47a0      	blx	r4
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	da08      	bge.n	800e702 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e6f0:	78f9      	ldrb	r1, [r7, #3]
 800e6f2:	2311      	movs	r3, #17
 800e6f4:	2204      	movs	r2, #4
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7ff fb09 	bl	800dd0e <SCSI_SenseCode>
    return -1;
 800e6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e700:	e040      	b.n	800e784 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800e702:	4b22      	ldr	r3, [pc, #136]	; (800e78c <SCSI_ProcessRead+0x128>)
 800e704:	7819      	ldrb	r1, [r3, #0]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f103 0210 	add.w	r2, r3, #16
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f006 f8e0 	bl	80148d4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e71a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e722:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e726:	4619      	mov	r1, r3
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e72e:	4413      	add	r3, r2
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e736:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e73e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e746:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e74a:	4619      	mov	r1, r3
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	68fa      	ldr	r2, [r7, #12]
 800e756:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e75a:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	1ad3      	subs	r3, r2, r3
 800e768:	68fa      	ldr	r2, [r7, #12]
 800e76a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e76e:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d102      	bne.n	800e782 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2203      	movs	r2, #3
 800e780:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800e782:	2300      	movs	r3, #0
}
 800e784:	4618      	mov	r0, r3
 800e786:	3714      	adds	r7, #20
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd90      	pop	{r4, r7, pc}
 800e78c:	24000086 	.word	0x24000086

0800e790 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e790:	b590      	push	{r4, r7, lr}
 800e792:	b085      	sub	sp, #20
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	460b      	mov	r3, r1
 800e79a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	32b0      	adds	r2, #176	; 0xb0
 800e7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7aa:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d102      	bne.n	800e7b8 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800e7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b6:	e08e      	b.n	800e8d6 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e7be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e7c6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800e7ca:	fb02 f303 	mul.w	r3, r2, r3
 800e7ce:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7d6:	bf28      	it	cs
 800e7d8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e7dc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	33b0      	adds	r3, #176	; 0xb0
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4413      	add	r3, r2
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	695c      	ldr	r4, [r3, #20]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f103 0110 	add.w	r1, r3, #16
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e7fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e804:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e808:	4618      	mov	r0, r3
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800e810:	b29b      	uxth	r3, r3
 800e812:	78f8      	ldrb	r0, [r7, #3]
 800e814:	47a0      	blx	r4
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	da08      	bge.n	800e82e <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e81c:	78f9      	ldrb	r1, [r7, #3]
 800e81e:	2303      	movs	r3, #3
 800e820:	2204      	movs	r2, #4
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7ff fa73 	bl	800dd0e <SCSI_SenseCode>
    return -1;
 800e828:	f04f 33ff 	mov.w	r3, #4294967295
 800e82c:	e053      	b.n	800e8d6 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e834:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e83c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e840:	4619      	mov	r1, r3
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	fbb3 f3f1 	udiv	r3, r3, r1
 800e848:	4413      	add	r3, r2
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e850:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e858:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e860:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e864:	4619      	mov	r1, r3
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	fbb3 f3f1 	udiv	r3, r3, r1
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e874:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e87c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	1ad3      	subs	r3, r2, r3
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e888:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e892:	2b00      	cmp	r3, #0
 800e894:	d104      	bne.n	800e8a0 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e896:	2100      	movs	r1, #0
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f7fe fc49 	bl	800d130 <MSC_BOT_SendCSW>
 800e89e:	e019      	b.n	800e8d4 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e8a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800e8ae:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800e8b2:	fb02 f303 	mul.w	r3, r2, r3
 800e8b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8ba:	bf28      	it	cs
 800e8bc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e8c0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800e8c2:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <SCSI_ProcessWrite+0x150>)
 800e8c4:	7819      	ldrb	r1, [r3, #0]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f103 0210 	add.w	r2, r3, #16
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f006 f821 	bl	8014916 <USBD_LL_PrepareReceive>
  }

  return 0;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3714      	adds	r7, #20
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd90      	pop	{r4, r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	24000087 	.word	0x24000087

0800e8e4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800e8f2:	88fb      	ldrh	r3, [r7, #6]
 800e8f4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d102      	bne.n	800e902 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800e8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e900:	e013      	b.n	800e92a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800e902:	8afa      	ldrh	r2, [r7, #22]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800e908:	e00b      	b.n	800e922 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800e90a:	8afb      	ldrh	r3, [r7, #22]
 800e90c:	3b01      	subs	r3, #1
 800e90e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800e910:	8afb      	ldrh	r3, [r7, #22]
 800e912:	68ba      	ldr	r2, [r7, #8]
 800e914:	441a      	add	r2, r3
 800e916:	8afb      	ldrh	r3, [r7, #22]
 800e918:	7811      	ldrb	r1, [r2, #0]
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	4413      	add	r3, r2
 800e91e:	460a      	mov	r2, r1
 800e920:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800e922:	8afb      	ldrh	r3, [r7, #22]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1f0      	bne.n	800e90a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	371c      	adds	r7, #28
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr

0800e936 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e936:	b580      	push	{r7, lr}
 800e938:	b086      	sub	sp, #24
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	60f8      	str	r0, [r7, #12]
 800e93e:	60b9      	str	r1, [r7, #8]
 800e940:	4613      	mov	r3, r2
 800e942:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d101      	bne.n	800e94e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e94a:	2303      	movs	r3, #3
 800e94c:	e01f      	b.n	800e98e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2200      	movs	r2, #0
 800e962:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d003      	beq.n	800e974 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	68ba      	ldr	r2, [r7, #8]
 800e970:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2201      	movs	r2, #1
 800e978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	79fa      	ldrb	r2, [r7, #7]
 800e980:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f005 fe4e 	bl	8014624 <USBD_LL_Init>
 800e988:	4603      	mov	r3, r0
 800e98a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}

0800e996 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b084      	sub	sp, #16
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
 800e99e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d101      	bne.n	800e9ae <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	e025      	b.n	800e9fa <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	683a      	ldr	r2, [r7, #0]
 800e9b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	32ae      	adds	r2, #174	; 0xae
 800e9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00f      	beq.n	800e9ea <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	32ae      	adds	r2, #174	; 0xae
 800e9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9da:	f107 020e 	add.w	r2, r7, #14
 800e9de:	4610      	mov	r0, r2
 800e9e0:	4798      	blx	r3
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e9f8:	2300      	movs	r3, #0
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b082      	sub	sp, #8
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f005 fe5a 	bl	80146c4 <USBD_LL_Start>
 800ea10:	4603      	mov	r3, r0
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3708      	adds	r7, #8
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ea1a:	b480      	push	{r7}
 800ea1c:	b083      	sub	sp, #12
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ea22:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	460b      	mov	r3, r1
 800ea3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d009      	beq.n	800ea5e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	78fa      	ldrb	r2, [r7, #3]
 800ea54:	4611      	mov	r1, r2
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	4798      	blx	r3
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ea5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	460b      	mov	r3, r1
 800ea72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea74:	2300      	movs	r3, #0
 800ea76:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	78fa      	ldrb	r2, [r7, #3]
 800ea82:	4611      	mov	r1, r2
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	4798      	blx	r3
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d001      	beq.n	800ea92 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ea8e:	2303      	movs	r3, #3
 800ea90:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ea92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eaac:	6839      	ldr	r1, [r7, #0]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f001 f939 	bl	800fd26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2201      	movs	r2, #1
 800eab8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800eac2:	461a      	mov	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ead0:	f003 031f 	and.w	r3, r3, #31
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d01a      	beq.n	800eb0e <USBD_LL_SetupStage+0x72>
 800ead8:	2b02      	cmp	r3, #2
 800eada:	d822      	bhi.n	800eb22 <USBD_LL_SetupStage+0x86>
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d002      	beq.n	800eae6 <USBD_LL_SetupStage+0x4a>
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d00a      	beq.n	800eafa <USBD_LL_SetupStage+0x5e>
 800eae4:	e01d      	b.n	800eb22 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eaec:	4619      	mov	r1, r3
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 fb66 	bl	800f1c0 <USBD_StdDevReq>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	73fb      	strb	r3, [r7, #15]
      break;
 800eaf8:	e020      	b.n	800eb3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb00:	4619      	mov	r1, r3
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fbce 	bl	800f2a4 <USBD_StdItfReq>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	73fb      	strb	r3, [r7, #15]
      break;
 800eb0c:	e016      	b.n	800eb3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb14:	4619      	mov	r1, r3
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f000 fc30 	bl	800f37c <USBD_StdEPReq>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	73fb      	strb	r3, [r7, #15]
      break;
 800eb20:	e00c      	b.n	800eb3c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	4619      	mov	r1, r3
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f005 fe46 	bl	80147c2 <USBD_LL_StallEP>
 800eb36:	4603      	mov	r3, r0
 800eb38:	73fb      	strb	r3, [r7, #15]
      break;
 800eb3a:	bf00      	nop
  }

  return ret;
 800eb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b086      	sub	sp, #24
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	60f8      	str	r0, [r7, #12]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	607a      	str	r2, [r7, #4]
 800eb52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb54:	2300      	movs	r3, #0
 800eb56:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d16e      	bne.n	800ec3c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eb64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eb6c:	2b03      	cmp	r3, #3
 800eb6e:	f040 8098 	bne.w	800eca2 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	689a      	ldr	r2, [r3, #8]
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d913      	bls.n	800eba6 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	689a      	ldr	r2, [r3, #8]
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	1ad2      	subs	r2, r2, r3
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	68da      	ldr	r2, [r3, #12]
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	4293      	cmp	r3, r2
 800eb96:	bf28      	it	cs
 800eb98:	4613      	movcs	r3, r2
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	6879      	ldr	r1, [r7, #4]
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f001 f998 	bl	800fed4 <USBD_CtlContinueRx>
 800eba4:	e07d      	b.n	800eca2 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ebac:	f003 031f 	and.w	r3, r3, #31
 800ebb0:	2b02      	cmp	r3, #2
 800ebb2:	d014      	beq.n	800ebde <USBD_LL_DataOutStage+0x98>
 800ebb4:	2b02      	cmp	r3, #2
 800ebb6:	d81d      	bhi.n	800ebf4 <USBD_LL_DataOutStage+0xae>
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d002      	beq.n	800ebc2 <USBD_LL_DataOutStage+0x7c>
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d003      	beq.n	800ebc8 <USBD_LL_DataOutStage+0x82>
 800ebc0:	e018      	b.n	800ebf4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	75bb      	strb	r3, [r7, #22]
            break;
 800ebc6:	e018      	b.n	800ebfa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f000 fa64 	bl	800f0a0 <USBD_CoreFindIF>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	75bb      	strb	r3, [r7, #22]
            break;
 800ebdc:	e00d      	b.n	800ebfa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	68f8      	ldr	r0, [r7, #12]
 800ebea:	f000 fa66 	bl	800f0ba <USBD_CoreFindEP>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	75bb      	strb	r3, [r7, #22]
            break;
 800ebf2:	e002      	b.n	800ebfa <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	75bb      	strb	r3, [r7, #22]
            break;
 800ebf8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ebfa:	7dbb      	ldrb	r3, [r7, #22]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d119      	bne.n	800ec34 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	2b03      	cmp	r3, #3
 800ec0a:	d113      	bne.n	800ec34 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ec0c:	7dba      	ldrb	r2, [r7, #22]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	32ae      	adds	r2, #174	; 0xae
 800ec12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d00b      	beq.n	800ec34 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ec1c:	7dba      	ldrb	r2, [r7, #22]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ec24:	7dba      	ldrb	r2, [r7, #22]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	32ae      	adds	r2, #174	; 0xae
 800ec2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec2e:	691b      	ldr	r3, [r3, #16]
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f001 f95e 	bl	800fef6 <USBD_CtlSendStatus>
 800ec3a:	e032      	b.n	800eca2 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ec3c:	7afb      	ldrb	r3, [r7, #11]
 800ec3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	4619      	mov	r1, r3
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f000 fa37 	bl	800f0ba <USBD_CoreFindEP>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec50:	7dbb      	ldrb	r3, [r7, #22]
 800ec52:	2bff      	cmp	r3, #255	; 0xff
 800ec54:	d025      	beq.n	800eca2 <USBD_LL_DataOutStage+0x15c>
 800ec56:	7dbb      	ldrb	r3, [r7, #22]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d122      	bne.n	800eca2 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	2b03      	cmp	r3, #3
 800ec66:	d117      	bne.n	800ec98 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ec68:	7dba      	ldrb	r2, [r7, #22]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	32ae      	adds	r2, #174	; 0xae
 800ec6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec72:	699b      	ldr	r3, [r3, #24]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00f      	beq.n	800ec98 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ec78:	7dba      	ldrb	r2, [r7, #22]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ec80:	7dba      	ldrb	r2, [r7, #22]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	32ae      	adds	r2, #174	; 0xae
 800ec86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec8a:	699b      	ldr	r3, [r3, #24]
 800ec8c:	7afa      	ldrb	r2, [r7, #11]
 800ec8e:	4611      	mov	r1, r2
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	4798      	blx	r3
 800ec94:	4603      	mov	r3, r0
 800ec96:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ec98:	7dfb      	ldrb	r3, [r7, #23]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d001      	beq.n	800eca2 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ec9e:	7dfb      	ldrb	r3, [r7, #23]
 800eca0:	e000      	b.n	800eca4 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800eca2:	2300      	movs	r3, #0
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3718      	adds	r7, #24
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b086      	sub	sp, #24
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	607a      	str	r2, [r7, #4]
 800ecb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ecba:	7afb      	ldrb	r3, [r7, #11]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d16f      	bne.n	800eda0 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	3314      	adds	r3, #20
 800ecc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d15a      	bne.n	800ed86 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	689a      	ldr	r2, [r3, #8]
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	68db      	ldr	r3, [r3, #12]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d914      	bls.n	800ed06 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	689a      	ldr	r2, [r3, #8]
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	1ad2      	subs	r2, r2, r3
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	689b      	ldr	r3, [r3, #8]
 800ecee:	461a      	mov	r2, r3
 800ecf0:	6879      	ldr	r1, [r7, #4]
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f001 f8dd 	bl	800feb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	f005 fe09 	bl	8014916 <USBD_LL_PrepareReceive>
 800ed04:	e03f      	b.n	800ed86 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	68da      	ldr	r2, [r3, #12]
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d11c      	bne.n	800ed4c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	685a      	ldr	r2, [r3, #4]
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d316      	bcc.n	800ed4c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	685a      	ldr	r2, [r3, #4]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d20f      	bcs.n	800ed4c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	2100      	movs	r1, #0
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f001 f8be 	bl	800feb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed3e:	2300      	movs	r3, #0
 800ed40:	2200      	movs	r2, #0
 800ed42:	2100      	movs	r1, #0
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	f005 fde6 	bl	8014916 <USBD_LL_PrepareReceive>
 800ed4a:	e01c      	b.n	800ed86 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d10f      	bne.n	800ed78 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d009      	beq.n	800ed78 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2200      	movs	r2, #0
 800ed68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed78:	2180      	movs	r1, #128	; 0x80
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f005 fd21 	bl	80147c2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f001 f8cb 	bl	800ff1c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d03a      	beq.n	800ee06 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f7ff fe42 	bl	800ea1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ed9e:	e032      	b.n	800ee06 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800eda0:	7afb      	ldrb	r3, [r7, #11]
 800eda2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	4619      	mov	r1, r3
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f000 f985 	bl	800f0ba <USBD_CoreFindEP>
 800edb0:	4603      	mov	r3, r0
 800edb2:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800edb4:	7dfb      	ldrb	r3, [r7, #23]
 800edb6:	2bff      	cmp	r3, #255	; 0xff
 800edb8:	d025      	beq.n	800ee06 <USBD_LL_DataInStage+0x15a>
 800edba:	7dfb      	ldrb	r3, [r7, #23]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d122      	bne.n	800ee06 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	2b03      	cmp	r3, #3
 800edca:	d11c      	bne.n	800ee06 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800edcc:	7dfa      	ldrb	r2, [r7, #23]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	32ae      	adds	r2, #174	; 0xae
 800edd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edd6:	695b      	ldr	r3, [r3, #20]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d014      	beq.n	800ee06 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800eddc:	7dfa      	ldrb	r2, [r7, #23]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ede4:	7dfa      	ldrb	r2, [r7, #23]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	32ae      	adds	r2, #174	; 0xae
 800edea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edee:	695b      	ldr	r3, [r3, #20]
 800edf0:	7afa      	ldrb	r2, [r7, #11]
 800edf2:	4611      	mov	r1, r2
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	4798      	blx	r3
 800edf8:	4603      	mov	r3, r0
 800edfa:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800edfc:	7dbb      	ldrb	r3, [r7, #22]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ee02:	7dbb      	ldrb	r3, [r7, #22]
 800ee04:	e000      	b.n	800ee08 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3718      	adds	r7, #24
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d014      	beq.n	800ee76 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00e      	beq.n	800ee76 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	6852      	ldr	r2, [r2, #4]
 800ee64:	b2d2      	uxtb	r2, r2
 800ee66:	4611      	mov	r1, r2
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	4798      	blx	r3
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ee72:	2303      	movs	r3, #3
 800ee74:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee76:	2340      	movs	r3, #64	; 0x40
 800ee78:	2200      	movs	r2, #0
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f005 fc3c 	bl	80146fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2201      	movs	r2, #1
 800ee86:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2240      	movs	r2, #64	; 0x40
 800ee8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee92:	2340      	movs	r3, #64	; 0x40
 800ee94:	2200      	movs	r2, #0
 800ee96:	2180      	movs	r1, #128	; 0x80
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f005 fc2e 	bl	80146fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2201      	movs	r2, #1
 800eea2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2240      	movs	r2, #64	; 0x40
 800eea8:	621a      	str	r2, [r3, #32]

  return ret;
 800eeaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	460b      	mov	r3, r1
 800eebe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	78fa      	ldrb	r2, [r7, #3]
 800eec4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eec6:	2300      	movs	r3, #0
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	370c      	adds	r7, #12
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr

0800eed4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	2b04      	cmp	r3, #4
 800eee6:	d006      	beq.n	800eef6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeee:	b2da      	uxtb	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2204      	movs	r2, #4
 800eefa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eefe:	2300      	movs	r3, #0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	370c      	adds	r7, #12
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	d106      	bne.n	800ef2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ef26:	b2da      	uxtb	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	370c      	adds	r7, #12
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	2b03      	cmp	r3, #3
 800ef4e:	d110      	bne.n	800ef72 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00b      	beq.n	800ef72 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef60:	69db      	ldr	r3, [r3, #28]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d005      	beq.n	800ef72 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef6c:	69db      	ldr	r3, [r3, #28]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ef72:	2300      	movs	r3, #0
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	460b      	mov	r3, r1
 800ef86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	32ae      	adds	r2, #174	; 0xae
 800ef92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d101      	bne.n	800ef9e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ef9a:	2303      	movs	r3, #3
 800ef9c:	e01c      	b.n	800efd8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	2b03      	cmp	r3, #3
 800efa8:	d115      	bne.n	800efd6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	32ae      	adds	r2, #174	; 0xae
 800efb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efb8:	6a1b      	ldr	r3, [r3, #32]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00b      	beq.n	800efd6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	32ae      	adds	r2, #174	; 0xae
 800efc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	78fa      	ldrb	r2, [r7, #3]
 800efd0:	4611      	mov	r1, r2
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800efd6:	2300      	movs	r3, #0
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3708      	adds	r7, #8
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	460b      	mov	r3, r1
 800efea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	32ae      	adds	r2, #174	; 0xae
 800eff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d101      	bne.n	800f002 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800effe:	2303      	movs	r3, #3
 800f000:	e01c      	b.n	800f03c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f008:	b2db      	uxtb	r3, r3
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d115      	bne.n	800f03a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	32ae      	adds	r2, #174	; 0xae
 800f018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00b      	beq.n	800f03a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	32ae      	adds	r2, #174	; 0xae
 800f02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f032:	78fa      	ldrb	r2, [r7, #3]
 800f034:	4611      	mov	r1, r2
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b084      	sub	sp, #16
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f062:	2300      	movs	r3, #0
 800f064:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2201      	movs	r2, #1
 800f06a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f074:	2b00      	cmp	r3, #0
 800f076:	d00e      	beq.n	800f096 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	6852      	ldr	r2, [r2, #4]
 800f084:	b2d2      	uxtb	r2, r2
 800f086:	4611      	mov	r1, r2
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	4798      	blx	r3
 800f08c:	4603      	mov	r3, r0
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d001      	beq.n	800f096 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f092:	2303      	movs	r3, #3
 800f094:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f096:	7bfb      	ldrb	r3, [r7, #15]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3710      	adds	r7, #16
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f0ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	370c      	adds	r7, #12
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr

0800f0ba <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f0ba:	b480      	push	{r7}
 800f0bc:	b083      	sub	sp, #12
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f0c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b086      	sub	sp, #24
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	460b      	mov	r3, r1
 800f0de:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	885b      	ldrh	r3, [r3, #2]
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d920      	bls.n	800f13e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	b29b      	uxth	r3, r3
 800f102:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f104:	e013      	b.n	800f12e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f106:	f107 030a 	add.w	r3, r7, #10
 800f10a:	4619      	mov	r1, r3
 800f10c:	6978      	ldr	r0, [r7, #20]
 800f10e:	f000 f81b 	bl	800f148 <USBD_GetNextDesc>
 800f112:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	785b      	ldrb	r3, [r3, #1]
 800f118:	2b05      	cmp	r3, #5
 800f11a:	d108      	bne.n	800f12e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	789b      	ldrb	r3, [r3, #2]
 800f124:	78fa      	ldrb	r2, [r7, #3]
 800f126:	429a      	cmp	r2, r3
 800f128:	d008      	beq.n	800f13c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f12a:	2300      	movs	r3, #0
 800f12c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	885b      	ldrh	r3, [r3, #2]
 800f132:	b29a      	uxth	r2, r3
 800f134:	897b      	ldrh	r3, [r7, #10]
 800f136:	429a      	cmp	r2, r3
 800f138:	d8e5      	bhi.n	800f106 <USBD_GetEpDesc+0x32>
 800f13a:	e000      	b.n	800f13e <USBD_GetEpDesc+0x6a>
          break;
 800f13c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f13e:	693b      	ldr	r3, [r7, #16]
}
 800f140:	4618      	mov	r0, r3
 800f142:	3718      	adds	r7, #24
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	881a      	ldrh	r2, [r3, #0]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	b29b      	uxth	r3, r3
 800f160:	4413      	add	r3, r2
 800f162:	b29a      	uxth	r2, r3
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	461a      	mov	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4413      	add	r3, r2
 800f172:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f174:	68fb      	ldr	r3, [r7, #12]
}
 800f176:	4618      	mov	r0, r3
 800f178:	3714      	adds	r7, #20
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr

0800f182 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f182:	b480      	push	{r7}
 800f184:	b087      	sub	sp, #28
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	781b      	ldrb	r3, [r3, #0]
 800f192:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	3301      	adds	r3, #1
 800f198:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f1a0:	8a3b      	ldrh	r3, [r7, #16]
 800f1a2:	021b      	lsls	r3, r3, #8
 800f1a4:	b21a      	sxth	r2, r3
 800f1a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	b21b      	sxth	r3, r3
 800f1ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f1b0:	89fb      	ldrh	r3, [r7, #14]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	371c      	adds	r7, #28
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
	...

0800f1c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1d6:	2b40      	cmp	r3, #64	; 0x40
 800f1d8:	d005      	beq.n	800f1e6 <USBD_StdDevReq+0x26>
 800f1da:	2b40      	cmp	r3, #64	; 0x40
 800f1dc:	d857      	bhi.n	800f28e <USBD_StdDevReq+0xce>
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d00f      	beq.n	800f202 <USBD_StdDevReq+0x42>
 800f1e2:	2b20      	cmp	r3, #32
 800f1e4:	d153      	bne.n	800f28e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	32ae      	adds	r2, #174	; 0xae
 800f1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	6839      	ldr	r1, [r7, #0]
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	4798      	blx	r3
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800f200:	e04a      	b.n	800f298 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	785b      	ldrb	r3, [r3, #1]
 800f206:	2b09      	cmp	r3, #9
 800f208:	d83b      	bhi.n	800f282 <USBD_StdDevReq+0xc2>
 800f20a:	a201      	add	r2, pc, #4	; (adr r2, 800f210 <USBD_StdDevReq+0x50>)
 800f20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f210:	0800f265 	.word	0x0800f265
 800f214:	0800f279 	.word	0x0800f279
 800f218:	0800f283 	.word	0x0800f283
 800f21c:	0800f26f 	.word	0x0800f26f
 800f220:	0800f283 	.word	0x0800f283
 800f224:	0800f243 	.word	0x0800f243
 800f228:	0800f239 	.word	0x0800f239
 800f22c:	0800f283 	.word	0x0800f283
 800f230:	0800f25b 	.word	0x0800f25b
 800f234:	0800f24d 	.word	0x0800f24d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f238:	6839      	ldr	r1, [r7, #0]
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fa3c 	bl	800f6b8 <USBD_GetDescriptor>
          break;
 800f240:	e024      	b.n	800f28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f242:	6839      	ldr	r1, [r7, #0]
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 fbcb 	bl	800f9e0 <USBD_SetAddress>
          break;
 800f24a:	e01f      	b.n	800f28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f24c:	6839      	ldr	r1, [r7, #0]
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f000 fc0a 	bl	800fa68 <USBD_SetConfig>
 800f254:	4603      	mov	r3, r0
 800f256:	73fb      	strb	r3, [r7, #15]
          break;
 800f258:	e018      	b.n	800f28c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f25a:	6839      	ldr	r1, [r7, #0]
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 fcad 	bl	800fbbc <USBD_GetConfig>
          break;
 800f262:	e013      	b.n	800f28c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 fcde 	bl	800fc28 <USBD_GetStatus>
          break;
 800f26c:	e00e      	b.n	800f28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f26e:	6839      	ldr	r1, [r7, #0]
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 fd0d 	bl	800fc90 <USBD_SetFeature>
          break;
 800f276:	e009      	b.n	800f28c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f278:	6839      	ldr	r1, [r7, #0]
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 fd31 	bl	800fce2 <USBD_ClrFeature>
          break;
 800f280:	e004      	b.n	800f28c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f282:	6839      	ldr	r1, [r7, #0]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 fd88 	bl	800fd9a <USBD_CtlError>
          break;
 800f28a:	bf00      	nop
      }
      break;
 800f28c:	e004      	b.n	800f298 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f28e:	6839      	ldr	r1, [r7, #0]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 fd82 	bl	800fd9a <USBD_CtlError>
      break;
 800f296:	bf00      	nop
  }

  return ret;
 800f298:	7bfb      	ldrb	r3, [r7, #15]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop

0800f2a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2ba:	2b40      	cmp	r3, #64	; 0x40
 800f2bc:	d005      	beq.n	800f2ca <USBD_StdItfReq+0x26>
 800f2be:	2b40      	cmp	r3, #64	; 0x40
 800f2c0:	d852      	bhi.n	800f368 <USBD_StdItfReq+0xc4>
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d001      	beq.n	800f2ca <USBD_StdItfReq+0x26>
 800f2c6:	2b20      	cmp	r3, #32
 800f2c8:	d14e      	bne.n	800f368 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d840      	bhi.n	800f35a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	889b      	ldrh	r3, [r3, #4]
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	d836      	bhi.n	800f350 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	889b      	ldrh	r3, [r3, #4]
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f7ff fed8 	bl	800f0a0 <USBD_CoreFindIF>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f2f4:	7bbb      	ldrb	r3, [r7, #14]
 800f2f6:	2bff      	cmp	r3, #255	; 0xff
 800f2f8:	d01d      	beq.n	800f336 <USBD_StdItfReq+0x92>
 800f2fa:	7bbb      	ldrb	r3, [r7, #14]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d11a      	bne.n	800f336 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f300:	7bba      	ldrb	r2, [r7, #14]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	32ae      	adds	r2, #174	; 0xae
 800f306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00f      	beq.n	800f330 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f310:	7bba      	ldrb	r2, [r7, #14]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f318:	7bba      	ldrb	r2, [r7, #14]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	32ae      	adds	r2, #174	; 0xae
 800f31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	6839      	ldr	r1, [r7, #0]
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	4798      	blx	r3
 800f32a:	4603      	mov	r3, r0
 800f32c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f32e:	e004      	b.n	800f33a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f330:	2303      	movs	r3, #3
 800f332:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f334:	e001      	b.n	800f33a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f336:	2303      	movs	r3, #3
 800f338:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	88db      	ldrh	r3, [r3, #6]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d110      	bne.n	800f364 <USBD_StdItfReq+0xc0>
 800f342:	7bfb      	ldrb	r3, [r7, #15]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d10d      	bne.n	800f364 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 fdd4 	bl	800fef6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f34e:	e009      	b.n	800f364 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f350:	6839      	ldr	r1, [r7, #0]
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 fd21 	bl	800fd9a <USBD_CtlError>
          break;
 800f358:	e004      	b.n	800f364 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 fd1c 	bl	800fd9a <USBD_CtlError>
          break;
 800f362:	e000      	b.n	800f366 <USBD_StdItfReq+0xc2>
          break;
 800f364:	bf00      	nop
      }
      break;
 800f366:	e004      	b.n	800f372 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f368:	6839      	ldr	r1, [r7, #0]
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 fd15 	bl	800fd9a <USBD_CtlError>
      break;
 800f370:	bf00      	nop
  }

  return ret;
 800f372:	7bfb      	ldrb	r3, [r7, #15]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3710      	adds	r7, #16
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f386:	2300      	movs	r3, #0
 800f388:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	889b      	ldrh	r3, [r3, #4]
 800f38e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f398:	2b40      	cmp	r3, #64	; 0x40
 800f39a:	d007      	beq.n	800f3ac <USBD_StdEPReq+0x30>
 800f39c:	2b40      	cmp	r3, #64	; 0x40
 800f39e:	f200 817f 	bhi.w	800f6a0 <USBD_StdEPReq+0x324>
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d02a      	beq.n	800f3fc <USBD_StdEPReq+0x80>
 800f3a6:	2b20      	cmp	r3, #32
 800f3a8:	f040 817a 	bne.w	800f6a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f3ac:	7bbb      	ldrb	r3, [r7, #14]
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7ff fe82 	bl	800f0ba <USBD_CoreFindEP>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f3ba:	7b7b      	ldrb	r3, [r7, #13]
 800f3bc:	2bff      	cmp	r3, #255	; 0xff
 800f3be:	f000 8174 	beq.w	800f6aa <USBD_StdEPReq+0x32e>
 800f3c2:	7b7b      	ldrb	r3, [r7, #13]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f040 8170 	bne.w	800f6aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f3ca:	7b7a      	ldrb	r2, [r7, #13]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f3d2:	7b7a      	ldrb	r2, [r7, #13]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	32ae      	adds	r2, #174	; 0xae
 800f3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3dc:	689b      	ldr	r3, [r3, #8]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	f000 8163 	beq.w	800f6aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f3e4:	7b7a      	ldrb	r2, [r7, #13]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	32ae      	adds	r2, #174	; 0xae
 800f3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ee:	689b      	ldr	r3, [r3, #8]
 800f3f0:	6839      	ldr	r1, [r7, #0]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	4798      	blx	r3
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f3fa:	e156      	b.n	800f6aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	785b      	ldrb	r3, [r3, #1]
 800f400:	2b03      	cmp	r3, #3
 800f402:	d008      	beq.n	800f416 <USBD_StdEPReq+0x9a>
 800f404:	2b03      	cmp	r3, #3
 800f406:	f300 8145 	bgt.w	800f694 <USBD_StdEPReq+0x318>
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f000 809b 	beq.w	800f546 <USBD_StdEPReq+0x1ca>
 800f410:	2b01      	cmp	r3, #1
 800f412:	d03c      	beq.n	800f48e <USBD_StdEPReq+0x112>
 800f414:	e13e      	b.n	800f694 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	2b02      	cmp	r3, #2
 800f420:	d002      	beq.n	800f428 <USBD_StdEPReq+0xac>
 800f422:	2b03      	cmp	r3, #3
 800f424:	d016      	beq.n	800f454 <USBD_StdEPReq+0xd8>
 800f426:	e02c      	b.n	800f482 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f428:	7bbb      	ldrb	r3, [r7, #14]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00d      	beq.n	800f44a <USBD_StdEPReq+0xce>
 800f42e:	7bbb      	ldrb	r3, [r7, #14]
 800f430:	2b80      	cmp	r3, #128	; 0x80
 800f432:	d00a      	beq.n	800f44a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f434:	7bbb      	ldrb	r3, [r7, #14]
 800f436:	4619      	mov	r1, r3
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f005 f9c2 	bl	80147c2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f43e:	2180      	movs	r1, #128	; 0x80
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f005 f9be 	bl	80147c2 <USBD_LL_StallEP>
 800f446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f448:	e020      	b.n	800f48c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f44a:	6839      	ldr	r1, [r7, #0]
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 fca4 	bl	800fd9a <USBD_CtlError>
              break;
 800f452:	e01b      	b.n	800f48c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	885b      	ldrh	r3, [r3, #2]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10e      	bne.n	800f47a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f45c:	7bbb      	ldrb	r3, [r7, #14]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00b      	beq.n	800f47a <USBD_StdEPReq+0xfe>
 800f462:	7bbb      	ldrb	r3, [r7, #14]
 800f464:	2b80      	cmp	r3, #128	; 0x80
 800f466:	d008      	beq.n	800f47a <USBD_StdEPReq+0xfe>
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	88db      	ldrh	r3, [r3, #6]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d104      	bne.n	800f47a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f470:	7bbb      	ldrb	r3, [r7, #14]
 800f472:	4619      	mov	r1, r3
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f005 f9a4 	bl	80147c2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 fd3b 	bl	800fef6 <USBD_CtlSendStatus>

              break;
 800f480:	e004      	b.n	800f48c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f482:	6839      	ldr	r1, [r7, #0]
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 fc88 	bl	800fd9a <USBD_CtlError>
              break;
 800f48a:	bf00      	nop
          }
          break;
 800f48c:	e107      	b.n	800f69e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b02      	cmp	r3, #2
 800f498:	d002      	beq.n	800f4a0 <USBD_StdEPReq+0x124>
 800f49a:	2b03      	cmp	r3, #3
 800f49c:	d016      	beq.n	800f4cc <USBD_StdEPReq+0x150>
 800f49e:	e04b      	b.n	800f538 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4a0:	7bbb      	ldrb	r3, [r7, #14]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d00d      	beq.n	800f4c2 <USBD_StdEPReq+0x146>
 800f4a6:	7bbb      	ldrb	r3, [r7, #14]
 800f4a8:	2b80      	cmp	r3, #128	; 0x80
 800f4aa:	d00a      	beq.n	800f4c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4ac:	7bbb      	ldrb	r3, [r7, #14]
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f005 f986 	bl	80147c2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4b6:	2180      	movs	r1, #128	; 0x80
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f005 f982 	bl	80147c2 <USBD_LL_StallEP>
 800f4be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f4c0:	e040      	b.n	800f544 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f4c2:	6839      	ldr	r1, [r7, #0]
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fc68 	bl	800fd9a <USBD_CtlError>
              break;
 800f4ca:	e03b      	b.n	800f544 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	885b      	ldrh	r3, [r3, #2]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d136      	bne.n	800f542 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f4d4:	7bbb      	ldrb	r3, [r7, #14]
 800f4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d004      	beq.n	800f4e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f4de:	7bbb      	ldrb	r3, [r7, #14]
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f005 f98c 	bl	8014800 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f000 fd04 	bl	800fef6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f4ee:	7bbb      	ldrb	r3, [r7, #14]
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7ff fde1 	bl	800f0ba <USBD_CoreFindEP>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f4fc:	7b7b      	ldrb	r3, [r7, #13]
 800f4fe:	2bff      	cmp	r3, #255	; 0xff
 800f500:	d01f      	beq.n	800f542 <USBD_StdEPReq+0x1c6>
 800f502:	7b7b      	ldrb	r3, [r7, #13]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d11c      	bne.n	800f542 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f508:	7b7a      	ldrb	r2, [r7, #13]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f510:	7b7a      	ldrb	r2, [r7, #13]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	32ae      	adds	r2, #174	; 0xae
 800f516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d010      	beq.n	800f542 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f520:	7b7a      	ldrb	r2, [r7, #13]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	32ae      	adds	r2, #174	; 0xae
 800f526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	6839      	ldr	r1, [r7, #0]
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	4798      	blx	r3
 800f532:	4603      	mov	r3, r0
 800f534:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f536:	e004      	b.n	800f542 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f538:	6839      	ldr	r1, [r7, #0]
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 fc2d 	bl	800fd9a <USBD_CtlError>
              break;
 800f540:	e000      	b.n	800f544 <USBD_StdEPReq+0x1c8>
              break;
 800f542:	bf00      	nop
          }
          break;
 800f544:	e0ab      	b.n	800f69e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	2b02      	cmp	r3, #2
 800f550:	d002      	beq.n	800f558 <USBD_StdEPReq+0x1dc>
 800f552:	2b03      	cmp	r3, #3
 800f554:	d032      	beq.n	800f5bc <USBD_StdEPReq+0x240>
 800f556:	e097      	b.n	800f688 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f558:	7bbb      	ldrb	r3, [r7, #14]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d007      	beq.n	800f56e <USBD_StdEPReq+0x1f2>
 800f55e:	7bbb      	ldrb	r3, [r7, #14]
 800f560:	2b80      	cmp	r3, #128	; 0x80
 800f562:	d004      	beq.n	800f56e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f564:	6839      	ldr	r1, [r7, #0]
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 fc17 	bl	800fd9a <USBD_CtlError>
                break;
 800f56c:	e091      	b.n	800f692 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f56e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f572:	2b00      	cmp	r3, #0
 800f574:	da0b      	bge.n	800f58e <USBD_StdEPReq+0x212>
 800f576:	7bbb      	ldrb	r3, [r7, #14]
 800f578:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f57c:	4613      	mov	r3, r2
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	4413      	add	r3, r2
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	3310      	adds	r3, #16
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	4413      	add	r3, r2
 800f58a:	3304      	adds	r3, #4
 800f58c:	e00b      	b.n	800f5a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f58e:	7bbb      	ldrb	r3, [r7, #14]
 800f590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f594:	4613      	mov	r3, r2
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	4413      	add	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2202      	movs	r2, #2
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 fc61 	bl	800fe7c <USBD_CtlSendData>
              break;
 800f5ba:	e06a      	b.n	800f692 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f5bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	da11      	bge.n	800f5e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f5c4:	7bbb      	ldrb	r3, [r7, #14]
 800f5c6:	f003 020f 	and.w	r2, r3, #15
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	4413      	add	r3, r2
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	440b      	add	r3, r1
 800f5d6:	3324      	adds	r3, #36	; 0x24
 800f5d8:	881b      	ldrh	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d117      	bne.n	800f60e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f5de:	6839      	ldr	r1, [r7, #0]
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 fbda 	bl	800fd9a <USBD_CtlError>
                  break;
 800f5e6:	e054      	b.n	800f692 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f5e8:	7bbb      	ldrb	r3, [r7, #14]
 800f5ea:	f003 020f 	and.w	r2, r3, #15
 800f5ee:	6879      	ldr	r1, [r7, #4]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	4413      	add	r3, r2
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	440b      	add	r3, r1
 800f5fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f5fe:	881b      	ldrh	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d104      	bne.n	800f60e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f604:	6839      	ldr	r1, [r7, #0]
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 fbc7 	bl	800fd9a <USBD_CtlError>
                  break;
 800f60c:	e041      	b.n	800f692 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f60e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f612:	2b00      	cmp	r3, #0
 800f614:	da0b      	bge.n	800f62e <USBD_StdEPReq+0x2b2>
 800f616:	7bbb      	ldrb	r3, [r7, #14]
 800f618:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f61c:	4613      	mov	r3, r2
 800f61e:	009b      	lsls	r3, r3, #2
 800f620:	4413      	add	r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	3310      	adds	r3, #16
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	4413      	add	r3, r2
 800f62a:	3304      	adds	r3, #4
 800f62c:	e00b      	b.n	800f646 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f62e:	7bbb      	ldrb	r3, [r7, #14]
 800f630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f634:	4613      	mov	r3, r2
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	4413      	add	r3, r2
 800f63a:	009b      	lsls	r3, r3, #2
 800f63c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	4413      	add	r3, r2
 800f644:	3304      	adds	r3, #4
 800f646:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f648:	7bbb      	ldrb	r3, [r7, #14]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d002      	beq.n	800f654 <USBD_StdEPReq+0x2d8>
 800f64e:	7bbb      	ldrb	r3, [r7, #14]
 800f650:	2b80      	cmp	r3, #128	; 0x80
 800f652:	d103      	bne.n	800f65c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	2200      	movs	r2, #0
 800f658:	601a      	str	r2, [r3, #0]
 800f65a:	e00e      	b.n	800f67a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f65c:	7bbb      	ldrb	r3, [r7, #14]
 800f65e:	4619      	mov	r1, r3
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f005 f8ec 	bl	801483e <USBD_LL_IsStallEP>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d003      	beq.n	800f674 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	2201      	movs	r2, #1
 800f670:	601a      	str	r2, [r3, #0]
 800f672:	e002      	b.n	800f67a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	2200      	movs	r2, #0
 800f678:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	2202      	movs	r2, #2
 800f67e:	4619      	mov	r1, r3
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 fbfb 	bl	800fe7c <USBD_CtlSendData>
              break;
 800f686:	e004      	b.n	800f692 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f688:	6839      	ldr	r1, [r7, #0]
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 fb85 	bl	800fd9a <USBD_CtlError>
              break;
 800f690:	bf00      	nop
          }
          break;
 800f692:	e004      	b.n	800f69e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 fb7f 	bl	800fd9a <USBD_CtlError>
          break;
 800f69c:	bf00      	nop
      }
      break;
 800f69e:	e005      	b.n	800f6ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f6a0:	6839      	ldr	r1, [r7, #0]
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 fb79 	bl	800fd9a <USBD_CtlError>
      break;
 800f6a8:	e000      	b.n	800f6ac <USBD_StdEPReq+0x330>
      break;
 800f6aa:	bf00      	nop
  }

  return ret;
 800f6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
	...

0800f6b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	885b      	ldrh	r3, [r3, #2]
 800f6d2:	0a1b      	lsrs	r3, r3, #8
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	3b01      	subs	r3, #1
 800f6d8:	2b0e      	cmp	r3, #14
 800f6da:	f200 8152 	bhi.w	800f982 <USBD_GetDescriptor+0x2ca>
 800f6de:	a201      	add	r2, pc, #4	; (adr r2, 800f6e4 <USBD_GetDescriptor+0x2c>)
 800f6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e4:	0800f755 	.word	0x0800f755
 800f6e8:	0800f76d 	.word	0x0800f76d
 800f6ec:	0800f7ad 	.word	0x0800f7ad
 800f6f0:	0800f983 	.word	0x0800f983
 800f6f4:	0800f983 	.word	0x0800f983
 800f6f8:	0800f923 	.word	0x0800f923
 800f6fc:	0800f94f 	.word	0x0800f94f
 800f700:	0800f983 	.word	0x0800f983
 800f704:	0800f983 	.word	0x0800f983
 800f708:	0800f983 	.word	0x0800f983
 800f70c:	0800f983 	.word	0x0800f983
 800f710:	0800f983 	.word	0x0800f983
 800f714:	0800f983 	.word	0x0800f983
 800f718:	0800f983 	.word	0x0800f983
 800f71c:	0800f721 	.word	0x0800f721
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f726:	69db      	ldr	r3, [r3, #28]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00b      	beq.n	800f744 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f732:	69db      	ldr	r3, [r3, #28]
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	7c12      	ldrb	r2, [r2, #16]
 800f738:	f107 0108 	add.w	r1, r7, #8
 800f73c:	4610      	mov	r0, r2
 800f73e:	4798      	blx	r3
 800f740:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f742:	e126      	b.n	800f992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f744:	6839      	ldr	r1, [r7, #0]
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 fb27 	bl	800fd9a <USBD_CtlError>
        err++;
 800f74c:	7afb      	ldrb	r3, [r7, #11]
 800f74e:	3301      	adds	r3, #1
 800f750:	72fb      	strb	r3, [r7, #11]
      break;
 800f752:	e11e      	b.n	800f992 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	7c12      	ldrb	r2, [r2, #16]
 800f760:	f107 0108 	add.w	r1, r7, #8
 800f764:	4610      	mov	r0, r2
 800f766:	4798      	blx	r3
 800f768:	60f8      	str	r0, [r7, #12]
      break;
 800f76a:	e112      	b.n	800f992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	7c1b      	ldrb	r3, [r3, #16]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d10d      	bne.n	800f790 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f77c:	f107 0208 	add.w	r2, r7, #8
 800f780:	4610      	mov	r0, r2
 800f782:	4798      	blx	r3
 800f784:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	3301      	adds	r3, #1
 800f78a:	2202      	movs	r2, #2
 800f78c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f78e:	e100      	b.n	800f992 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f798:	f107 0208 	add.w	r2, r7, #8
 800f79c:	4610      	mov	r0, r2
 800f79e:	4798      	blx	r3
 800f7a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	2202      	movs	r2, #2
 800f7a8:	701a      	strb	r2, [r3, #0]
      break;
 800f7aa:	e0f2      	b.n	800f992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	885b      	ldrh	r3, [r3, #2]
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	2b05      	cmp	r3, #5
 800f7b4:	f200 80ac 	bhi.w	800f910 <USBD_GetDescriptor+0x258>
 800f7b8:	a201      	add	r2, pc, #4	; (adr r2, 800f7c0 <USBD_GetDescriptor+0x108>)
 800f7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7be:	bf00      	nop
 800f7c0:	0800f7d9 	.word	0x0800f7d9
 800f7c4:	0800f80d 	.word	0x0800f80d
 800f7c8:	0800f841 	.word	0x0800f841
 800f7cc:	0800f875 	.word	0x0800f875
 800f7d0:	0800f8a9 	.word	0x0800f8a9
 800f7d4:	0800f8dd 	.word	0x0800f8dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d00b      	beq.n	800f7fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	7c12      	ldrb	r2, [r2, #16]
 800f7f0:	f107 0108 	add.w	r1, r7, #8
 800f7f4:	4610      	mov	r0, r2
 800f7f6:	4798      	blx	r3
 800f7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7fa:	e091      	b.n	800f920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7fc:	6839      	ldr	r1, [r7, #0]
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 facb 	bl	800fd9a <USBD_CtlError>
            err++;
 800f804:	7afb      	ldrb	r3, [r7, #11]
 800f806:	3301      	adds	r3, #1
 800f808:	72fb      	strb	r3, [r7, #11]
          break;
 800f80a:	e089      	b.n	800f920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00b      	beq.n	800f830 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	7c12      	ldrb	r2, [r2, #16]
 800f824:	f107 0108 	add.w	r1, r7, #8
 800f828:	4610      	mov	r0, r2
 800f82a:	4798      	blx	r3
 800f82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f82e:	e077      	b.n	800f920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f830:	6839      	ldr	r1, [r7, #0]
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 fab1 	bl	800fd9a <USBD_CtlError>
            err++;
 800f838:	7afb      	ldrb	r3, [r7, #11]
 800f83a:	3301      	adds	r3, #1
 800f83c:	72fb      	strb	r3, [r7, #11]
          break;
 800f83e:	e06f      	b.n	800f920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00b      	beq.n	800f864 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	7c12      	ldrb	r2, [r2, #16]
 800f858:	f107 0108 	add.w	r1, r7, #8
 800f85c:	4610      	mov	r0, r2
 800f85e:	4798      	blx	r3
 800f860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f862:	e05d      	b.n	800f920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f864:	6839      	ldr	r1, [r7, #0]
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 fa97 	bl	800fd9a <USBD_CtlError>
            err++;
 800f86c:	7afb      	ldrb	r3, [r7, #11]
 800f86e:	3301      	adds	r3, #1
 800f870:	72fb      	strb	r3, [r7, #11]
          break;
 800f872:	e055      	b.n	800f920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d00b      	beq.n	800f898 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f886:	691b      	ldr	r3, [r3, #16]
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	7c12      	ldrb	r2, [r2, #16]
 800f88c:	f107 0108 	add.w	r1, r7, #8
 800f890:	4610      	mov	r0, r2
 800f892:	4798      	blx	r3
 800f894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f896:	e043      	b.n	800f920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f898:	6839      	ldr	r1, [r7, #0]
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 fa7d 	bl	800fd9a <USBD_CtlError>
            err++;
 800f8a0:	7afb      	ldrb	r3, [r7, #11]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	72fb      	strb	r3, [r7, #11]
          break;
 800f8a6:	e03b      	b.n	800f920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ae:	695b      	ldr	r3, [r3, #20]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00b      	beq.n	800f8cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ba:	695b      	ldr	r3, [r3, #20]
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	7c12      	ldrb	r2, [r2, #16]
 800f8c0:	f107 0108 	add.w	r1, r7, #8
 800f8c4:	4610      	mov	r0, r2
 800f8c6:	4798      	blx	r3
 800f8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8ca:	e029      	b.n	800f920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f8cc:	6839      	ldr	r1, [r7, #0]
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 fa63 	bl	800fd9a <USBD_CtlError>
            err++;
 800f8d4:	7afb      	ldrb	r3, [r7, #11]
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800f8da:	e021      	b.n	800f920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8e2:	699b      	ldr	r3, [r3, #24]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d00b      	beq.n	800f900 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ee:	699b      	ldr	r3, [r3, #24]
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	7c12      	ldrb	r2, [r2, #16]
 800f8f4:	f107 0108 	add.w	r1, r7, #8
 800f8f8:	4610      	mov	r0, r2
 800f8fa:	4798      	blx	r3
 800f8fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8fe:	e00f      	b.n	800f920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f900:	6839      	ldr	r1, [r7, #0]
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 fa49 	bl	800fd9a <USBD_CtlError>
            err++;
 800f908:	7afb      	ldrb	r3, [r7, #11]
 800f90a:	3301      	adds	r3, #1
 800f90c:	72fb      	strb	r3, [r7, #11]
          break;
 800f90e:	e007      	b.n	800f920 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f910:	6839      	ldr	r1, [r7, #0]
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fa41 	bl	800fd9a <USBD_CtlError>
          err++;
 800f918:	7afb      	ldrb	r3, [r7, #11]
 800f91a:	3301      	adds	r3, #1
 800f91c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f91e:	bf00      	nop
      }
      break;
 800f920:	e037      	b.n	800f992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	7c1b      	ldrb	r3, [r3, #16]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d109      	bne.n	800f93e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f932:	f107 0208 	add.w	r2, r7, #8
 800f936:	4610      	mov	r0, r2
 800f938:	4798      	blx	r3
 800f93a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f93c:	e029      	b.n	800f992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f93e:	6839      	ldr	r1, [r7, #0]
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f000 fa2a 	bl	800fd9a <USBD_CtlError>
        err++;
 800f946:	7afb      	ldrb	r3, [r7, #11]
 800f948:	3301      	adds	r3, #1
 800f94a:	72fb      	strb	r3, [r7, #11]
      break;
 800f94c:	e021      	b.n	800f992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	7c1b      	ldrb	r3, [r3, #16]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d10d      	bne.n	800f972 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f95e:	f107 0208 	add.w	r2, r7, #8
 800f962:	4610      	mov	r0, r2
 800f964:	4798      	blx	r3
 800f966:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	3301      	adds	r3, #1
 800f96c:	2207      	movs	r2, #7
 800f96e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f970:	e00f      	b.n	800f992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f972:	6839      	ldr	r1, [r7, #0]
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 fa10 	bl	800fd9a <USBD_CtlError>
        err++;
 800f97a:	7afb      	ldrb	r3, [r7, #11]
 800f97c:	3301      	adds	r3, #1
 800f97e:	72fb      	strb	r3, [r7, #11]
      break;
 800f980:	e007      	b.n	800f992 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f982:	6839      	ldr	r1, [r7, #0]
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 fa08 	bl	800fd9a <USBD_CtlError>
      err++;
 800f98a:	7afb      	ldrb	r3, [r7, #11]
 800f98c:	3301      	adds	r3, #1
 800f98e:	72fb      	strb	r3, [r7, #11]
      break;
 800f990:	bf00      	nop
  }

  if (err != 0U)
 800f992:	7afb      	ldrb	r3, [r7, #11]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d11e      	bne.n	800f9d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	88db      	ldrh	r3, [r3, #6]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d016      	beq.n	800f9ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f9a0:	893b      	ldrh	r3, [r7, #8]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00e      	beq.n	800f9c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	88da      	ldrh	r2, [r3, #6]
 800f9aa:	893b      	ldrh	r3, [r7, #8]
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	bf28      	it	cs
 800f9b0:	4613      	movcs	r3, r2
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f9b6:	893b      	ldrh	r3, [r7, #8]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	68f9      	ldr	r1, [r7, #12]
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f000 fa5d 	bl	800fe7c <USBD_CtlSendData>
 800f9c2:	e009      	b.n	800f9d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f9c4:	6839      	ldr	r1, [r7, #0]
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f9e7 	bl	800fd9a <USBD_CtlError>
 800f9cc:	e004      	b.n	800f9d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 fa91 	bl	800fef6 <USBD_CtlSendStatus>
 800f9d4:	e000      	b.n	800f9d8 <USBD_GetDescriptor+0x320>
    return;
 800f9d6:	bf00      	nop
  }
}
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop

0800f9e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	889b      	ldrh	r3, [r3, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d131      	bne.n	800fa56 <USBD_SetAddress+0x76>
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	88db      	ldrh	r3, [r3, #6]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d12d      	bne.n	800fa56 <USBD_SetAddress+0x76>
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	885b      	ldrh	r3, [r3, #2]
 800f9fe:	2b7f      	cmp	r3, #127	; 0x7f
 800fa00:	d829      	bhi.n	800fa56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	885b      	ldrh	r3, [r3, #2]
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	2b03      	cmp	r3, #3
 800fa18:	d104      	bne.n	800fa24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 f9bc 	bl	800fd9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa22:	e01d      	b.n	800fa60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	7bfa      	ldrb	r2, [r7, #15]
 800fa28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fa2c:	7bfb      	ldrb	r3, [r7, #15]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f004 ff30 	bl	8014896 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 fa5d 	bl	800fef6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fa3c:	7bfb      	ldrb	r3, [r7, #15]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d004      	beq.n	800fa4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2202      	movs	r2, #2
 800fa46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa4a:	e009      	b.n	800fa60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa54:	e004      	b.n	800fa60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fa56:	6839      	ldr	r1, [r7, #0]
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 f99e 	bl	800fd9a <USBD_CtlError>
  }
}
 800fa5e:	bf00      	nop
 800fa60:	bf00      	nop
 800fa62:	3710      	adds	r7, #16
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa72:	2300      	movs	r3, #0
 800fa74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	885b      	ldrh	r3, [r3, #2]
 800fa7a:	b2da      	uxtb	r2, r3
 800fa7c:	4b4e      	ldr	r3, [pc, #312]	; (800fbb8 <USBD_SetConfig+0x150>)
 800fa7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fa80:	4b4d      	ldr	r3, [pc, #308]	; (800fbb8 <USBD_SetConfig+0x150>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d905      	bls.n	800fa94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fa88:	6839      	ldr	r1, [r7, #0]
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 f985 	bl	800fd9a <USBD_CtlError>
    return USBD_FAIL;
 800fa90:	2303      	movs	r3, #3
 800fa92:	e08c      	b.n	800fbae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b02      	cmp	r3, #2
 800fa9e:	d002      	beq.n	800faa6 <USBD_SetConfig+0x3e>
 800faa0:	2b03      	cmp	r3, #3
 800faa2:	d029      	beq.n	800faf8 <USBD_SetConfig+0x90>
 800faa4:	e075      	b.n	800fb92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800faa6:	4b44      	ldr	r3, [pc, #272]	; (800fbb8 <USBD_SetConfig+0x150>)
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d020      	beq.n	800faf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800faae:	4b42      	ldr	r3, [pc, #264]	; (800fbb8 <USBD_SetConfig+0x150>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	461a      	mov	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fab8:	4b3f      	ldr	r3, [pc, #252]	; (800fbb8 <USBD_SetConfig+0x150>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	4619      	mov	r1, r3
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f7fe ffb6 	bl	800ea30 <USBD_SetClassConfig>
 800fac4:	4603      	mov	r3, r0
 800fac6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fac8:	7bfb      	ldrb	r3, [r7, #15]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d008      	beq.n	800fae0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800face:	6839      	ldr	r1, [r7, #0]
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 f962 	bl	800fd9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2202      	movs	r2, #2
 800fada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fade:	e065      	b.n	800fbac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 fa08 	bl	800fef6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2203      	movs	r2, #3
 800faea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800faee:	e05d      	b.n	800fbac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 fa00 	bl	800fef6 <USBD_CtlSendStatus>
      break;
 800faf6:	e059      	b.n	800fbac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800faf8:	4b2f      	ldr	r3, [pc, #188]	; (800fbb8 <USBD_SetConfig+0x150>)
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d112      	bne.n	800fb26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2202      	movs	r2, #2
 800fb04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fb08:	4b2b      	ldr	r3, [pc, #172]	; (800fbb8 <USBD_SetConfig+0x150>)
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb12:	4b29      	ldr	r3, [pc, #164]	; (800fbb8 <USBD_SetConfig+0x150>)
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	4619      	mov	r1, r3
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7fe ffa5 	bl	800ea68 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 f9e9 	bl	800fef6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fb24:	e042      	b.n	800fbac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fb26:	4b24      	ldr	r3, [pc, #144]	; (800fbb8 <USBD_SetConfig+0x150>)
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	685b      	ldr	r3, [r3, #4]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d02a      	beq.n	800fb8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7fe ff93 	bl	800ea68 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fb42:	4b1d      	ldr	r3, [pc, #116]	; (800fbb8 <USBD_SetConfig+0x150>)
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	461a      	mov	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fb4c:	4b1a      	ldr	r3, [pc, #104]	; (800fbb8 <USBD_SetConfig+0x150>)
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	4619      	mov	r1, r3
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f7fe ff6c 	bl	800ea30 <USBD_SetClassConfig>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fb5c:	7bfb      	ldrb	r3, [r7, #15]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00f      	beq.n	800fb82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fb62:	6839      	ldr	r1, [r7, #0]
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 f918 	bl	800fd9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	4619      	mov	r1, r3
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f7fe ff78 	bl	800ea68 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2202      	movs	r2, #2
 800fb7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fb80:	e014      	b.n	800fbac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 f9b7 	bl	800fef6 <USBD_CtlSendStatus>
      break;
 800fb88:	e010      	b.n	800fbac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 f9b3 	bl	800fef6 <USBD_CtlSendStatus>
      break;
 800fb90:	e00c      	b.n	800fbac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fb92:	6839      	ldr	r1, [r7, #0]
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 f900 	bl	800fd9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb9a:	4b07      	ldr	r3, [pc, #28]	; (800fbb8 <USBD_SetConfig+0x150>)
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	4619      	mov	r1, r3
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f7fe ff61 	bl	800ea68 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fba6:	2303      	movs	r3, #3
 800fba8:	73fb      	strb	r3, [r7, #15]
      break;
 800fbaa:	bf00      	nop
  }

  return ret;
 800fbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	240002fc 	.word	0x240002fc

0800fbbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	88db      	ldrh	r3, [r3, #6]
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d004      	beq.n	800fbd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fbce:	6839      	ldr	r1, [r7, #0]
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 f8e2 	bl	800fd9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fbd6:	e023      	b.n	800fc20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	2b02      	cmp	r3, #2
 800fbe2:	dc02      	bgt.n	800fbea <USBD_GetConfig+0x2e>
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	dc03      	bgt.n	800fbf0 <USBD_GetConfig+0x34>
 800fbe8:	e015      	b.n	800fc16 <USBD_GetConfig+0x5a>
 800fbea:	2b03      	cmp	r3, #3
 800fbec:	d00b      	beq.n	800fc06 <USBD_GetConfig+0x4a>
 800fbee:	e012      	b.n	800fc16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	3308      	adds	r3, #8
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 f93c 	bl	800fe7c <USBD_CtlSendData>
        break;
 800fc04:	e00c      	b.n	800fc20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	3304      	adds	r3, #4
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 f934 	bl	800fe7c <USBD_CtlSendData>
        break;
 800fc14:	e004      	b.n	800fc20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fc16:	6839      	ldr	r1, [r7, #0]
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 f8be 	bl	800fd9a <USBD_CtlError>
        break;
 800fc1e:	bf00      	nop
}
 800fc20:	bf00      	nop
 800fc22:	3708      	adds	r7, #8
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}

0800fc28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	3b01      	subs	r3, #1
 800fc3c:	2b02      	cmp	r3, #2
 800fc3e:	d81e      	bhi.n	800fc7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	88db      	ldrh	r3, [r3, #6]
 800fc44:	2b02      	cmp	r3, #2
 800fc46:	d004      	beq.n	800fc52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 f8a5 	bl	800fd9a <USBD_CtlError>
        break;
 800fc50:	e01a      	b.n	800fc88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2201      	movs	r2, #1
 800fc56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d005      	beq.n	800fc6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	f043 0202 	orr.w	r2, r3, #2
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	330c      	adds	r3, #12
 800fc72:	2202      	movs	r2, #2
 800fc74:	4619      	mov	r1, r3
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f900 	bl	800fe7c <USBD_CtlSendData>
      break;
 800fc7c:	e004      	b.n	800fc88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fc7e:	6839      	ldr	r1, [r7, #0]
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 f88a 	bl	800fd9a <USBD_CtlError>
      break;
 800fc86:	bf00      	nop
  }
}
 800fc88:	bf00      	nop
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	885b      	ldrh	r3, [r3, #2]
 800fc9e:	2b01      	cmp	r3, #1
 800fca0:	d107      	bne.n	800fcb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2201      	movs	r2, #1
 800fca6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 f923 	bl	800fef6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fcb0:	e013      	b.n	800fcda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	885b      	ldrh	r3, [r3, #2]
 800fcb6:	2b02      	cmp	r3, #2
 800fcb8:	d10b      	bne.n	800fcd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	889b      	ldrh	r3, [r3, #4]
 800fcbe:	0a1b      	lsrs	r3, r3, #8
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	b2da      	uxtb	r2, r3
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 f913 	bl	800fef6 <USBD_CtlSendStatus>
}
 800fcd0:	e003      	b.n	800fcda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fcd2:	6839      	ldr	r1, [r7, #0]
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f000 f860 	bl	800fd9a <USBD_CtlError>
}
 800fcda:	bf00      	nop
 800fcdc:	3708      	adds	r7, #8
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fce2:	b580      	push	{r7, lr}
 800fce4:	b082      	sub	sp, #8
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
 800fcea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	2b02      	cmp	r3, #2
 800fcf8:	d80b      	bhi.n	800fd12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	885b      	ldrh	r3, [r3, #2]
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d10c      	bne.n	800fd1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 f8f3 	bl	800fef6 <USBD_CtlSendStatus>
      }
      break;
 800fd10:	e004      	b.n	800fd1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fd12:	6839      	ldr	r1, [r7, #0]
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 f840 	bl	800fd9a <USBD_CtlError>
      break;
 800fd1a:	e000      	b.n	800fd1e <USBD_ClrFeature+0x3c>
      break;
 800fd1c:	bf00      	nop
  }
}
 800fd1e:	bf00      	nop
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}

0800fd26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fd26:	b580      	push	{r7, lr}
 800fd28:	b084      	sub	sp, #16
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
 800fd2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	781a      	ldrb	r2, [r3, #0]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	3301      	adds	r3, #1
 800fd40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	781a      	ldrb	r2, [r3, #0]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fd50:	68f8      	ldr	r0, [r7, #12]
 800fd52:	f7ff fa16 	bl	800f182 <SWAPBYTE>
 800fd56:	4603      	mov	r3, r0
 800fd58:	461a      	mov	r2, r3
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	3301      	adds	r3, #1
 800fd62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	3301      	adds	r3, #1
 800fd68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fd6a:	68f8      	ldr	r0, [r7, #12]
 800fd6c:	f7ff fa09 	bl	800f182 <SWAPBYTE>
 800fd70:	4603      	mov	r3, r0
 800fd72:	461a      	mov	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	3301      	adds	r3, #1
 800fd82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f7ff f9fc 	bl	800f182 <SWAPBYTE>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	80da      	strh	r2, [r3, #6]
}
 800fd92:	bf00      	nop
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}

0800fd9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b082      	sub	sp, #8
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
 800fda2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fda4:	2180      	movs	r1, #128	; 0x80
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f004 fd0b 	bl	80147c2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fdac:	2100      	movs	r1, #0
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f004 fd07 	bl	80147c2 <USBD_LL_StallEP>
}
 800fdb4:	bf00      	nop
 800fdb6:	3708      	adds	r7, #8
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b086      	sub	sp, #24
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d036      	beq.n	800fe40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fdd6:	6938      	ldr	r0, [r7, #16]
 800fdd8:	f000 f836 	bl	800fe48 <USBD_GetLen>
 800fddc:	4603      	mov	r3, r0
 800fdde:	3301      	adds	r3, #1
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	005b      	lsls	r3, r3, #1
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fdea:	7dfb      	ldrb	r3, [r7, #23]
 800fdec:	68ba      	ldr	r2, [r7, #8]
 800fdee:	4413      	add	r3, r2
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	7812      	ldrb	r2, [r2, #0]
 800fdf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800fdf6:	7dfb      	ldrb	r3, [r7, #23]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fdfc:	7dfb      	ldrb	r3, [r7, #23]
 800fdfe:	68ba      	ldr	r2, [r7, #8]
 800fe00:	4413      	add	r3, r2
 800fe02:	2203      	movs	r2, #3
 800fe04:	701a      	strb	r2, [r3, #0]
  idx++;
 800fe06:	7dfb      	ldrb	r3, [r7, #23]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fe0c:	e013      	b.n	800fe36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fe0e:	7dfb      	ldrb	r3, [r7, #23]
 800fe10:	68ba      	ldr	r2, [r7, #8]
 800fe12:	4413      	add	r3, r2
 800fe14:	693a      	ldr	r2, [r7, #16]
 800fe16:	7812      	ldrb	r2, [r2, #0]
 800fe18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	613b      	str	r3, [r7, #16]
    idx++;
 800fe20:	7dfb      	ldrb	r3, [r7, #23]
 800fe22:	3301      	adds	r3, #1
 800fe24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fe26:	7dfb      	ldrb	r3, [r7, #23]
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	701a      	strb	r2, [r3, #0]
    idx++;
 800fe30:	7dfb      	ldrb	r3, [r7, #23]
 800fe32:	3301      	adds	r3, #1
 800fe34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d1e7      	bne.n	800fe0e <USBD_GetString+0x52>
 800fe3e:	e000      	b.n	800fe42 <USBD_GetString+0x86>
    return;
 800fe40:	bf00      	nop
  }
}
 800fe42:	3718      	adds	r7, #24
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fe50:	2300      	movs	r3, #0
 800fe52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fe58:	e005      	b.n	800fe66 <USBD_GetLen+0x1e>
  {
    len++;
 800fe5a:	7bfb      	ldrb	r3, [r7, #15]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	3301      	adds	r3, #1
 800fe64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d1f5      	bne.n	800fe5a <USBD_GetLen+0x12>
  }

  return len;
 800fe6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3714      	adds	r7, #20
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2202      	movs	r2, #2
 800fe8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	68ba      	ldr	r2, [r7, #8]
 800fea0:	2100      	movs	r1, #0
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	f004 fd16 	bl	80148d4 <USBD_LL_Transmit>

  return USBD_OK;
 800fea8:	2300      	movs	r3, #0
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3710      	adds	r7, #16
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}

0800feb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800feb2:	b580      	push	{r7, lr}
 800feb4:	b084      	sub	sp, #16
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	60f8      	str	r0, [r7, #12]
 800feba:	60b9      	str	r1, [r7, #8]
 800febc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	68ba      	ldr	r2, [r7, #8]
 800fec2:	2100      	movs	r1, #0
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	f004 fd05 	bl	80148d4 <USBD_LL_Transmit>

  return USBD_OK;
 800feca:	2300      	movs	r3, #0
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	68ba      	ldr	r2, [r7, #8]
 800fee4:	2100      	movs	r1, #0
 800fee6:	68f8      	ldr	r0, [r7, #12]
 800fee8:	f004 fd15 	bl	8014916 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800feec:	2300      	movs	r3, #0
}
 800feee:	4618      	mov	r0, r3
 800fef0:	3710      	adds	r7, #16
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}

0800fef6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fef6:	b580      	push	{r7, lr}
 800fef8:	b082      	sub	sp, #8
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2204      	movs	r2, #4
 800ff02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ff06:	2300      	movs	r3, #0
 800ff08:	2200      	movs	r2, #0
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f004 fce1 	bl	80148d4 <USBD_LL_Transmit>

  return USBD_OK;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2205      	movs	r2, #5
 800ff28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	2200      	movs	r2, #0
 800ff30:	2100      	movs	r1, #0
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f004 fcef 	bl	8014916 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3708      	adds	r7, #8
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
	...

0800ff44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ff4e:	79fb      	ldrb	r3, [r7, #7]
 800ff50:	4a08      	ldr	r2, [pc, #32]	; (800ff74 <disk_status+0x30>)
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	4413      	add	r3, r2
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	79fa      	ldrb	r2, [r7, #7]
 800ff5c:	4905      	ldr	r1, [pc, #20]	; (800ff74 <disk_status+0x30>)
 800ff5e:	440a      	add	r2, r1
 800ff60:	7a12      	ldrb	r2, [r2, #8]
 800ff62:	4610      	mov	r0, r2
 800ff64:	4798      	blx	r3
 800ff66:	4603      	mov	r3, r0
 800ff68:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ff6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	24000328 	.word	0x24000328

0800ff78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ff82:	2300      	movs	r3, #0
 800ff84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ff86:	79fb      	ldrb	r3, [r7, #7]
 800ff88:	4a0d      	ldr	r2, [pc, #52]	; (800ffc0 <disk_initialize+0x48>)
 800ff8a:	5cd3      	ldrb	r3, [r2, r3]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d111      	bne.n	800ffb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ff90:	79fb      	ldrb	r3, [r7, #7]
 800ff92:	4a0b      	ldr	r2, [pc, #44]	; (800ffc0 <disk_initialize+0x48>)
 800ff94:	2101      	movs	r1, #1
 800ff96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ff98:	79fb      	ldrb	r3, [r7, #7]
 800ff9a:	4a09      	ldr	r2, [pc, #36]	; (800ffc0 <disk_initialize+0x48>)
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	4413      	add	r3, r2
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	79fa      	ldrb	r2, [r7, #7]
 800ffa6:	4906      	ldr	r1, [pc, #24]	; (800ffc0 <disk_initialize+0x48>)
 800ffa8:	440a      	add	r2, r1
 800ffaa:	7a12      	ldrb	r2, [r2, #8]
 800ffac:	4610      	mov	r0, r2
 800ffae:	4798      	blx	r3
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ffb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3710      	adds	r7, #16
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	24000328 	.word	0x24000328

0800ffc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ffc4:	b590      	push	{r4, r7, lr}
 800ffc6:	b087      	sub	sp, #28
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60b9      	str	r1, [r7, #8]
 800ffcc:	607a      	str	r2, [r7, #4]
 800ffce:	603b      	str	r3, [r7, #0]
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ffd4:	7bfb      	ldrb	r3, [r7, #15]
 800ffd6:	4a0a      	ldr	r2, [pc, #40]	; (8010000 <disk_read+0x3c>)
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	4413      	add	r3, r2
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	689c      	ldr	r4, [r3, #8]
 800ffe0:	7bfb      	ldrb	r3, [r7, #15]
 800ffe2:	4a07      	ldr	r2, [pc, #28]	; (8010000 <disk_read+0x3c>)
 800ffe4:	4413      	add	r3, r2
 800ffe6:	7a18      	ldrb	r0, [r3, #8]
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	68b9      	ldr	r1, [r7, #8]
 800ffee:	47a0      	blx	r4
 800fff0:	4603      	mov	r3, r0
 800fff2:	75fb      	strb	r3, [r7, #23]
  return res;
 800fff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	371c      	adds	r7, #28
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd90      	pop	{r4, r7, pc}
 800fffe:	bf00      	nop
 8010000:	24000328 	.word	0x24000328

08010004 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010004:	b590      	push	{r4, r7, lr}
 8010006:	b087      	sub	sp, #28
 8010008:	af00      	add	r7, sp, #0
 801000a:	60b9      	str	r1, [r7, #8]
 801000c:	607a      	str	r2, [r7, #4]
 801000e:	603b      	str	r3, [r7, #0]
 8010010:	4603      	mov	r3, r0
 8010012:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010014:	7bfb      	ldrb	r3, [r7, #15]
 8010016:	4a0a      	ldr	r2, [pc, #40]	; (8010040 <disk_write+0x3c>)
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	4413      	add	r3, r2
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	68dc      	ldr	r4, [r3, #12]
 8010020:	7bfb      	ldrb	r3, [r7, #15]
 8010022:	4a07      	ldr	r2, [pc, #28]	; (8010040 <disk_write+0x3c>)
 8010024:	4413      	add	r3, r2
 8010026:	7a18      	ldrb	r0, [r3, #8]
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	68b9      	ldr	r1, [r7, #8]
 801002e:	47a0      	blx	r4
 8010030:	4603      	mov	r3, r0
 8010032:	75fb      	strb	r3, [r7, #23]
  return res;
 8010034:	7dfb      	ldrb	r3, [r7, #23]
}
 8010036:	4618      	mov	r0, r3
 8010038:	371c      	adds	r7, #28
 801003a:	46bd      	mov	sp, r7
 801003c:	bd90      	pop	{r4, r7, pc}
 801003e:	bf00      	nop
 8010040:	24000328 	.word	0x24000328

08010044 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	4603      	mov	r3, r0
 801004c:	603a      	str	r2, [r7, #0]
 801004e:	71fb      	strb	r3, [r7, #7]
 8010050:	460b      	mov	r3, r1
 8010052:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010054:	79fb      	ldrb	r3, [r7, #7]
 8010056:	4a09      	ldr	r2, [pc, #36]	; (801007c <disk_ioctl+0x38>)
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4413      	add	r3, r2
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	691b      	ldr	r3, [r3, #16]
 8010060:	79fa      	ldrb	r2, [r7, #7]
 8010062:	4906      	ldr	r1, [pc, #24]	; (801007c <disk_ioctl+0x38>)
 8010064:	440a      	add	r2, r1
 8010066:	7a10      	ldrb	r0, [r2, #8]
 8010068:	79b9      	ldrb	r1, [r7, #6]
 801006a:	683a      	ldr	r2, [r7, #0]
 801006c:	4798      	blx	r3
 801006e:	4603      	mov	r3, r0
 8010070:	73fb      	strb	r3, [r7, #15]
  return res;
 8010072:	7bfb      	ldrb	r3, [r7, #15]
}
 8010074:	4618      	mov	r0, r3
 8010076:	3710      	adds	r7, #16
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	24000328 	.word	0x24000328

08010080 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010080:	b480      	push	{r7}
 8010082:	b085      	sub	sp, #20
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	3301      	adds	r3, #1
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010090:	89fb      	ldrh	r3, [r7, #14]
 8010092:	021b      	lsls	r3, r3, #8
 8010094:	b21a      	sxth	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	b21b      	sxth	r3, r3
 801009c:	4313      	orrs	r3, r2
 801009e:	b21b      	sxth	r3, r3
 80100a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80100a2:	89fb      	ldrh	r3, [r7, #14]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3714      	adds	r7, #20
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80100b0:	b480      	push	{r7}
 80100b2:	b085      	sub	sp, #20
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	3303      	adds	r3, #3
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	021b      	lsls	r3, r3, #8
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	3202      	adds	r2, #2
 80100c8:	7812      	ldrb	r2, [r2, #0]
 80100ca:	4313      	orrs	r3, r2
 80100cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	021b      	lsls	r3, r3, #8
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	3201      	adds	r2, #1
 80100d6:	7812      	ldrb	r2, [r2, #0]
 80100d8:	4313      	orrs	r3, r2
 80100da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	021b      	lsls	r3, r3, #8
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	7812      	ldrb	r2, [r2, #0]
 80100e4:	4313      	orrs	r3, r2
 80100e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80100e8:	68fb      	ldr	r3, [r7, #12]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3714      	adds	r7, #20
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr

080100f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80100f6:	b480      	push	{r7}
 80100f8:	b083      	sub	sp, #12
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	460b      	mov	r3, r1
 8010100:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	1c5a      	adds	r2, r3, #1
 8010106:	607a      	str	r2, [r7, #4]
 8010108:	887a      	ldrh	r2, [r7, #2]
 801010a:	b2d2      	uxtb	r2, r2
 801010c:	701a      	strb	r2, [r3, #0]
 801010e:	887b      	ldrh	r3, [r7, #2]
 8010110:	0a1b      	lsrs	r3, r3, #8
 8010112:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	1c5a      	adds	r2, r3, #1
 8010118:	607a      	str	r2, [r7, #4]
 801011a:	887a      	ldrh	r2, [r7, #2]
 801011c:	b2d2      	uxtb	r2, r2
 801011e:	701a      	strb	r2, [r3, #0]
}
 8010120:	bf00      	nop
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	1c5a      	adds	r2, r3, #1
 801013a:	607a      	str	r2, [r7, #4]
 801013c:	683a      	ldr	r2, [r7, #0]
 801013e:	b2d2      	uxtb	r2, r2
 8010140:	701a      	strb	r2, [r3, #0]
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	0a1b      	lsrs	r3, r3, #8
 8010146:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	1c5a      	adds	r2, r3, #1
 801014c:	607a      	str	r2, [r7, #4]
 801014e:	683a      	ldr	r2, [r7, #0]
 8010150:	b2d2      	uxtb	r2, r2
 8010152:	701a      	strb	r2, [r3, #0]
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	0a1b      	lsrs	r3, r3, #8
 8010158:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	1c5a      	adds	r2, r3, #1
 801015e:	607a      	str	r2, [r7, #4]
 8010160:	683a      	ldr	r2, [r7, #0]
 8010162:	b2d2      	uxtb	r2, r2
 8010164:	701a      	strb	r2, [r3, #0]
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	0a1b      	lsrs	r3, r3, #8
 801016a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	1c5a      	adds	r2, r3, #1
 8010170:	607a      	str	r2, [r7, #4]
 8010172:	683a      	ldr	r2, [r7, #0]
 8010174:	b2d2      	uxtb	r2, r2
 8010176:	701a      	strb	r2, [r3, #0]
}
 8010178:	bf00      	nop
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010184:	b480      	push	{r7}
 8010186:	b087      	sub	sp, #28
 8010188:	af00      	add	r7, sp, #0
 801018a:	60f8      	str	r0, [r7, #12]
 801018c:	60b9      	str	r1, [r7, #8]
 801018e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d00d      	beq.n	80101ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801019e:	693a      	ldr	r2, [r7, #16]
 80101a0:	1c53      	adds	r3, r2, #1
 80101a2:	613b      	str	r3, [r7, #16]
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	1c59      	adds	r1, r3, #1
 80101a8:	6179      	str	r1, [r7, #20]
 80101aa:	7812      	ldrb	r2, [r2, #0]
 80101ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	3b01      	subs	r3, #1
 80101b2:	607b      	str	r3, [r7, #4]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d1f1      	bne.n	801019e <mem_cpy+0x1a>
	}
}
 80101ba:	bf00      	nop
 80101bc:	371c      	adds	r7, #28
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr

080101c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80101c6:	b480      	push	{r7}
 80101c8:	b087      	sub	sp, #28
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	60f8      	str	r0, [r7, #12]
 80101ce:	60b9      	str	r1, [r7, #8]
 80101d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	1c5a      	adds	r2, r3, #1
 80101da:	617a      	str	r2, [r7, #20]
 80101dc:	68ba      	ldr	r2, [r7, #8]
 80101de:	b2d2      	uxtb	r2, r2
 80101e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	607b      	str	r3, [r7, #4]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d1f3      	bne.n	80101d6 <mem_set+0x10>
}
 80101ee:	bf00      	nop
 80101f0:	bf00      	nop
 80101f2:	371c      	adds	r7, #28
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80101fc:	b480      	push	{r7}
 80101fe:	b089      	sub	sp, #36	; 0x24
 8010200:	af00      	add	r7, sp, #0
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	60b9      	str	r1, [r7, #8]
 8010206:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	61fb      	str	r3, [r7, #28]
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010210:	2300      	movs	r3, #0
 8010212:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	1c5a      	adds	r2, r3, #1
 8010218:	61fa      	str	r2, [r7, #28]
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	4619      	mov	r1, r3
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	1c5a      	adds	r2, r3, #1
 8010222:	61ba      	str	r2, [r7, #24]
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	1acb      	subs	r3, r1, r3
 8010228:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	3b01      	subs	r3, #1
 801022e:	607b      	str	r3, [r7, #4]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d002      	beq.n	801023c <mem_cmp+0x40>
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d0eb      	beq.n	8010214 <mem_cmp+0x18>

	return r;
 801023c:	697b      	ldr	r3, [r7, #20]
}
 801023e:	4618      	mov	r0, r3
 8010240:	3724      	adds	r7, #36	; 0x24
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr

0801024a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801024a:	b480      	push	{r7}
 801024c:	b083      	sub	sp, #12
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
 8010252:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010254:	e002      	b.n	801025c <chk_chr+0x12>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	3301      	adds	r3, #1
 801025a:	607b      	str	r3, [r7, #4]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d005      	beq.n	8010270 <chk_chr+0x26>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	461a      	mov	r2, r3
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	4293      	cmp	r3, r2
 801026e:	d1f2      	bne.n	8010256 <chk_chr+0xc>
	return *str;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	781b      	ldrb	r3, [r3, #0]
}
 8010274:	4618      	mov	r0, r3
 8010276:	370c      	adds	r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010280:	b480      	push	{r7}
 8010282:	b085      	sub	sp, #20
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801028a:	2300      	movs	r3, #0
 801028c:	60bb      	str	r3, [r7, #8]
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	60fb      	str	r3, [r7, #12]
 8010292:	e029      	b.n	80102e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010294:	4a27      	ldr	r2, [pc, #156]	; (8010334 <chk_lock+0xb4>)
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	011b      	lsls	r3, r3, #4
 801029a:	4413      	add	r3, r2
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d01d      	beq.n	80102de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80102a2:	4a24      	ldr	r2, [pc, #144]	; (8010334 <chk_lock+0xb4>)
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	011b      	lsls	r3, r3, #4
 80102a8:	4413      	add	r3, r2
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d116      	bne.n	80102e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80102b4:	4a1f      	ldr	r2, [pc, #124]	; (8010334 <chk_lock+0xb4>)
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	011b      	lsls	r3, r3, #4
 80102ba:	4413      	add	r3, r2
 80102bc:	3304      	adds	r3, #4
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d10c      	bne.n	80102e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80102c8:	4a1a      	ldr	r2, [pc, #104]	; (8010334 <chk_lock+0xb4>)
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	011b      	lsls	r3, r3, #4
 80102ce:	4413      	add	r3, r2
 80102d0:	3308      	adds	r3, #8
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80102d8:	429a      	cmp	r2, r3
 80102da:	d102      	bne.n	80102e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80102dc:	e007      	b.n	80102ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80102de:	2301      	movs	r3, #1
 80102e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	3301      	adds	r3, #1
 80102e6:	60fb      	str	r3, [r7, #12]
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d9d2      	bls.n	8010294 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2b02      	cmp	r3, #2
 80102f2:	d109      	bne.n	8010308 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d102      	bne.n	8010300 <chk_lock+0x80>
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	2b02      	cmp	r3, #2
 80102fe:	d101      	bne.n	8010304 <chk_lock+0x84>
 8010300:	2300      	movs	r3, #0
 8010302:	e010      	b.n	8010326 <chk_lock+0xa6>
 8010304:	2312      	movs	r3, #18
 8010306:	e00e      	b.n	8010326 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d108      	bne.n	8010320 <chk_lock+0xa0>
 801030e:	4a09      	ldr	r2, [pc, #36]	; (8010334 <chk_lock+0xb4>)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	011b      	lsls	r3, r3, #4
 8010314:	4413      	add	r3, r2
 8010316:	330c      	adds	r3, #12
 8010318:	881b      	ldrh	r3, [r3, #0]
 801031a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801031e:	d101      	bne.n	8010324 <chk_lock+0xa4>
 8010320:	2310      	movs	r3, #16
 8010322:	e000      	b.n	8010326 <chk_lock+0xa6>
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	3714      	adds	r7, #20
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop
 8010334:	24000308 	.word	0x24000308

08010338 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801033e:	2300      	movs	r3, #0
 8010340:	607b      	str	r3, [r7, #4]
 8010342:	e002      	b.n	801034a <enq_lock+0x12>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	3301      	adds	r3, #1
 8010348:	607b      	str	r3, [r7, #4]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2b01      	cmp	r3, #1
 801034e:	d806      	bhi.n	801035e <enq_lock+0x26>
 8010350:	4a09      	ldr	r2, [pc, #36]	; (8010378 <enq_lock+0x40>)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	011b      	lsls	r3, r3, #4
 8010356:	4413      	add	r3, r2
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d1f2      	bne.n	8010344 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b02      	cmp	r3, #2
 8010362:	bf14      	ite	ne
 8010364:	2301      	movne	r3, #1
 8010366:	2300      	moveq	r3, #0
 8010368:	b2db      	uxtb	r3, r3
}
 801036a:	4618      	mov	r0, r3
 801036c:	370c      	adds	r7, #12
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop
 8010378:	24000308 	.word	0x24000308

0801037c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801037c:	b480      	push	{r7}
 801037e:	b085      	sub	sp, #20
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010386:	2300      	movs	r3, #0
 8010388:	60fb      	str	r3, [r7, #12]
 801038a:	e01f      	b.n	80103cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801038c:	4a41      	ldr	r2, [pc, #260]	; (8010494 <inc_lock+0x118>)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	011b      	lsls	r3, r3, #4
 8010392:	4413      	add	r3, r2
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	429a      	cmp	r2, r3
 801039c:	d113      	bne.n	80103c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801039e:	4a3d      	ldr	r2, [pc, #244]	; (8010494 <inc_lock+0x118>)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	011b      	lsls	r3, r3, #4
 80103a4:	4413      	add	r3, r2
 80103a6:	3304      	adds	r3, #4
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d109      	bne.n	80103c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80103b2:	4a38      	ldr	r2, [pc, #224]	; (8010494 <inc_lock+0x118>)
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	011b      	lsls	r3, r3, #4
 80103b8:	4413      	add	r3, r2
 80103ba:	3308      	adds	r3, #8
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d006      	beq.n	80103d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	3301      	adds	r3, #1
 80103ca:	60fb      	str	r3, [r7, #12]
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d9dc      	bls.n	801038c <inc_lock+0x10>
 80103d2:	e000      	b.n	80103d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80103d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2b02      	cmp	r3, #2
 80103da:	d132      	bne.n	8010442 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80103dc:	2300      	movs	r3, #0
 80103de:	60fb      	str	r3, [r7, #12]
 80103e0:	e002      	b.n	80103e8 <inc_lock+0x6c>
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	3301      	adds	r3, #1
 80103e6:	60fb      	str	r3, [r7, #12]
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d806      	bhi.n	80103fc <inc_lock+0x80>
 80103ee:	4a29      	ldr	r2, [pc, #164]	; (8010494 <inc_lock+0x118>)
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	011b      	lsls	r3, r3, #4
 80103f4:	4413      	add	r3, r2
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d1f2      	bne.n	80103e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2b02      	cmp	r3, #2
 8010400:	d101      	bne.n	8010406 <inc_lock+0x8a>
 8010402:	2300      	movs	r3, #0
 8010404:	e040      	b.n	8010488 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	4922      	ldr	r1, [pc, #136]	; (8010494 <inc_lock+0x118>)
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	011b      	lsls	r3, r3, #4
 8010410:	440b      	add	r3, r1
 8010412:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	689a      	ldr	r2, [r3, #8]
 8010418:	491e      	ldr	r1, [pc, #120]	; (8010494 <inc_lock+0x118>)
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	011b      	lsls	r3, r3, #4
 801041e:	440b      	add	r3, r1
 8010420:	3304      	adds	r3, #4
 8010422:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	695a      	ldr	r2, [r3, #20]
 8010428:	491a      	ldr	r1, [pc, #104]	; (8010494 <inc_lock+0x118>)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	011b      	lsls	r3, r3, #4
 801042e:	440b      	add	r3, r1
 8010430:	3308      	adds	r3, #8
 8010432:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010434:	4a17      	ldr	r2, [pc, #92]	; (8010494 <inc_lock+0x118>)
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	011b      	lsls	r3, r3, #4
 801043a:	4413      	add	r3, r2
 801043c:	330c      	adds	r3, #12
 801043e:	2200      	movs	r2, #0
 8010440:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d009      	beq.n	801045c <inc_lock+0xe0>
 8010448:	4a12      	ldr	r2, [pc, #72]	; (8010494 <inc_lock+0x118>)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	011b      	lsls	r3, r3, #4
 801044e:	4413      	add	r3, r2
 8010450:	330c      	adds	r3, #12
 8010452:	881b      	ldrh	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d001      	beq.n	801045c <inc_lock+0xe0>
 8010458:	2300      	movs	r3, #0
 801045a:	e015      	b.n	8010488 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d108      	bne.n	8010474 <inc_lock+0xf8>
 8010462:	4a0c      	ldr	r2, [pc, #48]	; (8010494 <inc_lock+0x118>)
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	011b      	lsls	r3, r3, #4
 8010468:	4413      	add	r3, r2
 801046a:	330c      	adds	r3, #12
 801046c:	881b      	ldrh	r3, [r3, #0]
 801046e:	3301      	adds	r3, #1
 8010470:	b29a      	uxth	r2, r3
 8010472:	e001      	b.n	8010478 <inc_lock+0xfc>
 8010474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010478:	4906      	ldr	r1, [pc, #24]	; (8010494 <inc_lock+0x118>)
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	011b      	lsls	r3, r3, #4
 801047e:	440b      	add	r3, r1
 8010480:	330c      	adds	r3, #12
 8010482:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	3301      	adds	r3, #1
}
 8010488:	4618      	mov	r0, r3
 801048a:	3714      	adds	r7, #20
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr
 8010494:	24000308 	.word	0x24000308

08010498 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010498:	b480      	push	{r7}
 801049a:	b085      	sub	sp, #20
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	3b01      	subs	r3, #1
 80104a4:	607b      	str	r3, [r7, #4]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	d825      	bhi.n	80104f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80104ac:	4a17      	ldr	r2, [pc, #92]	; (801050c <dec_lock+0x74>)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	011b      	lsls	r3, r3, #4
 80104b2:	4413      	add	r3, r2
 80104b4:	330c      	adds	r3, #12
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80104ba:	89fb      	ldrh	r3, [r7, #14]
 80104bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104c0:	d101      	bne.n	80104c6 <dec_lock+0x2e>
 80104c2:	2300      	movs	r3, #0
 80104c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80104c6:	89fb      	ldrh	r3, [r7, #14]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d002      	beq.n	80104d2 <dec_lock+0x3a>
 80104cc:	89fb      	ldrh	r3, [r7, #14]
 80104ce:	3b01      	subs	r3, #1
 80104d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80104d2:	4a0e      	ldr	r2, [pc, #56]	; (801050c <dec_lock+0x74>)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	011b      	lsls	r3, r3, #4
 80104d8:	4413      	add	r3, r2
 80104da:	330c      	adds	r3, #12
 80104dc:	89fa      	ldrh	r2, [r7, #14]
 80104de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80104e0:	89fb      	ldrh	r3, [r7, #14]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d105      	bne.n	80104f2 <dec_lock+0x5a>
 80104e6:	4a09      	ldr	r2, [pc, #36]	; (801050c <dec_lock+0x74>)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	011b      	lsls	r3, r3, #4
 80104ec:	4413      	add	r3, r2
 80104ee:	2200      	movs	r2, #0
 80104f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80104f2:	2300      	movs	r3, #0
 80104f4:	737b      	strb	r3, [r7, #13]
 80104f6:	e001      	b.n	80104fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80104f8:	2302      	movs	r3, #2
 80104fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80104fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3714      	adds	r7, #20
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr
 801050a:	bf00      	nop
 801050c:	24000308 	.word	0x24000308

08010510 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010510:	b480      	push	{r7}
 8010512:	b085      	sub	sp, #20
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010518:	2300      	movs	r3, #0
 801051a:	60fb      	str	r3, [r7, #12]
 801051c:	e010      	b.n	8010540 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801051e:	4a0d      	ldr	r2, [pc, #52]	; (8010554 <clear_lock+0x44>)
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	011b      	lsls	r3, r3, #4
 8010524:	4413      	add	r3, r2
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	429a      	cmp	r2, r3
 801052c:	d105      	bne.n	801053a <clear_lock+0x2a>
 801052e:	4a09      	ldr	r2, [pc, #36]	; (8010554 <clear_lock+0x44>)
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	011b      	lsls	r3, r3, #4
 8010534:	4413      	add	r3, r2
 8010536:	2200      	movs	r2, #0
 8010538:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	3301      	adds	r3, #1
 801053e:	60fb      	str	r3, [r7, #12]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2b01      	cmp	r3, #1
 8010544:	d9eb      	bls.n	801051e <clear_lock+0xe>
	}
}
 8010546:	bf00      	nop
 8010548:	bf00      	nop
 801054a:	3714      	adds	r7, #20
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr
 8010554:	24000308 	.word	0x24000308

08010558 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010560:	2300      	movs	r3, #0
 8010562:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	78db      	ldrb	r3, [r3, #3]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d034      	beq.n	80105d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010570:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	7858      	ldrb	r0, [r3, #1]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801057c:	2301      	movs	r3, #1
 801057e:	697a      	ldr	r2, [r7, #20]
 8010580:	f7ff fd40 	bl	8010004 <disk_write>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d002      	beq.n	8010590 <sync_window+0x38>
			res = FR_DISK_ERR;
 801058a:	2301      	movs	r3, #1
 801058c:	73fb      	strb	r3, [r7, #15]
 801058e:	e022      	b.n	80105d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801059a:	697a      	ldr	r2, [r7, #20]
 801059c:	1ad2      	subs	r2, r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	69db      	ldr	r3, [r3, #28]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d217      	bcs.n	80105d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	789b      	ldrb	r3, [r3, #2]
 80105aa:	613b      	str	r3, [r7, #16]
 80105ac:	e010      	b.n	80105d0 <sync_window+0x78>
					wsect += fs->fsize;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	69db      	ldr	r3, [r3, #28]
 80105b2:	697a      	ldr	r2, [r7, #20]
 80105b4:	4413      	add	r3, r2
 80105b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	7858      	ldrb	r0, [r3, #1]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80105c2:	2301      	movs	r3, #1
 80105c4:	697a      	ldr	r2, [r7, #20]
 80105c6:	f7ff fd1d 	bl	8010004 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	3b01      	subs	r3, #1
 80105ce:	613b      	str	r3, [r7, #16]
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d8eb      	bhi.n	80105ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80105d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3718      	adds	r7, #24
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80105ea:	2300      	movs	r3, #0
 80105ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f2:	683a      	ldr	r2, [r7, #0]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d01b      	beq.n	8010630 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7ff ffad 	bl	8010558 <sync_window>
 80105fe:	4603      	mov	r3, r0
 8010600:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010602:	7bfb      	ldrb	r3, [r7, #15]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d113      	bne.n	8010630 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	7858      	ldrb	r0, [r3, #1]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010612:	2301      	movs	r3, #1
 8010614:	683a      	ldr	r2, [r7, #0]
 8010616:	f7ff fcd5 	bl	800ffc4 <disk_read>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	d004      	beq.n	801062a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010620:	f04f 33ff 	mov.w	r3, #4294967295
 8010624:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010626:	2301      	movs	r3, #1
 8010628:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	683a      	ldr	r2, [r7, #0]
 801062e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010630:	7bfb      	ldrb	r3, [r7, #15]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
	...

0801063c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f7ff ff87 	bl	8010558 <sync_window>
 801064a:	4603      	mov	r3, r0
 801064c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801064e:	7bfb      	ldrb	r3, [r7, #15]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d158      	bne.n	8010706 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	2b03      	cmp	r3, #3
 801065a:	d148      	bne.n	80106ee <sync_fs+0xb2>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	791b      	ldrb	r3, [r3, #4]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d144      	bne.n	80106ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	3334      	adds	r3, #52	; 0x34
 8010668:	f44f 7200 	mov.w	r2, #512	; 0x200
 801066c:	2100      	movs	r1, #0
 801066e:	4618      	mov	r0, r3
 8010670:	f7ff fda9 	bl	80101c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	3334      	adds	r3, #52	; 0x34
 8010678:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801067c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010680:	4618      	mov	r0, r3
 8010682:	f7ff fd38 	bl	80100f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	3334      	adds	r3, #52	; 0x34
 801068a:	4921      	ldr	r1, [pc, #132]	; (8010710 <sync_fs+0xd4>)
 801068c:	4618      	mov	r0, r3
 801068e:	f7ff fd4d 	bl	801012c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	3334      	adds	r3, #52	; 0x34
 8010696:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801069a:	491e      	ldr	r1, [pc, #120]	; (8010714 <sync_fs+0xd8>)
 801069c:	4618      	mov	r0, r3
 801069e:	f7ff fd45 	bl	801012c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	3334      	adds	r3, #52	; 0x34
 80106a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	695b      	ldr	r3, [r3, #20]
 80106ae:	4619      	mov	r1, r3
 80106b0:	4610      	mov	r0, r2
 80106b2:	f7ff fd3b 	bl	801012c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	3334      	adds	r3, #52	; 0x34
 80106ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	691b      	ldr	r3, [r3, #16]
 80106c2:	4619      	mov	r1, r3
 80106c4:	4610      	mov	r0, r2
 80106c6:	f7ff fd31 	bl	801012c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a1b      	ldr	r3, [r3, #32]
 80106ce:	1c5a      	adds	r2, r3, #1
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	7858      	ldrb	r0, [r3, #1]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106e2:	2301      	movs	r3, #1
 80106e4:	f7ff fc8e 	bl	8010004 <disk_write>
			fs->fsi_flag = 0;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2200      	movs	r2, #0
 80106ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	785b      	ldrb	r3, [r3, #1]
 80106f2:	2200      	movs	r2, #0
 80106f4:	2100      	movs	r1, #0
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ff fca4 	bl	8010044 <disk_ioctl>
 80106fc:	4603      	mov	r3, r0
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d001      	beq.n	8010706 <sync_fs+0xca>
 8010702:	2301      	movs	r3, #1
 8010704:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010706:	7bfb      	ldrb	r3, [r7, #15]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3710      	adds	r7, #16
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}
 8010710:	41615252 	.word	0x41615252
 8010714:	61417272 	.word	0x61417272

08010718 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	3b02      	subs	r3, #2
 8010726:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	699b      	ldr	r3, [r3, #24]
 801072c:	3b02      	subs	r3, #2
 801072e:	683a      	ldr	r2, [r7, #0]
 8010730:	429a      	cmp	r2, r3
 8010732:	d301      	bcc.n	8010738 <clust2sect+0x20>
 8010734:	2300      	movs	r3, #0
 8010736:	e008      	b.n	801074a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	895b      	ldrh	r3, [r3, #10]
 801073c:	461a      	mov	r2, r3
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	fb03 f202 	mul.w	r2, r3, r2
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010748:	4413      	add	r3, r2
}
 801074a:	4618      	mov	r0, r3
 801074c:	370c      	adds	r7, #12
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr

08010756 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010756:	b580      	push	{r7, lr}
 8010758:	b086      	sub	sp, #24
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
 801075e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d904      	bls.n	8010776 <get_fat+0x20>
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	699b      	ldr	r3, [r3, #24]
 8010770:	683a      	ldr	r2, [r7, #0]
 8010772:	429a      	cmp	r2, r3
 8010774:	d302      	bcc.n	801077c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010776:	2301      	movs	r3, #1
 8010778:	617b      	str	r3, [r7, #20]
 801077a:	e08f      	b.n	801089c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801077c:	f04f 33ff 	mov.w	r3, #4294967295
 8010780:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	2b03      	cmp	r3, #3
 8010788:	d062      	beq.n	8010850 <get_fat+0xfa>
 801078a:	2b03      	cmp	r3, #3
 801078c:	dc7c      	bgt.n	8010888 <get_fat+0x132>
 801078e:	2b01      	cmp	r3, #1
 8010790:	d002      	beq.n	8010798 <get_fat+0x42>
 8010792:	2b02      	cmp	r3, #2
 8010794:	d042      	beq.n	801081c <get_fat+0xc6>
 8010796:	e077      	b.n	8010888 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	60fb      	str	r3, [r7, #12]
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	085b      	lsrs	r3, r3, #1
 80107a0:	68fa      	ldr	r2, [r7, #12]
 80107a2:	4413      	add	r3, r2
 80107a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	0a5b      	lsrs	r3, r3, #9
 80107ae:	4413      	add	r3, r2
 80107b0:	4619      	mov	r1, r3
 80107b2:	6938      	ldr	r0, [r7, #16]
 80107b4:	f7ff ff14 	bl	80105e0 <move_window>
 80107b8:	4603      	mov	r3, r0
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d167      	bne.n	801088e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	1c5a      	adds	r2, r3, #1
 80107c2:	60fa      	str	r2, [r7, #12]
 80107c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107c8:	693a      	ldr	r2, [r7, #16]
 80107ca:	4413      	add	r3, r2
 80107cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80107d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	0a5b      	lsrs	r3, r3, #9
 80107da:	4413      	add	r3, r2
 80107dc:	4619      	mov	r1, r3
 80107de:	6938      	ldr	r0, [r7, #16]
 80107e0:	f7ff fefe 	bl	80105e0 <move_window>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d153      	bne.n	8010892 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107f0:	693a      	ldr	r2, [r7, #16]
 80107f2:	4413      	add	r3, r2
 80107f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80107f8:	021b      	lsls	r3, r3, #8
 80107fa:	461a      	mov	r2, r3
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	4313      	orrs	r3, r2
 8010800:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	f003 0301 	and.w	r3, r3, #1
 8010808:	2b00      	cmp	r3, #0
 801080a:	d002      	beq.n	8010812 <get_fat+0xbc>
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	091b      	lsrs	r3, r3, #4
 8010810:	e002      	b.n	8010818 <get_fat+0xc2>
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010818:	617b      	str	r3, [r7, #20]
			break;
 801081a:	e03f      	b.n	801089c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	0a1b      	lsrs	r3, r3, #8
 8010824:	4413      	add	r3, r2
 8010826:	4619      	mov	r1, r3
 8010828:	6938      	ldr	r0, [r7, #16]
 801082a:	f7ff fed9 	bl	80105e0 <move_window>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d130      	bne.n	8010896 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	005b      	lsls	r3, r3, #1
 801083e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010842:	4413      	add	r3, r2
 8010844:	4618      	mov	r0, r3
 8010846:	f7ff fc1b 	bl	8010080 <ld_word>
 801084a:	4603      	mov	r3, r0
 801084c:	617b      	str	r3, [r7, #20]
			break;
 801084e:	e025      	b.n	801089c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	09db      	lsrs	r3, r3, #7
 8010858:	4413      	add	r3, r2
 801085a:	4619      	mov	r1, r3
 801085c:	6938      	ldr	r0, [r7, #16]
 801085e:	f7ff febf 	bl	80105e0 <move_window>
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d118      	bne.n	801089a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010876:	4413      	add	r3, r2
 8010878:	4618      	mov	r0, r3
 801087a:	f7ff fc19 	bl	80100b0 <ld_dword>
 801087e:	4603      	mov	r3, r0
 8010880:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010884:	617b      	str	r3, [r7, #20]
			break;
 8010886:	e009      	b.n	801089c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010888:	2301      	movs	r3, #1
 801088a:	617b      	str	r3, [r7, #20]
 801088c:	e006      	b.n	801089c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801088e:	bf00      	nop
 8010890:	e004      	b.n	801089c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010892:	bf00      	nop
 8010894:	e002      	b.n	801089c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010896:	bf00      	nop
 8010898:	e000      	b.n	801089c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801089a:	bf00      	nop
		}
	}

	return val;
 801089c:	697b      	ldr	r3, [r7, #20]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3718      	adds	r7, #24
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80108a6:	b590      	push	{r4, r7, lr}
 80108a8:	b089      	sub	sp, #36	; 0x24
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	60f8      	str	r0, [r7, #12]
 80108ae:	60b9      	str	r1, [r7, #8]
 80108b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80108b2:	2302      	movs	r3, #2
 80108b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	f240 80d9 	bls.w	8010a70 <put_fat+0x1ca>
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	699b      	ldr	r3, [r3, #24]
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	f080 80d3 	bcs.w	8010a70 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	2b03      	cmp	r3, #3
 80108d0:	f000 8096 	beq.w	8010a00 <put_fat+0x15a>
 80108d4:	2b03      	cmp	r3, #3
 80108d6:	f300 80cb 	bgt.w	8010a70 <put_fat+0x1ca>
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d002      	beq.n	80108e4 <put_fat+0x3e>
 80108de:	2b02      	cmp	r3, #2
 80108e0:	d06e      	beq.n	80109c0 <put_fat+0x11a>
 80108e2:	e0c5      	b.n	8010a70 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	61bb      	str	r3, [r7, #24]
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	085b      	lsrs	r3, r3, #1
 80108ec:	69ba      	ldr	r2, [r7, #24]
 80108ee:	4413      	add	r3, r2
 80108f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	0a5b      	lsrs	r3, r3, #9
 80108fa:	4413      	add	r3, r2
 80108fc:	4619      	mov	r1, r3
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	f7ff fe6e 	bl	80105e0 <move_window>
 8010904:	4603      	mov	r3, r0
 8010906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010908:	7ffb      	ldrb	r3, [r7, #31]
 801090a:	2b00      	cmp	r3, #0
 801090c:	f040 80a9 	bne.w	8010a62 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	1c59      	adds	r1, r3, #1
 801091a:	61b9      	str	r1, [r7, #24]
 801091c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010920:	4413      	add	r3, r2
 8010922:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	f003 0301 	and.w	r3, r3, #1
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00d      	beq.n	801094a <put_fat+0xa4>
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	b25b      	sxtb	r3, r3
 8010934:	f003 030f 	and.w	r3, r3, #15
 8010938:	b25a      	sxtb	r2, r3
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	b2db      	uxtb	r3, r3
 801093e:	011b      	lsls	r3, r3, #4
 8010940:	b25b      	sxtb	r3, r3
 8010942:	4313      	orrs	r3, r2
 8010944:	b25b      	sxtb	r3, r3
 8010946:	b2db      	uxtb	r3, r3
 8010948:	e001      	b.n	801094e <put_fat+0xa8>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	b2db      	uxtb	r3, r3
 801094e:	697a      	ldr	r2, [r7, #20]
 8010950:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2201      	movs	r2, #1
 8010956:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801095c:	69bb      	ldr	r3, [r7, #24]
 801095e:	0a5b      	lsrs	r3, r3, #9
 8010960:	4413      	add	r3, r2
 8010962:	4619      	mov	r1, r3
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7ff fe3b 	bl	80105e0 <move_window>
 801096a:	4603      	mov	r3, r0
 801096c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801096e:	7ffb      	ldrb	r3, [r7, #31]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d178      	bne.n	8010a66 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801097a:	69bb      	ldr	r3, [r7, #24]
 801097c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010980:	4413      	add	r3, r2
 8010982:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	f003 0301 	and.w	r3, r3, #1
 801098a:	2b00      	cmp	r3, #0
 801098c:	d003      	beq.n	8010996 <put_fat+0xf0>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	091b      	lsrs	r3, r3, #4
 8010992:	b2db      	uxtb	r3, r3
 8010994:	e00e      	b.n	80109b4 <put_fat+0x10e>
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	b25b      	sxtb	r3, r3
 801099c:	f023 030f 	bic.w	r3, r3, #15
 80109a0:	b25a      	sxtb	r2, r3
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	0a1b      	lsrs	r3, r3, #8
 80109a6:	b25b      	sxtb	r3, r3
 80109a8:	f003 030f 	and.w	r3, r3, #15
 80109ac:	b25b      	sxtb	r3, r3
 80109ae:	4313      	orrs	r3, r2
 80109b0:	b25b      	sxtb	r3, r3
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	697a      	ldr	r2, [r7, #20]
 80109b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2201      	movs	r2, #1
 80109bc:	70da      	strb	r2, [r3, #3]
			break;
 80109be:	e057      	b.n	8010a70 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	0a1b      	lsrs	r3, r3, #8
 80109c8:	4413      	add	r3, r2
 80109ca:	4619      	mov	r1, r3
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f7ff fe07 	bl	80105e0 <move_window>
 80109d2:	4603      	mov	r3, r0
 80109d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80109d6:	7ffb      	ldrb	r3, [r7, #31]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d146      	bne.n	8010a6a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	005b      	lsls	r3, r3, #1
 80109e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80109ea:	4413      	add	r3, r2
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	b292      	uxth	r2, r2
 80109f0:	4611      	mov	r1, r2
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7ff fb7f 	bl	80100f6 <st_word>
			fs->wflag = 1;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2201      	movs	r2, #1
 80109fc:	70da      	strb	r2, [r3, #3]
			break;
 80109fe:	e037      	b.n	8010a70 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	09db      	lsrs	r3, r3, #7
 8010a08:	4413      	add	r3, r2
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	f7ff fde7 	bl	80105e0 <move_window>
 8010a12:	4603      	mov	r3, r0
 8010a14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a16:	7ffb      	ldrb	r3, [r7, #31]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d128      	bne.n	8010a6e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	009b      	lsls	r3, r3, #2
 8010a2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010a30:	4413      	add	r3, r2
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7ff fb3c 	bl	80100b0 <ld_dword>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010a3e:	4323      	orrs	r3, r4
 8010a40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010a50:	4413      	add	r3, r2
 8010a52:	6879      	ldr	r1, [r7, #4]
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7ff fb69 	bl	801012c <st_dword>
			fs->wflag = 1;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	70da      	strb	r2, [r3, #3]
			break;
 8010a60:	e006      	b.n	8010a70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010a62:	bf00      	nop
 8010a64:	e004      	b.n	8010a70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010a66:	bf00      	nop
 8010a68:	e002      	b.n	8010a70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010a6a:	bf00      	nop
 8010a6c:	e000      	b.n	8010a70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010a6e:	bf00      	nop
		}
	}
	return res;
 8010a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3724      	adds	r7, #36	; 0x24
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd90      	pop	{r4, r7, pc}

08010a7a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b088      	sub	sp, #32
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	60f8      	str	r0, [r7, #12]
 8010a82:	60b9      	str	r1, [r7, #8]
 8010a84:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d904      	bls.n	8010aa0 <remove_chain+0x26>
 8010a96:	69bb      	ldr	r3, [r7, #24]
 8010a98:	699b      	ldr	r3, [r3, #24]
 8010a9a:	68ba      	ldr	r2, [r7, #8]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d301      	bcc.n	8010aa4 <remove_chain+0x2a>
 8010aa0:	2302      	movs	r3, #2
 8010aa2:	e04b      	b.n	8010b3c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d00c      	beq.n	8010ac4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8010aae:	6879      	ldr	r1, [r7, #4]
 8010ab0:	69b8      	ldr	r0, [r7, #24]
 8010ab2:	f7ff fef8 	bl	80108a6 <put_fat>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010aba:	7ffb      	ldrb	r3, [r7, #31]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d001      	beq.n	8010ac4 <remove_chain+0x4a>
 8010ac0:	7ffb      	ldrb	r3, [r7, #31]
 8010ac2:	e03b      	b.n	8010b3c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010ac4:	68b9      	ldr	r1, [r7, #8]
 8010ac6:	68f8      	ldr	r0, [r7, #12]
 8010ac8:	f7ff fe45 	bl	8010756 <get_fat>
 8010acc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d031      	beq.n	8010b38 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d101      	bne.n	8010ade <remove_chain+0x64>
 8010ada:	2302      	movs	r3, #2
 8010adc:	e02e      	b.n	8010b3c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ae4:	d101      	bne.n	8010aea <remove_chain+0x70>
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	e028      	b.n	8010b3c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010aea:	2200      	movs	r2, #0
 8010aec:	68b9      	ldr	r1, [r7, #8]
 8010aee:	69b8      	ldr	r0, [r7, #24]
 8010af0:	f7ff fed9 	bl	80108a6 <put_fat>
 8010af4:	4603      	mov	r3, r0
 8010af6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010af8:	7ffb      	ldrb	r3, [r7, #31]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d001      	beq.n	8010b02 <remove_chain+0x88>
 8010afe:	7ffb      	ldrb	r3, [r7, #31]
 8010b00:	e01c      	b.n	8010b3c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010b02:	69bb      	ldr	r3, [r7, #24]
 8010b04:	695a      	ldr	r2, [r3, #20]
 8010b06:	69bb      	ldr	r3, [r7, #24]
 8010b08:	699b      	ldr	r3, [r3, #24]
 8010b0a:	3b02      	subs	r3, #2
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d20b      	bcs.n	8010b28 <remove_chain+0xae>
			fs->free_clst++;
 8010b10:	69bb      	ldr	r3, [r7, #24]
 8010b12:	695b      	ldr	r3, [r3, #20]
 8010b14:	1c5a      	adds	r2, r3, #1
 8010b16:	69bb      	ldr	r3, [r7, #24]
 8010b18:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010b1a:	69bb      	ldr	r3, [r7, #24]
 8010b1c:	791b      	ldrb	r3, [r3, #4]
 8010b1e:	f043 0301 	orr.w	r3, r3, #1
 8010b22:	b2da      	uxtb	r2, r3
 8010b24:	69bb      	ldr	r3, [r7, #24]
 8010b26:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010b2c:	69bb      	ldr	r3, [r7, #24]
 8010b2e:	699b      	ldr	r3, [r3, #24]
 8010b30:	68ba      	ldr	r2, [r7, #8]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d3c6      	bcc.n	8010ac4 <remove_chain+0x4a>
 8010b36:	e000      	b.n	8010b3a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010b38:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010b3a:	2300      	movs	r3, #0
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3720      	adds	r7, #32
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b088      	sub	sp, #32
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d10d      	bne.n	8010b76 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d004      	beq.n	8010b70 <create_chain+0x2c>
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	699b      	ldr	r3, [r3, #24]
 8010b6a:	69ba      	ldr	r2, [r7, #24]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d31b      	bcc.n	8010ba8 <create_chain+0x64>
 8010b70:	2301      	movs	r3, #1
 8010b72:	61bb      	str	r3, [r7, #24]
 8010b74:	e018      	b.n	8010ba8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010b76:	6839      	ldr	r1, [r7, #0]
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7ff fdec 	bl	8010756 <get_fat>
 8010b7e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d801      	bhi.n	8010b8a <create_chain+0x46>
 8010b86:	2301      	movs	r3, #1
 8010b88:	e070      	b.n	8010c6c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b90:	d101      	bne.n	8010b96 <create_chain+0x52>
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	e06a      	b.n	8010c6c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	699b      	ldr	r3, [r3, #24]
 8010b9a:	68fa      	ldr	r2, [r7, #12]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d201      	bcs.n	8010ba4 <create_chain+0x60>
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	e063      	b.n	8010c6c <create_chain+0x128>
		scl = clst;
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	699b      	ldr	r3, [r3, #24]
 8010bb6:	69fa      	ldr	r2, [r7, #28]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d307      	bcc.n	8010bcc <create_chain+0x88>
				ncl = 2;
 8010bbc:	2302      	movs	r3, #2
 8010bbe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010bc0:	69fa      	ldr	r2, [r7, #28]
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d901      	bls.n	8010bcc <create_chain+0x88>
 8010bc8:	2300      	movs	r3, #0
 8010bca:	e04f      	b.n	8010c6c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010bcc:	69f9      	ldr	r1, [r7, #28]
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f7ff fdc1 	bl	8010756 <get_fat>
 8010bd4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d00e      	beq.n	8010bfa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d003      	beq.n	8010bea <create_chain+0xa6>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010be8:	d101      	bne.n	8010bee <create_chain+0xaa>
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	e03e      	b.n	8010c6c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010bee:	69fa      	ldr	r2, [r7, #28]
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d1da      	bne.n	8010bac <create_chain+0x68>
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	e038      	b.n	8010c6c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010bfa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8010c00:	69f9      	ldr	r1, [r7, #28]
 8010c02:	6938      	ldr	r0, [r7, #16]
 8010c04:	f7ff fe4f 	bl	80108a6 <put_fat>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010c0c:	7dfb      	ldrb	r3, [r7, #23]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d109      	bne.n	8010c26 <create_chain+0xe2>
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d006      	beq.n	8010c26 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010c18:	69fa      	ldr	r2, [r7, #28]
 8010c1a:	6839      	ldr	r1, [r7, #0]
 8010c1c:	6938      	ldr	r0, [r7, #16]
 8010c1e:	f7ff fe42 	bl	80108a6 <put_fat>
 8010c22:	4603      	mov	r3, r0
 8010c24:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010c26:	7dfb      	ldrb	r3, [r7, #23]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d116      	bne.n	8010c5a <create_chain+0x116>
		fs->last_clst = ncl;
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	69fa      	ldr	r2, [r7, #28]
 8010c30:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	695a      	ldr	r2, [r3, #20]
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	699b      	ldr	r3, [r3, #24]
 8010c3a:	3b02      	subs	r3, #2
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d804      	bhi.n	8010c4a <create_chain+0x106>
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	695b      	ldr	r3, [r3, #20]
 8010c44:	1e5a      	subs	r2, r3, #1
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	791b      	ldrb	r3, [r3, #4]
 8010c4e:	f043 0301 	orr.w	r3, r3, #1
 8010c52:	b2da      	uxtb	r2, r3
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	711a      	strb	r2, [r3, #4]
 8010c58:	e007      	b.n	8010c6a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010c5a:	7dfb      	ldrb	r3, [r7, #23]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d102      	bne.n	8010c66 <create_chain+0x122>
 8010c60:	f04f 33ff 	mov.w	r3, #4294967295
 8010c64:	e000      	b.n	8010c68 <create_chain+0x124>
 8010c66:	2301      	movs	r3, #1
 8010c68:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010c6a:	69fb      	ldr	r3, [r7, #28]
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3720      	adds	r7, #32
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b087      	sub	sp, #28
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c88:	3304      	adds	r3, #4
 8010c8a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	0a5b      	lsrs	r3, r3, #9
 8010c90:	68fa      	ldr	r2, [r7, #12]
 8010c92:	8952      	ldrh	r2, [r2, #10]
 8010c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c98:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	1d1a      	adds	r2, r3, #4
 8010c9e:	613a      	str	r2, [r7, #16]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d101      	bne.n	8010cae <clmt_clust+0x3a>
 8010caa:	2300      	movs	r3, #0
 8010cac:	e010      	b.n	8010cd0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010cae:	697a      	ldr	r2, [r7, #20]
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d307      	bcc.n	8010cc6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	1ad3      	subs	r3, r2, r3
 8010cbc:	617b      	str	r3, [r7, #20]
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	3304      	adds	r3, #4
 8010cc2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010cc4:	e7e9      	b.n	8010c9a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010cc6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	4413      	add	r3, r2
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	371c      	adds	r7, #28
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr

08010cdc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b086      	sub	sp, #24
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010cf2:	d204      	bcs.n	8010cfe <dir_sdi+0x22>
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	f003 031f 	and.w	r3, r3, #31
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d001      	beq.n	8010d02 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010cfe:	2302      	movs	r3, #2
 8010d00:	e063      	b.n	8010dca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	683a      	ldr	r2, [r7, #0]
 8010d06:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d106      	bne.n	8010d22 <dir_sdi+0x46>
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	2b02      	cmp	r3, #2
 8010d1a:	d902      	bls.n	8010d22 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010d1c:	693b      	ldr	r3, [r7, #16]
 8010d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d20:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d10c      	bne.n	8010d42 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	095b      	lsrs	r3, r3, #5
 8010d2c:	693a      	ldr	r2, [r7, #16]
 8010d2e:	8912      	ldrh	r2, [r2, #8]
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d301      	bcc.n	8010d38 <dir_sdi+0x5c>
 8010d34:	2302      	movs	r3, #2
 8010d36:	e048      	b.n	8010dca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	61da      	str	r2, [r3, #28]
 8010d40:	e029      	b.n	8010d96 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	895b      	ldrh	r3, [r3, #10]
 8010d46:	025b      	lsls	r3, r3, #9
 8010d48:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010d4a:	e019      	b.n	8010d80 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6979      	ldr	r1, [r7, #20]
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7ff fd00 	bl	8010756 <get_fat>
 8010d56:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d5e:	d101      	bne.n	8010d64 <dir_sdi+0x88>
 8010d60:	2301      	movs	r3, #1
 8010d62:	e032      	b.n	8010dca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	d904      	bls.n	8010d74 <dir_sdi+0x98>
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	699b      	ldr	r3, [r3, #24]
 8010d6e:	697a      	ldr	r2, [r7, #20]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d301      	bcc.n	8010d78 <dir_sdi+0x9c>
 8010d74:	2302      	movs	r3, #2
 8010d76:	e028      	b.n	8010dca <dir_sdi+0xee>
			ofs -= csz;
 8010d78:	683a      	ldr	r2, [r7, #0]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	1ad3      	subs	r3, r2, r3
 8010d7e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010d80:	683a      	ldr	r2, [r7, #0]
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d2e1      	bcs.n	8010d4c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010d88:	6979      	ldr	r1, [r7, #20]
 8010d8a:	6938      	ldr	r0, [r7, #16]
 8010d8c:	f7ff fcc4 	bl	8010718 <clust2sect>
 8010d90:	4602      	mov	r2, r0
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	697a      	ldr	r2, [r7, #20]
 8010d9a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	69db      	ldr	r3, [r3, #28]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d101      	bne.n	8010da8 <dir_sdi+0xcc>
 8010da4:	2302      	movs	r3, #2
 8010da6:	e010      	b.n	8010dca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	69da      	ldr	r2, [r3, #28]
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	0a5b      	lsrs	r3, r3, #9
 8010db0:	441a      	add	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dc2:	441a      	add	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010dc8:	2300      	movs	r3, #0
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3718      	adds	r7, #24
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b086      	sub	sp, #24
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	695b      	ldr	r3, [r3, #20]
 8010de6:	3320      	adds	r3, #32
 8010de8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	69db      	ldr	r3, [r3, #28]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d003      	beq.n	8010dfa <dir_next+0x28>
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010df8:	d301      	bcc.n	8010dfe <dir_next+0x2c>
 8010dfa:	2304      	movs	r3, #4
 8010dfc:	e0aa      	b.n	8010f54 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f040 8098 	bne.w	8010f3a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	69db      	ldr	r3, [r3, #28]
 8010e0e:	1c5a      	adds	r2, r3, #1
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	699b      	ldr	r3, [r3, #24]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d10b      	bne.n	8010e34 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	095b      	lsrs	r3, r3, #5
 8010e20:	68fa      	ldr	r2, [r7, #12]
 8010e22:	8912      	ldrh	r2, [r2, #8]
 8010e24:	4293      	cmp	r3, r2
 8010e26:	f0c0 8088 	bcc.w	8010f3a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	61da      	str	r2, [r3, #28]
 8010e30:	2304      	movs	r3, #4
 8010e32:	e08f      	b.n	8010f54 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	0a5b      	lsrs	r3, r3, #9
 8010e38:	68fa      	ldr	r2, [r7, #12]
 8010e3a:	8952      	ldrh	r2, [r2, #10]
 8010e3c:	3a01      	subs	r2, #1
 8010e3e:	4013      	ands	r3, r2
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d17a      	bne.n	8010f3a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	699b      	ldr	r3, [r3, #24]
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	f7ff fc82 	bl	8010756 <get_fat>
 8010e52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	d801      	bhi.n	8010e5e <dir_next+0x8c>
 8010e5a:	2302      	movs	r3, #2
 8010e5c:	e07a      	b.n	8010f54 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e64:	d101      	bne.n	8010e6a <dir_next+0x98>
 8010e66:	2301      	movs	r3, #1
 8010e68:	e074      	b.n	8010f54 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	699b      	ldr	r3, [r3, #24]
 8010e6e:	697a      	ldr	r2, [r7, #20]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d358      	bcc.n	8010f26 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d104      	bne.n	8010e84 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	61da      	str	r2, [r3, #28]
 8010e80:	2304      	movs	r3, #4
 8010e82:	e067      	b.n	8010f54 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	699b      	ldr	r3, [r3, #24]
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	4610      	mov	r0, r2
 8010e8e:	f7ff fe59 	bl	8010b44 <create_chain>
 8010e92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d101      	bne.n	8010e9e <dir_next+0xcc>
 8010e9a:	2307      	movs	r3, #7
 8010e9c:	e05a      	b.n	8010f54 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	2b01      	cmp	r3, #1
 8010ea2:	d101      	bne.n	8010ea8 <dir_next+0xd6>
 8010ea4:	2302      	movs	r3, #2
 8010ea6:	e055      	b.n	8010f54 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eae:	d101      	bne.n	8010eb4 <dir_next+0xe2>
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	e04f      	b.n	8010f54 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010eb4:	68f8      	ldr	r0, [r7, #12]
 8010eb6:	f7ff fb4f 	bl	8010558 <sync_window>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d001      	beq.n	8010ec4 <dir_next+0xf2>
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	e047      	b.n	8010f54 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	3334      	adds	r3, #52	; 0x34
 8010ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ecc:	2100      	movs	r1, #0
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7ff f979 	bl	80101c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	613b      	str	r3, [r7, #16]
 8010ed8:	6979      	ldr	r1, [r7, #20]
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f7ff fc1c 	bl	8010718 <clust2sect>
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8010ee6:	e012      	b.n	8010f0e <dir_next+0x13c>
						fs->wflag = 1;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	2201      	movs	r2, #1
 8010eec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010eee:	68f8      	ldr	r0, [r7, #12]
 8010ef0:	f7ff fb32 	bl	8010558 <sync_window>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <dir_next+0x12c>
 8010efa:	2301      	movs	r3, #1
 8010efc:	e02a      	b.n	8010f54 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	3301      	adds	r3, #1
 8010f02:	613b      	str	r3, [r7, #16]
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f08:	1c5a      	adds	r2, r3, #1
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	895b      	ldrh	r3, [r3, #10]
 8010f12:	461a      	mov	r2, r3
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	4293      	cmp	r3, r2
 8010f18:	d3e6      	bcc.n	8010ee8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	1ad2      	subs	r2, r2, r3
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	697a      	ldr	r2, [r7, #20]
 8010f2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010f2c:	6979      	ldr	r1, [r7, #20]
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f7ff fbf2 	bl	8010718 <clust2sect>
 8010f34:	4602      	mov	r2, r0
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	68ba      	ldr	r2, [r7, #8]
 8010f3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f4c:	441a      	add	r2, r3
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010f52:	2300      	movs	r3, #0
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3718      	adds	r7, #24
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b086      	sub	sp, #24
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010f6c:	2100      	movs	r1, #0
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f7ff feb4 	bl	8010cdc <dir_sdi>
 8010f74:	4603      	mov	r3, r0
 8010f76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010f78:	7dfb      	ldrb	r3, [r7, #23]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d12b      	bne.n	8010fd6 <dir_alloc+0x7a>
		n = 0;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	69db      	ldr	r3, [r3, #28]
 8010f86:	4619      	mov	r1, r3
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f7ff fb29 	bl	80105e0 <move_window>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010f92:	7dfb      	ldrb	r3, [r7, #23]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d11d      	bne.n	8010fd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6a1b      	ldr	r3, [r3, #32]
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	2be5      	cmp	r3, #229	; 0xe5
 8010fa0:	d004      	beq.n	8010fac <dir_alloc+0x50>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6a1b      	ldr	r3, [r3, #32]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d107      	bne.n	8010fbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	613b      	str	r3, [r7, #16]
 8010fb2:	693a      	ldr	r2, [r7, #16]
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d102      	bne.n	8010fc0 <dir_alloc+0x64>
 8010fba:	e00c      	b.n	8010fd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010fc0:	2101      	movs	r1, #1
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f7ff ff05 	bl	8010dd2 <dir_next>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010fcc:	7dfb      	ldrb	r3, [r7, #23]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d0d7      	beq.n	8010f82 <dir_alloc+0x26>
 8010fd2:	e000      	b.n	8010fd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010fd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010fd6:	7dfb      	ldrb	r3, [r7, #23]
 8010fd8:	2b04      	cmp	r3, #4
 8010fda:	d101      	bne.n	8010fe0 <dir_alloc+0x84>
 8010fdc:	2307      	movs	r3, #7
 8010fde:	75fb      	strb	r3, [r7, #23]
	return res;
 8010fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3718      	adds	r7, #24
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b084      	sub	sp, #16
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
 8010ff2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	331a      	adds	r3, #26
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7ff f841 	bl	8010080 <ld_word>
 8010ffe:	4603      	mov	r3, r0
 8011000:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	2b03      	cmp	r3, #3
 8011008:	d109      	bne.n	801101e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	3314      	adds	r3, #20
 801100e:	4618      	mov	r0, r3
 8011010:	f7ff f836 	bl	8010080 <ld_word>
 8011014:	4603      	mov	r3, r0
 8011016:	041b      	lsls	r3, r3, #16
 8011018:	68fa      	ldr	r2, [r7, #12]
 801101a:	4313      	orrs	r3, r2
 801101c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801101e:	68fb      	ldr	r3, [r7, #12]
}
 8011020:	4618      	mov	r0, r3
 8011022:	3710      	adds	r7, #16
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	331a      	adds	r3, #26
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	b292      	uxth	r2, r2
 801103c:	4611      	mov	r1, r2
 801103e:	4618      	mov	r0, r3
 8011040:	f7ff f859 	bl	80100f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	781b      	ldrb	r3, [r3, #0]
 8011048:	2b03      	cmp	r3, #3
 801104a:	d109      	bne.n	8011060 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	f103 0214 	add.w	r2, r3, #20
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	0c1b      	lsrs	r3, r3, #16
 8011056:	b29b      	uxth	r3, r3
 8011058:	4619      	mov	r1, r3
 801105a:	4610      	mov	r0, r2
 801105c:	f7ff f84b 	bl	80100f6 <st_word>
	}
}
 8011060:	bf00      	nop
 8011062:	3710      	adds	r7, #16
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011068:	b590      	push	{r4, r7, lr}
 801106a:	b087      	sub	sp, #28
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	331a      	adds	r3, #26
 8011076:	4618      	mov	r0, r3
 8011078:	f7ff f802 	bl	8010080 <ld_word>
 801107c:	4603      	mov	r3, r0
 801107e:	2b00      	cmp	r3, #0
 8011080:	d001      	beq.n	8011086 <cmp_lfn+0x1e>
 8011082:	2300      	movs	r3, #0
 8011084:	e059      	b.n	801113a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801108e:	1e5a      	subs	r2, r3, #1
 8011090:	4613      	mov	r3, r2
 8011092:	005b      	lsls	r3, r3, #1
 8011094:	4413      	add	r3, r2
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	4413      	add	r3, r2
 801109a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801109c:	2301      	movs	r3, #1
 801109e:	81fb      	strh	r3, [r7, #14]
 80110a0:	2300      	movs	r3, #0
 80110a2:	613b      	str	r3, [r7, #16]
 80110a4:	e033      	b.n	801110e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80110a6:	4a27      	ldr	r2, [pc, #156]	; (8011144 <cmp_lfn+0xdc>)
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	4413      	add	r3, r2
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	461a      	mov	r2, r3
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	4413      	add	r3, r2
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7fe ffe3 	bl	8010080 <ld_word>
 80110ba:	4603      	mov	r3, r0
 80110bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80110be:	89fb      	ldrh	r3, [r7, #14]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d01a      	beq.n	80110fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	2bfe      	cmp	r3, #254	; 0xfe
 80110c8:	d812      	bhi.n	80110f0 <cmp_lfn+0x88>
 80110ca:	89bb      	ldrh	r3, [r7, #12]
 80110cc:	4618      	mov	r0, r3
 80110ce:	f002 fa11 	bl	80134f4 <ff_wtoupper>
 80110d2:	4603      	mov	r3, r0
 80110d4:	461c      	mov	r4, r3
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	1c5a      	adds	r2, r3, #1
 80110da:	617a      	str	r2, [r7, #20]
 80110dc:	005b      	lsls	r3, r3, #1
 80110de:	687a      	ldr	r2, [r7, #4]
 80110e0:	4413      	add	r3, r2
 80110e2:	881b      	ldrh	r3, [r3, #0]
 80110e4:	4618      	mov	r0, r3
 80110e6:	f002 fa05 	bl	80134f4 <ff_wtoupper>
 80110ea:	4603      	mov	r3, r0
 80110ec:	429c      	cmp	r4, r3
 80110ee:	d001      	beq.n	80110f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80110f0:	2300      	movs	r3, #0
 80110f2:	e022      	b.n	801113a <cmp_lfn+0xd2>
			}
			wc = uc;
 80110f4:	89bb      	ldrh	r3, [r7, #12]
 80110f6:	81fb      	strh	r3, [r7, #14]
 80110f8:	e006      	b.n	8011108 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80110fa:	89bb      	ldrh	r3, [r7, #12]
 80110fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011100:	4293      	cmp	r3, r2
 8011102:	d001      	beq.n	8011108 <cmp_lfn+0xa0>
 8011104:	2300      	movs	r3, #0
 8011106:	e018      	b.n	801113a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	3301      	adds	r3, #1
 801110c:	613b      	str	r3, [r7, #16]
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	2b0c      	cmp	r3, #12
 8011112:	d9c8      	bls.n	80110a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801111c:	2b00      	cmp	r3, #0
 801111e:	d00b      	beq.n	8011138 <cmp_lfn+0xd0>
 8011120:	89fb      	ldrh	r3, [r7, #14]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d008      	beq.n	8011138 <cmp_lfn+0xd0>
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	005b      	lsls	r3, r3, #1
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	4413      	add	r3, r2
 801112e:	881b      	ldrh	r3, [r3, #0]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d001      	beq.n	8011138 <cmp_lfn+0xd0>
 8011134:	2300      	movs	r3, #0
 8011136:	e000      	b.n	801113a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011138:	2301      	movs	r3, #1
}
 801113a:	4618      	mov	r0, r3
 801113c:	371c      	adds	r7, #28
 801113e:	46bd      	mov	sp, r7
 8011140:	bd90      	pop	{r4, r7, pc}
 8011142:	bf00      	nop
 8011144:	08014b64 	.word	0x08014b64

08011148 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b086      	sub	sp, #24
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	331a      	adds	r3, #26
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe ff92 	bl	8010080 <ld_word>
 801115c:	4603      	mov	r3, r0
 801115e:	2b00      	cmp	r3, #0
 8011160:	d001      	beq.n	8011166 <pick_lfn+0x1e>
 8011162:	2300      	movs	r3, #0
 8011164:	e04d      	b.n	8011202 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801116e:	1e5a      	subs	r2, r3, #1
 8011170:	4613      	mov	r3, r2
 8011172:	005b      	lsls	r3, r3, #1
 8011174:	4413      	add	r3, r2
 8011176:	009b      	lsls	r3, r3, #2
 8011178:	4413      	add	r3, r2
 801117a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801117c:	2301      	movs	r3, #1
 801117e:	81fb      	strh	r3, [r7, #14]
 8011180:	2300      	movs	r3, #0
 8011182:	613b      	str	r3, [r7, #16]
 8011184:	e028      	b.n	80111d8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011186:	4a21      	ldr	r2, [pc, #132]	; (801120c <pick_lfn+0xc4>)
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	4413      	add	r3, r2
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	4413      	add	r3, r2
 8011194:	4618      	mov	r0, r3
 8011196:	f7fe ff73 	bl	8010080 <ld_word>
 801119a:	4603      	mov	r3, r0
 801119c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801119e:	89fb      	ldrh	r3, [r7, #14]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d00f      	beq.n	80111c4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	2bfe      	cmp	r3, #254	; 0xfe
 80111a8:	d901      	bls.n	80111ae <pick_lfn+0x66>
 80111aa:	2300      	movs	r3, #0
 80111ac:	e029      	b.n	8011202 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80111ae:	89bb      	ldrh	r3, [r7, #12]
 80111b0:	81fb      	strh	r3, [r7, #14]
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	1c5a      	adds	r2, r3, #1
 80111b6:	617a      	str	r2, [r7, #20]
 80111b8:	005b      	lsls	r3, r3, #1
 80111ba:	687a      	ldr	r2, [r7, #4]
 80111bc:	4413      	add	r3, r2
 80111be:	89fa      	ldrh	r2, [r7, #14]
 80111c0:	801a      	strh	r2, [r3, #0]
 80111c2:	e006      	b.n	80111d2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80111c4:	89bb      	ldrh	r3, [r7, #12]
 80111c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d001      	beq.n	80111d2 <pick_lfn+0x8a>
 80111ce:	2300      	movs	r3, #0
 80111d0:	e017      	b.n	8011202 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	3301      	adds	r3, #1
 80111d6:	613b      	str	r3, [r7, #16]
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	2b0c      	cmp	r3, #12
 80111dc:	d9d3      	bls.n	8011186 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00a      	beq.n	8011200 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	2bfe      	cmp	r3, #254	; 0xfe
 80111ee:	d901      	bls.n	80111f4 <pick_lfn+0xac>
 80111f0:	2300      	movs	r3, #0
 80111f2:	e006      	b.n	8011202 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	005b      	lsls	r3, r3, #1
 80111f8:	687a      	ldr	r2, [r7, #4]
 80111fa:	4413      	add	r3, r2
 80111fc:	2200      	movs	r2, #0
 80111fe:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011200:	2301      	movs	r3, #1
}
 8011202:	4618      	mov	r0, r3
 8011204:	3718      	adds	r7, #24
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
 801120a:	bf00      	nop
 801120c:	08014b64 	.word	0x08014b64

08011210 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b088      	sub	sp, #32
 8011214:	af00      	add	r7, sp, #0
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	60b9      	str	r1, [r7, #8]
 801121a:	4611      	mov	r1, r2
 801121c:	461a      	mov	r2, r3
 801121e:	460b      	mov	r3, r1
 8011220:	71fb      	strb	r3, [r7, #7]
 8011222:	4613      	mov	r3, r2
 8011224:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	330d      	adds	r3, #13
 801122a:	79ba      	ldrb	r2, [r7, #6]
 801122c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	330b      	adds	r3, #11
 8011232:	220f      	movs	r2, #15
 8011234:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	330c      	adds	r3, #12
 801123a:	2200      	movs	r2, #0
 801123c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	331a      	adds	r3, #26
 8011242:	2100      	movs	r1, #0
 8011244:	4618      	mov	r0, r3
 8011246:	f7fe ff56 	bl	80100f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801124a:	79fb      	ldrb	r3, [r7, #7]
 801124c:	1e5a      	subs	r2, r3, #1
 801124e:	4613      	mov	r3, r2
 8011250:	005b      	lsls	r3, r3, #1
 8011252:	4413      	add	r3, r2
 8011254:	009b      	lsls	r3, r3, #2
 8011256:	4413      	add	r3, r2
 8011258:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801125a:	2300      	movs	r3, #0
 801125c:	82fb      	strh	r3, [r7, #22]
 801125e:	2300      	movs	r3, #0
 8011260:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011262:	8afb      	ldrh	r3, [r7, #22]
 8011264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011268:	4293      	cmp	r3, r2
 801126a:	d007      	beq.n	801127c <put_lfn+0x6c>
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	1c5a      	adds	r2, r3, #1
 8011270:	61fa      	str	r2, [r7, #28]
 8011272:	005b      	lsls	r3, r3, #1
 8011274:	68fa      	ldr	r2, [r7, #12]
 8011276:	4413      	add	r3, r2
 8011278:	881b      	ldrh	r3, [r3, #0]
 801127a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801127c:	4a17      	ldr	r2, [pc, #92]	; (80112dc <put_lfn+0xcc>)
 801127e:	69bb      	ldr	r3, [r7, #24]
 8011280:	4413      	add	r3, r2
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	461a      	mov	r2, r3
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	4413      	add	r3, r2
 801128a:	8afa      	ldrh	r2, [r7, #22]
 801128c:	4611      	mov	r1, r2
 801128e:	4618      	mov	r0, r3
 8011290:	f7fe ff31 	bl	80100f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011294:	8afb      	ldrh	r3, [r7, #22]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d102      	bne.n	80112a0 <put_lfn+0x90>
 801129a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801129e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80112a0:	69bb      	ldr	r3, [r7, #24]
 80112a2:	3301      	adds	r3, #1
 80112a4:	61bb      	str	r3, [r7, #24]
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	2b0c      	cmp	r3, #12
 80112aa:	d9da      	bls.n	8011262 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80112ac:	8afb      	ldrh	r3, [r7, #22]
 80112ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d006      	beq.n	80112c4 <put_lfn+0xb4>
 80112b6:	69fb      	ldr	r3, [r7, #28]
 80112b8:	005b      	lsls	r3, r3, #1
 80112ba:	68fa      	ldr	r2, [r7, #12]
 80112bc:	4413      	add	r3, r2
 80112be:	881b      	ldrh	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d103      	bne.n	80112cc <put_lfn+0xbc>
 80112c4:	79fb      	ldrb	r3, [r7, #7]
 80112c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112ca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	79fa      	ldrb	r2, [r7, #7]
 80112d0:	701a      	strb	r2, [r3, #0]
}
 80112d2:	bf00      	nop
 80112d4:	3720      	adds	r7, #32
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	08014b64 	.word	0x08014b64

080112e0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b08c      	sub	sp, #48	; 0x30
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	60f8      	str	r0, [r7, #12]
 80112e8:	60b9      	str	r1, [r7, #8]
 80112ea:	607a      	str	r2, [r7, #4]
 80112ec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80112ee:	220b      	movs	r2, #11
 80112f0:	68b9      	ldr	r1, [r7, #8]
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	f7fe ff46 	bl	8010184 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	2b05      	cmp	r3, #5
 80112fc:	d929      	bls.n	8011352 <gen_numname+0x72>
		sr = seq;
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011302:	e020      	b.n	8011346 <gen_numname+0x66>
			wc = *lfn++;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	1c9a      	adds	r2, r3, #2
 8011308:	607a      	str	r2, [r7, #4]
 801130a:	881b      	ldrh	r3, [r3, #0]
 801130c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801130e:	2300      	movs	r3, #0
 8011310:	62bb      	str	r3, [r7, #40]	; 0x28
 8011312:	e015      	b.n	8011340 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011314:	69fb      	ldr	r3, [r7, #28]
 8011316:	005a      	lsls	r2, r3, #1
 8011318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801131a:	f003 0301 	and.w	r3, r3, #1
 801131e:	4413      	add	r3, r2
 8011320:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011324:	085b      	lsrs	r3, r3, #1
 8011326:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011328:	69fb      	ldr	r3, [r7, #28]
 801132a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801132e:	2b00      	cmp	r3, #0
 8011330:	d003      	beq.n	801133a <gen_numname+0x5a>
 8011332:	69fa      	ldr	r2, [r7, #28]
 8011334:	4b3b      	ldr	r3, [pc, #236]	; (8011424 <gen_numname+0x144>)
 8011336:	4053      	eors	r3, r2
 8011338:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801133c:	3301      	adds	r3, #1
 801133e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011342:	2b0f      	cmp	r3, #15
 8011344:	d9e6      	bls.n	8011314 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	881b      	ldrh	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d1da      	bne.n	8011304 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011352:	2307      	movs	r3, #7
 8011354:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	b2db      	uxtb	r3, r3
 801135a:	f003 030f 	and.w	r3, r3, #15
 801135e:	b2db      	uxtb	r3, r3
 8011360:	3330      	adds	r3, #48	; 0x30
 8011362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801136a:	2b39      	cmp	r3, #57	; 0x39
 801136c:	d904      	bls.n	8011378 <gen_numname+0x98>
 801136e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011372:	3307      	adds	r3, #7
 8011374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801137a:	1e5a      	subs	r2, r3, #1
 801137c:	62ba      	str	r2, [r7, #40]	; 0x28
 801137e:	3330      	adds	r3, #48	; 0x30
 8011380:	443b      	add	r3, r7
 8011382:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011386:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	091b      	lsrs	r3, r3, #4
 801138e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d1df      	bne.n	8011356 <gen_numname+0x76>
	ns[i] = '~';
 8011396:	f107 0214 	add.w	r2, r7, #20
 801139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139c:	4413      	add	r3, r2
 801139e:	227e      	movs	r2, #126	; 0x7e
 80113a0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80113a2:	2300      	movs	r3, #0
 80113a4:	627b      	str	r3, [r7, #36]	; 0x24
 80113a6:	e016      	b.n	80113d6 <gen_numname+0xf6>
		if (IsDBCS1(dst[j])) {
 80113a8:	68fa      	ldr	r2, [r7, #12]
 80113aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ac:	4413      	add	r3, r2
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	2b80      	cmp	r3, #128	; 0x80
 80113b2:	d90d      	bls.n	80113d0 <gen_numname+0xf0>
 80113b4:	68fa      	ldr	r2, [r7, #12]
 80113b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b8:	4413      	add	r3, r2
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	2bff      	cmp	r3, #255	; 0xff
 80113be:	d007      	beq.n	80113d0 <gen_numname+0xf0>
			if (j == i - 1) break;
 80113c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c2:	3b01      	subs	r3, #1
 80113c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d010      	beq.n	80113ec <gen_numname+0x10c>
			j++;
 80113ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113cc:	3301      	adds	r3, #1
 80113ce:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80113d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d2:	3301      	adds	r3, #1
 80113d4:	627b      	str	r3, [r7, #36]	; 0x24
 80113d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113da:	429a      	cmp	r2, r3
 80113dc:	d207      	bcs.n	80113ee <gen_numname+0x10e>
 80113de:	68fa      	ldr	r2, [r7, #12]
 80113e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e2:	4413      	add	r3, r2
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	2b20      	cmp	r3, #32
 80113e8:	d1de      	bne.n	80113a8 <gen_numname+0xc8>
 80113ea:	e000      	b.n	80113ee <gen_numname+0x10e>
			if (j == i - 1) break;
 80113ec:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80113ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f0:	2b07      	cmp	r3, #7
 80113f2:	d807      	bhi.n	8011404 <gen_numname+0x124>
 80113f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f6:	1c5a      	adds	r2, r3, #1
 80113f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80113fa:	3330      	adds	r3, #48	; 0x30
 80113fc:	443b      	add	r3, r7
 80113fe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011402:	e000      	b.n	8011406 <gen_numname+0x126>
 8011404:	2120      	movs	r1, #32
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011408:	1c5a      	adds	r2, r3, #1
 801140a:	627a      	str	r2, [r7, #36]	; 0x24
 801140c:	68fa      	ldr	r2, [r7, #12]
 801140e:	4413      	add	r3, r2
 8011410:	460a      	mov	r2, r1
 8011412:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	2b07      	cmp	r3, #7
 8011418:	d9e9      	bls.n	80113ee <gen_numname+0x10e>
}
 801141a:	bf00      	nop
 801141c:	bf00      	nop
 801141e:	3730      	adds	r7, #48	; 0x30
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}
 8011424:	00011021 	.word	0x00011021

08011428 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011428:	b480      	push	{r7}
 801142a:	b085      	sub	sp, #20
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011430:	2300      	movs	r3, #0
 8011432:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011434:	230b      	movs	r3, #11
 8011436:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011438:	7bfb      	ldrb	r3, [r7, #15]
 801143a:	b2da      	uxtb	r2, r3
 801143c:	0852      	lsrs	r2, r2, #1
 801143e:	01db      	lsls	r3, r3, #7
 8011440:	4313      	orrs	r3, r2
 8011442:	b2da      	uxtb	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	1c59      	adds	r1, r3, #1
 8011448:	6079      	str	r1, [r7, #4]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	4413      	add	r3, r2
 801144e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	3b01      	subs	r3, #1
 8011454:	60bb      	str	r3, [r7, #8]
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d1ed      	bne.n	8011438 <sum_sfn+0x10>
	return sum;
 801145c:	7bfb      	ldrb	r3, [r7, #15]
}
 801145e:	4618      	mov	r0, r3
 8011460:	3714      	adds	r7, #20
 8011462:	46bd      	mov	sp, r7
 8011464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011468:	4770      	bx	lr

0801146a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801146a:	b580      	push	{r7, lr}
 801146c:	b086      	sub	sp, #24
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011474:	2304      	movs	r3, #4
 8011476:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801147e:	23ff      	movs	r3, #255	; 0xff
 8011480:	757b      	strb	r3, [r7, #21]
 8011482:	23ff      	movs	r3, #255	; 0xff
 8011484:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8011486:	e081      	b.n	801158c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	69db      	ldr	r3, [r3, #28]
 801148c:	4619      	mov	r1, r3
 801148e:	6938      	ldr	r0, [r7, #16]
 8011490:	f7ff f8a6 	bl	80105e0 <move_window>
 8011494:	4603      	mov	r3, r0
 8011496:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011498:	7dfb      	ldrb	r3, [r7, #23]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d17c      	bne.n	8011598 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6a1b      	ldr	r3, [r3, #32]
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80114a6:	7dbb      	ldrb	r3, [r7, #22]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d102      	bne.n	80114b2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80114ac:	2304      	movs	r3, #4
 80114ae:	75fb      	strb	r3, [r7, #23]
 80114b0:	e077      	b.n	80115a2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6a1b      	ldr	r3, [r3, #32]
 80114b6:	330b      	adds	r3, #11
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114be:	73fb      	strb	r3, [r7, #15]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	7bfa      	ldrb	r2, [r7, #15]
 80114c4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80114c6:	7dbb      	ldrb	r3, [r7, #22]
 80114c8:	2be5      	cmp	r3, #229	; 0xe5
 80114ca:	d00e      	beq.n	80114ea <dir_read+0x80>
 80114cc:	7dbb      	ldrb	r3, [r7, #22]
 80114ce:	2b2e      	cmp	r3, #46	; 0x2e
 80114d0:	d00b      	beq.n	80114ea <dir_read+0x80>
 80114d2:	7bfb      	ldrb	r3, [r7, #15]
 80114d4:	f023 0320 	bic.w	r3, r3, #32
 80114d8:	2b08      	cmp	r3, #8
 80114da:	bf0c      	ite	eq
 80114dc:	2301      	moveq	r3, #1
 80114de:	2300      	movne	r3, #0
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	461a      	mov	r2, r3
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d002      	beq.n	80114f0 <dir_read+0x86>
				ord = 0xFF;
 80114ea:	23ff      	movs	r3, #255	; 0xff
 80114ec:	757b      	strb	r3, [r7, #21]
 80114ee:	e044      	b.n	801157a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80114f0:	7bfb      	ldrb	r3, [r7, #15]
 80114f2:	2b0f      	cmp	r3, #15
 80114f4:	d12f      	bne.n	8011556 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80114f6:	7dbb      	ldrb	r3, [r7, #22]
 80114f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00d      	beq.n	801151c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6a1b      	ldr	r3, [r3, #32]
 8011504:	7b5b      	ldrb	r3, [r3, #13]
 8011506:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011508:	7dbb      	ldrb	r3, [r7, #22]
 801150a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801150e:	75bb      	strb	r3, [r7, #22]
 8011510:	7dbb      	ldrb	r3, [r7, #22]
 8011512:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	695a      	ldr	r2, [r3, #20]
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801151c:	7dba      	ldrb	r2, [r7, #22]
 801151e:	7d7b      	ldrb	r3, [r7, #21]
 8011520:	429a      	cmp	r2, r3
 8011522:	d115      	bne.n	8011550 <dir_read+0xe6>
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6a1b      	ldr	r3, [r3, #32]
 8011528:	330d      	adds	r3, #13
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	7d3a      	ldrb	r2, [r7, #20]
 801152e:	429a      	cmp	r2, r3
 8011530:	d10e      	bne.n	8011550 <dir_read+0xe6>
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	68da      	ldr	r2, [r3, #12]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6a1b      	ldr	r3, [r3, #32]
 801153a:	4619      	mov	r1, r3
 801153c:	4610      	mov	r0, r2
 801153e:	f7ff fe03 	bl	8011148 <pick_lfn>
 8011542:	4603      	mov	r3, r0
 8011544:	2b00      	cmp	r3, #0
 8011546:	d003      	beq.n	8011550 <dir_read+0xe6>
 8011548:	7d7b      	ldrb	r3, [r7, #21]
 801154a:	3b01      	subs	r3, #1
 801154c:	b2db      	uxtb	r3, r3
 801154e:	e000      	b.n	8011552 <dir_read+0xe8>
 8011550:	23ff      	movs	r3, #255	; 0xff
 8011552:	757b      	strb	r3, [r7, #21]
 8011554:	e011      	b.n	801157a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011556:	7d7b      	ldrb	r3, [r7, #21]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d109      	bne.n	8011570 <dir_read+0x106>
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6a1b      	ldr	r3, [r3, #32]
 8011560:	4618      	mov	r0, r3
 8011562:	f7ff ff61 	bl	8011428 <sum_sfn>
 8011566:	4603      	mov	r3, r0
 8011568:	461a      	mov	r2, r3
 801156a:	7d3b      	ldrb	r3, [r7, #20]
 801156c:	4293      	cmp	r3, r2
 801156e:	d015      	beq.n	801159c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f04f 32ff 	mov.w	r2, #4294967295
 8011576:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8011578:	e010      	b.n	801159c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801157a:	2100      	movs	r1, #0
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f7ff fc28 	bl	8010dd2 <dir_next>
 8011582:	4603      	mov	r3, r0
 8011584:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011586:	7dfb      	ldrb	r3, [r7, #23]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d109      	bne.n	80115a0 <dir_read+0x136>
	while (dp->sect) {
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	69db      	ldr	r3, [r3, #28]
 8011590:	2b00      	cmp	r3, #0
 8011592:	f47f af79 	bne.w	8011488 <dir_read+0x1e>
 8011596:	e004      	b.n	80115a2 <dir_read+0x138>
		if (res != FR_OK) break;
 8011598:	bf00      	nop
 801159a:	e002      	b.n	80115a2 <dir_read+0x138>
					break;
 801159c:	bf00      	nop
 801159e:	e000      	b.n	80115a2 <dir_read+0x138>
		if (res != FR_OK) break;
 80115a0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80115a2:	7dfb      	ldrb	r3, [r7, #23]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d002      	beq.n	80115ae <dir_read+0x144>
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2200      	movs	r2, #0
 80115ac:	61da      	str	r2, [r3, #28]
	return res;
 80115ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3718      	adds	r7, #24
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b086      	sub	sp, #24
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80115c6:	2100      	movs	r1, #0
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f7ff fb87 	bl	8010cdc <dir_sdi>
 80115ce:	4603      	mov	r3, r0
 80115d0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80115d2:	7dfb      	ldrb	r3, [r7, #23]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d001      	beq.n	80115dc <dir_find+0x24>
 80115d8:	7dfb      	ldrb	r3, [r7, #23]
 80115da:	e0a9      	b.n	8011730 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80115dc:	23ff      	movs	r3, #255	; 0xff
 80115de:	753b      	strb	r3, [r7, #20]
 80115e0:	7d3b      	ldrb	r3, [r7, #20]
 80115e2:	757b      	strb	r3, [r7, #21]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f04f 32ff 	mov.w	r2, #4294967295
 80115ea:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	69db      	ldr	r3, [r3, #28]
 80115f0:	4619      	mov	r1, r3
 80115f2:	6938      	ldr	r0, [r7, #16]
 80115f4:	f7fe fff4 	bl	80105e0 <move_window>
 80115f8:	4603      	mov	r3, r0
 80115fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80115fc:	7dfb      	ldrb	r3, [r7, #23]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f040 8090 	bne.w	8011724 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6a1b      	ldr	r3, [r3, #32]
 8011608:	781b      	ldrb	r3, [r3, #0]
 801160a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801160c:	7dbb      	ldrb	r3, [r7, #22]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d102      	bne.n	8011618 <dir_find+0x60>
 8011612:	2304      	movs	r3, #4
 8011614:	75fb      	strb	r3, [r7, #23]
 8011616:	e08a      	b.n	801172e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6a1b      	ldr	r3, [r3, #32]
 801161c:	330b      	adds	r3, #11
 801161e:	781b      	ldrb	r3, [r3, #0]
 8011620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011624:	73fb      	strb	r3, [r7, #15]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	7bfa      	ldrb	r2, [r7, #15]
 801162a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801162c:	7dbb      	ldrb	r3, [r7, #22]
 801162e:	2be5      	cmp	r3, #229	; 0xe5
 8011630:	d007      	beq.n	8011642 <dir_find+0x8a>
 8011632:	7bfb      	ldrb	r3, [r7, #15]
 8011634:	f003 0308 	and.w	r3, r3, #8
 8011638:	2b00      	cmp	r3, #0
 801163a:	d009      	beq.n	8011650 <dir_find+0x98>
 801163c:	7bfb      	ldrb	r3, [r7, #15]
 801163e:	2b0f      	cmp	r3, #15
 8011640:	d006      	beq.n	8011650 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011642:	23ff      	movs	r3, #255	; 0xff
 8011644:	757b      	strb	r3, [r7, #21]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f04f 32ff 	mov.w	r2, #4294967295
 801164c:	631a      	str	r2, [r3, #48]	; 0x30
 801164e:	e05e      	b.n	801170e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011650:	7bfb      	ldrb	r3, [r7, #15]
 8011652:	2b0f      	cmp	r3, #15
 8011654:	d136      	bne.n	80116c4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801165c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011660:	2b00      	cmp	r3, #0
 8011662:	d154      	bne.n	801170e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011664:	7dbb      	ldrb	r3, [r7, #22]
 8011666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801166a:	2b00      	cmp	r3, #0
 801166c:	d00d      	beq.n	801168a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6a1b      	ldr	r3, [r3, #32]
 8011672:	7b5b      	ldrb	r3, [r3, #13]
 8011674:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011676:	7dbb      	ldrb	r3, [r7, #22]
 8011678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801167c:	75bb      	strb	r3, [r7, #22]
 801167e:	7dbb      	ldrb	r3, [r7, #22]
 8011680:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	695a      	ldr	r2, [r3, #20]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801168a:	7dba      	ldrb	r2, [r7, #22]
 801168c:	7d7b      	ldrb	r3, [r7, #21]
 801168e:	429a      	cmp	r2, r3
 8011690:	d115      	bne.n	80116be <dir_find+0x106>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6a1b      	ldr	r3, [r3, #32]
 8011696:	330d      	adds	r3, #13
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	7d3a      	ldrb	r2, [r7, #20]
 801169c:	429a      	cmp	r2, r3
 801169e:	d10e      	bne.n	80116be <dir_find+0x106>
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	68da      	ldr	r2, [r3, #12]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6a1b      	ldr	r3, [r3, #32]
 80116a8:	4619      	mov	r1, r3
 80116aa:	4610      	mov	r0, r2
 80116ac:	f7ff fcdc 	bl	8011068 <cmp_lfn>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d003      	beq.n	80116be <dir_find+0x106>
 80116b6:	7d7b      	ldrb	r3, [r7, #21]
 80116b8:	3b01      	subs	r3, #1
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	e000      	b.n	80116c0 <dir_find+0x108>
 80116be:	23ff      	movs	r3, #255	; 0xff
 80116c0:	757b      	strb	r3, [r7, #21]
 80116c2:	e024      	b.n	801170e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80116c4:	7d7b      	ldrb	r3, [r7, #21]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d109      	bne.n	80116de <dir_find+0x126>
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6a1b      	ldr	r3, [r3, #32]
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7ff feaa 	bl	8011428 <sum_sfn>
 80116d4:	4603      	mov	r3, r0
 80116d6:	461a      	mov	r2, r3
 80116d8:	7d3b      	ldrb	r3, [r7, #20]
 80116da:	4293      	cmp	r3, r2
 80116dc:	d024      	beq.n	8011728 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80116e4:	f003 0301 	and.w	r3, r3, #1
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d10a      	bne.n	8011702 <dir_find+0x14a>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6a18      	ldr	r0, [r3, #32]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	3324      	adds	r3, #36	; 0x24
 80116f4:	220b      	movs	r2, #11
 80116f6:	4619      	mov	r1, r3
 80116f8:	f7fe fd80 	bl	80101fc <mem_cmp>
 80116fc:	4603      	mov	r3, r0
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d014      	beq.n	801172c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011702:	23ff      	movs	r3, #255	; 0xff
 8011704:	757b      	strb	r3, [r7, #21]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f04f 32ff 	mov.w	r2, #4294967295
 801170c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801170e:	2100      	movs	r1, #0
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f7ff fb5e 	bl	8010dd2 <dir_next>
 8011716:	4603      	mov	r3, r0
 8011718:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801171a:	7dfb      	ldrb	r3, [r7, #23]
 801171c:	2b00      	cmp	r3, #0
 801171e:	f43f af65 	beq.w	80115ec <dir_find+0x34>
 8011722:	e004      	b.n	801172e <dir_find+0x176>
		if (res != FR_OK) break;
 8011724:	bf00      	nop
 8011726:	e002      	b.n	801172e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011728:	bf00      	nop
 801172a:	e000      	b.n	801172e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801172c:	bf00      	nop

	return res;
 801172e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011730:	4618      	mov	r0, r3
 8011732:	3718      	adds	r7, #24
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b08c      	sub	sp, #48	; 0x30
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801174c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011750:	2b00      	cmp	r3, #0
 8011752:	d001      	beq.n	8011758 <dir_register+0x20>
 8011754:	2306      	movs	r3, #6
 8011756:	e0e0      	b.n	801191a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011758:	2300      	movs	r3, #0
 801175a:	627b      	str	r3, [r7, #36]	; 0x24
 801175c:	e002      	b.n	8011764 <dir_register+0x2c>
 801175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011760:	3301      	adds	r3, #1
 8011762:	627b      	str	r3, [r7, #36]	; 0x24
 8011764:	69fb      	ldr	r3, [r7, #28]
 8011766:	68da      	ldr	r2, [r3, #12]
 8011768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176a:	005b      	lsls	r3, r3, #1
 801176c:	4413      	add	r3, r2
 801176e:	881b      	ldrh	r3, [r3, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d1f4      	bne.n	801175e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801177a:	f107 030c 	add.w	r3, r7, #12
 801177e:	220c      	movs	r2, #12
 8011780:	4618      	mov	r0, r3
 8011782:	f7fe fcff 	bl	8010184 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011786:	7dfb      	ldrb	r3, [r7, #23]
 8011788:	f003 0301 	and.w	r3, r3, #1
 801178c:	2b00      	cmp	r3, #0
 801178e:	d032      	beq.n	80117f6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2240      	movs	r2, #64	; 0x40
 8011794:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8011798:	2301      	movs	r3, #1
 801179a:	62bb      	str	r3, [r7, #40]	; 0x28
 801179c:	e016      	b.n	80117cc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	68da      	ldr	r2, [r3, #12]
 80117a8:	f107 010c 	add.w	r1, r7, #12
 80117ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ae:	f7ff fd97 	bl	80112e0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f7ff ff00 	bl	80115b8 <dir_find>
 80117b8:	4603      	mov	r3, r0
 80117ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80117be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d106      	bne.n	80117d4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80117c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c8:	3301      	adds	r3, #1
 80117ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80117cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ce:	2b63      	cmp	r3, #99	; 0x63
 80117d0:	d9e5      	bls.n	801179e <dir_register+0x66>
 80117d2:	e000      	b.n	80117d6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80117d4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80117d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d8:	2b64      	cmp	r3, #100	; 0x64
 80117da:	d101      	bne.n	80117e0 <dir_register+0xa8>
 80117dc:	2307      	movs	r3, #7
 80117de:	e09c      	b.n	801191a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80117e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117e4:	2b04      	cmp	r3, #4
 80117e6:	d002      	beq.n	80117ee <dir_register+0xb6>
 80117e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117ec:	e095      	b.n	801191a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80117ee:	7dfa      	ldrb	r2, [r7, #23]
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80117f6:	7dfb      	ldrb	r3, [r7, #23]
 80117f8:	f003 0302 	and.w	r3, r3, #2
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d007      	beq.n	8011810 <dir_register+0xd8>
 8011800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011802:	330c      	adds	r3, #12
 8011804:	4a47      	ldr	r2, [pc, #284]	; (8011924 <dir_register+0x1ec>)
 8011806:	fba2 2303 	umull	r2, r3, r2, r3
 801180a:	089b      	lsrs	r3, r3, #2
 801180c:	3301      	adds	r3, #1
 801180e:	e000      	b.n	8011812 <dir_register+0xda>
 8011810:	2301      	movs	r3, #1
 8011812:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011814:	6a39      	ldr	r1, [r7, #32]
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f7ff fba0 	bl	8010f5c <dir_alloc>
 801181c:	4603      	mov	r3, r0
 801181e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011826:	2b00      	cmp	r3, #0
 8011828:	d148      	bne.n	80118bc <dir_register+0x184>
 801182a:	6a3b      	ldr	r3, [r7, #32]
 801182c:	3b01      	subs	r3, #1
 801182e:	623b      	str	r3, [r7, #32]
 8011830:	6a3b      	ldr	r3, [r7, #32]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d042      	beq.n	80118bc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	695a      	ldr	r2, [r3, #20]
 801183a:	6a3b      	ldr	r3, [r7, #32]
 801183c:	015b      	lsls	r3, r3, #5
 801183e:	1ad3      	subs	r3, r2, r3
 8011840:	4619      	mov	r1, r3
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f7ff fa4a 	bl	8010cdc <dir_sdi>
 8011848:	4603      	mov	r3, r0
 801184a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801184e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011852:	2b00      	cmp	r3, #0
 8011854:	d132      	bne.n	80118bc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	3324      	adds	r3, #36	; 0x24
 801185a:	4618      	mov	r0, r3
 801185c:	f7ff fde4 	bl	8011428 <sum_sfn>
 8011860:	4603      	mov	r3, r0
 8011862:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	69db      	ldr	r3, [r3, #28]
 8011868:	4619      	mov	r1, r3
 801186a:	69f8      	ldr	r0, [r7, #28]
 801186c:	f7fe feb8 	bl	80105e0 <move_window>
 8011870:	4603      	mov	r3, r0
 8011872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8011876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801187a:	2b00      	cmp	r3, #0
 801187c:	d11d      	bne.n	80118ba <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801187e:	69fb      	ldr	r3, [r7, #28]
 8011880:	68d8      	ldr	r0, [r3, #12]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6a19      	ldr	r1, [r3, #32]
 8011886:	6a3b      	ldr	r3, [r7, #32]
 8011888:	b2da      	uxtb	r2, r3
 801188a:	7efb      	ldrb	r3, [r7, #27]
 801188c:	f7ff fcc0 	bl	8011210 <put_lfn>
				fs->wflag = 1;
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	2201      	movs	r2, #1
 8011894:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011896:	2100      	movs	r1, #0
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f7ff fa9a 	bl	8010dd2 <dir_next>
 801189e:	4603      	mov	r3, r0
 80118a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80118a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d107      	bne.n	80118bc <dir_register+0x184>
 80118ac:	6a3b      	ldr	r3, [r7, #32]
 80118ae:	3b01      	subs	r3, #1
 80118b0:	623b      	str	r3, [r7, #32]
 80118b2:	6a3b      	ldr	r3, [r7, #32]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d1d5      	bne.n	8011864 <dir_register+0x12c>
 80118b8:	e000      	b.n	80118bc <dir_register+0x184>
				if (res != FR_OK) break;
 80118ba:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80118bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d128      	bne.n	8011916 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	69db      	ldr	r3, [r3, #28]
 80118c8:	4619      	mov	r1, r3
 80118ca:	69f8      	ldr	r0, [r7, #28]
 80118cc:	f7fe fe88 	bl	80105e0 <move_window>
 80118d0:	4603      	mov	r3, r0
 80118d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80118d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d11b      	bne.n	8011916 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6a1b      	ldr	r3, [r3, #32]
 80118e2:	2220      	movs	r2, #32
 80118e4:	2100      	movs	r1, #0
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7fe fc6d 	bl	80101c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6a18      	ldr	r0, [r3, #32]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	3324      	adds	r3, #36	; 0x24
 80118f4:	220b      	movs	r2, #11
 80118f6:	4619      	mov	r1, r3
 80118f8:	f7fe fc44 	bl	8010184 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6a1b      	ldr	r3, [r3, #32]
 8011906:	330c      	adds	r3, #12
 8011908:	f002 0218 	and.w	r2, r2, #24
 801190c:	b2d2      	uxtb	r2, r2
 801190e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	2201      	movs	r2, #1
 8011914:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801191a:	4618      	mov	r0, r3
 801191c:	3730      	adds	r7, #48	; 0x30
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	4ec4ec4f 	.word	0x4ec4ec4f

08011928 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b08a      	sub	sp, #40	; 0x28
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	613b      	str	r3, [r7, #16]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	68db      	ldr	r3, [r3, #12]
 801193e:	60fb      	str	r3, [r7, #12]
 8011940:	2300      	movs	r3, #0
 8011942:	617b      	str	r3, [r7, #20]
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011948:	69bb      	ldr	r3, [r7, #24]
 801194a:	1c5a      	adds	r2, r3, #1
 801194c:	61ba      	str	r2, [r7, #24]
 801194e:	693a      	ldr	r2, [r7, #16]
 8011950:	4413      	add	r3, r2
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8011956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011958:	2b1f      	cmp	r3, #31
 801195a:	d96a      	bls.n	8011a32 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801195c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801195e:	2b2f      	cmp	r3, #47	; 0x2f
 8011960:	d006      	beq.n	8011970 <create_name+0x48>
 8011962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011964:	2b5c      	cmp	r3, #92	; 0x5c
 8011966:	d110      	bne.n	801198a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011968:	e002      	b.n	8011970 <create_name+0x48>
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	3301      	adds	r3, #1
 801196e:	61bb      	str	r3, [r7, #24]
 8011970:	693a      	ldr	r2, [r7, #16]
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	4413      	add	r3, r2
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	2b2f      	cmp	r3, #47	; 0x2f
 801197a:	d0f6      	beq.n	801196a <create_name+0x42>
 801197c:	693a      	ldr	r2, [r7, #16]
 801197e:	69bb      	ldr	r3, [r7, #24]
 8011980:	4413      	add	r3, r2
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	2b5c      	cmp	r3, #92	; 0x5c
 8011986:	d0f0      	beq.n	801196a <create_name+0x42>
			break;
 8011988:	e054      	b.n	8011a34 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	2bfe      	cmp	r3, #254	; 0xfe
 801198e:	d901      	bls.n	8011994 <create_name+0x6c>
 8011990:	2306      	movs	r3, #6
 8011992:	e1bf      	b.n	8011d14 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 8011994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011996:	b2db      	uxtb	r3, r3
 8011998:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 801199a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801199c:	b2db      	uxtb	r3, r3
 801199e:	2b80      	cmp	r3, #128	; 0x80
 80119a0:	d925      	bls.n	80119ee <create_name+0xc6>
 80119a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119a4:	b2db      	uxtb	r3, r3
 80119a6:	2bff      	cmp	r3, #255	; 0xff
 80119a8:	d021      	beq.n	80119ee <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 80119aa:	69bb      	ldr	r3, [r7, #24]
 80119ac:	1c5a      	adds	r2, r3, #1
 80119ae:	61ba      	str	r2, [r7, #24]
 80119b0:	693a      	ldr	r2, [r7, #16]
 80119b2:	4413      	add	r3, r2
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 80119ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119bc:	021b      	lsls	r3, r3, #8
 80119be:	b29a      	uxth	r2, r3
 80119c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	4413      	add	r3, r2
 80119c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 80119ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119ce:	2b3f      	cmp	r3, #63	; 0x3f
 80119d0:	d903      	bls.n	80119da <create_name+0xb2>
 80119d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119d6:	2b7e      	cmp	r3, #126	; 0x7e
 80119d8:	d909      	bls.n	80119ee <create_name+0xc6>
 80119da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80119de:	2b00      	cmp	r3, #0
 80119e0:	da03      	bge.n	80119ea <create_name+0xc2>
 80119e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119e6:	2bff      	cmp	r3, #255	; 0xff
 80119e8:	d101      	bne.n	80119ee <create_name+0xc6>
 80119ea:	2306      	movs	r3, #6
 80119ec:	e192      	b.n	8011d14 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80119ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119f0:	2101      	movs	r1, #1
 80119f2:	4618      	mov	r0, r3
 80119f4:	f001 fd20 	bl	8013438 <ff_convert>
 80119f8:	4603      	mov	r3, r0
 80119fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80119fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d101      	bne.n	8011a06 <create_name+0xde>
 8011a02:	2306      	movs	r3, #6
 8011a04:	e186      	b.n	8011d14 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8011a06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a08:	2b7f      	cmp	r3, #127	; 0x7f
 8011a0a:	d809      	bhi.n	8011a20 <create_name+0xf8>
 8011a0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a0e:	4619      	mov	r1, r3
 8011a10:	489a      	ldr	r0, [pc, #616]	; (8011c7c <create_name+0x354>)
 8011a12:	f7fe fc1a 	bl	801024a <chk_chr>
 8011a16:	4603      	mov	r3, r0
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d001      	beq.n	8011a20 <create_name+0xf8>
 8011a1c:	2306      	movs	r3, #6
 8011a1e:	e179      	b.n	8011d14 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	1c5a      	adds	r2, r3, #1
 8011a24:	617a      	str	r2, [r7, #20]
 8011a26:	005b      	lsls	r3, r3, #1
 8011a28:	68fa      	ldr	r2, [r7, #12]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a2e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8011a30:	e78a      	b.n	8011948 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8011a32:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011a34:	693a      	ldr	r2, [r7, #16]
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	441a      	add	r2, r3
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a40:	2b1f      	cmp	r3, #31
 8011a42:	d801      	bhi.n	8011a48 <create_name+0x120>
 8011a44:	2304      	movs	r3, #4
 8011a46:	e000      	b.n	8011a4a <create_name+0x122>
 8011a48:	2300      	movs	r3, #0
 8011a4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011a4e:	e011      	b.n	8011a74 <create_name+0x14c>
		w = lfn[di - 1];
 8011a50:	697a      	ldr	r2, [r7, #20]
 8011a52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011a56:	4413      	add	r3, r2
 8011a58:	005b      	lsls	r3, r3, #1
 8011a5a:	68fa      	ldr	r2, [r7, #12]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	881b      	ldrh	r3, [r3, #0]
 8011a60:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8011a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a64:	2b20      	cmp	r3, #32
 8011a66:	d002      	beq.n	8011a6e <create_name+0x146>
 8011a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8011a6c:	d106      	bne.n	8011a7c <create_name+0x154>
		di--;
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	3b01      	subs	r3, #1
 8011a72:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d1ea      	bne.n	8011a50 <create_name+0x128>
 8011a7a:	e000      	b.n	8011a7e <create_name+0x156>
		if (w != ' ' && w != '.') break;
 8011a7c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	005b      	lsls	r3, r3, #1
 8011a82:	68fa      	ldr	r2, [r7, #12]
 8011a84:	4413      	add	r3, r2
 8011a86:	2200      	movs	r2, #0
 8011a88:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d101      	bne.n	8011a94 <create_name+0x16c>
 8011a90:	2306      	movs	r3, #6
 8011a92:	e13f      	b.n	8011d14 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	3324      	adds	r3, #36	; 0x24
 8011a98:	220b      	movs	r2, #11
 8011a9a:	2120      	movs	r1, #32
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7fe fb92 	bl	80101c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	61bb      	str	r3, [r7, #24]
 8011aa6:	e002      	b.n	8011aae <create_name+0x186>
 8011aa8:	69bb      	ldr	r3, [r7, #24]
 8011aaa:	3301      	adds	r3, #1
 8011aac:	61bb      	str	r3, [r7, #24]
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	005b      	lsls	r3, r3, #1
 8011ab2:	68fa      	ldr	r2, [r7, #12]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	881b      	ldrh	r3, [r3, #0]
 8011ab8:	2b20      	cmp	r3, #32
 8011aba:	d0f5      	beq.n	8011aa8 <create_name+0x180>
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	005b      	lsls	r3, r3, #1
 8011ac0:	68fa      	ldr	r2, [r7, #12]
 8011ac2:	4413      	add	r3, r2
 8011ac4:	881b      	ldrh	r3, [r3, #0]
 8011ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8011ac8:	d0ee      	beq.n	8011aa8 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d009      	beq.n	8011ae4 <create_name+0x1bc>
 8011ad0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ad4:	f043 0303 	orr.w	r3, r3, #3
 8011ad8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011adc:	e002      	b.n	8011ae4 <create_name+0x1bc>
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	3b01      	subs	r3, #1
 8011ae2:	617b      	str	r3, [r7, #20]
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d009      	beq.n	8011afe <create_name+0x1d6>
 8011aea:	697a      	ldr	r2, [r7, #20]
 8011aec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011af0:	4413      	add	r3, r2
 8011af2:	005b      	lsls	r3, r3, #1
 8011af4:	68fa      	ldr	r2, [r7, #12]
 8011af6:	4413      	add	r3, r2
 8011af8:	881b      	ldrh	r3, [r3, #0]
 8011afa:	2b2e      	cmp	r3, #46	; 0x2e
 8011afc:	d1ef      	bne.n	8011ade <create_name+0x1b6>

	i = b = 0; ni = 8;
 8011afe:	2300      	movs	r3, #0
 8011b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b04:	2300      	movs	r3, #0
 8011b06:	623b      	str	r3, [r7, #32]
 8011b08:	2308      	movs	r3, #8
 8011b0a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011b0c:	69bb      	ldr	r3, [r7, #24]
 8011b0e:	1c5a      	adds	r2, r3, #1
 8011b10:	61ba      	str	r2, [r7, #24]
 8011b12:	005b      	lsls	r3, r3, #1
 8011b14:	68fa      	ldr	r2, [r7, #12]
 8011b16:	4413      	add	r3, r2
 8011b18:	881b      	ldrh	r3, [r3, #0]
 8011b1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	f000 80aa 	beq.w	8011c78 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b26:	2b20      	cmp	r3, #32
 8011b28:	d006      	beq.n	8011b38 <create_name+0x210>
 8011b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8011b2e:	d10a      	bne.n	8011b46 <create_name+0x21e>
 8011b30:	69ba      	ldr	r2, [r7, #24]
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d006      	beq.n	8011b46 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 8011b38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b3c:	f043 0303 	orr.w	r3, r3, #3
 8011b40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011b44:	e097      	b.n	8011c76 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8011b46:	6a3a      	ldr	r2, [r7, #32]
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d203      	bcs.n	8011b56 <create_name+0x22e>
 8011b4e:	69ba      	ldr	r2, [r7, #24]
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d123      	bne.n	8011b9e <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	2b0b      	cmp	r3, #11
 8011b5a:	d106      	bne.n	8011b6a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 8011b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b60:	f043 0303 	orr.w	r3, r3, #3
 8011b64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011b68:	e08d      	b.n	8011c86 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8011b6a:	69ba      	ldr	r2, [r7, #24]
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d005      	beq.n	8011b7e <create_name+0x256>
 8011b72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b76:	f043 0303 	orr.w	r3, r3, #3
 8011b7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8011b7e:	69ba      	ldr	r2, [r7, #24]
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d87e      	bhi.n	8011c84 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	61bb      	str	r3, [r7, #24]
 8011b8a:	2308      	movs	r3, #8
 8011b8c:	623b      	str	r3, [r7, #32]
 8011b8e:	230b      	movs	r3, #11
 8011b90:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8011b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b9c:	e06b      	b.n	8011c76 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8011b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8011ba2:	d910      	bls.n	8011bc6 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8011ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f001 fca4 	bl	80134f4 <ff_wtoupper>
 8011bac:	4603      	mov	r3, r0
 8011bae:	2100      	movs	r1, #0
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f001 fc41 	bl	8013438 <ff_convert>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8011bba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011bbe:	f043 0302 	orr.w	r3, r3, #2
 8011bc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 8011bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bc8:	2bff      	cmp	r3, #255	; 0xff
 8011bca:	d91a      	bls.n	8011c02 <create_name+0x2da>
			if (i >= ni - 1) {
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	3b01      	subs	r3, #1
 8011bd0:	6a3a      	ldr	r2, [r7, #32]
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d308      	bcc.n	8011be8 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8011bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011bda:	f043 0303 	orr.w	r3, r3, #3
 8011bde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	623b      	str	r3, [r7, #32]
 8011be6:	e046      	b.n	8011c76 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8011be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bea:	0a1b      	lsrs	r3, r3, #8
 8011bec:	b299      	uxth	r1, r3
 8011bee:	6a3b      	ldr	r3, [r7, #32]
 8011bf0:	1c5a      	adds	r2, r3, #1
 8011bf2:	623a      	str	r2, [r7, #32]
 8011bf4:	b2c9      	uxtb	r1, r1
 8011bf6:	687a      	ldr	r2, [r7, #4]
 8011bf8:	4413      	add	r3, r2
 8011bfa:	460a      	mov	r2, r1
 8011bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8011c00:	e02f      	b.n	8011c62 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8011c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d007      	beq.n	8011c18 <create_name+0x2f0>
 8011c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	481c      	ldr	r0, [pc, #112]	; (8011c80 <create_name+0x358>)
 8011c0e:	f7fe fb1c 	bl	801024a <chk_chr>
 8011c12:	4603      	mov	r3, r0
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d008      	beq.n	8011c2a <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8011c18:	235f      	movs	r3, #95	; 0x5f
 8011c1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011c1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011c20:	f043 0303 	orr.w	r3, r3, #3
 8011c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011c28:	e01b      	b.n	8011c62 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8011c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c2c:	2b40      	cmp	r3, #64	; 0x40
 8011c2e:	d909      	bls.n	8011c44 <create_name+0x31c>
 8011c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c32:	2b5a      	cmp	r3, #90	; 0x5a
 8011c34:	d806      	bhi.n	8011c44 <create_name+0x31c>
					b |= 2;
 8011c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c3a:	f043 0302 	orr.w	r3, r3, #2
 8011c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c42:	e00e      	b.n	8011c62 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c46:	2b60      	cmp	r3, #96	; 0x60
 8011c48:	d90b      	bls.n	8011c62 <create_name+0x33a>
 8011c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c4c:	2b7a      	cmp	r3, #122	; 0x7a
 8011c4e:	d808      	bhi.n	8011c62 <create_name+0x33a>
						b |= 1; w -= 0x20;
 8011c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c54:	f043 0301 	orr.w	r3, r3, #1
 8011c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c5e:	3b20      	subs	r3, #32
 8011c60:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8011c62:	6a3b      	ldr	r3, [r7, #32]
 8011c64:	1c5a      	adds	r2, r3, #1
 8011c66:	623a      	str	r2, [r7, #32]
 8011c68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c6a:	b2d1      	uxtb	r1, r2
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	4413      	add	r3, r2
 8011c70:	460a      	mov	r2, r1
 8011c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011c76:	e749      	b.n	8011b0c <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 8011c78:	bf00      	nop
 8011c7a:	e004      	b.n	8011c86 <create_name+0x35e>
 8011c7c:	08014a78 	.word	0x08014a78
 8011c80:	08014a84 	.word	0x08014a84
			if (si > di) break;			/* No extension */
 8011c84:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011c8c:	2be5      	cmp	r3, #229	; 0xe5
 8011c8e:	d103      	bne.n	8011c98 <create_name+0x370>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2205      	movs	r2, #5
 8011c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8011c98:	69fb      	ldr	r3, [r7, #28]
 8011c9a:	2b08      	cmp	r3, #8
 8011c9c:	d104      	bne.n	8011ca8 <create_name+0x380>
 8011c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ca2:	009b      	lsls	r3, r3, #2
 8011ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cac:	f003 030c 	and.w	r3, r3, #12
 8011cb0:	2b0c      	cmp	r3, #12
 8011cb2:	d005      	beq.n	8011cc0 <create_name+0x398>
 8011cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cb8:	f003 0303 	and.w	r3, r3, #3
 8011cbc:	2b03      	cmp	r3, #3
 8011cbe:	d105      	bne.n	8011ccc <create_name+0x3a4>
 8011cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011cc4:	f043 0302 	orr.w	r3, r3, #2
 8011cc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011cd0:	f003 0302 	and.w	r3, r3, #2
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d117      	bne.n	8011d08 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8011cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cdc:	f003 0303 	and.w	r3, r3, #3
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d105      	bne.n	8011cf0 <create_name+0x3c8>
 8011ce4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ce8:	f043 0310 	orr.w	r3, r3, #16
 8011cec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cf4:	f003 030c 	and.w	r3, r3, #12
 8011cf8:	2b04      	cmp	r3, #4
 8011cfa:	d105      	bne.n	8011d08 <create_name+0x3e0>
 8011cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d00:	f043 0308 	orr.w	r3, r3, #8
 8011d04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011d0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8011d12:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3728      	adds	r7, #40	; 0x28
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b086      	sub	sp, #24
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011d30:	e002      	b.n	8011d38 <follow_path+0x1c>
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	3301      	adds	r3, #1
 8011d36:	603b      	str	r3, [r7, #0]
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	2b2f      	cmp	r3, #47	; 0x2f
 8011d3e:	d0f8      	beq.n	8011d32 <follow_path+0x16>
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	2b5c      	cmp	r3, #92	; 0x5c
 8011d46:	d0f4      	beq.n	8011d32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011d48:	693b      	ldr	r3, [r7, #16]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	2b1f      	cmp	r3, #31
 8011d54:	d80a      	bhi.n	8011d6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2280      	movs	r2, #128	; 0x80
 8011d5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011d5e:	2100      	movs	r1, #0
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f7fe ffbb 	bl	8010cdc <dir_sdi>
 8011d66:	4603      	mov	r3, r0
 8011d68:	75fb      	strb	r3, [r7, #23]
 8011d6a:	e043      	b.n	8011df4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011d6c:	463b      	mov	r3, r7
 8011d6e:	4619      	mov	r1, r3
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f7ff fdd9 	bl	8011928 <create_name>
 8011d76:	4603      	mov	r3, r0
 8011d78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011d7a:	7dfb      	ldrb	r3, [r7, #23]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d134      	bne.n	8011dea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7ff fc19 	bl	80115b8 <dir_find>
 8011d86:	4603      	mov	r3, r0
 8011d88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011d90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011d92:	7dfb      	ldrb	r3, [r7, #23]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d00a      	beq.n	8011dae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011d98:	7dfb      	ldrb	r3, [r7, #23]
 8011d9a:	2b04      	cmp	r3, #4
 8011d9c:	d127      	bne.n	8011dee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011d9e:	7afb      	ldrb	r3, [r7, #11]
 8011da0:	f003 0304 	and.w	r3, r3, #4
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d122      	bne.n	8011dee <follow_path+0xd2>
 8011da8:	2305      	movs	r3, #5
 8011daa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011dac:	e01f      	b.n	8011dee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011dae:	7afb      	ldrb	r3, [r7, #11]
 8011db0:	f003 0304 	and.w	r3, r3, #4
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d11c      	bne.n	8011df2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	799b      	ldrb	r3, [r3, #6]
 8011dbc:	f003 0310 	and.w	r3, r3, #16
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d102      	bne.n	8011dca <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011dc4:	2305      	movs	r3, #5
 8011dc6:	75fb      	strb	r3, [r7, #23]
 8011dc8:	e014      	b.n	8011df4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	695b      	ldr	r3, [r3, #20]
 8011dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dd8:	4413      	add	r3, r2
 8011dda:	4619      	mov	r1, r3
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f7ff f904 	bl	8010fea <ld_clust>
 8011de2:	4602      	mov	r2, r0
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011de8:	e7c0      	b.n	8011d6c <follow_path+0x50>
			if (res != FR_OK) break;
 8011dea:	bf00      	nop
 8011dec:	e002      	b.n	8011df4 <follow_path+0xd8>
				break;
 8011dee:	bf00      	nop
 8011df0:	e000      	b.n	8011df4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011df2:	bf00      	nop
			}
		}
	}

	return res;
 8011df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}

08011dfe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011dfe:	b480      	push	{r7}
 8011e00:	b087      	sub	sp, #28
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011e06:	f04f 33ff 	mov.w	r3, #4294967295
 8011e0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d031      	beq.n	8011e78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	617b      	str	r3, [r7, #20]
 8011e1a:	e002      	b.n	8011e22 <get_ldnumber+0x24>
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	3301      	adds	r3, #1
 8011e20:	617b      	str	r3, [r7, #20]
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	2b1f      	cmp	r3, #31
 8011e28:	d903      	bls.n	8011e32 <get_ldnumber+0x34>
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	781b      	ldrb	r3, [r3, #0]
 8011e2e:	2b3a      	cmp	r3, #58	; 0x3a
 8011e30:	d1f4      	bne.n	8011e1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	2b3a      	cmp	r3, #58	; 0x3a
 8011e38:	d11c      	bne.n	8011e74 <get_ldnumber+0x76>
			tp = *path;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	1c5a      	adds	r2, r3, #1
 8011e44:	60fa      	str	r2, [r7, #12]
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	3b30      	subs	r3, #48	; 0x30
 8011e4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	2b09      	cmp	r3, #9
 8011e50:	d80e      	bhi.n	8011e70 <get_ldnumber+0x72>
 8011e52:	68fa      	ldr	r2, [r7, #12]
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d10a      	bne.n	8011e70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d107      	bne.n	8011e70 <get_ldnumber+0x72>
					vol = (int)i;
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	3301      	adds	r3, #1
 8011e68:	617b      	str	r3, [r7, #20]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	697a      	ldr	r2, [r7, #20]
 8011e6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	e002      	b.n	8011e7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011e74:	2300      	movs	r3, #0
 8011e76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011e78:	693b      	ldr	r3, [r7, #16]
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	371c      	adds	r7, #28
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e84:	4770      	bx	lr
	...

08011e88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2200      	movs	r2, #0
 8011e96:	70da      	strb	r2, [r3, #3]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e9e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011ea0:	6839      	ldr	r1, [r7, #0]
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f7fe fb9c 	bl	80105e0 <move_window>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d001      	beq.n	8011eb2 <check_fs+0x2a>
 8011eae:	2304      	movs	r3, #4
 8011eb0:	e038      	b.n	8011f24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	3334      	adds	r3, #52	; 0x34
 8011eb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fe f8e0 	bl	8010080 <ld_word>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d001      	beq.n	8011ed0 <check_fs+0x48>
 8011ecc:	2303      	movs	r3, #3
 8011ece:	e029      	b.n	8011f24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011ed6:	2be9      	cmp	r3, #233	; 0xe9
 8011ed8:	d009      	beq.n	8011eee <check_fs+0x66>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011ee0:	2beb      	cmp	r3, #235	; 0xeb
 8011ee2:	d11e      	bne.n	8011f22 <check_fs+0x9a>
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011eea:	2b90      	cmp	r3, #144	; 0x90
 8011eec:	d119      	bne.n	8011f22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	3334      	adds	r3, #52	; 0x34
 8011ef2:	3336      	adds	r3, #54	; 0x36
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe f8db 	bl	80100b0 <ld_dword>
 8011efa:	4603      	mov	r3, r0
 8011efc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011f00:	4a0a      	ldr	r2, [pc, #40]	; (8011f2c <check_fs+0xa4>)
 8011f02:	4293      	cmp	r3, r2
 8011f04:	d101      	bne.n	8011f0a <check_fs+0x82>
 8011f06:	2300      	movs	r3, #0
 8011f08:	e00c      	b.n	8011f24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	3334      	adds	r3, #52	; 0x34
 8011f0e:	3352      	adds	r3, #82	; 0x52
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fe f8cd 	bl	80100b0 <ld_dword>
 8011f16:	4603      	mov	r3, r0
 8011f18:	4a05      	ldr	r2, [pc, #20]	; (8011f30 <check_fs+0xa8>)
 8011f1a:	4293      	cmp	r3, r2
 8011f1c:	d101      	bne.n	8011f22 <check_fs+0x9a>
 8011f1e:	2300      	movs	r3, #0
 8011f20:	e000      	b.n	8011f24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011f22:	2302      	movs	r3, #2
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3708      	adds	r7, #8
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	00544146 	.word	0x00544146
 8011f30:	33544146 	.word	0x33544146

08011f34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b096      	sub	sp, #88	; 0x58
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	60b9      	str	r1, [r7, #8]
 8011f3e:	4613      	mov	r3, r2
 8011f40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	2200      	movs	r2, #0
 8011f46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011f48:	68f8      	ldr	r0, [r7, #12]
 8011f4a:	f7ff ff58 	bl	8011dfe <get_ldnumber>
 8011f4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	da01      	bge.n	8011f5a <find_volume+0x26>
 8011f56:	230b      	movs	r3, #11
 8011f58:	e22d      	b.n	80123b6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011f5a:	4aa1      	ldr	r2, [pc, #644]	; (80121e0 <find_volume+0x2ac>)
 8011f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d101      	bne.n	8011f6e <find_volume+0x3a>
 8011f6a:	230c      	movs	r3, #12
 8011f6c:	e223      	b.n	80123b6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	f023 0301 	bic.w	r3, r3, #1
 8011f7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d01a      	beq.n	8011fba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f86:	785b      	ldrb	r3, [r3, #1]
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7fd ffdb 	bl	800ff44 <disk_status>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f98:	f003 0301 	and.w	r3, r3, #1
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d10c      	bne.n	8011fba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011fa0:	79fb      	ldrb	r3, [r7, #7]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d007      	beq.n	8011fb6 <find_volume+0x82>
 8011fa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011faa:	f003 0304 	and.w	r3, r3, #4
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d001      	beq.n	8011fb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011fb2:	230a      	movs	r3, #10
 8011fb4:	e1ff      	b.n	80123b6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	e1fd      	b.n	80123b6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fc2:	b2da      	uxtb	r2, r3
 8011fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fca:	785b      	ldrb	r3, [r3, #1]
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7fd ffd3 	bl	800ff78 <disk_initialize>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011fdc:	f003 0301 	and.w	r3, r3, #1
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d001      	beq.n	8011fe8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011fe4:	2303      	movs	r3, #3
 8011fe6:	e1e6      	b.n	80123b6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011fe8:	79fb      	ldrb	r3, [r7, #7]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d007      	beq.n	8011ffe <find_volume+0xca>
 8011fee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ff2:	f003 0304 	and.w	r3, r3, #4
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d001      	beq.n	8011ffe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011ffa:	230a      	movs	r3, #10
 8011ffc:	e1db      	b.n	80123b6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011ffe:	2300      	movs	r3, #0
 8012000:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012002:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012006:	f7ff ff3f 	bl	8011e88 <check_fs>
 801200a:	4603      	mov	r3, r0
 801200c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012014:	2b02      	cmp	r3, #2
 8012016:	d149      	bne.n	80120ac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012018:	2300      	movs	r3, #0
 801201a:	643b      	str	r3, [r7, #64]	; 0x40
 801201c:	e01e      	b.n	801205c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012020:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012026:	011b      	lsls	r3, r3, #4
 8012028:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801202c:	4413      	add	r3, r2
 801202e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012032:	3304      	adds	r3, #4
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d006      	beq.n	8012048 <find_volume+0x114>
 801203a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203c:	3308      	adds	r3, #8
 801203e:	4618      	mov	r0, r3
 8012040:	f7fe f836 	bl	80100b0 <ld_dword>
 8012044:	4602      	mov	r2, r0
 8012046:	e000      	b.n	801204a <find_volume+0x116>
 8012048:	2200      	movs	r2, #0
 801204a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	3358      	adds	r3, #88	; 0x58
 8012050:	443b      	add	r3, r7
 8012052:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012058:	3301      	adds	r3, #1
 801205a:	643b      	str	r3, [r7, #64]	; 0x40
 801205c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801205e:	2b03      	cmp	r3, #3
 8012060:	d9dd      	bls.n	801201e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012062:	2300      	movs	r3, #0
 8012064:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012068:	2b00      	cmp	r3, #0
 801206a:	d002      	beq.n	8012072 <find_volume+0x13e>
 801206c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801206e:	3b01      	subs	r3, #1
 8012070:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	3358      	adds	r3, #88	; 0x58
 8012078:	443b      	add	r3, r7
 801207a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801207e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012082:	2b00      	cmp	r3, #0
 8012084:	d005      	beq.n	8012092 <find_volume+0x15e>
 8012086:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012088:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801208a:	f7ff fefd 	bl	8011e88 <check_fs>
 801208e:	4603      	mov	r3, r0
 8012090:	e000      	b.n	8012094 <find_volume+0x160>
 8012092:	2303      	movs	r3, #3
 8012094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801209c:	2b01      	cmp	r3, #1
 801209e:	d905      	bls.n	80120ac <find_volume+0x178>
 80120a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120a2:	3301      	adds	r3, #1
 80120a4:	643b      	str	r3, [r7, #64]	; 0x40
 80120a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120a8:	2b03      	cmp	r3, #3
 80120aa:	d9e2      	bls.n	8012072 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80120ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120b0:	2b04      	cmp	r3, #4
 80120b2:	d101      	bne.n	80120b8 <find_volume+0x184>
 80120b4:	2301      	movs	r3, #1
 80120b6:	e17e      	b.n	80123b6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80120b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d901      	bls.n	80120c4 <find_volume+0x190>
 80120c0:	230d      	movs	r3, #13
 80120c2:	e178      	b.n	80123b6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80120c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c6:	3334      	adds	r3, #52	; 0x34
 80120c8:	330b      	adds	r3, #11
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7fd ffd8 	bl	8010080 <ld_word>
 80120d0:	4603      	mov	r3, r0
 80120d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120d6:	d001      	beq.n	80120dc <find_volume+0x1a8>
 80120d8:	230d      	movs	r3, #13
 80120da:	e16c      	b.n	80123b6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80120dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120de:	3334      	adds	r3, #52	; 0x34
 80120e0:	3316      	adds	r3, #22
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7fd ffcc 	bl	8010080 <ld_word>
 80120e8:	4603      	mov	r3, r0
 80120ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80120ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d106      	bne.n	8012100 <find_volume+0x1cc>
 80120f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f4:	3334      	adds	r3, #52	; 0x34
 80120f6:	3324      	adds	r3, #36	; 0x24
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7fd ffd9 	bl	80100b0 <ld_dword>
 80120fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012104:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012108:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801210e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012112:	789b      	ldrb	r3, [r3, #2]
 8012114:	2b01      	cmp	r3, #1
 8012116:	d005      	beq.n	8012124 <find_volume+0x1f0>
 8012118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801211a:	789b      	ldrb	r3, [r3, #2]
 801211c:	2b02      	cmp	r3, #2
 801211e:	d001      	beq.n	8012124 <find_volume+0x1f0>
 8012120:	230d      	movs	r3, #13
 8012122:	e148      	b.n	80123b6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012126:	789b      	ldrb	r3, [r3, #2]
 8012128:	461a      	mov	r2, r3
 801212a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801212c:	fb02 f303 	mul.w	r3, r2, r3
 8012130:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012138:	b29a      	uxth	r2, r3
 801213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801213c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012140:	895b      	ldrh	r3, [r3, #10]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d008      	beq.n	8012158 <find_volume+0x224>
 8012146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012148:	895b      	ldrh	r3, [r3, #10]
 801214a:	461a      	mov	r2, r3
 801214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801214e:	895b      	ldrh	r3, [r3, #10]
 8012150:	3b01      	subs	r3, #1
 8012152:	4013      	ands	r3, r2
 8012154:	2b00      	cmp	r3, #0
 8012156:	d001      	beq.n	801215c <find_volume+0x228>
 8012158:	230d      	movs	r3, #13
 801215a:	e12c      	b.n	80123b6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215e:	3334      	adds	r3, #52	; 0x34
 8012160:	3311      	adds	r3, #17
 8012162:	4618      	mov	r0, r3
 8012164:	f7fd ff8c 	bl	8010080 <ld_word>
 8012168:	4603      	mov	r3, r0
 801216a:	461a      	mov	r2, r3
 801216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012172:	891b      	ldrh	r3, [r3, #8]
 8012174:	f003 030f 	and.w	r3, r3, #15
 8012178:	b29b      	uxth	r3, r3
 801217a:	2b00      	cmp	r3, #0
 801217c:	d001      	beq.n	8012182 <find_volume+0x24e>
 801217e:	230d      	movs	r3, #13
 8012180:	e119      	b.n	80123b6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012184:	3334      	adds	r3, #52	; 0x34
 8012186:	3313      	adds	r3, #19
 8012188:	4618      	mov	r0, r3
 801218a:	f7fd ff79 	bl	8010080 <ld_word>
 801218e:	4603      	mov	r3, r0
 8012190:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012194:	2b00      	cmp	r3, #0
 8012196:	d106      	bne.n	80121a6 <find_volume+0x272>
 8012198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801219a:	3334      	adds	r3, #52	; 0x34
 801219c:	3320      	adds	r3, #32
 801219e:	4618      	mov	r0, r3
 80121a0:	f7fd ff86 	bl	80100b0 <ld_dword>
 80121a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80121a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a8:	3334      	adds	r3, #52	; 0x34
 80121aa:	330e      	adds	r3, #14
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7fd ff67 	bl	8010080 <ld_word>
 80121b2:	4603      	mov	r3, r0
 80121b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80121b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d101      	bne.n	80121c0 <find_volume+0x28c>
 80121bc:	230d      	movs	r3, #13
 80121be:	e0fa      	b.n	80123b6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80121c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80121c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c4:	4413      	add	r3, r2
 80121c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121c8:	8912      	ldrh	r2, [r2, #8]
 80121ca:	0912      	lsrs	r2, r2, #4
 80121cc:	b292      	uxth	r2, r2
 80121ce:	4413      	add	r3, r2
 80121d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80121d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d204      	bcs.n	80121e4 <find_volume+0x2b0>
 80121da:	230d      	movs	r3, #13
 80121dc:	e0eb      	b.n	80123b6 <find_volume+0x482>
 80121de:	bf00      	nop
 80121e0:	24000300 	.word	0x24000300
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80121e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e8:	1ad3      	subs	r3, r2, r3
 80121ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121ec:	8952      	ldrh	r2, [r2, #10]
 80121ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80121f2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80121f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d101      	bne.n	80121fe <find_volume+0x2ca>
 80121fa:	230d      	movs	r3, #13
 80121fc:	e0db      	b.n	80123b6 <find_volume+0x482>
		fmt = FS_FAT32;
 80121fe:	2303      	movs	r3, #3
 8012200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012206:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801220a:	4293      	cmp	r3, r2
 801220c:	d802      	bhi.n	8012214 <find_volume+0x2e0>
 801220e:	2302      	movs	r3, #2
 8012210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012216:	f640 72f5 	movw	r2, #4085	; 0xff5
 801221a:	4293      	cmp	r3, r2
 801221c:	d802      	bhi.n	8012224 <find_volume+0x2f0>
 801221e:	2301      	movs	r3, #1
 8012220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012226:	1c9a      	adds	r2, r3, #2
 8012228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012230:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012232:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012236:	441a      	add	r2, r3
 8012238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801223c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012240:	441a      	add	r2, r3
 8012242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012244:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012246:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801224a:	2b03      	cmp	r3, #3
 801224c:	d11e      	bne.n	801228c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012250:	3334      	adds	r3, #52	; 0x34
 8012252:	332a      	adds	r3, #42	; 0x2a
 8012254:	4618      	mov	r0, r3
 8012256:	f7fd ff13 	bl	8010080 <ld_word>
 801225a:	4603      	mov	r3, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	d001      	beq.n	8012264 <find_volume+0x330>
 8012260:	230d      	movs	r3, #13
 8012262:	e0a8      	b.n	80123b6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012266:	891b      	ldrh	r3, [r3, #8]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d001      	beq.n	8012270 <find_volume+0x33c>
 801226c:	230d      	movs	r3, #13
 801226e:	e0a2      	b.n	80123b6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012272:	3334      	adds	r3, #52	; 0x34
 8012274:	332c      	adds	r3, #44	; 0x2c
 8012276:	4618      	mov	r0, r3
 8012278:	f7fd ff1a 	bl	80100b0 <ld_dword>
 801227c:	4602      	mov	r2, r0
 801227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012280:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012284:	699b      	ldr	r3, [r3, #24]
 8012286:	009b      	lsls	r3, r3, #2
 8012288:	647b      	str	r3, [r7, #68]	; 0x44
 801228a:	e01f      	b.n	80122cc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801228e:	891b      	ldrh	r3, [r3, #8]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d101      	bne.n	8012298 <find_volume+0x364>
 8012294:	230d      	movs	r3, #13
 8012296:	e08e      	b.n	80123b6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801229a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801229c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801229e:	441a      	add	r2, r3
 80122a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80122a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122a8:	2b02      	cmp	r3, #2
 80122aa:	d103      	bne.n	80122b4 <find_volume+0x380>
 80122ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ae:	699b      	ldr	r3, [r3, #24]
 80122b0:	005b      	lsls	r3, r3, #1
 80122b2:	e00a      	b.n	80122ca <find_volume+0x396>
 80122b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b6:	699a      	ldr	r2, [r3, #24]
 80122b8:	4613      	mov	r3, r2
 80122ba:	005b      	lsls	r3, r3, #1
 80122bc:	4413      	add	r3, r2
 80122be:	085a      	lsrs	r2, r3, #1
 80122c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c2:	699b      	ldr	r3, [r3, #24]
 80122c4:	f003 0301 	and.w	r3, r3, #1
 80122c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80122ca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80122cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ce:	69da      	ldr	r2, [r3, #28]
 80122d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80122d6:	0a5b      	lsrs	r3, r3, #9
 80122d8:	429a      	cmp	r2, r3
 80122da:	d201      	bcs.n	80122e0 <find_volume+0x3ac>
 80122dc:	230d      	movs	r3, #13
 80122de:	e06a      	b.n	80123b6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80122e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e2:	f04f 32ff 	mov.w	r2, #4294967295
 80122e6:	615a      	str	r2, [r3, #20]
 80122e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ea:	695a      	ldr	r2, [r3, #20]
 80122ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80122f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f2:	2280      	movs	r2, #128	; 0x80
 80122f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80122f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122fa:	2b03      	cmp	r3, #3
 80122fc:	d149      	bne.n	8012392 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80122fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012300:	3334      	adds	r3, #52	; 0x34
 8012302:	3330      	adds	r3, #48	; 0x30
 8012304:	4618      	mov	r0, r3
 8012306:	f7fd febb 	bl	8010080 <ld_word>
 801230a:	4603      	mov	r3, r0
 801230c:	2b01      	cmp	r3, #1
 801230e:	d140      	bne.n	8012392 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012312:	3301      	adds	r3, #1
 8012314:	4619      	mov	r1, r3
 8012316:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012318:	f7fe f962 	bl	80105e0 <move_window>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d137      	bne.n	8012392 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012324:	2200      	movs	r2, #0
 8012326:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232a:	3334      	adds	r3, #52	; 0x34
 801232c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012330:	4618      	mov	r0, r3
 8012332:	f7fd fea5 	bl	8010080 <ld_word>
 8012336:	4603      	mov	r3, r0
 8012338:	461a      	mov	r2, r3
 801233a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801233e:	429a      	cmp	r2, r3
 8012340:	d127      	bne.n	8012392 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012344:	3334      	adds	r3, #52	; 0x34
 8012346:	4618      	mov	r0, r3
 8012348:	f7fd feb2 	bl	80100b0 <ld_dword>
 801234c:	4603      	mov	r3, r0
 801234e:	4a1c      	ldr	r2, [pc, #112]	; (80123c0 <find_volume+0x48c>)
 8012350:	4293      	cmp	r3, r2
 8012352:	d11e      	bne.n	8012392 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012356:	3334      	adds	r3, #52	; 0x34
 8012358:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801235c:	4618      	mov	r0, r3
 801235e:	f7fd fea7 	bl	80100b0 <ld_dword>
 8012362:	4603      	mov	r3, r0
 8012364:	4a17      	ldr	r2, [pc, #92]	; (80123c4 <find_volume+0x490>)
 8012366:	4293      	cmp	r3, r2
 8012368:	d113      	bne.n	8012392 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801236c:	3334      	adds	r3, #52	; 0x34
 801236e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012372:	4618      	mov	r0, r3
 8012374:	f7fd fe9c 	bl	80100b0 <ld_dword>
 8012378:	4602      	mov	r2, r0
 801237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801237c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012380:	3334      	adds	r3, #52	; 0x34
 8012382:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012386:	4618      	mov	r0, r3
 8012388:	f7fd fe92 	bl	80100b0 <ld_dword>
 801238c:	4602      	mov	r2, r0
 801238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012390:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012394:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012398:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801239a:	4b0b      	ldr	r3, [pc, #44]	; (80123c8 <find_volume+0x494>)
 801239c:	881b      	ldrh	r3, [r3, #0]
 801239e:	3301      	adds	r3, #1
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	4b09      	ldr	r3, [pc, #36]	; (80123c8 <find_volume+0x494>)
 80123a4:	801a      	strh	r2, [r3, #0]
 80123a6:	4b08      	ldr	r3, [pc, #32]	; (80123c8 <find_volume+0x494>)
 80123a8:	881a      	ldrh	r2, [r3, #0]
 80123aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80123ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80123b0:	f7fe f8ae 	bl	8010510 <clear_lock>
#endif
	return FR_OK;
 80123b4:	2300      	movs	r3, #0
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3758      	adds	r7, #88	; 0x58
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	41615252 	.word	0x41615252
 80123c4:	61417272 	.word	0x61417272
 80123c8:	24000304 	.word	0x24000304

080123cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b084      	sub	sp, #16
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80123d6:	2309      	movs	r3, #9
 80123d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d01c      	beq.n	801241a <validate+0x4e>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d018      	beq.n	801241a <validate+0x4e>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d013      	beq.n	801241a <validate+0x4e>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	889a      	ldrh	r2, [r3, #4]
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	88db      	ldrh	r3, [r3, #6]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d10c      	bne.n	801241a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	785b      	ldrb	r3, [r3, #1]
 8012406:	4618      	mov	r0, r3
 8012408:	f7fd fd9c 	bl	800ff44 <disk_status>
 801240c:	4603      	mov	r3, r0
 801240e:	f003 0301 	and.w	r3, r3, #1
 8012412:	2b00      	cmp	r3, #0
 8012414:	d101      	bne.n	801241a <validate+0x4e>
			res = FR_OK;
 8012416:	2300      	movs	r3, #0
 8012418:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801241a:	7bfb      	ldrb	r3, [r7, #15]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d102      	bne.n	8012426 <validate+0x5a>
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	e000      	b.n	8012428 <validate+0x5c>
 8012426:	2300      	movs	r3, #0
 8012428:	683a      	ldr	r2, [r7, #0]
 801242a:	6013      	str	r3, [r2, #0]
	return res;
 801242c:	7bfb      	ldrb	r3, [r7, #15]
}
 801242e:	4618      	mov	r0, r3
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
	...

08012438 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b088      	sub	sp, #32
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	4613      	mov	r3, r2
 8012444:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801244a:	f107 0310 	add.w	r3, r7, #16
 801244e:	4618      	mov	r0, r3
 8012450:	f7ff fcd5 	bl	8011dfe <get_ldnumber>
 8012454:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012456:	69fb      	ldr	r3, [r7, #28]
 8012458:	2b00      	cmp	r3, #0
 801245a:	da01      	bge.n	8012460 <f_mount+0x28>
 801245c:	230b      	movs	r3, #11
 801245e:	e02b      	b.n	80124b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012460:	4a17      	ldr	r2, [pc, #92]	; (80124c0 <f_mount+0x88>)
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012468:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d005      	beq.n	801247c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012470:	69b8      	ldr	r0, [r7, #24]
 8012472:	f7fe f84d 	bl	8010510 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012476:	69bb      	ldr	r3, [r7, #24]
 8012478:	2200      	movs	r2, #0
 801247a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d002      	beq.n	8012488 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	2200      	movs	r2, #0
 8012486:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012488:	68fa      	ldr	r2, [r7, #12]
 801248a:	490d      	ldr	r1, [pc, #52]	; (80124c0 <f_mount+0x88>)
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d002      	beq.n	801249e <f_mount+0x66>
 8012498:	79fb      	ldrb	r3, [r7, #7]
 801249a:	2b01      	cmp	r3, #1
 801249c:	d001      	beq.n	80124a2 <f_mount+0x6a>
 801249e:	2300      	movs	r3, #0
 80124a0:	e00a      	b.n	80124b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80124a2:	f107 010c 	add.w	r1, r7, #12
 80124a6:	f107 0308 	add.w	r3, r7, #8
 80124aa:	2200      	movs	r2, #0
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7ff fd41 	bl	8011f34 <find_volume>
 80124b2:	4603      	mov	r3, r0
 80124b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80124b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80124b8:	4618      	mov	r0, r3
 80124ba:	3720      	adds	r7, #32
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	24000300 	.word	0x24000300

080124c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80124d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80124d4:	6018      	str	r0, [r3, #0]
 80124d6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80124da:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80124de:	6019      	str	r1, [r3, #0]
 80124e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80124e4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80124e8:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80124ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80124ee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d101      	bne.n	80124fc <f_open+0x38>
 80124f8:	2309      	movs	r3, #9
 80124fa:	e295      	b.n	8012a28 <f_open+0x564>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80124fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012500:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012504:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8012508:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 801250c:	7812      	ldrb	r2, [r2, #0]
 801250e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012512:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8012514:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012518:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801251c:	781a      	ldrb	r2, [r3, #0]
 801251e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8012522:	f107 0308 	add.w	r3, r7, #8
 8012526:	4618      	mov	r0, r3
 8012528:	f7ff fd04 	bl	8011f34 <find_volume>
 801252c:	4603      	mov	r3, r0
 801252e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8012532:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012536:	2b00      	cmp	r3, #0
 8012538:	f040 8269 	bne.w	8012a0e <f_open+0x54a>
		dj.obj.fs = fs;
 801253c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012540:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8012544:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012548:	f107 0214 	add.w	r2, r7, #20
 801254c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801254e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012552:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8012556:	681a      	ldr	r2, [r3, #0]
 8012558:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801255c:	4611      	mov	r1, r2
 801255e:	4618      	mov	r0, r3
 8012560:	f7ff fbdc 	bl	8011d1c <follow_path>
 8012564:	4603      	mov	r3, r0
 8012566:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801256a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801256e:	2b00      	cmp	r3, #0
 8012570:	d11e      	bne.n	80125b0 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012572:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8012576:	b25b      	sxtb	r3, r3
 8012578:	2b00      	cmp	r3, #0
 801257a:	da03      	bge.n	8012584 <f_open+0xc0>
				res = FR_INVALID_NAME;
 801257c:	2306      	movs	r3, #6
 801257e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8012582:	e015      	b.n	80125b0 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012584:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012588:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	f023 0301 	bic.w	r3, r3, #1
 8012592:	2b00      	cmp	r3, #0
 8012594:	bf14      	ite	ne
 8012596:	2301      	movne	r3, #1
 8012598:	2300      	moveq	r3, #0
 801259a:	b2db      	uxtb	r3, r3
 801259c:	461a      	mov	r2, r3
 801259e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80125a2:	4611      	mov	r1, r2
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7fd fe6b 	bl	8010280 <chk_lock>
 80125aa:	4603      	mov	r3, r0
 80125ac:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80125b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80125b4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	f003 031c 	and.w	r3, r3, #28
 80125be:	2b00      	cmp	r3, #0
 80125c0:	f000 80a7 	beq.w	8012712 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 80125c4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d01f      	beq.n	801260c <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80125cc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80125d0:	2b04      	cmp	r3, #4
 80125d2:	d10e      	bne.n	80125f2 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80125d4:	f7fd feb0 	bl	8010338 <enq_lock>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d006      	beq.n	80125ec <f_open+0x128>
 80125de:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7ff f8a8 	bl	8011738 <dir_register>
 80125e8:	4603      	mov	r3, r0
 80125ea:	e000      	b.n	80125ee <f_open+0x12a>
 80125ec:	2312      	movs	r3, #18
 80125ee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80125f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80125f6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80125fa:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80125fe:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8012602:	7812      	ldrb	r2, [r2, #0]
 8012604:	f042 0208 	orr.w	r2, r2, #8
 8012608:	701a      	strb	r2, [r3, #0]
 801260a:	e015      	b.n	8012638 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801260c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8012610:	f003 0311 	and.w	r3, r3, #17
 8012614:	2b00      	cmp	r3, #0
 8012616:	d003      	beq.n	8012620 <f_open+0x15c>
					res = FR_DENIED;
 8012618:	2307      	movs	r3, #7
 801261a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801261e:	e00b      	b.n	8012638 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012620:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012624:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	f003 0304 	and.w	r3, r3, #4
 801262e:	2b00      	cmp	r3, #0
 8012630:	d002      	beq.n	8012638 <f_open+0x174>
 8012632:	2308      	movs	r3, #8
 8012634:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012638:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801263c:	2b00      	cmp	r3, #0
 801263e:	f040 8088 	bne.w	8012752 <f_open+0x28e>
 8012642:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012646:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	f003 0308 	and.w	r3, r3, #8
 8012650:	2b00      	cmp	r3, #0
 8012652:	d07e      	beq.n	8012752 <f_open+0x28e>
				dw = GET_FATTIME();
 8012654:	f7fa f84e 	bl	800c6f4 <get_fattime>
 8012658:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801265c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012660:	330e      	adds	r3, #14
 8012662:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8012666:	4618      	mov	r0, r3
 8012668:	f7fd fd60 	bl	801012c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801266c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012670:	3316      	adds	r3, #22
 8012672:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8012676:	4618      	mov	r0, r3
 8012678:	f7fd fd58 	bl	801012c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801267c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012680:	330b      	adds	r3, #11
 8012682:	2220      	movs	r2, #32
 8012684:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012686:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801268a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801268e:	4611      	mov	r1, r2
 8012690:	4618      	mov	r0, r3
 8012692:	f7fe fcaa 	bl	8010fea <ld_clust>
 8012696:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801269a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801269e:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80126a2:	2200      	movs	r2, #0
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7fe fcbf 	bl	8011028 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80126aa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80126ae:	331c      	adds	r3, #28
 80126b0:	2100      	movs	r1, #0
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7fd fd3a 	bl	801012c <st_dword>
					fs->wflag = 1;
 80126b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80126bc:	2201      	movs	r2, #1
 80126be:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80126c0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d044      	beq.n	8012752 <f_open+0x28e>
						dw = fs->winsect;
 80126c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80126cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126ce:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80126d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80126d6:	2200      	movs	r2, #0
 80126d8:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80126dc:	4618      	mov	r0, r3
 80126de:	f7fe f9cc 	bl	8010a7a <remove_chain>
 80126e2:	4603      	mov	r3, r0
 80126e4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80126e8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d130      	bne.n	8012752 <f_open+0x28e>
							res = move_window(fs, dw);
 80126f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80126f4:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7fd ff71 	bl	80105e0 <move_window>
 80126fe:	4603      	mov	r3, r0
 8012700:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012704:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012708:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801270c:	3a01      	subs	r2, #1
 801270e:	611a      	str	r2, [r3, #16]
 8012710:	e01f      	b.n	8012752 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012712:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012716:	2b00      	cmp	r3, #0
 8012718:	d11b      	bne.n	8012752 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801271a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801271e:	f003 0310 	and.w	r3, r3, #16
 8012722:	2b00      	cmp	r3, #0
 8012724:	d003      	beq.n	801272e <f_open+0x26a>
					res = FR_NO_FILE;
 8012726:	2304      	movs	r3, #4
 8012728:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801272c:	e011      	b.n	8012752 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801272e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012732:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	f003 0302 	and.w	r3, r3, #2
 801273c:	2b00      	cmp	r3, #0
 801273e:	d008      	beq.n	8012752 <f_open+0x28e>
 8012740:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8012744:	f003 0301 	and.w	r3, r3, #1
 8012748:	2b00      	cmp	r3, #0
 801274a:	d002      	beq.n	8012752 <f_open+0x28e>
						res = FR_DENIED;
 801274c:	2307      	movs	r3, #7
 801274e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8012752:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012756:	2b00      	cmp	r3, #0
 8012758:	d14a      	bne.n	80127f0 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801275a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801275e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	f003 0308 	and.w	r3, r3, #8
 8012768:	2b00      	cmp	r3, #0
 801276a:	d00b      	beq.n	8012784 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 801276c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012770:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8012774:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8012778:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 801277c:	7812      	ldrb	r2, [r2, #0]
 801277e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012782:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012784:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801278a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801278e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012796:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801279a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801279e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80127a6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80127aa:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80127ae:	781b      	ldrb	r3, [r3, #0]
 80127b0:	f023 0301 	bic.w	r3, r3, #1
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	bf14      	ite	ne
 80127b8:	2301      	movne	r3, #1
 80127ba:	2300      	moveq	r3, #0
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	461a      	mov	r2, r3
 80127c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80127c4:	4611      	mov	r1, r2
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fd fdd8 	bl	801037c <inc_lock>
 80127cc:	4602      	mov	r2, r0
 80127ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80127d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80127da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80127de:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	691b      	ldr	r3, [r3, #16]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d102      	bne.n	80127f0 <f_open+0x32c>
 80127ea:	2302      	movs	r3, #2
 80127ec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80127f0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	f040 810a 	bne.w	8012a0e <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80127fa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80127fe:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8012802:	4611      	mov	r1, r2
 8012804:	4618      	mov	r0, r3
 8012806:	f7fe fbf0 	bl	8010fea <ld_clust>
 801280a:	4602      	mov	r2, r0
 801280c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012810:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012818:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801281c:	331c      	adds	r3, #28
 801281e:	4618      	mov	r0, r3
 8012820:	f7fd fc46 	bl	80100b0 <ld_dword>
 8012824:	4602      	mov	r2, r0
 8012826:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801282a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012832:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012836:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	2200      	movs	r2, #0
 801283e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012840:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8012844:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012848:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012850:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012854:	88da      	ldrh	r2, [r3, #6]
 8012856:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801285a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012862:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012866:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8012870:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8012874:	7812      	ldrb	r2, [r2, #0]
 8012876:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012878:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801287c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	2200      	movs	r2, #0
 8012884:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012886:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801288a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2200      	movs	r2, #0
 8012892:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012894:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012898:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2200      	movs	r2, #0
 80128a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80128a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80128a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	3330      	adds	r3, #48	; 0x30
 80128ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128b2:	2100      	movs	r1, #0
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fd fc86 	bl	80101c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80128ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80128be:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	f003 0320 	and.w	r3, r3, #32
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f000 80a0 	beq.w	8012a0e <f_open+0x54a>
 80128ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80128d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	f000 8097 	beq.w	8012a0e <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80128e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80128e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	68da      	ldr	r2, [r3, #12]
 80128ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80128f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80128f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80128fc:	895b      	ldrh	r3, [r3, #10]
 80128fe:	025b      	lsls	r3, r3, #9
 8012900:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012904:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012908:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	689b      	ldr	r3, [r3, #8]
 8012910:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012914:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012918:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	68db      	ldr	r3, [r3, #12]
 8012920:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8012924:	e021      	b.n	801296a <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 8012926:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801292a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8012934:	4618      	mov	r0, r3
 8012936:	f7fd ff0e 	bl	8010756 <get_fat>
 801293a:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 801293e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012942:	2b01      	cmp	r3, #1
 8012944:	d802      	bhi.n	801294c <f_open+0x488>
 8012946:	2302      	movs	r3, #2
 8012948:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801294c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012954:	d102      	bne.n	801295c <f_open+0x498>
 8012956:	2301      	movs	r3, #1
 8012958:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801295c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8012960:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8012964:	1ad3      	subs	r3, r2, r3
 8012966:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801296a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801296e:	2b00      	cmp	r3, #0
 8012970:	d105      	bne.n	801297e <f_open+0x4ba>
 8012972:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8012976:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801297a:	429a      	cmp	r2, r3
 801297c:	d8d3      	bhi.n	8012926 <f_open+0x462>
				}
				fp->clust = clst;
 801297e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012982:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801298c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801298e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012992:	2b00      	cmp	r3, #0
 8012994:	d13b      	bne.n	8012a0e <f_open+0x54a>
 8012996:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801299a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d035      	beq.n	8012a0e <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80129a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80129a6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7fd feb4 	bl	8010718 <clust2sect>
 80129b0:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 80129b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d103      	bne.n	80129c4 <f_open+0x500>
						res = FR_INT_ERR;
 80129bc:	2302      	movs	r3, #2
 80129be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80129c2:	e024      	b.n	8012a0e <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80129c4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80129c8:	0a5a      	lsrs	r2, r3, #9
 80129ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80129ce:	441a      	add	r2, r3
 80129d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80129d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80129dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80129e0:	7858      	ldrb	r0, [r3, #1]
 80129e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80129e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80129f0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80129f4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	6a1a      	ldr	r2, [r3, #32]
 80129fc:	2301      	movs	r3, #1
 80129fe:	f7fd fae1 	bl	800ffc4 <disk_read>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d002      	beq.n	8012a0e <f_open+0x54a>
 8012a08:	2301      	movs	r3, #1
 8012a0a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012a0e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d006      	beq.n	8012a24 <f_open+0x560>
 8012a16:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012a1a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	2200      	movs	r2, #0
 8012a22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012a24:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}

08012a32 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012a32:	b580      	push	{r7, lr}
 8012a34:	b08e      	sub	sp, #56	; 0x38
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	60f8      	str	r0, [r7, #12]
 8012a3a:	60b9      	str	r1, [r7, #8]
 8012a3c:	607a      	str	r2, [r7, #4]
 8012a3e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	2200      	movs	r2, #0
 8012a48:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	f107 0214 	add.w	r2, r7, #20
 8012a50:	4611      	mov	r1, r2
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7ff fcba 	bl	80123cc <validate>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012a5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d107      	bne.n	8012a76 <f_read+0x44>
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	7d5b      	ldrb	r3, [r3, #21]
 8012a6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d002      	beq.n	8012a7c <f_read+0x4a>
 8012a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a7a:	e115      	b.n	8012ca8 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	7d1b      	ldrb	r3, [r3, #20]
 8012a80:	f003 0301 	and.w	r3, r3, #1
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d101      	bne.n	8012a8c <f_read+0x5a>
 8012a88:	2307      	movs	r3, #7
 8012a8a:	e10d      	b.n	8012ca8 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	68da      	ldr	r2, [r3, #12]
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	699b      	ldr	r3, [r3, #24]
 8012a94:	1ad3      	subs	r3, r2, r3
 8012a96:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	6a3b      	ldr	r3, [r7, #32]
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	f240 80fe 	bls.w	8012c9e <f_read+0x26c>
 8012aa2:	6a3b      	ldr	r3, [r7, #32]
 8012aa4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012aa6:	e0fa      	b.n	8012c9e <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	699b      	ldr	r3, [r3, #24]
 8012aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f040 80c6 	bne.w	8012c42 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	699b      	ldr	r3, [r3, #24]
 8012aba:	0a5b      	lsrs	r3, r3, #9
 8012abc:	697a      	ldr	r2, [r7, #20]
 8012abe:	8952      	ldrh	r2, [r2, #10]
 8012ac0:	3a01      	subs	r2, #1
 8012ac2:	4013      	ands	r3, r2
 8012ac4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d12f      	bne.n	8012b2c <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	699b      	ldr	r3, [r3, #24]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d103      	bne.n	8012adc <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	689b      	ldr	r3, [r3, #8]
 8012ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8012ada:	e013      	b.n	8012b04 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d007      	beq.n	8012af4 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	699b      	ldr	r3, [r3, #24]
 8012ae8:	4619      	mov	r1, r3
 8012aea:	68f8      	ldr	r0, [r7, #12]
 8012aec:	f7fe f8c2 	bl	8010c74 <clmt_clust>
 8012af0:	6338      	str	r0, [r7, #48]	; 0x30
 8012af2:	e007      	b.n	8012b04 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012af4:	68fa      	ldr	r2, [r7, #12]
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	69db      	ldr	r3, [r3, #28]
 8012afa:	4619      	mov	r1, r3
 8012afc:	4610      	mov	r0, r2
 8012afe:	f7fd fe2a 	bl	8010756 <get_fat>
 8012b02:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b06:	2b01      	cmp	r3, #1
 8012b08:	d804      	bhi.n	8012b14 <f_read+0xe2>
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2202      	movs	r2, #2
 8012b0e:	755a      	strb	r2, [r3, #21]
 8012b10:	2302      	movs	r3, #2
 8012b12:	e0c9      	b.n	8012ca8 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b1a:	d104      	bne.n	8012b26 <f_read+0xf4>
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	2201      	movs	r2, #1
 8012b20:	755a      	strb	r2, [r3, #21]
 8012b22:	2301      	movs	r3, #1
 8012b24:	e0c0      	b.n	8012ca8 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b2a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012b2c:	697a      	ldr	r2, [r7, #20]
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	69db      	ldr	r3, [r3, #28]
 8012b32:	4619      	mov	r1, r3
 8012b34:	4610      	mov	r0, r2
 8012b36:	f7fd fdef 	bl	8010718 <clust2sect>
 8012b3a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012b3c:	69bb      	ldr	r3, [r7, #24]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d104      	bne.n	8012b4c <f_read+0x11a>
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2202      	movs	r2, #2
 8012b46:	755a      	strb	r2, [r3, #21]
 8012b48:	2302      	movs	r3, #2
 8012b4a:	e0ad      	b.n	8012ca8 <f_read+0x276>
			sect += csect;
 8012b4c:	69ba      	ldr	r2, [r7, #24]
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	4413      	add	r3, r2
 8012b52:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	0a5b      	lsrs	r3, r3, #9
 8012b58:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d039      	beq.n	8012bd4 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012b60:	69fa      	ldr	r2, [r7, #28]
 8012b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b64:	4413      	add	r3, r2
 8012b66:	697a      	ldr	r2, [r7, #20]
 8012b68:	8952      	ldrh	r2, [r2, #10]
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d905      	bls.n	8012b7a <f_read+0x148>
					cc = fs->csize - csect;
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	895b      	ldrh	r3, [r3, #10]
 8012b72:	461a      	mov	r2, r3
 8012b74:	69fb      	ldr	r3, [r7, #28]
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	7858      	ldrb	r0, [r3, #1]
 8012b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b80:	69ba      	ldr	r2, [r7, #24]
 8012b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b84:	f7fd fa1e 	bl	800ffc4 <disk_read>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d004      	beq.n	8012b98 <f_read+0x166>
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	2201      	movs	r2, #1
 8012b92:	755a      	strb	r2, [r3, #21]
 8012b94:	2301      	movs	r3, #1
 8012b96:	e087      	b.n	8012ca8 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	7d1b      	ldrb	r3, [r3, #20]
 8012b9c:	b25b      	sxtb	r3, r3
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	da14      	bge.n	8012bcc <f_read+0x19a>
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	6a1a      	ldr	r2, [r3, #32]
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	1ad3      	subs	r3, r2, r3
 8012baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d90d      	bls.n	8012bcc <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	6a1a      	ldr	r2, [r3, #32]
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	1ad3      	subs	r3, r2, r3
 8012bb8:	025b      	lsls	r3, r3, #9
 8012bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bbc:	18d0      	adds	r0, r2, r3
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	3330      	adds	r3, #48	; 0x30
 8012bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	f7fd fadc 	bl	8010184 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bce:	025b      	lsls	r3, r3, #9
 8012bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012bd2:	e050      	b.n	8012c76 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	6a1b      	ldr	r3, [r3, #32]
 8012bd8:	69ba      	ldr	r2, [r7, #24]
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	d02e      	beq.n	8012c3c <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	7d1b      	ldrb	r3, [r3, #20]
 8012be2:	b25b      	sxtb	r3, r3
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	da18      	bge.n	8012c1a <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	7858      	ldrb	r0, [r3, #1]
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	6a1a      	ldr	r2, [r3, #32]
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	f7fd fa04 	bl	8010004 <disk_write>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d004      	beq.n	8012c0c <f_read+0x1da>
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	2201      	movs	r2, #1
 8012c06:	755a      	strb	r2, [r3, #21]
 8012c08:	2301      	movs	r3, #1
 8012c0a:	e04d      	b.n	8012ca8 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	7d1b      	ldrb	r3, [r3, #20]
 8012c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c14:	b2da      	uxtb	r2, r3
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	7858      	ldrb	r0, [r3, #1]
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c24:	2301      	movs	r3, #1
 8012c26:	69ba      	ldr	r2, [r7, #24]
 8012c28:	f7fd f9cc 	bl	800ffc4 <disk_read>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d004      	beq.n	8012c3c <f_read+0x20a>
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	2201      	movs	r2, #1
 8012c36:	755a      	strb	r2, [r3, #21]
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e035      	b.n	8012ca8 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	69ba      	ldr	r2, [r7, #24]
 8012c40:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	699b      	ldr	r3, [r3, #24]
 8012c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c4a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d901      	bls.n	8012c5c <f_read+0x22a>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	699b      	ldr	r3, [r3, #24]
 8012c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c6a:	4413      	add	r3, r2
 8012c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c6e:	4619      	mov	r1, r3
 8012c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c72:	f7fd fa87 	bl	8010184 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7a:	4413      	add	r3, r2
 8012c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	699a      	ldr	r2, [r3, #24]
 8012c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c84:	441a      	add	r2, r3
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	619a      	str	r2, [r3, #24]
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	681a      	ldr	r2, [r3, #0]
 8012c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c90:	441a      	add	r2, r3
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	601a      	str	r2, [r3, #0]
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9a:	1ad3      	subs	r3, r2, r3
 8012c9c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f47f af01 	bne.w	8012aa8 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012ca6:	2300      	movs	r3, #0
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3738      	adds	r7, #56	; 0x38
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b08c      	sub	sp, #48	; 0x30
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	607a      	str	r2, [r7, #4]
 8012cbc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	f107 0210 	add.w	r2, r7, #16
 8012cce:	4611      	mov	r1, r2
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7ff fb7b 	bl	80123cc <validate>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012cdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d107      	bne.n	8012cf4 <f_write+0x44>
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	7d5b      	ldrb	r3, [r3, #21]
 8012ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d002      	beq.n	8012cfa <f_write+0x4a>
 8012cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cf8:	e14b      	b.n	8012f92 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	7d1b      	ldrb	r3, [r3, #20]
 8012cfe:	f003 0302 	and.w	r3, r3, #2
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d101      	bne.n	8012d0a <f_write+0x5a>
 8012d06:	2307      	movs	r3, #7
 8012d08:	e143      	b.n	8012f92 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	699a      	ldr	r2, [r3, #24]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	441a      	add	r2, r3
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	699b      	ldr	r3, [r3, #24]
 8012d16:	429a      	cmp	r2, r3
 8012d18:	f080 812d 	bcs.w	8012f76 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	699b      	ldr	r3, [r3, #24]
 8012d20:	43db      	mvns	r3, r3
 8012d22:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012d24:	e127      	b.n	8012f76 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	699b      	ldr	r3, [r3, #24]
 8012d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	f040 80e3 	bne.w	8012efa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	699b      	ldr	r3, [r3, #24]
 8012d38:	0a5b      	lsrs	r3, r3, #9
 8012d3a:	693a      	ldr	r2, [r7, #16]
 8012d3c:	8952      	ldrh	r2, [r2, #10]
 8012d3e:	3a01      	subs	r2, #1
 8012d40:	4013      	ands	r3, r2
 8012d42:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012d44:	69bb      	ldr	r3, [r7, #24]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d143      	bne.n	8012dd2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	699b      	ldr	r3, [r3, #24]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d10c      	bne.n	8012d6c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	689b      	ldr	r3, [r3, #8]
 8012d56:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d11a      	bne.n	8012d94 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2100      	movs	r1, #0
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7fd feee 	bl	8010b44 <create_chain>
 8012d68:	62b8      	str	r0, [r7, #40]	; 0x28
 8012d6a:	e013      	b.n	8012d94 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d007      	beq.n	8012d84 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	699b      	ldr	r3, [r3, #24]
 8012d78:	4619      	mov	r1, r3
 8012d7a:	68f8      	ldr	r0, [r7, #12]
 8012d7c:	f7fd ff7a 	bl	8010c74 <clmt_clust>
 8012d80:	62b8      	str	r0, [r7, #40]	; 0x28
 8012d82:	e007      	b.n	8012d94 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012d84:	68fa      	ldr	r2, [r7, #12]
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	69db      	ldr	r3, [r3, #28]
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	4610      	mov	r0, r2
 8012d8e:	f7fd fed9 	bl	8010b44 <create_chain>
 8012d92:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	f000 80f2 	beq.w	8012f80 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d9e:	2b01      	cmp	r3, #1
 8012da0:	d104      	bne.n	8012dac <f_write+0xfc>
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2202      	movs	r2, #2
 8012da6:	755a      	strb	r2, [r3, #21]
 8012da8:	2302      	movs	r3, #2
 8012daa:	e0f2      	b.n	8012f92 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012db2:	d104      	bne.n	8012dbe <f_write+0x10e>
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	2201      	movs	r2, #1
 8012db8:	755a      	strb	r2, [r3, #21]
 8012dba:	2301      	movs	r3, #1
 8012dbc:	e0e9      	b.n	8012f92 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012dc2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d102      	bne.n	8012dd2 <f_write+0x122>
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012dd0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	7d1b      	ldrb	r3, [r3, #20]
 8012dd6:	b25b      	sxtb	r3, r3
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	da18      	bge.n	8012e0e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	7858      	ldrb	r0, [r3, #1]
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	6a1a      	ldr	r2, [r3, #32]
 8012dea:	2301      	movs	r3, #1
 8012dec:	f7fd f90a 	bl	8010004 <disk_write>
 8012df0:	4603      	mov	r3, r0
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d004      	beq.n	8012e00 <f_write+0x150>
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	2201      	movs	r2, #1
 8012dfa:	755a      	strb	r2, [r3, #21]
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	e0c8      	b.n	8012f92 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	7d1b      	ldrb	r3, [r3, #20]
 8012e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e08:	b2da      	uxtb	r2, r3
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012e0e:	693a      	ldr	r2, [r7, #16]
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	69db      	ldr	r3, [r3, #28]
 8012e14:	4619      	mov	r1, r3
 8012e16:	4610      	mov	r0, r2
 8012e18:	f7fd fc7e 	bl	8010718 <clust2sect>
 8012e1c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d104      	bne.n	8012e2e <f_write+0x17e>
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	2202      	movs	r2, #2
 8012e28:	755a      	strb	r2, [r3, #21]
 8012e2a:	2302      	movs	r3, #2
 8012e2c:	e0b1      	b.n	8012f92 <f_write+0x2e2>
			sect += csect;
 8012e2e:	697a      	ldr	r2, [r7, #20]
 8012e30:	69bb      	ldr	r3, [r7, #24]
 8012e32:	4413      	add	r3, r2
 8012e34:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	0a5b      	lsrs	r3, r3, #9
 8012e3a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012e3c:	6a3b      	ldr	r3, [r7, #32]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d03c      	beq.n	8012ebc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012e42:	69ba      	ldr	r2, [r7, #24]
 8012e44:	6a3b      	ldr	r3, [r7, #32]
 8012e46:	4413      	add	r3, r2
 8012e48:	693a      	ldr	r2, [r7, #16]
 8012e4a:	8952      	ldrh	r2, [r2, #10]
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	d905      	bls.n	8012e5c <f_write+0x1ac>
					cc = fs->csize - csect;
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	895b      	ldrh	r3, [r3, #10]
 8012e54:	461a      	mov	r2, r3
 8012e56:	69bb      	ldr	r3, [r7, #24]
 8012e58:	1ad3      	subs	r3, r2, r3
 8012e5a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	7858      	ldrb	r0, [r3, #1]
 8012e60:	6a3b      	ldr	r3, [r7, #32]
 8012e62:	697a      	ldr	r2, [r7, #20]
 8012e64:	69f9      	ldr	r1, [r7, #28]
 8012e66:	f7fd f8cd 	bl	8010004 <disk_write>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d004      	beq.n	8012e7a <f_write+0x1ca>
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	2201      	movs	r2, #1
 8012e74:	755a      	strb	r2, [r3, #21]
 8012e76:	2301      	movs	r3, #1
 8012e78:	e08b      	b.n	8012f92 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	6a1a      	ldr	r2, [r3, #32]
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	1ad3      	subs	r3, r2, r3
 8012e82:	6a3a      	ldr	r2, [r7, #32]
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d915      	bls.n	8012eb4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	6a1a      	ldr	r2, [r3, #32]
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	1ad3      	subs	r3, r2, r3
 8012e96:	025b      	lsls	r3, r3, #9
 8012e98:	69fa      	ldr	r2, [r7, #28]
 8012e9a:	4413      	add	r3, r2
 8012e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	f7fd f96f 	bl	8010184 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	7d1b      	ldrb	r3, [r3, #20]
 8012eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012eae:	b2da      	uxtb	r2, r3
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012eb4:	6a3b      	ldr	r3, [r7, #32]
 8012eb6:	025b      	lsls	r3, r3, #9
 8012eb8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012eba:	e03f      	b.n	8012f3c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6a1b      	ldr	r3, [r3, #32]
 8012ec0:	697a      	ldr	r2, [r7, #20]
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d016      	beq.n	8012ef4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	699a      	ldr	r2, [r3, #24]
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d210      	bcs.n	8012ef4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	7858      	ldrb	r0, [r3, #1]
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012edc:	2301      	movs	r3, #1
 8012ede:	697a      	ldr	r2, [r7, #20]
 8012ee0:	f7fd f870 	bl	800ffc4 <disk_read>
 8012ee4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d004      	beq.n	8012ef4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2201      	movs	r2, #1
 8012eee:	755a      	strb	r2, [r3, #21]
 8012ef0:	2301      	movs	r3, #1
 8012ef2:	e04e      	b.n	8012f92 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	697a      	ldr	r2, [r7, #20]
 8012ef8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	699b      	ldr	r3, [r3, #24]
 8012efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f02:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012f06:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d901      	bls.n	8012f14 <f_write+0x264>
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	699b      	ldr	r3, [r3, #24]
 8012f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f22:	4413      	add	r3, r2
 8012f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f26:	69f9      	ldr	r1, [r7, #28]
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7fd f92b 	bl	8010184 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	7d1b      	ldrb	r3, [r3, #20]
 8012f32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012f36:	b2da      	uxtb	r2, r3
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012f3c:	69fa      	ldr	r2, [r7, #28]
 8012f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f40:	4413      	add	r3, r2
 8012f42:	61fb      	str	r3, [r7, #28]
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	699a      	ldr	r2, [r3, #24]
 8012f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f4a:	441a      	add	r2, r3
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	619a      	str	r2, [r3, #24]
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	68da      	ldr	r2, [r3, #12]
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	699b      	ldr	r3, [r3, #24]
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	bf38      	it	cc
 8012f5c:	461a      	movcc	r2, r3
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	60da      	str	r2, [r3, #12]
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	681a      	ldr	r2, [r3, #0]
 8012f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f68:	441a      	add	r2, r3
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	601a      	str	r2, [r3, #0]
 8012f6e:	687a      	ldr	r2, [r7, #4]
 8012f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f72:	1ad3      	subs	r3, r2, r3
 8012f74:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	f47f aed4 	bne.w	8012d26 <f_write+0x76>
 8012f7e:	e000      	b.n	8012f82 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012f80:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	7d1b      	ldrb	r3, [r3, #20]
 8012f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f8a:	b2da      	uxtb	r2, r3
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012f90:	2300      	movs	r3, #0
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3730      	adds	r7, #48	; 0x30
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b086      	sub	sp, #24
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f107 0208 	add.w	r2, r7, #8
 8012fa8:	4611      	mov	r1, r2
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7ff fa0e 	bl	80123cc <validate>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012fb4:	7dfb      	ldrb	r3, [r7, #23]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d168      	bne.n	801308c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	7d1b      	ldrb	r3, [r3, #20]
 8012fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d062      	beq.n	801308c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	7d1b      	ldrb	r3, [r3, #20]
 8012fca:	b25b      	sxtb	r3, r3
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	da15      	bge.n	8012ffc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	7858      	ldrb	r0, [r3, #1]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6a1a      	ldr	r2, [r3, #32]
 8012fde:	2301      	movs	r3, #1
 8012fe0:	f7fd f810 	bl	8010004 <disk_write>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d001      	beq.n	8012fee <f_sync+0x54>
 8012fea:	2301      	movs	r3, #1
 8012fec:	e04f      	b.n	801308e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	7d1b      	ldrb	r3, [r3, #20]
 8012ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ff6:	b2da      	uxtb	r2, r3
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012ffc:	f7f9 fb7a 	bl	800c6f4 <get_fattime>
 8013000:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013002:	68ba      	ldr	r2, [r7, #8]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013008:	4619      	mov	r1, r3
 801300a:	4610      	mov	r0, r2
 801300c:	f7fd fae8 	bl	80105e0 <move_window>
 8013010:	4603      	mov	r3, r0
 8013012:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013014:	7dfb      	ldrb	r3, [r7, #23]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d138      	bne.n	801308c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801301e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	330b      	adds	r3, #11
 8013024:	781a      	ldrb	r2, [r3, #0]
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	330b      	adds	r3, #11
 801302a:	f042 0220 	orr.w	r2, r2, #32
 801302e:	b2d2      	uxtb	r2, r2
 8013030:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6818      	ldr	r0, [r3, #0]
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	689b      	ldr	r3, [r3, #8]
 801303a:	461a      	mov	r2, r3
 801303c:	68f9      	ldr	r1, [r7, #12]
 801303e:	f7fd fff3 	bl	8011028 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	f103 021c 	add.w	r2, r3, #28
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	68db      	ldr	r3, [r3, #12]
 801304c:	4619      	mov	r1, r3
 801304e:	4610      	mov	r0, r2
 8013050:	f7fd f86c 	bl	801012c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	3316      	adds	r3, #22
 8013058:	6939      	ldr	r1, [r7, #16]
 801305a:	4618      	mov	r0, r3
 801305c:	f7fd f866 	bl	801012c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	3312      	adds	r3, #18
 8013064:	2100      	movs	r1, #0
 8013066:	4618      	mov	r0, r3
 8013068:	f7fd f845 	bl	80100f6 <st_word>
					fs->wflag = 1;
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	2201      	movs	r2, #1
 8013070:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	4618      	mov	r0, r3
 8013076:	f7fd fae1 	bl	801063c <sync_fs>
 801307a:	4603      	mov	r3, r0
 801307c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	7d1b      	ldrb	r3, [r3, #20]
 8013082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013086:	b2da      	uxtb	r2, r3
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801308c:	7dfb      	ldrb	r3, [r7, #23]
}
 801308e:	4618      	mov	r0, r3
 8013090:	3718      	adds	r7, #24
 8013092:	46bd      	mov	sp, r7
 8013094:	bd80      	pop	{r7, pc}

08013096 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013096:	b580      	push	{r7, lr}
 8013098:	b084      	sub	sp, #16
 801309a:	af00      	add	r7, sp, #0
 801309c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801309e:	6878      	ldr	r0, [r7, #4]
 80130a0:	f7ff ff7b 	bl	8012f9a <f_sync>
 80130a4:	4603      	mov	r3, r0
 80130a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80130a8:	7bfb      	ldrb	r3, [r7, #15]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d118      	bne.n	80130e0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f107 0208 	add.w	r2, r7, #8
 80130b4:	4611      	mov	r1, r2
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7ff f988 	bl	80123cc <validate>
 80130bc:	4603      	mov	r3, r0
 80130be:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80130c0:	7bfb      	ldrb	r3, [r7, #15]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d10c      	bne.n	80130e0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	691b      	ldr	r3, [r3, #16]
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7fd f9e4 	bl	8010498 <dec_lock>
 80130d0:	4603      	mov	r3, r0
 80130d2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80130d4:	7bfb      	ldrb	r3, [r7, #15]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d102      	bne.n	80130e0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	2200      	movs	r2, #0
 80130de:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80130e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80130e2:	4618      	mov	r0, r3
 80130e4:	3710      	adds	r7, #16
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}
	...

080130ec <f_setlabel>:
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Pointer to the volume label to set */
)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b09a      	sub	sp, #104	; 0x68
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
	WCHAR w;
	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";


	/* Get logical drive */
	res = find_volume(&label, &fs, FA_WRITE);
 80130f4:	f107 0120 	add.w	r1, r7, #32
 80130f8:	1d3b      	adds	r3, r7, #4
 80130fa:	2202      	movs	r2, #2
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7fe ff19 	bl	8011f34 <find_volume>
 8013102:	4603      	mov	r3, r0
 8013104:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013108:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801310c:	2b00      	cmp	r3, #0
 801310e:	d002      	beq.n	8013116 <f_setlabel+0x2a>
 8013110:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8013114:	e12d      	b.n	8013372 <f_setlabel+0x286>
	dj.obj.fs = fs;
 8013116:	6a3b      	ldr	r3, [r7, #32]
 8013118:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get length of given volume label */
	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
 801311a:	2300      	movs	r3, #0
 801311c:	667b      	str	r3, [r7, #100]	; 0x64
 801311e:	e002      	b.n	8013126 <f_setlabel+0x3a>
 8013120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013122:	3301      	adds	r3, #1
 8013124:	667b      	str	r3, [r7, #100]	; 0x64
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801312a:	4413      	add	r3, r2
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	2b1f      	cmp	r3, #31
 8013130:	d8f6      	bhi.n	8013120 <f_setlabel+0x34>
		}
		slen = j;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
 8013132:	e002      	b.n	801313a <f_setlabel+0x4e>
 8013134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013136:	3b01      	subs	r3, #1
 8013138:	667b      	str	r3, [r7, #100]	; 0x64
 801313a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801313c:	2b00      	cmp	r3, #0
 801313e:	d006      	beq.n	801314e <f_setlabel+0x62>
 8013140:	687a      	ldr	r2, [r7, #4]
 8013142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013144:	3b01      	subs	r3, #1
 8013146:	4413      	add	r3, r2
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	2b20      	cmp	r3, #32
 801314c:	d0f2      	beq.n	8013134 <f_setlabel+0x48>
		if (slen) {		/* Is there a volume label to be set? */
 801314e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013150:	2b00      	cmp	r3, #0
 8013152:	f000 80a5 	beq.w	80132a0 <f_setlabel+0x1b4>
			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
 8013156:	2300      	movs	r3, #0
 8013158:	723b      	strb	r3, [r7, #8]
 801315a:	2300      	movs	r3, #0
 801315c:	65bb      	str	r3, [r7, #88]	; 0x58
 801315e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013160:	65fb      	str	r3, [r7, #92]	; 0x5c
			do {
#if _LFN_UNICODE
				w = ff_convert(ff_wtoupper(label[i++]), 0);
#else
				w = (BYTE)label[i++];
 8013162:	687a      	ldr	r2, [r7, #4]
 8013164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013166:	1c59      	adds	r1, r3, #1
 8013168:	65f9      	str	r1, [r7, #92]	; 0x5c
 801316a:	4413      	add	r3, r2
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				if (IsDBCS1(w)) {
 8013172:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013176:	b2db      	uxtb	r3, r3
 8013178:	2b80      	cmp	r3, #128	; 0x80
 801317a:	d936      	bls.n	80131ea <f_setlabel+0xfe>
 801317c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013180:	b2db      	uxtb	r3, r3
 8013182:	2bff      	cmp	r3, #255	; 0xff
 8013184:	d031      	beq.n	80131ea <f_setlabel+0xfe>
					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
 8013186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013188:	2b09      	cmp	r3, #9
 801318a:	d82b      	bhi.n	80131e4 <f_setlabel+0xf8>
 801318c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801318e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013190:	429a      	cmp	r2, r3
 8013192:	d227      	bcs.n	80131e4 <f_setlabel+0xf8>
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013198:	4413      	add	r3, r2
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	2b3f      	cmp	r3, #63	; 0x3f
 801319e:	d905      	bls.n	80131ac <f_setlabel+0xc0>
 80131a0:	687a      	ldr	r2, [r7, #4]
 80131a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131a4:	4413      	add	r3, r2
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	2b7e      	cmp	r3, #126	; 0x7e
 80131aa:	d90c      	bls.n	80131c6 <f_setlabel+0xda>
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131b0:	4413      	add	r3, r2
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	b25b      	sxtb	r3, r3
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	da14      	bge.n	80131e4 <f_setlabel+0xf8>
 80131ba:	687a      	ldr	r2, [r7, #4]
 80131bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131be:	4413      	add	r3, r2
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	2bff      	cmp	r3, #255	; 0xff
 80131c4:	d00e      	beq.n	80131e4 <f_setlabel+0xf8>
 80131c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80131ca:	021b      	lsls	r3, r3, #8
 80131cc:	b21a      	sxth	r2, r3
 80131ce:	6879      	ldr	r1, [r7, #4]
 80131d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131d2:	1c58      	adds	r0, r3, #1
 80131d4:	65f8      	str	r0, [r7, #92]	; 0x5c
 80131d6:	440b      	add	r3, r1
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	b21b      	sxth	r3, r3
 80131dc:	4313      	orrs	r3, r2
 80131de:	b21b      	sxth	r3, r3
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	e000      	b.n	80131e6 <f_setlabel+0xfa>
 80131e4:	2300      	movs	r3, #0
 80131e6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				}
#if _USE_LFN != 0
				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
 80131ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80131ee:	2101      	movs	r1, #1
 80131f0:	4618      	mov	r0, r3
 80131f2:	f000 f921 	bl	8013438 <ff_convert>
 80131f6:	4603      	mov	r3, r0
 80131f8:	4618      	mov	r0, r3
 80131fa:	f000 f97b 	bl	80134f4 <ff_wtoupper>
 80131fe:	4603      	mov	r3, r0
 8013200:	2100      	movs	r1, #0
 8013202:	4618      	mov	r0, r3
 8013204:	f000 f918 	bl	8013438 <ff_convert>
 8013208:	4603      	mov	r3, r0
 801320a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
#else
				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
#endif
				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 801320e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013212:	2b00      	cmp	r3, #0
 8013214:	d012      	beq.n	801323c <f_setlabel+0x150>
 8013216:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801321a:	4619      	mov	r1, r3
 801321c:	4857      	ldr	r0, [pc, #348]	; (801337c <f_setlabel+0x290>)
 801321e:	f7fd f814 	bl	801024a <chk_chr>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d109      	bne.n	801323c <f_setlabel+0x150>
 8013228:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801322c:	2bff      	cmp	r3, #255	; 0xff
 801322e:	d901      	bls.n	8013234 <f_setlabel+0x148>
 8013230:	220a      	movs	r2, #10
 8013232:	e000      	b.n	8013236 <f_setlabel+0x14a>
 8013234:	220b      	movs	r2, #11
 8013236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013238:	429a      	cmp	r2, r3
 801323a:	d801      	bhi.n	8013240 <f_setlabel+0x154>
					LEAVE_FF(fs, FR_INVALID_NAME);
 801323c:	2306      	movs	r3, #6
 801323e:	e098      	b.n	8013372 <f_setlabel+0x286>
				}
				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
 8013240:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013244:	2bff      	cmp	r3, #255	; 0xff
 8013246:	d90b      	bls.n	8013260 <f_setlabel+0x174>
 8013248:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801324c:	0a1b      	lsrs	r3, r3, #8
 801324e:	b299      	uxth	r1, r3
 8013250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013252:	1c5a      	adds	r2, r3, #1
 8013254:	65ba      	str	r2, [r7, #88]	; 0x58
 8013256:	b2ca      	uxtb	r2, r1
 8013258:	3368      	adds	r3, #104	; 0x68
 801325a:	443b      	add	r3, r7
 801325c:	f803 2c60 	strb.w	r2, [r3, #-96]
				dirvn[j++] = (BYTE)w;
 8013260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013262:	1c5a      	adds	r2, r3, #1
 8013264:	65ba      	str	r2, [r7, #88]	; 0x58
 8013266:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 801326a:	b2d2      	uxtb	r2, r2
 801326c:	3368      	adds	r3, #104	; 0x68
 801326e:	443b      	add	r3, r7
 8013270:	f803 2c60 	strb.w	r2, [r3, #-96]
			} while (i < slen);
 8013274:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013278:	429a      	cmp	r2, r3
 801327a:	f4ff af72 	bcc.w	8013162 <f_setlabel+0x76>
			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
 801327e:	e007      	b.n	8013290 <f_setlabel+0x1a4>
 8013280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013282:	1c5a      	adds	r2, r3, #1
 8013284:	65ba      	str	r2, [r7, #88]	; 0x58
 8013286:	3368      	adds	r3, #104	; 0x68
 8013288:	443b      	add	r3, r7
 801328a:	2220      	movs	r2, #32
 801328c:	f803 2c60 	strb.w	r2, [r3, #-96]
 8013290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013292:	2b0a      	cmp	r3, #10
 8013294:	d9f4      	bls.n	8013280 <f_setlabel+0x194>
			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 8013296:	7a3b      	ldrb	r3, [r7, #8]
 8013298:	2be5      	cmp	r3, #229	; 0xe5
 801329a:	d101      	bne.n	80132a0 <f_setlabel+0x1b4>
 801329c:	2306      	movs	r3, #6
 801329e:	e068      	b.n	8013372 <f_setlabel+0x286>
		}
	}

	/* Set volume label */
	dj.obj.sclust = 0;		/* Open root directory */
 80132a0:	2300      	movs	r3, #0
 80132a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	res = dir_sdi(&dj, 0);
 80132a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132a8:	2100      	movs	r1, #0
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7fd fd16 	bl	8010cdc <dir_sdi>
 80132b0:	4603      	mov	r3, r0
 80132b2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if (res == FR_OK) {
 80132b6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d157      	bne.n	801336e <f_setlabel+0x282>
		res = dir_read(&dj, 1);	/* Get volume label entry */
 80132be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132c2:	2101      	movs	r1, #1
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7fe f8d0 	bl	801146a <dir_read>
 80132ca:	4603      	mov	r3, r0
 80132cc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		if (res == FR_OK) {
 80132d0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d118      	bne.n	801330a <f_setlabel+0x21e>
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
			} else {
				if (slen) {
 80132d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d007      	beq.n	80132ee <f_setlabel+0x202>
					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
 80132de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132e0:	f107 0108 	add.w	r1, r7, #8
 80132e4:	220b      	movs	r2, #11
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fc ff4c 	bl	8010184 <mem_cpy>
 80132ec:	e002      	b.n	80132f4 <f_setlabel+0x208>
				} else {
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 80132ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132f0:	22e5      	movs	r2, #229	; 0xe5
 80132f2:	701a      	strb	r2, [r3, #0]
				}
			}
			fs->wflag = 1;
 80132f4:	6a3b      	ldr	r3, [r7, #32]
 80132f6:	2201      	movs	r2, #1
 80132f8:	70da      	strb	r2, [r3, #3]
			res = sync_fs(fs);
 80132fa:	6a3b      	ldr	r3, [r7, #32]
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7fd f99d 	bl	801063c <sync_fs>
 8013302:	4603      	mov	r3, r0
 8013304:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8013308:	e031      	b.n	801336e <f_setlabel+0x282>
		} else {			/* No volume label entry is found or error */
			if (res == FR_NO_FILE) {
 801330a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801330e:	2b04      	cmp	r3, #4
 8013310:	d12d      	bne.n	801336e <f_setlabel+0x282>
				res = FR_OK;
 8013312:	2300      	movs	r3, #0
 8013314:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				if (slen) {	/* Create a volume label entry */
 8013318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801331a:	2b00      	cmp	r3, #0
 801331c:	d027      	beq.n	801336e <f_setlabel+0x282>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 801331e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013322:	2101      	movs	r1, #1
 8013324:	4618      	mov	r0, r3
 8013326:	f7fd fe19 	bl	8010f5c <dir_alloc>
 801332a:	4603      	mov	r3, r0
 801332c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
					if (res == FR_OK) {
 8013330:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8013334:	2b00      	cmp	r3, #0
 8013336:	d11a      	bne.n	801336e <f_setlabel+0x282>
						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
 8013338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801333a:	2220      	movs	r2, #32
 801333c:	2100      	movs	r1, #0
 801333e:	4618      	mov	r0, r3
 8013340:	f7fc ff41 	bl	80101c6 <mem_set>
						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
						} else {
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 8013344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013346:	330b      	adds	r3, #11
 8013348:	2208      	movs	r2, #8
 801334a:	701a      	strb	r2, [r3, #0]
							mem_cpy(dj.dir, dirvn, 11);
 801334c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801334e:	f107 0108 	add.w	r1, r7, #8
 8013352:	220b      	movs	r2, #11
 8013354:	4618      	mov	r0, r3
 8013356:	f7fc ff15 	bl	8010184 <mem_cpy>
						}
						fs->wflag = 1;
 801335a:	6a3b      	ldr	r3, [r7, #32]
 801335c:	2201      	movs	r2, #1
 801335e:	70da      	strb	r2, [r3, #3]
						res = sync_fs(fs);
 8013360:	6a3b      	ldr	r3, [r7, #32]
 8013362:	4618      	mov	r0, r3
 8013364:	f7fd f96a 	bl	801063c <sync_fs>
 8013368:	4603      	mov	r3, r0
 801336a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801336e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
}
 8013372:	4618      	mov	r0, r3
 8013374:	3768      	adds	r7, #104	; 0x68
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	08014b74 	.word	0x08014b74

08013380 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013380:	b480      	push	{r7}
 8013382:	b087      	sub	sp, #28
 8013384:	af00      	add	r7, sp, #0
 8013386:	60f8      	str	r0, [r7, #12]
 8013388:	60b9      	str	r1, [r7, #8]
 801338a:	4613      	mov	r3, r2
 801338c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801338e:	2301      	movs	r3, #1
 8013390:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013392:	2300      	movs	r3, #0
 8013394:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013396:	4b1f      	ldr	r3, [pc, #124]	; (8013414 <FATFS_LinkDriverEx+0x94>)
 8013398:	7a5b      	ldrb	r3, [r3, #9]
 801339a:	b2db      	uxtb	r3, r3
 801339c:	2b00      	cmp	r3, #0
 801339e:	d131      	bne.n	8013404 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80133a0:	4b1c      	ldr	r3, [pc, #112]	; (8013414 <FATFS_LinkDriverEx+0x94>)
 80133a2:	7a5b      	ldrb	r3, [r3, #9]
 80133a4:	b2db      	uxtb	r3, r3
 80133a6:	461a      	mov	r2, r3
 80133a8:	4b1a      	ldr	r3, [pc, #104]	; (8013414 <FATFS_LinkDriverEx+0x94>)
 80133aa:	2100      	movs	r1, #0
 80133ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80133ae:	4b19      	ldr	r3, [pc, #100]	; (8013414 <FATFS_LinkDriverEx+0x94>)
 80133b0:	7a5b      	ldrb	r3, [r3, #9]
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	4a17      	ldr	r2, [pc, #92]	; (8013414 <FATFS_LinkDriverEx+0x94>)
 80133b6:	009b      	lsls	r3, r3, #2
 80133b8:	4413      	add	r3, r2
 80133ba:	68fa      	ldr	r2, [r7, #12]
 80133bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80133be:	4b15      	ldr	r3, [pc, #84]	; (8013414 <FATFS_LinkDriverEx+0x94>)
 80133c0:	7a5b      	ldrb	r3, [r3, #9]
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	461a      	mov	r2, r3
 80133c6:	4b13      	ldr	r3, [pc, #76]	; (8013414 <FATFS_LinkDriverEx+0x94>)
 80133c8:	4413      	add	r3, r2
 80133ca:	79fa      	ldrb	r2, [r7, #7]
 80133cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80133ce:	4b11      	ldr	r3, [pc, #68]	; (8013414 <FATFS_LinkDriverEx+0x94>)
 80133d0:	7a5b      	ldrb	r3, [r3, #9]
 80133d2:	b2db      	uxtb	r3, r3
 80133d4:	1c5a      	adds	r2, r3, #1
 80133d6:	b2d1      	uxtb	r1, r2
 80133d8:	4a0e      	ldr	r2, [pc, #56]	; (8013414 <FATFS_LinkDriverEx+0x94>)
 80133da:	7251      	strb	r1, [r2, #9]
 80133dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80133de:	7dbb      	ldrb	r3, [r7, #22]
 80133e0:	3330      	adds	r3, #48	; 0x30
 80133e2:	b2da      	uxtb	r2, r3
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	3301      	adds	r3, #1
 80133ec:	223a      	movs	r2, #58	; 0x3a
 80133ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	3302      	adds	r3, #2
 80133f4:	222f      	movs	r2, #47	; 0x2f
 80133f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	3303      	adds	r3, #3
 80133fc:	2200      	movs	r2, #0
 80133fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013400:	2300      	movs	r3, #0
 8013402:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013404:	7dfb      	ldrb	r3, [r7, #23]
}
 8013406:	4618      	mov	r0, r3
 8013408:	371c      	adds	r7, #28
 801340a:	46bd      	mov	sp, r7
 801340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013410:	4770      	bx	lr
 8013412:	bf00      	nop
 8013414:	24000328 	.word	0x24000328

08013418 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013422:	2200      	movs	r2, #0
 8013424:	6839      	ldr	r1, [r7, #0]
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f7ff ffaa 	bl	8013380 <FATFS_LinkDriverEx>
 801342c:	4603      	mov	r3, r0
}
 801342e:	4618      	mov	r0, r3
 8013430:	3708      	adds	r7, #8
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
	...

08013438 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8013438:	b480      	push	{r7}
 801343a:	b089      	sub	sp, #36	; 0x24
 801343c:	af00      	add	r7, sp, #0
 801343e:	4603      	mov	r3, r0
 8013440:	6039      	str	r1, [r7, #0]
 8013442:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 8013444:	88fb      	ldrh	r3, [r7, #6]
 8013446:	2b7f      	cmp	r3, #127	; 0x7f
 8013448:	d802      	bhi.n	8013450 <ff_convert+0x18>
		c = chr;
 801344a:	88fb      	ldrh	r3, [r7, #6]
 801344c:	837b      	strh	r3, [r7, #26]
 801344e:	e046      	b.n	80134de <ff_convert+0xa6>
	} else {
		if (dir) {		/* OEM code to unicode */
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d005      	beq.n	8013462 <ff_convert+0x2a>
			p = oem2uni;
 8013456:	4b25      	ldr	r3, [pc, #148]	; (80134ec <ff_convert+0xb4>)
 8013458:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 801345a:	f245 5320 	movw	r3, #21792	; 0x5520
 801345e:	60bb      	str	r3, [r7, #8]
 8013460:	e004      	b.n	801346c <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 8013462:	4b23      	ldr	r3, [pc, #140]	; (80134f0 <ff_convert+0xb8>)
 8013464:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 8013466:	f245 5320 	movw	r3, #21792	; 0x5520
 801346a:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 801346c:	2300      	movs	r3, #0
 801346e:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 8013470:	2310      	movs	r3, #16
 8013472:	613b      	str	r3, [r7, #16]
 8013474:	e022      	b.n	80134bc <ff_convert+0x84>
			i = li + (hi - li) / 2;
 8013476:	68ba      	ldr	r2, [r7, #8]
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	1ad3      	subs	r3, r2, r3
 801347c:	2b00      	cmp	r3, #0
 801347e:	da00      	bge.n	8013482 <ff_convert+0x4a>
 8013480:	3301      	adds	r3, #1
 8013482:	105b      	asrs	r3, r3, #1
 8013484:	461a      	mov	r2, r3
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	4413      	add	r3, r2
 801348a:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	009b      	lsls	r3, r3, #2
 8013490:	69fa      	ldr	r2, [r7, #28]
 8013492:	4413      	add	r3, r2
 8013494:	881b      	ldrh	r3, [r3, #0]
 8013496:	88fa      	ldrh	r2, [r7, #6]
 8013498:	429a      	cmp	r2, r3
 801349a:	d013      	beq.n	80134c4 <ff_convert+0x8c>
			if (chr > p[i * 2])
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	009b      	lsls	r3, r3, #2
 80134a0:	69fa      	ldr	r2, [r7, #28]
 80134a2:	4413      	add	r3, r2
 80134a4:	881b      	ldrh	r3, [r3, #0]
 80134a6:	88fa      	ldrh	r2, [r7, #6]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d902      	bls.n	80134b2 <ff_convert+0x7a>
				li = i;
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	60fb      	str	r3, [r7, #12]
 80134b0:	e001      	b.n	80134b6 <ff_convert+0x7e>
			else
				hi = i;
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	3b01      	subs	r3, #1
 80134ba:	613b      	str	r3, [r7, #16]
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d1d9      	bne.n	8013476 <ff_convert+0x3e>
 80134c2:	e000      	b.n	80134c6 <ff_convert+0x8e>
			if (chr == p[i * 2]) break;
 80134c4:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d006      	beq.n	80134da <ff_convert+0xa2>
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	009b      	lsls	r3, r3, #2
 80134d0:	3302      	adds	r3, #2
 80134d2:	69fa      	ldr	r2, [r7, #28]
 80134d4:	4413      	add	r3, r2
 80134d6:	881b      	ldrh	r3, [r3, #0]
 80134d8:	e000      	b.n	80134dc <ff_convert+0xa4>
 80134da:	2300      	movs	r3, #0
 80134dc:	837b      	strh	r3, [r7, #26]
	}

	return c;
 80134de:	8b7b      	ldrh	r3, [r7, #26]
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3724      	adds	r7, #36	; 0x24
 80134e4:	46bd      	mov	sp, r7
 80134e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ea:	4770      	bx	lr
 80134ec:	0802a008 	.word	0x0802a008
 80134f0:	08014b84 	.word	0x08014b84

080134f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80134f4:	b480      	push	{r7}
 80134f6:	b087      	sub	sp, #28
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	4603      	mov	r3, r0
 80134fc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80134fe:	88fb      	ldrh	r3, [r7, #6]
 8013500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013504:	d201      	bcs.n	801350a <ff_wtoupper+0x16>
 8013506:	4b3e      	ldr	r3, [pc, #248]	; (8013600 <ff_wtoupper+0x10c>)
 8013508:	e000      	b.n	801350c <ff_wtoupper+0x18>
 801350a:	4b3e      	ldr	r3, [pc, #248]	; (8013604 <ff_wtoupper+0x110>)
 801350c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	1c9a      	adds	r2, r3, #2
 8013512:	617a      	str	r2, [r7, #20]
 8013514:	881b      	ldrh	r3, [r3, #0]
 8013516:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8013518:	8a7b      	ldrh	r3, [r7, #18]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d068      	beq.n	80135f0 <ff_wtoupper+0xfc>
 801351e:	88fa      	ldrh	r2, [r7, #6]
 8013520:	8a7b      	ldrh	r3, [r7, #18]
 8013522:	429a      	cmp	r2, r3
 8013524:	d364      	bcc.n	80135f0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	1c9a      	adds	r2, r3, #2
 801352a:	617a      	str	r2, [r7, #20]
 801352c:	881b      	ldrh	r3, [r3, #0]
 801352e:	823b      	strh	r3, [r7, #16]
 8013530:	8a3b      	ldrh	r3, [r7, #16]
 8013532:	0a1b      	lsrs	r3, r3, #8
 8013534:	81fb      	strh	r3, [r7, #14]
 8013536:	8a3b      	ldrh	r3, [r7, #16]
 8013538:	b2db      	uxtb	r3, r3
 801353a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801353c:	88fa      	ldrh	r2, [r7, #6]
 801353e:	8a79      	ldrh	r1, [r7, #18]
 8013540:	8a3b      	ldrh	r3, [r7, #16]
 8013542:	440b      	add	r3, r1
 8013544:	429a      	cmp	r2, r3
 8013546:	da49      	bge.n	80135dc <ff_wtoupper+0xe8>
			switch (cmd) {
 8013548:	89fb      	ldrh	r3, [r7, #14]
 801354a:	2b08      	cmp	r3, #8
 801354c:	d84f      	bhi.n	80135ee <ff_wtoupper+0xfa>
 801354e:	a201      	add	r2, pc, #4	; (adr r2, 8013554 <ff_wtoupper+0x60>)
 8013550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013554:	08013579 	.word	0x08013579
 8013558:	0801358b 	.word	0x0801358b
 801355c:	080135a1 	.word	0x080135a1
 8013560:	080135a9 	.word	0x080135a9
 8013564:	080135b1 	.word	0x080135b1
 8013568:	080135b9 	.word	0x080135b9
 801356c:	080135c1 	.word	0x080135c1
 8013570:	080135c9 	.word	0x080135c9
 8013574:	080135d1 	.word	0x080135d1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013578:	88fa      	ldrh	r2, [r7, #6]
 801357a:	8a7b      	ldrh	r3, [r7, #18]
 801357c:	1ad3      	subs	r3, r2, r3
 801357e:	005b      	lsls	r3, r3, #1
 8013580:	697a      	ldr	r2, [r7, #20]
 8013582:	4413      	add	r3, r2
 8013584:	881b      	ldrh	r3, [r3, #0]
 8013586:	80fb      	strh	r3, [r7, #6]
 8013588:	e027      	b.n	80135da <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801358a:	88fa      	ldrh	r2, [r7, #6]
 801358c:	8a7b      	ldrh	r3, [r7, #18]
 801358e:	1ad3      	subs	r3, r2, r3
 8013590:	b29b      	uxth	r3, r3
 8013592:	f003 0301 	and.w	r3, r3, #1
 8013596:	b29b      	uxth	r3, r3
 8013598:	88fa      	ldrh	r2, [r7, #6]
 801359a:	1ad3      	subs	r3, r2, r3
 801359c:	80fb      	strh	r3, [r7, #6]
 801359e:	e01c      	b.n	80135da <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80135a0:	88fb      	ldrh	r3, [r7, #6]
 80135a2:	3b10      	subs	r3, #16
 80135a4:	80fb      	strh	r3, [r7, #6]
 80135a6:	e018      	b.n	80135da <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80135a8:	88fb      	ldrh	r3, [r7, #6]
 80135aa:	3b20      	subs	r3, #32
 80135ac:	80fb      	strh	r3, [r7, #6]
 80135ae:	e014      	b.n	80135da <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80135b0:	88fb      	ldrh	r3, [r7, #6]
 80135b2:	3b30      	subs	r3, #48	; 0x30
 80135b4:	80fb      	strh	r3, [r7, #6]
 80135b6:	e010      	b.n	80135da <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80135b8:	88fb      	ldrh	r3, [r7, #6]
 80135ba:	3b1a      	subs	r3, #26
 80135bc:	80fb      	strh	r3, [r7, #6]
 80135be:	e00c      	b.n	80135da <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80135c0:	88fb      	ldrh	r3, [r7, #6]
 80135c2:	3308      	adds	r3, #8
 80135c4:	80fb      	strh	r3, [r7, #6]
 80135c6:	e008      	b.n	80135da <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80135c8:	88fb      	ldrh	r3, [r7, #6]
 80135ca:	3b50      	subs	r3, #80	; 0x50
 80135cc:	80fb      	strh	r3, [r7, #6]
 80135ce:	e004      	b.n	80135da <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80135d0:	88fb      	ldrh	r3, [r7, #6]
 80135d2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80135d6:	80fb      	strh	r3, [r7, #6]
 80135d8:	bf00      	nop
			}
			break;
 80135da:	e008      	b.n	80135ee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80135dc:	89fb      	ldrh	r3, [r7, #14]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d195      	bne.n	801350e <ff_wtoupper+0x1a>
 80135e2:	8a3b      	ldrh	r3, [r7, #16]
 80135e4:	005b      	lsls	r3, r3, #1
 80135e6:	697a      	ldr	r2, [r7, #20]
 80135e8:	4413      	add	r3, r2
 80135ea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80135ec:	e78f      	b.n	801350e <ff_wtoupper+0x1a>
			break;
 80135ee:	bf00      	nop
	}

	return chr;
 80135f0:	88fb      	ldrh	r3, [r7, #6]
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	371c      	adds	r7, #28
 80135f6:	46bd      	mov	sp, r7
 80135f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fc:	4770      	bx	lr
 80135fe:	bf00      	nop
 8013600:	0803f48c 	.word	0x0803f48c
 8013604:	0803f680 	.word	0x0803f680

08013608 <FatFs_read_Check>:
UINT MyFile_Num;
BYTE ReadBuffer[100] = {0};
BYTE WriteBuffer[] = "STM32H7 SD test fatfs"; // 要写入的数据

void FatFs_read_Check(void) // 判断FatFs是否挂载成功
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b082      	sub	sp, #8
 801360c:	af02      	add	r7, sp, #8
	//在外部 SD 卡挂载文件系统，文件系统挂载时会对 SD 卡初始化
	MyFile_Res = f_mount(&fs, "0:", 1); //	挂载SD卡
 801360e:	2201      	movs	r2, #1
 8013610:	491a      	ldr	r1, [pc, #104]	; (801367c <FatFs_read_Check+0x74>)
 8013612:	481b      	ldr	r0, [pc, #108]	; (8013680 <FatFs_read_Check+0x78>)
 8013614:	f7fe ff10 	bl	8012438 <f_mount>
 8013618:	4603      	mov	r3, r0
 801361a:	461a      	mov	r2, r3
 801361c:	4b19      	ldr	r3, [pc, #100]	; (8013684 <FatFs_read_Check+0x7c>)
 801361e:	701a      	strb	r2, [r3, #0]

	if (MyFile_Res == FR_OK) // 判断是否挂载成功
 8013620:	4b18      	ldr	r3, [pc, #96]	; (8013684 <FatFs_read_Check+0x7c>)
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d126      	bne.n	8013676 <FatFs_read_Check+0x6e>
	{
		f_setlabel("SD");  //修改磁盘标签
 8013628:	4817      	ldr	r0, [pc, #92]	; (8013688 <FatFs_read_Check+0x80>)
 801362a:	f7ff fd5f 	bl	80130ec <f_setlabel>
		MyFile_Res = f_open(&file, "0:SD_test.txt", FA_OPEN_EXISTING | FA_READ);
 801362e:	2201      	movs	r2, #1
 8013630:	4916      	ldr	r1, [pc, #88]	; (801368c <FatFs_read_Check+0x84>)
 8013632:	4817      	ldr	r0, [pc, #92]	; (8013690 <FatFs_read_Check+0x88>)
 8013634:	f7fe ff46 	bl	80124c4 <f_open>
 8013638:	4603      	mov	r3, r0
 801363a:	461a      	mov	r2, r3
 801363c:	4b11      	ldr	r3, [pc, #68]	; (8013684 <FatFs_read_Check+0x7c>)
 801363e:	701a      	strb	r2, [r3, #0]
		if (MyFile_Res == FR_OK)
 8013640:	4b10      	ldr	r3, [pc, #64]	; (8013684 <FatFs_read_Check+0x7c>)
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d116      	bne.n	8013676 <FatFs_read_Check+0x6e>
		{
		 MyFile_Res = f_read(&file, ReadBuffer, 100, &MyFile_Num); // 读取文件
 8013648:	4b12      	ldr	r3, [pc, #72]	; (8013694 <FatFs_read_Check+0x8c>)
 801364a:	2264      	movs	r2, #100	; 0x64
 801364c:	4912      	ldr	r1, [pc, #72]	; (8013698 <FatFs_read_Check+0x90>)
 801364e:	4810      	ldr	r0, [pc, #64]	; (8013690 <FatFs_read_Check+0x88>)
 8013650:	f7ff f9ef 	bl	8012a32 <f_read>
 8013654:	4603      	mov	r3, r0
 8013656:	461a      	mov	r2, r3
 8013658:	4b0a      	ldr	r3, [pc, #40]	; (8013684 <FatFs_read_Check+0x7c>)
 801365a:	701a      	strb	r2, [r3, #0]
		 LCD_ShowString(0, 0, 160, 128, 16, ReadBuffer); //lcd上显示出来读取的文件内容
 801365c:	4b0e      	ldr	r3, [pc, #56]	; (8013698 <FatFs_read_Check+0x90>)
 801365e:	9301      	str	r3, [sp, #4]
 8013660:	2310      	movs	r3, #16
 8013662:	9300      	str	r3, [sp, #0]
 8013664:	2380      	movs	r3, #128	; 0x80
 8013666:	22a0      	movs	r2, #160	; 0xa0
 8013668:	2100      	movs	r1, #0
 801366a:	2000      	movs	r0, #0
 801366c:	f000 f9d6 	bl	8013a1c <LCD_ShowString>
		 f_close(&file);
 8013670:	4807      	ldr	r0, [pc, #28]	; (8013690 <FatFs_read_Check+0x88>)
 8013672:	f7ff fd10 	bl	8013096 <f_close>
		}
	}

}
 8013676:	bf00      	nop
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}
 801367c:	08014ac0 	.word	0x08014ac0
 8013680:	24000334 	.word	0x24000334
 8013684:	24000568 	.word	0x24000568
 8013688:	08014ac4 	.word	0x08014ac4
 801368c:	08014ac8 	.word	0x08014ac8
 8013690:	2400056c 	.word	0x2400056c
 8013694:	2400079c 	.word	0x2400079c
 8013698:	240007a0 	.word	0x240007a0

0801369c <FatFs_write_Check>:

void FatFs_write_Check(void)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af02      	add	r7, sp, #8

  MyFile_Res = f_mount(&fs, "0:", 1);
 80136a2:	2201      	movs	r2, #1
 80136a4:	4932      	ldr	r1, [pc, #200]	; (8013770 <FatFs_write_Check+0xd4>)
 80136a6:	4833      	ldr	r0, [pc, #204]	; (8013774 <FatFs_write_Check+0xd8>)
 80136a8:	f7fe fec6 	bl	8012438 <f_mount>
 80136ac:	4603      	mov	r3, r0
 80136ae:	461a      	mov	r2, r3
 80136b0:	4b31      	ldr	r3, [pc, #196]	; (8013778 <FatFs_write_Check+0xdc>)
 80136b2:	701a      	strb	r2, [r3, #0]

  MyFile_Res = f_open(&file, "0:write_test.txt",FA_CREATE_ALWAYS | FA_WRITE); // 打开文件，若不存在则创建该文件
 80136b4:	220a      	movs	r2, #10
 80136b6:	4931      	ldr	r1, [pc, #196]	; (801377c <FatFs_write_Check+0xe0>)
 80136b8:	4831      	ldr	r0, [pc, #196]	; (8013780 <FatFs_write_Check+0xe4>)
 80136ba:	f7fe ff03 	bl	80124c4 <f_open>
 80136be:	4603      	mov	r3, r0
 80136c0:	461a      	mov	r2, r3
 80136c2:	4b2d      	ldr	r3, [pc, #180]	; (8013778 <FatFs_write_Check+0xdc>)
 80136c4:	701a      	strb	r2, [r3, #0]
  if (MyFile_Res == FR_OK)
 80136c6:	4b2c      	ldr	r3, [pc, #176]	; (8013778 <FatFs_write_Check+0xdc>)
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d118      	bne.n	8013700 <FatFs_write_Check+0x64>
  {
     MyFile_Res = f_write(&file, WriteBuffer,sizeof(WriteBuffer), &MyFile_Num); // 向文件写入数据
 80136ce:	4b2d      	ldr	r3, [pc, #180]	; (8013784 <FatFs_write_Check+0xe8>)
 80136d0:	2216      	movs	r2, #22
 80136d2:	492d      	ldr	r1, [pc, #180]	; (8013788 <FatFs_write_Check+0xec>)
 80136d4:	482a      	ldr	r0, [pc, #168]	; (8013780 <FatFs_write_Check+0xe4>)
 80136d6:	f7ff faeb 	bl	8012cb0 <f_write>
 80136da:	4603      	mov	r3, r0
 80136dc:	461a      	mov	r2, r3
 80136de:	4b26      	ldr	r3, [pc, #152]	; (8013778 <FatFs_write_Check+0xdc>)
 80136e0:	701a      	strb	r2, [r3, #0]
     if (MyFile_Res == FR_OK)
 80136e2:	4b25      	ldr	r3, [pc, #148]	; (8013778 <FatFs_write_Check+0xdc>)
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d118      	bne.n	801371c <FatFs_write_Check+0x80>
     {
    	 LCD_ShowString(0, 32, 160, 128, 16, "write ok"); //lcd上显示出来读取的文件内容
 80136ea:	4b28      	ldr	r3, [pc, #160]	; (801378c <FatFs_write_Check+0xf0>)
 80136ec:	9301      	str	r3, [sp, #4]
 80136ee:	2310      	movs	r3, #16
 80136f0:	9300      	str	r3, [sp, #0]
 80136f2:	2380      	movs	r3, #128	; 0x80
 80136f4:	22a0      	movs	r2, #160	; 0xa0
 80136f6:	2120      	movs	r1, #32
 80136f8:	2000      	movs	r0, #0
 80136fa:	f000 f98f 	bl	8013a1c <LCD_ShowString>
 80136fe:	e00d      	b.n	801371c <FatFs_write_Check+0x80>
     }
  }
  else if(MyFile_Res == FR_INVALID_NAME)
 8013700:	4b1d      	ldr	r3, [pc, #116]	; (8013778 <FatFs_write_Check+0xdc>)
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	2b06      	cmp	r3, #6
 8013706:	d109      	bne.n	801371c <FatFs_write_Check+0x80>
  {
	  LCD_ShowString(0, 32, 160, 128, 16, "FR_INVALID_NAME"); //lcd上显示出来读取的文件内容
 8013708:	4b21      	ldr	r3, [pc, #132]	; (8013790 <FatFs_write_Check+0xf4>)
 801370a:	9301      	str	r3, [sp, #4]
 801370c:	2310      	movs	r3, #16
 801370e:	9300      	str	r3, [sp, #0]
 8013710:	2380      	movs	r3, #128	; 0x80
 8013712:	22a0      	movs	r2, #160	; 0xa0
 8013714:	2120      	movs	r1, #32
 8013716:	2000      	movs	r0, #0
 8013718:	f000 f980 	bl	8013a1c <LCD_ShowString>
  }
  f_close(&file);
 801371c:	4818      	ldr	r0, [pc, #96]	; (8013780 <FatFs_write_Check+0xe4>)
 801371e:	f7ff fcba 	bl	8013096 <f_close>

  MyFile_Res = f_open(&file, "0:write_test.txt", FA_OPEN_EXISTING | FA_READ);
 8013722:	2201      	movs	r2, #1
 8013724:	4915      	ldr	r1, [pc, #84]	; (801377c <FatFs_write_Check+0xe0>)
 8013726:	4816      	ldr	r0, [pc, #88]	; (8013780 <FatFs_write_Check+0xe4>)
 8013728:	f7fe fecc 	bl	80124c4 <f_open>
 801372c:	4603      	mov	r3, r0
 801372e:	461a      	mov	r2, r3
 8013730:	4b11      	ldr	r3, [pc, #68]	; (8013778 <FatFs_write_Check+0xdc>)
 8013732:	701a      	strb	r2, [r3, #0]
  if (MyFile_Res == FR_OK)
 8013734:	4b10      	ldr	r3, [pc, #64]	; (8013778 <FatFs_write_Check+0xdc>)
 8013736:	781b      	ldrb	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d116      	bne.n	801376a <FatFs_write_Check+0xce>
	{
	 MyFile_Res = f_read(&file, ReadBuffer, 100, &MyFile_Num); // 读取文件
 801373c:	4b11      	ldr	r3, [pc, #68]	; (8013784 <FatFs_write_Check+0xe8>)
 801373e:	2264      	movs	r2, #100	; 0x64
 8013740:	4914      	ldr	r1, [pc, #80]	; (8013794 <FatFs_write_Check+0xf8>)
 8013742:	480f      	ldr	r0, [pc, #60]	; (8013780 <FatFs_write_Check+0xe4>)
 8013744:	f7ff f975 	bl	8012a32 <f_read>
 8013748:	4603      	mov	r3, r0
 801374a:	461a      	mov	r2, r3
 801374c:	4b0a      	ldr	r3, [pc, #40]	; (8013778 <FatFs_write_Check+0xdc>)
 801374e:	701a      	strb	r2, [r3, #0]
	 LCD_ShowString(0, 48, 160, 128, 16, ReadBuffer); //lcd上显示出来读取的文件内容
 8013750:	4b10      	ldr	r3, [pc, #64]	; (8013794 <FatFs_write_Check+0xf8>)
 8013752:	9301      	str	r3, [sp, #4]
 8013754:	2310      	movs	r3, #16
 8013756:	9300      	str	r3, [sp, #0]
 8013758:	2380      	movs	r3, #128	; 0x80
 801375a:	22a0      	movs	r2, #160	; 0xa0
 801375c:	2130      	movs	r1, #48	; 0x30
 801375e:	2000      	movs	r0, #0
 8013760:	f000 f95c 	bl	8013a1c <LCD_ShowString>
	 f_close(&file);
 8013764:	4806      	ldr	r0, [pc, #24]	; (8013780 <FatFs_write_Check+0xe4>)
 8013766:	f7ff fc96 	bl	8013096 <f_close>
	}
}
 801376a:	bf00      	nop
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}
 8013770:	08014ac0 	.word	0x08014ac0
 8013774:	24000334 	.word	0x24000334
 8013778:	24000568 	.word	0x24000568
 801377c:	08014ad8 	.word	0x08014ad8
 8013780:	2400056c 	.word	0x2400056c
 8013784:	2400079c 	.word	0x2400079c
 8013788:	240000cc 	.word	0x240000cc
 801378c:	08014aec 	.word	0x08014aec
 8013790:	08014af8 	.word	0x08014af8
 8013794:	240007a0 	.word	0x240007a0

08013798 <SD_GetCardInfo>:

//得到卡信息
//cardinfo:卡信息存储区
//返回值:错误状态
uint8_t SD_GetCardInfo(HAL_SD_CardInfoTypeDef *cardinfo)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b084      	sub	sp, #16
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
    uint8_t sta;
	sta=HAL_SD_GetCardInfo(&hsd1,cardinfo);
 80137a0:	6879      	ldr	r1, [r7, #4]
 80137a2:	4805      	ldr	r0, [pc, #20]	; (80137b8 <SD_GetCardInfo+0x20>)
 80137a4:	f7f5 fb38 	bl	8008e18 <HAL_SD_GetCardInfo>
 80137a8:	4603      	mov	r3, r0
 80137aa:	73fb      	strb	r3, [r7, #15]
    return sta;
 80137ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3710      	adds	r7, #16
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	24000174 	.word	0x24000174

080137bc <SD_GetCardState>:

//判断SD卡是否可以传输(读写)数据
//返回值:SD_TRANSFER_OK 传输完成，可以继续下一次传输
//		 SD_TRANSFER_BUSY SD卡正忙，不可以进行下一次传输
uint8_t SD_GetCardState(void)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&hsd1)==HAL_SD_CARD_TRANSFER )?SD_TRANSFER_OK:SD_TRANSFER_BUSY);
 80137c0:	4805      	ldr	r0, [pc, #20]	; (80137d8 <SD_GetCardState+0x1c>)
 80137c2:	f7f5 fc67 	bl	8009094 <HAL_SD_GetCardState>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b04      	cmp	r3, #4
 80137ca:	bf14      	ite	ne
 80137cc:	2301      	movne	r3, #1
 80137ce:	2300      	moveq	r3, #0
 80137d0:	b2db      	uxtb	r3, r3
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	bf00      	nop
 80137d8:	24000174 	.word	0x24000174

080137dc <SD_ReadDisk>:
//buf:读数据缓存区
//sector:扇区地址
//cnt:扇区个数
//返回值:错误状态;0,正常;其他,错误代码;
uint8_t SD_ReadDisk(uint8_t* buf,uint32_t sector,uint32_t cnt)
{
 80137dc:	b5b0      	push	{r4, r5, r7, lr}
 80137de:	b08a      	sub	sp, #40	; 0x28
 80137e0:	af02      	add	r7, sp, #8
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
    uint8_t sta=HAL_OK;
 80137e8:	2300      	movs	r3, #0
 80137ea:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout=SD_TIMEOUT;
 80137ec:	4b14      	ldr	r3, [pc, #80]	; (8013840 <SD_ReadDisk+0x64>)
 80137ee:	61bb      	str	r3, [r7, #24]
    long long lsector=sector;
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	2200      	movs	r2, #0
 80137f4:	461c      	mov	r4, r3
 80137f6:	4615      	mov	r5, r2
 80137f8:	e9c7 4504 	strd	r4, r5, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80137fc:	b672      	cpsid	i
}
 80137fe:	bf00      	nop
    __disable_irq();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
	sta=HAL_SD_ReadBlocks(&hsd1, (uint8_t*)buf,lsector,cnt,SD_TIMEOUT);//多个sector的读操作
 8013800:	693a      	ldr	r2, [r7, #16]
 8013802:	4b0f      	ldr	r3, [pc, #60]	; (8013840 <SD_ReadDisk+0x64>)
 8013804:	9300      	str	r3, [sp, #0]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	68f9      	ldr	r1, [r7, #12]
 801380a:	480e      	ldr	r0, [pc, #56]	; (8013844 <SD_ReadDisk+0x68>)
 801380c:	f7f4 fd8a 	bl	8008324 <HAL_SD_ReadBlocks>
 8013810:	4603      	mov	r3, r0
 8013812:	77fb      	strb	r3, [r7, #31]

	//等待SD卡读完
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8013814:	e007      	b.n	8013826 <SD_ReadDisk+0x4a>
    {
		if(timeout-- == 0)
 8013816:	69bb      	ldr	r3, [r7, #24]
 8013818:	1e5a      	subs	r2, r3, #1
 801381a:	61ba      	str	r2, [r7, #24]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d102      	bne.n	8013826 <SD_ReadDisk+0x4a>
		{
			sta=SD_TRANSFER_BUSY;
 8013820:	2301      	movs	r3, #1
 8013822:	77fb      	strb	r3, [r7, #31]
            break;
 8013824:	e004      	b.n	8013830 <SD_ReadDisk+0x54>
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8013826:	f7ff ffc9 	bl	80137bc <SD_GetCardState>
 801382a:	4603      	mov	r3, r0
 801382c:	2b00      	cmp	r3, #0
 801382e:	d1f2      	bne.n	8013816 <SD_ReadDisk+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8013830:	b662      	cpsie	i
}
 8013832:	bf00      	nop
		}
    }
	__enable_irq();//开启总中断
    return sta;
 8013834:	7ffb      	ldrb	r3, [r7, #31]
}
 8013836:	4618      	mov	r0, r3
 8013838:	3720      	adds	r7, #32
 801383a:	46bd      	mov	sp, r7
 801383c:	bdb0      	pop	{r4, r5, r7, pc}
 801383e:	bf00      	nop
 8013840:	05f5e100 	.word	0x05f5e100
 8013844:	24000174 	.word	0x24000174

08013848 <SD_WriteDisk>:
//buf:写数据缓存区
//sector:扇区地址
//cnt:扇区个数
//返回值:错误状态;0,正常;其他,错误代码;
uint8_t SD_WriteDisk(uint8_t *buf,uint32_t sector,uint32_t cnt)
{
 8013848:	b5b0      	push	{r4, r5, r7, lr}
 801384a:	b08a      	sub	sp, #40	; 0x28
 801384c:	af02      	add	r7, sp, #8
 801384e:	60f8      	str	r0, [r7, #12]
 8013850:	60b9      	str	r1, [r7, #8]
 8013852:	607a      	str	r2, [r7, #4]
    uint8_t sta=HAL_OK;
 8013854:	2300      	movs	r3, #0
 8013856:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout=SD_TIMEOUT;
 8013858:	4b14      	ldr	r3, [pc, #80]	; (80138ac <SD_WriteDisk+0x64>)
 801385a:	61bb      	str	r3, [r7, #24]
    long long lsector=sector;
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	2200      	movs	r2, #0
 8013860:	461c      	mov	r4, r3
 8013862:	4615      	mov	r5, r2
 8013864:	e9c7 4504 	strd	r4, r5, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013868:	b672      	cpsid	i
}
 801386a:	bf00      	nop
    __disable_irq();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
	sta=HAL_SD_WriteBlocks(&hsd1,(uint8_t*)buf,lsector,cnt,SD_TIMEOUT);//多个sector的写操作
 801386c:	693a      	ldr	r2, [r7, #16]
 801386e:	4b0f      	ldr	r3, [pc, #60]	; (80138ac <SD_WriteDisk+0x64>)
 8013870:	9300      	str	r3, [sp, #0]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	68f9      	ldr	r1, [r7, #12]
 8013876:	480e      	ldr	r0, [pc, #56]	; (80138b0 <SD_WriteDisk+0x68>)
 8013878:	f7f4 fede 	bl	8008638 <HAL_SD_WriteBlocks>
 801387c:	4603      	mov	r3, r0
 801387e:	77fb      	strb	r3, [r7, #31]

	//等待SD卡写完
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8013880:	e007      	b.n	8013892 <SD_WriteDisk+0x4a>
    {
		if(timeout-- == 0)
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	1e5a      	subs	r2, r3, #1
 8013886:	61ba      	str	r2, [r7, #24]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d102      	bne.n	8013892 <SD_WriteDisk+0x4a>
		{
			sta=SD_TRANSFER_BUSY;
 801388c:	2301      	movs	r3, #1
 801388e:	77fb      	strb	r3, [r7, #31]
            break;
 8013890:	e004      	b.n	801389c <SD_WriteDisk+0x54>
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8013892:	f7ff ff93 	bl	80137bc <SD_GetCardState>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d1f2      	bne.n	8013882 <SD_WriteDisk+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 801389c:	b662      	cpsie	i
}
 801389e:	bf00      	nop
		}
    }
	__enable_irq();//开启总中断
    return sta;
 80138a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3720      	adds	r7, #32
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bdb0      	pop	{r4, r5, r7, pc}
 80138aa:	bf00      	nop
 80138ac:	05f5e100 	.word	0x05f5e100
 80138b0:	24000174 	.word	0x24000174

080138b4 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size, uint8_t mode)
{
 80138b4:	b590      	push	{r4, r7, lr}
 80138b6:	b085      	sub	sp, #20
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	4604      	mov	r4, r0
 80138bc:	4608      	mov	r0, r1
 80138be:	4611      	mov	r1, r2
 80138c0:	461a      	mov	r2, r3
 80138c2:	4623      	mov	r3, r4
 80138c4:	80fb      	strh	r3, [r7, #6]
 80138c6:	4603      	mov	r3, r0
 80138c8:	80bb      	strh	r3, [r7, #4]
 80138ca:	460b      	mov	r3, r1
 80138cc:	70fb      	strb	r3, [r7, #3]
 80138ce:	4613      	mov	r3, r2
 80138d0:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 80138d2:	88bb      	ldrh	r3, [r7, #4]
 80138d4:	817b      	strh	r3, [r7, #10]
    uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);		//得到字体一个字符对应点阵集所占的字节数
 80138d6:	78bb      	ldrb	r3, [r7, #2]
 80138d8:	08db      	lsrs	r3, r3, #3
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	461a      	mov	r2, r3
 80138de:	78bb      	ldrb	r3, [r7, #2]
 80138e0:	f003 0307 	and.w	r3, r3, #7
 80138e4:	b2db      	uxtb	r3, r3
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	bf14      	ite	ne
 80138ea:	2301      	movne	r3, #1
 80138ec:	2300      	moveq	r3, #0
 80138ee:	b2db      	uxtb	r3, r3
 80138f0:	4413      	add	r3, r2
 80138f2:	b2da      	uxtb	r2, r3
 80138f4:	78bb      	ldrb	r3, [r7, #2]
 80138f6:	085b      	lsrs	r3, r3, #1
 80138f8:	b2db      	uxtb	r3, r3
 80138fa:	fb12 f303 	smulbb	r3, r2, r3
 80138fe:	727b      	strb	r3, [r7, #9]
    num = num - ' '; //得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8013900:	78fb      	ldrb	r3, [r7, #3]
 8013902:	3b20      	subs	r3, #32
 8013904:	70fb      	strb	r3, [r7, #3]

    for (t = 0; t < csize; t++)
 8013906:	2300      	movs	r3, #0
 8013908:	737b      	strb	r3, [r7, #13]
 801390a:	e073      	b.n	80139f4 <LCD_ShowChar+0x140>
    {
        if (size == 12)temp = asc2_1206[num][t]; 	 	//调用1206字体
 801390c:	78bb      	ldrb	r3, [r7, #2]
 801390e:	2b0c      	cmp	r3, #12
 8013910:	d10b      	bne.n	801392a <LCD_ShowChar+0x76>
 8013912:	78fa      	ldrb	r2, [r7, #3]
 8013914:	7b79      	ldrb	r1, [r7, #13]
 8013916:	483d      	ldr	r0, [pc, #244]	; (8013a0c <LCD_ShowChar+0x158>)
 8013918:	4613      	mov	r3, r2
 801391a:	005b      	lsls	r3, r3, #1
 801391c:	4413      	add	r3, r2
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	4403      	add	r3, r0
 8013922:	440b      	add	r3, r1
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	73fb      	strb	r3, [r7, #15]
 8013928:	e025      	b.n	8013976 <LCD_ShowChar+0xc2>
        else if (size == 16)temp = asc2_1608[num][t];	//调用1608字体
 801392a:	78bb      	ldrb	r3, [r7, #2]
 801392c:	2b10      	cmp	r3, #16
 801392e:	d108      	bne.n	8013942 <LCD_ShowChar+0x8e>
 8013930:	78fa      	ldrb	r2, [r7, #3]
 8013932:	7b7b      	ldrb	r3, [r7, #13]
 8013934:	4936      	ldr	r1, [pc, #216]	; (8013a10 <LCD_ShowChar+0x15c>)
 8013936:	0112      	lsls	r2, r2, #4
 8013938:	440a      	add	r2, r1
 801393a:	4413      	add	r3, r2
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	73fb      	strb	r3, [r7, #15]
 8013940:	e019      	b.n	8013976 <LCD_ShowChar+0xc2>
        else if (size == 24)temp = asc2_2412[num][t];	//调用2412字体
 8013942:	78bb      	ldrb	r3, [r7, #2]
 8013944:	2b18      	cmp	r3, #24
 8013946:	d10b      	bne.n	8013960 <LCD_ShowChar+0xac>
 8013948:	78fa      	ldrb	r2, [r7, #3]
 801394a:	7b79      	ldrb	r1, [r7, #13]
 801394c:	4831      	ldr	r0, [pc, #196]	; (8013a14 <LCD_ShowChar+0x160>)
 801394e:	4613      	mov	r3, r2
 8013950:	00db      	lsls	r3, r3, #3
 8013952:	4413      	add	r3, r2
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	4403      	add	r3, r0
 8013958:	440b      	add	r3, r1
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	73fb      	strb	r3, [r7, #15]
 801395e:	e00a      	b.n	8013976 <LCD_ShowChar+0xc2>
        else if (size == 32)temp = asc2_3216[num][t];	//调用3216字体
 8013960:	78bb      	ldrb	r3, [r7, #2]
 8013962:	2b20      	cmp	r3, #32
 8013964:	d14b      	bne.n	80139fe <LCD_ShowChar+0x14a>
 8013966:	78fa      	ldrb	r2, [r7, #3]
 8013968:	7b7b      	ldrb	r3, [r7, #13]
 801396a:	492b      	ldr	r1, [pc, #172]	; (8013a18 <LCD_ShowChar+0x164>)
 801396c:	01d2      	lsls	r2, r2, #7
 801396e:	440a      	add	r2, r1
 8013970:	4413      	add	r3, r2
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	73fb      	strb	r3, [r7, #15]
        else return;								//没有的字库

        for (t1 = 0; t1 < 8; t1++)
 8013976:	2300      	movs	r3, #0
 8013978:	73bb      	strb	r3, [r7, #14]
 801397a:	e033      	b.n	80139e4 <LCD_ShowChar+0x130>
        {
            if (temp & 0x80)ST7735_DrawPixel(x, y, RED);
 801397c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013980:	2b00      	cmp	r3, #0
 8013982:	da07      	bge.n	8013994 <LCD_ShowChar+0xe0>
 8013984:	88b9      	ldrh	r1, [r7, #4]
 8013986:	88fb      	ldrh	r3, [r7, #6]
 8013988:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 801398c:	4618      	mov	r0, r3
 801398e:	f000 fadf 	bl	8013f50 <ST7735_DrawPixel>
 8013992:	e00a      	b.n	80139aa <LCD_ShowChar+0xf6>
            else if (mode == 0)ST7735_DrawPixel(x, y, WHITE);
 8013994:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d106      	bne.n	80139aa <LCD_ShowChar+0xf6>
 801399c:	88b9      	ldrh	r1, [r7, #4]
 801399e:	88fb      	ldrh	r3, [r7, #6]
 80139a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139a4:	4618      	mov	r0, r3
 80139a6:	f000 fad3 	bl	8013f50 <ST7735_DrawPixel>

            temp <<= 1;
 80139aa:	7bfb      	ldrb	r3, [r7, #15]
 80139ac:	005b      	lsls	r3, r3, #1
 80139ae:	73fb      	strb	r3, [r7, #15]
            y++;
 80139b0:	88bb      	ldrh	r3, [r7, #4]
 80139b2:	3301      	adds	r3, #1
 80139b4:	80bb      	strh	r3, [r7, #4]

            if (y >= 600)return;		//超区域了
 80139b6:	88bb      	ldrh	r3, [r7, #4]
 80139b8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80139bc:	d221      	bcs.n	8013a02 <LCD_ShowChar+0x14e>

            if ((y - y0) == size)
 80139be:	88ba      	ldrh	r2, [r7, #4]
 80139c0:	897b      	ldrh	r3, [r7, #10]
 80139c2:	1ad2      	subs	r2, r2, r3
 80139c4:	78bb      	ldrb	r3, [r7, #2]
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d109      	bne.n	80139de <LCD_ShowChar+0x12a>
            {
                y = y0;
 80139ca:	897b      	ldrh	r3, [r7, #10]
 80139cc:	80bb      	strh	r3, [r7, #4]
                x++;
 80139ce:	88fb      	ldrh	r3, [r7, #6]
 80139d0:	3301      	adds	r3, #1
 80139d2:	80fb      	strh	r3, [r7, #6]

                if (x >= 1024)return;	//超区域了
 80139d4:	88fb      	ldrh	r3, [r7, #6]
 80139d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80139da:	d307      	bcc.n	80139ec <LCD_ShowChar+0x138>
 80139dc:	e012      	b.n	8013a04 <LCD_ShowChar+0x150>
        for (t1 = 0; t1 < 8; t1++)
 80139de:	7bbb      	ldrb	r3, [r7, #14]
 80139e0:	3301      	adds	r3, #1
 80139e2:	73bb      	strb	r3, [r7, #14]
 80139e4:	7bbb      	ldrb	r3, [r7, #14]
 80139e6:	2b07      	cmp	r3, #7
 80139e8:	d9c8      	bls.n	801397c <LCD_ShowChar+0xc8>
 80139ea:	e000      	b.n	80139ee <LCD_ShowChar+0x13a>

                break;
 80139ec:	bf00      	nop
    for (t = 0; t < csize; t++)
 80139ee:	7b7b      	ldrb	r3, [r7, #13]
 80139f0:	3301      	adds	r3, #1
 80139f2:	737b      	strb	r3, [r7, #13]
 80139f4:	7b7a      	ldrb	r2, [r7, #13]
 80139f6:	7a7b      	ldrb	r3, [r7, #9]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d387      	bcc.n	801390c <LCD_ShowChar+0x58>
 80139fc:	e002      	b.n	8013a04 <LCD_ShowChar+0x150>
        else return;								//没有的字库
 80139fe:	bf00      	nop
 8013a00:	e000      	b.n	8013a04 <LCD_ShowChar+0x150>
            if (y >= 600)return;		//超区域了
 8013a02:	bf00      	nop
            }
        }
    }
}
 8013a04:	3714      	adds	r7, #20
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd90      	pop	{r4, r7, pc}
 8013a0a:	bf00      	nop
 8013a0c:	0803f73c 	.word	0x0803f73c
 8013a10:	0803fbb0 	.word	0x0803fbb0
 8013a14:	080401a0 	.word	0x080401a0
 8013a18:	08040efc 	.word	0x08040efc

08013a1c <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, uint8_t *p)
{
 8013a1c:	b590      	push	{r4, r7, lr}
 8013a1e:	b087      	sub	sp, #28
 8013a20:	af02      	add	r7, sp, #8
 8013a22:	4604      	mov	r4, r0
 8013a24:	4608      	mov	r0, r1
 8013a26:	4611      	mov	r1, r2
 8013a28:	461a      	mov	r2, r3
 8013a2a:	4623      	mov	r3, r4
 8013a2c:	80fb      	strh	r3, [r7, #6]
 8013a2e:	4603      	mov	r3, r0
 8013a30:	80bb      	strh	r3, [r7, #4]
 8013a32:	460b      	mov	r3, r1
 8013a34:	807b      	strh	r3, [r7, #2]
 8013a36:	4613      	mov	r3, r2
 8013a38:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8013a3a:	88fb      	ldrh	r3, [r7, #6]
 8013a3c:	73fb      	strb	r3, [r7, #15]
    width += x;
 8013a3e:	887a      	ldrh	r2, [r7, #2]
 8013a40:	88fb      	ldrh	r3, [r7, #6]
 8013a42:	4413      	add	r3, r2
 8013a44:	807b      	strh	r3, [r7, #2]
    height += y;
 8013a46:	883a      	ldrh	r2, [r7, #0]
 8013a48:	88bb      	ldrh	r3, [r7, #4]
 8013a4a:	4413      	add	r3, r2
 8013a4c:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' ')) //判断是不是非法字符!
 8013a4e:	e024      	b.n	8013a9a <LCD_ShowString+0x7e>
    {
        if (x >= width)
 8013a50:	88fa      	ldrh	r2, [r7, #6]
 8013a52:	887b      	ldrh	r3, [r7, #2]
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d307      	bcc.n	8013a68 <LCD_ShowString+0x4c>
        {
            x = x0;
 8013a58:	7bfb      	ldrb	r3, [r7, #15]
 8013a5a:	80fb      	strh	r3, [r7, #6]
            y += size;
 8013a5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	88bb      	ldrh	r3, [r7, #4]
 8013a64:	4413      	add	r3, r2
 8013a66:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break; //退出
 8013a68:	88ba      	ldrh	r2, [r7, #4]
 8013a6a:	883b      	ldrh	r3, [r7, #0]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d21d      	bcs.n	8013aac <LCD_ShowString+0x90>

        LCD_ShowChar(x, y, *p, size, 0);
 8013a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a72:	781a      	ldrb	r2, [r3, #0]
 8013a74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013a78:	88b9      	ldrh	r1, [r7, #4]
 8013a7a:	88f8      	ldrh	r0, [r7, #6]
 8013a7c:	2400      	movs	r4, #0
 8013a7e:	9400      	str	r4, [sp, #0]
 8013a80:	f7ff ff18 	bl	80138b4 <LCD_ShowChar>
        x += size / 2;
 8013a84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013a88:	085b      	lsrs	r3, r3, #1
 8013a8a:	b2db      	uxtb	r3, r3
 8013a8c:	b29a      	uxth	r2, r3
 8013a8e:	88fb      	ldrh	r3, [r7, #6]
 8013a90:	4413      	add	r3, r2
 8013a92:	80fb      	strh	r3, [r7, #6]
        p++;
 8013a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a96:	3301      	adds	r3, #1
 8013a98:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' ')) //判断是不是非法字符!
 8013a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	2b7e      	cmp	r3, #126	; 0x7e
 8013aa0:	d805      	bhi.n	8013aae <LCD_ShowString+0x92>
 8013aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	2b1f      	cmp	r3, #31
 8013aa8:	d8d2      	bhi.n	8013a50 <LCD_ShowString+0x34>
    }
}
 8013aaa:	e000      	b.n	8013aae <LCD_ShowString+0x92>
        if (y >= height)break; //退出
 8013aac:	bf00      	nop
}
 8013aae:	bf00      	nop
 8013ab0:	3714      	adds	r7, #20
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd90      	pop	{r4, r7, pc}
	...

08013ab8 <lcd_init>:

void lcd_init(void)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	af00      	add	r7, sp, #0
	uint32_t i;
	HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8013abc:	2201      	movs	r2, #1
 8013abe:	2120      	movs	r1, #32
 8013ac0:	4810      	ldr	r0, [pc, #64]	; (8013b04 <lcd_init+0x4c>)
 8013ac2:	f7ef fadd 	bl	8003080 <HAL_GPIO_WritePin>
	ST7735_Init();
 8013ac6:	f000 f8b5 	bl	8013c34 <ST7735_Init>
	ST7735_FillScreen(RED);
 8013aca:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8013ace:	f000 fa74 	bl	8013fba <ST7735_FillScreen>
	HAL_Delay(200);
 8013ad2:	20c8      	movs	r0, #200	; 0xc8
 8013ad4:	f7ed f8dc 	bl	8000c90 <HAL_Delay>
	ST7735_FillScreen(GREEN);
 8013ad8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8013adc:	f000 fa6d 	bl	8013fba <ST7735_FillScreen>
	HAL_Delay(200);
 8013ae0:	20c8      	movs	r0, #200	; 0xc8
 8013ae2:	f7ed f8d5 	bl	8000c90 <HAL_Delay>
	ST7735_FillScreen(BLUE);
 8013ae6:	201f      	movs	r0, #31
 8013ae8:	f000 fa67 	bl	8013fba <ST7735_FillScreen>
	HAL_Delay(200);
 8013aec:	20c8      	movs	r0, #200	; 0xc8
 8013aee:	f7ed f8cf 	bl	8000c90 <HAL_Delay>
	ST7735_FillScreen(WHITE);
 8013af2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013af6:	f000 fa60 	bl	8013fba <ST7735_FillScreen>
	HAL_Delay(200);
 8013afa:	20c8      	movs	r0, #200	; 0xc8
 8013afc:	f7ed f8c8 	bl	8000c90 <HAL_Delay>
//	LCD_ShowString(0, 0, 160, 128, 16, " lcd display test ");
//    for(i=0;i<100;i++)
//    {
//    	ST7735_DrawPixel(i,i,RED);
//    }
}
 8013b00:	bf00      	nop
 8013b02:	bd80      	pop	{r7, pc}
 8013b04:	58020000 	.word	0x58020000

08013b08 <ST7735_Reset>:
#define ST7735_MADCTL_MY  0x80
#define ST7735_MADCTL_MV  0x20
#define ST7735_MADCTL_RGB 0x00

void ST7735_Reset(void)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b12:	4808      	ldr	r0, [pc, #32]	; (8013b34 <ST7735_Reset+0x2c>)
 8013b14:	f7ef fab4 	bl	8003080 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8013b18:	2064      	movs	r0, #100	; 0x64
 8013b1a:	f7ed f8b9 	bl	8000c90 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8013b1e:	2201      	movs	r2, #1
 8013b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b24:	4803      	ldr	r0, [pc, #12]	; (8013b34 <ST7735_Reset+0x2c>)
 8013b26:	f7ef faab 	bl	8003080 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8013b2a:	2064      	movs	r0, #100	; 0x64
 8013b2c:	f7ed f8b0 	bl	8000c90 <HAL_Delay>
}
 8013b30:	bf00      	nop
 8013b32:	bd80      	pop	{r7, pc}
 8013b34:	58020c00 	.word	0x58020c00

08013b38 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	4603      	mov	r3, r0
 8013b40:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8013b42:	2200      	movs	r2, #0
 8013b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013b48:	480c      	ldr	r0, [pc, #48]	; (8013b7c <ST7735_WriteCommand+0x44>)
 8013b4a:	f7ef fa99 	bl	8003080 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8013b4e:	2200      	movs	r2, #0
 8013b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b54:	480a      	ldr	r0, [pc, #40]	; (8013b80 <ST7735_WriteCommand+0x48>)
 8013b56:	f7ef fa93 	bl	8003080 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, 100);
 8013b5a:	1df9      	adds	r1, r7, #7
 8013b5c:	2364      	movs	r3, #100	; 0x64
 8013b5e:	2201      	movs	r2, #1
 8013b60:	4808      	ldr	r0, [pc, #32]	; (8013b84 <ST7735_WriteCommand+0x4c>)
 8013b62:	f7f5 ff95 	bl	8009a90 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8013b66:	2201      	movs	r2, #1
 8013b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b6c:	4804      	ldr	r0, [pc, #16]	; (8013b80 <ST7735_WriteCommand+0x48>)
 8013b6e:	f7ef fa87 	bl	8003080 <HAL_GPIO_WritePin>
}
 8013b72:	bf00      	nop
 8013b74:	3708      	adds	r7, #8
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}
 8013b7a:	bf00      	nop
 8013b7c:	58020c00 	.word	0x58020c00
 8013b80:	58020400 	.word	0x58020400
 8013b84:	240001f0 	.word	0x240001f0

08013b88 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t data)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	4603      	mov	r3, r0
 8013b90:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8013b92:	2201      	movs	r2, #1
 8013b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013b98:	480c      	ldr	r0, [pc, #48]	; (8013bcc <ST7735_WriteData+0x44>)
 8013b9a:	f7ef fa71 	bl	8003080 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013ba4:	480a      	ldr	r0, [pc, #40]	; (8013bd0 <ST7735_WriteData+0x48>)
 8013ba6:	f7ef fa6b 	bl	8003080 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8013baa:	1df9      	adds	r1, r7, #7
 8013bac:	2364      	movs	r3, #100	; 0x64
 8013bae:	2201      	movs	r2, #1
 8013bb0:	4808      	ldr	r0, [pc, #32]	; (8013bd4 <ST7735_WriteData+0x4c>)
 8013bb2:	f7f5 ff6d 	bl	8009a90 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8013bb6:	2201      	movs	r2, #1
 8013bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013bbc:	4804      	ldr	r0, [pc, #16]	; (8013bd0 <ST7735_WriteData+0x48>)
 8013bbe:	f7ef fa5f 	bl	8003080 <HAL_GPIO_WritePin>
}
 8013bc2:	bf00      	nop
 8013bc4:	3708      	adds	r7, #8
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	58020c00 	.word	0x58020c00
 8013bd0:	58020400 	.word	0x58020400
 8013bd4:	240001f0 	.word	0x240001f0

08013bd8 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t rotation)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	4603      	mov	r3, r0
 8013be0:	71fb      	strb	r3, [r7, #7]
    uint8_t madctl = 0;
 8013be2:	2300      	movs	r3, #0
 8013be4:	73fb      	strb	r3, [r7, #15]

    switch (rotation)
 8013be6:	79fb      	ldrb	r3, [r7, #7]
 8013be8:	2b03      	cmp	r3, #3
 8013bea:	d817      	bhi.n	8013c1c <ST7735_SetRotation+0x44>
 8013bec:	a201      	add	r2, pc, #4	; (adr r2, 8013bf4 <ST7735_SetRotation+0x1c>)
 8013bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bf2:	bf00      	nop
 8013bf4:	08013c05 	.word	0x08013c05
 8013bf8:	08013c0b 	.word	0x08013c0b
 8013bfc:	08013c11 	.word	0x08013c11
 8013c00:	08013c17 	.word	0x08013c17
    {
        case 0:
            madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8013c04:	23c0      	movs	r3, #192	; 0xc0
 8013c06:	73fb      	strb	r3, [r7, #15]
            break;
 8013c08:	e008      	b.n	8013c1c <ST7735_SetRotation+0x44>
        case 1:
            madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8013c0a:	23a0      	movs	r3, #160	; 0xa0
 8013c0c:	73fb      	strb	r3, [r7, #15]
            break;
 8013c0e:	e005      	b.n	8013c1c <ST7735_SetRotation+0x44>
        case 2:
            madctl = ST7735_MADCTL_RGB;
 8013c10:	2300      	movs	r3, #0
 8013c12:	73fb      	strb	r3, [r7, #15]
            break;
 8013c14:	e002      	b.n	8013c1c <ST7735_SetRotation+0x44>
        case 3:
            madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8013c16:	2360      	movs	r3, #96	; 0x60
 8013c18:	73fb      	strb	r3, [r7, #15]
            break;
 8013c1a:	bf00      	nop
    }

    ST7735_WriteCommand(ST7735_MADCTL);
 8013c1c:	2036      	movs	r0, #54	; 0x36
 8013c1e:	f7ff ff8b 	bl	8013b38 <ST7735_WriteCommand>
    ST7735_WriteData(madctl);
 8013c22:	7bfb      	ldrb	r3, [r7, #15]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7ff ffaf 	bl	8013b88 <ST7735_WriteData>
}
 8013c2a:	bf00      	nop
 8013c2c:	3710      	adds	r7, #16
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	bf00      	nop

08013c34 <ST7735_Init>:

void ST7735_Init(void) {
 8013c34:	b580      	push	{r7, lr}
 8013c36:	af00      	add	r7, sp, #0
  // Initialize the display
  ST7735_Reset();
 8013c38:	f7ff ff66 	bl	8013b08 <ST7735_Reset>
  ST7735_WriteCommand(ST7735_SLPOUT);
 8013c3c:	2011      	movs	r0, #17
 8013c3e:	f7ff ff7b 	bl	8013b38 <ST7735_WriteCommand>
  HAL_Delay(120);
 8013c42:	2078      	movs	r0, #120	; 0x78
 8013c44:	f7ed f824 	bl	8000c90 <HAL_Delay>
  ST7735_WriteCommand(ST7735_FRMCTR1);
 8013c48:	20b1      	movs	r0, #177	; 0xb1
 8013c4a:	f7ff ff75 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 8013c4e:	2001      	movs	r0, #1
 8013c50:	f7ff ff9a 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8013c54:	202c      	movs	r0, #44	; 0x2c
 8013c56:	f7ff ff97 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8013c5a:	202d      	movs	r0, #45	; 0x2d
 8013c5c:	f7ff ff94 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_FRMCTR2);
 8013c60:	20b2      	movs	r0, #178	; 0xb2
 8013c62:	f7ff ff69 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 8013c66:	2001      	movs	r0, #1
 8013c68:	f7ff ff8e 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8013c6c:	202c      	movs	r0, #44	; 0x2c
 8013c6e:	f7ff ff8b 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8013c72:	202d      	movs	r0, #45	; 0x2d
 8013c74:	f7ff ff88 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_FRMCTR3);
 8013c78:	20b3      	movs	r0, #179	; 0xb3
 8013c7a:	f7ff ff5d 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 8013c7e:	2001      	movs	r0, #1
 8013c80:	f7ff ff82 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8013c84:	202c      	movs	r0, #44	; 0x2c
 8013c86:	f7ff ff7f 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8013c8a:	202d      	movs	r0, #45	; 0x2d
 8013c8c:	f7ff ff7c 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x01);
 8013c90:	2001      	movs	r0, #1
 8013c92:	f7ff ff79 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8013c96:	202c      	movs	r0, #44	; 0x2c
 8013c98:	f7ff ff76 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8013c9c:	202d      	movs	r0, #45	; 0x2d
 8013c9e:	f7ff ff73 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_INVCTR);
 8013ca2:	20b4      	movs	r0, #180	; 0xb4
 8013ca4:	f7ff ff48 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x07);
 8013ca8:	2007      	movs	r0, #7
 8013caa:	f7ff ff6d 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR1);
 8013cae:	20c0      	movs	r0, #192	; 0xc0
 8013cb0:	f7ff ff42 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0xA2);
 8013cb4:	20a2      	movs	r0, #162	; 0xa2
 8013cb6:	f7ff ff67 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x02);
 8013cba:	2002      	movs	r0, #2
 8013cbc:	f7ff ff64 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x84);
 8013cc0:	2084      	movs	r0, #132	; 0x84
 8013cc2:	f7ff ff61 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR2);
 8013cc6:	20c1      	movs	r0, #193	; 0xc1
 8013cc8:	f7ff ff36 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0xC5);
 8013ccc:	20c5      	movs	r0, #197	; 0xc5
 8013cce:	f7ff ff5b 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR3);
 8013cd2:	20c2      	movs	r0, #194	; 0xc2
 8013cd4:	f7ff ff30 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x0A);
 8013cd8:	200a      	movs	r0, #10
 8013cda:	f7ff ff55 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8013cde:	2000      	movs	r0, #0
 8013ce0:	f7ff ff52 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR4);
 8013ce4:	20c3      	movs	r0, #195	; 0xc3
 8013ce6:	f7ff ff27 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x8A);
 8013cea:	208a      	movs	r0, #138	; 0x8a
 8013cec:	f7ff ff4c 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2A);
 8013cf0:	202a      	movs	r0, #42	; 0x2a
 8013cf2:	f7ff ff49 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR5);
 8013cf6:	20c4      	movs	r0, #196	; 0xc4
 8013cf8:	f7ff ff1e 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x8A);
 8013cfc:	208a      	movs	r0, #138	; 0x8a
 8013cfe:	f7ff ff43 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0xEE);
 8013d02:	20ee      	movs	r0, #238	; 0xee
 8013d04:	f7ff ff40 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_VMCTR1);
 8013d08:	20c5      	movs	r0, #197	; 0xc5
 8013d0a:	f7ff ff15 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x0E);
 8013d0e:	200e      	movs	r0, #14
 8013d10:	f7ff ff3a 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_INVOFF);
 8013d14:	2020      	movs	r0, #32
 8013d16:	f7ff ff0f 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteCommand(ST7735_COLMOD);
 8013d1a:	203a      	movs	r0, #58	; 0x3a
 8013d1c:	f7ff ff0c 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x05);
 8013d20:	2005      	movs	r0, #5
 8013d22:	f7ff ff31 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_CASET);
 8013d26:	202a      	movs	r0, #42	; 0x2a
 8013d28:	f7ff ff06 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8013d2c:	2000      	movs	r0, #0
 8013d2e:	f7ff ff2b 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8013d32:	2000      	movs	r0, #0
 8013d34:	f7ff ff28 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8013d38:	2000      	movs	r0, #0
 8013d3a:	f7ff ff25 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x7F);
 8013d3e:	207f      	movs	r0, #127	; 0x7f
 8013d40:	f7ff ff22 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_RASET);
 8013d44:	202b      	movs	r0, #43	; 0x2b
 8013d46:	f7ff fef7 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8013d4a:	2000      	movs	r0, #0
 8013d4c:	f7ff ff1c 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8013d50:	2000      	movs	r0, #0
 8013d52:	f7ff ff19 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8013d56:	2000      	movs	r0, #0
 8013d58:	f7ff ff16 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x9F);
 8013d5c:	209f      	movs	r0, #159	; 0x9f
 8013d5e:	f7ff ff13 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_GMCTRP1);
 8013d62:	20e0      	movs	r0, #224	; 0xe0
 8013d64:	f7ff fee8 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x02);
 8013d68:	2002      	movs	r0, #2
 8013d6a:	f7ff ff0d 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x1C);
 8013d6e:	201c      	movs	r0, #28
 8013d70:	f7ff ff0a 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x07);
 8013d74:	2007      	movs	r0, #7
 8013d76:	f7ff ff07 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x12);
 8013d7a:	2012      	movs	r0, #18
 8013d7c:	f7ff ff04 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x37);
 8013d80:	2037      	movs	r0, #55	; 0x37
 8013d82:	f7ff ff01 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x32);
 8013d86:	2032      	movs	r0, #50	; 0x32
 8013d88:	f7ff fefe 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 8013d8c:	2029      	movs	r0, #41	; 0x29
 8013d8e:	f7ff fefb 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8013d92:	202d      	movs	r0, #45	; 0x2d
 8013d94:	f7ff fef8 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 8013d98:	2029      	movs	r0, #41	; 0x29
 8013d9a:	f7ff fef5 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x25);
 8013d9e:	2025      	movs	r0, #37	; 0x25
 8013da0:	f7ff fef2 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2B);
 8013da4:	202b      	movs	r0, #43	; 0x2b
 8013da6:	f7ff feef 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x39);
 8013daa:	2039      	movs	r0, #57	; 0x39
 8013dac:	f7ff feec 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8013db0:	2000      	movs	r0, #0
 8013db2:	f7ff fee9 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x01);
 8013db6:	2001      	movs	r0, #1
 8013db8:	f7ff fee6 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x03);
 8013dbc:	2003      	movs	r0, #3
 8013dbe:	f7ff fee3 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x10);
 8013dc2:	2010      	movs	r0, #16
 8013dc4:	f7ff fee0 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_GMCTRN1);
 8013dc8:	20e1      	movs	r0, #225	; 0xe1
 8013dca:	f7ff feb5 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x03);
 8013dce:	2003      	movs	r0, #3
 8013dd0:	f7ff feda 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x1D);
 8013dd4:	201d      	movs	r0, #29
 8013dd6:	f7ff fed7 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x07);
 8013dda:	2007      	movs	r0, #7
 8013ddc:	f7ff fed4 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x06);
 8013de0:	2006      	movs	r0, #6
 8013de2:	f7ff fed1 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 8013de6:	202e      	movs	r0, #46	; 0x2e
 8013de8:	f7ff fece 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8013dec:	202c      	movs	r0, #44	; 0x2c
 8013dee:	f7ff fecb 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 8013df2:	2029      	movs	r0, #41	; 0x29
 8013df4:	f7ff fec8 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8013df8:	202d      	movs	r0, #45	; 0x2d
 8013dfa:	f7ff fec5 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 8013dfe:	202e      	movs	r0, #46	; 0x2e
 8013e00:	f7ff fec2 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 8013e04:	202e      	movs	r0, #46	; 0x2e
 8013e06:	f7ff febf 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x37);
 8013e0a:	2037      	movs	r0, #55	; 0x37
 8013e0c:	f7ff febc 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x3F);
 8013e10:	203f      	movs	r0, #63	; 0x3f
 8013e12:	f7ff feb9 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8013e16:	2000      	movs	r0, #0
 8013e18:	f7ff feb6 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8013e1c:	2000      	movs	r0, #0
 8013e1e:	f7ff feb3 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x02);
 8013e22:	2002      	movs	r0, #2
 8013e24:	f7ff feb0 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x10);
 8013e28:	2010      	movs	r0, #16
 8013e2a:	f7ff fead 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_NORON);
 8013e2e:	2013      	movs	r0, #19
 8013e30:	f7ff fe82 	bl	8013b38 <ST7735_WriteCommand>
  HAL_Delay(10);
 8013e34:	200a      	movs	r0, #10
 8013e36:	f7ec ff2b 	bl	8000c90 <HAL_Delay>
  ST7735_WriteCommand(ST7735_DISPON);
 8013e3a:	2029      	movs	r0, #41	; 0x29
 8013e3c:	f7ff fe7c 	bl	8013b38 <ST7735_WriteCommand>
  HAL_Delay(10);
 8013e40:	200a      	movs	r0, #10
 8013e42:	f7ec ff25 	bl	8000c90 <HAL_Delay>

  ST7735_SetRotation(ST7735_ROTATION);
 8013e46:	2003      	movs	r0, #3
 8013e48:	f7ff fec6 	bl	8013bd8 <ST7735_SetRotation>
  ST7735_FillScreen(WHITE);
 8013e4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013e50:	f000 f8b3 	bl	8013fba <ST7735_FillScreen>
}
 8013e54:	bf00      	nop
 8013e56:	bd80      	pop	{r7, pc}

08013e58 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8013e58:	b590      	push	{r4, r7, lr}
 8013e5a:	b083      	sub	sp, #12
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	4604      	mov	r4, r0
 8013e60:	4608      	mov	r0, r1
 8013e62:	4611      	mov	r1, r2
 8013e64:	461a      	mov	r2, r3
 8013e66:	4623      	mov	r3, r4
 8013e68:	71fb      	strb	r3, [r7, #7]
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	71bb      	strb	r3, [r7, #6]
 8013e6e:	460b      	mov	r3, r1
 8013e70:	717b      	strb	r3, [r7, #5]
 8013e72:	4613      	mov	r3, r2
 8013e74:	713b      	strb	r3, [r7, #4]
  y0 += ST7735_YSTART;

  x1 += ST7735_XSTART;
  y1 += ST7735_YSTART;

  ST7735_WriteCommand(ST7735_CASET);
 8013e76:	202a      	movs	r0, #42	; 0x2a
 8013e78:	f7ff fe5e 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8013e7c:	2000      	movs	r0, #0
 8013e7e:	f7ff fe83 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(x0 + ST7735_XSTART);
 8013e82:	79fb      	ldrb	r3, [r7, #7]
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7ff fe7f 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8013e8a:	2000      	movs	r0, #0
 8013e8c:	f7ff fe7c 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(x1 + ST7735_XSTART);
 8013e90:	797b      	ldrb	r3, [r7, #5]
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7ff fe78 	bl	8013b88 <ST7735_WriteData>

  ST7735_WriteCommand(ST7735_RASET);
 8013e98:	202b      	movs	r0, #43	; 0x2b
 8013e9a:	f7ff fe4d 	bl	8013b38 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8013e9e:	2000      	movs	r0, #0
 8013ea0:	f7ff fe72 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(y0 + ST7735_YSTART);
 8013ea4:	79bb      	ldrb	r3, [r7, #6]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7ff fe6e 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8013eac:	2000      	movs	r0, #0
 8013eae:	f7ff fe6b 	bl	8013b88 <ST7735_WriteData>
  ST7735_WriteData(y1 + ST7735_YSTART);
 8013eb2:	793b      	ldrb	r3, [r7, #4]
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7ff fe67 	bl	8013b88 <ST7735_WriteData>
}
 8013eba:	bf00      	nop
 8013ebc:	370c      	adds	r7, #12
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd90      	pop	{r4, r7, pc}

08013ec2 <ST7735_DrawRectangle>:

void ST7735_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8013ec2:	b590      	push	{r4, r7, lr}
 8013ec4:	b085      	sub	sp, #20
 8013ec6:	af00      	add	r7, sp, #0
 8013ec8:	4604      	mov	r4, r0
 8013eca:	4608      	mov	r0, r1
 8013ecc:	4611      	mov	r1, r2
 8013ece:	461a      	mov	r2, r3
 8013ed0:	4623      	mov	r3, r4
 8013ed2:	80fb      	strh	r3, [r7, #6]
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	80bb      	strh	r3, [r7, #4]
 8013ed8:	460b      	mov	r3, r1
 8013eda:	807b      	strh	r3, [r7, #2]
 8013edc:	4613      	mov	r3, r2
 8013ede:	803b      	strh	r3, [r7, #0]
  ST7735_SetAddressWindow(x, y, x + width - 1, y + height - 1);
 8013ee0:	88fb      	ldrh	r3, [r7, #6]
 8013ee2:	b2d8      	uxtb	r0, r3
 8013ee4:	88bb      	ldrh	r3, [r7, #4]
 8013ee6:	b2d9      	uxtb	r1, r3
 8013ee8:	88fb      	ldrh	r3, [r7, #6]
 8013eea:	b2da      	uxtb	r2, r3
 8013eec:	887b      	ldrh	r3, [r7, #2]
 8013eee:	b2db      	uxtb	r3, r3
 8013ef0:	4413      	add	r3, r2
 8013ef2:	b2db      	uxtb	r3, r3
 8013ef4:	3b01      	subs	r3, #1
 8013ef6:	b2dc      	uxtb	r4, r3
 8013ef8:	88bb      	ldrh	r3, [r7, #4]
 8013efa:	b2da      	uxtb	r2, r3
 8013efc:	883b      	ldrh	r3, [r7, #0]
 8013efe:	b2db      	uxtb	r3, r3
 8013f00:	4413      	add	r3, r2
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	3b01      	subs	r3, #1
 8013f06:	b2db      	uxtb	r3, r3
 8013f08:	4622      	mov	r2, r4
 8013f0a:	f7ff ffa5 	bl	8013e58 <ST7735_SetAddressWindow>
  ST7735_WriteCommand(ST7735_RAMWR);
 8013f0e:	202c      	movs	r0, #44	; 0x2c
 8013f10:	f7ff fe12 	bl	8013b38 <ST7735_WriteCommand>
  // Write the color data
  for (uint16_t i = 0; i < width * height; i++)
 8013f14:	2300      	movs	r3, #0
 8013f16:	81fb      	strh	r3, [r7, #14]
 8013f18:	e00e      	b.n	8013f38 <ST7735_DrawRectangle+0x76>
  {
    ST7735_WriteData(color >> 8);
 8013f1a:	8c3b      	ldrh	r3, [r7, #32]
 8013f1c:	0a1b      	lsrs	r3, r3, #8
 8013f1e:	b29b      	uxth	r3, r3
 8013f20:	b2db      	uxtb	r3, r3
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7ff fe30 	bl	8013b88 <ST7735_WriteData>
    ST7735_WriteData(color & 0xFF);
 8013f28:	8c3b      	ldrh	r3, [r7, #32]
 8013f2a:	b2db      	uxtb	r3, r3
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7ff fe2b 	bl	8013b88 <ST7735_WriteData>
  for (uint16_t i = 0; i < width * height; i++)
 8013f32:	89fb      	ldrh	r3, [r7, #14]
 8013f34:	3301      	adds	r3, #1
 8013f36:	81fb      	strh	r3, [r7, #14]
 8013f38:	89fa      	ldrh	r2, [r7, #14]
 8013f3a:	887b      	ldrh	r3, [r7, #2]
 8013f3c:	8839      	ldrh	r1, [r7, #0]
 8013f3e:	fb01 f303 	mul.w	r3, r1, r3
 8013f42:	429a      	cmp	r2, r3
 8013f44:	dbe9      	blt.n	8013f1a <ST7735_DrawRectangle+0x58>
  }
}
 8013f46:	bf00      	nop
 8013f48:	bf00      	nop
 8013f4a:	3714      	adds	r7, #20
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd90      	pop	{r4, r7, pc}

08013f50 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b084      	sub	sp, #16
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	4603      	mov	r3, r0
 8013f58:	80fb      	strh	r3, [r7, #6]
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	80bb      	strh	r3, [r7, #4]
 8013f5e:	4613      	mov	r3, r2
 8013f60:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8013f62:	88fb      	ldrh	r3, [r7, #6]
 8013f64:	2b9f      	cmp	r3, #159	; 0x9f
 8013f66:	d824      	bhi.n	8013fb2 <ST7735_DrawPixel+0x62>
 8013f68:	88bb      	ldrh	r3, [r7, #4]
 8013f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8013f6c:	d821      	bhi.n	8013fb2 <ST7735_DrawPixel+0x62>
        return;

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8013f6e:	88fb      	ldrh	r3, [r7, #6]
 8013f70:	b2d8      	uxtb	r0, r3
 8013f72:	88bb      	ldrh	r3, [r7, #4]
 8013f74:	b2d9      	uxtb	r1, r3
 8013f76:	88fb      	ldrh	r3, [r7, #6]
 8013f78:	b2db      	uxtb	r3, r3
 8013f7a:	3301      	adds	r3, #1
 8013f7c:	b2da      	uxtb	r2, r3
 8013f7e:	88bb      	ldrh	r3, [r7, #4]
 8013f80:	b2db      	uxtb	r3, r3
 8013f82:	3301      	adds	r3, #1
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	f7ff ff67 	bl	8013e58 <ST7735_SetAddressWindow>
    ST7735_WriteCommand(ST7735_RAMWR);
 8013f8a:	202c      	movs	r0, #44	; 0x2c
 8013f8c:	f7ff fdd4 	bl	8013b38 <ST7735_WriteCommand>
    uint8_t data[2];
		data[0] = color >> 8;
 8013f90:	887b      	ldrh	r3, [r7, #2]
 8013f92:	0a1b      	lsrs	r3, r3, #8
 8013f94:	b29b      	uxth	r3, r3
 8013f96:	b2db      	uxtb	r3, r3
 8013f98:	733b      	strb	r3, [r7, #12]
		data[1] = color & 0xFF;
 8013f9a:	887b      	ldrh	r3, [r7, #2]
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	737b      	strb	r3, [r7, #13]
		ST7735_WriteData(data[0]);
 8013fa0:	7b3b      	ldrb	r3, [r7, #12]
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7ff fdf0 	bl	8013b88 <ST7735_WriteData>
		ST7735_WriteData(data[1]);
 8013fa8:	7b7b      	ldrb	r3, [r7, #13]
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7ff fdec 	bl	8013b88 <ST7735_WriteData>
 8013fb0:	e000      	b.n	8013fb4 <ST7735_DrawPixel+0x64>
        return;
 8013fb2:	bf00      	nop

}
 8013fb4:	3710      	adds	r7, #16
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}

08013fba <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8013fba:	b580      	push	{r7, lr}
 8013fbc:	b084      	sub	sp, #16
 8013fbe:	af02      	add	r7, sp, #8
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	80fb      	strh	r3, [r7, #6]
  ST7735_DrawRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8013fc4:	88fb      	ldrh	r3, [r7, #6]
 8013fc6:	9300      	str	r3, [sp, #0]
 8013fc8:	2380      	movs	r3, #128	; 0x80
 8013fca:	22a0      	movs	r2, #160	; 0xa0
 8013fcc:	2100      	movs	r1, #0
 8013fce:	2000      	movs	r0, #0
 8013fd0:	f7ff ff77 	bl	8013ec2 <ST7735_DrawRectangle>
}
 8013fd4:	bf00      	nop
 8013fd6:	3708      	adds	r7, #8
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}

08013fdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	4913      	ldr	r1, [pc, #76]	; (8014030 <MX_USB_DEVICE_Init+0x54>)
 8013fe4:	4813      	ldr	r0, [pc, #76]	; (8014034 <MX_USB_DEVICE_Init+0x58>)
 8013fe6:	f7fa fca6 	bl	800e936 <USBD_Init>
 8013fea:	4603      	mov	r3, r0
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d001      	beq.n	8013ff4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013ff0:	f7ec faf6 	bl	80005e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8013ff4:	4910      	ldr	r1, [pc, #64]	; (8014038 <MX_USB_DEVICE_Init+0x5c>)
 8013ff6:	480f      	ldr	r0, [pc, #60]	; (8014034 <MX_USB_DEVICE_Init+0x58>)
 8013ff8:	f7fa fccd 	bl	800e996 <USBD_RegisterClass>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014002:	f7ec faed 	bl	80005e0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8014006:	490d      	ldr	r1, [pc, #52]	; (801403c <MX_USB_DEVICE_Init+0x60>)
 8014008:	480a      	ldr	r0, [pc, #40]	; (8014034 <MX_USB_DEVICE_Init+0x58>)
 801400a:	f7f8 fe8b 	bl	800cd24 <USBD_MSC_RegisterStorage>
 801400e:	4603      	mov	r3, r0
 8014010:	2b00      	cmp	r3, #0
 8014012:	d001      	beq.n	8014018 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014014:	f7ec fae4 	bl	80005e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014018:	4806      	ldr	r0, [pc, #24]	; (8014034 <MX_USB_DEVICE_Init+0x58>)
 801401a:	f7fa fcf2 	bl	800ea02 <USBD_Start>
 801401e:	4603      	mov	r3, r0
 8014020:	2b00      	cmp	r3, #0
 8014022:	d001      	beq.n	8014028 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014024:	f7ec fadc 	bl	80005e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014028:	f7f0 fb7e 	bl	8004728 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801402c:	bf00      	nop
 801402e:	bd80      	pop	{r7, pc}
 8014030:	240000e4 	.word	0x240000e4
 8014034:	24000828 	.word	0x24000828
 8014038:	24000024 	.word	0x24000024
 801403c:	24000138 	.word	0x24000138

08014040 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014040:	b480      	push	{r7}
 8014042:	b083      	sub	sp, #12
 8014044:	af00      	add	r7, sp, #0
 8014046:	4603      	mov	r3, r0
 8014048:	6039      	str	r1, [r7, #0]
 801404a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	2212      	movs	r2, #18
 8014050:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014052:	4b03      	ldr	r3, [pc, #12]	; (8014060 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014054:	4618      	mov	r0, r3
 8014056:	370c      	adds	r7, #12
 8014058:	46bd      	mov	sp, r7
 801405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405e:	4770      	bx	lr
 8014060:	24000104 	.word	0x24000104

08014064 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014064:	b480      	push	{r7}
 8014066:	b083      	sub	sp, #12
 8014068:	af00      	add	r7, sp, #0
 801406a:	4603      	mov	r3, r0
 801406c:	6039      	str	r1, [r7, #0]
 801406e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	2204      	movs	r2, #4
 8014074:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014076:	4b03      	ldr	r3, [pc, #12]	; (8014084 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014078:	4618      	mov	r0, r3
 801407a:	370c      	adds	r7, #12
 801407c:	46bd      	mov	sp, r7
 801407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014082:	4770      	bx	lr
 8014084:	24000118 	.word	0x24000118

08014088 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b082      	sub	sp, #8
 801408c:	af00      	add	r7, sp, #0
 801408e:	4603      	mov	r3, r0
 8014090:	6039      	str	r1, [r7, #0]
 8014092:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014094:	79fb      	ldrb	r3, [r7, #7]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d105      	bne.n	80140a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801409a:	683a      	ldr	r2, [r7, #0]
 801409c:	4907      	ldr	r1, [pc, #28]	; (80140bc <USBD_FS_ProductStrDescriptor+0x34>)
 801409e:	4808      	ldr	r0, [pc, #32]	; (80140c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80140a0:	f7fb fe8c 	bl	800fdbc <USBD_GetString>
 80140a4:	e004      	b.n	80140b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80140a6:	683a      	ldr	r2, [r7, #0]
 80140a8:	4904      	ldr	r1, [pc, #16]	; (80140bc <USBD_FS_ProductStrDescriptor+0x34>)
 80140aa:	4805      	ldr	r0, [pc, #20]	; (80140c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80140ac:	f7fb fe86 	bl	800fdbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80140b0:	4b02      	ldr	r3, [pc, #8]	; (80140bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3708      	adds	r7, #8
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	bf00      	nop
 80140bc:	24000b04 	.word	0x24000b04
 80140c0:	08014b08 	.word	0x08014b08

080140c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	4603      	mov	r3, r0
 80140cc:	6039      	str	r1, [r7, #0]
 80140ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80140d0:	683a      	ldr	r2, [r7, #0]
 80140d2:	4904      	ldr	r1, [pc, #16]	; (80140e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80140d4:	4804      	ldr	r0, [pc, #16]	; (80140e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80140d6:	f7fb fe71 	bl	800fdbc <USBD_GetString>
  return USBD_StrDesc;
 80140da:	4b02      	ldr	r3, [pc, #8]	; (80140e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3708      	adds	r7, #8
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}
 80140e4:	24000b04 	.word	0x24000b04
 80140e8:	08014b1c 	.word	0x08014b1c

080140ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	4603      	mov	r3, r0
 80140f4:	6039      	str	r1, [r7, #0]
 80140f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	221a      	movs	r2, #26
 80140fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80140fe:	f000 f843 	bl	8014188 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014102:	4b02      	ldr	r3, [pc, #8]	; (801410c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014104:	4618      	mov	r0, r3
 8014106:	3708      	adds	r7, #8
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}
 801410c:	2400011c 	.word	0x2400011c

08014110 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	4603      	mov	r3, r0
 8014118:	6039      	str	r1, [r7, #0]
 801411a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801411c:	79fb      	ldrb	r3, [r7, #7]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d105      	bne.n	801412e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014122:	683a      	ldr	r2, [r7, #0]
 8014124:	4907      	ldr	r1, [pc, #28]	; (8014144 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014126:	4808      	ldr	r0, [pc, #32]	; (8014148 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014128:	f7fb fe48 	bl	800fdbc <USBD_GetString>
 801412c:	e004      	b.n	8014138 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801412e:	683a      	ldr	r2, [r7, #0]
 8014130:	4904      	ldr	r1, [pc, #16]	; (8014144 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014132:	4805      	ldr	r0, [pc, #20]	; (8014148 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014134:	f7fb fe42 	bl	800fdbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8014138:	4b02      	ldr	r3, [pc, #8]	; (8014144 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801413a:	4618      	mov	r0, r3
 801413c:	3708      	adds	r7, #8
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	24000b04 	.word	0x24000b04
 8014148:	08014b30 	.word	0x08014b30

0801414c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
 8014152:	4603      	mov	r3, r0
 8014154:	6039      	str	r1, [r7, #0]
 8014156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014158:	79fb      	ldrb	r3, [r7, #7]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d105      	bne.n	801416a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801415e:	683a      	ldr	r2, [r7, #0]
 8014160:	4907      	ldr	r1, [pc, #28]	; (8014180 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014162:	4808      	ldr	r0, [pc, #32]	; (8014184 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014164:	f7fb fe2a 	bl	800fdbc <USBD_GetString>
 8014168:	e004      	b.n	8014174 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801416a:	683a      	ldr	r2, [r7, #0]
 801416c:	4904      	ldr	r1, [pc, #16]	; (8014180 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801416e:	4805      	ldr	r0, [pc, #20]	; (8014184 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014170:	f7fb fe24 	bl	800fdbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8014174:	4b02      	ldr	r3, [pc, #8]	; (8014180 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014176:	4618      	mov	r0, r3
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	24000b04 	.word	0x24000b04
 8014184:	08014b3c 	.word	0x08014b3c

08014188 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b084      	sub	sp, #16
 801418c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801418e:	4b0f      	ldr	r3, [pc, #60]	; (80141cc <Get_SerialNum+0x44>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014194:	4b0e      	ldr	r3, [pc, #56]	; (80141d0 <Get_SerialNum+0x48>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801419a:	4b0e      	ldr	r3, [pc, #56]	; (80141d4 <Get_SerialNum+0x4c>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80141a0:	68fa      	ldr	r2, [r7, #12]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	4413      	add	r3, r2
 80141a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d009      	beq.n	80141c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80141ae:	2208      	movs	r2, #8
 80141b0:	4909      	ldr	r1, [pc, #36]	; (80141d8 <Get_SerialNum+0x50>)
 80141b2:	68f8      	ldr	r0, [r7, #12]
 80141b4:	f000 f814 	bl	80141e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80141b8:	2204      	movs	r2, #4
 80141ba:	4908      	ldr	r1, [pc, #32]	; (80141dc <Get_SerialNum+0x54>)
 80141bc:	68b8      	ldr	r0, [r7, #8]
 80141be:	f000 f80f 	bl	80141e0 <IntToUnicode>
  }
}
 80141c2:	bf00      	nop
 80141c4:	3710      	adds	r7, #16
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}
 80141ca:	bf00      	nop
 80141cc:	1ff1e800 	.word	0x1ff1e800
 80141d0:	1ff1e804 	.word	0x1ff1e804
 80141d4:	1ff1e808 	.word	0x1ff1e808
 80141d8:	2400011e 	.word	0x2400011e
 80141dc:	2400012e 	.word	0x2400012e

080141e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80141e0:	b480      	push	{r7}
 80141e2:	b087      	sub	sp, #28
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	4613      	mov	r3, r2
 80141ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80141ee:	2300      	movs	r3, #0
 80141f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80141f2:	2300      	movs	r3, #0
 80141f4:	75fb      	strb	r3, [r7, #23]
 80141f6:	e027      	b.n	8014248 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	0f1b      	lsrs	r3, r3, #28
 80141fc:	2b09      	cmp	r3, #9
 80141fe:	d80b      	bhi.n	8014218 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	0f1b      	lsrs	r3, r3, #28
 8014204:	b2da      	uxtb	r2, r3
 8014206:	7dfb      	ldrb	r3, [r7, #23]
 8014208:	005b      	lsls	r3, r3, #1
 801420a:	4619      	mov	r1, r3
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	440b      	add	r3, r1
 8014210:	3230      	adds	r2, #48	; 0x30
 8014212:	b2d2      	uxtb	r2, r2
 8014214:	701a      	strb	r2, [r3, #0]
 8014216:	e00a      	b.n	801422e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	0f1b      	lsrs	r3, r3, #28
 801421c:	b2da      	uxtb	r2, r3
 801421e:	7dfb      	ldrb	r3, [r7, #23]
 8014220:	005b      	lsls	r3, r3, #1
 8014222:	4619      	mov	r1, r3
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	440b      	add	r3, r1
 8014228:	3237      	adds	r2, #55	; 0x37
 801422a:	b2d2      	uxtb	r2, r2
 801422c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	011b      	lsls	r3, r3, #4
 8014232:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014234:	7dfb      	ldrb	r3, [r7, #23]
 8014236:	005b      	lsls	r3, r3, #1
 8014238:	3301      	adds	r3, #1
 801423a:	68ba      	ldr	r2, [r7, #8]
 801423c:	4413      	add	r3, r2
 801423e:	2200      	movs	r2, #0
 8014240:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014242:	7dfb      	ldrb	r3, [r7, #23]
 8014244:	3301      	adds	r3, #1
 8014246:	75fb      	strb	r3, [r7, #23]
 8014248:	7dfa      	ldrb	r2, [r7, #23]
 801424a:	79fb      	ldrb	r3, [r7, #7]
 801424c:	429a      	cmp	r2, r3
 801424e:	d3d3      	bcc.n	80141f8 <IntToUnicode+0x18>
  }
}
 8014250:	bf00      	nop
 8014252:	bf00      	nop
 8014254:	371c      	adds	r7, #28
 8014256:	46bd      	mov	sp, r7
 8014258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425c:	4770      	bx	lr

0801425e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801425e:	b480      	push	{r7}
 8014260:	b083      	sub	sp, #12
 8014262:	af00      	add	r7, sp, #0
 8014264:	4603      	mov	r3, r0
 8014266:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 //UNUSED(lun);
  return (USBD_OK);
 8014268:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801426a:	4618      	mov	r0, r3
 801426c:	370c      	adds	r7, #12
 801426e:	46bd      	mov	sp, r7
 8014270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014274:	4770      	bx	lr
	...

08014278 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	4603      	mov	r3, r0
 8014280:	60b9      	str	r1, [r7, #8]
 8014282:	607a      	str	r2, [r7, #4]
 8014284:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  //UNUSED(lun);
     SD_GetCardInfo(&SDCardInfo);
 8014286:	4809      	ldr	r0, [pc, #36]	; (80142ac <STORAGE_GetCapacity_FS+0x34>)
 8014288:	f7ff fa86 	bl	8013798 <SD_GetCardInfo>
     *block_num = SDCardInfo.LogBlockNbr - 1;
 801428c:	4b07      	ldr	r3, [pc, #28]	; (80142ac <STORAGE_GetCapacity_FS+0x34>)
 801428e:	699b      	ldr	r3, [r3, #24]
 8014290:	1e5a      	subs	r2, r3, #1
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	601a      	str	r2, [r3, #0]
     *block_size = SDCardInfo.LogBlockSize;
 8014296:	4b05      	ldr	r3, [pc, #20]	; (80142ac <STORAGE_GetCapacity_FS+0x34>)
 8014298:	69db      	ldr	r3, [r3, #28]
 801429a:	b29a      	uxth	r2, r3
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80142a0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3710      	adds	r7, #16
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	24000804 	.word	0x24000804

080142b0 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80142b0:	b480      	push	{r7}
 80142b2:	b083      	sub	sp, #12
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	4603      	mov	r3, r0
 80142b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  //UNUSED(lun);

  return (USBD_OK);
 80142ba:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80142bc:	4618      	mov	r0, r3
 80142be:	370c      	adds	r7, #12
 80142c0:	46bd      	mov	sp, r7
 80142c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c6:	4770      	bx	lr

080142c8 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b083      	sub	sp, #12
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	4603      	mov	r3, r0
 80142d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  //UNUSED(lun);

  return (USBD_OK);
 80142d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr

080142e0 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b086      	sub	sp, #24
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60b9      	str	r1, [r7, #8]
 80142e8:	607a      	str	r2, [r7, #4]
 80142ea:	461a      	mov	r2, r3
 80142ec:	4603      	mov	r3, r0
 80142ee:	73fb      	strb	r3, [r7, #15]
 80142f0:	4613      	mov	r3, r2
 80142f2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t res=0;
 80142f4:	2300      	movs	r3, #0
 80142f6:	75fb      	strb	r3, [r7, #23]
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);

    res=SD_ReadDisk(buf,blk_addr,blk_len);
 80142f8:	89bb      	ldrh	r3, [r7, #12]
 80142fa:	461a      	mov	r2, r3
 80142fc:	6879      	ldr	r1, [r7, #4]
 80142fe:	68b8      	ldr	r0, [r7, #8]
 8014300:	f7ff fa6c 	bl	80137dc <SD_ReadDisk>
 8014304:	4603      	mov	r3, r0
 8014306:	75fb      	strb	r3, [r7, #23]

  return (res);
 8014308:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801430c:	4618      	mov	r0, r3
 801430e:	3718      	adds	r7, #24
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b086      	sub	sp, #24
 8014318:	af00      	add	r7, sp, #0
 801431a:	60b9      	str	r1, [r7, #8]
 801431c:	607a      	str	r2, [r7, #4]
 801431e:	461a      	mov	r2, r3
 8014320:	4603      	mov	r3, r0
 8014322:	73fb      	strb	r3, [r7, #15]
 8014324:	4613      	mov	r3, r2
 8014326:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t res=0;
 8014328:	2300      	movs	r3, #0
 801432a:	75fb      	strb	r3, [r7, #23]
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);

    res=SD_WriteDisk(buf,blk_addr,blk_len);
 801432c:	89bb      	ldrh	r3, [r7, #12]
 801432e:	461a      	mov	r2, r3
 8014330:	6879      	ldr	r1, [r7, #4]
 8014332:	68b8      	ldr	r0, [r7, #8]
 8014334:	f7ff fa88 	bl	8013848 <SD_WriteDisk>
 8014338:	4603      	mov	r3, r0
 801433a:	75fb      	strb	r3, [r7, #23]


  return (res);
 801433c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8014340:	4618      	mov	r0, r3
 8014342:	3718      	adds	r7, #24
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8014348:	b480      	push	{r7}
 801434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801434c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801434e:	4618      	mov	r0, r3
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b0ba      	sub	sp, #232	; 0xe8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014360:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014364:	2200      	movs	r2, #0
 8014366:	601a      	str	r2, [r3, #0]
 8014368:	605a      	str	r2, [r3, #4]
 801436a:	609a      	str	r2, [r3, #8]
 801436c:	60da      	str	r2, [r3, #12]
 801436e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014370:	f107 0310 	add.w	r3, r7, #16
 8014374:	22c0      	movs	r2, #192	; 0xc0
 8014376:	2100      	movs	r1, #0
 8014378:	4618      	mov	r0, r3
 801437a:	f000 fb45 	bl	8014a08 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4a2c      	ldr	r2, [pc, #176]	; (8014434 <HAL_PCD_MspInit+0xdc>)
 8014384:	4293      	cmp	r3, r2
 8014386:	d151      	bne.n	801442c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014388:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801438c:	f04f 0300 	mov.w	r3, #0
 8014390:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8014394:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8014398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801439c:	f107 0310 	add.w	r3, r7, #16
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7f1 f9a1 	bl	80056e8 <HAL_RCCEx_PeriphCLKConfig>
 80143a6:	4603      	mov	r3, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d001      	beq.n	80143b0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80143ac:	f7ec f918 	bl	80005e0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80143b0:	f7f0 f9ba 	bl	8004728 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80143b4:	4b20      	ldr	r3, [pc, #128]	; (8014438 <HAL_PCD_MspInit+0xe0>)
 80143b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80143ba:	4a1f      	ldr	r2, [pc, #124]	; (8014438 <HAL_PCD_MspInit+0xe0>)
 80143bc:	f043 0301 	orr.w	r3, r3, #1
 80143c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80143c4:	4b1c      	ldr	r3, [pc, #112]	; (8014438 <HAL_PCD_MspInit+0xe0>)
 80143c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80143ca:	f003 0301 	and.w	r3, r3, #1
 80143ce:	60fb      	str	r3, [r7, #12]
 80143d0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80143d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80143d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143da:	2302      	movs	r3, #2
 80143dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143e0:	2300      	movs	r3, #0
 80143e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80143e6:	2302      	movs	r3, #2
 80143e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80143ec:	230a      	movs	r3, #10
 80143ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80143f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80143f6:	4619      	mov	r1, r3
 80143f8:	4810      	ldr	r0, [pc, #64]	; (801443c <HAL_PCD_MspInit+0xe4>)
 80143fa:	f7ee fc91 	bl	8002d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80143fe:	4b0e      	ldr	r3, [pc, #56]	; (8014438 <HAL_PCD_MspInit+0xe0>)
 8014400:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014404:	4a0c      	ldr	r2, [pc, #48]	; (8014438 <HAL_PCD_MspInit+0xe0>)
 8014406:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801440a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801440e:	4b0a      	ldr	r3, [pc, #40]	; (8014438 <HAL_PCD_MspInit+0xe0>)
 8014410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014418:	60bb      	str	r3, [r7, #8]
 801441a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 801441c:	2200      	movs	r2, #0
 801441e:	2102      	movs	r1, #2
 8014420:	2065      	movs	r0, #101	; 0x65
 8014422:	f7ec fd40 	bl	8000ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014426:	2065      	movs	r0, #101	; 0x65
 8014428:	f7ec fd57 	bl	8000eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801442c:	bf00      	nop
 801442e:	37e8      	adds	r7, #232	; 0xe8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}
 8014434:	40080000 	.word	0x40080000
 8014438:	58024400 	.word	0x58024400
 801443c:	58020000 	.word	0x58020000

08014440 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8014454:	4619      	mov	r1, r3
 8014456:	4610      	mov	r0, r2
 8014458:	f7fa fb20 	bl	800ea9c <USBD_LL_SetupStage>
}
 801445c:	bf00      	nop
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b082      	sub	sp, #8
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	460b      	mov	r3, r1
 801446e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014476:	78fa      	ldrb	r2, [r7, #3]
 8014478:	6879      	ldr	r1, [r7, #4]
 801447a:	4613      	mov	r3, r2
 801447c:	00db      	lsls	r3, r3, #3
 801447e:	4413      	add	r3, r2
 8014480:	009b      	lsls	r3, r3, #2
 8014482:	440b      	add	r3, r1
 8014484:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	78fb      	ldrb	r3, [r7, #3]
 801448c:	4619      	mov	r1, r3
 801448e:	f7fa fb5a 	bl	800eb46 <USBD_LL_DataOutStage>
}
 8014492:	bf00      	nop
 8014494:	3708      	adds	r7, #8
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}

0801449a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801449a:	b580      	push	{r7, lr}
 801449c:	b082      	sub	sp, #8
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
 80144a2:	460b      	mov	r3, r1
 80144a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80144ac:	78fa      	ldrb	r2, [r7, #3]
 80144ae:	6879      	ldr	r1, [r7, #4]
 80144b0:	4613      	mov	r3, r2
 80144b2:	00db      	lsls	r3, r3, #3
 80144b4:	4413      	add	r3, r2
 80144b6:	009b      	lsls	r3, r3, #2
 80144b8:	440b      	add	r3, r1
 80144ba:	3348      	adds	r3, #72	; 0x48
 80144bc:	681a      	ldr	r2, [r3, #0]
 80144be:	78fb      	ldrb	r3, [r7, #3]
 80144c0:	4619      	mov	r1, r3
 80144c2:	f7fa fbf3 	bl	800ecac <USBD_LL_DataInStage>
}
 80144c6:	bf00      	nop
 80144c8:	3708      	adds	r7, #8
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}

080144ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144ce:	b580      	push	{r7, lr}
 80144d0:	b082      	sub	sp, #8
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80144dc:	4618      	mov	r0, r3
 80144de:	f7fa fd2d 	bl	800ef3c <USBD_LL_SOF>
}
 80144e2:	bf00      	nop
 80144e4:	3708      	adds	r7, #8
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}

080144ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144ea:	b580      	push	{r7, lr}
 80144ec:	b084      	sub	sp, #16
 80144ee:	af00      	add	r7, sp, #0
 80144f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80144f2:	2301      	movs	r3, #1
 80144f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	691b      	ldr	r3, [r3, #16]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d102      	bne.n	8014504 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80144fe:	2300      	movs	r3, #0
 8014500:	73fb      	strb	r3, [r7, #15]
 8014502:	e008      	b.n	8014516 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	691b      	ldr	r3, [r3, #16]
 8014508:	2b02      	cmp	r3, #2
 801450a:	d102      	bne.n	8014512 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801450c:	2301      	movs	r3, #1
 801450e:	73fb      	strb	r3, [r7, #15]
 8014510:	e001      	b.n	8014516 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014512:	f7ec f865 	bl	80005e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801451c:	7bfa      	ldrb	r2, [r7, #15]
 801451e:	4611      	mov	r1, r2
 8014520:	4618      	mov	r0, r3
 8014522:	f7fa fcc7 	bl	800eeb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801452c:	4618      	mov	r0, r3
 801452e:	f7fa fc6f 	bl	800ee10 <USBD_LL_Reset>
}
 8014532:	bf00      	nop
 8014534:	3710      	adds	r7, #16
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}
	...

0801453c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b082      	sub	sp, #8
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801454a:	4618      	mov	r0, r3
 801454c:	f7fa fcc2 	bl	800eed4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	6812      	ldr	r2, [r2, #0]
 801455e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014562:	f043 0301 	orr.w	r3, r3, #1
 8014566:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6a1b      	ldr	r3, [r3, #32]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d005      	beq.n	801457c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014570:	4b04      	ldr	r3, [pc, #16]	; (8014584 <HAL_PCD_SuspendCallback+0x48>)
 8014572:	691b      	ldr	r3, [r3, #16]
 8014574:	4a03      	ldr	r2, [pc, #12]	; (8014584 <HAL_PCD_SuspendCallback+0x48>)
 8014576:	f043 0306 	orr.w	r3, r3, #6
 801457a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801457c:	bf00      	nop
 801457e:	3708      	adds	r7, #8
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}
 8014584:	e000ed00 	.word	0xe000ed00

08014588 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b082      	sub	sp, #8
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014596:	4618      	mov	r0, r3
 8014598:	f7fa fcb8 	bl	800ef0c <USBD_LL_Resume>
}
 801459c:	bf00      	nop
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	460b      	mov	r3, r1
 80145ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80145b6:	78fa      	ldrb	r2, [r7, #3]
 80145b8:	4611      	mov	r1, r2
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7fa fd10 	bl	800efe0 <USBD_LL_IsoOUTIncomplete>
}
 80145c0:	bf00      	nop
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}

080145c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	460b      	mov	r3, r1
 80145d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80145da:	78fa      	ldrb	r2, [r7, #3]
 80145dc:	4611      	mov	r1, r2
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fa fccc 	bl	800ef7c <USBD_LL_IsoINIncomplete>
}
 80145e4:	bf00      	nop
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b082      	sub	sp, #8
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7fa fd22 	bl	800f044 <USBD_LL_DevConnected>
}
 8014600:	bf00      	nop
 8014602:	3708      	adds	r7, #8
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}

08014608 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014616:	4618      	mov	r0, r3
 8014618:	f7fa fd1f 	bl	800f05a <USBD_LL_DevDisconnected>
}
 801461c:	bf00      	nop
 801461e:	3708      	adds	r7, #8
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d13e      	bne.n	80146b2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014634:	4a21      	ldr	r2, [pc, #132]	; (80146bc <USBD_LL_Init+0x98>)
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	4a1f      	ldr	r2, [pc, #124]	; (80146bc <USBD_LL_Init+0x98>)
 8014640:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014644:	4b1d      	ldr	r3, [pc, #116]	; (80146bc <USBD_LL_Init+0x98>)
 8014646:	4a1e      	ldr	r2, [pc, #120]	; (80146c0 <USBD_LL_Init+0x9c>)
 8014648:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801464a:	4b1c      	ldr	r3, [pc, #112]	; (80146bc <USBD_LL_Init+0x98>)
 801464c:	2209      	movs	r2, #9
 801464e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014650:	4b1a      	ldr	r3, [pc, #104]	; (80146bc <USBD_LL_Init+0x98>)
 8014652:	2202      	movs	r2, #2
 8014654:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014656:	4b19      	ldr	r3, [pc, #100]	; (80146bc <USBD_LL_Init+0x98>)
 8014658:	2200      	movs	r2, #0
 801465a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801465c:	4b17      	ldr	r3, [pc, #92]	; (80146bc <USBD_LL_Init+0x98>)
 801465e:	2202      	movs	r2, #2
 8014660:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014662:	4b16      	ldr	r3, [pc, #88]	; (80146bc <USBD_LL_Init+0x98>)
 8014664:	2200      	movs	r2, #0
 8014666:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014668:	4b14      	ldr	r3, [pc, #80]	; (80146bc <USBD_LL_Init+0x98>)
 801466a:	2200      	movs	r2, #0
 801466c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801466e:	4b13      	ldr	r3, [pc, #76]	; (80146bc <USBD_LL_Init+0x98>)
 8014670:	2200      	movs	r2, #0
 8014672:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014674:	4b11      	ldr	r3, [pc, #68]	; (80146bc <USBD_LL_Init+0x98>)
 8014676:	2200      	movs	r2, #0
 8014678:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801467a:	4b10      	ldr	r3, [pc, #64]	; (80146bc <USBD_LL_Init+0x98>)
 801467c:	2200      	movs	r2, #0
 801467e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014680:	4b0e      	ldr	r3, [pc, #56]	; (80146bc <USBD_LL_Init+0x98>)
 8014682:	2200      	movs	r2, #0
 8014684:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014686:	480d      	ldr	r0, [pc, #52]	; (80146bc <USBD_LL_Init+0x98>)
 8014688:	f7ee fd2d 	bl	80030e6 <HAL_PCD_Init>
 801468c:	4603      	mov	r3, r0
 801468e:	2b00      	cmp	r3, #0
 8014690:	d001      	beq.n	8014696 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8014692:	f7eb ffa5 	bl	80005e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014696:	2180      	movs	r1, #128	; 0x80
 8014698:	4808      	ldr	r0, [pc, #32]	; (80146bc <USBD_LL_Init+0x98>)
 801469a:	f7ef ffca 	bl	8004632 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801469e:	2240      	movs	r2, #64	; 0x40
 80146a0:	2100      	movs	r1, #0
 80146a2:	4806      	ldr	r0, [pc, #24]	; (80146bc <USBD_LL_Init+0x98>)
 80146a4:	f7ef ff7e 	bl	80045a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80146a8:	2280      	movs	r2, #128	; 0x80
 80146aa:	2101      	movs	r1, #1
 80146ac:	4803      	ldr	r0, [pc, #12]	; (80146bc <USBD_LL_Init+0x98>)
 80146ae:	f7ef ff79 	bl	80045a4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80146b2:	2300      	movs	r3, #0
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	3708      	adds	r7, #8
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}
 80146bc:	24000d04 	.word	0x24000d04
 80146c0:	40080000 	.word	0x40080000

080146c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146cc:	2300      	movs	r3, #0
 80146ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146d0:	2300      	movs	r3, #0
 80146d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80146da:	4618      	mov	r0, r3
 80146dc:	f7ee fe27 	bl	800332e <HAL_PCD_Start>
 80146e0:	4603      	mov	r3, r0
 80146e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80146e4:	7bfb      	ldrb	r3, [r7, #15]
 80146e6:	4618      	mov	r0, r3
 80146e8:	f000 f962 	bl	80149b0 <USBD_Get_USB_Status>
 80146ec:	4603      	mov	r3, r0
 80146ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80146f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}

080146fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80146fa:	b580      	push	{r7, lr}
 80146fc:	b084      	sub	sp, #16
 80146fe:	af00      	add	r7, sp, #0
 8014700:	6078      	str	r0, [r7, #4]
 8014702:	4608      	mov	r0, r1
 8014704:	4611      	mov	r1, r2
 8014706:	461a      	mov	r2, r3
 8014708:	4603      	mov	r3, r0
 801470a:	70fb      	strb	r3, [r7, #3]
 801470c:	460b      	mov	r3, r1
 801470e:	70bb      	strb	r3, [r7, #2]
 8014710:	4613      	mov	r3, r2
 8014712:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014714:	2300      	movs	r3, #0
 8014716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014718:	2300      	movs	r3, #0
 801471a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014722:	78bb      	ldrb	r3, [r7, #2]
 8014724:	883a      	ldrh	r2, [r7, #0]
 8014726:	78f9      	ldrb	r1, [r7, #3]
 8014728:	f7ef fb27 	bl	8003d7a <HAL_PCD_EP_Open>
 801472c:	4603      	mov	r3, r0
 801472e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014730:	7bfb      	ldrb	r3, [r7, #15]
 8014732:	4618      	mov	r0, r3
 8014734:	f000 f93c 	bl	80149b0 <USBD_Get_USB_Status>
 8014738:	4603      	mov	r3, r0
 801473a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801473c:	7bbb      	ldrb	r3, [r7, #14]
}
 801473e:	4618      	mov	r0, r3
 8014740:	3710      	adds	r7, #16
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}

08014746 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014746:	b580      	push	{r7, lr}
 8014748:	b084      	sub	sp, #16
 801474a:	af00      	add	r7, sp, #0
 801474c:	6078      	str	r0, [r7, #4]
 801474e:	460b      	mov	r3, r1
 8014750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014752:	2300      	movs	r3, #0
 8014754:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014756:	2300      	movs	r3, #0
 8014758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014760:	78fa      	ldrb	r2, [r7, #3]
 8014762:	4611      	mov	r1, r2
 8014764:	4618      	mov	r0, r3
 8014766:	f7ef fb70 	bl	8003e4a <HAL_PCD_EP_Close>
 801476a:	4603      	mov	r3, r0
 801476c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801476e:	7bfb      	ldrb	r3, [r7, #15]
 8014770:	4618      	mov	r0, r3
 8014772:	f000 f91d 	bl	80149b0 <USBD_Get_USB_Status>
 8014776:	4603      	mov	r3, r0
 8014778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801477a:	7bbb      	ldrb	r3, [r7, #14]
}
 801477c:	4618      	mov	r0, r3
 801477e:	3710      	adds	r7, #16
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b084      	sub	sp, #16
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
 801478c:	460b      	mov	r3, r1
 801478e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014790:	2300      	movs	r3, #0
 8014792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014794:	2300      	movs	r3, #0
 8014796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801479e:	78fa      	ldrb	r2, [r7, #3]
 80147a0:	4611      	mov	r1, r2
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7ef fd15 	bl	80041d2 <HAL_PCD_EP_Flush>
 80147a8:	4603      	mov	r3, r0
 80147aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80147ac:	7bfb      	ldrb	r3, [r7, #15]
 80147ae:	4618      	mov	r0, r3
 80147b0:	f000 f8fe 	bl	80149b0 <USBD_Get_USB_Status>
 80147b4:	4603      	mov	r3, r0
 80147b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80147b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3710      	adds	r7, #16
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}

080147c2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80147c2:	b580      	push	{r7, lr}
 80147c4:	b084      	sub	sp, #16
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	6078      	str	r0, [r7, #4]
 80147ca:	460b      	mov	r3, r1
 80147cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80147ce:	2300      	movs	r3, #0
 80147d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147d2:	2300      	movs	r3, #0
 80147d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80147dc:	78fa      	ldrb	r2, [r7, #3]
 80147de:	4611      	mov	r1, r2
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7ef fc0b 	bl	8003ffc <HAL_PCD_EP_SetStall>
 80147e6:	4603      	mov	r3, r0
 80147e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80147ea:	7bfb      	ldrb	r3, [r7, #15]
 80147ec:	4618      	mov	r0, r3
 80147ee:	f000 f8df 	bl	80149b0 <USBD_Get_USB_Status>
 80147f2:	4603      	mov	r3, r0
 80147f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80147f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80147f8:	4618      	mov	r0, r3
 80147fa:	3710      	adds	r7, #16
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}

08014800 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b084      	sub	sp, #16
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	460b      	mov	r3, r1
 801480a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801480c:	2300      	movs	r3, #0
 801480e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014810:	2300      	movs	r3, #0
 8014812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801481a:	78fa      	ldrb	r2, [r7, #3]
 801481c:	4611      	mov	r1, r2
 801481e:	4618      	mov	r0, r3
 8014820:	f7ef fc50 	bl	80040c4 <HAL_PCD_EP_ClrStall>
 8014824:	4603      	mov	r3, r0
 8014826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014828:	7bfb      	ldrb	r3, [r7, #15]
 801482a:	4618      	mov	r0, r3
 801482c:	f000 f8c0 	bl	80149b0 <USBD_Get_USB_Status>
 8014830:	4603      	mov	r3, r0
 8014832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014834:	7bbb      	ldrb	r3, [r7, #14]
}
 8014836:	4618      	mov	r0, r3
 8014838:	3710      	adds	r7, #16
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}

0801483e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801483e:	b480      	push	{r7}
 8014840:	b085      	sub	sp, #20
 8014842:	af00      	add	r7, sp, #0
 8014844:	6078      	str	r0, [r7, #4]
 8014846:	460b      	mov	r3, r1
 8014848:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014850:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014856:	2b00      	cmp	r3, #0
 8014858:	da0b      	bge.n	8014872 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801485a:	78fb      	ldrb	r3, [r7, #3]
 801485c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014860:	68f9      	ldr	r1, [r7, #12]
 8014862:	4613      	mov	r3, r2
 8014864:	00db      	lsls	r3, r3, #3
 8014866:	4413      	add	r3, r2
 8014868:	009b      	lsls	r3, r3, #2
 801486a:	440b      	add	r3, r1
 801486c:	333e      	adds	r3, #62	; 0x3e
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	e00b      	b.n	801488a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014872:	78fb      	ldrb	r3, [r7, #3]
 8014874:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014878:	68f9      	ldr	r1, [r7, #12]
 801487a:	4613      	mov	r3, r2
 801487c:	00db      	lsls	r3, r3, #3
 801487e:	4413      	add	r3, r2
 8014880:	009b      	lsls	r3, r3, #2
 8014882:	440b      	add	r3, r1
 8014884:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8014888:	781b      	ldrb	r3, [r3, #0]
  }
}
 801488a:	4618      	mov	r0, r3
 801488c:	3714      	adds	r7, #20
 801488e:	46bd      	mov	sp, r7
 8014890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014894:	4770      	bx	lr

08014896 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014896:	b580      	push	{r7, lr}
 8014898:	b084      	sub	sp, #16
 801489a:	af00      	add	r7, sp, #0
 801489c:	6078      	str	r0, [r7, #4]
 801489e:	460b      	mov	r3, r1
 80148a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148a2:	2300      	movs	r3, #0
 80148a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80148a6:	2300      	movs	r3, #0
 80148a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80148b0:	78fa      	ldrb	r2, [r7, #3]
 80148b2:	4611      	mov	r1, r2
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7ef fa3b 	bl	8003d30 <HAL_PCD_SetAddress>
 80148ba:	4603      	mov	r3, r0
 80148bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80148be:	7bfb      	ldrb	r3, [r7, #15]
 80148c0:	4618      	mov	r0, r3
 80148c2:	f000 f875 	bl	80149b0 <USBD_Get_USB_Status>
 80148c6:	4603      	mov	r3, r0
 80148c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80148ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80148cc:	4618      	mov	r0, r3
 80148ce:	3710      	adds	r7, #16
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b086      	sub	sp, #24
 80148d8:	af00      	add	r7, sp, #0
 80148da:	60f8      	str	r0, [r7, #12]
 80148dc:	607a      	str	r2, [r7, #4]
 80148de:	603b      	str	r3, [r7, #0]
 80148e0:	460b      	mov	r3, r1
 80148e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148e4:	2300      	movs	r3, #0
 80148e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80148e8:	2300      	movs	r3, #0
 80148ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80148f2:	7af9      	ldrb	r1, [r7, #11]
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	687a      	ldr	r2, [r7, #4]
 80148f8:	f7ef fb45 	bl	8003f86 <HAL_PCD_EP_Transmit>
 80148fc:	4603      	mov	r3, r0
 80148fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014900:	7dfb      	ldrb	r3, [r7, #23]
 8014902:	4618      	mov	r0, r3
 8014904:	f000 f854 	bl	80149b0 <USBD_Get_USB_Status>
 8014908:	4603      	mov	r3, r0
 801490a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801490c:	7dbb      	ldrb	r3, [r7, #22]
}
 801490e:	4618      	mov	r0, r3
 8014910:	3718      	adds	r7, #24
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}

08014916 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014916:	b580      	push	{r7, lr}
 8014918:	b086      	sub	sp, #24
 801491a:	af00      	add	r7, sp, #0
 801491c:	60f8      	str	r0, [r7, #12]
 801491e:	607a      	str	r2, [r7, #4]
 8014920:	603b      	str	r3, [r7, #0]
 8014922:	460b      	mov	r3, r1
 8014924:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014926:	2300      	movs	r3, #0
 8014928:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801492a:	2300      	movs	r3, #0
 801492c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014934:	7af9      	ldrb	r1, [r7, #11]
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	687a      	ldr	r2, [r7, #4]
 801493a:	f7ef fad0 	bl	8003ede <HAL_PCD_EP_Receive>
 801493e:	4603      	mov	r3, r0
 8014940:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014942:	7dfb      	ldrb	r3, [r7, #23]
 8014944:	4618      	mov	r0, r3
 8014946:	f000 f833 	bl	80149b0 <USBD_Get_USB_Status>
 801494a:	4603      	mov	r3, r0
 801494c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801494e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014950:	4618      	mov	r0, r3
 8014952:	3718      	adds	r7, #24
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b082      	sub	sp, #8
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	460b      	mov	r3, r1
 8014962:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801496a:	78fa      	ldrb	r2, [r7, #3]
 801496c:	4611      	mov	r1, r2
 801496e:	4618      	mov	r0, r3
 8014970:	f7ef faf1 	bl	8003f56 <HAL_PCD_EP_GetRxCount>
 8014974:	4603      	mov	r3, r0
}
 8014976:	4618      	mov	r0, r3
 8014978:	3708      	adds	r7, #8
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
	...

08014980 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014980:	b480      	push	{r7}
 8014982:	b083      	sub	sp, #12
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014988:	4b03      	ldr	r3, [pc, #12]	; (8014998 <USBD_static_malloc+0x18>)
}
 801498a:	4618      	mov	r0, r3
 801498c:	370c      	adds	r7, #12
 801498e:	46bd      	mov	sp, r7
 8014990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014994:	4770      	bx	lr
 8014996:	bf00      	nop
 8014998:	24001210 	.word	0x24001210

0801499c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801499c:	b480      	push	{r7}
 801499e:	b083      	sub	sp, #12
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80149a4:	bf00      	nop
 80149a6:	370c      	adds	r7, #12
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr

080149b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80149b0:	b480      	push	{r7}
 80149b2:	b085      	sub	sp, #20
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	4603      	mov	r3, r0
 80149b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149ba:	2300      	movs	r3, #0
 80149bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80149be:	79fb      	ldrb	r3, [r7, #7]
 80149c0:	2b03      	cmp	r3, #3
 80149c2:	d817      	bhi.n	80149f4 <USBD_Get_USB_Status+0x44>
 80149c4:	a201      	add	r2, pc, #4	; (adr r2, 80149cc <USBD_Get_USB_Status+0x1c>)
 80149c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149ca:	bf00      	nop
 80149cc:	080149dd 	.word	0x080149dd
 80149d0:	080149e3 	.word	0x080149e3
 80149d4:	080149e9 	.word	0x080149e9
 80149d8:	080149ef 	.word	0x080149ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80149dc:	2300      	movs	r3, #0
 80149de:	73fb      	strb	r3, [r7, #15]
    break;
 80149e0:	e00b      	b.n	80149fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80149e2:	2303      	movs	r3, #3
 80149e4:	73fb      	strb	r3, [r7, #15]
    break;
 80149e6:	e008      	b.n	80149fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80149e8:	2301      	movs	r3, #1
 80149ea:	73fb      	strb	r3, [r7, #15]
    break;
 80149ec:	e005      	b.n	80149fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80149ee:	2303      	movs	r3, #3
 80149f0:	73fb      	strb	r3, [r7, #15]
    break;
 80149f2:	e002      	b.n	80149fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80149f4:	2303      	movs	r3, #3
 80149f6:	73fb      	strb	r3, [r7, #15]
    break;
 80149f8:	bf00      	nop
  }
  return usb_status;
 80149fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	3714      	adds	r7, #20
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr

08014a08 <memset>:
 8014a08:	4402      	add	r2, r0
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	4293      	cmp	r3, r2
 8014a0e:	d100      	bne.n	8014a12 <memset+0xa>
 8014a10:	4770      	bx	lr
 8014a12:	f803 1b01 	strb.w	r1, [r3], #1
 8014a16:	e7f9      	b.n	8014a0c <memset+0x4>

08014a18 <__libc_init_array>:
 8014a18:	b570      	push	{r4, r5, r6, lr}
 8014a1a:	4d0d      	ldr	r5, [pc, #52]	; (8014a50 <__libc_init_array+0x38>)
 8014a1c:	4c0d      	ldr	r4, [pc, #52]	; (8014a54 <__libc_init_array+0x3c>)
 8014a1e:	1b64      	subs	r4, r4, r5
 8014a20:	10a4      	asrs	r4, r4, #2
 8014a22:	2600      	movs	r6, #0
 8014a24:	42a6      	cmp	r6, r4
 8014a26:	d109      	bne.n	8014a3c <__libc_init_array+0x24>
 8014a28:	4d0b      	ldr	r5, [pc, #44]	; (8014a58 <__libc_init_array+0x40>)
 8014a2a:	4c0c      	ldr	r4, [pc, #48]	; (8014a5c <__libc_init_array+0x44>)
 8014a2c:	f000 f818 	bl	8014a60 <_init>
 8014a30:	1b64      	subs	r4, r4, r5
 8014a32:	10a4      	asrs	r4, r4, #2
 8014a34:	2600      	movs	r6, #0
 8014a36:	42a6      	cmp	r6, r4
 8014a38:	d105      	bne.n	8014a46 <__libc_init_array+0x2e>
 8014a3a:	bd70      	pop	{r4, r5, r6, pc}
 8014a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a40:	4798      	blx	r3
 8014a42:	3601      	adds	r6, #1
 8014a44:	e7ee      	b.n	8014a24 <__libc_init_array+0xc>
 8014a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a4a:	4798      	blx	r3
 8014a4c:	3601      	adds	r6, #1
 8014a4e:	e7f2      	b.n	8014a36 <__libc_init_array+0x1e>
 8014a50:	08043ea0 	.word	0x08043ea0
 8014a54:	08043ea0 	.word	0x08043ea0
 8014a58:	08043ea0 	.word	0x08043ea0
 8014a5c:	08043ea4 	.word	0x08043ea4

08014a60 <_init>:
 8014a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a62:	bf00      	nop
 8014a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a66:	bc08      	pop	{r3}
 8014a68:	469e      	mov	lr, r3
 8014a6a:	4770      	bx	lr

08014a6c <_fini>:
 8014a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a6e:	bf00      	nop
 8014a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a72:	bc08      	pop	{r3}
 8014a74:	469e      	mov	lr, r3
 8014a76:	4770      	bx	lr
