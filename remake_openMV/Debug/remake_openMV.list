
remake_openMV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016708  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f47c  080169a8  080169a8  000269a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08045e24  08045e24  00055e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08045e28  08045e28  00055e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000284  24000000  08045e2c  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002308  24000284  080460b0  00060284  2**2
                  ALLOC
  7 ._user_heap_stack 00006004  2400258c  080460b0  0006258c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00060284  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000602b2  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025890  00000000  00000000  000602f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000061b1  00000000  00000000  00085b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b58  00000000  00000000  0008bd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001476  00000000  00000000  0008d890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fbd4  00000000  00000000  0008ed06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f8a2  00000000  00000000  000ce8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001613fe  00000000  00000000  000fe17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000725c  00000000  00000000  0025f57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  002667d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000284 	.word	0x24000284
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016990 	.word	0x08016990

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000288 	.word	0x24000288
 80002dc:	08016990 	.word	0x08016990

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <MX_DMA_Init+0x3c>)
 8000388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800038c:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <MX_DMA_Init+0x3c>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_DMA_Init+0x3c>)
 8000398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	200b      	movs	r0, #11
 80003aa:	f000 fe3e 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80003ae:	200b      	movs	r0, #11
 80003b0:	f000 fe55 	bl	800105e <HAL_NVIC_EnableIRQ>

}
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	58024400 	.word	0x58024400

080003c0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b4f      	ldr	r3, [pc, #316]	; (8000514 <MX_GPIO_Init+0x154>)
 80003d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003dc:	4a4d      	ldr	r2, [pc, #308]	; (8000514 <MX_GPIO_Init+0x154>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e6:	4b4b      	ldr	r3, [pc, #300]	; (8000514 <MX_GPIO_Init+0x154>)
 80003e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	613b      	str	r3, [r7, #16]
 80003f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b47      	ldr	r3, [pc, #284]	; (8000514 <MX_GPIO_Init+0x154>)
 80003f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003fa:	4a46      	ldr	r2, [pc, #280]	; (8000514 <MX_GPIO_Init+0x154>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000404:	4b43      	ldr	r3, [pc, #268]	; (8000514 <MX_GPIO_Init+0x154>)
 8000406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000412:	4b40      	ldr	r3, [pc, #256]	; (8000514 <MX_GPIO_Init+0x154>)
 8000414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000418:	4a3e      	ldr	r2, [pc, #248]	; (8000514 <MX_GPIO_Init+0x154>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000422:	4b3c      	ldr	r3, [pc, #240]	; (8000514 <MX_GPIO_Init+0x154>)
 8000424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000430:	4b38      	ldr	r3, [pc, #224]	; (8000514 <MX_GPIO_Init+0x154>)
 8000432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000436:	4a37      	ldr	r2, [pc, #220]	; (8000514 <MX_GPIO_Init+0x154>)
 8000438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800043c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000440:	4b34      	ldr	r3, [pc, #208]	; (8000514 <MX_GPIO_Init+0x154>)
 8000442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	4b31      	ldr	r3, [pc, #196]	; (8000514 <MX_GPIO_Init+0x154>)
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000454:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <MX_GPIO_Init+0x154>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <MX_GPIO_Init+0x154>)
 8000460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000464:	f003 0302 	and.w	r3, r3, #2
 8000468:	603b      	str	r3, [r7, #0]
 800046a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	2107      	movs	r1, #7
 8000470:	4829      	ldr	r0, [pc, #164]	; (8000518 <MX_GPIO_Init+0x158>)
 8000472:	f002 fec7 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800047c:	4827      	ldr	r0, [pc, #156]	; (800051c <MX_GPIO_Init+0x15c>)
 800047e:	f002 fec1 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2120      	movs	r1, #32
 8000486:	4826      	ldr	r0, [pc, #152]	; (8000520 <MX_GPIO_Init+0x160>)
 8000488:	f002 febc 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000492:	4824      	ldr	r0, [pc, #144]	; (8000524 <MX_GPIO_Init+0x164>)
 8000494:	f002 feb6 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000498:	2307      	movs	r3, #7
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2300      	movs	r3, #0
 80004a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	4619      	mov	r1, r3
 80004ae:	481a      	ldr	r0, [pc, #104]	; (8000518 <MX_GPIO_Init+0x158>)
 80004b0:	f002 fcf8 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RST_Pin;
 80004b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80004b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2300      	movs	r3, #0
 80004c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4619      	mov	r1, r3
 80004cc:	4813      	ldr	r0, [pc, #76]	; (800051c <MX_GPIO_Init+0x15c>)
 80004ce:	f002 fce9 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 80004d2:	2320      	movs	r3, #32
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2300      	movs	r3, #0
 80004e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4619      	mov	r1, r3
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <MX_GPIO_Init+0x160>)
 80004ea:	f002 fcdb 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80004ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2300      	movs	r3, #0
 80004fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <MX_GPIO_Init+0x164>)
 8000508:	f002 fccc 	bl	8002ea4 <HAL_GPIO_Init>

}
 800050c:	bf00      	nop
 800050e:	3728      	adds	r7, #40	; 0x28
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	58024400 	.word	0x58024400
 8000518:	58020800 	.word	0x58020800
 800051c:	58020c00 	.word	0x58020c00
 8000520:	58020000 	.word	0x58020000
 8000524:	58020400 	.word	0x58020400

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fbe0 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f832 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f7ff ff44 	bl	80003c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000538:	f7ff ff22 	bl	8000380 <MX_DMA_Init>
  MX_SPI2_Init();
 800053c:	f000 f994 	bl	8000868 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000540:	f014 ff28 	bl	8015394 <MX_USB_DEVICE_Init>
  MX_SDMMC1_SD_Init();
 8000544:	f000 f8de 	bl	8000704 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000548:	f00c f984 	bl	800c854 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800054c:	f014 fc90 	bl	8014e70 <lcd_init>
  FatFs_read_Check();
 8000550:	f014 fa36 	bl	80149c0 <FatFs_read_Check>
  FatFs_write_Check();
 8000554:	f014 fa7e 	bl	8014a54 <FatFs_write_Check>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
 8000558:	2101      	movs	r1, #1
 800055a:	480d      	ldr	r0, [pc, #52]	; (8000590 <main+0x68>)
 800055c:	f002 fe6b 	bl	8003236 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000564:	f000 fc56 	bl	8000e14 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_G_GPIO_Port,LED_G_Pin);
 8000568:	2102      	movs	r1, #2
 800056a:	4809      	ldr	r0, [pc, #36]	; (8000590 <main+0x68>)
 800056c:	f002 fe63 	bl	8003236 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000574:	f000 fc4e 	bl	8000e14 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);
 8000578:	2104      	movs	r1, #4
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <main+0x68>)
 800057c:	f002 fe5b 	bl	8003236 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000584:	f000 fc46 	bl	8000e14 <HAL_Delay>
	  usb_printf("openmv4 plus board cdc test\r\n");
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <main+0x6c>)
 800058a:	f015 fd0d 	bl	8015fa8 <usb_printf>
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
 800058e:	e7e3      	b.n	8000558 <main+0x30>
 8000590:	58020800 	.word	0x58020800
 8000594:	080169a8 	.word	0x080169a8

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09e      	sub	sp, #120	; 0x78
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005a2:	224c      	movs	r2, #76	; 0x4c
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f015 fe1a 	bl	80161e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2220      	movs	r2, #32
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f015 fe13 	bl	80161e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005ba:	2002      	movs	r0, #2
 80005bc:	f004 f93c 	bl	8004838 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b49      	ldr	r3, [pc, #292]	; (80006ec <SystemClock_Config+0x154>)
 80005c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c8:	4a48      	ldr	r2, [pc, #288]	; (80006ec <SystemClock_Config+0x154>)
 80005ca:	f023 0301 	bic.w	r3, r3, #1
 80005ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005d0:	4b46      	ldr	r3, [pc, #280]	; (80006ec <SystemClock_Config+0x154>)
 80005d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	4b45      	ldr	r3, [pc, #276]	; (80006f0 <SystemClock_Config+0x158>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a44      	ldr	r2, [pc, #272]	; (80006f0 <SystemClock_Config+0x158>)
 80005e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	4b42      	ldr	r3, [pc, #264]	; (80006f0 <SystemClock_Config+0x158>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f2:	bf00      	nop
 80005f4:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <SystemClock_Config+0x158>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000600:	d1f8      	bne.n	80005f4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b3c      	ldr	r3, [pc, #240]	; (80006f4 <SystemClock_Config+0x15c>)
 8000604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000608:	4a3a      	ldr	r2, [pc, #232]	; (80006f4 <SystemClock_Config+0x15c>)
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000612:	4b38      	ldr	r3, [pc, #224]	; (80006f4 <SystemClock_Config+0x15c>)
 8000614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <SystemClock_Config+0x158>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a31      	ldr	r2, [pc, #196]	; (80006f0 <SystemClock_Config+0x158>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <SystemClock_Config+0x158>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <SystemClock_Config+0x154>)
 800063c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063e:	4a2b      	ldr	r2, [pc, #172]	; (80006ec <SystemClock_Config+0x154>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemClock_Config+0x154>)
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000652:	bf00      	nop
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <SystemClock_Config+0x158>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800065c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000660:	d1f8      	bne.n	8000654 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000662:	2321      	movs	r3, #33	; 0x21
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000674:	2302      	movs	r3, #2
 8000676:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000678:	2303      	movs	r3, #3
 800067a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 800067c:	23f0      	movs	r3, #240	; 0xf0
 800067e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800068c:	2308      	movs	r3, #8
 800068e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000690:	2300      	movs	r3, #0
 8000692:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800069c:	4618      	mov	r0, r3
 800069e:	f004 f915 	bl	80048cc <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x114>
  {
    Error_Handler();
 80006a8:	f000 f826 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	233f      	movs	r3, #63	; 0x3f
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2303      	movs	r3, #3
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006b8:	2308      	movs	r3, #8
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006c0:	2340      	movs	r3, #64	; 0x40
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006ca:	2340      	movs	r3, #64	; 0x40
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2104      	movs	r1, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fd53 	bl	8005180 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 80006e0:	f000 f80a 	bl	80006f8 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3778      	adds	r7, #120	; 0x78
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58000400 	.word	0x58000400
 80006f0:	58024800 	.word	0x58024800
 80006f4:	58024400 	.word	0x58024400

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_SDMMC1_SD_Init+0x40>)
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <MX_SDMMC1_SD_Init+0x44>)
 800070c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_SDMMC1_SD_Init+0x40>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_SDMMC1_SD_Init+0x40>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_SDMMC1_SD_Init+0x40>)
 800071c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000720:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_SDMMC1_SD_Init+0x40>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_SDMMC1_SD_Init+0x40>)
 800072a:	2204      	movs	r2, #4
 800072c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_SDMMC1_SD_Init+0x40>)
 8000730:	f007 fd9a 	bl	8008268 <HAL_SD_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800073a:	f7ff ffdd 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	240002a0 	.word	0x240002a0
 8000748:	52007000 	.word	0x52007000

0800074c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b0bc      	sub	sp, #240	; 0xf0
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	22c0      	movs	r2, #192	; 0xc0
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f015 fd37 	bl	80161e0 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a38      	ldr	r2, [pc, #224]	; (8000858 <HAL_SD_MspInit+0x10c>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d169      	bne.n	8000850 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800077c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000788:	2300      	movs	r3, #0
 800078a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800078c:	f107 0318 	add.w	r3, r7, #24
 8000790:	4618      	mov	r0, r3
 8000792:	f005 f86b 	bl	800586c <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800079c:	f7ff ffac 	bl	80006f8 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80007a0:	4b2e      	ldr	r3, [pc, #184]	; (800085c <HAL_SD_MspInit+0x110>)
 80007a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80007a6:	4a2d      	ldr	r2, [pc, #180]	; (800085c <HAL_SD_MspInit+0x110>)
 80007a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ac:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <HAL_SD_MspInit+0x110>)
 80007b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80007b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b27      	ldr	r3, [pc, #156]	; (800085c <HAL_SD_MspInit+0x110>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c4:	4a25      	ldr	r2, [pc, #148]	; (800085c <HAL_SD_MspInit+0x110>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <HAL_SD_MspInit+0x110>)
 80007d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <HAL_SD_MspInit+0x110>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e2:	4a1e      	ldr	r2, [pc, #120]	; (800085c <HAL_SD_MspInit+0x110>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <HAL_SD_MspInit+0x110>)
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80007fa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000814:	230c      	movs	r3, #12
 8000816:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800081e:	4619      	mov	r1, r3
 8000820:	480f      	ldr	r0, [pc, #60]	; (8000860 <HAL_SD_MspInit+0x114>)
 8000822:	f002 fb3f 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000826:	2304      	movs	r3, #4
 8000828:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800083e:	230c      	movs	r3, #12
 8000840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000844:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <HAL_SD_MspInit+0x118>)
 800084c:	f002 fb2a 	bl	8002ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000850:	bf00      	nop
 8000852:	37f0      	adds	r7, #240	; 0xf0
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	52007000 	.word	0x52007000
 800085c:	58024400 	.word	0x58024400
 8000860:	58020800 	.word	0x58020800
 8000864:	58020c00 	.word	0x58020c00

08000868 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <MX_SPI2_Init+0xa8>)
 800086e:	4a29      	ldr	r2, [pc, #164]	; (8000914 <MX_SPI2_Init+0xac>)
 8000870:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000872:	4b27      	ldr	r3, [pc, #156]	; (8000910 <MX_SPI2_Init+0xa8>)
 8000874:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000878:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <MX_SPI2_Init+0xa8>)
 800087c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000880:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_SPI2_Init+0xa8>)
 8000884:	2207      	movs	r2, #7
 8000886:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_SPI2_Init+0xa8>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_SPI2_Init+0xa8>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_SPI2_Init+0xa8>)
 8000896:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800089a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_SPI2_Init+0xa8>)
 800089e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_SPI2_Init+0xa8>)
 80008fc:	f009 f866 	bl	80099cc <HAL_SPI_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000906:	f7ff fef7 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2400031c 	.word	0x2400031c
 8000914:	40003800 	.word	0x40003800

08000918 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0ba      	sub	sp, #232	; 0xe8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	22c0      	movs	r2, #192	; 0xc0
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f015 fc51 	bl	80161e0 <memset>
  if(spiHandle->Instance==SPI2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a41      	ldr	r2, [pc, #260]	; (8000a48 <HAL_SPI_MspInit+0x130>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d17a      	bne.n	8000a3e <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800094c:	f04f 0300 	mov.w	r3, #0
 8000950:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000954:	2300      	movs	r3, #0
 8000956:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4618      	mov	r0, r3
 800095e:	f004 ff85 	bl	800586c <HAL_RCCEx_PeriphCLKConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000968:	f7ff fec6 	bl	80006f8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800096c:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <HAL_SPI_MspInit+0x134>)
 800096e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000972:	4a36      	ldr	r2, [pc, #216]	; (8000a4c <HAL_SPI_MspInit+0x134>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_SPI_MspInit+0x134>)
 800097e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <HAL_SPI_MspInit+0x134>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	4a2e      	ldr	r2, [pc, #184]	; (8000a4c <HAL_SPI_MspInit+0x134>)
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <HAL_SPI_MspInit+0x134>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80009a8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80009ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c2:	2305      	movs	r3, #5
 80009c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4820      	ldr	r0, [pc, #128]	; (8000a50 <HAL_SPI_MspInit+0x138>)
 80009d0:	f002 fa68 	bl	8002ea4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 80009d6:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <HAL_SPI_MspInit+0x140>)
 80009d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 80009dc:	2228      	movs	r2, #40	; 0x28
 80009de:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 80009e2:	2240      	movs	r2, #64	; 0x40
 80009e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 80009ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a12:	4810      	ldr	r0, [pc, #64]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 8000a14:	f000 fb3e 	bl	8001094 <HAL_DMA_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8000a1e:	f7ff fe6b 	bl	80006f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 8000a26:	679a      	str	r2, [r3, #120]	; 0x78
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_SPI_MspInit+0x13c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2024      	movs	r0, #36	; 0x24
 8000a34:	f000 faf9 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a38:	2024      	movs	r0, #36	; 0x24
 8000a3a:	f000 fb10 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a3e:	bf00      	nop
 8000a40:	37e8      	adds	r7, #232	; 0xe8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40003800 	.word	0x40003800
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	58020400 	.word	0x58020400
 8000a54:	240003a4 	.word	0x240003a4
 8000a58:	40020010 	.word	0x40020010

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_MspInit+0x30>)
 8000a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a68:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x30>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x30>)
 8000a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	58024400 	.word	0x58024400

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f97a 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <DMA1_Stream0_IRQHandler+0x10>)
 8000aea:	f001 f875 	bl	8001bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	240003a4 	.word	0x240003a4

08000af8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <SPI2_IRQHandler+0x10>)
 8000afe:	f009 fa85 	bl	800a00c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2400031c 	.word	0x2400031c

08000b0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <OTG_FS_IRQHandler+0x10>)
 8000b12:	f002 fd03 	bl	800351c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	24001f38 	.word	0x24001f38

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f015 fb5e 	bl	8016210 <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24080000 	.word	0x24080000
 8000b80:	00004000 	.word	0x00004000
 8000b84:	2400041c 	.word	0x2400041c
 8000b88:	24002590 	.word	0x24002590

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b90:	4b37      	ldr	r3, [pc, #220]	; (8000c70 <SystemInit+0xe4>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <SystemInit+0xe4>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ba0:	4b34      	ldr	r3, [pc, #208]	; (8000c74 <SystemInit+0xe8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	2b06      	cmp	r3, #6
 8000baa:	d807      	bhi.n	8000bbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bac:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <SystemInit+0xe8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f023 030f 	bic.w	r3, r3, #15
 8000bb4:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <SystemInit+0xe8>)
 8000bb6:	f043 0307 	orr.w	r3, r3, #7
 8000bba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <SystemInit+0xec>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <SystemInit+0xec>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <SystemInit+0xec>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <SystemInit+0xec>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	4929      	ldr	r1, [pc, #164]	; (8000c78 <SystemInit+0xec>)
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <SystemInit+0xf0>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <SystemInit+0xe8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <SystemInit+0xe8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f023 030f 	bic.w	r3, r3, #15
 8000bee:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <SystemInit+0xe8>)
 8000bf0:	f043 0307 	orr.w	r3, r3, #7
 8000bf4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <SystemInit+0xec>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <SystemInit+0xec>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <SystemInit+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <SystemInit+0xec>)
 8000c0a:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <SystemInit+0xf4>)
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <SystemInit+0xec>)
 8000c10:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <SystemInit+0xf8>)
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <SystemInit+0xec>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <SystemInit+0xfc>)
 8000c18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <SystemInit+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <SystemInit+0xec>)
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <SystemInit+0xfc>)
 8000c24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <SystemInit+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <SystemInit+0xec>)
 8000c2e:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <SystemInit+0xfc>)
 8000c30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <SystemInit+0xec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <SystemInit+0xec>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <SystemInit+0xec>)
 8000c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <SystemInit+0xec>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <SystemInit+0x100>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <SystemInit+0x104>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c56:	d202      	bcs.n	8000c5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <SystemInit+0x108>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <SystemInit+0x10c>)
 8000c60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00
 8000c74:	52002000 	.word	0x52002000
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c80:	02020200 	.word	0x02020200
 8000c84:	01ff0000 	.word	0x01ff0000
 8000c88:	01010280 	.word	0x01010280
 8000c8c:	5c001000 	.word	0x5c001000
 8000c90:	ffff0000 	.word	0xffff0000
 8000c94:	51008108 	.word	0x51008108
 8000c98:	52004000 	.word	0x52004000

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca0:	f7ff ff74 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	; (8000cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	; (8000ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f015 faa7 	bl	801621c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fc2b 	bl	8000528 <main>
  bx  lr
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cdc:	24000284 	.word	0x24000284
  ldr r2, =_sidata
 8000ce0:	08045e2c 	.word	0x08045e2c
  ldr r2, =_sbss
 8000ce4:	24000284 	.word	0x24000284
  ldr r4, =_ebss
 8000ce8:	2400258c 	.word	0x2400258c

08000cec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC3_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f000 f98c 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cfc:	f004 fbf6 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 8000d00:	4602      	mov	r2, r0
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_Init+0x68>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	0a1b      	lsrs	r3, r3, #8
 8000d08:	f003 030f 	and.w	r3, r3, #15
 8000d0c:	4913      	ldr	r1, [pc, #76]	; (8000d5c <HAL_Init+0x6c>)
 8000d0e:	5ccb      	ldrb	r3, [r1, r3]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	fa22 f303 	lsr.w	r3, r2, r3
 8000d18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_Init+0x68>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_Init+0x6c>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	f003 031f 	and.w	r3, r3, #31
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <HAL_Init+0x70>)
 8000d32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_Init+0x74>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 f814 	bl	8000d68 <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e002      	b.n	8000d50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4a:	f7ff fe87 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	08016a9c 	.word	0x08016a9c
 8000d60:	24000004 	.word	0x24000004
 8000d64:	24000000 	.word	0x24000000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_InitTick+0x60>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e021      	b.n	8000dc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_InitTick+0x64>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_InitTick+0x60>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f971 	bl	800107a <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f93b 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x68>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2400000c 	.word	0x2400000c
 8000dcc:	24000000 	.word	0x24000000
 8000dd0:	24000008 	.word	0x24000008

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2400000c 	.word	0x2400000c
 8000df8:	24000420 	.word	0x24000420

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	24000420 	.word	0x24000420

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2400000c 	.word	0x2400000c

08000e5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetREVID+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0c1b      	lsrs	r3, r3, #16
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	5c001000 	.word	0x5c001000

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	05fa0000 	.word	0x05fa0000

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff40 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff90 	bl	8000f68 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5f 	bl	8000f14 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff33 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa4 	bl	8000fd0 <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff feae 	bl	8000dfc <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e316      	b.n	80016da <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a66      	ldr	r2, [pc, #408]	; (800124c <HAL_DMA_Init+0x1b8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d04a      	beq.n	800114c <HAL_DMA_Init+0xb8>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a65      	ldr	r2, [pc, #404]	; (8001250 <HAL_DMA_Init+0x1bc>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d045      	beq.n	800114c <HAL_DMA_Init+0xb8>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a63      	ldr	r2, [pc, #396]	; (8001254 <HAL_DMA_Init+0x1c0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d040      	beq.n	800114c <HAL_DMA_Init+0xb8>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a62      	ldr	r2, [pc, #392]	; (8001258 <HAL_DMA_Init+0x1c4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d03b      	beq.n	800114c <HAL_DMA_Init+0xb8>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a60      	ldr	r2, [pc, #384]	; (800125c <HAL_DMA_Init+0x1c8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d036      	beq.n	800114c <HAL_DMA_Init+0xb8>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a5f      	ldr	r2, [pc, #380]	; (8001260 <HAL_DMA_Init+0x1cc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d031      	beq.n	800114c <HAL_DMA_Init+0xb8>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a5d      	ldr	r2, [pc, #372]	; (8001264 <HAL_DMA_Init+0x1d0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d02c      	beq.n	800114c <HAL_DMA_Init+0xb8>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a5c      	ldr	r2, [pc, #368]	; (8001268 <HAL_DMA_Init+0x1d4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d027      	beq.n	800114c <HAL_DMA_Init+0xb8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a5a      	ldr	r2, [pc, #360]	; (800126c <HAL_DMA_Init+0x1d8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d022      	beq.n	800114c <HAL_DMA_Init+0xb8>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a59      	ldr	r2, [pc, #356]	; (8001270 <HAL_DMA_Init+0x1dc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d01d      	beq.n	800114c <HAL_DMA_Init+0xb8>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_DMA_Init+0x1e0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d018      	beq.n	800114c <HAL_DMA_Init+0xb8>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a56      	ldr	r2, [pc, #344]	; (8001278 <HAL_DMA_Init+0x1e4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d013      	beq.n	800114c <HAL_DMA_Init+0xb8>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <HAL_DMA_Init+0x1e8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00e      	beq.n	800114c <HAL_DMA_Init+0xb8>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a53      	ldr	r2, [pc, #332]	; (8001280 <HAL_DMA_Init+0x1ec>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d009      	beq.n	800114c <HAL_DMA_Init+0xb8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a51      	ldr	r2, [pc, #324]	; (8001284 <HAL_DMA_Init+0x1f0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d004      	beq.n	800114c <HAL_DMA_Init+0xb8>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a50      	ldr	r2, [pc, #320]	; (8001288 <HAL_DMA_Init+0x1f4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d101      	bne.n	8001150 <HAL_DMA_Init+0xbc>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <HAL_DMA_Init+0xbe>
 8001150:	2300      	movs	r3, #0
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 813b 	beq.w	80013ce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2202      	movs	r2, #2
 800115c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a37      	ldr	r2, [pc, #220]	; (800124c <HAL_DMA_Init+0x1b8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d04a      	beq.n	8001208 <HAL_DMA_Init+0x174>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a36      	ldr	r2, [pc, #216]	; (8001250 <HAL_DMA_Init+0x1bc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d045      	beq.n	8001208 <HAL_DMA_Init+0x174>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a34      	ldr	r2, [pc, #208]	; (8001254 <HAL_DMA_Init+0x1c0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d040      	beq.n	8001208 <HAL_DMA_Init+0x174>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a33      	ldr	r2, [pc, #204]	; (8001258 <HAL_DMA_Init+0x1c4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d03b      	beq.n	8001208 <HAL_DMA_Init+0x174>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a31      	ldr	r2, [pc, #196]	; (800125c <HAL_DMA_Init+0x1c8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d036      	beq.n	8001208 <HAL_DMA_Init+0x174>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a30      	ldr	r2, [pc, #192]	; (8001260 <HAL_DMA_Init+0x1cc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d031      	beq.n	8001208 <HAL_DMA_Init+0x174>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a2e      	ldr	r2, [pc, #184]	; (8001264 <HAL_DMA_Init+0x1d0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d02c      	beq.n	8001208 <HAL_DMA_Init+0x174>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <HAL_DMA_Init+0x1d4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d027      	beq.n	8001208 <HAL_DMA_Init+0x174>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a2b      	ldr	r2, [pc, #172]	; (800126c <HAL_DMA_Init+0x1d8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d022      	beq.n	8001208 <HAL_DMA_Init+0x174>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a2a      	ldr	r2, [pc, #168]	; (8001270 <HAL_DMA_Init+0x1dc>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d01d      	beq.n	8001208 <HAL_DMA_Init+0x174>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a28      	ldr	r2, [pc, #160]	; (8001274 <HAL_DMA_Init+0x1e0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d018      	beq.n	8001208 <HAL_DMA_Init+0x174>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a27      	ldr	r2, [pc, #156]	; (8001278 <HAL_DMA_Init+0x1e4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d013      	beq.n	8001208 <HAL_DMA_Init+0x174>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a25      	ldr	r2, [pc, #148]	; (800127c <HAL_DMA_Init+0x1e8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00e      	beq.n	8001208 <HAL_DMA_Init+0x174>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a24      	ldr	r2, [pc, #144]	; (8001280 <HAL_DMA_Init+0x1ec>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d009      	beq.n	8001208 <HAL_DMA_Init+0x174>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a22      	ldr	r2, [pc, #136]	; (8001284 <HAL_DMA_Init+0x1f0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d004      	beq.n	8001208 <HAL_DMA_Init+0x174>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a21      	ldr	r2, [pc, #132]	; (8001288 <HAL_DMA_Init+0x1f4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d108      	bne.n	800121a <HAL_DMA_Init+0x186>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e007      	b.n	800122a <HAL_DMA_Init+0x196>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800122a:	e02f      	b.n	800128c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800122c:	f7ff fde6 	bl	8000dfc <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b05      	cmp	r3, #5
 8001238:	d928      	bls.n	800128c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2220      	movs	r2, #32
 800123e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2203      	movs	r2, #3
 8001244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e246      	b.n	80016da <HAL_DMA_Init+0x646>
 800124c:	40020010 	.word	0x40020010
 8001250:	40020028 	.word	0x40020028
 8001254:	40020040 	.word	0x40020040
 8001258:	40020058 	.word	0x40020058
 800125c:	40020070 	.word	0x40020070
 8001260:	40020088 	.word	0x40020088
 8001264:	400200a0 	.word	0x400200a0
 8001268:	400200b8 	.word	0x400200b8
 800126c:	40020410 	.word	0x40020410
 8001270:	40020428 	.word	0x40020428
 8001274:	40020440 	.word	0x40020440
 8001278:	40020458 	.word	0x40020458
 800127c:	40020470 	.word	0x40020470
 8001280:	40020488 	.word	0x40020488
 8001284:	400204a0 	.word	0x400204a0
 8001288:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1c8      	bne.n	800122c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4b83      	ldr	r3, [pc, #524]	; (80014b4 <HAL_DMA_Init+0x420>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80012b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d107      	bne.n	80012f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4313      	orrs	r3, r2
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80012f0:	4b71      	ldr	r3, [pc, #452]	; (80014b8 <HAL_DMA_Init+0x424>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b71      	ldr	r3, [pc, #452]	; (80014bc <HAL_DMA_Init+0x428>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012fc:	d328      	bcc.n	8001350 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b28      	cmp	r3, #40	; 0x28
 8001304:	d903      	bls.n	800130e <HAL_DMA_Init+0x27a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b2e      	cmp	r3, #46	; 0x2e
 800130c:	d917      	bls.n	800133e <HAL_DMA_Init+0x2aa>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b3e      	cmp	r3, #62	; 0x3e
 8001314:	d903      	bls.n	800131e <HAL_DMA_Init+0x28a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b42      	cmp	r3, #66	; 0x42
 800131c:	d90f      	bls.n	800133e <HAL_DMA_Init+0x2aa>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b46      	cmp	r3, #70	; 0x46
 8001324:	d903      	bls.n	800132e <HAL_DMA_Init+0x29a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b48      	cmp	r3, #72	; 0x48
 800132c:	d907      	bls.n	800133e <HAL_DMA_Init+0x2aa>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b4e      	cmp	r3, #78	; 0x4e
 8001334:	d905      	bls.n	8001342 <HAL_DMA_Init+0x2ae>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b52      	cmp	r3, #82	; 0x52
 800133c:	d801      	bhi.n	8001342 <HAL_DMA_Init+0x2ae>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_DMA_Init+0x2b0>
 8001342:	2300      	movs	r3, #0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800134e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f023 0307 	bic.w	r3, r3, #7
 8001366:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	4313      	orrs	r3, r2
 8001370:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	2b04      	cmp	r3, #4
 8001378:	d117      	bne.n	80013aa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4313      	orrs	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00e      	beq.n	80013aa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f001 fbff 	bl	8002b90 <DMA_CheckFifoParam>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2240      	movs	r2, #64	; 0x40
 800139c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e197      	b.n	80016da <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f001 fb3a 	bl	8002a2c <DMA_CalcBaseAndBitshift>
 80013b8:	4603      	mov	r3, r0
 80013ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	223f      	movs	r2, #63	; 0x3f
 80013c6:	409a      	lsls	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	e0cd      	b.n	800156a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a3b      	ldr	r2, [pc, #236]	; (80014c0 <HAL_DMA_Init+0x42c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d022      	beq.n	800141e <HAL_DMA_Init+0x38a>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a39      	ldr	r2, [pc, #228]	; (80014c4 <HAL_DMA_Init+0x430>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01d      	beq.n	800141e <HAL_DMA_Init+0x38a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a38      	ldr	r2, [pc, #224]	; (80014c8 <HAL_DMA_Init+0x434>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d018      	beq.n	800141e <HAL_DMA_Init+0x38a>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a36      	ldr	r2, [pc, #216]	; (80014cc <HAL_DMA_Init+0x438>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_DMA_Init+0x38a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <HAL_DMA_Init+0x43c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d00e      	beq.n	800141e <HAL_DMA_Init+0x38a>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <HAL_DMA_Init+0x440>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d009      	beq.n	800141e <HAL_DMA_Init+0x38a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a32      	ldr	r2, [pc, #200]	; (80014d8 <HAL_DMA_Init+0x444>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d004      	beq.n	800141e <HAL_DMA_Init+0x38a>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a30      	ldr	r2, [pc, #192]	; (80014dc <HAL_DMA_Init+0x448>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_DMA_Init+0x38e>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_DMA_Init+0x390>
 8001422:	2300      	movs	r3, #0
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 8097 	beq.w	8001558 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <HAL_DMA_Init+0x42c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d021      	beq.n	8001478 <HAL_DMA_Init+0x3e4>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_DMA_Init+0x430>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d01c      	beq.n	8001478 <HAL_DMA_Init+0x3e4>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <HAL_DMA_Init+0x434>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d017      	beq.n	8001478 <HAL_DMA_Init+0x3e4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <HAL_DMA_Init+0x438>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d012      	beq.n	8001478 <HAL_DMA_Init+0x3e4>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1e      	ldr	r2, [pc, #120]	; (80014d0 <HAL_DMA_Init+0x43c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d00d      	beq.n	8001478 <HAL_DMA_Init+0x3e4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <HAL_DMA_Init+0x440>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d008      	beq.n	8001478 <HAL_DMA_Init+0x3e4>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <HAL_DMA_Init+0x444>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d003      	beq.n	8001478 <HAL_DMA_Init+0x3e4>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a19      	ldr	r2, [pc, #100]	; (80014dc <HAL_DMA_Init+0x448>)
 8001476:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2202      	movs	r2, #2
 800147c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_DMA_Init+0x44c>)
 8001494:	4013      	ands	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b40      	cmp	r3, #64	; 0x40
 800149e:	d021      	beq.n	80014e4 <HAL_DMA_Init+0x450>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b80      	cmp	r3, #128	; 0x80
 80014a6:	d102      	bne.n	80014ae <HAL_DMA_Init+0x41a>
 80014a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ac:	e01b      	b.n	80014e6 <HAL_DMA_Init+0x452>
 80014ae:	2300      	movs	r3, #0
 80014b0:	e019      	b.n	80014e6 <HAL_DMA_Init+0x452>
 80014b2:	bf00      	nop
 80014b4:	fe10803f 	.word	0xfe10803f
 80014b8:	5c001000 	.word	0x5c001000
 80014bc:	ffff0000 	.word	0xffff0000
 80014c0:	58025408 	.word	0x58025408
 80014c4:	5802541c 	.word	0x5802541c
 80014c8:	58025430 	.word	0x58025430
 80014cc:	58025444 	.word	0x58025444
 80014d0:	58025458 	.word	0x58025458
 80014d4:	5802546c 	.word	0x5802546c
 80014d8:	58025480 	.word	0x58025480
 80014dc:	58025494 	.word	0x58025494
 80014e0:	fffe000f 	.word	0xfffe000f
 80014e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68d2      	ldr	r2, [r2, #12]
 80014ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80014ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80014f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80014fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800150c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001514:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4313      	orrs	r3, r2
 800151a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b6e      	ldr	r3, [pc, #440]	; (80016e4 <HAL_DMA_Init+0x650>)
 800152c:	4413      	add	r3, r2
 800152e:	4a6e      	ldr	r2, [pc, #440]	; (80016e8 <HAL_DMA_Init+0x654>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	009a      	lsls	r2, r3, #2
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f001 fa75 	bl	8002a2c <DMA_CalcBaseAndBitshift>
 8001542:	4603      	mov	r3, r0
 8001544:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2201      	movs	r2, #1
 8001550:	409a      	lsls	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	e008      	b.n	800156a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2240      	movs	r2, #64	; 0x40
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2203      	movs	r2, #3
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0b7      	b.n	80016da <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a5f      	ldr	r2, [pc, #380]	; (80016ec <HAL_DMA_Init+0x658>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d072      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a5d      	ldr	r2, [pc, #372]	; (80016f0 <HAL_DMA_Init+0x65c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d06d      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a5c      	ldr	r2, [pc, #368]	; (80016f4 <HAL_DMA_Init+0x660>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d068      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a5a      	ldr	r2, [pc, #360]	; (80016f8 <HAL_DMA_Init+0x664>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d063      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a59      	ldr	r2, [pc, #356]	; (80016fc <HAL_DMA_Init+0x668>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d05e      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a57      	ldr	r2, [pc, #348]	; (8001700 <HAL_DMA_Init+0x66c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d059      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a56      	ldr	r2, [pc, #344]	; (8001704 <HAL_DMA_Init+0x670>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d054      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a54      	ldr	r2, [pc, #336]	; (8001708 <HAL_DMA_Init+0x674>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d04f      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a53      	ldr	r2, [pc, #332]	; (800170c <HAL_DMA_Init+0x678>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d04a      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a51      	ldr	r2, [pc, #324]	; (8001710 <HAL_DMA_Init+0x67c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d045      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a50      	ldr	r2, [pc, #320]	; (8001714 <HAL_DMA_Init+0x680>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d040      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_DMA_Init+0x684>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d03b      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a4d      	ldr	r2, [pc, #308]	; (800171c <HAL_DMA_Init+0x688>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d036      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a4b      	ldr	r2, [pc, #300]	; (8001720 <HAL_DMA_Init+0x68c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d031      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a4a      	ldr	r2, [pc, #296]	; (8001724 <HAL_DMA_Init+0x690>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d02c      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a48      	ldr	r2, [pc, #288]	; (8001728 <HAL_DMA_Init+0x694>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d027      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a47      	ldr	r2, [pc, #284]	; (800172c <HAL_DMA_Init+0x698>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d022      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a45      	ldr	r2, [pc, #276]	; (8001730 <HAL_DMA_Init+0x69c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d01d      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a44      	ldr	r2, [pc, #272]	; (8001734 <HAL_DMA_Init+0x6a0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d018      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a42      	ldr	r2, [pc, #264]	; (8001738 <HAL_DMA_Init+0x6a4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a41      	ldr	r2, [pc, #260]	; (800173c <HAL_DMA_Init+0x6a8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d00e      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a3f      	ldr	r2, [pc, #252]	; (8001740 <HAL_DMA_Init+0x6ac>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d009      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a3e      	ldr	r2, [pc, #248]	; (8001744 <HAL_DMA_Init+0x6b0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d004      	beq.n	800165a <HAL_DMA_Init+0x5c6>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a3c      	ldr	r2, [pc, #240]	; (8001748 <HAL_DMA_Init+0x6b4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_DMA_Init+0x5ca>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_DMA_Init+0x5cc>
 800165e:	2300      	movs	r3, #0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d032      	beq.n	80016ca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f001 fb0f 	bl	8002c88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b80      	cmp	r3, #128	; 0x80
 8001670:	d102      	bne.n	8001678 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800168c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d010      	beq.n	80016b8 <HAL_DMA_Init+0x624>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b08      	cmp	r3, #8
 800169c:	d80c      	bhi.n	80016b8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f001 fb8c 	bl	8002dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	e008      	b.n	80016ca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	a7fdabf8 	.word	0xa7fdabf8
 80016e8:	cccccccd 	.word	0xcccccccd
 80016ec:	40020010 	.word	0x40020010
 80016f0:	40020028 	.word	0x40020028
 80016f4:	40020040 	.word	0x40020040
 80016f8:	40020058 	.word	0x40020058
 80016fc:	40020070 	.word	0x40020070
 8001700:	40020088 	.word	0x40020088
 8001704:	400200a0 	.word	0x400200a0
 8001708:	400200b8 	.word	0x400200b8
 800170c:	40020410 	.word	0x40020410
 8001710:	40020428 	.word	0x40020428
 8001714:	40020440 	.word	0x40020440
 8001718:	40020458 	.word	0x40020458
 800171c:	40020470 	.word	0x40020470
 8001720:	40020488 	.word	0x40020488
 8001724:	400204a0 	.word	0x400204a0
 8001728:	400204b8 	.word	0x400204b8
 800172c:	58025408 	.word	0x58025408
 8001730:	5802541c 	.word	0x5802541c
 8001734:	58025430 	.word	0x58025430
 8001738:	58025444 	.word	0x58025444
 800173c:	58025458 	.word	0x58025458
 8001740:	5802546c 	.word	0x5802546c
 8001744:	58025480 	.word	0x58025480
 8001748:	58025494 	.word	0x58025494

0800174c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e237      	b.n	8001bce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d004      	beq.n	8001774 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e22c      	b.n	8001bce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a5c      	ldr	r2, [pc, #368]	; (80018ec <HAL_DMA_Abort_IT+0x1a0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d04a      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5b      	ldr	r2, [pc, #364]	; (80018f0 <HAL_DMA_Abort_IT+0x1a4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d045      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a59      	ldr	r2, [pc, #356]	; (80018f4 <HAL_DMA_Abort_IT+0x1a8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d040      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_DMA_Abort_IT+0x1ac>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d03b      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a56      	ldr	r2, [pc, #344]	; (80018fc <HAL_DMA_Abort_IT+0x1b0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d036      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a55      	ldr	r2, [pc, #340]	; (8001900 <HAL_DMA_Abort_IT+0x1b4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d031      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a53      	ldr	r2, [pc, #332]	; (8001904 <HAL_DMA_Abort_IT+0x1b8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d02c      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_DMA_Abort_IT+0x1bc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d027      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a50      	ldr	r2, [pc, #320]	; (800190c <HAL_DMA_Abort_IT+0x1c0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d022      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a4f      	ldr	r2, [pc, #316]	; (8001910 <HAL_DMA_Abort_IT+0x1c4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d01d      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <HAL_DMA_Abort_IT+0x1c8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d018      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_DMA_Abort_IT+0x1cc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d013      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4a      	ldr	r2, [pc, #296]	; (800191c <HAL_DMA_Abort_IT+0x1d0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00e      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a49      	ldr	r2, [pc, #292]	; (8001920 <HAL_DMA_Abort_IT+0x1d4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d009      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a47      	ldr	r2, [pc, #284]	; (8001924 <HAL_DMA_Abort_IT+0x1d8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d004      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a46      	ldr	r2, [pc, #280]	; (8001928 <HAL_DMA_Abort_IT+0x1dc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_DMA_Abort_IT+0xcc>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_DMA_Abort_IT+0xce>
 8001818:	2300      	movs	r3, #0
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8086 	beq.w	800192c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2204      	movs	r2, #4
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a2f      	ldr	r2, [pc, #188]	; (80018ec <HAL_DMA_Abort_IT+0x1a0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d04a      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <HAL_DMA_Abort_IT+0x1a4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d045      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <HAL_DMA_Abort_IT+0x1a8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d040      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2b      	ldr	r2, [pc, #172]	; (80018f8 <HAL_DMA_Abort_IT+0x1ac>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d03b      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a29      	ldr	r2, [pc, #164]	; (80018fc <HAL_DMA_Abort_IT+0x1b0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d036      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a28      	ldr	r2, [pc, #160]	; (8001900 <HAL_DMA_Abort_IT+0x1b4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d031      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a26      	ldr	r2, [pc, #152]	; (8001904 <HAL_DMA_Abort_IT+0x1b8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d02c      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a25      	ldr	r2, [pc, #148]	; (8001908 <HAL_DMA_Abort_IT+0x1bc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d027      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <HAL_DMA_Abort_IT+0x1c0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d022      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a22      	ldr	r2, [pc, #136]	; (8001910 <HAL_DMA_Abort_IT+0x1c4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d01d      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <HAL_DMA_Abort_IT+0x1c8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d018      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <HAL_DMA_Abort_IT+0x1cc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d013      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1d      	ldr	r2, [pc, #116]	; (800191c <HAL_DMA_Abort_IT+0x1d0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00e      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <HAL_DMA_Abort_IT+0x1d4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d009      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_DMA_Abort_IT+0x1d8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d004      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_DMA_Abort_IT+0x1dc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d108      	bne.n	80018da <HAL_DMA_Abort_IT+0x18e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e178      	b.n	8001bcc <HAL_DMA_Abort_IT+0x480>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0201 	bic.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e16f      	b.n	8001bcc <HAL_DMA_Abort_IT+0x480>
 80018ec:	40020010 	.word	0x40020010
 80018f0:	40020028 	.word	0x40020028
 80018f4:	40020040 	.word	0x40020040
 80018f8:	40020058 	.word	0x40020058
 80018fc:	40020070 	.word	0x40020070
 8001900:	40020088 	.word	0x40020088
 8001904:	400200a0 	.word	0x400200a0
 8001908:	400200b8 	.word	0x400200b8
 800190c:	40020410 	.word	0x40020410
 8001910:	40020428 	.word	0x40020428
 8001914:	40020440 	.word	0x40020440
 8001918:	40020458 	.word	0x40020458
 800191c:	40020470 	.word	0x40020470
 8001920:	40020488 	.word	0x40020488
 8001924:	400204a0 	.word	0x400204a0
 8001928:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 020e 	bic.w	r2, r2, #14
 800193a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6c      	ldr	r2, [pc, #432]	; (8001af4 <HAL_DMA_Abort_IT+0x3a8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d04a      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a6b      	ldr	r2, [pc, #428]	; (8001af8 <HAL_DMA_Abort_IT+0x3ac>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d045      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a69      	ldr	r2, [pc, #420]	; (8001afc <HAL_DMA_Abort_IT+0x3b0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d040      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a68      	ldr	r2, [pc, #416]	; (8001b00 <HAL_DMA_Abort_IT+0x3b4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d03b      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a66      	ldr	r2, [pc, #408]	; (8001b04 <HAL_DMA_Abort_IT+0x3b8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d036      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a65      	ldr	r2, [pc, #404]	; (8001b08 <HAL_DMA_Abort_IT+0x3bc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d031      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a63      	ldr	r2, [pc, #396]	; (8001b0c <HAL_DMA_Abort_IT+0x3c0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02c      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a62      	ldr	r2, [pc, #392]	; (8001b10 <HAL_DMA_Abort_IT+0x3c4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d027      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a60      	ldr	r2, [pc, #384]	; (8001b14 <HAL_DMA_Abort_IT+0x3c8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d022      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a5f      	ldr	r2, [pc, #380]	; (8001b18 <HAL_DMA_Abort_IT+0x3cc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d01d      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a5d      	ldr	r2, [pc, #372]	; (8001b1c <HAL_DMA_Abort_IT+0x3d0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d018      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a5c      	ldr	r2, [pc, #368]	; (8001b20 <HAL_DMA_Abort_IT+0x3d4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d013      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5a      	ldr	r2, [pc, #360]	; (8001b24 <HAL_DMA_Abort_IT+0x3d8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00e      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a59      	ldr	r2, [pc, #356]	; (8001b28 <HAL_DMA_Abort_IT+0x3dc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a57      	ldr	r2, [pc, #348]	; (8001b2c <HAL_DMA_Abort_IT+0x3e0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d004      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a56      	ldr	r2, [pc, #344]	; (8001b30 <HAL_DMA_Abort_IT+0x3e4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d108      	bne.n	80019ee <HAL_DMA_Abort_IT+0x2a2>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e007      	b.n	80019fe <HAL_DMA_Abort_IT+0x2b2>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0201 	bic.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a3c      	ldr	r2, [pc, #240]	; (8001af4 <HAL_DMA_Abort_IT+0x3a8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d072      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a3a      	ldr	r2, [pc, #232]	; (8001af8 <HAL_DMA_Abort_IT+0x3ac>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d06d      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a39      	ldr	r2, [pc, #228]	; (8001afc <HAL_DMA_Abort_IT+0x3b0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d068      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a37      	ldr	r2, [pc, #220]	; (8001b00 <HAL_DMA_Abort_IT+0x3b4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d063      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a36      	ldr	r2, [pc, #216]	; (8001b04 <HAL_DMA_Abort_IT+0x3b8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d05e      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a34      	ldr	r2, [pc, #208]	; (8001b08 <HAL_DMA_Abort_IT+0x3bc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d059      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a33      	ldr	r2, [pc, #204]	; (8001b0c <HAL_DMA_Abort_IT+0x3c0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d054      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <HAL_DMA_Abort_IT+0x3c4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d04f      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a30      	ldr	r2, [pc, #192]	; (8001b14 <HAL_DMA_Abort_IT+0x3c8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d04a      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a2e      	ldr	r2, [pc, #184]	; (8001b18 <HAL_DMA_Abort_IT+0x3cc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d045      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a2d      	ldr	r2, [pc, #180]	; (8001b1c <HAL_DMA_Abort_IT+0x3d0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d040      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a2b      	ldr	r2, [pc, #172]	; (8001b20 <HAL_DMA_Abort_IT+0x3d4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d03b      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <HAL_DMA_Abort_IT+0x3d8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d036      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a28      	ldr	r2, [pc, #160]	; (8001b28 <HAL_DMA_Abort_IT+0x3dc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d031      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_DMA_Abort_IT+0x3e0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d02c      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a25      	ldr	r2, [pc, #148]	; (8001b30 <HAL_DMA_Abort_IT+0x3e4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d027      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <HAL_DMA_Abort_IT+0x3e8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d022      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <HAL_DMA_Abort_IT+0x3ec>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01d      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <HAL_DMA_Abort_IT+0x3f0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d018      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <HAL_DMA_Abort_IT+0x3f4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_DMA_Abort_IT+0x3f8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00e      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <HAL_DMA_Abort_IT+0x3fc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <HAL_DMA_Abort_IT+0x400>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d004      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_DMA_Abort_IT+0x404>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d132      	bne.n	8001b54 <HAL_DMA_Abort_IT+0x408>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e031      	b.n	8001b56 <HAL_DMA_Abort_IT+0x40a>
 8001af2:	bf00      	nop
 8001af4:	40020010 	.word	0x40020010
 8001af8:	40020028 	.word	0x40020028
 8001afc:	40020040 	.word	0x40020040
 8001b00:	40020058 	.word	0x40020058
 8001b04:	40020070 	.word	0x40020070
 8001b08:	40020088 	.word	0x40020088
 8001b0c:	400200a0 	.word	0x400200a0
 8001b10:	400200b8 	.word	0x400200b8
 8001b14:	40020410 	.word	0x40020410
 8001b18:	40020428 	.word	0x40020428
 8001b1c:	40020440 	.word	0x40020440
 8001b20:	40020458 	.word	0x40020458
 8001b24:	40020470 	.word	0x40020470
 8001b28:	40020488 	.word	0x40020488
 8001b2c:	400204a0 	.word	0x400204a0
 8001b30:	400204b8 	.word	0x400204b8
 8001b34:	58025408 	.word	0x58025408
 8001b38:	5802541c 	.word	0x5802541c
 8001b3c:	58025430 	.word	0x58025430
 8001b40:	58025444 	.word	0x58025444
 8001b44:	58025458 	.word	0x58025458
 8001b48:	5802546c 	.word	0x5802546c
 8001b4c:	58025480 	.word	0x58025480
 8001b50:	58025494 	.word	0x58025494
 8001b54:	2300      	movs	r3, #0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d028      	beq.n	8001bac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b68:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2201      	movs	r2, #1
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b88:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00c      	beq.n	8001bac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001baa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop

08001bd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001be4:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_DMA_IRQHandler+0x1ac>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a67      	ldr	r2, [pc, #412]	; (8001d88 <HAL_DMA_IRQHandler+0x1b0>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0a9b      	lsrs	r3, r3, #10
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a5f      	ldr	r2, [pc, #380]	; (8001d8c <HAL_DMA_IRQHandler+0x1b4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04a      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a5d      	ldr	r2, [pc, #372]	; (8001d90 <HAL_DMA_IRQHandler+0x1b8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d045      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a5c      	ldr	r2, [pc, #368]	; (8001d94 <HAL_DMA_IRQHandler+0x1bc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d040      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a5a      	ldr	r2, [pc, #360]	; (8001d98 <HAL_DMA_IRQHandler+0x1c0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d03b      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a59      	ldr	r2, [pc, #356]	; (8001d9c <HAL_DMA_IRQHandler+0x1c4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d036      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a57      	ldr	r2, [pc, #348]	; (8001da0 <HAL_DMA_IRQHandler+0x1c8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a56      	ldr	r2, [pc, #344]	; (8001da4 <HAL_DMA_IRQHandler+0x1cc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d02c      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a54      	ldr	r2, [pc, #336]	; (8001da8 <HAL_DMA_IRQHandler+0x1d0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d027      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a53      	ldr	r2, [pc, #332]	; (8001dac <HAL_DMA_IRQHandler+0x1d4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <HAL_DMA_IRQHandler+0x1d8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <HAL_DMA_IRQHandler+0x1dc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d018      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a4e      	ldr	r2, [pc, #312]	; (8001db8 <HAL_DMA_IRQHandler+0x1e0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a4d      	ldr	r2, [pc, #308]	; (8001dbc <HAL_DMA_IRQHandler+0x1e4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a4b      	ldr	r2, [pc, #300]	; (8001dc0 <HAL_DMA_IRQHandler+0x1e8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a4a      	ldr	r2, [pc, #296]	; (8001dc4 <HAL_DMA_IRQHandler+0x1ec>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_DMA_IRQHandler+0xd2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a48      	ldr	r2, [pc, #288]	; (8001dc8 <HAL_DMA_IRQHandler+0x1f0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_DMA_IRQHandler+0xd6>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_DMA_IRQHandler+0xd8>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 842b 	beq.w	800250c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80a2 	beq.w	8001e10 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2e      	ldr	r2, [pc, #184]	; (8001d8c <HAL_DMA_IRQHandler+0x1b4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d04a      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a2d      	ldr	r2, [pc, #180]	; (8001d90 <HAL_DMA_IRQHandler+0x1b8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d045      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2b      	ldr	r2, [pc, #172]	; (8001d94 <HAL_DMA_IRQHandler+0x1bc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d040      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <HAL_DMA_IRQHandler+0x1c0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d03b      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a28      	ldr	r2, [pc, #160]	; (8001d9c <HAL_DMA_IRQHandler+0x1c4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d036      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <HAL_DMA_IRQHandler+0x1c8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d031      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <HAL_DMA_IRQHandler+0x1cc>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02c      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <HAL_DMA_IRQHandler+0x1d0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d027      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a22      	ldr	r2, [pc, #136]	; (8001dac <HAL_DMA_IRQHandler+0x1d4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d022      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a21      	ldr	r2, [pc, #132]	; (8001db0 <HAL_DMA_IRQHandler+0x1d8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d01d      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <HAL_DMA_IRQHandler+0x1dc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d018      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <HAL_DMA_IRQHandler+0x1e0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d013      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <HAL_DMA_IRQHandler+0x1e4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00e      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_DMA_IRQHandler+0x1e8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d009      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_DMA_IRQHandler+0x1ec>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d004      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x194>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <HAL_DMA_IRQHandler+0x1f0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d12f      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x1f4>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf14      	ite	ne
 8001d7a:	2301      	movne	r3, #1
 8001d7c:	2300      	moveq	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	e02e      	b.n	8001de0 <HAL_DMA_IRQHandler+0x208>
 8001d82:	bf00      	nop
 8001d84:	24000000 	.word	0x24000000
 8001d88:	1b4e81b5 	.word	0x1b4e81b5
 8001d8c:	40020010 	.word	0x40020010
 8001d90:	40020028 	.word	0x40020028
 8001d94:	40020040 	.word	0x40020040
 8001d98:	40020058 	.word	0x40020058
 8001d9c:	40020070 	.word	0x40020070
 8001da0:	40020088 	.word	0x40020088
 8001da4:	400200a0 	.word	0x400200a0
 8001da8:	400200b8 	.word	0x400200b8
 8001dac:	40020410 	.word	0x40020410
 8001db0:	40020428 	.word	0x40020428
 8001db4:	40020440 	.word	0x40020440
 8001db8:	40020458 	.word	0x40020458
 8001dbc:	40020470 	.word	0x40020470
 8001dc0:	40020488 	.word	0x40020488
 8001dc4:	400204a0 	.word	0x400204a0
 8001dc8:	400204b8 	.word	0x400204b8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf14      	ite	ne
 8001dda:	2301      	movne	r3, #1
 8001ddc:	2300      	moveq	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d015      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0204 	bic.w	r2, r2, #4
 8001df2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d06e      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a69      	ldr	r2, [pc, #420]	; (8001fd0 <HAL_DMA_IRQHandler+0x3f8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a67      	ldr	r2, [pc, #412]	; (8001fd4 <HAL_DMA_IRQHandler+0x3fc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a66      	ldr	r2, [pc, #408]	; (8001fd8 <HAL_DMA_IRQHandler+0x400>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a64      	ldr	r2, [pc, #400]	; (8001fdc <HAL_DMA_IRQHandler+0x404>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a63      	ldr	r2, [pc, #396]	; (8001fe0 <HAL_DMA_IRQHandler+0x408>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a61      	ldr	r2, [pc, #388]	; (8001fe4 <HAL_DMA_IRQHandler+0x40c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a60      	ldr	r2, [pc, #384]	; (8001fe8 <HAL_DMA_IRQHandler+0x410>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a5e      	ldr	r2, [pc, #376]	; (8001fec <HAL_DMA_IRQHandler+0x414>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a5d      	ldr	r2, [pc, #372]	; (8001ff0 <HAL_DMA_IRQHandler+0x418>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a5b      	ldr	r2, [pc, #364]	; (8001ff4 <HAL_DMA_IRQHandler+0x41c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a5a      	ldr	r2, [pc, #360]	; (8001ff8 <HAL_DMA_IRQHandler+0x420>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a58      	ldr	r2, [pc, #352]	; (8001ffc <HAL_DMA_IRQHandler+0x424>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a57      	ldr	r2, [pc, #348]	; (8002000 <HAL_DMA_IRQHandler+0x428>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a55      	ldr	r2, [pc, #340]	; (8002004 <HAL_DMA_IRQHandler+0x42c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a54      	ldr	r2, [pc, #336]	; (8002008 <HAL_DMA_IRQHandler+0x430>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2ee>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_DMA_IRQHandler+0x434>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d10a      	bne.n	8001edc <HAL_DMA_IRQHandler+0x304>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e003      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x30c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00d      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f043 0202 	orr.w	r2, r3, #2
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 808f 	beq.w	8002038 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <HAL_DMA_IRQHandler+0x3f8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d04a      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a2a      	ldr	r2, [pc, #168]	; (8001fd4 <HAL_DMA_IRQHandler+0x3fc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d045      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <HAL_DMA_IRQHandler+0x400>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d040      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a27      	ldr	r2, [pc, #156]	; (8001fdc <HAL_DMA_IRQHandler+0x404>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d03b      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HAL_DMA_IRQHandler+0x408>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d036      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_DMA_IRQHandler+0x40c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d031      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a23      	ldr	r2, [pc, #140]	; (8001fe8 <HAL_DMA_IRQHandler+0x410>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d02c      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <HAL_DMA_IRQHandler+0x414>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d027      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_DMA_IRQHandler+0x418>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d022      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_DMA_IRQHandler+0x41c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01d      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <HAL_DMA_IRQHandler+0x420>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d018      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <HAL_DMA_IRQHandler+0x424>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <HAL_DMA_IRQHandler+0x428>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00e      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_DMA_IRQHandler+0x42c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_DMA_IRQHandler+0x430>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d004      	beq.n	8001fba <HAL_DMA_IRQHandler+0x3e2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a15      	ldr	r2, [pc, #84]	; (800200c <HAL_DMA_IRQHandler+0x434>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d12a      	bne.n	8002010 <HAL_DMA_IRQHandler+0x438>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e023      	b.n	8002018 <HAL_DMA_IRQHandler+0x440>
 8001fd0:	40020010 	.word	0x40020010
 8001fd4:	40020028 	.word	0x40020028
 8001fd8:	40020040 	.word	0x40020040
 8001fdc:	40020058 	.word	0x40020058
 8001fe0:	40020070 	.word	0x40020070
 8001fe4:	40020088 	.word	0x40020088
 8001fe8:	400200a0 	.word	0x400200a0
 8001fec:	400200b8 	.word	0x400200b8
 8001ff0:	40020410 	.word	0x40020410
 8001ff4:	40020428 	.word	0x40020428
 8001ff8:	40020440 	.word	0x40020440
 8001ffc:	40020458 	.word	0x40020458
 8002000:	40020470 	.word	0x40020470
 8002004:	40020488 	.word	0x40020488
 8002008:	400204a0 	.word	0x400204a0
 800200c:	400204b8 	.word	0x400204b8
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2204      	movs	r2, #4
 8002026:	409a      	lsls	r2, r3
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f043 0204 	orr.w	r2, r3, #4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2210      	movs	r2, #16
 8002042:	409a      	lsls	r2, r3
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a6 	beq.w	800219a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a85      	ldr	r2, [pc, #532]	; (8002268 <HAL_DMA_IRQHandler+0x690>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d04a      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a83      	ldr	r2, [pc, #524]	; (800226c <HAL_DMA_IRQHandler+0x694>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d045      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a82      	ldr	r2, [pc, #520]	; (8002270 <HAL_DMA_IRQHandler+0x698>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d040      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a80      	ldr	r2, [pc, #512]	; (8002274 <HAL_DMA_IRQHandler+0x69c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d03b      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7f      	ldr	r2, [pc, #508]	; (8002278 <HAL_DMA_IRQHandler+0x6a0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d036      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a7d      	ldr	r2, [pc, #500]	; (800227c <HAL_DMA_IRQHandler+0x6a4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d031      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a7c      	ldr	r2, [pc, #496]	; (8002280 <HAL_DMA_IRQHandler+0x6a8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d02c      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a7a      	ldr	r2, [pc, #488]	; (8002284 <HAL_DMA_IRQHandler+0x6ac>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d027      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a79      	ldr	r2, [pc, #484]	; (8002288 <HAL_DMA_IRQHandler+0x6b0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d022      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a77      	ldr	r2, [pc, #476]	; (800228c <HAL_DMA_IRQHandler+0x6b4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01d      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a76      	ldr	r2, [pc, #472]	; (8002290 <HAL_DMA_IRQHandler+0x6b8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a74      	ldr	r2, [pc, #464]	; (8002294 <HAL_DMA_IRQHandler+0x6bc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a73      	ldr	r2, [pc, #460]	; (8002298 <HAL_DMA_IRQHandler+0x6c0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00e      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a71      	ldr	r2, [pc, #452]	; (800229c <HAL_DMA_IRQHandler+0x6c4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a70      	ldr	r2, [pc, #448]	; (80022a0 <HAL_DMA_IRQHandler+0x6c8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d004      	beq.n	80020ee <HAL_DMA_IRQHandler+0x516>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a6e      	ldr	r2, [pc, #440]	; (80022a4 <HAL_DMA_IRQHandler+0x6cc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10a      	bne.n	8002104 <HAL_DMA_IRQHandler+0x52c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e009      	b.n	8002118 <HAL_DMA_IRQHandler+0x540>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf14      	ite	ne
 8002112:	2301      	movne	r3, #1
 8002114:	2300      	moveq	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d03e      	beq.n	800219a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2210      	movs	r2, #16
 8002126:	409a      	lsls	r2, r3
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d018      	beq.n	800216c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d108      	bne.n	800215a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d024      	beq.n	800219a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e01f      	b.n	800219a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01b      	beq.n	800219a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
 800216a:	e016      	b.n	800219a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0208 	bic.w	r2, r2, #8
 8002188:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	2220      	movs	r2, #32
 80021a4:	409a      	lsls	r2, r3
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8110 	beq.w	80023d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <HAL_DMA_IRQHandler+0x690>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d04a      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2b      	ldr	r2, [pc, #172]	; (800226c <HAL_DMA_IRQHandler+0x694>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d045      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a29      	ldr	r2, [pc, #164]	; (8002270 <HAL_DMA_IRQHandler+0x698>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d040      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a28      	ldr	r2, [pc, #160]	; (8002274 <HAL_DMA_IRQHandler+0x69c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d03b      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a26      	ldr	r2, [pc, #152]	; (8002278 <HAL_DMA_IRQHandler+0x6a0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d036      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a25      	ldr	r2, [pc, #148]	; (800227c <HAL_DMA_IRQHandler+0x6a4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d031      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a23      	ldr	r2, [pc, #140]	; (8002280 <HAL_DMA_IRQHandler+0x6a8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d02c      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a22      	ldr	r2, [pc, #136]	; (8002284 <HAL_DMA_IRQHandler+0x6ac>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d027      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <HAL_DMA_IRQHandler+0x6b0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d022      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1f      	ldr	r2, [pc, #124]	; (800228c <HAL_DMA_IRQHandler+0x6b4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d01d      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <HAL_DMA_IRQHandler+0x6b8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d018      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_DMA_IRQHandler+0x6bc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d013      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <HAL_DMA_IRQHandler+0x6c0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00e      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <HAL_DMA_IRQHandler+0x6c4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d009      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a17      	ldr	r2, [pc, #92]	; (80022a0 <HAL_DMA_IRQHandler+0x6c8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d004      	beq.n	8002250 <HAL_DMA_IRQHandler+0x678>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <HAL_DMA_IRQHandler+0x6cc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d12b      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x6d0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	e02a      	b.n	80022bc <HAL_DMA_IRQHandler+0x6e4>
 8002266:	bf00      	nop
 8002268:	40020010 	.word	0x40020010
 800226c:	40020028 	.word	0x40020028
 8002270:	40020040 	.word	0x40020040
 8002274:	40020058 	.word	0x40020058
 8002278:	40020070 	.word	0x40020070
 800227c:	40020088 	.word	0x40020088
 8002280:	400200a0 	.word	0x400200a0
 8002284:	400200b8 	.word	0x400200b8
 8002288:	40020410 	.word	0x40020410
 800228c:	40020428 	.word	0x40020428
 8002290:	40020440 	.word	0x40020440
 8002294:	40020458 	.word	0x40020458
 8002298:	40020470 	.word	0x40020470
 800229c:	40020488 	.word	0x40020488
 80022a0:	400204a0 	.word	0x400204a0
 80022a4:	400204b8 	.word	0x400204b8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf14      	ite	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	2300      	moveq	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8087 	beq.w	80023d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2220      	movs	r2, #32
 80022cc:	409a      	lsls	r2, r3
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d139      	bne.n	8002352 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0216 	bic.w	r2, r2, #22
 80022ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_DMA_IRQHandler+0x736>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230a:	2b00      	cmp	r3, #0
 800230c:	d007      	beq.n	800231e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0208 	bic.w	r2, r2, #8
 800231c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	223f      	movs	r2, #63	; 0x3f
 8002328:	409a      	lsls	r2, r3
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 834a 	beq.w	80029dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
          }
          return;
 8002350:	e344      	b.n	80029dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d018      	beq.n	8002392 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	2b00      	cmp	r3, #0
 8002374:	d02c      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
 800237e:	e027      	b.n	80023d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d023      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
 8002390:	e01e      	b.n	80023d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10f      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0210 	bic.w	r2, r2, #16
 80023ae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8306 	beq.w	80029e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8088 	beq.w	80024f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2204      	movs	r2, #4
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a7a      	ldr	r2, [pc, #488]	; (80025e0 <HAL_DMA_IRQHandler+0xa08>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d04a      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a79      	ldr	r2, [pc, #484]	; (80025e4 <HAL_DMA_IRQHandler+0xa0c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d045      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a77      	ldr	r2, [pc, #476]	; (80025e8 <HAL_DMA_IRQHandler+0xa10>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d040      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a76      	ldr	r2, [pc, #472]	; (80025ec <HAL_DMA_IRQHandler+0xa14>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d03b      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a74      	ldr	r2, [pc, #464]	; (80025f0 <HAL_DMA_IRQHandler+0xa18>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d036      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a73      	ldr	r2, [pc, #460]	; (80025f4 <HAL_DMA_IRQHandler+0xa1c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d031      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a71      	ldr	r2, [pc, #452]	; (80025f8 <HAL_DMA_IRQHandler+0xa20>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02c      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a70      	ldr	r2, [pc, #448]	; (80025fc <HAL_DMA_IRQHandler+0xa24>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d027      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6e      	ldr	r2, [pc, #440]	; (8002600 <HAL_DMA_IRQHandler+0xa28>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d022      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6d      	ldr	r2, [pc, #436]	; (8002604 <HAL_DMA_IRQHandler+0xa2c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d01d      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a6b      	ldr	r2, [pc, #428]	; (8002608 <HAL_DMA_IRQHandler+0xa30>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d018      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6a      	ldr	r2, [pc, #424]	; (800260c <HAL_DMA_IRQHandler+0xa34>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a68      	ldr	r2, [pc, #416]	; (8002610 <HAL_DMA_IRQHandler+0xa38>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00e      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a67      	ldr	r2, [pc, #412]	; (8002614 <HAL_DMA_IRQHandler+0xa3c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a65      	ldr	r2, [pc, #404]	; (8002618 <HAL_DMA_IRQHandler+0xa40>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_DMA_IRQHandler+0x8b8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a64      	ldr	r2, [pc, #400]	; (800261c <HAL_DMA_IRQHandler+0xa44>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d108      	bne.n	80024a2 <HAL_DMA_IRQHandler+0x8ca>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e007      	b.n	80024b2 <HAL_DMA_IRQHandler+0x8da>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3301      	adds	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d307      	bcc.n	80024ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f2      	bne.n	80024b2 <HAL_DMA_IRQHandler+0x8da>
 80024cc:	e000      	b.n	80024d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80024ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2203      	movs	r2, #3
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80024e6:	e003      	b.n	80024f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8272 	beq.w	80029e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
 800250a:	e26c      	b.n	80029e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a43      	ldr	r2, [pc, #268]	; (8002620 <HAL_DMA_IRQHandler+0xa48>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d022      	beq.n	800255c <HAL_DMA_IRQHandler+0x984>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a42      	ldr	r2, [pc, #264]	; (8002624 <HAL_DMA_IRQHandler+0xa4c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01d      	beq.n	800255c <HAL_DMA_IRQHandler+0x984>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a40      	ldr	r2, [pc, #256]	; (8002628 <HAL_DMA_IRQHandler+0xa50>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d018      	beq.n	800255c <HAL_DMA_IRQHandler+0x984>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a3f      	ldr	r2, [pc, #252]	; (800262c <HAL_DMA_IRQHandler+0xa54>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_DMA_IRQHandler+0x984>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <HAL_DMA_IRQHandler+0xa58>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00e      	beq.n	800255c <HAL_DMA_IRQHandler+0x984>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a3c      	ldr	r2, [pc, #240]	; (8002634 <HAL_DMA_IRQHandler+0xa5c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_DMA_IRQHandler+0x984>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a3a      	ldr	r2, [pc, #232]	; (8002638 <HAL_DMA_IRQHandler+0xa60>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_DMA_IRQHandler+0x984>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a39      	ldr	r2, [pc, #228]	; (800263c <HAL_DMA_IRQHandler+0xa64>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_DMA_IRQHandler+0x988>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_DMA_IRQHandler+0x98a>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 823f 	beq.w	80029e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2204      	movs	r2, #4
 800257a:	409a      	lsls	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80cd 	beq.w	8002720 <HAL_DMA_IRQHandler+0xb48>
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80c7 	beq.w	8002720 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2204      	movs	r2, #4
 800259c:	409a      	lsls	r2, r3
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d049      	beq.n	8002640 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8210 	beq.w	80029e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025c8:	e20a      	b.n	80029e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8206 	beq.w	80029e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025dc:	e200      	b.n	80029e0 <HAL_DMA_IRQHandler+0xe08>
 80025de:	bf00      	nop
 80025e0:	40020010 	.word	0x40020010
 80025e4:	40020028 	.word	0x40020028
 80025e8:	40020040 	.word	0x40020040
 80025ec:	40020058 	.word	0x40020058
 80025f0:	40020070 	.word	0x40020070
 80025f4:	40020088 	.word	0x40020088
 80025f8:	400200a0 	.word	0x400200a0
 80025fc:	400200b8 	.word	0x400200b8
 8002600:	40020410 	.word	0x40020410
 8002604:	40020428 	.word	0x40020428
 8002608:	40020440 	.word	0x40020440
 800260c:	40020458 	.word	0x40020458
 8002610:	40020470 	.word	0x40020470
 8002614:	40020488 	.word	0x40020488
 8002618:	400204a0 	.word	0x400204a0
 800261c:	400204b8 	.word	0x400204b8
 8002620:	58025408 	.word	0x58025408
 8002624:	5802541c 	.word	0x5802541c
 8002628:	58025430 	.word	0x58025430
 800262c:	58025444 	.word	0x58025444
 8002630:	58025458 	.word	0x58025458
 8002634:	5802546c 	.word	0x5802546c
 8002638:	58025480 	.word	0x58025480
 800263c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d160      	bne.n	800270c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a7f      	ldr	r2, [pc, #508]	; (800284c <HAL_DMA_IRQHandler+0xc74>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d04a      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a7d      	ldr	r2, [pc, #500]	; (8002850 <HAL_DMA_IRQHandler+0xc78>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d045      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7c      	ldr	r2, [pc, #496]	; (8002854 <HAL_DMA_IRQHandler+0xc7c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d040      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a7a      	ldr	r2, [pc, #488]	; (8002858 <HAL_DMA_IRQHandler+0xc80>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d03b      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a79      	ldr	r2, [pc, #484]	; (800285c <HAL_DMA_IRQHandler+0xc84>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d036      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a77      	ldr	r2, [pc, #476]	; (8002860 <HAL_DMA_IRQHandler+0xc88>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d031      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a76      	ldr	r2, [pc, #472]	; (8002864 <HAL_DMA_IRQHandler+0xc8c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d02c      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a74      	ldr	r2, [pc, #464]	; (8002868 <HAL_DMA_IRQHandler+0xc90>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d027      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a73      	ldr	r2, [pc, #460]	; (800286c <HAL_DMA_IRQHandler+0xc94>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d022      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a71      	ldr	r2, [pc, #452]	; (8002870 <HAL_DMA_IRQHandler+0xc98>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01d      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a70      	ldr	r2, [pc, #448]	; (8002874 <HAL_DMA_IRQHandler+0xc9c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d018      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a6e      	ldr	r2, [pc, #440]	; (8002878 <HAL_DMA_IRQHandler+0xca0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6d      	ldr	r2, [pc, #436]	; (800287c <HAL_DMA_IRQHandler+0xca4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00e      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a6b      	ldr	r2, [pc, #428]	; (8002880 <HAL_DMA_IRQHandler+0xca8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <HAL_DMA_IRQHandler+0xcac>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_DMA_IRQHandler+0xb12>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a68      	ldr	r2, [pc, #416]	; (8002888 <HAL_DMA_IRQHandler+0xcb0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d108      	bne.n	80026fc <HAL_DMA_IRQHandler+0xb24>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0208 	bic.w	r2, r2, #8
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e007      	b.n	800270c <HAL_DMA_IRQHandler+0xb34>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0204 	bic.w	r2, r2, #4
 800270a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8165 	beq.w	80029e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800271e:	e15f      	b.n	80029e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2202      	movs	r2, #2
 800272a:	409a      	lsls	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80c5 	beq.w	80028c0 <HAL_DMA_IRQHandler+0xce8>
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80bf 	beq.w	80028c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2202      	movs	r2, #2
 800274c:	409a      	lsls	r2, r3
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d018      	beq.n	800278e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 813a 	beq.w	80029e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002778:	e134      	b.n	80029e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8130 	beq.w	80029e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800278c:	e12a      	b.n	80029e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 8089 	bne.w	80028ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2b      	ldr	r2, [pc, #172]	; (800284c <HAL_DMA_IRQHandler+0xc74>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d04a      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a29      	ldr	r2, [pc, #164]	; (8002850 <HAL_DMA_IRQHandler+0xc78>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d045      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a28      	ldr	r2, [pc, #160]	; (8002854 <HAL_DMA_IRQHandler+0xc7c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d040      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a26      	ldr	r2, [pc, #152]	; (8002858 <HAL_DMA_IRQHandler+0xc80>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d03b      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a25      	ldr	r2, [pc, #148]	; (800285c <HAL_DMA_IRQHandler+0xc84>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d036      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a23      	ldr	r2, [pc, #140]	; (8002860 <HAL_DMA_IRQHandler+0xc88>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d031      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a22      	ldr	r2, [pc, #136]	; (8002864 <HAL_DMA_IRQHandler+0xc8c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d02c      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a20      	ldr	r2, [pc, #128]	; (8002868 <HAL_DMA_IRQHandler+0xc90>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d027      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_DMA_IRQHandler+0xc94>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d022      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_DMA_IRQHandler+0xc98>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01d      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_DMA_IRQHandler+0xc9c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d018      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <HAL_DMA_IRQHandler+0xca0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_DMA_IRQHandler+0xca4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00e      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a17      	ldr	r2, [pc, #92]	; (8002880 <HAL_DMA_IRQHandler+0xca8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_DMA_IRQHandler+0xcac>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d004      	beq.n	800283a <HAL_DMA_IRQHandler+0xc62>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_DMA_IRQHandler+0xcb0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d128      	bne.n	800288c <HAL_DMA_IRQHandler+0xcb4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0214 	bic.w	r2, r2, #20
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	e027      	b.n	800289c <HAL_DMA_IRQHandler+0xcc4>
 800284c:	40020010 	.word	0x40020010
 8002850:	40020028 	.word	0x40020028
 8002854:	40020040 	.word	0x40020040
 8002858:	40020058 	.word	0x40020058
 800285c:	40020070 	.word	0x40020070
 8002860:	40020088 	.word	0x40020088
 8002864:	400200a0 	.word	0x400200a0
 8002868:	400200b8 	.word	0x400200b8
 800286c:	40020410 	.word	0x40020410
 8002870:	40020428 	.word	0x40020428
 8002874:	40020440 	.word	0x40020440
 8002878:	40020458 	.word	0x40020458
 800287c:	40020470 	.word	0x40020470
 8002880:	40020488 	.word	0x40020488
 8002884:	400204a0 	.word	0x400204a0
 8002888:	400204b8 	.word	0x400204b8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 020a 	bic.w	r2, r2, #10
 800289a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8097 	beq.w	80029e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028be:	e091      	b.n	80029e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2208      	movs	r2, #8
 80028ca:	409a      	lsls	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8088 	beq.w	80029e6 <HAL_DMA_IRQHandler+0xe0e>
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8082 	beq.w	80029e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a41      	ldr	r2, [pc, #260]	; (80029ec <HAL_DMA_IRQHandler+0xe14>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d04a      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a3f      	ldr	r2, [pc, #252]	; (80029f0 <HAL_DMA_IRQHandler+0xe18>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d045      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a3e      	ldr	r2, [pc, #248]	; (80029f4 <HAL_DMA_IRQHandler+0xe1c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d040      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a3c      	ldr	r2, [pc, #240]	; (80029f8 <HAL_DMA_IRQHandler+0xe20>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d03b      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a3b      	ldr	r2, [pc, #236]	; (80029fc <HAL_DMA_IRQHandler+0xe24>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d036      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a39      	ldr	r2, [pc, #228]	; (8002a00 <HAL_DMA_IRQHandler+0xe28>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d031      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a38      	ldr	r2, [pc, #224]	; (8002a04 <HAL_DMA_IRQHandler+0xe2c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d02c      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a36      	ldr	r2, [pc, #216]	; (8002a08 <HAL_DMA_IRQHandler+0xe30>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d027      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <HAL_DMA_IRQHandler+0xe34>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d022      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a33      	ldr	r2, [pc, #204]	; (8002a10 <HAL_DMA_IRQHandler+0xe38>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01d      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a32      	ldr	r2, [pc, #200]	; (8002a14 <HAL_DMA_IRQHandler+0xe3c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d018      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a30      	ldr	r2, [pc, #192]	; (8002a18 <HAL_DMA_IRQHandler+0xe40>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <HAL_DMA_IRQHandler+0xe44>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00e      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <HAL_DMA_IRQHandler+0xe48>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2c      	ldr	r2, [pc, #176]	; (8002a24 <HAL_DMA_IRQHandler+0xe4c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_DMA_IRQHandler+0xdaa>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <HAL_DMA_IRQHandler+0xe50>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d108      	bne.n	8002994 <HAL_DMA_IRQHandler+0xdbc>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 021c 	bic.w	r2, r2, #28
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e007      	b.n	80029a4 <HAL_DMA_IRQHandler+0xdcc>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 020e 	bic.w	r2, r2, #14
 80029a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
 80029da:	e004      	b.n	80029e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80029dc:	bf00      	nop
 80029de:	e002      	b.n	80029e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40020010 	.word	0x40020010
 80029f0:	40020028 	.word	0x40020028
 80029f4:	40020040 	.word	0x40020040
 80029f8:	40020058 	.word	0x40020058
 80029fc:	40020070 	.word	0x40020070
 8002a00:	40020088 	.word	0x40020088
 8002a04:	400200a0 	.word	0x400200a0
 8002a08:	400200b8 	.word	0x400200b8
 8002a0c:	40020410 	.word	0x40020410
 8002a10:	40020428 	.word	0x40020428
 8002a14:	40020440 	.word	0x40020440
 8002a18:	40020458 	.word	0x40020458
 8002a1c:	40020470 	.word	0x40020470
 8002a20:	40020488 	.word	0x40020488
 8002a24:	400204a0 	.word	0x400204a0
 8002a28:	400204b8 	.word	0x400204b8

08002a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a42      	ldr	r2, [pc, #264]	; (8002b44 <DMA_CalcBaseAndBitshift+0x118>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d04a      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a41      	ldr	r2, [pc, #260]	; (8002b48 <DMA_CalcBaseAndBitshift+0x11c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d045      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a3f      	ldr	r2, [pc, #252]	; (8002b4c <DMA_CalcBaseAndBitshift+0x120>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d040      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a3e      	ldr	r2, [pc, #248]	; (8002b50 <DMA_CalcBaseAndBitshift+0x124>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d03b      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a3c      	ldr	r2, [pc, #240]	; (8002b54 <DMA_CalcBaseAndBitshift+0x128>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d036      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a3b      	ldr	r2, [pc, #236]	; (8002b58 <DMA_CalcBaseAndBitshift+0x12c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d031      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a39      	ldr	r2, [pc, #228]	; (8002b5c <DMA_CalcBaseAndBitshift+0x130>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02c      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a38      	ldr	r2, [pc, #224]	; (8002b60 <DMA_CalcBaseAndBitshift+0x134>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d027      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a36      	ldr	r2, [pc, #216]	; (8002b64 <DMA_CalcBaseAndBitshift+0x138>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d022      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <DMA_CalcBaseAndBitshift+0x13c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d01d      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a33      	ldr	r2, [pc, #204]	; (8002b6c <DMA_CalcBaseAndBitshift+0x140>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d018      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <DMA_CalcBaseAndBitshift+0x144>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d013      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <DMA_CalcBaseAndBitshift+0x148>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00e      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <DMA_CalcBaseAndBitshift+0x14c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d009      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2d      	ldr	r2, [pc, #180]	; (8002b7c <DMA_CalcBaseAndBitshift+0x150>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2c      	ldr	r2, [pc, #176]	; (8002b80 <DMA_CalcBaseAndBitshift+0x154>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <DMA_CalcBaseAndBitshift+0xac>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <DMA_CalcBaseAndBitshift+0xae>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d024      	beq.n	8002b28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	3b10      	subs	r3, #16
 8002ae6:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <DMA_CalcBaseAndBitshift+0x158>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <DMA_CalcBaseAndBitshift+0x15c>)
 8002af8:	5cd3      	ldrb	r3, [r2, r3]
 8002afa:	461a      	mov	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d908      	bls.n	8002b18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <DMA_CalcBaseAndBitshift+0x160>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	1d1a      	adds	r2, r3, #4
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	659a      	str	r2, [r3, #88]	; 0x58
 8002b16:	e00d      	b.n	8002b34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <DMA_CalcBaseAndBitshift+0x160>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6593      	str	r3, [r2, #88]	; 0x58
 8002b26:	e005      	b.n	8002b34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40020010 	.word	0x40020010
 8002b48:	40020028 	.word	0x40020028
 8002b4c:	40020040 	.word	0x40020040
 8002b50:	40020058 	.word	0x40020058
 8002b54:	40020070 	.word	0x40020070
 8002b58:	40020088 	.word	0x40020088
 8002b5c:	400200a0 	.word	0x400200a0
 8002b60:	400200b8 	.word	0x400200b8
 8002b64:	40020410 	.word	0x40020410
 8002b68:	40020428 	.word	0x40020428
 8002b6c:	40020440 	.word	0x40020440
 8002b70:	40020458 	.word	0x40020458
 8002b74:	40020470 	.word	0x40020470
 8002b78:	40020488 	.word	0x40020488
 8002b7c:	400204a0 	.word	0x400204a0
 8002b80:	400204b8 	.word	0x400204b8
 8002b84:	aaaaaaab 	.word	0xaaaaaaab
 8002b88:	08016aac 	.word	0x08016aac
 8002b8c:	fffffc00 	.word	0xfffffc00

08002b90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d120      	bne.n	8002be6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d858      	bhi.n	8002c5e <DMA_CheckFifoParam+0xce>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <DMA_CheckFifoParam+0x24>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002bc5 	.word	0x08002bc5
 8002bb8:	08002bd7 	.word	0x08002bd7
 8002bbc:	08002bc5 	.word	0x08002bc5
 8002bc0:	08002c5f 	.word	0x08002c5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d048      	beq.n	8002c62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002bd4:	e045      	b.n	8002c62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bde:	d142      	bne.n	8002c66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002be4:	e03f      	b.n	8002c66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bee:	d123      	bne.n	8002c38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d838      	bhi.n	8002c6a <DMA_CheckFifoParam+0xda>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <DMA_CheckFifoParam+0x70>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c17 	.word	0x08002c17
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002c29 	.word	0x08002c29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
        break;
 8002c14:	e030      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d025      	beq.n	8002c6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c26:	e022      	b.n	8002c6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c30:	d11f      	bne.n	8002c72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c36:	e01c      	b.n	8002c72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d902      	bls.n	8002c46 <DMA_CheckFifoParam+0xb6>
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d003      	beq.n	8002c4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002c44:	e018      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
        break;
 8002c4a:	e015      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8002c5c:	e00b      	b.n	8002c76 <DMA_CheckFifoParam+0xe6>
        break;
 8002c5e:	bf00      	nop
 8002c60:	e00a      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
        break;
 8002c62:	bf00      	nop
 8002c64:	e008      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
        break;
 8002c66:	bf00      	nop
 8002c68:	e006      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
        break;
 8002c6a:	bf00      	nop
 8002c6c:	e004      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
        break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
        break;
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
    break;
 8002c76:	bf00      	nop
    }
  }

  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a38      	ldr	r2, [pc, #224]	; (8002d7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d022      	beq.n	8002ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a36      	ldr	r2, [pc, #216]	; (8002d80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01d      	beq.n	8002ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a35      	ldr	r2, [pc, #212]	; (8002d84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d018      	beq.n	8002ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a33      	ldr	r2, [pc, #204]	; (8002d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a32      	ldr	r2, [pc, #200]	; (8002d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00e      	beq.n	8002ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2d      	ldr	r2, [pc, #180]	; (8002d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01a      	beq.n	8002d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3b08      	subs	r3, #8
 8002cf8:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002d14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002d24:	e024      	b.n	8002d70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3b10      	subs	r3, #16
 8002d2e:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d806      	bhi.n	8002d4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d902      	bls.n	8002d4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	461a      	mov	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002d60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	2201      	movs	r2, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	58025408 	.word	0x58025408
 8002d80:	5802541c 	.word	0x5802541c
 8002d84:	58025430 	.word	0x58025430
 8002d88:	58025444 	.word	0x58025444
 8002d8c:	58025458 	.word	0x58025458
 8002d90:	5802546c 	.word	0x5802546c
 8002d94:	58025480 	.word	0x58025480
 8002d98:	58025494 	.word	0x58025494
 8002d9c:	cccccccd 	.word	0xcccccccd
 8002da0:	16009600 	.word	0x16009600
 8002da4:	58025880 	.word	0x58025880
 8002da8:	aaaaaaab 	.word	0xaaaaaaab
 8002dac:	400204b8 	.word	0x400204b8
 8002db0:	4002040f 	.word	0x4002040f
 8002db4:	10008200 	.word	0x10008200
 8002db8:	40020880 	.word	0x40020880

08002dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d04a      	beq.n	8002e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d847      	bhi.n	8002e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a25      	ldr	r2, [pc, #148]	; (8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01d      	beq.n	8002e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002e44:	671a      	str	r2, [r3, #112]	; 0x70
 8002e46:	e009      	b.n	8002e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	461a      	mov	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002e5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	2201      	movs	r2, #1
 8002e62:	409a      	lsls	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	58025408 	.word	0x58025408
 8002e78:	5802541c 	.word	0x5802541c
 8002e7c:	58025430 	.word	0x58025430
 8002e80:	58025444 	.word	0x58025444
 8002e84:	58025458 	.word	0x58025458
 8002e88:	5802546c 	.word	0x5802546c
 8002e8c:	58025480 	.word	0x58025480
 8002e90:	58025494 	.word	0x58025494
 8002e94:	1600963f 	.word	0x1600963f
 8002e98:	58025940 	.word	0x58025940
 8002e9c:	1000823f 	.word	0x1000823f
 8002ea0:	40020940 	.word	0x40020940

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002eb2:	4b89      	ldr	r3, [pc, #548]	; (80030d8 <HAL_GPIO_Init+0x234>)
 8002eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eb6:	e194      	b.n	80031e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8186 	beq.w	80031dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d005      	beq.n	8002ee8 <HAL_GPIO_Init+0x44>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d130      	bne.n	8002f4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1e:	2201      	movs	r2, #1
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 0201 	and.w	r2, r3, #1
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d017      	beq.n	8002f86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d123      	bne.n	8002fda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	69b9      	ldr	r1, [r7, #24]
 8002fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0203 	and.w	r2, r3, #3
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80e0 	beq.w	80031dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301c:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_GPIO_Init+0x238>)
 800301e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003022:	4a2e      	ldr	r2, [pc, #184]	; (80030dc <HAL_GPIO_Init+0x238>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_GPIO_Init+0x238>)
 800302e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303a:	4a29      	ldr	r2, [pc, #164]	; (80030e0 <HAL_GPIO_Init+0x23c>)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	3302      	adds	r3, #2
 8003042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	220f      	movs	r2, #15
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <HAL_GPIO_Init+0x240>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d052      	beq.n	800310c <HAL_GPIO_Init+0x268>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_GPIO_Init+0x244>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d031      	beq.n	80030d2 <HAL_GPIO_Init+0x22e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_GPIO_Init+0x248>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d02b      	beq.n	80030ce <HAL_GPIO_Init+0x22a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_GPIO_Init+0x24c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d025      	beq.n	80030ca <HAL_GPIO_Init+0x226>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_GPIO_Init+0x250>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01f      	beq.n	80030c6 <HAL_GPIO_Init+0x222>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <HAL_GPIO_Init+0x254>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d019      	beq.n	80030c2 <HAL_GPIO_Init+0x21e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a1a      	ldr	r2, [pc, #104]	; (80030fc <HAL_GPIO_Init+0x258>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_GPIO_Init+0x21a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a19      	ldr	r2, [pc, #100]	; (8003100 <HAL_GPIO_Init+0x25c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00d      	beq.n	80030ba <HAL_GPIO_Init+0x216>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a18      	ldr	r2, [pc, #96]	; (8003104 <HAL_GPIO_Init+0x260>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <HAL_GPIO_Init+0x212>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a17      	ldr	r2, [pc, #92]	; (8003108 <HAL_GPIO_Init+0x264>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d101      	bne.n	80030b2 <HAL_GPIO_Init+0x20e>
 80030ae:	2309      	movs	r3, #9
 80030b0:	e02d      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030b2:	230a      	movs	r3, #10
 80030b4:	e02b      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030b6:	2308      	movs	r3, #8
 80030b8:	e029      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030ba:	2307      	movs	r3, #7
 80030bc:	e027      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030be:	2306      	movs	r3, #6
 80030c0:	e025      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030c2:	2305      	movs	r3, #5
 80030c4:	e023      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030c6:	2304      	movs	r3, #4
 80030c8:	e021      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030ca:	2303      	movs	r3, #3
 80030cc:	e01f      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e01d      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e01b      	b.n	800310e <HAL_GPIO_Init+0x26a>
 80030d6:	bf00      	nop
 80030d8:	58000080 	.word	0x58000080
 80030dc:	58024400 	.word	0x58024400
 80030e0:	58000400 	.word	0x58000400
 80030e4:	58020000 	.word	0x58020000
 80030e8:	58020400 	.word	0x58020400
 80030ec:	58020800 	.word	0x58020800
 80030f0:	58020c00 	.word	0x58020c00
 80030f4:	58021000 	.word	0x58021000
 80030f8:	58021400 	.word	0x58021400
 80030fc:	58021800 	.word	0x58021800
 8003100:	58021c00 	.word	0x58021c00
 8003104:	58022000 	.word	0x58022000
 8003108:	58022400 	.word	0x58022400
 800310c:	2300      	movs	r3, #0
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	f002 0203 	and.w	r2, r2, #3
 8003114:	0092      	lsls	r2, r2, #2
 8003116:	4093      	lsls	r3, r2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800311e:	4938      	ldr	r1, [pc, #224]	; (8003200 <HAL_GPIO_Init+0x35c>)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	3301      	adds	r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f47f ae63 	bne.w	8002eb8 <HAL_GPIO_Init+0x14>
  }
}
 80031f2:	bf00      	nop
 80031f4:	bf00      	nop
 80031f6:	3724      	adds	r7, #36	; 0x24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	58000400 	.word	0x58000400

08003204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
 8003210:	4613      	mov	r3, r2
 8003212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003214:	787b      	ldrb	r3, [r7, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003220:	e003      	b.n	800322a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	619a      	str	r2, [r3, #24]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003248:	887a      	ldrh	r2, [r7, #2]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	041a      	lsls	r2, r3, #16
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43d9      	mvns	r1, r3
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	400b      	ands	r3, r1
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	619a      	str	r2, [r3, #24]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800326a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326c:	b08f      	sub	sp, #60	; 0x3c
 800326e:	af0a      	add	r7, sp, #40	; 0x28
 8003270:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e116      	b.n	80034aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f012 fb44 	bl	8015924 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2203      	movs	r2, #3
 80032a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f008 f895 	bl	800b3ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	687e      	ldr	r6, [r7, #4]
 80032c8:	466d      	mov	r5, sp
 80032ca:	f106 0410 	add.w	r4, r6, #16
 80032ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032da:	e885 0003 	stmia.w	r5, {r0, r1}
 80032de:	1d33      	adds	r3, r6, #4
 80032e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e2:	6838      	ldr	r0, [r7, #0]
 80032e4:	f007 ff60 	bl	800b1a8 <USB_CoreInit>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0d7      	b.n	80034aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f008 f883 	bl	800b40c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
 800330a:	e04a      	b.n	80033a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	333d      	adds	r3, #61	; 0x3d
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	333c      	adds	r3, #60	; 0x3c
 8003330:	7bfa      	ldrb	r2, [r7, #15]
 8003332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	b298      	uxth	r0, r3
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3356      	adds	r3, #86	; 0x56
 8003348:	4602      	mov	r2, r0
 800334a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3340      	adds	r3, #64	; 0x40
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3344      	adds	r3, #68	; 0x44
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3348      	adds	r3, #72	; 0x48
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334c      	adds	r3, #76	; 0x4c
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	3301      	adds	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d3af      	bcc.n	800330c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e044      	b.n	800343c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	3301      	adds	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d3b5      	bcc.n	80033b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	687e      	ldr	r6, [r7, #4]
 800344e:	466d      	mov	r5, sp
 8003450:	f106 0410 	add.w	r4, r6, #16
 8003454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800345a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800345c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003460:	e885 0003 	stmia.w	r5, {r0, r1}
 8003464:	1d33      	adds	r3, r6, #4
 8003466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003468:	6838      	ldr	r0, [r7, #0]
 800346a:	f008 f81b 	bl	800b4a4 <USB_DevInit>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e014      	b.n	80034aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b01      	cmp	r3, #1
 8003496:	d102      	bne.n	800349e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f001 f99d 	bl	80047d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f009 f85d 	bl	800c562 <USB_DevDisconnect>

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_PCD_Start+0x1c>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e022      	b.n	8003514 <HAL_PCD_Start+0x62>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f007 ff64 	bl	800b3c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f009 f80b 	bl	800c520 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b08d      	sub	sp, #52	; 0x34
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f009 f8c9 	bl	800c6ca <USB_GetMode>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 84b7 	bne.w	8003eae <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f009 f82d 	bl	800c5a4 <USB_ReadInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 84ad 	beq.w	8003eac <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f009 f81a 	bl	800c5a4 <USB_ReadInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d107      	bne.n	800358a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f002 0202 	and.w	r2, r2, #2
 8003588:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f009 f808 	bl	800c5a4 <USB_ReadInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b10      	cmp	r3, #16
 800359c:	d161      	bne.n	8003662 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0210 	bic.w	r2, r2, #16
 80035ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f003 020f 	and.w	r2, r3, #15
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	0c5b      	lsrs	r3, r3, #17
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d124      	bne.n	8003624 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d035      	beq.n	8003652 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	6a38      	ldr	r0, [r7, #32]
 80035fa:	f008 fe3f 	bl	800c27c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800360a:	441a      	add	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800361c:	441a      	add	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	615a      	str	r2, [r3, #20]
 8003622:	e016      	b.n	8003652 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	0c5b      	lsrs	r3, r3, #17
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	2b06      	cmp	r3, #6
 800362e:	d110      	bne.n	8003652 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003636:	2208      	movs	r2, #8
 8003638:	4619      	mov	r1, r3
 800363a:	6a38      	ldr	r0, [r7, #32]
 800363c:	f008 fe1e 	bl	800c27c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800364c:	441a      	add	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0210 	orr.w	r2, r2, #16
 8003660:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f008 ff9c 	bl	800c5a4 <USB_ReadInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003672:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003676:	f040 80a7 	bne.w	80037c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f008 ffa1 	bl	800c5ca <USB_ReadDevAllOutEpInterrupt>
 8003688:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800368a:	e099      	b.n	80037c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 808e 	beq.w	80037b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f008 ffc5 	bl	800c632 <USB_ReadDevOutEPInterrupt>
 80036a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00c      	beq.n	80036ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c0:	461a      	mov	r2, r3
 80036c2:	2301      	movs	r3, #1
 80036c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80036c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 feff 	bl	80044cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00c      	beq.n	80036f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e4:	461a      	mov	r2, r3
 80036e6:	2308      	movs	r3, #8
 80036e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80036ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 ffd5 	bl	800469c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003708:	461a      	mov	r2, r3
 800370a:	2310      	movs	r3, #16
 800370c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d030      	beq.n	800377a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d109      	bne.n	8003738 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003736:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	78db      	ldrb	r3, [r3, #3]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d108      	bne.n	8003768 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2200      	movs	r2, #0
 800375a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	b2db      	uxtb	r3, r3
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f012 fa04 	bl	8015b70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	2302      	movs	r3, #2
 8003778:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003790:	461a      	mov	r2, r3
 8003792:	2320      	movs	r3, #32
 8003794:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d009      	beq.n	80037b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ac:	461a      	mov	r2, r3
 80037ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	3301      	adds	r3, #1
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	085b      	lsrs	r3, r3, #1
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f47f af62 	bne.w	800368c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f008 fee9 	bl	800c5a4 <USB_ReadInterrupts>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037dc:	f040 80db 	bne.w	8003996 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f008 ff0a 	bl	800c5fe <USB_ReadDevAllInEpInterrupt>
 80037ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80037f0:	e0cd      	b.n	800398e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80c2 	beq.w	8003982 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f008 ff30 	bl	800c66e <USB_ReadDevInEPInterrupt>
 800380e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d057      	beq.n	80038ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	2201      	movs	r2, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	43db      	mvns	r3, r3
 8003834:	69f9      	ldr	r1, [r7, #28]
 8003836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800383a:	4013      	ands	r3, r2
 800383c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384a:	461a      	mov	r2, r3
 800384c:	2301      	movs	r3, #1
 800384e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d132      	bne.n	80038be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	3348      	adds	r3, #72	; 0x48
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4403      	add	r3, r0
 8003878:	3344      	adds	r3, #68	; 0x44
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4419      	add	r1, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4403      	add	r3, r0
 800388c:	3348      	adds	r3, #72	; 0x48
 800388e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d113      	bne.n	80038be <HAL_PCD_IRQHandler+0x3a2>
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334c      	adds	r3, #76	; 0x4c
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d108      	bne.n	80038be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038b6:	461a      	mov	r2, r3
 80038b8:	2101      	movs	r1, #1
 80038ba:	f008 ff39 	bl	800c730 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f012 f8ce 	bl	8015a66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e0:	461a      	mov	r2, r3
 80038e2:	2308      	movs	r3, #8
 80038e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fc:	461a      	mov	r2, r3
 80038fe:	2310      	movs	r3, #16
 8003900:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003918:	461a      	mov	r2, r3
 800391a:	2340      	movs	r3, #64	; 0x40
 800391c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d023      	beq.n	8003970 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800392a:	6a38      	ldr	r0, [r7, #32]
 800392c:	f007 ff18 	bl	800b760 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	3338      	adds	r3, #56	; 0x38
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	3304      	adds	r3, #4
 8003942:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	78db      	ldrb	r3, [r3, #3]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d108      	bne.n	800395e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2200      	movs	r2, #0
 8003950:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	b2db      	uxtb	r3, r3
 8003956:	4619      	mov	r1, r3
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f012 f91b 	bl	8015b94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	461a      	mov	r2, r3
 800396c:	2302      	movs	r3, #2
 800396e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800397a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fd17 	bl	80043b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	3301      	adds	r3, #1
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	f47f af2e 	bne.w	80037f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f008 fe02 	bl	800c5a4 <USB_ReadInterrupts>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039aa:	d122      	bne.n	80039f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d108      	bne.n	80039dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039d2:	2100      	movs	r1, #0
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 ff23 	bl	8004820 <HAL_PCDEx_LPM_Callback>
 80039da:	e002      	b.n	80039e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f012 f8b9 	bl	8015b54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80039f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f008 fdd4 	bl	800c5a4 <USB_ReadInterrupts>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a06:	d112      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f012 f875 	bl	8015b08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f008 fdb6 	bl	800c5a4 <USB_ReadInterrupts>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a42:	d121      	bne.n	8003a88 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003a52:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d111      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	f003 020f 	and.w	r2, r3, #15
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a78:	2101      	movs	r1, #1
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fed0 	bl	8004820 <HAL_PCDEx_LPM_Callback>
 8003a80:	e002      	b.n	8003a88 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f012 f840 	bl	8015b08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f008 fd89 	bl	800c5a4 <USB_ReadInterrupts>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9c:	f040 80b7 	bne.w	8003c0e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2110      	movs	r1, #16
 8003aba:	4618      	mov	r0, r3
 8003abc:	f007 fe50 	bl	800b760 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac4:	e046      	b.n	8003b54 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ad8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003af8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	461a      	mov	r2, r3
 8003b08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b1e:	0151      	lsls	r1, r2, #5
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	440a      	add	r2, r1
 8003b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b3e:	0151      	lsls	r1, r2, #5
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	440a      	add	r2, r1
 8003b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	3301      	adds	r3, #1
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d3b3      	bcc.n	8003ac6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b6c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b8a:	f043 030b 	orr.w	r3, r3, #11
 8003b8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba0:	f043 030b 	orr.w	r3, r3, #11
 8003ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba6:	e015      	b.n	8003bd4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f242 032b 	movw	r3, #8235	; 0x202b
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bce:	f043 030b 	orr.w	r3, r3, #11
 8003bd2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003be6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f008 fd99 	bl	800c730 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f008 fcc6 	bl	800c5a4 <USB_ReadInterrupts>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c22:	d124      	bne.n	8003c6e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f008 fd5d 	bl	800c6e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f007 fe11 	bl	800b85a <USB_GetDevSpeed>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681c      	ldr	r4, [r3, #0]
 8003c44:	f001 fdcc 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8003c48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	4620      	mov	r0, r4
 8003c54:	f007 fb16 	bl	800b284 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f011 ff2c 	bl	8015ab6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f008 fc96 	bl	800c5a4 <USB_ReadInterrupts>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d10a      	bne.n	8003c98 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f011 ff09 	bl	8015a9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f002 0208 	and.w	r2, r2, #8
 8003c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f008 fc81 	bl	800c5a4 <USB_ReadInterrupts>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca8:	2b80      	cmp	r3, #128	; 0x80
 8003caa:	d122      	bne.n	8003cf2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cb8:	2301      	movs	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbc:	e014      	b.n	8003ce8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d105      	bne.n	8003ce2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fb09 	bl	80042f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d3e5      	bcc.n	8003cbe <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f008 fc54 	bl	800c5a4 <USB_ReadInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d06:	d13b      	bne.n	8003d80 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d08:	2301      	movs	r3, #1
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	e02b      	b.n	8003d66 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3340      	adds	r3, #64	; 0x40
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d115      	bne.n	8003d60 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da12      	bge.n	8003d60 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	333f      	adds	r3, #63	; 0x3f
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 faca 	bl	80042f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	3301      	adds	r3, #1
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d3ce      	bcc.n	8003d0e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f008 fc0d 	bl	800c5a4 <USB_ReadInterrupts>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d94:	d155      	bne.n	8003e42 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d96:	2301      	movs	r3, #1
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	e045      	b.n	8003e28 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d12e      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003dc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	da2b      	bge.n	8003e22 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003dd6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d121      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003df0:	2201      	movs	r2, #1
 8003df2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e1e:	6053      	str	r3, [r2, #4]
            break;
 8003e20:	e007      	b.n	8003e32 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	3301      	adds	r3, #1
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d3b4      	bcc.n	8003d9c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f008 fbac 	bl	800c5a4 <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e56:	d10a      	bne.n	8003e6e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f011 fead 	bl	8015bb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f008 fb96 	bl	800c5a4 <USB_ReadInterrupts>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d115      	bne.n	8003eae <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f011 fe9d 	bl	8015bd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	e000      	b.n	8003eae <HAL_PCD_IRQHandler+0x992>
      return;
 8003eac:	bf00      	nop
    }
  }
}
 8003eae:	3734      	adds	r7, #52	; 0x34
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd90      	pop	{r4, r7, pc}

08003eb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_PCD_SetAddress+0x1a>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e013      	b.n	8003ef6 <HAL_PCD_SetAddress+0x42>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f008 faf4 	bl	800c4d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	4608      	mov	r0, r1
 8003f08:	4611      	mov	r1, r2
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	70fb      	strb	r3, [r7, #3]
 8003f10:	460b      	mov	r3, r1
 8003f12:	803b      	strh	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	da0f      	bge.n	8003f44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	f003 020f 	and.w	r2, r3, #15
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	3338      	adds	r3, #56	; 0x38
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4413      	add	r3, r2
 8003f38:	3304      	adds	r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	705a      	strb	r2, [r3, #1]
 8003f42:	e00f      	b.n	8003f64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	f003 020f 	and.w	r2, r3, #15
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f70:	883a      	ldrh	r2, [r7, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	78ba      	ldrb	r2, [r7, #2]
 8003f7a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	785b      	ldrb	r3, [r3, #1]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f8e:	78bb      	ldrb	r3, [r7, #2]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d102      	bne.n	8003f9a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_PCD_EP_Open+0xaa>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e00e      	b.n	8003fc6 <HAL_PCD_EP_Open+0xc8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68f9      	ldr	r1, [r7, #12]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f007 fc74 	bl	800b8a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003fc4:	7afb      	ldrb	r3, [r7, #11]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da0f      	bge.n	8004002 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	f003 020f 	and.w	r2, r3, #15
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	3338      	adds	r3, #56	; 0x38
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	705a      	strb	r2, [r3, #1]
 8004000:	e00f      	b.n	8004022 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	f003 020f 	and.w	r2, r3, #15
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	3304      	adds	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_PCD_EP_Close+0x6e>
 8004038:	2302      	movs	r3, #2
 800403a:	e00e      	b.n	800405a <HAL_PCD_EP_Close+0x8c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	4618      	mov	r0, r3
 800404c:	f007 fcb2 	bl	800b9b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	460b      	mov	r3, r1
 8004070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004072:	7afb      	ldrb	r3, [r7, #11]
 8004074:	f003 020f 	and.w	r2, r3, #15
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	3304      	adds	r3, #4
 800408a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2200      	movs	r2, #0
 800409c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2200      	movs	r2, #0
 80040a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040a4:	7afb      	ldrb	r3, [r7, #11]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d102      	bne.n	80040be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	6979      	ldr	r1, [r7, #20]
 80040cc:	f007 fd4e 	bl	800bb6c <USB_EPStartXfer>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	460b      	mov	r3, r1
 80040e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 020f 	and.w	r2, r3, #15
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80040fc:	681b      	ldr	r3, [r3, #0]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	460b      	mov	r3, r1
 8004118:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411a:	7afb      	ldrb	r3, [r7, #11]
 800411c:	f003 020f 	and.w	r2, r3, #15
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	3338      	adds	r3, #56	; 0x38
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4413      	add	r3, r2
 800412e:	3304      	adds	r3, #4
 8004130:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2201      	movs	r2, #1
 8004148:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800414a:	7afb      	ldrb	r3, [r7, #11]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	b2da      	uxtb	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d102      	bne.n	8004164 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	6979      	ldr	r1, [r7, #20]
 8004172:	f007 fcfb 	bl	800bb6c <USB_EPStartXfer>

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	f003 020f 	and.w	r2, r3, #15
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d901      	bls.n	800419e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e050      	b.n	8004240 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800419e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	da0f      	bge.n	80041c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	f003 020f 	and.w	r2, r3, #15
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	3338      	adds	r3, #56	; 0x38
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	3304      	adds	r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	705a      	strb	r2, [r3, #1]
 80041c4:	e00d      	b.n	80041e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	4613      	mov	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_PCD_EP_SetStall+0x82>
 80041fe:	2302      	movs	r3, #2
 8004200:	e01e      	b.n	8004240 <HAL_PCD_EP_SetStall+0xc0>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	4618      	mov	r0, r3
 8004212:	f008 f88b 	bl	800c32c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	b2d9      	uxtb	r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004230:	461a      	mov	r2, r3
 8004232:	f008 fa7d 	bl	800c730 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	f003 020f 	and.w	r2, r3, #15
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	d901      	bls.n	8004266 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e042      	b.n	80042ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800426a:	2b00      	cmp	r3, #0
 800426c:	da0f      	bge.n	800428e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	f003 020f 	and.w	r2, r3, #15
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	3338      	adds	r3, #56	; 0x38
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	3304      	adds	r3, #4
 8004284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	705a      	strb	r2, [r3, #1]
 800428c:	e00f      	b.n	80042ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	f003 020f 	and.w	r2, r3, #15
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	4413      	add	r3, r2
 80042a4:	3304      	adds	r3, #4
 80042a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_PCD_EP_ClrStall+0x86>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e00e      	b.n	80042ec <HAL_PCD_EP_ClrStall+0xa4>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	4618      	mov	r0, r3
 80042de:	f008 f893 	bl	800c408 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004304:	2b00      	cmp	r3, #0
 8004306:	da0c      	bge.n	8004322 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 020f 	and.w	r2, r3, #15
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	3338      	adds	r3, #56	; 0x38
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	4413      	add	r3, r2
 800431c:	3304      	adds	r3, #4
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e00c      	b.n	800433c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	f003 020f 	and.w	r2, r3, #15
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	4413      	add	r3, r2
 8004338:	3304      	adds	r3, #4
 800433a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68f9      	ldr	r1, [r7, #12]
 8004342:	4618      	mov	r0, r3
 8004344:	f007 feb2 	bl	800c0ac <USB_EPStopXfer>
 8004348:	4603      	mov	r3, r0
 800434a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800434c:	7afb      	ldrb	r3, [r7, #11]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	460b      	mov	r3, r1
 8004360:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_PCD_EP_Flush+0x1a>
 800436c:	2302      	movs	r3, #2
 800436e:	e01b      	b.n	80043a8 <HAL_PCD_EP_Flush+0x52>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800437c:	2b00      	cmp	r3, #0
 800437e:	da09      	bge.n	8004394 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f007 f9e7 	bl	800b760 <USB_FlushTxFifo>
 8004392:	e004      	b.n	800439e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f007 fa15 	bl	800b7c8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	3338      	adds	r3, #56	; 0x38
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	3304      	adds	r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	695a      	ldr	r2, [r3, #20]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d901      	bls.n	80043e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e06c      	b.n	80044c2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d902      	bls.n	8004404 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3303      	adds	r3, #3
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800440c:	e02b      	b.n	8004466 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	429a      	cmp	r2, r3
 8004422:	d902      	bls.n	800442a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3303      	adds	r3, #3
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	68d9      	ldr	r1, [r3, #12]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004442:	b2db      	uxtb	r3, r3
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4603      	mov	r3, r0
 8004448:	6978      	ldr	r0, [r7, #20]
 800444a:	f007 fed9 	bl	800c200 <USB_WritePacket>

    ep->xfer_buff  += len;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	441a      	add	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	441a      	add	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	429a      	cmp	r2, r3
 800447a:	d809      	bhi.n	8004490 <PCD_WriteEmptyTxFifo+0xe0>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004484:	429a      	cmp	r2, r3
 8004486:	d203      	bcs.n	8004490 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1be      	bne.n	800440e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	429a      	cmp	r2, r3
 800449a:	d811      	bhi.n	80044c0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	2201      	movs	r2, #1
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	6939      	ldr	r1, [r7, #16]
 80044b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044bc:	4013      	ands	r3, r2
 80044be:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	333c      	adds	r3, #60	; 0x3c
 80044e4:	3304      	adds	r3, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d17b      	bne.n	80045fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	4a61      	ldr	r2, [pc, #388]	; (8004694 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	f240 80b9 	bls.w	8004688 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80b3 	beq.w	8004688 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	461a      	mov	r2, r3
 8004530:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004534:	6093      	str	r3, [r2, #8]
 8004536:	e0a7      	b.n	8004688 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	461a      	mov	r2, r3
 8004550:	2320      	movs	r3, #32
 8004552:	6093      	str	r3, [r2, #8]
 8004554:	e098      	b.n	8004688 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 8093 	bne.w	8004688 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4a4b      	ldr	r2, [pc, #300]	; (8004694 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d90f      	bls.n	800458a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004580:	461a      	mov	r2, r3
 8004582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004586:	6093      	str	r3, [r2, #8]
 8004588:	e07e      	b.n	8004688 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4413      	add	r3, r2
 800459c:	3304      	adds	r3, #4
 800459e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a1a      	ldr	r2, [r3, #32]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	0159      	lsls	r1, r3, #5
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	440b      	add	r3, r1
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d114      	bne.n	80045ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045d4:	461a      	mov	r2, r3
 80045d6:	2101      	movs	r1, #1
 80045d8:	f008 f8aa 	bl	800c730 <USB_EP0_OutStart>
 80045dc:	e006      	b.n	80045ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	441a      	add	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f011 fa1c 	bl	8015a30 <HAL_PCD_DataOutStageCallback>
 80045f8:	e046      	b.n	8004688 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4a26      	ldr	r2, [pc, #152]	; (8004698 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d124      	bne.n	800464c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	461a      	mov	r2, r3
 800461a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461e:	6093      	str	r3, [r2, #8]
 8004620:	e032      	b.n	8004688 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	461a      	mov	r2, r3
 800463a:	2320      	movs	r3, #32
 800463c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	4619      	mov	r1, r3
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f011 f9f3 	bl	8015a30 <HAL_PCD_DataOutStageCallback>
 800464a:	e01d      	b.n	8004688 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d114      	bne.n	800467c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004674:	461a      	mov	r2, r3
 8004676:	2100      	movs	r1, #0
 8004678:	f008 f85a 	bl	800c730 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f011 f9d4 	bl	8015a30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	4f54300a 	.word	0x4f54300a
 8004698:	4f54310a 	.word	0x4f54310a

0800469c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	333c      	adds	r3, #60	; 0x3c
 80046b4:	3304      	adds	r3, #4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <PCD_EP_OutSetupPacket_int+0x88>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d90e      	bls.n	80046f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	461a      	mov	r2, r3
 80046ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f011 f98b 	bl	8015a0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <PCD_EP_OutSetupPacket_int+0x88>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d90c      	bls.n	8004718 <PCD_EP_OutSetupPacket_int+0x7c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d108      	bne.n	8004718 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004710:	461a      	mov	r2, r3
 8004712:	2101      	movs	r1, #1
 8004714:	f008 f80c 	bl	800c730 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	4f54300a 	.word	0x4f54300a

08004728 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
 8004734:	4613      	mov	r3, r2
 8004736:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d107      	bne.n	8004756 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004746:	883b      	ldrh	r3, [r7, #0]
 8004748:	0419      	lsls	r1, r3, #16
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	430a      	orrs	r2, r1
 8004752:	629a      	str	r2, [r3, #40]	; 0x28
 8004754:	e028      	b.n	80047a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	4413      	add	r3, r2
 8004762:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004764:	2300      	movs	r3, #0
 8004766:	73fb      	strb	r3, [r7, #15]
 8004768:	e00d      	b.n	8004786 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	3340      	adds	r3, #64	; 0x40
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4413      	add	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	3301      	adds	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
 8004786:	7bfa      	ldrb	r2, [r7, #15]
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	3b01      	subs	r3, #1
 800478c:	429a      	cmp	r2, r3
 800478e:	d3ec      	bcc.n	800476a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004790:	883b      	ldrh	r3, [r7, #0]
 8004792:	0418      	lsls	r0, r3, #16
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6819      	ldr	r1, [r3, #0]
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	3b01      	subs	r3, #1
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	4302      	orrs	r2, r0
 80047a0:	3340      	adds	r3, #64	; 0x40
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	887a      	ldrh	r2, [r7, #2]
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_PCDEx_ActivateLPM+0x44>)
 8004808:	4313      	orrs	r3, r2
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	10000003 	.word	0x10000003

08004820 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b04      	cmp	r3, #4
 800484a:	d00a      	beq.n	8004862 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800484c:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <HAL_PWREx_ConfigSupply+0x70>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	429a      	cmp	r2, r3
 8004858:	d001      	beq.n	800485e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e01f      	b.n	800489e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e01d      	b.n	800489e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f023 0207 	bic.w	r2, r3, #7
 800486a:	490f      	ldr	r1, [pc, #60]	; (80048a8 <HAL_PWREx_ConfigSupply+0x70>)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4313      	orrs	r3, r2
 8004870:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004872:	f7fc fac3 	bl	8000dfc <HAL_GetTick>
 8004876:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004878:	e009      	b.n	800488e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800487a:	f7fc fabf 	bl	8000dfc <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004888:	d901      	bls.n	800488e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e007      	b.n	800489e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489a:	d1ee      	bne.n	800487a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	58024800 	.word	0x58024800

080048ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80048b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ba:	60d3      	str	r3, [r2, #12]
}
 80048bc:	bf00      	nop
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	58024800 	.word	0x58024800

080048cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08c      	sub	sp, #48	; 0x30
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f000 bc48 	b.w	8005170 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8088 	beq.w	80049fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ee:	4b99      	ldr	r3, [pc, #612]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048f8:	4b96      	ldr	r3, [pc, #600]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004900:	2b10      	cmp	r3, #16
 8004902:	d007      	beq.n	8004914 <HAL_RCC_OscConfig+0x48>
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	2b18      	cmp	r3, #24
 8004908:	d111      	bne.n	800492e <HAL_RCC_OscConfig+0x62>
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d10c      	bne.n	800492e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	4b8f      	ldr	r3, [pc, #572]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d06d      	beq.n	80049fc <HAL_RCC_OscConfig+0x130>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d169      	bne.n	80049fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f000 bc21 	b.w	8005170 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004936:	d106      	bne.n	8004946 <HAL_RCC_OscConfig+0x7a>
 8004938:	4b86      	ldr	r3, [pc, #536]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a85      	ldr	r2, [pc, #532]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 800493e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	e02e      	b.n	80049a4 <HAL_RCC_OscConfig+0xd8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x9c>
 800494e:	4b81      	ldr	r3, [pc, #516]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a80      	ldr	r2, [pc, #512]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4b7e      	ldr	r3, [pc, #504]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a7d      	ldr	r2, [pc, #500]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e01d      	b.n	80049a4 <HAL_RCC_OscConfig+0xd8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004970:	d10c      	bne.n	800498c <HAL_RCC_OscConfig+0xc0>
 8004972:	4b78      	ldr	r3, [pc, #480]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a77      	ldr	r2, [pc, #476]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4b75      	ldr	r3, [pc, #468]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a74      	ldr	r2, [pc, #464]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e00b      	b.n	80049a4 <HAL_RCC_OscConfig+0xd8>
 800498c:	4b71      	ldr	r3, [pc, #452]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a70      	ldr	r2, [pc, #448]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b6e      	ldr	r3, [pc, #440]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a6d      	ldr	r2, [pc, #436]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 800499e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d013      	beq.n	80049d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fc fa26 	bl	8000dfc <HAL_GetTick>
 80049b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fc fa22 	bl	8000dfc <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	; 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e3d4      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049c6:	4b63      	ldr	r3, [pc, #396]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0xe8>
 80049d2:	e014      	b.n	80049fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fc fa12 	bl	8000dfc <HAL_GetTick>
 80049d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049dc:	f7fc fa0e 	bl	8000dfc <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b64      	cmp	r3, #100	; 0x64
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e3c0      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ee:	4b59      	ldr	r3, [pc, #356]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x110>
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80ca 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0c:	4b51      	ldr	r3, [pc, #324]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a16:	4b4f      	ldr	r3, [pc, #316]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <HAL_RCC_OscConfig+0x166>
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	2b18      	cmp	r3, #24
 8004a26:	d156      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x20a>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d151      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a32:	4b48      	ldr	r3, [pc, #288]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_RCC_OscConfig+0x17e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e392      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a4a:	4b42      	ldr	r3, [pc, #264]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 0219 	bic.w	r2, r3, #25
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	493f      	ldr	r1, [pc, #252]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fc f9ce 	bl	8000dfc <HAL_GetTick>
 8004a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a64:	f7fc f9ca 	bl	8000dfc <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e37c      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a76:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	f7fc f9eb 	bl	8000e5c <HAL_GetREVID>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d817      	bhi.n	8004ac0 <HAL_RCC_OscConfig+0x1f4>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d108      	bne.n	8004aaa <HAL_RCC_OscConfig+0x1de>
 8004a98:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004aa0:	4a2c      	ldr	r2, [pc, #176]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa8:	e07a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aaa:	4b2a      	ldr	r3, [pc, #168]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	031b      	lsls	r3, r3, #12
 8004ab8:	4926      	ldr	r1, [pc, #152]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004abe:	e06f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	4921      	ldr	r1, [pc, #132]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad4:	e064      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d047      	beq.n	8004b6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 0219 	bic.w	r2, r3, #25
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	491a      	ldr	r1, [pc, #104]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fc f984 	bl	8000dfc <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af8:	f7fc f980 	bl	8000dfc <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e332      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b0a:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b16:	f7fc f9a1 	bl	8000e5c <HAL_GetREVID>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d819      	bhi.n	8004b58 <HAL_RCC_OscConfig+0x28c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d108      	bne.n	8004b3e <HAL_RCC_OscConfig+0x272>
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b34:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3a:	6053      	str	r3, [r2, #4]
 8004b3c:	e030      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	031b      	lsls	r3, r3, #12
 8004b4c:	4901      	ldr	r1, [pc, #4]	; (8004b54 <HAL_RCC_OscConfig+0x288>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	604b      	str	r3, [r1, #4]
 8004b52:	e025      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
 8004b54:	58024400 	.word	0x58024400
 8004b58:	4b9a      	ldr	r3, [pc, #616]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	4997      	ldr	r1, [pc, #604]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	604b      	str	r3, [r1, #4]
 8004b6c:	e018      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6e:	4b95      	ldr	r3, [pc, #596]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a94      	ldr	r2, [pc, #592]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fc f93f 	bl	8000dfc <HAL_GetTick>
 8004b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b82:	f7fc f93b 	bl	8000dfc <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e2ed      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b94:	4b8b      	ldr	r3, [pc, #556]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80a9 	beq.w	8004d00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bae:	4b85      	ldr	r3, [pc, #532]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bb8:	4b82      	ldr	r3, [pc, #520]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d007      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x308>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b18      	cmp	r3, #24
 8004bc8:	d13a      	bne.n	8004c40 <HAL_RCC_OscConfig+0x374>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d135      	bne.n	8004c40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bd4:	4b7b      	ldr	r3, [pc, #492]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_OscConfig+0x320>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	2b80      	cmp	r3, #128	; 0x80
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e2c1      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bec:	f7fc f936 	bl	8000e5c <HAL_GetREVID>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d817      	bhi.n	8004c2a <HAL_RCC_OscConfig+0x35e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d108      	bne.n	8004c14 <HAL_RCC_OscConfig+0x348>
 8004c02:	4b70      	ldr	r3, [pc, #448]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c0a:	4a6e      	ldr	r2, [pc, #440]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c12:	e075      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c14:	4b6b      	ldr	r3, [pc, #428]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	069b      	lsls	r3, r3, #26
 8004c22:	4968      	ldr	r1, [pc, #416]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c28:	e06a      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c2a:	4b66      	ldr	r3, [pc, #408]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	4962      	ldr	r1, [pc, #392]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c3e:	e05f      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d042      	beq.n	8004cce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c48:	4b5e      	ldr	r3, [pc, #376]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a5d      	ldr	r2, [pc, #372]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fc f8d2 	bl	8000dfc <HAL_GetTick>
 8004c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c5c:	f7fc f8ce 	bl	8000dfc <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e280      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c6e:	4b55      	ldr	r3, [pc, #340]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c7a:	f7fc f8ef 	bl	8000e5c <HAL_GetREVID>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d817      	bhi.n	8004cb8 <HAL_RCC_OscConfig+0x3ec>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d108      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x3d6>
 8004c90:	4b4c      	ldr	r3, [pc, #304]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c98:	4a4a      	ldr	r2, [pc, #296]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c9e:	6053      	str	r3, [r2, #4]
 8004ca0:	e02e      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
 8004ca2:	4b48      	ldr	r3, [pc, #288]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	069b      	lsls	r3, r3, #26
 8004cb0:	4944      	ldr	r1, [pc, #272]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	604b      	str	r3, [r1, #4]
 8004cb6:	e023      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
 8004cb8:	4b42      	ldr	r3, [pc, #264]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	493f      	ldr	r1, [pc, #252]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60cb      	str	r3, [r1, #12]
 8004ccc:	e018      	b.n	8004d00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cce:	4b3d      	ldr	r3, [pc, #244]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a3c      	ldr	r2, [pc, #240]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cda:	f7fc f88f 	bl	8000dfc <HAL_GetTick>
 8004cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ce2:	f7fc f88b 	bl	8000dfc <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e23d      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cf4:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d036      	beq.n	8004d7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d019      	beq.n	8004d48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d14:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d18:	4a2a      	ldr	r2, [pc, #168]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fc f86c 	bl	8000dfc <HAL_GetTick>
 8004d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d28:	f7fc f868 	bl	8000dfc <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e21a      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x45c>
 8004d46:	e018      	b.n	8004d7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d48:	4b1e      	ldr	r3, [pc, #120]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fc f852 	bl	8000dfc <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5c:	f7fc f84e 	bl	8000dfc <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e200      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d039      	beq.n	8004dfa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01c      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a0c      	ldr	r2, [pc, #48]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d9a:	f7fc f82f 	bl	8000dfc <HAL_GetTick>
 8004d9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004da2:	f7fc f82b 	bl	8000dfc <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e1dd      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004db4:	4b03      	ldr	r3, [pc, #12]	; (8004dc4 <HAL_RCC_OscConfig+0x4f8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0f0      	beq.n	8004da2 <HAL_RCC_OscConfig+0x4d6>
 8004dc0:	e01b      	b.n	8004dfa <HAL_RCC_OscConfig+0x52e>
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dc8:	4b9b      	ldr	r3, [pc, #620]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a9a      	ldr	r2, [pc, #616]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dd4:	f7fc f812 	bl	8000dfc <HAL_GetTick>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ddc:	f7fc f80e 	bl	8000dfc <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e1c0      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dee:	4b92      	ldr	r3, [pc, #584]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8081 	beq.w	8004f0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e08:	4b8c      	ldr	r3, [pc, #560]	; (800503c <HAL_RCC_OscConfig+0x770>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a8b      	ldr	r2, [pc, #556]	; (800503c <HAL_RCC_OscConfig+0x770>)
 8004e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e14:	f7fb fff2 	bl	8000dfc <HAL_GetTick>
 8004e18:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1c:	f7fb ffee 	bl	8000dfc <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e1a0      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e2e:	4b83      	ldr	r3, [pc, #524]	; (800503c <HAL_RCC_OscConfig+0x770>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d106      	bne.n	8004e50 <HAL_RCC_OscConfig+0x584>
 8004e42:	4b7d      	ldr	r3, [pc, #500]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	4a7c      	ldr	r2, [pc, #496]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4e:	e02d      	b.n	8004eac <HAL_RCC_OscConfig+0x5e0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10c      	bne.n	8004e72 <HAL_RCC_OscConfig+0x5a6>
 8004e58:	4b77      	ldr	r3, [pc, #476]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5c:	4a76      	ldr	r2, [pc, #472]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	6713      	str	r3, [r2, #112]	; 0x70
 8004e64:	4b74      	ldr	r3, [pc, #464]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	4a73      	ldr	r2, [pc, #460]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e6a:	f023 0304 	bic.w	r3, r3, #4
 8004e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e70:	e01c      	b.n	8004eac <HAL_RCC_OscConfig+0x5e0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x5c8>
 8004e7a:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	4a6e      	ldr	r2, [pc, #440]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6713      	str	r3, [r2, #112]	; 0x70
 8004e86:	4b6c      	ldr	r3, [pc, #432]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a6b      	ldr	r2, [pc, #428]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6713      	str	r3, [r2, #112]	; 0x70
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0x5e0>
 8004e94:	4b68      	ldr	r3, [pc, #416]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a67      	ldr	r2, [pc, #412]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea0:	4b65      	ldr	r3, [pc, #404]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a64      	ldr	r2, [pc, #400]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fb ffa2 	bl	8000dfc <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fb ff9e 	bl	8000dfc <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e14e      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed2:	4b59      	ldr	r3, [pc, #356]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ee      	beq.n	8004ebc <HAL_RCC_OscConfig+0x5f0>
 8004ede:	e014      	b.n	8004f0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fb ff8c 	bl	8000dfc <HAL_GetTick>
 8004ee4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fb ff88 	bl	8000dfc <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e138      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004efe:	4b4e      	ldr	r3, [pc, #312]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ee      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 812d 	beq.w	800516e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f14:	4b48      	ldr	r3, [pc, #288]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f1c:	2b18      	cmp	r3, #24
 8004f1e:	f000 80bd 	beq.w	800509c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	f040 809e 	bne.w	8005068 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2c:	4b42      	ldr	r3, [pc, #264]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a41      	ldr	r2, [pc, #260]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fb ff60 	bl	8000dfc <HAL_GetTick>
 8004f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fb ff5c 	bl	8000dfc <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e10e      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f52:	4b39      	ldr	r3, [pc, #228]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f5e:	4b36      	ldr	r3, [pc, #216]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f62:	4b37      	ldr	r3, [pc, #220]	; (8005040 <HAL_RCC_OscConfig+0x774>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f6e:	0112      	lsls	r2, r2, #4
 8004f70:	430a      	orrs	r2, r1
 8004f72:	4931      	ldr	r1, [pc, #196]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	628b      	str	r3, [r1, #40]	; 0x28
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f86:	3b01      	subs	r3, #1
 8004f88:	025b      	lsls	r3, r3, #9
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	3b01      	subs	r3, #1
 8004f94:	041b      	lsls	r3, r3, #16
 8004f96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	061b      	lsls	r3, r3, #24
 8004fa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fa8:	4923      	ldr	r1, [pc, #140]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004fae:	4b22      	ldr	r3, [pc, #136]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	4a21      	ldr	r2, [pc, #132]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fba:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbe:	4b21      	ldr	r3, [pc, #132]	; (8005044 <HAL_RCC_OscConfig+0x778>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fc6:	00d2      	lsls	r2, r2, #3
 8004fc8:	491b      	ldr	r1, [pc, #108]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fce:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	f023 020c 	bic.w	r2, r3, #12
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4917      	ldr	r1, [pc, #92]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fe0:	4b15      	ldr	r3, [pc, #84]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	f023 0202 	bic.w	r2, r3, #2
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fec:	4912      	ldr	r1, [pc, #72]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ff2:	4b11      	ldr	r3, [pc, #68]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	4a10      	ldr	r2, [pc, #64]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	4a0d      	ldr	r2, [pc, #52]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800500a:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	4a0a      	ldr	r2, [pc, #40]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005016:	4b08      	ldr	r3, [pc, #32]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	4a07      	ldr	r2, [pc, #28]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a04      	ldr	r2, [pc, #16]	; (8005038 <HAL_RCC_OscConfig+0x76c>)
 8005028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800502c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fb fee5 	bl	8000dfc <HAL_GetTick>
 8005032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005034:	e011      	b.n	800505a <HAL_RCC_OscConfig+0x78e>
 8005036:	bf00      	nop
 8005038:	58024400 	.word	0x58024400
 800503c:	58024800 	.word	0x58024800
 8005040:	fffffc0c 	.word	0xfffffc0c
 8005044:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005048:	f7fb fed8 	bl	8000dfc <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e08a      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800505a:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x77c>
 8005066:	e082      	b.n	800516e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005068:	4b43      	ldr	r3, [pc, #268]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a42      	ldr	r2, [pc, #264]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800506e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fb fec2 	bl	8000dfc <HAL_GetTick>
 8005078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507c:	f7fb febe 	bl	8000dfc <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e070      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800508e:	4b3a      	ldr	r3, [pc, #232]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0x7b0>
 800509a:	e068      	b.n	800516e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800509c:	4b36      	ldr	r3, [pc, #216]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050a2:	4b35      	ldr	r3, [pc, #212]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d031      	beq.n	8005114 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f003 0203 	and.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d12a      	bne.n	8005114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d122      	bne.n	8005114 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050da:	429a      	cmp	r2, r3
 80050dc:	d11a      	bne.n	8005114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	0a5b      	lsrs	r3, r3, #9
 80050e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d111      	bne.n	8005114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	0c1b      	lsrs	r3, r3, #16
 80050f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d108      	bne.n	8005114 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	0e1b      	lsrs	r3, r3, #24
 8005106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e02b      	b.n	8005170 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005118:	4b17      	ldr	r3, [pc, #92]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511c:	08db      	lsrs	r3, r3, #3
 800511e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005122:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d01f      	beq.n	800516e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800512e:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	4a11      	ldr	r2, [pc, #68]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800513a:	f7fb fe5f 	bl	8000dfc <HAL_GetTick>
 800513e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005140:	bf00      	nop
 8005142:	f7fb fe5b 	bl	8000dfc <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	4293      	cmp	r3, r2
 800514c:	d0f9      	beq.n	8005142 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800514e:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005152:	4b0a      	ldr	r3, [pc, #40]	; (800517c <HAL_RCC_OscConfig+0x8b0>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800515a:	00d2      	lsls	r2, r2, #3
 800515c:	4906      	ldr	r1, [pc, #24]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 800515e:	4313      	orrs	r3, r2
 8005160:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005162:	4b05      	ldr	r3, [pc, #20]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	4a04      	ldr	r2, [pc, #16]	; (8005178 <HAL_RCC_OscConfig+0x8ac>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3730      	adds	r7, #48	; 0x30
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	58024400 	.word	0x58024400
 800517c:	ffff0007 	.word	0xffff0007

08005180 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e19c      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005194:	4b8a      	ldr	r3, [pc, #552]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d910      	bls.n	80051c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b87      	ldr	r3, [pc, #540]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 020f 	bic.w	r2, r3, #15
 80051aa:	4985      	ldr	r1, [pc, #532]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b2:	4b83      	ldr	r3, [pc, #524]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e184      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d010      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	4b7b      	ldr	r3, [pc, #492]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051dc:	429a      	cmp	r2, r3
 80051de:	d908      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051e0:	4b78      	ldr	r3, [pc, #480]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	4975      	ldr	r1, [pc, #468]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d010      	beq.n	8005220 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	4b70      	ldr	r3, [pc, #448]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800520a:	429a      	cmp	r2, r3
 800520c:	d908      	bls.n	8005220 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800520e:	4b6d      	ldr	r3, [pc, #436]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	496a      	ldr	r1, [pc, #424]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800521c:	4313      	orrs	r3, r2
 800521e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	4b64      	ldr	r3, [pc, #400]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005238:	429a      	cmp	r2, r3
 800523a:	d908      	bls.n	800524e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800523c:	4b61      	ldr	r3, [pc, #388]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	495e      	ldr	r1, [pc, #376]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800524a:	4313      	orrs	r3, r2
 800524c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d010      	beq.n	800527c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	4b59      	ldr	r3, [pc, #356]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005266:	429a      	cmp	r2, r3
 8005268:	d908      	bls.n	800527c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800526a:	4b56      	ldr	r3, [pc, #344]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	4953      	ldr	r1, [pc, #332]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005278:	4313      	orrs	r3, r2
 800527a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	4b4d      	ldr	r3, [pc, #308]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	429a      	cmp	r2, r3
 8005296:	d908      	bls.n	80052aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005298:	4b4a      	ldr	r3, [pc, #296]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f023 020f 	bic.w	r2, r3, #15
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4947      	ldr	r1, [pc, #284]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d055      	beq.n	8005362 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052b6:	4b43      	ldr	r3, [pc, #268]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	4940      	ldr	r1, [pc, #256]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052d0:	4b3c      	ldr	r3, [pc, #240]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d121      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0f6      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d107      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052e8:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d115      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0ea      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005300:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0de      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005310:	4b2c      	ldr	r3, [pc, #176]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e0d6      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005320:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f023 0207 	bic.w	r2, r3, #7
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4925      	ldr	r1, [pc, #148]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800532e:	4313      	orrs	r3, r2
 8005330:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005332:	f7fb fd63 	bl	8000dfc <HAL_GetTick>
 8005336:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005338:	e00a      	b.n	8005350 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533a:	f7fb fd5f 	bl	8000dfc <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	; 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e0be      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005350:	4b1c      	ldr	r3, [pc, #112]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	429a      	cmp	r2, r3
 8005360:	d1eb      	bne.n	800533a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	429a      	cmp	r2, r3
 800537c:	d208      	bcs.n	8005390 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800537e:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f023 020f 	bic.w	r2, r3, #15
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	490e      	ldr	r1, [pc, #56]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800538c:	4313      	orrs	r3, r2
 800538e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d214      	bcs.n	80053c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 020f 	bic.w	r2, r3, #15
 80053a6:	4906      	ldr	r1, [pc, #24]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e086      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
 80053c0:	52002000 	.word	0x52002000
 80053c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	4b3f      	ldr	r3, [pc, #252]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d208      	bcs.n	80053f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053e4:	4b3c      	ldr	r3, [pc, #240]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	4939      	ldr	r1, [pc, #228]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	4b34      	ldr	r3, [pc, #208]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800540e:	429a      	cmp	r2, r3
 8005410:	d208      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005412:	4b31      	ldr	r3, [pc, #196]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	492e      	ldr	r1, [pc, #184]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005420:	4313      	orrs	r3, r2
 8005422:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	d010      	beq.n	8005452 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	4b28      	ldr	r3, [pc, #160]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800543c:	429a      	cmp	r2, r3
 800543e:	d208      	bcs.n	8005452 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005440:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	4922      	ldr	r1, [pc, #136]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 800544e:	4313      	orrs	r3, r2
 8005450:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d010      	beq.n	8005480 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	4b1d      	ldr	r3, [pc, #116]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800546a:	429a      	cmp	r2, r3
 800546c:	d208      	bcs.n	8005480 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800546e:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	4917      	ldr	r1, [pc, #92]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 800547c:	4313      	orrs	r3, r2
 800547e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005480:	f000 f834 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 8005484:	4602      	mov	r2, r0
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	4912      	ldr	r1, [pc, #72]	; (80054dc <HAL_RCC_ClockConfig+0x35c>)
 8005492:	5ccb      	ldrb	r3, [r1, r3]
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
 800549c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	4a0d      	ldr	r2, [pc, #52]	; (80054dc <HAL_RCC_ClockConfig+0x35c>)
 80054a8:	5cd3      	ldrb	r3, [r2, r3]
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <HAL_RCC_ClockConfig+0x360>)
 80054b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054b8:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <HAL_RCC_ClockConfig+0x364>)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <HAL_RCC_ClockConfig+0x368>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fb fc50 	bl	8000d68 <HAL_InitTick>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
 80054dc:	08016a9c 	.word	0x08016a9c
 80054e0:	24000004 	.word	0x24000004
 80054e4:	24000000 	.word	0x24000000
 80054e8:	24000008 	.word	0x24000008

080054ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f2:	4bb3      	ldr	r3, [pc, #716]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054fa:	2b18      	cmp	r3, #24
 80054fc:	f200 8155 	bhi.w	80057aa <HAL_RCC_GetSysClockFreq+0x2be>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	0800556d 	.word	0x0800556d
 800550c:	080057ab 	.word	0x080057ab
 8005510:	080057ab 	.word	0x080057ab
 8005514:	080057ab 	.word	0x080057ab
 8005518:	080057ab 	.word	0x080057ab
 800551c:	080057ab 	.word	0x080057ab
 8005520:	080057ab 	.word	0x080057ab
 8005524:	080057ab 	.word	0x080057ab
 8005528:	08005593 	.word	0x08005593
 800552c:	080057ab 	.word	0x080057ab
 8005530:	080057ab 	.word	0x080057ab
 8005534:	080057ab 	.word	0x080057ab
 8005538:	080057ab 	.word	0x080057ab
 800553c:	080057ab 	.word	0x080057ab
 8005540:	080057ab 	.word	0x080057ab
 8005544:	080057ab 	.word	0x080057ab
 8005548:	08005599 	.word	0x08005599
 800554c:	080057ab 	.word	0x080057ab
 8005550:	080057ab 	.word	0x080057ab
 8005554:	080057ab 	.word	0x080057ab
 8005558:	080057ab 	.word	0x080057ab
 800555c:	080057ab 	.word	0x080057ab
 8005560:	080057ab 	.word	0x080057ab
 8005564:	080057ab 	.word	0x080057ab
 8005568:	0800559f 	.word	0x0800559f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800556c:	4b94      	ldr	r3, [pc, #592]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d009      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005578:	4b91      	ldr	r3, [pc, #580]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	08db      	lsrs	r3, r3, #3
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	4a90      	ldr	r2, [pc, #576]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
 8005588:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800558a:	e111      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800558c:	4b8d      	ldr	r3, [pc, #564]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800558e:	61bb      	str	r3, [r7, #24]
      break;
 8005590:	e10e      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005592:	4b8d      	ldr	r3, [pc, #564]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005594:	61bb      	str	r3, [r7, #24]
      break;
 8005596:	e10b      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005598:	4b8c      	ldr	r3, [pc, #560]	; (80057cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800559a:	61bb      	str	r3, [r7, #24]
      break;
 800559c:	e108      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800559e:	4b88      	ldr	r3, [pc, #544]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80055a8:	4b85      	ldr	r3, [pc, #532]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055b4:	4b82      	ldr	r3, [pc, #520]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055be:	4b80      	ldr	r3, [pc, #512]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80e1 	beq.w	80057a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	f000 8083 	beq.w	80056f0 <HAL_RCC_GetSysClockFreq+0x204>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	f200 80a1 	bhi.w	8005734 <HAL_RCC_GetSysClockFreq+0x248>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0x114>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d056      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80055fe:	e099      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005600:	4b6f      	ldr	r3, [pc, #444]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02d      	beq.n	8005668 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800560c:	4b6c      	ldr	r3, [pc, #432]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	08db      	lsrs	r3, r3, #3
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	4a6b      	ldr	r2, [pc, #428]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
 800561c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b62      	ldr	r3, [pc, #392]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a02 	vldr	s12, [r7, #8]
 800564a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005666:	e087      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eddf 6a58 	vldr	s13, [pc, #352]	; 80057d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567a:	4b51      	ldr	r3, [pc, #324]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568a:	ed97 6a02 	vldr	s12, [r7, #8]
 800568e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056aa:	e065      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80057d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b40      	ldr	r3, [pc, #256]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80056d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056ee:	e043      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80057dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a02 	vldr	s12, [r7, #8]
 8005716:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005732:	e021      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80057d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a02 	vldr	s12, [r7, #8]
 800575a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005776:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005778:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	0a5b      	lsrs	r3, r3, #9
 800577e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005782:	3301      	adds	r3, #1
 8005784:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005790:	edd7 6a07 	vldr	s13, [r7, #28]
 8005794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579c:	ee17 3a90 	vmov	r3, s15
 80057a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80057a2:	e005      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
      break;
 80057a8:	e002      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057ac:	61bb      	str	r3, [r7, #24]
      break;
 80057ae:	bf00      	nop
  }

  return sysclockfreq;
 80057b0:	69bb      	ldr	r3, [r7, #24]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3724      	adds	r7, #36	; 0x24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	58024400 	.word	0x58024400
 80057c4:	03d09000 	.word	0x03d09000
 80057c8:	003d0900 	.word	0x003d0900
 80057cc:	00b71b00 	.word	0x00b71b00
 80057d0:	46000000 	.word	0x46000000
 80057d4:	4c742400 	.word	0x4c742400
 80057d8:	4a742400 	.word	0x4a742400
 80057dc:	4b371b00 	.word	0x4b371b00

080057e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057e6:	f7ff fe81 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80057ea:	4602      	mov	r2, r0
 80057ec:	4b10      	ldr	r3, [pc, #64]	; (8005830 <HAL_RCC_GetHCLKFreq+0x50>)
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	490f      	ldr	r1, [pc, #60]	; (8005834 <HAL_RCC_GetHCLKFreq+0x54>)
 80057f8:	5ccb      	ldrb	r3, [r1, r3]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005802:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <HAL_RCC_GetHCLKFreq+0x50>)
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	4a09      	ldr	r2, [pc, #36]	; (8005834 <HAL_RCC_GetHCLKFreq+0x54>)
 800580e:	5cd3      	ldrb	r3, [r2, r3]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	fa22 f303 	lsr.w	r3, r2, r3
 800581a:	4a07      	ldr	r2, [pc, #28]	; (8005838 <HAL_RCC_GetHCLKFreq+0x58>)
 800581c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800581e:	4a07      	ldr	r2, [pc, #28]	; (800583c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <HAL_RCC_GetHCLKFreq+0x58>)
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	58024400 	.word	0x58024400
 8005834:	08016a9c 	.word	0x08016a9c
 8005838:	24000004 	.word	0x24000004
 800583c:	24000000 	.word	0x24000000

08005840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005844:	f7ff ffcc 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005848:	4602      	mov	r2, r0
 800584a:	4b06      	ldr	r3, [pc, #24]	; (8005864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	4904      	ldr	r1, [pc, #16]	; (8005868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005856:	5ccb      	ldrb	r3, [r1, r3]
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005860:	4618      	mov	r0, r3
 8005862:	bd80      	pop	{r7, pc}
 8005864:	58024400 	.word	0x58024400
 8005868:	08016a9c 	.word	0x08016a9c

0800586c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800586c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005870:	b0ca      	sub	sp, #296	; 0x128
 8005872:	af00      	add	r7, sp, #0
 8005874:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005878:	2300      	movs	r3, #0
 800587a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800587e:	2300      	movs	r3, #0
 8005880:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005890:	2500      	movs	r5, #0
 8005892:	ea54 0305 	orrs.w	r3, r4, r5
 8005896:	d049      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800589e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058a2:	d02f      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80058a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058a8:	d828      	bhi.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058ae:	d01a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80058b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058b4:	d822      	bhi.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80058ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058be:	d007      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058c0:	e01c      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c2:	4bb8      	ldr	r3, [pc, #736]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	4ab7      	ldr	r2, [pc, #732]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058ce:	e01a      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d4:	3308      	adds	r3, #8
 80058d6:	2102      	movs	r1, #2
 80058d8:	4618      	mov	r0, r3
 80058da:	f002 fb61 	bl	8007fa0 <RCCEx_PLL2_Config>
 80058de:	4603      	mov	r3, r0
 80058e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058e4:	e00f      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ea:	3328      	adds	r3, #40	; 0x28
 80058ec:	2102      	movs	r1, #2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f002 fc08 	bl	8008104 <RCCEx_PLL3_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058fa:	e004      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800590e:	4ba5      	ldr	r3, [pc, #660]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005912:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800591c:	4aa1      	ldr	r2, [pc, #644]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800591e:	430b      	orrs	r3, r1
 8005920:	6513      	str	r3, [r2, #80]	; 0x50
 8005922:	e003      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005928:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800592c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005938:	f04f 0900 	mov.w	r9, #0
 800593c:	ea58 0309 	orrs.w	r3, r8, r9
 8005940:	d047      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005948:	2b04      	cmp	r3, #4
 800594a:	d82a      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005969 	.word	0x08005969
 8005958:	08005977 	.word	0x08005977
 800595c:	0800598d 	.word	0x0800598d
 8005960:	080059ab 	.word	0x080059ab
 8005964:	080059ab 	.word	0x080059ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005968:	4b8e      	ldr	r3, [pc, #568]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	4a8d      	ldr	r2, [pc, #564]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800596e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005974:	e01a      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597a:	3308      	adds	r3, #8
 800597c:	2100      	movs	r1, #0
 800597e:	4618      	mov	r0, r3
 8005980:	f002 fb0e 	bl	8007fa0 <RCCEx_PLL2_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800598a:	e00f      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005990:	3328      	adds	r3, #40	; 0x28
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f002 fbb5 	bl	8008104 <RCCEx_PLL3_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059a0:	e004      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059a8:	e000      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80059aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059b4:	4b7b      	ldr	r3, [pc, #492]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b8:	f023 0107 	bic.w	r1, r3, #7
 80059bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c2:	4a78      	ldr	r2, [pc, #480]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6513      	str	r3, [r2, #80]	; 0x50
 80059c8:	e003      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80059de:	f04f 0b00 	mov.w	fp, #0
 80059e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80059e6:	d04c      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f2:	d030      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80059f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f8:	d829      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059fa:	2bc0      	cmp	r3, #192	; 0xc0
 80059fc:	d02d      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80059fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005a00:	d825      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a02:	2b80      	cmp	r3, #128	; 0x80
 8005a04:	d018      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	d821      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	d007      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005a12:	e01c      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a14:	4b63      	ldr	r3, [pc, #396]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	4a62      	ldr	r2, [pc, #392]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a20:	e01c      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a26:	3308      	adds	r3, #8
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f002 fab8 	bl	8007fa0 <RCCEx_PLL2_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a36:	e011      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3c:	3328      	adds	r3, #40	; 0x28
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f002 fb5f 	bl	8008104 <RCCEx_PLL3_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a4c:	e006      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a54:	e002      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a56:	bf00      	nop
 8005a58:	e000      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a64:	4b4f      	ldr	r3, [pc, #316]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a68:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a72:	4a4c      	ldr	r2, [pc, #304]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a74:	430b      	orrs	r3, r1
 8005a76:	6513      	str	r3, [r2, #80]	; 0x50
 8005a78:	e003      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005a8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a92:	2300      	movs	r3, #0
 8005a94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	d053      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005aaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005aae:	d035      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005ab0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ab4:	d82e      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ab6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005aba:	d031      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005abc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ac0:	d828      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ac6:	d01a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005acc:	d822      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ad6:	d007      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005ad8:	e01c      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ada:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	4a31      	ldr	r2, [pc, #196]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ae6:	e01c      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aec:	3308      	adds	r3, #8
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 fa55 	bl	8007fa0 <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005afc:	e011      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b02:	3328      	adds	r3, #40	; 0x28
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f002 fafc 	bl	8008104 <RCCEx_PLL3_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b12:	e006      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b1a:	e002      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b1c:	bf00      	nop
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b2a:	4b1e      	ldr	r3, [pc, #120]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005b40:	e003      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005b56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005b64:	460b      	mov	r3, r1
 8005b66:	4313      	orrs	r3, r2
 8005b68:	d056      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b76:	d038      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b7c:	d831      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b82:	d034      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005b84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b88:	d82b      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b8e:	d01d      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b94:	d825      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d006      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005b9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ba0:	e01f      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ba2:	bf00      	nop
 8005ba4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba8:	4ba2      	ldr	r3, [pc, #648]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	4aa1      	ldr	r2, [pc, #644]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb4:	e01c      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bba:	3308      	adds	r3, #8
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f002 f9ee 	bl	8007fa0 <RCCEx_PLL2_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bca:	e011      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd0:	3328      	adds	r3, #40	; 0x28
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f002 fa95 	bl	8008104 <RCCEx_PLL3_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10b      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bf8:	4b8e      	ldr	r3, [pc, #568]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c08:	4a8a      	ldr	r2, [pc, #552]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c0e:	e003      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005c32:	460b      	mov	r3, r1
 8005c34:	4313      	orrs	r3, r2
 8005c36:	d03a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	2b30      	cmp	r3, #48	; 0x30
 8005c40:	d01f      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005c42:	2b30      	cmp	r3, #48	; 0x30
 8005c44:	d819      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d00c      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d815      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d019      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005c52:	2b10      	cmp	r3, #16
 8005c54:	d111      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c56:	4b77      	ldr	r3, [pc, #476]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	4a76      	ldr	r2, [pc, #472]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c62:	e011      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c68:	3308      	adds	r3, #8
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f002 f997 	bl	8007fa0 <RCCEx_PLL2_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c78:	e006      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c80:	e002      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c82:	bf00      	nop
 8005c84:	e000      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c90:	4b68      	ldr	r3, [pc, #416]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c94:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c9e:	4a65      	ldr	r2, [pc, #404]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ca4:	e003      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005caa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005cba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005cc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	d051      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd8:	d035      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cde:	d82e      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ce0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ce4:	d031      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ce6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cea:	d828      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf0:	d01a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf6:	d822      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d00:	d007      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005d02:	e01c      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d04:	4b4b      	ldr	r3, [pc, #300]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	4a4a      	ldr	r2, [pc, #296]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d10:	e01c      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d16:	3308      	adds	r3, #8
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f002 f940 	bl	8007fa0 <RCCEx_PLL2_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d26:	e011      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2c:	3328      	adds	r3, #40	; 0x28
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4618      	mov	r0, r3
 8005d32:	f002 f9e7 	bl	8008104 <RCCEx_PLL3_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d3c:	e006      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d44:	e002      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d46:	bf00      	nop
 8005d48:	e000      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d54:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d62:	4a34      	ldr	r2, [pc, #208]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6513      	str	r3, [r2, #80]	; 0x50
 8005d68:	e003      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d82:	2300      	movs	r3, #0
 8005d84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	d056      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d9c:	d033      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da2:	d82c      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005da4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005da8:	d02f      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005daa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dae:	d826      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005db0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005db4:	d02b      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005db6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dba:	d820      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dc0:	d012      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dc6:	d81a      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d022      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd0:	d115      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f002 f8e0 	bl	8007fa0 <RCCEx_PLL2_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005de6:	e015      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dec:	3328      	adds	r3, #40	; 0x28
 8005dee:	2101      	movs	r1, #1
 8005df0:	4618      	mov	r0, r3
 8005df2:	f002 f987 	bl	8008104 <RCCEx_PLL3_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005dfc:	e00a      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e04:	e006      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e06:	bf00      	nop
 8005e08:	e004      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e0a:	bf00      	nop
 8005e0c:	e002      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10d      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e20:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e2a:	4a02      	ldr	r2, [pc, #8]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6513      	str	r3, [r2, #80]	; 0x50
 8005e30:	e006      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e32:	bf00      	nop
 8005e34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e50:	2300      	movs	r3, #0
 8005e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	d055      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e6c:	d033      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e72:	d82c      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d02f      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7e:	d826      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e84:	d02b      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e8a:	d820      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e90:	d012      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e96:	d81a      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d022      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ea0:	d115      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f002 f878 	bl	8007fa0 <RCCEx_PLL2_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005eb6:	e015      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ebc:	3328      	adds	r3, #40	; 0x28
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f002 f91f 	bl	8008104 <RCCEx_PLL3_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ecc:	e00a      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ed6:	bf00      	nop
 8005ed8:	e004      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005eec:	4ba3      	ldr	r3, [pc, #652]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005efc:	4a9f      	ldr	r2, [pc, #636]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005efe:	430b      	orrs	r3, r1
 8005f00:	6593      	str	r3, [r2, #88]	; 0x58
 8005f02:	e003      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f26:	460b      	mov	r3, r1
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	d037      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f36:	d00e      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f3c:	d816      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d018      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f46:	d111      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f48:	4b8c      	ldr	r3, [pc, #560]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	4a8b      	ldr	r2, [pc, #556]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f54:	e00f      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f002 f81e 	bl	8007fa0 <RCCEx_PLL2_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f6a:	e004      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f72:	e000      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f7e:	4b7f      	ldr	r3, [pc, #508]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8c:	4a7b      	ldr	r2, [pc, #492]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	6513      	str	r3, [r2, #80]	; 0x50
 8005f92:	e003      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fac:	2300      	movs	r3, #0
 8005fae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005fb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d039      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d81c      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08006009 	.word	0x08006009
 8005fd0:	08005fdd 	.word	0x08005fdd
 8005fd4:	08005feb 	.word	0x08005feb
 8005fd8:	08006009 	.word	0x08006009
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fdc:	4b67      	ldr	r3, [pc, #412]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	4a66      	ldr	r2, [pc, #408]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fe8:	e00f      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fee:	3308      	adds	r3, #8
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 ffd4 	bl	8007fa0 <RCCEx_PLL2_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ffe:	e004      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006006:	e000      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006012:	4b5a      	ldr	r3, [pc, #360]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006016:	f023 0103 	bic.w	r1, r3, #3
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006020:	4a56      	ldr	r2, [pc, #344]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006022:	430b      	orrs	r3, r1
 8006024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006026:	e003      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800602c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800603c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006046:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800604a:	460b      	mov	r3, r1
 800604c:	4313      	orrs	r3, r2
 800604e:	f000 809f 	beq.w	8006190 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006052:	4b4b      	ldr	r3, [pc, #300]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a4a      	ldr	r2, [pc, #296]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800605e:	f7fa fecd 	bl	8000dfc <HAL_GetTick>
 8006062:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006066:	e00b      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006068:	f7fa fec8 	bl	8000dfc <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b64      	cmp	r3, #100	; 0x64
 8006076:	d903      	bls.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800607e:	e005      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006080:	4b3f      	ldr	r3, [pc, #252]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0ed      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800608c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006090:	2b00      	cmp	r3, #0
 8006092:	d179      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006094:	4b39      	ldr	r3, [pc, #228]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006096:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060a0:	4053      	eors	r3, r2
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d015      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060aa:	4b34      	ldr	r3, [pc, #208]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060b6:	4b31      	ldr	r3, [pc, #196]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	4a30      	ldr	r2, [pc, #192]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060c2:	4b2e      	ldr	r3, [pc, #184]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	4a2d      	ldr	r2, [pc, #180]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060cc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060ce:	4a2b      	ldr	r2, [pc, #172]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e2:	d118      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e4:	f7fa fe8a 	bl	8000dfc <HAL_GetTick>
 80060e8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ec:	e00d      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ee:	f7fa fe85 	bl	8000dfc <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80060f8:	1ad2      	subs	r2, r2, r3
 80060fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80060fe:	429a      	cmp	r2, r3
 8006100:	d903      	bls.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006108:	e005      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800610a:	4b1c      	ldr	r3, [pc, #112]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0eb      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800611a:	2b00      	cmp	r3, #0
 800611c:	d129      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006122:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800612a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800612e:	d10e      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006140:	091a      	lsrs	r2, r3, #4
 8006142:	4b10      	ldr	r3, [pc, #64]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006144:	4013      	ands	r3, r2
 8006146:	4a0d      	ldr	r2, [pc, #52]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006148:	430b      	orrs	r3, r1
 800614a:	6113      	str	r3, [r2, #16]
 800614c:	e005      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	4a0a      	ldr	r2, [pc, #40]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006154:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006158:	6113      	str	r3, [r2, #16]
 800615a:	4b08      	ldr	r3, [pc, #32]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800615c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006162:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616a:	4a04      	ldr	r2, [pc, #16]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800616c:	430b      	orrs	r3, r1
 800616e:	6713      	str	r3, [r2, #112]	; 0x70
 8006170:	e00e      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006176:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800617a:	e009      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800617c:	58024400 	.word	0x58024400
 8006180:	58024800 	.word	0x58024800
 8006184:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006188:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800618c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f002 0301 	and.w	r3, r2, #1
 800619c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061a0:	2300      	movs	r3, #0
 80061a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f000 8089 	beq.w	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061b8:	2b28      	cmp	r3, #40	; 0x28
 80061ba:	d86b      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80061bc:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c2:	bf00      	nop
 80061c4:	0800629d 	.word	0x0800629d
 80061c8:	08006295 	.word	0x08006295
 80061cc:	08006295 	.word	0x08006295
 80061d0:	08006295 	.word	0x08006295
 80061d4:	08006295 	.word	0x08006295
 80061d8:	08006295 	.word	0x08006295
 80061dc:	08006295 	.word	0x08006295
 80061e0:	08006295 	.word	0x08006295
 80061e4:	08006269 	.word	0x08006269
 80061e8:	08006295 	.word	0x08006295
 80061ec:	08006295 	.word	0x08006295
 80061f0:	08006295 	.word	0x08006295
 80061f4:	08006295 	.word	0x08006295
 80061f8:	08006295 	.word	0x08006295
 80061fc:	08006295 	.word	0x08006295
 8006200:	08006295 	.word	0x08006295
 8006204:	0800627f 	.word	0x0800627f
 8006208:	08006295 	.word	0x08006295
 800620c:	08006295 	.word	0x08006295
 8006210:	08006295 	.word	0x08006295
 8006214:	08006295 	.word	0x08006295
 8006218:	08006295 	.word	0x08006295
 800621c:	08006295 	.word	0x08006295
 8006220:	08006295 	.word	0x08006295
 8006224:	0800629d 	.word	0x0800629d
 8006228:	08006295 	.word	0x08006295
 800622c:	08006295 	.word	0x08006295
 8006230:	08006295 	.word	0x08006295
 8006234:	08006295 	.word	0x08006295
 8006238:	08006295 	.word	0x08006295
 800623c:	08006295 	.word	0x08006295
 8006240:	08006295 	.word	0x08006295
 8006244:	0800629d 	.word	0x0800629d
 8006248:	08006295 	.word	0x08006295
 800624c:	08006295 	.word	0x08006295
 8006250:	08006295 	.word	0x08006295
 8006254:	08006295 	.word	0x08006295
 8006258:	08006295 	.word	0x08006295
 800625c:	08006295 	.word	0x08006295
 8006260:	08006295 	.word	0x08006295
 8006264:	0800629d 	.word	0x0800629d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626c:	3308      	adds	r3, #8
 800626e:	2101      	movs	r1, #1
 8006270:	4618      	mov	r0, r3
 8006272:	f001 fe95 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006276:	4603      	mov	r3, r0
 8006278:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800627c:	e00f      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006282:	3328      	adds	r3, #40	; 0x28
 8006284:	2101      	movs	r1, #1
 8006286:	4618      	mov	r0, r3
 8006288:	f001 ff3c 	bl	8008104 <RCCEx_PLL3_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006292:	e004      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800629c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062a6:	4bbf      	ldr	r3, [pc, #764]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062aa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062b4:	4abb      	ldr	r2, [pc, #748]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062b6:	430b      	orrs	r3, r1
 80062b8:	6553      	str	r3, [r2, #84]	; 0x54
 80062ba:	e003      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f002 0302 	and.w	r3, r2, #2
 80062d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062d4:	2300      	movs	r3, #0
 80062d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80062de:	460b      	mov	r3, r1
 80062e0:	4313      	orrs	r3, r2
 80062e2:	d041      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80062e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ea:	2b05      	cmp	r3, #5
 80062ec:	d824      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80062ee:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006341 	.word	0x08006341
 80062f8:	0800630d 	.word	0x0800630d
 80062fc:	08006323 	.word	0x08006323
 8006300:	08006341 	.word	0x08006341
 8006304:	08006341 	.word	0x08006341
 8006308:	08006341 	.word	0x08006341
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006310:	3308      	adds	r3, #8
 8006312:	2101      	movs	r1, #1
 8006314:	4618      	mov	r0, r3
 8006316:	f001 fe43 	bl	8007fa0 <RCCEx_PLL2_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006320:	e00f      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006326:	3328      	adds	r3, #40	; 0x28
 8006328:	2101      	movs	r1, #1
 800632a:	4618      	mov	r0, r3
 800632c:	f001 feea 	bl	8008104 <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006336:	e004      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800633e:	e000      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10a      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800634a:	4b96      	ldr	r3, [pc, #600]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	f023 0107 	bic.w	r1, r3, #7
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006358:	4a92      	ldr	r2, [pc, #584]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800635a:	430b      	orrs	r3, r1
 800635c:	6553      	str	r3, [r2, #84]	; 0x54
 800635e:	e003      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006364:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f002 0304 	and.w	r3, r2, #4
 8006374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006378:	2300      	movs	r3, #0
 800637a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800637e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006382:	460b      	mov	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	d044      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006390:	2b05      	cmp	r3, #5
 8006392:	d825      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063e9 	.word	0x080063e9
 80063a0:	080063b5 	.word	0x080063b5
 80063a4:	080063cb 	.word	0x080063cb
 80063a8:	080063e9 	.word	0x080063e9
 80063ac:	080063e9 	.word	0x080063e9
 80063b0:	080063e9 	.word	0x080063e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b8:	3308      	adds	r3, #8
 80063ba:	2101      	movs	r1, #1
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 fdef 	bl	8007fa0 <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063c8:	e00f      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ce:	3328      	adds	r3, #40	; 0x28
 80063d0:	2101      	movs	r1, #1
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 fe96 	bl	8008104 <RCCEx_PLL3_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063de:	e004      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063e6:	e000      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80063e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063f2:	4b6c      	ldr	r3, [pc, #432]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f6:	f023 0107 	bic.w	r1, r3, #7
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006402:	4a68      	ldr	r2, [pc, #416]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006404:	430b      	orrs	r3, r1
 8006406:	6593      	str	r3, [r2, #88]	; 0x58
 8006408:	e003      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800640e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	f002 0320 	and.w	r3, r2, #32
 800641e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006422:	2300      	movs	r3, #0
 8006424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800642c:	460b      	mov	r3, r1
 800642e:	4313      	orrs	r3, r2
 8006430:	d055      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800643e:	d033      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006444:	d82c      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644a:	d02f      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006450:	d826      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006456:	d02b      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006458:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800645c:	d820      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800645e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006462:	d012      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006468:	d81a      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d022      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800646e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006472:	d115      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006478:	3308      	adds	r3, #8
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f001 fd8f 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006488:	e015      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648e:	3328      	adds	r3, #40	; 0x28
 8006490:	2102      	movs	r1, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f001 fe36 	bl	8008104 <RCCEx_PLL3_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800649e:	e00a      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064a6:	e006      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064a8:	bf00      	nop
 80064aa:	e004      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064ac:	bf00      	nop
 80064ae:	e002      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064b0:	bf00      	nop
 80064b2:	e000      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10b      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064be:	4b39      	ldr	r3, [pc, #228]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ce:	4a35      	ldr	r2, [pc, #212]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064d0:	430b      	orrs	r3, r1
 80064d2:	6553      	str	r3, [r2, #84]	; 0x54
 80064d4:	e003      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80064ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ee:	2300      	movs	r3, #0
 80064f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4313      	orrs	r3, r2
 80064fc:	d058      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006506:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800650a:	d033      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800650c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006510:	d82c      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006516:	d02f      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651c:	d826      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800651e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006522:	d02b      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006528:	d820      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800652a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800652e:	d012      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006534:	d81a      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d022      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800653a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653e:	d115      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006544:	3308      	adds	r3, #8
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fd29 	bl	8007fa0 <RCCEx_PLL2_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006554:	e015      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655a:	3328      	adds	r3, #40	; 0x28
 800655c:	2102      	movs	r1, #2
 800655e:	4618      	mov	r0, r3
 8006560:	f001 fdd0 	bl	8008104 <RCCEx_PLL3_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800656a:	e00a      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006572:	e006      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006574:	bf00      	nop
 8006576:	e004      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006578:	bf00      	nop
 800657a:	e002      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800657c:	bf00      	nop
 800657e:	e000      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10e      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800658a:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800658c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800659a:	4a02      	ldr	r2, [pc, #8]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800659c:	430b      	orrs	r3, r1
 800659e:	6593      	str	r3, [r2, #88]	; 0x58
 80065a0:	e006      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80065a2:	bf00      	nop
 80065a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80065bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80065ca:	460b      	mov	r3, r1
 80065cc:	4313      	orrs	r3, r2
 80065ce:	d055      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065dc:	d033      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80065de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065e2:	d82c      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e8:	d02f      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80065ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ee:	d826      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065f4:	d02b      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80065f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065fa:	d820      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006600:	d012      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006606:	d81a      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d022      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006610:	d115      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006616:	3308      	adds	r3, #8
 8006618:	2100      	movs	r1, #0
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fcc0 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006626:	e015      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800662c:	3328      	adds	r3, #40	; 0x28
 800662e:	2102      	movs	r1, #2
 8006630:	4618      	mov	r0, r3
 8006632:	f001 fd67 	bl	8008104 <RCCEx_PLL3_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800663c:	e00a      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006644:	e006      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006646:	bf00      	nop
 8006648:	e004      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800664a:	bf00      	nop
 800664c:	e002      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800664e:	bf00      	nop
 8006650:	e000      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800665c:	4ba1      	ldr	r3, [pc, #644]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800665e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006660:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006668:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800666c:	4a9d      	ldr	r2, [pc, #628]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800666e:	430b      	orrs	r3, r1
 8006670:	6593      	str	r3, [r2, #88]	; 0x58
 8006672:	e003      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f002 0308 	and.w	r3, r2, #8
 8006688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800668c:	2300      	movs	r3, #0
 800668e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006692:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006696:	460b      	mov	r3, r1
 8006698:	4313      	orrs	r3, r2
 800669a:	d01e      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ae:	3328      	adds	r3, #40	; 0x28
 80066b0:	2102      	movs	r1, #2
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 fd26 	bl	8008104 <RCCEx_PLL3_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066c4:	4b87      	ldr	r3, [pc, #540]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066d4:	4a83      	ldr	r2, [pc, #524]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066d6:	430b      	orrs	r3, r1
 80066d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f002 0310 	and.w	r3, r2, #16
 80066e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066ea:	2300      	movs	r3, #0
 80066ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d01e      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006706:	d10c      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800670c:	3328      	adds	r3, #40	; 0x28
 800670e:	2102      	movs	r1, #2
 8006710:	4618      	mov	r0, r3
 8006712:	f001 fcf7 	bl	8008104 <RCCEx_PLL3_Config>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006722:	4b70      	ldr	r3, [pc, #448]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800672e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006732:	4a6c      	ldr	r2, [pc, #432]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006734:	430b      	orrs	r3, r1
 8006736:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006748:	2300      	movs	r3, #0
 800674a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800674e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006752:	460b      	mov	r3, r1
 8006754:	4313      	orrs	r3, r2
 8006756:	d03e      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800675c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006764:	d022      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800676a:	d81b      	bhi.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006774:	d00b      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006776:	e015      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800677c:	3308      	adds	r3, #8
 800677e:	2100      	movs	r1, #0
 8006780:	4618      	mov	r0, r3
 8006782:	f001 fc0d 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800678c:	e00f      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006792:	3328      	adds	r3, #40	; 0x28
 8006794:	2102      	movs	r1, #2
 8006796:	4618      	mov	r0, r3
 8006798:	f001 fcb4 	bl	8008104 <RCCEx_PLL3_Config>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067a2:	e004      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067aa:	e000      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80067ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067b6:	4b4b      	ldr	r3, [pc, #300]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067c6:	4a47      	ldr	r2, [pc, #284]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6593      	str	r3, [r2, #88]	; 0x58
 80067cc:	e003      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80067e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80067e4:	2300      	movs	r3, #0
 80067e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80067ec:	460b      	mov	r3, r1
 80067ee:	4313      	orrs	r3, r2
 80067f0:	d03b      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067fe:	d01f      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006800:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006804:	d818      	bhi.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800680a:	d003      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800680c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006810:	d007      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006812:	e011      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006814:	4b33      	ldr	r3, [pc, #204]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	4a32      	ldr	r2, [pc, #200]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800681a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006820:	e00f      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006826:	3328      	adds	r3, #40	; 0x28
 8006828:	2101      	movs	r1, #1
 800682a:	4618      	mov	r0, r3
 800682c:	f001 fc6a 	bl	8008104 <RCCEx_PLL3_Config>
 8006830:	4603      	mov	r3, r0
 8006832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006836:	e004      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800683e:	e000      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10b      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800684a:	4b26      	ldr	r3, [pc, #152]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800684c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685a:	4a22      	ldr	r2, [pc, #136]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800685c:	430b      	orrs	r3, r1
 800685e:	6553      	str	r3, [r2, #84]	; 0x54
 8006860:	e003      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006866:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006876:	673b      	str	r3, [r7, #112]	; 0x70
 8006878:	2300      	movs	r3, #0
 800687a:	677b      	str	r3, [r7, #116]	; 0x74
 800687c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d034      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006894:	d007      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006896:	e011      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006898:	4b12      	ldr	r3, [pc, #72]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	4a11      	ldr	r2, [pc, #68]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800689e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068a4:	e00e      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068aa:	3308      	adds	r3, #8
 80068ac:	2102      	movs	r1, #2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 fb76 	bl	8007fa0 <RCCEx_PLL2_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068ba:	e003      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10d      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068da:	4a02      	ldr	r2, [pc, #8]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068e0:	e006      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80068e2:	bf00      	nop
 80068e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80068fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80068fe:	2300      	movs	r3, #0
 8006900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006902:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006906:	460b      	mov	r3, r1
 8006908:	4313      	orrs	r3, r2
 800690a:	d00c      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800690c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006910:	3328      	adds	r3, #40	; 0x28
 8006912:	2102      	movs	r1, #2
 8006914:	4618      	mov	r0, r3
 8006916:	f001 fbf5 	bl	8008104 <RCCEx_PLL3_Config>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006932:	663b      	str	r3, [r7, #96]	; 0x60
 8006934:	2300      	movs	r3, #0
 8006936:	667b      	str	r3, [r7, #100]	; 0x64
 8006938:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800693c:	460b      	mov	r3, r1
 800693e:	4313      	orrs	r3, r2
 8006940:	d038      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800694a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800694e:	d018      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006954:	d811      	bhi.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800695a:	d014      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800695c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006960:	d80b      	bhi.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d011      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696a:	d106      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800696c:	4bc3      	ldr	r3, [pc, #780]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	4ac2      	ldr	r2, [pc, #776]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006976:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006978:	e008      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006980:	e004      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006982:	bf00      	nop
 8006984:	e002      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006986:	bf00      	nop
 8006988:	e000      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800698a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800698c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10b      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006994:	4bb9      	ldr	r3, [pc, #740]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006998:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800699c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a4:	4ab5      	ldr	r2, [pc, #724]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069a6:	430b      	orrs	r3, r1
 80069a8:	6553      	str	r3, [r2, #84]	; 0x54
 80069aa:	e003      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80069c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80069c2:	2300      	movs	r3, #0
 80069c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80069ca:	460b      	mov	r3, r1
 80069cc:	4313      	orrs	r3, r2
 80069ce:	d009      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069d0:	4baa      	ldr	r3, [pc, #680]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80069d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069de:	4aa7      	ldr	r2, [pc, #668]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80069e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80069f0:	653b      	str	r3, [r7, #80]	; 0x50
 80069f2:	2300      	movs	r3, #0
 80069f4:	657b      	str	r3, [r7, #84]	; 0x54
 80069f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80069fa:	460b      	mov	r3, r1
 80069fc:	4313      	orrs	r3, r2
 80069fe:	d00a      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a00:	4b9e      	ldr	r3, [pc, #632]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006a10:	4a9a      	ldr	r2, [pc, #616]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a12:	430b      	orrs	r3, r1
 8006a14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a24:	2300      	movs	r3, #0
 8006a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	d009      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a32:	4b92      	ldr	r3, [pc, #584]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a36:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a40:	4a8e      	ldr	r2, [pc, #568]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a42:	430b      	orrs	r3, r1
 8006a44:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006a52:	643b      	str	r3, [r7, #64]	; 0x40
 8006a54:	2300      	movs	r3, #0
 8006a56:	647b      	str	r3, [r7, #68]	; 0x44
 8006a58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	d00e      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a62:	4b86      	ldr	r3, [pc, #536]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	4a85      	ldr	r2, [pc, #532]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a6c:	6113      	str	r3, [r2, #16]
 8006a6e:	4b83      	ldr	r3, [pc, #524]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a70:	6919      	ldr	r1, [r3, #16]
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006a7a:	4a80      	ldr	r2, [pc, #512]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006a8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a8e:	2300      	movs	r3, #0
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006a96:	460b      	mov	r3, r1
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	d009      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a9c:	4b77      	ldr	r3, [pc, #476]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aaa:	4a74      	ldr	r2, [pc, #464]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aac:	430b      	orrs	r3, r1
 8006aae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006abc:	633b      	str	r3, [r7, #48]	; 0x30
 8006abe:	2300      	movs	r3, #0
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	d00a      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006acc:	4b6b      	ldr	r3, [pc, #428]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006adc:	4a67      	ldr	r2, [pc, #412]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	2100      	movs	r1, #0
 8006aec:	62b9      	str	r1, [r7, #40]	; 0x28
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006af4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006af8:	460b      	mov	r3, r1
 8006afa:	4313      	orrs	r3, r2
 8006afc:	d011      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b02:	3308      	adds	r3, #8
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 fa4a 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	6239      	str	r1, [r7, #32]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
 8006b34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	d011      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b42:	3308      	adds	r3, #8
 8006b44:	2101      	movs	r1, #1
 8006b46:	4618      	mov	r0, r3
 8006b48:	f001 fa2a 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	61b9      	str	r1, [r7, #24]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	d011      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b82:	3308      	adds	r3, #8
 8006b84:	2102      	movs	r1, #2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 fa0a 	bl	8007fa0 <RCCEx_PLL2_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	2100      	movs	r1, #0
 8006bac:	6139      	str	r1, [r7, #16]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	d011      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc2:	3328      	adds	r3, #40	; 0x28
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 fa9c 	bl	8008104 <RCCEx_PLL3_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	2100      	movs	r1, #0
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	d011      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c02:	3328      	adds	r3, #40	; 0x28
 8006c04:	2101      	movs	r1, #1
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 fa7c 	bl	8008104 <RCCEx_PLL3_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	6039      	str	r1, [r7, #0]
 8006c2e:	f003 0320 	and.w	r3, r3, #32
 8006c32:	607b      	str	r3, [r7, #4]
 8006c34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	d011      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c42:	3328      	adds	r3, #40	; 0x28
 8006c44:	2102      	movs	r1, #2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 fa5c 	bl	8008104 <RCCEx_PLL3_Config>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006c62:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e000      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006c76:	46bd      	mov	sp, r7
 8006c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c7c:	58024400 	.word	0x58024400

08006c80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b090      	sub	sp, #64	; 0x40
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c8e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006c92:	430b      	orrs	r3, r1
 8006c94:	f040 8094 	bne.w	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006c98:	4b9e      	ldr	r3, [pc, #632]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	f200 8087 	bhi.w	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cc5 	.word	0x08006cc5
 8006cb4:	08006ced 	.word	0x08006ced
 8006cb8:	08006d15 	.word	0x08006d15
 8006cbc:	08006db1 	.word	0x08006db1
 8006cc0:	08006d3d 	.word	0x08006d3d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cc4:	4b93      	ldr	r3, [pc, #588]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ccc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cd0:	d108      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 f810 	bl	8007cfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ce0:	f000 bd45 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce8:	f000 bd41 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cec:	4b89      	ldr	r3, [pc, #548]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cf8:	d108      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cfa:	f107 0318 	add.w	r3, r7, #24
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fd54 	bl	80077ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d08:	f000 bd31 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d10:	f000 bd2d 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d14:	4b7f      	ldr	r3, [pc, #508]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d20:	d108      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d22:	f107 030c 	add.w	r3, r7, #12
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fe94 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d30:	f000 bd1d 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d38:	f000 bd19 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d3c:	4b75      	ldr	r3, [pc, #468]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d46:	4b73      	ldr	r3, [pc, #460]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d10c      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d58:	4b6e      	ldr	r3, [pc, #440]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	08db      	lsrs	r3, r3, #3
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	4a6d      	ldr	r2, [pc, #436]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d6a:	e01f      	b.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d6c:	4b69      	ldr	r3, [pc, #420]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d78:	d106      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d80:	d102      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d82:	4b66      	ldr	r3, [pc, #408]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d86:	e011      	b.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d88:	4b62      	ldr	r3, [pc, #392]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d94:	d106      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d9c:	d102      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d9e:	4b60      	ldr	r3, [pc, #384]	; (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da2:	e003      	b.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006da8:	f000 bce1 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006dac:	f000 bcdf 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006db0:	4b5c      	ldr	r3, [pc, #368]	; (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006db4:	f000 bcdb 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dbc:	f000 bcd7 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	f040 80ad 	bne.w	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006dce:	4b51      	ldr	r3, [pc, #324]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006dd6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dde:	d056      	beq.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de6:	f200 8090 	bhi.w	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	2bc0      	cmp	r3, #192	; 0xc0
 8006dee:	f000 8088 	beq.w	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	2bc0      	cmp	r3, #192	; 0xc0
 8006df6:	f200 8088 	bhi.w	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	2b80      	cmp	r3, #128	; 0x80
 8006dfe:	d032      	beq.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	2b80      	cmp	r3, #128	; 0x80
 8006e04:	f200 8081 	bhi.w	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	d014      	beq.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006e14:	e079      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e16:	4b3f      	ldr	r3, [pc, #252]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e22:	d108      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 ff67 	bl	8007cfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e32:	f000 bc9c 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e3a:	f000 bc98 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e3e:	4b35      	ldr	r3, [pc, #212]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e4a:	d108      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e4c:	f107 0318 	add.w	r3, r7, #24
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fcab 	bl	80077ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e5a:	f000 bc88 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e62:	f000 bc84 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e66:	4b2b      	ldr	r3, [pc, #172]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e72:	d108      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e74:	f107 030c 	add.w	r3, r7, #12
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fdeb 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e82:	f000 bc74 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e8a:	f000 bc70 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e8e:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e98:	4b1e      	ldr	r3, [pc, #120]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d10c      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d109      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eaa:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	08db      	lsrs	r3, r3, #3
 8006eb0:	f003 0303 	and.w	r3, r3, #3
 8006eb4:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ebc:	e01f      	b.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ebe:	4b15      	ldr	r3, [pc, #84]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eca:	d106      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed2:	d102      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ed4:	4b11      	ldr	r3, [pc, #68]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed8:	e011      	b.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006eda:	4b0e      	ldr	r3, [pc, #56]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee6:	d106      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eee:	d102      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef4:	e003      	b.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006efa:	f000 bc38 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006efe:	f000 bc36 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f06:	f000 bc32 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f0e:	f000 bc2e 	b.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f12:	bf00      	nop
 8006f14:	58024400 	.word	0x58024400
 8006f18:	03d09000 	.word	0x03d09000
 8006f1c:	003d0900 	.word	0x003d0900
 8006f20:	00b71b00 	.word	0x00b71b00
 8006f24:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f2c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006f30:	430b      	orrs	r3, r1
 8006f32:	f040 809c 	bne.w	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006f36:	4b9e      	ldr	r3, [pc, #632]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006f3e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f46:	d054      	beq.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f4e:	f200 808b 	bhi.w	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f58:	f000 8083 	beq.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f62:	f200 8081 	bhi.w	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f6c:	d02f      	beq.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f74:	d878      	bhi.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f82:	d012      	beq.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006f84:	e070      	b.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f86:	4b8a      	ldr	r3, [pc, #552]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f92:	d107      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 feaf 	bl	8007cfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa2:	e3e4      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa8:	e3e1      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006faa:	4b81      	ldr	r3, [pc, #516]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb6:	d107      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb8:	f107 0318 	add.w	r3, r7, #24
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fbf5 	bl	80077ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc6:	e3d2      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fcc:	e3cf      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fce:	4b78      	ldr	r3, [pc, #480]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fda:	d107      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fdc:	f107 030c 	add.w	r3, r7, #12
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fd37 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fea:	e3c0      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff0:	e3bd      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ff2:	4b6f      	ldr	r3, [pc, #444]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ffa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ffc:	4b6c      	ldr	r3, [pc, #432]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b04      	cmp	r3, #4
 8007006:	d10c      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800700e:	4b68      	ldr	r3, [pc, #416]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	08db      	lsrs	r3, r3, #3
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	4a66      	ldr	r2, [pc, #408]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800701a:	fa22 f303 	lsr.w	r3, r2, r3
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007020:	e01e      	b.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007022:	4b63      	ldr	r3, [pc, #396]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800702e:	d106      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007036:	d102      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007038:	4b5f      	ldr	r3, [pc, #380]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800703c:	e010      	b.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800703e:	4b5c      	ldr	r3, [pc, #368]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800704a:	d106      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800704c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007052:	d102      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007054:	4b59      	ldr	r3, [pc, #356]	; (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007058:	e002      	b.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800705e:	e386      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007060:	e385      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007062:	4b57      	ldr	r3, [pc, #348]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007066:	e382      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800706c:	e37f      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800706e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007072:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007076:	430b      	orrs	r3, r1
 8007078:	f040 80a7 	bne.w	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800707c:	4b4c      	ldr	r3, [pc, #304]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800707e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007080:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007084:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800708c:	d055      	beq.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007094:	f200 8096 	bhi.w	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800709e:	f000 8084 	beq.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070a8:	f200 808c 	bhi.w	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070b2:	d030      	beq.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ba:	f200 8083 	bhi.w	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070ca:	d012      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80070cc:	e07a      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070ce:	4b38      	ldr	r3, [pc, #224]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070da:	d107      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fe0b 	bl	8007cfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ea:	e340      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f0:	e33d      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070f2:	4b2f      	ldr	r3, [pc, #188]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070fe:	d107      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007100:	f107 0318 	add.w	r3, r7, #24
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fb51 	bl	80077ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800710e:	e32e      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007114:	e32b      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007116:	4b26      	ldr	r3, [pc, #152]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800711e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007122:	d107      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007124:	f107 030c 	add.w	r3, r7, #12
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fc93 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007132:	e31c      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007138:	e319      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800713a:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800713c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007142:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007144:	4b1a      	ldr	r3, [pc, #104]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b04      	cmp	r3, #4
 800714e:	d10c      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007156:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	08db      	lsrs	r3, r3, #3
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	4a14      	ldr	r2, [pc, #80]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007162:	fa22 f303 	lsr.w	r3, r2, r3
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007168:	e01e      	b.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800716a:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007176:	d106      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800717e:	d102      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007180:	4b0d      	ldr	r3, [pc, #52]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007184:	e010      	b.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007186:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007192:	d106      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800719a:	d102      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	e002      	b.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80071a6:	e2e2      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071a8:	e2e1      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071aa:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ae:	e2de      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071b0:	58024400 	.word	0x58024400
 80071b4:	03d09000 	.word	0x03d09000
 80071b8:	003d0900 	.word	0x003d0900
 80071bc:	00b71b00 	.word	0x00b71b00
 80071c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c8:	e2d1      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80071ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ce:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80071d2:	430b      	orrs	r3, r1
 80071d4:	f040 809c 	bne.w	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80071d8:	4b93      	ldr	r3, [pc, #588]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80071e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071e8:	d054      	beq.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071f0:	f200 808b 	bhi.w	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80071f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071fa:	f000 8083 	beq.w	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007204:	f200 8081 	bhi.w	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720e:	d02f      	beq.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007216:	d878      	bhi.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007224:	d012      	beq.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007226:	e070      	b.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007228:	4b7f      	ldr	r3, [pc, #508]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007234:	d107      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fd5e 	bl	8007cfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007244:	e293      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800724a:	e290      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800724c:	4b76      	ldr	r3, [pc, #472]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007258:	d107      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800725a:	f107 0318 	add.w	r3, r7, #24
 800725e:	4618      	mov	r0, r3
 8007260:	f000 faa4 	bl	80077ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007268:	e281      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800726e:	e27e      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007270:	4b6d      	ldr	r3, [pc, #436]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800727c:	d107      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800727e:	f107 030c 	add.w	r3, r7, #12
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fbe6 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800728c:	e26f      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007292:	e26c      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007294:	4b64      	ldr	r3, [pc, #400]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007298:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800729c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800729e:	4b62      	ldr	r3, [pc, #392]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d10c      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d109      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072b0:	4b5d      	ldr	r3, [pc, #372]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	08db      	lsrs	r3, r3, #3
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	4a5c      	ldr	r2, [pc, #368]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80072bc:	fa22 f303 	lsr.w	r3, r2, r3
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c2:	e01e      	b.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072c4:	4b58      	ldr	r3, [pc, #352]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d0:	d106      	bne.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80072d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072d8:	d102      	bne.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072da:	4b55      	ldr	r3, [pc, #340]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072de:	e010      	b.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072e0:	4b51      	ldr	r3, [pc, #324]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ec:	d106      	bne.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80072ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072f4:	d102      	bne.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072f6:	4b4f      	ldr	r3, [pc, #316]	; (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072fa:	e002      	b.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007300:	e235      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007302:	e234      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007304:	4b4c      	ldr	r3, [pc, #304]	; (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007308:	e231      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800730e:	e22e      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007314:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007318:	430b      	orrs	r3, r1
 800731a:	f040 808f 	bne.w	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800731e:	4b42      	ldr	r3, [pc, #264]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007322:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007326:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800732e:	d06b      	beq.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007336:	d874      	bhi.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800733e:	d056      	beq.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007346:	d86c      	bhi.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800734e:	d03b      	beq.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007356:	d864      	bhi.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800735e:	d021      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007366:	d85c      	bhi.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	2b00      	cmp	r3, #0
 800736c:	d004      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007374:	d004      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007376:	e054      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007378:	f7fe fa62 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 800737c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800737e:	e1f6      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007380:	4b29      	ldr	r3, [pc, #164]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800738c:	d107      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800738e:	f107 0318 	add.w	r3, r7, #24
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fa0a 	bl	80077ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800739c:	e1e7      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a2:	e1e4      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073a4:	4b20      	ldr	r3, [pc, #128]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b0:	d107      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073b2:	f107 030c 	add.w	r3, r7, #12
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fb4c 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c0:	e1d5      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c6:	e1d2      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073c8:	4b17      	ldr	r3, [pc, #92]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d109      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073d4:	4b14      	ldr	r3, [pc, #80]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	08db      	lsrs	r3, r3, #3
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	4a13      	ldr	r2, [pc, #76]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073e6:	e1c2      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ec:	e1bf      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80073ee:	4b0e      	ldr	r3, [pc, #56]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fa:	d102      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80073fc:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80073fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007400:	e1b5      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007406:	e1b2      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007408:	4b07      	ldr	r3, [pc, #28]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007414:	d102      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007416:	4b07      	ldr	r3, [pc, #28]	; (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007418:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800741a:	e1a8      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007420:	e1a5      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007426:	e1a2      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007428:	58024400 	.word	0x58024400
 800742c:	03d09000 	.word	0x03d09000
 8007430:	003d0900 	.word	0x003d0900
 8007434:	00b71b00 	.word	0x00b71b00
 8007438:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800743c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007440:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007444:	430b      	orrs	r3, r1
 8007446:	d173      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007448:	4b9c      	ldr	r3, [pc, #624]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800744a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007450:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007458:	d02f      	beq.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007460:	d863      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007464:	2b00      	cmp	r3, #0
 8007466:	d004      	beq.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800746e:	d012      	beq.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007470:	e05b      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007472:	4b92      	ldr	r3, [pc, #584]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800747a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800747e:	d107      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007480:	f107 0318 	add.w	r3, r7, #24
 8007484:	4618      	mov	r0, r3
 8007486:	f000 f991 	bl	80077ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800748e:	e16e      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007494:	e16b      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007496:	4b89      	ldr	r3, [pc, #548]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800749e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074a2:	d107      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074a4:	f107 030c 	add.w	r3, r7, #12
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fad3 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074b2:	e15c      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074b8:	e159      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074ba:	4b80      	ldr	r3, [pc, #512]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074c4:	4b7d      	ldr	r3, [pc, #500]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d10c      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80074d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074d6:	4b79      	ldr	r3, [pc, #484]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	08db      	lsrs	r3, r3, #3
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	4a77      	ldr	r2, [pc, #476]	; (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80074e2:	fa22 f303 	lsr.w	r3, r2, r3
 80074e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e8:	e01e      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074ea:	4b74      	ldr	r3, [pc, #464]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f6:	d106      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80074f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074fe:	d102      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007500:	4b70      	ldr	r3, [pc, #448]	; (80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007504:	e010      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007506:	4b6d      	ldr	r3, [pc, #436]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007512:	d106      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800751a:	d102      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800751c:	4b6a      	ldr	r3, [pc, #424]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007520:	e002      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007526:	e122      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007528:	e121      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800752e:	e11e      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007534:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007538:	430b      	orrs	r3, r1
 800753a:	d133      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800753c:	4b5f      	ldr	r3, [pc, #380]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800753e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007544:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	2b00      	cmp	r3, #0
 800754a:	d004      	beq.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007552:	d012      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007554:	e023      	b.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007556:	4b59      	ldr	r3, [pc, #356]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007562:	d107      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fbc7 	bl	8007cfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007572:	e0fc      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007578:	e0f9      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800757a:	4b50      	ldr	r3, [pc, #320]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007586:	d107      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007588:	f107 0318 	add.w	r3, r7, #24
 800758c:	4618      	mov	r0, r3
 800758e:	f000 f90d 	bl	80077ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007596:	e0ea      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800759c:	e0e7      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a2:	e0e4      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80075a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80075ac:	430b      	orrs	r3, r1
 80075ae:	f040 808d 	bne.w	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80075b2:	4b42      	ldr	r3, [pc, #264]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80075ba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80075bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075c2:	d06b      	beq.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ca:	d874      	bhi.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d2:	d056      	beq.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075da:	d86c      	bhi.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075e2:	d03b      	beq.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075ea:	d864      	bhi.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f2:	d021      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075fa:	d85c      	bhi.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007608:	d004      	beq.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800760a:	e054      	b.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800760c:	f000 f8b8 	bl	8007780 <HAL_RCCEx_GetD3PCLK1Freq>
 8007610:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007612:	e0ac      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007614:	4b29      	ldr	r3, [pc, #164]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800761c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007620:	d107      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007622:	f107 0318 	add.w	r3, r7, #24
 8007626:	4618      	mov	r0, r3
 8007628:	f000 f8c0 	bl	80077ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007630:	e09d      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007636:	e09a      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007638:	4b20      	ldr	r3, [pc, #128]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007644:	d107      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007646:	f107 030c 	add.w	r3, r7, #12
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fa02 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007654:	e08b      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800765a:	e088      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800765c:	4b17      	ldr	r3, [pc, #92]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b04      	cmp	r3, #4
 8007666:	d109      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007668:	4b14      	ldr	r3, [pc, #80]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	08db      	lsrs	r3, r3, #3
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	4a13      	ldr	r2, [pc, #76]	; (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007674:	fa22 f303 	lsr.w	r3, r2, r3
 8007678:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800767a:	e078      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007680:	e075      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007682:	4b0e      	ldr	r3, [pc, #56]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800768e:	d102      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007690:	4b0c      	ldr	r3, [pc, #48]	; (80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007694:	e06b      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800769a:	e068      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800769c:	4b07      	ldr	r3, [pc, #28]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076a8:	d102      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80076aa:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ae:	e05e      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076b4:	e05b      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ba:	e058      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076bc:	58024400 	.word	0x58024400
 80076c0:	03d09000 	.word	0x03d09000
 80076c4:	003d0900 	.word	0x003d0900
 80076c8:	00b71b00 	.word	0x00b71b00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80076cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80076d4:	430b      	orrs	r3, r1
 80076d6:	d148      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80076d8:	4b27      	ldr	r3, [pc, #156]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80076da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076e8:	d02a      	beq.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076f0:	d838      	bhi.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076fe:	d00d      	beq.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007700:	e030      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007702:	4b1d      	ldr	r3, [pc, #116]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800770e:	d102      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007710:	4b1a      	ldr	r3, [pc, #104]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007714:	e02b      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800771a:	e028      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800771c:	4b16      	ldr	r3, [pc, #88]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007728:	d107      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800772a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fae4 	bl	8007cfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007738:	e019      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800773e:	e016      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007740:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800774c:	d107      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800774e:	f107 0318 	add.w	r3, r7, #24
 8007752:	4618      	mov	r0, r3
 8007754:	f000 f82a 	bl	80077ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800775c:	e007      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007762:	e004      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007768:	e001      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800776e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007770:	4618      	mov	r0, r3
 8007772:	3740      	adds	r7, #64	; 0x40
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	58024400 	.word	0x58024400
 800777c:	00b71b00 	.word	0x00b71b00

08007780 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007784:	f7fe f82c 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8007788:	4602      	mov	r2, r0
 800778a:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	091b      	lsrs	r3, r3, #4
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	4904      	ldr	r1, [pc, #16]	; (80077a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007796:	5ccb      	ldrb	r3, [r1, r3]
 8007798:	f003 031f 	and.w	r3, r3, #31
 800779c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	58024400 	.word	0x58024400
 80077a8:	08016a9c 	.word	0x08016a9c

080077ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b089      	sub	sp, #36	; 0x24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077b4:	4ba1      	ldr	r3, [pc, #644]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80077be:	4b9f      	ldr	r3, [pc, #636]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	0b1b      	lsrs	r3, r3, #12
 80077c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077ca:	4b9c      	ldr	r3, [pc, #624]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	091b      	lsrs	r3, r3, #4
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80077d6:	4b99      	ldr	r3, [pc, #612]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077da:	08db      	lsrs	r3, r3, #3
 80077dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8111 	beq.w	8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	f000 8083 	beq.w	8007908 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b02      	cmp	r3, #2
 8007806:	f200 80a1 	bhi.w	800794c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d056      	beq.n	80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007816:	e099      	b.n	800794c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007818:	4b88      	ldr	r3, [pc, #544]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b00      	cmp	r3, #0
 8007822:	d02d      	beq.n	8007880 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007824:	4b85      	ldr	r3, [pc, #532]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	08db      	lsrs	r3, r3, #3
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	4a84      	ldr	r2, [pc, #528]	; (8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007830:	fa22 f303 	lsr.w	r3, r2, r3
 8007834:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	ee07 3a90 	vmov	s15, r3
 800783c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b7b      	ldr	r3, [pc, #492]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007862:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800787e:	e087      	b.n	8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800788e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007892:	4b6a      	ldr	r3, [pc, #424]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c2:	e065      	b.n	8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d6:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007906:	e043      	b.n	8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791a:	4b48      	ldr	r3, [pc, #288]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792a:	ed97 6a03 	vldr	s12, [r7, #12]
 800792e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800794a:	e021      	b.n	8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800795a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795e:	4b37      	ldr	r3, [pc, #220]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007972:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800798e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007990:	4b2a      	ldr	r3, [pc, #168]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	0a5b      	lsrs	r3, r3, #9
 8007996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b6:	ee17 2a90 	vmov	r2, s15
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80079be:	4b1f      	ldr	r3, [pc, #124]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	0c1b      	lsrs	r3, r3, #16
 80079c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e4:	ee17 2a90 	vmov	r2, s15
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80079ec:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	0e1b      	lsrs	r3, r3, #24
 80079f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a12:	ee17 2a90 	vmov	r2, s15
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a1a:	e008      	b.n	8007a2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	609a      	str	r2, [r3, #8]
}
 8007a2e:	bf00      	nop
 8007a30:	3724      	adds	r7, #36	; 0x24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	03d09000 	.word	0x03d09000
 8007a44:	46000000 	.word	0x46000000
 8007a48:	4c742400 	.word	0x4c742400
 8007a4c:	4a742400 	.word	0x4a742400
 8007a50:	4b371b00 	.word	0x4b371b00

08007a54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b089      	sub	sp, #36	; 0x24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a5c:	4ba1      	ldr	r3, [pc, #644]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a66:	4b9f      	ldr	r3, [pc, #636]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	0d1b      	lsrs	r3, r3, #20
 8007a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a72:	4b9c      	ldr	r3, [pc, #624]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a76:	0a1b      	lsrs	r3, r3, #8
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a7e:	4b99      	ldr	r3, [pc, #612]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a82:	08db      	lsrs	r3, r3, #3
 8007a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8111 	beq.w	8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	f000 8083 	beq.w	8007bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	f200 80a1 	bhi.w	8007bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d056      	beq.n	8007b6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007abe:	e099      	b.n	8007bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ac0:	4b88      	ldr	r3, [pc, #544]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d02d      	beq.n	8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007acc:	4b85      	ldr	r3, [pc, #532]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	08db      	lsrs	r3, r3, #3
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	4a84      	ldr	r2, [pc, #528]	; (8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8007adc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	ee07 3a90 	vmov	s15, r3
 8007ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af6:	4b7b      	ldr	r3, [pc, #492]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b26:	e087      	b.n	8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3a:	4b6a      	ldr	r3, [pc, #424]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b6a:	e065      	b.n	8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7e:	4b59      	ldr	r3, [pc, #356]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bae:	e043      	b.n	8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	ee07 3a90 	vmov	s15, r3
 8007bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc2:	4b48      	ldr	r3, [pc, #288]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bf2:	e021      	b.n	8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c06:	4b37      	ldr	r3, [pc, #220]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c38:	4b2a      	ldr	r3, [pc, #168]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	0a5b      	lsrs	r3, r3, #9
 8007c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5e:	ee17 2a90 	vmov	r2, s15
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c66:	4b1f      	ldr	r3, [pc, #124]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	0c1b      	lsrs	r3, r3, #16
 8007c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c70:	ee07 3a90 	vmov	s15, r3
 8007c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c8c:	ee17 2a90 	vmov	r2, s15
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007c94:	4b13      	ldr	r3, [pc, #76]	; (8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c98:	0e1b      	lsrs	r3, r3, #24
 8007c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cba:	ee17 2a90 	vmov	r2, s15
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	609a      	str	r2, [r3, #8]
}
 8007cd6:	bf00      	nop
 8007cd8:	3724      	adds	r7, #36	; 0x24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	58024400 	.word	0x58024400
 8007ce8:	03d09000 	.word	0x03d09000
 8007cec:	46000000 	.word	0x46000000
 8007cf0:	4c742400 	.word	0x4c742400
 8007cf4:	4a742400 	.word	0x4a742400
 8007cf8:	4b371b00 	.word	0x4b371b00

08007cfc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b089      	sub	sp, #36	; 0x24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d04:	4ba0      	ldr	r3, [pc, #640]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007d0e:	4b9e      	ldr	r3, [pc, #632]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	091b      	lsrs	r3, r3, #4
 8007d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d18:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d1a:	4b9b      	ldr	r3, [pc, #620]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007d24:	4b98      	ldr	r3, [pc, #608]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d28:	08db      	lsrs	r3, r3, #3
 8007d2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	fb02 f303 	mul.w	r3, r2, r3
 8007d34:	ee07 3a90 	vmov	s15, r3
 8007d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 8111 	beq.w	8007f6a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	f000 8083 	beq.w	8007e56 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	f200 80a1 	bhi.w	8007e9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d056      	beq.n	8007e12 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d64:	e099      	b.n	8007e9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d66:	4b88      	ldr	r3, [pc, #544]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d02d      	beq.n	8007dce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d72:	4b85      	ldr	r3, [pc, #532]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	08db      	lsrs	r3, r3, #3
 8007d78:	f003 0303 	and.w	r3, r3, #3
 8007d7c:	4a83      	ldr	r2, [pc, #524]	; (8007f8c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d82:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	ee07 3a90 	vmov	s15, r3
 8007d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	ee07 3a90 	vmov	s15, r3
 8007d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9c:	4b7a      	ldr	r3, [pc, #488]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da4:	ee07 3a90 	vmov	s15, r3
 8007da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007db0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007f90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007dcc:	e087      	b.n	8007ede <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	ee07 3a90 	vmov	s15, r3
 8007dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007de0:	4b69      	ldr	r3, [pc, #420]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de8:	ee07 3a90 	vmov	s15, r3
 8007dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007df4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007f90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e10:	e065      	b.n	8007ede <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	ee07 3a90 	vmov	s15, r3
 8007e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007f98 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e24:	4b58      	ldr	r3, [pc, #352]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e38:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007f90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e54:	e043      	b.n	8007ede <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	ee07 3a90 	vmov	s15, r3
 8007e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e60:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007f9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e68:	4b47      	ldr	r3, [pc, #284]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e70:	ee07 3a90 	vmov	s15, r3
 8007e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e78:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e7c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007f90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e98:	e021      	b.n	8007ede <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007f94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eac:	4b36      	ldr	r3, [pc, #216]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb4:	ee07 3a90 	vmov	s15, r3
 8007eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ebc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ec0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007f90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007edc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007ede:	4b2a      	ldr	r3, [pc, #168]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee2:	0a5b      	lsrs	r3, r3, #9
 8007ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee8:	ee07 3a90 	vmov	s15, r3
 8007eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ef4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f04:	ee17 2a90 	vmov	r2, s15
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007f0c:	4b1e      	ldr	r3, [pc, #120]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f10:	0c1b      	lsrs	r3, r3, #16
 8007f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f32:	ee17 2a90 	vmov	r2, s15
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007f3a:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	0e1b      	lsrs	r3, r3, #24
 8007f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f44:	ee07 3a90 	vmov	s15, r3
 8007f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f60:	ee17 2a90 	vmov	r2, s15
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f68:	e008      	b.n	8007f7c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	609a      	str	r2, [r3, #8]
}
 8007f7c:	bf00      	nop
 8007f7e:	3724      	adds	r7, #36	; 0x24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	03d09000 	.word	0x03d09000
 8007f90:	46000000 	.word	0x46000000
 8007f94:	4c742400 	.word	0x4c742400
 8007f98:	4a742400 	.word	0x4a742400
 8007f9c:	4b371b00 	.word	0x4b371b00

08007fa0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fae:	4b53      	ldr	r3, [pc, #332]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d101      	bne.n	8007fbe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e099      	b.n	80080f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fbe:	4b4f      	ldr	r3, [pc, #316]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a4e      	ldr	r2, [pc, #312]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8007fc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fca:	f7f8 ff17 	bl	8000dfc <HAL_GetTick>
 8007fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fd0:	e008      	b.n	8007fe4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fd2:	f7f8 ff13 	bl	8000dfc <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d901      	bls.n	8007fe4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e086      	b.n	80080f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fe4:	4b45      	ldr	r3, [pc, #276]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1f0      	bne.n	8007fd2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ff0:	4b42      	ldr	r3, [pc, #264]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	031b      	lsls	r3, r3, #12
 8007ffe:	493f      	ldr	r1, [pc, #252]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008000:	4313      	orrs	r3, r2
 8008002:	628b      	str	r3, [r1, #40]	; 0x28
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	3b01      	subs	r3, #1
 800800a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	3b01      	subs	r3, #1
 8008014:	025b      	lsls	r3, r3, #9
 8008016:	b29b      	uxth	r3, r3
 8008018:	431a      	orrs	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	3b01      	subs	r3, #1
 8008020:	041b      	lsls	r3, r3, #16
 8008022:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	3b01      	subs	r3, #1
 800802e:	061b      	lsls	r3, r3, #24
 8008030:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008034:	4931      	ldr	r1, [pc, #196]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008036:	4313      	orrs	r3, r2
 8008038:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800803a:	4b30      	ldr	r3, [pc, #192]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	492d      	ldr	r1, [pc, #180]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008048:	4313      	orrs	r3, r2
 800804a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800804c:	4b2b      	ldr	r3, [pc, #172]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	f023 0220 	bic.w	r2, r3, #32
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	4928      	ldr	r1, [pc, #160]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 800805a:	4313      	orrs	r3, r2
 800805c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800805e:	4b27      	ldr	r3, [pc, #156]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	4a26      	ldr	r2, [pc, #152]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008064:	f023 0310 	bic.w	r3, r3, #16
 8008068:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800806a:	4b24      	ldr	r3, [pc, #144]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 800806c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800806e:	4b24      	ldr	r3, [pc, #144]	; (8008100 <RCCEx_PLL2_Config+0x160>)
 8008070:	4013      	ands	r3, r2
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	69d2      	ldr	r2, [r2, #28]
 8008076:	00d2      	lsls	r2, r2, #3
 8008078:	4920      	ldr	r1, [pc, #128]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 800807a:	4313      	orrs	r3, r2
 800807c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800807e:	4b1f      	ldr	r3, [pc, #124]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008082:	4a1e      	ldr	r2, [pc, #120]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008084:	f043 0310 	orr.w	r3, r3, #16
 8008088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d106      	bne.n	800809e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008090:	4b1a      	ldr	r3, [pc, #104]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	4a19      	ldr	r2, [pc, #100]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 8008096:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800809a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800809c:	e00f      	b.n	80080be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d106      	bne.n	80080b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080a4:	4b15      	ldr	r3, [pc, #84]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	4a14      	ldr	r2, [pc, #80]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080b0:	e005      	b.n	80080be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	4a11      	ldr	r2, [pc, #68]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a0e      	ldr	r2, [pc, #56]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ca:	f7f8 fe97 	bl	8000dfc <HAL_GetTick>
 80080ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080d0:	e008      	b.n	80080e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080d2:	f7f8 fe93 	bl	8000dfc <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e006      	b.n	80080f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <RCCEx_PLL2_Config+0x15c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0f0      	beq.n	80080d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	58024400 	.word	0x58024400
 8008100:	ffff0007 	.word	0xffff0007

08008104 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008112:	4b53      	ldr	r3, [pc, #332]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	2b03      	cmp	r3, #3
 800811c:	d101      	bne.n	8008122 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e099      	b.n	8008256 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008122:	4b4f      	ldr	r3, [pc, #316]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a4e      	ldr	r2, [pc, #312]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800812c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812e:	f7f8 fe65 	bl	8000dfc <HAL_GetTick>
 8008132:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008134:	e008      	b.n	8008148 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008136:	f7f8 fe61 	bl	8000dfc <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	2b02      	cmp	r3, #2
 8008142:	d901      	bls.n	8008148 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e086      	b.n	8008256 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008148:	4b45      	ldr	r3, [pc, #276]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1f0      	bne.n	8008136 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008154:	4b42      	ldr	r3, [pc, #264]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	051b      	lsls	r3, r3, #20
 8008162:	493f      	ldr	r1, [pc, #252]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008164:	4313      	orrs	r3, r2
 8008166:	628b      	str	r3, [r1, #40]	; 0x28
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	3b01      	subs	r3, #1
 800816e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	3b01      	subs	r3, #1
 8008178:	025b      	lsls	r3, r3, #9
 800817a:	b29b      	uxth	r3, r3
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	3b01      	subs	r3, #1
 8008184:	041b      	lsls	r3, r3, #16
 8008186:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	3b01      	subs	r3, #1
 8008192:	061b      	lsls	r3, r3, #24
 8008194:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008198:	4931      	ldr	r1, [pc, #196]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800819a:	4313      	orrs	r3, r2
 800819c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800819e:	4b30      	ldr	r3, [pc, #192]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	492d      	ldr	r1, [pc, #180]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081b0:	4b2b      	ldr	r3, [pc, #172]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	4928      	ldr	r1, [pc, #160]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081c2:	4b27      	ldr	r3, [pc, #156]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	4a26      	ldr	r2, [pc, #152]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081ce:	4b24      	ldr	r3, [pc, #144]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081d2:	4b24      	ldr	r3, [pc, #144]	; (8008264 <RCCEx_PLL3_Config+0x160>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	69d2      	ldr	r2, [r2, #28]
 80081da:	00d2      	lsls	r2, r2, #3
 80081dc:	4920      	ldr	r1, [pc, #128]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081e2:	4b1f      	ldr	r3, [pc, #124]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	4a1e      	ldr	r2, [pc, #120]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d106      	bne.n	8008202 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081f4:	4b1a      	ldr	r3, [pc, #104]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	4a19      	ldr	r2, [pc, #100]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 80081fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008200:	e00f      	b.n	8008222 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d106      	bne.n	8008216 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008208:	4b15      	ldr	r3, [pc, #84]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	4a14      	ldr	r2, [pc, #80]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800820e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008212:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008214:	e005      	b.n	8008222 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008216:	4b12      	ldr	r3, [pc, #72]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821a:	4a11      	ldr	r2, [pc, #68]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800821c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008220:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a0e      	ldr	r2, [pc, #56]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 8008228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800822c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800822e:	f7f8 fde5 	bl	8000dfc <HAL_GetTick>
 8008232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008234:	e008      	b.n	8008248 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008236:	f7f8 fde1 	bl	8000dfc <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	2b02      	cmp	r3, #2
 8008242:	d901      	bls.n	8008248 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e006      	b.n	8008256 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008248:	4b05      	ldr	r3, [pc, #20]	; (8008260 <RCCEx_PLL3_Config+0x15c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0f0      	beq.n	8008236 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008254:	7bfb      	ldrb	r3, [r7, #15]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	58024400 	.word	0x58024400
 8008264:	ffff0007 	.word	0xffff0007

08008268 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08a      	sub	sp, #40	; 0x28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e075      	b.n	8008366 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d105      	bne.n	8008292 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7f8 fa5d 	bl	800074c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2204      	movs	r2, #4
 8008296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f868 	bl	8008370 <HAL_SD_InitCard>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e05d      	b.n	8008366 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80082aa:	f107 0308 	add.w	r3, r7, #8
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fdb5 	bl	8008e20 <HAL_SD_GetCardStatus>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e052      	b.n	8008366 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80082c0:	7e3b      	ldrb	r3, [r7, #24]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80082c6:	7e7b      	ldrb	r3, [r7, #25]
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d10a      	bne.n	80082ea <HAL_SD_Init+0x82>
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d102      	bne.n	80082e0 <HAL_SD_Init+0x78>
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e6:	659a      	str	r2, [r3, #88]	; 0x58
 80082e8:	e00b      	b.n	8008302 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d104      	bne.n	80082fc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082f8:	659a      	str	r2, [r3, #88]	; 0x58
 80082fa:	e002      	b.n	8008302 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fe73 	bl	8008ff4 <HAL_SD_ConfigWideBusOperation>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e026      	b.n	8008366 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008318:	f7f8 fd70 	bl	8000dfc <HAL_GetTick>
 800831c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800831e:	e011      	b.n	8008344 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008320:	f7f8 fd6c 	bl	8000dfc <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832e:	d109      	bne.n	8008344 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008336:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e010      	b.n	8008366 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 ff67 	bl	8009218 <HAL_SD_GetCardState>
 800834a:	4603      	mov	r3, r0
 800834c:	2b04      	cmp	r3, #4
 800834e:	d1e7      	bne.n	8008320 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3728      	adds	r7, #40	; 0x28
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008370:	b590      	push	{r4, r7, lr}
 8008372:	b08d      	sub	sp, #52	; 0x34
 8008374:	af02      	add	r7, sp, #8
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800837c:	2300      	movs	r3, #0
 800837e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008380:	2300      	movs	r3, #0
 8008382:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008384:	2300      	movs	r3, #0
 8008386:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008388:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	f7fe fc76 	bl	8006c80 <HAL_RCCEx_GetPeriphCLKFreq>
 8008394:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	2b00      	cmp	r3, #0
 800839a:	d109      	bne.n	80083b0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80083aa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e070      	b.n	8008492 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	0a1b      	lsrs	r3, r3, #8
 80083b4:	4a39      	ldr	r2, [pc, #228]	; (800849c <HAL_SD_InitCard+0x12c>)
 80083b6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ba:	091b      	lsrs	r3, r3, #4
 80083bc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681c      	ldr	r4, [r3, #0]
 80083c2:	466a      	mov	r2, sp
 80083c4:	f107 0318 	add.w	r3, r7, #24
 80083c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80083cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80083d0:	f107 030c 	add.w	r3, r7, #12
 80083d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083d6:	4620      	mov	r0, r4
 80083d8:	f002 f91c 	bl	800a614 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f002 f95f 	bl	800a6a4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80083fe:	4a28      	ldr	r2, [pc, #160]	; (80084a0 <HAL_SD_InitCard+0x130>)
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	fbb2 f3f3 	udiv	r3, r2, r3
 8008406:	3301      	adds	r3, #1
 8008408:	4618      	mov	r0, r3
 800840a:	f7f8 fd03 	bl	8000e14 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fff0 	bl	80093f4 <SD_PowerON>
 8008414:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e02e      	b.n	8008492 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 ff0f 	bl	8009258 <SD_InitCard>
 800843a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	431a      	orrs	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e01b      	b.n	8008492 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008462:	4618      	mov	r0, r3
 8008464:	f002 f9b4 	bl	800a7d0 <SDMMC_CmdBlockLength>
 8008468:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00f      	beq.n	8008490 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a0b      	ldr	r2, [pc, #44]	; (80084a4 <HAL_SD_InitCard+0x134>)
 8008476:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	431a      	orrs	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e000      	b.n	8008492 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	372c      	adds	r7, #44	; 0x2c
 8008496:	46bd      	mov	sp, r7
 8008498:	bd90      	pop	{r4, r7, pc}
 800849a:	bf00      	nop
 800849c:	014f8b59 	.word	0x014f8b59
 80084a0:	00012110 	.word	0x00012110
 80084a4:	1fe00fff 	.word	0x1fe00fff

080084a8 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b092      	sub	sp, #72	; 0x48
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084b6:	f7f8 fca1 	bl	8000dfc <HAL_GetTick>
 80084ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d107      	bne.n	80084da <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e167      	b.n	80087aa <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	f040 815a 	bne.w	800879c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80084ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	441a      	add	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d907      	bls.n	800850c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008500:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e14e      	b.n	80087aa <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2203      	movs	r2, #3
 8008510:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2200      	movs	r2, #0
 800851a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008520:	2b01      	cmp	r3, #1
 8008522:	d002      	beq.n	800852a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	025b      	lsls	r3, r3, #9
 8008528:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800852a:	f04f 33ff 	mov.w	r3, #4294967295
 800852e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	025b      	lsls	r3, r3, #9
 8008534:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008536:	2390      	movs	r3, #144	; 0x90
 8008538:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800853a:	2302      	movs	r3, #2
 800853c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800853e:	2300      	movs	r3, #0
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008542:	2300      	movs	r3, #0
 8008544:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f107 0214 	add.w	r2, r7, #20
 800854e:	4611      	mov	r1, r2
 8008550:	4618      	mov	r0, r3
 8008552:	f002 f911 	bl	800a778 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008564:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d90a      	bls.n	8008582 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2202      	movs	r2, #2
 8008570:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008578:	4618      	mov	r0, r3
 800857a:	f002 f96f 	bl	800a85c <SDMMC_CmdReadMultiBlock>
 800857e:	6478      	str	r0, [r7, #68]	; 0x44
 8008580:	e009      	b.n	8008596 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800858e:	4618      	mov	r0, r3
 8008590:	f002 f941 	bl	800a816 <SDMMC_CmdReadSingleBlock>
 8008594:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008598:	2b00      	cmp	r3, #0
 800859a:	d012      	beq.n	80085c2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a84      	ldr	r2, [pc, #528]	; (80087b4 <HAL_SD_ReadBlocks+0x30c>)
 80085a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085aa:	431a      	orrs	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e0f3      	b.n	80087aa <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80085c6:	e058      	b.n	800867a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d033      	beq.n	800863e <HAL_SD_ReadBlocks+0x196>
 80085d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d8:	2b1f      	cmp	r3, #31
 80085da:	d930      	bls.n	800863e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 80085dc:	2300      	movs	r3, #0
 80085de:	643b      	str	r3, [r7, #64]	; 0x40
 80085e0:	e027      	b.n	8008632 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f002 f83e 	bl	800a668 <SDMMC_ReadFIFO>
 80085ec:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80085f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f8:	3301      	adds	r3, #1
 80085fa:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	0a1b      	lsrs	r3, r3, #8
 8008600:	b2da      	uxtb	r2, r3
 8008602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008604:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008608:	3301      	adds	r3, #1
 800860a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	0c1b      	lsrs	r3, r3, #16
 8008610:	b2da      	uxtb	r2, r3
 8008612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008614:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008618:	3301      	adds	r3, #1
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	0e1b      	lsrs	r3, r3, #24
 8008620:	b2da      	uxtb	r2, r3
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008628:	3301      	adds	r3, #1
 800862a:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 800862c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800862e:	3301      	adds	r3, #1
 8008630:	643b      	str	r3, [r7, #64]	; 0x40
 8008632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008634:	2b07      	cmp	r3, #7
 8008636:	d9d4      	bls.n	80085e2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800863a:	3b20      	subs	r3, #32
 800863c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800863e:	f7f8 fbdd 	bl	8000dfc <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800864a:	429a      	cmp	r2, r3
 800864c:	d902      	bls.n	8008654 <HAL_SD_ReadBlocks+0x1ac>
 800864e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008650:	2b00      	cmp	r3, #0
 8008652:	d112      	bne.n	800867a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a56      	ldr	r2, [pc, #344]	; (80087b4 <HAL_SD_ReadBlocks+0x30c>)
 800865a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008660:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e097      	b.n	80087aa <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008680:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008684:	2b00      	cmp	r3, #0
 8008686:	d09f      	beq.n	80085c8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008696:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d022      	beq.n	80086ec <HAL_SD_ReadBlocks+0x244>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d91f      	bls.n	80086ec <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d01b      	beq.n	80086ec <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f002 f939 	bl	800a930 <SDMMC_CmdStopTransfer>
 80086be:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80086c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d012      	beq.n	80086ec <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a3a      	ldr	r2, [pc, #232]	; (80087b4 <HAL_SD_ReadBlocks+0x30c>)
 80086cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d4:	431a      	orrs	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e05e      	b.n	80087aa <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d012      	beq.n	8008720 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a2d      	ldr	r2, [pc, #180]	; (80087b4 <HAL_SD_ReadBlocks+0x30c>)
 8008700:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008706:	f043 0208 	orr.w	r2, r3, #8
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e044      	b.n	80087aa <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d012      	beq.n	8008754 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a20      	ldr	r2, [pc, #128]	; (80087b4 <HAL_SD_ReadBlocks+0x30c>)
 8008734:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873a:	f043 0202 	orr.w	r2, r3, #2
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e02a      	b.n	80087aa <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b00      	cmp	r3, #0
 8008760:	d012      	beq.n	8008788 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a13      	ldr	r2, [pc, #76]	; (80087b4 <HAL_SD_ReadBlocks+0x30c>)
 8008768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876e:	f043 0220 	orr.w	r2, r3, #32
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e010      	b.n	80087aa <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a0a      	ldr	r2, [pc, #40]	; (80087b8 <HAL_SD_ReadBlocks+0x310>)
 800878e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	e006      	b.n	80087aa <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
  }
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3748      	adds	r7, #72	; 0x48
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	1fe00fff 	.word	0x1fe00fff
 80087b8:	18000f3a 	.word	0x18000f3a

080087bc <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b092      	sub	sp, #72	; 0x48
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087ca:	f7f8 fb17 	bl	8000dfc <HAL_GetTick>
 80087ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d107      	bne.n	80087ee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e16b      	b.n	8008ac6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	f040 815e 	bne.w	8008ab8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	441a      	add	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800880c:	429a      	cmp	r2, r3
 800880e:	d907      	bls.n	8008820 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e152      	b.n	8008ac6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2203      	movs	r2, #3
 8008824:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2200      	movs	r2, #0
 800882e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008834:	2b01      	cmp	r3, #1
 8008836:	d002      	beq.n	800883e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	025b      	lsls	r3, r3, #9
 800883c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800883e:	f04f 33ff 	mov.w	r3, #4294967295
 8008842:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	025b      	lsls	r3, r3, #9
 8008848:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800884a:	2390      	movs	r3, #144	; 0x90
 800884c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800884e:	2300      	movs	r3, #0
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008852:	2300      	movs	r3, #0
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008856:	2300      	movs	r3, #0
 8008858:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f107 0218 	add.w	r2, r7, #24
 8008862:	4611      	mov	r1, r2
 8008864:	4618      	mov	r0, r3
 8008866:	f001 ff87 	bl	800a778 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008878:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d90a      	bls.n	8008896 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2220      	movs	r2, #32
 8008884:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800888c:	4618      	mov	r0, r3
 800888e:	f002 f82b 	bl	800a8e8 <SDMMC_CmdWriteMultiBlock>
 8008892:	6478      	str	r0, [r7, #68]	; 0x44
 8008894:	e009      	b.n	80088aa <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2210      	movs	r2, #16
 800889a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 fffd 	bl	800a8a2 <SDMMC_CmdWriteSingleBlock>
 80088a8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80088aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d012      	beq.n	80088d6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a86      	ldr	r2, [pc, #536]	; (8008ad0 <HAL_SD_WriteBlocks+0x314>)
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088be:	431a      	orrs	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e0f7      	b.n	8008ac6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80088da:	e05c      	b.n	8008996 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d037      	beq.n	800895a <HAL_SD_WriteBlocks+0x19e>
 80088ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ec:	2b1f      	cmp	r3, #31
 80088ee:	d934      	bls.n	800895a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80088f0:	2300      	movs	r3, #0
 80088f2:	643b      	str	r3, [r7, #64]	; 0x40
 80088f4:	e02b      	b.n	800894e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80088f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	3301      	adds	r3, #1
 8008900:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	021a      	lsls	r2, r3, #8
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	4313      	orrs	r3, r2
 800890c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	3301      	adds	r3, #1
 8008912:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	041a      	lsls	r2, r3, #16
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	4313      	orrs	r3, r2
 800891e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008922:	3301      	adds	r3, #1
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	061a      	lsls	r2, r3, #24
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	4313      	orrs	r3, r2
 8008930:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	3301      	adds	r3, #1
 8008936:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f107 0214 	add.w	r2, r7, #20
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f001 fe9d 	bl	800a682 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800894a:	3301      	adds	r3, #1
 800894c:	643b      	str	r3, [r7, #64]	; 0x40
 800894e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008950:	2b07      	cmp	r3, #7
 8008952:	d9d0      	bls.n	80088f6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008956:	3b20      	subs	r3, #32
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800895a:	f7f8 fa4f 	bl	8000dfc <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008966:	429a      	cmp	r2, r3
 8008968:	d902      	bls.n	8008970 <HAL_SD_WriteBlocks+0x1b4>
 800896a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800896c:	2b00      	cmp	r3, #0
 800896e:	d112      	bne.n	8008996 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a56      	ldr	r2, [pc, #344]	; (8008ad0 <HAL_SD_WriteBlocks+0x314>)
 8008976:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800897c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800897e:	431a      	orrs	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e097      	b.n	8008ac6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d09b      	beq.n	80088dc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089b2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d022      	beq.n	8008a08 <HAL_SD_WriteBlocks+0x24c>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d91f      	bls.n	8008a08 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d01b      	beq.n	8008a08 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 ffab 	bl	800a930 <SDMMC_CmdStopTransfer>
 80089da:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80089dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d012      	beq.n	8008a08 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a3a      	ldr	r2, [pc, #232]	; (8008ad0 <HAL_SD_WriteBlocks+0x314>)
 80089e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f0:	431a      	orrs	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e05e      	b.n	8008ac6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0e:	f003 0308 	and.w	r3, r3, #8
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d012      	beq.n	8008a3c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a2d      	ldr	r2, [pc, #180]	; (8008ad0 <HAL_SD_WriteBlocks+0x314>)
 8008a1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	f043 0208 	orr.w	r2, r3, #8
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e044      	b.n	8008ac6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d012      	beq.n	8008a70 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a20      	ldr	r2, [pc, #128]	; (8008ad0 <HAL_SD_WriteBlocks+0x314>)
 8008a50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a56:	f043 0202 	orr.w	r2, r3, #2
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e02a      	b.n	8008ac6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a76:	f003 0310 	and.w	r3, r3, #16
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d012      	beq.n	8008aa4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a13      	ldr	r2, [pc, #76]	; (8008ad0 <HAL_SD_WriteBlocks+0x314>)
 8008a84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8a:	f043 0210 	orr.w	r2, r3, #16
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e010      	b.n	8008ac6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a0a      	ldr	r2, [pc, #40]	; (8008ad4 <HAL_SD_WriteBlocks+0x318>)
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e006      	b.n	8008ac6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008abc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
  }
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3748      	adds	r7, #72	; 0x48
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	1fe00fff 	.word	0x1fe00fff
 8008ad4:	18000f3a 	.word	0x18000f3a

08008ad8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ae6:	0f9b      	lsrs	r3, r3, #30
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af2:	0e9b      	lsrs	r3, r3, #26
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	f003 030f 	and.w	r3, r3, #15
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b04:	0e1b      	lsrs	r3, r3, #24
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	f003 0303 	and.w	r3, r3, #3
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b16:	0c1b      	lsrs	r3, r3, #16
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b22:	0a1b      	lsrs	r3, r3, #8
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b38:	0d1b      	lsrs	r3, r3, #20
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b44:	0c1b      	lsrs	r3, r3, #16
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b56:	0bdb      	lsrs	r3, r3, #15
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b68:	0b9b      	lsrs	r3, r3, #14
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7a:	0b5b      	lsrs	r3, r3, #13
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b8c:	0b1b      	lsrs	r3, r3, #12
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d163      	bne.n	8008c70 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bac:	009a      	lsls	r2, r3, #2
 8008bae:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008bb8:	0f92      	lsrs	r2, r2, #30
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bc4:	0edb      	lsrs	r3, r3, #27
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	f003 0307 	and.w	r3, r3, #7
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bd6:	0e1b      	lsrs	r3, r3, #24
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be8:	0d5b      	lsrs	r3, r3, #21
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bfa:	0c9b      	lsrs	r3, r3, #18
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	f003 0307 	and.w	r3, r3, #7
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c0c:	0bdb      	lsrs	r3, r3, #15
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	f003 0307 	and.w	r3, r3, #7
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	7e1b      	ldrb	r3, [r3, #24]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	3302      	adds	r3, #2
 8008c30:	2201      	movs	r2, #1
 8008c32:	fa02 f303 	lsl.w	r3, r2, r3
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008c3a:	fb03 f202 	mul.w	r2, r3, r2
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	7a1b      	ldrb	r3, [r3, #8]
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	f003 030f 	and.w	r3, r3, #15
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	409a      	lsls	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008c5c:	0a52      	lsrs	r2, r2, #9
 8008c5e:	fb03 f202 	mul.w	r2, r3, r2
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c6c:	655a      	str	r2, [r3, #84]	; 0x54
 8008c6e:	e031      	b.n	8008cd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d11d      	bne.n	8008cb4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c7c:	041b      	lsls	r3, r3, #16
 8008c7e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c86:	0c1b      	lsrs	r3, r3, #16
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	3301      	adds	r3, #1
 8008c94:	029a      	lsls	r2, r3, #10
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ca8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	655a      	str	r2, [r3, #84]	; 0x54
 8008cb2:	e00f      	b.n	8008cd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a58      	ldr	r2, [pc, #352]	; (8008e1c <HAL_SD_GetCardCSD+0x344>)
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e09d      	b.n	8008e10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cd8:	0b9b      	lsrs	r3, r3, #14
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cea:	09db      	lsrs	r3, r3, #7
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d0c:	0fdb      	lsrs	r3, r3, #31
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d18:	0f5b      	lsrs	r3, r3, #29
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d2a:	0e9b      	lsrs	r3, r3, #26
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d3c:	0d9b      	lsrs	r3, r3, #22
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	f003 030f 	and.w	r3, r3, #15
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d4e:	0d5b      	lsrs	r3, r3, #21
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d6a:	0c1b      	lsrs	r3, r3, #16
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d7e:	0bdb      	lsrs	r3, r3, #15
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d92:	0b9b      	lsrs	r3, r3, #14
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008da6:	0b5b      	lsrs	r3, r3, #13
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dba:	0b1b      	lsrs	r3, r3, #12
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dce:	0a9b      	lsrs	r3, r3, #10
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	f003 0303 	and.w	r3, r3, #3
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008de2:	0a1b      	lsrs	r3, r3, #8
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	f003 0303 	and.w	r3, r3, #3
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008df6:	085b      	lsrs	r3, r3, #1
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	1fe00fff 	.word	0x1fe00fff

08008e20 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b094      	sub	sp, #80	; 0x50
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d101      	bne.n	8008e40 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e0a7      	b.n	8008f90 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008e40:	f107 0308 	add.w	r3, r7, #8
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fb62 	bl	8009510 <SD_SendSDStatus>
 8008e4c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d011      	beq.n	8008e78 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a4f      	ldr	r2, [pc, #316]	; (8008f98 <HAL_SD_GetCardStatus+0x178>)
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008e76:	e070      	b.n	8008f5a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	099b      	lsrs	r3, r3, #6
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	095b      	lsrs	r3, r3, #5
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	0a1b      	lsrs	r3, r3, #8
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	0e1b      	lsrs	r3, r3, #24
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	061a      	lsls	r2, r3, #24
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	021b      	lsls	r3, r3, #8
 8008eba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ebe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	0a1b      	lsrs	r3, r3, #8
 8008ec4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008ec8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	0e1b      	lsrs	r3, r3, #24
 8008ece:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	0a1b      	lsrs	r3, r3, #8
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	0d1b      	lsrs	r3, r3, #20
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	f003 030f 	and.w	r3, r3, #15
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	0c1b      	lsrs	r3, r3, #16
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	0a9b      	lsrs	r3, r3, #10
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	0a1b      	lsrs	r3, r3, #8
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	f003 0303 	and.w	r3, r3, #3
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	091b      	lsrs	r3, r3, #4
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	f003 030f 	and.w	r3, r3, #15
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	f003 030f 	and.w	r3, r3, #15
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	0e1b      	lsrs	r3, r3, #24
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 fc34 	bl	800a7d0 <SDMMC_CmdBlockLength>
 8008f68:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00d      	beq.n	8008f8c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a08      	ldr	r2, [pc, #32]	; (8008f98 <HAL_SD_GetCardStatus+0x178>)
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f7c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008f8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3750      	adds	r7, #80	; 0x50
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	1fe00fff 	.word	0x1fe00fff

08008f9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008ff4:	b590      	push	{r4, r7, lr}
 8008ff6:	b08d      	sub	sp, #52	; 0x34
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2203      	movs	r2, #3
 8009008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	2b03      	cmp	r3, #3
 8009012:	d02e      	beq.n	8009072 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800901a:	d106      	bne.n	800902a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009020:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	635a      	str	r2, [r3, #52]	; 0x34
 8009028:	e029      	b.n	800907e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009030:	d10a      	bne.n	8009048 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb64 	bl	8009700 <SD_WideBus_Enable>
 8009038:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	431a      	orrs	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	635a      	str	r2, [r3, #52]	; 0x34
 8009046:	e01a      	b.n	800907e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fba1 	bl	8009796 <SD_WideBus_Disable>
 8009054:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	431a      	orrs	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	635a      	str	r2, [r3, #52]	; 0x34
 8009062:	e00c      	b.n	800907e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009068:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	635a      	str	r2, [r3, #52]	; 0x34
 8009070:	e005      	b.n	800907e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009076:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009082:	2b00      	cmp	r3, #0
 8009084:	d007      	beq.n	8009096 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a5f      	ldr	r2, [pc, #380]	; (8009208 <HAL_SD_ConfigWideBusOperation+0x214>)
 800908c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009094:	e096      	b.n	80091c4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009096:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800909a:	f04f 0100 	mov.w	r1, #0
 800909e:	f7fd fdef 	bl	8006c80 <HAL_RCCEx_GetPeriphCLKFreq>
 80090a2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 8083 	beq.w	80091b2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	695a      	ldr	r2, [r3, #20]
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	4950      	ldr	r1, [pc, #320]	; (800920c <HAL_SD_ConfigWideBusOperation+0x218>)
 80090ca:	fba1 1303 	umull	r1, r3, r1, r3
 80090ce:	0e1b      	lsrs	r3, r3, #24
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d303      	bcc.n	80090dc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	61bb      	str	r3, [r7, #24]
 80090da:	e05a      	b.n	8009192 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090e4:	d103      	bne.n	80090ee <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	61bb      	str	r3, [r7, #24]
 80090ec:	e051      	b.n	8009192 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f6:	d126      	bne.n	8009146 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10e      	bne.n	800911e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	4a43      	ldr	r2, [pc, #268]	; (8009210 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d906      	bls.n	8009116 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4a40      	ldr	r2, [pc, #256]	; (800920c <HAL_SD_ConfigWideBusOperation+0x218>)
 800910c:	fba2 2303 	umull	r2, r3, r2, r3
 8009110:	0e5b      	lsrs	r3, r3, #25
 8009112:	61bb      	str	r3, [r7, #24]
 8009114:	e03d      	b.n	8009192 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	e039      	b.n	8009192 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	69fa      	ldr	r2, [r7, #28]
 8009126:	fbb2 f3f3 	udiv	r3, r2, r3
 800912a:	4a39      	ldr	r2, [pc, #228]	; (8009210 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d906      	bls.n	800913e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	4a36      	ldr	r2, [pc, #216]	; (800920c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009134:	fba2 2303 	umull	r2, r3, r2, r3
 8009138:	0e5b      	lsrs	r3, r3, #25
 800913a:	61bb      	str	r3, [r7, #24]
 800913c:	e029      	b.n	8009192 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	61bb      	str	r3, [r7, #24]
 8009144:	e025      	b.n	8009192 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10e      	bne.n	800916c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	4a30      	ldr	r2, [pc, #192]	; (8009214 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d906      	bls.n	8009164 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4a2c      	ldr	r2, [pc, #176]	; (800920c <HAL_SD_ConfigWideBusOperation+0x218>)
 800915a:	fba2 2303 	umull	r2, r3, r2, r3
 800915e:	0e1b      	lsrs	r3, r3, #24
 8009160:	61bb      	str	r3, [r7, #24]
 8009162:	e016      	b.n	8009192 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	61bb      	str	r3, [r7, #24]
 800916a:	e012      	b.n	8009192 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	fbb2 f3f3 	udiv	r3, r2, r3
 8009178:	4a26      	ldr	r2, [pc, #152]	; (8009214 <HAL_SD_ConfigWideBusOperation+0x220>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d906      	bls.n	800918c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	4a22      	ldr	r2, [pc, #136]	; (800920c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009182:	fba2 2303 	umull	r2, r3, r2, r3
 8009186:	0e1b      	lsrs	r3, r3, #24
 8009188:	61bb      	str	r3, [r7, #24]
 800918a:	e002      	b.n	8009192 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681c      	ldr	r4, [r3, #0]
 8009196:	466a      	mov	r2, sp
 8009198:	f107 0314 	add.w	r3, r7, #20
 800919c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80091a0:	e882 0003 	stmia.w	r2, {r0, r1}
 80091a4:	f107 0308 	add.w	r3, r7, #8
 80091a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091aa:	4620      	mov	r0, r4
 80091ac:	f001 fa32 	bl	800a614 <SDMMC_Init>
 80091b0:	e008      	b.n	80091c4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80091cc:	4618      	mov	r0, r3
 80091ce:	f001 faff 	bl	800a7d0 <SDMMC_CmdBlockLength>
 80091d2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00c      	beq.n	80091f4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a0a      	ldr	r2, [pc, #40]	; (8009208 <HAL_SD_ConfigWideBusOperation+0x214>)
 80091e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80091fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009200:	4618      	mov	r0, r3
 8009202:	372c      	adds	r7, #44	; 0x2c
 8009204:	46bd      	mov	sp, r7
 8009206:	bd90      	pop	{r4, r7, pc}
 8009208:	1fe00fff 	.word	0x1fe00fff
 800920c:	55e63b89 	.word	0x55e63b89
 8009210:	02faf080 	.word	0x02faf080
 8009214:	017d7840 	.word	0x017d7840

08009218 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009224:	f107 030c 	add.w	r3, r7, #12
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa40 	bl	80096b0 <SD_SendStatus>
 8009230:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	0a5b      	lsrs	r3, r3, #9
 8009248:	f003 030f 	and.w	r3, r3, #15
 800924c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800924e:	693b      	ldr	r3, [r7, #16]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b090      	sub	sp, #64	; 0x40
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009264:	f7f7 fdca 	bl	8000dfc <HAL_GetTick>
 8009268:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4618      	mov	r0, r3
 8009270:	f001 fa29 	bl	800a6c6 <SDMMC_GetPowerState>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d102      	bne.n	8009280 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800927a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800927e:	e0b5      	b.n	80093ec <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009284:	2b03      	cmp	r3, #3
 8009286:	d02e      	beq.n	80092e6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4618      	mov	r0, r3
 800928e:	f001 fc74 	bl	800ab7a <SDMMC_CmdSendCID>
 8009292:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <SD_InitCard+0x46>
    {
      return errorstate;
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	e0a6      	b.n	80093ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2100      	movs	r1, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f001 fa54 	bl	800a752 <SDMMC_GetResponse>
 80092aa:	4602      	mov	r2, r0
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2104      	movs	r1, #4
 80092b6:	4618      	mov	r0, r3
 80092b8:	f001 fa4b 	bl	800a752 <SDMMC_GetResponse>
 80092bc:	4602      	mov	r2, r0
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2108      	movs	r1, #8
 80092c8:	4618      	mov	r0, r3
 80092ca:	f001 fa42 	bl	800a752 <SDMMC_GetResponse>
 80092ce:	4602      	mov	r2, r0
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	210c      	movs	r1, #12
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 fa39 	bl	800a752 <SDMMC_GetResponse>
 80092e0:	4602      	mov	r2, r0
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ea:	2b03      	cmp	r3, #3
 80092ec:	d01d      	beq.n	800932a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80092ee:	e019      	b.n	8009324 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f107 020a 	add.w	r2, r7, #10
 80092f8:	4611      	mov	r1, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f001 fc7c 	bl	800abf8 <SDMMC_CmdSetRelAdd>
 8009300:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <SD_InitCard+0xb4>
      {
        return errorstate;
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	e06f      	b.n	80093ec <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800930c:	f7f7 fd76 	bl	8000dfc <HAL_GetTick>
 8009310:	4602      	mov	r2, r0
 8009312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	f241 3287 	movw	r2, #4999	; 0x1387
 800931a:	4293      	cmp	r3, r2
 800931c:	d902      	bls.n	8009324 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800931e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009322:	e063      	b.n	80093ec <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009324:	897b      	ldrh	r3, [r7, #10]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d0e2      	beq.n	80092f0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	2b03      	cmp	r3, #3
 8009330:	d036      	beq.n	80093a0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009332:	897b      	ldrh	r3, [r7, #10]
 8009334:	461a      	mov	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009342:	041b      	lsls	r3, r3, #16
 8009344:	4619      	mov	r1, r3
 8009346:	4610      	mov	r0, r2
 8009348:	f001 fc36 	bl	800abb8 <SDMMC_CmdSendCSD>
 800934c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <SD_InitCard+0x100>
    {
      return errorstate;
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	e049      	b.n	80093ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f001 f9f7 	bl	800a752 <SDMMC_GetResponse>
 8009364:	4602      	mov	r2, r0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2104      	movs	r1, #4
 8009370:	4618      	mov	r0, r3
 8009372:	f001 f9ee 	bl	800a752 <SDMMC_GetResponse>
 8009376:	4602      	mov	r2, r0
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2108      	movs	r1, #8
 8009382:	4618      	mov	r0, r3
 8009384:	f001 f9e5 	bl	800a752 <SDMMC_GetResponse>
 8009388:	4602      	mov	r2, r0
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	210c      	movs	r1, #12
 8009394:	4618      	mov	r0, r3
 8009396:	f001 f9dc 	bl	800a752 <SDMMC_GetResponse>
 800939a:	4602      	mov	r2, r0
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2104      	movs	r1, #4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 f9d3 	bl	800a752 <SDMMC_GetResponse>
 80093ac:	4603      	mov	r3, r0
 80093ae:	0d1a      	lsrs	r2, r3, #20
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80093b4:	f107 030c 	add.w	r3, r7, #12
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff fb8c 	bl	8008ad8 <HAL_SD_GetCardCSD>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093ca:	e00f      	b.n	80093ec <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d4:	041b      	lsls	r3, r3, #16
 80093d6:	4619      	mov	r1, r3
 80093d8:	4610      	mov	r0, r2
 80093da:	f001 fae5 	bl	800a9a8 <SDMMC_CmdSelDesel>
 80093de:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80093e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <SD_InitCard+0x192>
  {
    return errorstate;
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	e000      	b.n	80093ec <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3740      	adds	r7, #64	; 0x40
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4618      	mov	r0, r3
 800940e:	f001 faee 	bl	800a9ee <SDMMC_CmdGoIdleState>
 8009412:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <SD_PowerON+0x2a>
  {
    return errorstate;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	e072      	b.n	8009504 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f001 fb01 	bl	800aa2a <SDMMC_CmdOperCond>
 8009428:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009430:	d10d      	bne.n	800944e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4618      	mov	r0, r3
 800943e:	f001 fad6 	bl	800a9ee <SDMMC_CmdGoIdleState>
 8009442:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d004      	beq.n	8009454 <SD_PowerON+0x60>
    {
      return errorstate;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	e05a      	b.n	8009504 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009458:	2b01      	cmp	r3, #1
 800945a:	d137      	bne.n	80094cc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2100      	movs	r1, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f001 fb01 	bl	800aa6a <SDMMC_CmdAppCommand>
 8009468:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d02d      	beq.n	80094cc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009470:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009474:	e046      	b.n	8009504 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2100      	movs	r1, #0
 800947c:	4618      	mov	r0, r3
 800947e:	f001 faf4 	bl	800aa6a <SDMMC_CmdAppCommand>
 8009482:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <SD_PowerON+0x9a>
    {
      return errorstate;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	e03a      	b.n	8009504 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	491e      	ldr	r1, [pc, #120]	; (800950c <SD_PowerON+0x118>)
 8009494:	4618      	mov	r0, r3
 8009496:	f001 fb0b 	bl	800aab0 <SDMMC_CmdAppOperCommand>
 800949a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094a6:	e02d      	b.n	8009504 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2100      	movs	r1, #0
 80094ae:	4618      	mov	r0, r3
 80094b0:	f001 f94f 	bl	800a752 <SDMMC_GetResponse>
 80094b4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	0fdb      	lsrs	r3, r3, #31
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d101      	bne.n	80094c2 <SD_PowerON+0xce>
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <SD_PowerON+0xd0>
 80094c2:	2300      	movs	r3, #0
 80094c4:	613b      	str	r3, [r7, #16]

    count++;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	3301      	adds	r3, #1
 80094ca:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d802      	bhi.n	80094dc <SD_PowerON+0xe8>
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d0cc      	beq.n	8009476 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d902      	bls.n	80094ec <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80094e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094ea:	e00b      	b.n	8009504 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d002      	beq.n	8009502 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	c1100000 	.word	0xc1100000

08009510 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08c      	sub	sp, #48	; 0x30
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800951a:	f7f7 fc6f 	bl	8000dfc <HAL_GetTick>
 800951e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f001 f911 	bl	800a752 <SDMMC_GetResponse>
 8009530:	4603      	mov	r3, r0
 8009532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800953a:	d102      	bne.n	8009542 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800953c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009540:	e0b0      	b.n	80096a4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2140      	movs	r1, #64	; 0x40
 8009548:	4618      	mov	r0, r3
 800954a:	f001 f941 	bl	800a7d0 <SDMMC_CmdBlockLength>
 800954e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	e0a0      	b.n	80096a4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956a:	041b      	lsls	r3, r3, #16
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f001 fa7b 	bl	800aa6a <SDMMC_CmdAppCommand>
 8009574:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d005      	beq.n	8009588 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	e08d      	b.n	80096a4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009588:	f04f 33ff 	mov.w	r3, #4294967295
 800958c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800958e:	2340      	movs	r3, #64	; 0x40
 8009590:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009592:	2360      	movs	r3, #96	; 0x60
 8009594:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009596:	2302      	movs	r3, #2
 8009598:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800959a:	2300      	movs	r3, #0
 800959c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800959e:	2301      	movs	r3, #1
 80095a0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f107 0208 	add.w	r2, r7, #8
 80095aa:	4611      	mov	r1, r2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f001 f8e3 	bl	800a778 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 fb63 	bl	800ac82 <SDMMC_CmdStatusRegister>
 80095bc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d02b      	beq.n	800961c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	e069      	b.n	80096a4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d013      	beq.n	8009606 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80095de:	2300      	movs	r3, #0
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095e2:	e00d      	b.n	8009600 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 f83d 	bl	800a668 <SDMMC_ReadFIFO>
 80095ee:	4602      	mov	r2, r0
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	601a      	str	r2, [r3, #0]
        pData++;
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	3304      	adds	r3, #4
 80095f8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	3301      	adds	r3, #1
 80095fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	2b07      	cmp	r3, #7
 8009604:	d9ee      	bls.n	80095e4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009606:	f7f7 fbf9 	bl	8000dfc <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009614:	d102      	bne.n	800961c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009616:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800961a:	e043      	b.n	80096a4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009622:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0d2      	beq.n	80095d0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009630:	f003 0308 	and.w	r3, r3, #8
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009638:	2308      	movs	r3, #8
 800963a:	e033      	b.n	80096a4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800964a:	2302      	movs	r3, #2
 800964c:	e02a      	b.n	80096a4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009654:	f003 0320 	and.w	r3, r3, #32
 8009658:	2b00      	cmp	r3, #0
 800965a:	d017      	beq.n	800968c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800965c:	2320      	movs	r3, #32
 800965e:	e021      	b.n	80096a4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 ffff 	bl	800a668 <SDMMC_ReadFIFO>
 800966a:	4602      	mov	r2, r0
 800966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966e:	601a      	str	r2, [r3, #0]
    pData++;
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	3304      	adds	r3, #4
 8009674:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009676:	f7f7 fbc1 	bl	8000dfc <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009684:	d102      	bne.n	800968c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800968a:	e00b      	b.n	80096a4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e2      	bne.n	8009660 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a03      	ldr	r2, [pc, #12]	; (80096ac <SD_SendSDStatus+0x19c>)
 80096a0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3730      	adds	r7, #48	; 0x30
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	18000f3a 	.word	0x18000f3a

080096b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d102      	bne.n	80096c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80096c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096c4:	e018      	b.n	80096f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ce:	041b      	lsls	r3, r3, #16
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f001 fab2 	bl	800ac3c <SDMMC_CmdSendStatus>
 80096d8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	e009      	b.n	80096f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2100      	movs	r1, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 f831 	bl	800a752 <SDMMC_GetResponse>
 80096f0:	4602      	mov	r2, r0
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009708:	2300      	movs	r3, #0
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	2300      	movs	r3, #0
 800970e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2100      	movs	r1, #0
 8009716:	4618      	mov	r0, r3
 8009718:	f001 f81b 	bl	800a752 <SDMMC_GetResponse>
 800971c:	4603      	mov	r3, r0
 800971e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009726:	d102      	bne.n	800972e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800972c:	e02f      	b.n	800978e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800972e:	f107 030c 	add.w	r3, r7, #12
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f879 	bl	800982c <SD_FindSCR>
 800973a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	e023      	b.n	800978e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01c      	beq.n	800978a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009758:	041b      	lsls	r3, r3, #16
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f001 f984 	bl	800aa6a <SDMMC_CmdAppCommand>
 8009762:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	e00f      	b.n	800978e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2102      	movs	r1, #2
 8009774:	4618      	mov	r0, r3
 8009776:	f001 f9bb 	bl	800aaf0 <SDMMC_CmdBusWidth>
 800977a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	e003      	b.n	800978e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009786:	2300      	movs	r3, #0
 8009788:	e001      	b.n	800978e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800978a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b086      	sub	sp, #24
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	2300      	movs	r3, #0
 80097a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2100      	movs	r1, #0
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 ffd0 	bl	800a752 <SDMMC_GetResponse>
 80097b2:	4603      	mov	r3, r0
 80097b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097bc:	d102      	bne.n	80097c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80097be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097c2:	e02f      	b.n	8009824 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80097c4:	f107 030c 	add.w	r3, r7, #12
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f82e 	bl	800982c <SD_FindSCR>
 80097d0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	e023      	b.n	8009824 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01c      	beq.n	8009820 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ee:	041b      	lsls	r3, r3, #16
 80097f0:	4619      	mov	r1, r3
 80097f2:	4610      	mov	r0, r2
 80097f4:	f001 f939 	bl	800aa6a <SDMMC_CmdAppCommand>
 80097f8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	e00f      	b.n	8009824 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2100      	movs	r1, #0
 800980a:	4618      	mov	r0, r3
 800980c:	f001 f970 	bl	800aaf0 <SDMMC_CmdBusWidth>
 8009810:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	e003      	b.n	8009824 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800981c:	2300      	movs	r3, #0
 800981e:	e001      	b.n	8009824 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009820:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08e      	sub	sp, #56	; 0x38
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009836:	f7f7 fae1 	bl	8000dfc <HAL_GetTick>
 800983a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800983c:	2300      	movs	r3, #0
 800983e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009840:	2300      	movs	r3, #0
 8009842:	60bb      	str	r3, [r7, #8]
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2108      	movs	r1, #8
 8009852:	4618      	mov	r0, r3
 8009854:	f000 ffbc 	bl	800a7d0 <SDMMC_CmdBlockLength>
 8009858:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	e0ad      	b.n	80099c0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986c:	041b      	lsls	r3, r3, #16
 800986e:	4619      	mov	r1, r3
 8009870:	4610      	mov	r0, r2
 8009872:	f001 f8fa 	bl	800aa6a <SDMMC_CmdAppCommand>
 8009876:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <SD_FindSCR+0x56>
  {
    return errorstate;
 800987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009880:	e09e      	b.n	80099c0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009882:	f04f 33ff 	mov.w	r3, #4294967295
 8009886:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009888:	2308      	movs	r3, #8
 800988a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800988c:	2330      	movs	r3, #48	; 0x30
 800988e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009890:	2302      	movs	r3, #2
 8009892:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009894:	2300      	movs	r3, #0
 8009896:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009898:	2301      	movs	r3, #1
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f107 0210 	add.w	r2, r7, #16
 80098a4:	4611      	mov	r1, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 ff66 	bl	800a778 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 f940 	bl	800ab36 <SDMMC_CmdSendSCR>
 80098b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d027      	beq.n	800990e <SD_FindSCR+0xe2>
  {
    return errorstate;
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	e07e      	b.n	80099c0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d113      	bne.n	80098f8 <SD_FindSCR+0xcc>
 80098d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d110      	bne.n	80098f8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 fec4 	bl	800a668 <SDMMC_ReadFIFO>
 80098e0:	4603      	mov	r3, r0
 80098e2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f000 febd 	bl	800a668 <SDMMC_ReadFIFO>
 80098ee:	4603      	mov	r3, r0
 80098f0:	60fb      	str	r3, [r7, #12]
      index++;
 80098f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f4:	3301      	adds	r3, #1
 80098f6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80098f8:	f7f7 fa80 	bl	8000dfc <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009906:	d102      	bne.n	800990e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009908:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800990c:	e058      	b.n	80099c0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009914:	f240 532a 	movw	r3, #1322	; 0x52a
 8009918:	4013      	ands	r3, r2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0d1      	beq.n	80098c2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009924:	f003 0308 	and.w	r3, r3, #8
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2208      	movs	r2, #8
 8009932:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009934:	2308      	movs	r3, #8
 8009936:	e043      	b.n	80099c0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993e:	f003 0302 	and.w	r3, r3, #2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d005      	beq.n	8009952 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2202      	movs	r2, #2
 800994c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800994e:	2302      	movs	r3, #2
 8009950:	e036      	b.n	80099c0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009958:	f003 0320 	and.w	r3, r3, #32
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2220      	movs	r2, #32
 8009966:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009968:	2320      	movs	r3, #32
 800996a:	e029      	b.n	80099c0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <SD_FindSCR+0x19c>)
 8009972:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	061a      	lsls	r2, r3, #24
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	021b      	lsls	r3, r3, #8
 800997c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009980:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	0a1b      	lsrs	r3, r3, #8
 8009986:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800998a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	0e1b      	lsrs	r3, r3, #24
 8009990:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	601a      	str	r2, [r3, #0]
    scr++;
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	3304      	adds	r3, #4
 800999a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	061a      	lsls	r2, r3, #24
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	021b      	lsls	r3, r3, #8
 80099a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	0a1b      	lsrs	r3, r3, #8
 80099ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80099b2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	0e1b      	lsrs	r3, r3, #24
 80099b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3738      	adds	r7, #56	; 0x38
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	18000f3a 	.word	0x18000f3a

080099cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e10f      	b.n	8009bfe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a87      	ldr	r2, [pc, #540]	; (8009c08 <HAL_SPI_Init+0x23c>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d00f      	beq.n	8009a0e <HAL_SPI_Init+0x42>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a86      	ldr	r2, [pc, #536]	; (8009c0c <HAL_SPI_Init+0x240>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00a      	beq.n	8009a0e <HAL_SPI_Init+0x42>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a84      	ldr	r2, [pc, #528]	; (8009c10 <HAL_SPI_Init+0x244>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d005      	beq.n	8009a0e <HAL_SPI_Init+0x42>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	2b0f      	cmp	r3, #15
 8009a08:	d901      	bls.n	8009a0e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e0f7      	b.n	8009bfe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fde4 	bl	800a5dc <SPI_GetPacketSize>
 8009a14:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a7b      	ldr	r2, [pc, #492]	; (8009c08 <HAL_SPI_Init+0x23c>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d00c      	beq.n	8009a3a <HAL_SPI_Init+0x6e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a79      	ldr	r2, [pc, #484]	; (8009c0c <HAL_SPI_Init+0x240>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d007      	beq.n	8009a3a <HAL_SPI_Init+0x6e>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a78      	ldr	r2, [pc, #480]	; (8009c10 <HAL_SPI_Init+0x244>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d002      	beq.n	8009a3a <HAL_SPI_Init+0x6e>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	d811      	bhi.n	8009a5e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a3e:	4a72      	ldr	r2, [pc, #456]	; (8009c08 <HAL_SPI_Init+0x23c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d009      	beq.n	8009a58 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a70      	ldr	r2, [pc, #448]	; (8009c0c <HAL_SPI_Init+0x240>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d004      	beq.n	8009a58 <HAL_SPI_Init+0x8c>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a6f      	ldr	r2, [pc, #444]	; (8009c10 <HAL_SPI_Init+0x244>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d104      	bne.n	8009a62 <HAL_SPI_Init+0x96>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2b10      	cmp	r3, #16
 8009a5c:	d901      	bls.n	8009a62 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e0cd      	b.n	8009bfe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d106      	bne.n	8009a7c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7f6 ff4e 	bl	8000918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0201 	bic.w	r2, r2, #1
 8009a92:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009a9e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009aa8:	d119      	bne.n	8009ade <HAL_SPI_Init+0x112>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ab2:	d103      	bne.n	8009abc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d008      	beq.n	8009ace <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10c      	bne.n	8009ade <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009acc:	d107      	bne.n	8009ade <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009adc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00f      	beq.n	8009b0a <HAL_SPI_Init+0x13e>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	2b06      	cmp	r3, #6
 8009af0:	d90b      	bls.n	8009b0a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	e007      	b.n	8009b1a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	69da      	ldr	r2, [r3, #28]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b22:	431a      	orrs	r2, r3
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	431a      	orrs	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b2c:	ea42 0103 	orr.w	r1, r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	431a      	orrs	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	431a      	orrs	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	431a      	orrs	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	431a      	orrs	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	431a      	orrs	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	431a      	orrs	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b7a:	ea42 0103 	orr.w	r1, r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d113      	bne.n	8009bba <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ba4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bb8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f022 0201 	bic.w	r2, r2, #1
 8009bc8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00a      	beq.n	8009bec <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	40013000 	.word	0x40013000
 8009c0c:	40003800 	.word	0x40003800
 8009c10:	40003c00 	.word	0x40003c00

08009c14 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08a      	sub	sp, #40	; 0x28
 8009c18:	af02      	add	r7, sp, #8
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	603b      	str	r3, [r7, #0]
 8009c20:	4613      	mov	r3, r2
 8009c22:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3320      	adds	r3, #32
 8009c2a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <HAL_SPI_Transmit+0x2a>
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e1e1      	b.n	800a002 <HAL_SPI_Transmit+0x3ee>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c46:	f7f7 f8d9 	bl	8000dfc <HAL_GetTick>
 8009c4a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d007      	beq.n	8009c68 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009c64:	7efb      	ldrb	r3, [r7, #27]
 8009c66:	e1cc      	b.n	800a002 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <HAL_SPI_Transmit+0x60>
 8009c6e:	88fb      	ldrh	r3, [r7, #6]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d107      	bne.n	8009c84 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009c80:	7efb      	ldrb	r3, [r7, #27]
 8009c82:	e1be      	b.n	800a002 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2203      	movs	r2, #3
 8009c88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	88fa      	ldrh	r2, [r7, #6]
 8009c9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	88fa      	ldrh	r2, [r7, #6]
 8009ca6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009cd4:	d108      	bne.n	8009ce8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	e009      	b.n	8009cfc <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009cfa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	4b96      	ldr	r3, [pc, #600]	; (8009f5c <HAL_SPI_Transmit+0x348>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	88f9      	ldrh	r1, [r7, #6]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	6812      	ldr	r2, [r2, #0]
 8009d0c:	430b      	orrs	r3, r1
 8009d0e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0201 	orr.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d28:	d107      	bne.n	8009d3a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	2b0f      	cmp	r3, #15
 8009d40:	d947      	bls.n	8009dd2 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009d42:	e03f      	b.n	8009dc4 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d114      	bne.n	8009d7c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6812      	ldr	r2, [r2, #0]
 8009d5c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d62:	1d1a      	adds	r2, r3, #4
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009d7a:	e023      	b.n	8009dc4 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d7c:	f7f7 f83e 	bl	8000dfc <HAL_GetTick>
 8009d80:	4602      	mov	r2, r0
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d803      	bhi.n	8009d94 <HAL_SPI_Transmit+0x180>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d92:	d102      	bne.n	8009d9a <HAL_SPI_Transmit+0x186>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d114      	bne.n	8009dc4 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 fb50 	bl	800a440 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e11e      	b.n	800a002 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1b9      	bne.n	8009d44 <HAL_SPI_Transmit+0x130>
 8009dd0:	e0f1      	b.n	8009fb6 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	2b07      	cmp	r3, #7
 8009dd8:	f240 80e6 	bls.w	8009fa8 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009ddc:	e05d      	b.n	8009e9a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d132      	bne.n	8009e52 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d918      	bls.n	8009e2a <HAL_SPI_Transmit+0x216>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d014      	beq.n	8009e2a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6812      	ldr	r2, [r2, #0]
 8009e0a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e10:	1d1a      	adds	r2, r3, #4
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	3b02      	subs	r3, #2
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009e28:	e037      	b.n	8009e9a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e2e:	881a      	ldrh	r2, [r3, #0]
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e38:	1c9a      	adds	r2, r3, #2
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	3b01      	subs	r3, #1
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009e50:	e023      	b.n	8009e9a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e52:	f7f6 ffd3 	bl	8000dfc <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d803      	bhi.n	8009e6a <HAL_SPI_Transmit+0x256>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e68:	d102      	bne.n	8009e70 <HAL_SPI_Transmit+0x25c>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d114      	bne.n	8009e9a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 fae5 	bl	800a440 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e0b3      	b.n	800a002 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d19b      	bne.n	8009dde <HAL_SPI_Transmit+0x1ca>
 8009ea6:	e086      	b.n	8009fb6 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d154      	bne.n	8009f60 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d918      	bls.n	8009ef4 <HAL_SPI_Transmit+0x2e0>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec6:	2b40      	cmp	r3, #64	; 0x40
 8009ec8:	d914      	bls.n	8009ef4 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eda:	1d1a      	adds	r2, r3, #4
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	3b04      	subs	r3, #4
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009ef2:	e059      	b.n	8009fa8 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d917      	bls.n	8009f30 <HAL_SPI_Transmit+0x31c>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d013      	beq.n	8009f30 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f0c:	881a      	ldrh	r2, [r3, #0]
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f16:	1c9a      	adds	r2, r3, #2
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	3b02      	subs	r3, #2
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009f2e:	e03b      	b.n	8009fa8 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3320      	adds	r3, #32
 8009f3a:	7812      	ldrb	r2, [r2, #0]
 8009f3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	3b01      	subs	r3, #1
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009f5a:	e025      	b.n	8009fa8 <HAL_SPI_Transmit+0x394>
 8009f5c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f60:	f7f6 ff4c 	bl	8000dfc <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d803      	bhi.n	8009f78 <HAL_SPI_Transmit+0x364>
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d102      	bne.n	8009f7e <HAL_SPI_Transmit+0x36a>
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d114      	bne.n	8009fa8 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 fa5e 	bl	800a440 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e02c      	b.n	800a002 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f47f af79 	bne.w	8009ea8 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2108      	movs	r1, #8
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 fadd 	bl	800a580 <SPI_WaitOnFlagUntilTimeout>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d007      	beq.n	8009fdc <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fd2:	f043 0220 	orr.w	r2, r3, #32
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 fa2f 	bl	800a440 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e000      	b.n	800a002 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800a000:	7efb      	ldrb	r3, [r7, #27]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3720      	adds	r7, #32
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop

0800a00c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08a      	sub	sp, #40	; 0x28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a024:	6a3a      	ldr	r2, [r7, #32]
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	4013      	ands	r3, r2
 800a02a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a034:	2300      	movs	r3, #0
 800a036:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a03e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3330      	adds	r3, #48	; 0x30
 800a046:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d010      	beq.n	800a074 <HAL_SPI_IRQHandler+0x68>
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	f003 0308 	and.w	r3, r3, #8
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00b      	beq.n	800a074 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	699a      	ldr	r2, [r3, #24]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a06a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f9c3 	bl	800a3f8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a072:	e192      	b.n	800a39a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d113      	bne.n	800a0a6 <HAL_SPI_IRQHandler+0x9a>
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	f003 0320 	and.w	r3, r3, #32
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10e      	bne.n	800a0a6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d009      	beq.n	800a0a6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	4798      	blx	r3
    handled = 1UL;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10f      	bne.n	800a0d0 <HAL_SPI_IRQHandler+0xc4>
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d105      	bne.n	800a0d0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
    handled = 1UL;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10f      	bne.n	800a0fa <HAL_SPI_IRQHandler+0xee>
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00a      	beq.n	800a0fa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d105      	bne.n	800a0fa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	4798      	blx	r3
    handled = 1UL;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f040 8147 	bne.w	800a390 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	f003 0308 	and.w	r3, r3, #8
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 808b 	beq.w	800a224 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	699a      	ldr	r2, [r3, #24]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f042 0208 	orr.w	r2, r2, #8
 800a11c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0210 	orr.w	r2, r2, #16
 800a12c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	699a      	ldr	r2, [r3, #24]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a13c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	691a      	ldr	r2, [r3, #16]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f022 0208 	bic.w	r2, r2, #8
 800a14c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d13d      	bne.n	800a1d8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a15c:	e036      	b.n	800a1cc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	2b0f      	cmp	r3, #15
 800a164:	d90b      	bls.n	800a17e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a16e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a170:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a176:	1d1a      	adds	r2, r3, #4
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	665a      	str	r2, [r3, #100]	; 0x64
 800a17c:	e01d      	b.n	800a1ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	2b07      	cmp	r3, #7
 800a184:	d90b      	bls.n	800a19e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	8812      	ldrh	r2, [r2, #0]
 800a18e:	b292      	uxth	r2, r2
 800a190:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a196:	1c9a      	adds	r2, r3, #2
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	665a      	str	r2, [r3, #100]	; 0x64
 800a19c:	e00d      	b.n	800a1ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1aa:	7812      	ldrb	r2, [r2, #0]
 800a1ac:	b2d2      	uxtb	r2, r2
 800a1ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1b4:	1c5a      	adds	r2, r3, #1
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1c2      	bne.n	800a15e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f931 	bl	800a440 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f8f7 	bl	800a3e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a1f6:	e0d0      	b.n	800a39a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a1f8:	7cfb      	ldrb	r3, [r7, #19]
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	d103      	bne.n	800a206 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f8e6 	bl	800a3d0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a204:	e0c6      	b.n	800a394 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a206:	7cfb      	ldrb	r3, [r7, #19]
 800a208:	2b04      	cmp	r3, #4
 800a20a:	d103      	bne.n	800a214 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f8d5 	bl	800a3bc <HAL_SPI_RxCpltCallback>
    return;
 800a212:	e0bf      	b.n	800a394 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a214:	7cfb      	ldrb	r3, [r7, #19]
 800a216:	2b03      	cmp	r3, #3
 800a218:	f040 80bc 	bne.w	800a394 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f8c3 	bl	800a3a8 <HAL_SPI_TxCpltCallback>
    return;
 800a222:	e0b7      	b.n	800a394 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 80b5 	beq.w	800a39a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00f      	beq.n	800a25a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a240:	f043 0204 	orr.w	r2, r3, #4
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	699a      	ldr	r2, [r3, #24]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a258:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00f      	beq.n	800a284 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a26a:	f043 0201 	orr.w	r2, r3, #1
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	699a      	ldr	r2, [r3, #24]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a282:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00f      	beq.n	800a2ae <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a294:	f043 0208 	orr.w	r2, r3, #8
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	699a      	ldr	r2, [r3, #24]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	f003 0320 	and.w	r3, r3, #32
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00f      	beq.n	800a2d8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699a      	ldr	r2, [r3, #24]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f042 0220 	orr.w	r2, r2, #32
 800a2d6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d05a      	beq.n	800a398 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f022 0201 	bic.w	r2, r2, #1
 800a2f0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6919      	ldr	r1, [r3, #16]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	4b28      	ldr	r3, [pc, #160]	; (800a3a0 <HAL_SPI_IRQHandler+0x394>)
 800a2fe:	400b      	ands	r3, r1
 800a300:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a308:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a30c:	d138      	bne.n	800a380 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a31c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a322:	2b00      	cmp	r3, #0
 800a324:	d013      	beq.n	800a34e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a32a:	4a1e      	ldr	r2, [pc, #120]	; (800a3a4 <HAL_SPI_IRQHandler+0x398>)
 800a32c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a332:	4618      	mov	r0, r3
 800a334:	f7f7 fa0a 	bl	800174c <HAL_DMA_Abort_IT>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d007      	beq.n	800a34e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a352:	2b00      	cmp	r3, #0
 800a354:	d020      	beq.n	800a398 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a35a:	4a12      	ldr	r2, [pc, #72]	; (800a3a4 <HAL_SPI_IRQHandler+0x398>)
 800a35c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a362:	4618      	mov	r0, r3
 800a364:	f7f7 f9f2 	bl	800174c <HAL_DMA_Abort_IT>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d014      	beq.n	800a398 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a37e:	e00b      	b.n	800a398 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f82b 	bl	800a3e4 <HAL_SPI_ErrorCallback>
    return;
 800a38e:	e003      	b.n	800a398 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a390:	bf00      	nop
 800a392:	e002      	b.n	800a39a <HAL_SPI_IRQHandler+0x38e>
    return;
 800a394:	bf00      	nop
 800a396:	e000      	b.n	800a39a <HAL_SPI_IRQHandler+0x38e>
    return;
 800a398:	bf00      	nop
  }
}
 800a39a:	3728      	adds	r7, #40	; 0x28
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	fffffc94 	.word	0xfffffc94
 800a3a4:	0800a40d 	.word	0x0800a40d

0800a3a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a418:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f7ff ffd6 	bl	800a3e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a438:	bf00      	nop
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	699a      	ldr	r2, [r3, #24]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f042 0208 	orr.w	r2, r2, #8
 800a45e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	699a      	ldr	r2, [r3, #24]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f042 0210 	orr.w	r2, r2, #16
 800a46e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f022 0201 	bic.w	r2, r2, #1
 800a47e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6919      	ldr	r1, [r3, #16]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	4b3c      	ldr	r3, [pc, #240]	; (800a57c <SPI_CloseTransfer+0x13c>)
 800a48c:	400b      	ands	r3, r1
 800a48e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689a      	ldr	r2, [r3, #8]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a49e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d014      	beq.n	800a4d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f003 0320 	and.w	r3, r3, #32
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00f      	beq.n	800a4d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	699a      	ldr	r2, [r3, #24]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0220 	orr.w	r2, r2, #32
 800a4d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d014      	beq.n	800a50c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00f      	beq.n	800a50c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4f2:	f043 0204 	orr.w	r2, r3, #4
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	699a      	ldr	r2, [r3, #24]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a50a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00f      	beq.n	800a536 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a51c:	f043 0201 	orr.w	r2, r3, #1
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	699a      	ldr	r2, [r3, #24]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a534:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00f      	beq.n	800a560 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a546:	f043 0208 	orr.w	r2, r3, #8
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	699a      	ldr	r2, [r3, #24]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a55e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a570:	bf00      	nop
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	fffffc90 	.word	0xfffffc90

0800a580 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	603b      	str	r3, [r7, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a590:	e010      	b.n	800a5b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a592:	f7f6 fc33 	bl	8000dfc <HAL_GetTick>
 800a596:	4602      	mov	r2, r0
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d803      	bhi.n	800a5aa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a8:	d102      	bne.n	800a5b0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e00f      	b.n	800a5d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	695a      	ldr	r2, [r3, #20]
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	4013      	ands	r3, r2
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	bf0c      	ite	eq
 800a5c4:	2301      	moveq	r3, #1
 800a5c6:	2300      	movne	r3, #0
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	79fb      	ldrb	r3, [r7, #7]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d0df      	beq.n	800a592 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e8:	095b      	lsrs	r3, r3, #5
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	3307      	adds	r3, #7
 800a5fa:	08db      	lsrs	r3, r3, #3
 800a5fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	fb02 f303 	mul.w	r3, r2, r3
}
 800a606:	4618      	mov	r0, r3
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
	...

0800a614 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a614:	b084      	sub	sp, #16
 800a616:	b480      	push	{r7}
 800a618:	b085      	sub	sp, #20
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	f107 001c 	add.w	r0, r7, #28
 800a622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a62a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a62c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a62e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800a632:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800a636:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800a63a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	4313      	orrs	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	4b07      	ldr	r3, [pc, #28]	; (800a664 <SDMMC_Init+0x50>)
 800a648:	4013      	ands	r3, r2
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	431a      	orrs	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	b004      	add	sp, #16
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	ffc02c00 	.word	0xffc02c00

0800a668 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a676:	4618      	mov	r0, r3
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f043 0203 	orr.w	r2, r3, #3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0303 	and.w	r3, r3, #3
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
	...

0800a6e4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a702:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a708:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a70e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	4313      	orrs	r3, r2
 800a714:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	4b06      	ldr	r3, [pc, #24]	; (800a734 <SDMMC_SendCommand+0x50>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	431a      	orrs	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	fffee0c0 	.word	0xfffee0c0

0800a738 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	b2db      	uxtb	r3, r3
}
 800a746:	4618      	mov	r0, r3
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a752:	b480      	push	{r7}
 800a754:	b085      	sub	sp, #20
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3314      	adds	r3, #20
 800a760:	461a      	mov	r2, r3
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	4413      	add	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a79e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a7a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a7aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0

}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b088      	sub	sp, #32
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a7de:	2310      	movs	r3, #16
 800a7e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7f2:	f107 0308 	add.w	r3, r7, #8
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7ff ff73 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a7fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a802:	2110      	movs	r1, #16
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fa5f 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a80a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a80c:	69fb      	ldr	r3, [r7, #28]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3720      	adds	r7, #32
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b088      	sub	sp, #32
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a824:	2311      	movs	r3, #17
 800a826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a82c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a82e:	2300      	movs	r3, #0
 800a830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a838:	f107 0308 	add.w	r3, r7, #8
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff ff50 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a844:	f241 3288 	movw	r2, #5000	; 0x1388
 800a848:	2111      	movs	r1, #17
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fa3c 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a852:	69fb      	ldr	r3, [r7, #28]
}
 800a854:	4618      	mov	r0, r3
 800a856:	3720      	adds	r7, #32
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b088      	sub	sp, #32
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a86a:	2312      	movs	r3, #18
 800a86c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a86e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a874:	2300      	movs	r3, #0
 800a876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a87c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a87e:	f107 0308 	add.w	r3, r7, #8
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ff2d 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a88a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a88e:	2112      	movs	r1, #18
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fa19 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a898:	69fb      	ldr	r3, [r7, #28]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b088      	sub	sp, #32
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a8b0:	2318      	movs	r3, #24
 800a8b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff ff0a 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a8d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d4:	2118      	movs	r1, #24
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f9f6 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a8dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8de:	69fb      	ldr	r3, [r7, #28]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3720      	adds	r7, #32
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a8f6:	2319      	movs	r3, #25
 800a8f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a908:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff fee7 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a916:	f241 3288 	movw	r2, #5000	; 0x1388
 800a91a:	2119      	movs	r1, #25
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f9d3 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a924:	69fb      	ldr	r3, [r7, #28]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
	...

0800a930 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a93c:	230c      	movs	r3, #12
 800a93e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a940:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a946:	2300      	movs	r3, #0
 800a948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a94a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a94e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a968:	f107 0308 	add.w	r3, r7, #8
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff feb8 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a974:	4a0b      	ldr	r2, [pc, #44]	; (800a9a4 <SDMMC_CmdStopTransfer+0x74>)
 800a976:	210c      	movs	r1, #12
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f9a5 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a97e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a992:	d101      	bne.n	800a998 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a994:	2300      	movs	r3, #0
 800a996:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a998:	69fb      	ldr	r3, [r7, #28]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3720      	adds	r7, #32
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	05f5e100 	.word	0x05f5e100

0800a9a8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a9b6:	2307      	movs	r3, #7
 800a9b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9ca:	f107 0308 	add.w	r3, r7, #8
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff fe87 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a9d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9da:	2107      	movs	r1, #7
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f973 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a9e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9e4:	69fb      	ldr	r3, [r7, #28]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3720      	adds	r7, #32
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b088      	sub	sp, #32
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa02:	2300      	movs	r3, #0
 800aa04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa0c:	f107 0308 	add.w	r3, r7, #8
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff fe66 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fb97 	bl	800b14c <SDMMC_GetCmdError>
 800aa1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa20:	69fb      	ldr	r3, [r7, #28]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3720      	adds	r7, #32
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b088      	sub	sp, #32
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aa32:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aa36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aa38:	2308      	movs	r3, #8
 800aa3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa42:	2300      	movs	r3, #0
 800aa44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa4c:	f107 0308 	add.w	r3, r7, #8
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7ff fe46 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fb29 	bl	800b0b0 <SDMMC_GetCmdResp7>
 800aa5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa60:	69fb      	ldr	r3, [r7, #28]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3720      	adds	r7, #32
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b088      	sub	sp, #32
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aa78:	2337      	movs	r3, #55	; 0x37
 800aa7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa82:	2300      	movs	r3, #0
 800aa84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa8c:	f107 0308 	add.w	r3, r7, #8
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7ff fe26 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aa98:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa9c:	2137      	movs	r1, #55	; 0x37
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f912 	bl	800acc8 <SDMMC_GetCmdResp1>
 800aaa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3720      	adds	r7, #32
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b088      	sub	sp, #32
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aabe:	2329      	movs	r3, #41	; 0x29
 800aac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aac8:	2300      	movs	r3, #0
 800aaca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aacc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aad2:	f107 0308 	add.w	r3, r7, #8
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff fe03 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fa2e 	bl	800af40 <SDMMC_GetCmdResp3>
 800aae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aae6:	69fb      	ldr	r3, [r7, #28]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3720      	adds	r7, #32
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aafe:	2306      	movs	r3, #6
 800ab00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab12:	f107 0308 	add.w	r3, r7, #8
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7ff fde3 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ab1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab22:	2106      	movs	r1, #6
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f8cf 	bl	800acc8 <SDMMC_GetCmdResp1>
 800ab2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab2c:	69fb      	ldr	r3, [r7, #28]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3720      	adds	r7, #32
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b088      	sub	sp, #32
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ab42:	2333      	movs	r3, #51	; 0x33
 800ab44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab56:	f107 0308 	add.w	r3, r7, #8
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7ff fdc1 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ab62:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab66:	2133      	movs	r1, #51	; 0x33
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f8ad 	bl	800acc8 <SDMMC_GetCmdResp1>
 800ab6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab70:	69fb      	ldr	r3, [r7, #28]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3720      	adds	r7, #32
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b088      	sub	sp, #32
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ab82:	2300      	movs	r3, #0
 800ab84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ab86:	2302      	movs	r3, #2
 800ab88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ab8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab90:	2300      	movs	r3, #0
 800ab92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab9a:	f107 0308 	add.w	r3, r7, #8
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff fd9f 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f980 	bl	800aeac <SDMMC_GetCmdResp2>
 800abac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abae:	69fb      	ldr	r3, [r7, #28]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3720      	adds	r7, #32
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b088      	sub	sp, #32
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800abc6:	2309      	movs	r3, #9
 800abc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800abca:	f44f 7340 	mov.w	r3, #768	; 0x300
 800abce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abd0:	2300      	movs	r3, #0
 800abd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abda:	f107 0308 	add.w	r3, r7, #8
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7ff fd7f 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f960 	bl	800aeac <SDMMC_GetCmdResp2>
 800abec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abee:	69fb      	ldr	r3, [r7, #28]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3720      	adds	r7, #32
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b088      	sub	sp, #32
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ac02:	2300      	movs	r3, #0
 800ac04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ac06:	2303      	movs	r3, #3
 800ac08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac10:	2300      	movs	r3, #0
 800ac12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac1a:	f107 0308 	add.w	r3, r7, #8
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7ff fd5f 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	2103      	movs	r1, #3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f9c8 	bl	800afc0 <SDMMC_GetCmdResp6>
 800ac30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac32:	69fb      	ldr	r3, [r7, #28]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3720      	adds	r7, #32
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ac4a:	230d      	movs	r3, #13
 800ac4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac54:	2300      	movs	r3, #0
 800ac56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac5e:	f107 0308 	add.w	r3, r7, #8
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff fd3d 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ac6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac6e:	210d      	movs	r1, #13
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f829 	bl	800acc8 <SDMMC_GetCmdResp1>
 800ac76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac78:	69fb      	ldr	r3, [r7, #28]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3720      	adds	r7, #32
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b088      	sub	sp, #32
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ac8e:	230d      	movs	r3, #13
 800ac90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aca0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aca2:	f107 0308 	add.w	r3, r7, #8
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff fd1b 	bl	800a6e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800acae:	f241 3288 	movw	r2, #5000	; 0x1388
 800acb2:	210d      	movs	r1, #13
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f807 	bl	800acc8 <SDMMC_GetCmdResp1>
 800acba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acbc:	69fb      	ldr	r3, [r7, #28]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3720      	adds	r7, #32
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
	...

0800acc8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b088      	sub	sp, #32
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	460b      	mov	r3, r1
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800acd6:	4b70      	ldr	r3, [pc, #448]	; (800ae98 <SDMMC_GetCmdResp1+0x1d0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a70      	ldr	r2, [pc, #448]	; (800ae9c <SDMMC_GetCmdResp1+0x1d4>)
 800acdc:	fba2 2303 	umull	r2, r3, r2, r3
 800ace0:	0a5a      	lsrs	r2, r3, #9
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	fb02 f303 	mul.w	r3, r2, r3
 800ace8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	1e5a      	subs	r2, r3, #1
 800acee:	61fa      	str	r2, [r7, #28]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d102      	bne.n	800acfa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acf8:	e0c9      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfe:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	4b67      	ldr	r3, [pc, #412]	; (800aea0 <SDMMC_GetCmdResp1+0x1d8>)
 800ad04:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0ef      	beq.n	800acea <SDMMC_GetCmdResp1+0x22>
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1ea      	bne.n	800acea <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad18:	f003 0304 	and.w	r3, r3, #4
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d004      	beq.n	800ad2a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2204      	movs	r2, #4
 800ad24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad26:	2304      	movs	r3, #4
 800ad28:	e0b1      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2e:	f003 0301 	and.w	r3, r3, #1
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d004      	beq.n	800ad40 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e0a6      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4a58      	ldr	r2, [pc, #352]	; (800aea4 <SDMMC_GetCmdResp1+0x1dc>)
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff fcf6 	bl	800a738 <SDMMC_GetCommandResponse>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	461a      	mov	r2, r3
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d001      	beq.n	800ad5a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e099      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f7ff fcf8 	bl	800a752 <SDMMC_GetResponse>
 800ad62:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	4b50      	ldr	r3, [pc, #320]	; (800aea8 <SDMMC_GetCmdResp1+0x1e0>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	e08d      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	da02      	bge.n	800ad7e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ad78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad7c:	e087      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ad88:	2340      	movs	r3, #64	; 0x40
 800ad8a:	e080      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ad96:	2380      	movs	r3, #128	; 0x80
 800ad98:	e079      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ada4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ada8:	e071      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800adb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adb8:	e069      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800adc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adc8:	e061      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800add4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800add8:	e059      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ade4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ade8:	e051      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800adf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adf8:	e049      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ae04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae08:	e041      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ae14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae18:	e039      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ae24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ae28:	e031      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ae34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ae38:	e029      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ae44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae48:	e021      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ae54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ae58:	e019      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ae64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ae68:	e011      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ae74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ae78:	e009      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f003 0308 	and.w	r3, r3, #8
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ae84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ae88:	e001      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3720      	adds	r7, #32
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	24000000 	.word	0x24000000
 800ae9c:	10624dd3 	.word	0x10624dd3
 800aea0:	00200045 	.word	0x00200045
 800aea4:	002000c5 	.word	0x002000c5
 800aea8:	fdffe008 	.word	0xfdffe008

0800aeac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800aeb4:	4b1f      	ldr	r3, [pc, #124]	; (800af34 <SDMMC_GetCmdResp2+0x88>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a1f      	ldr	r2, [pc, #124]	; (800af38 <SDMMC_GetCmdResp2+0x8c>)
 800aeba:	fba2 2303 	umull	r2, r3, r2, r3
 800aebe:	0a5b      	lsrs	r3, r3, #9
 800aec0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aec4:	fb02 f303 	mul.w	r3, r2, r3
 800aec8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	1e5a      	subs	r2, r3, #1
 800aece:	60fa      	str	r2, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d102      	bne.n	800aeda <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aed4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aed8:	e026      	b.n	800af28 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aede:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0ef      	beq.n	800aeca <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1ea      	bne.n	800aeca <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef8:	f003 0304 	and.w	r3, r3, #4
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d004      	beq.n	800af0a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2204      	movs	r2, #4
 800af04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af06:	2304      	movs	r3, #4
 800af08:	e00e      	b.n	800af28 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d004      	beq.n	800af20 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af1c:	2301      	movs	r3, #1
 800af1e:	e003      	b.n	800af28 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a06      	ldr	r2, [pc, #24]	; (800af3c <SDMMC_GetCmdResp2+0x90>)
 800af24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	24000000 	.word	0x24000000
 800af38:	10624dd3 	.word	0x10624dd3
 800af3c:	002000c5 	.word	0x002000c5

0800af40 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800af48:	4b1a      	ldr	r3, [pc, #104]	; (800afb4 <SDMMC_GetCmdResp3+0x74>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a1a      	ldr	r2, [pc, #104]	; (800afb8 <SDMMC_GetCmdResp3+0x78>)
 800af4e:	fba2 2303 	umull	r2, r3, r2, r3
 800af52:	0a5b      	lsrs	r3, r3, #9
 800af54:	f241 3288 	movw	r2, #5000	; 0x1388
 800af58:	fb02 f303 	mul.w	r3, r2, r3
 800af5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	1e5a      	subs	r2, r3, #1
 800af62:	60fa      	str	r2, [r7, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d102      	bne.n	800af6e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af6c:	e01b      	b.n	800afa6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af72:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d0ef      	beq.n	800af5e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1ea      	bne.n	800af5e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8c:	f003 0304 	and.w	r3, r3, #4
 800af90:	2b00      	cmp	r3, #0
 800af92:	d004      	beq.n	800af9e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2204      	movs	r2, #4
 800af98:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af9a:	2304      	movs	r3, #4
 800af9c:	e003      	b.n	800afa6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a06      	ldr	r2, [pc, #24]	; (800afbc <SDMMC_GetCmdResp3+0x7c>)
 800afa2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	24000000 	.word	0x24000000
 800afb8:	10624dd3 	.word	0x10624dd3
 800afbc:	002000c5 	.word	0x002000c5

0800afc0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b088      	sub	sp, #32
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	460b      	mov	r3, r1
 800afca:	607a      	str	r2, [r7, #4]
 800afcc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800afce:	4b35      	ldr	r3, [pc, #212]	; (800b0a4 <SDMMC_GetCmdResp6+0xe4>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a35      	ldr	r2, [pc, #212]	; (800b0a8 <SDMMC_GetCmdResp6+0xe8>)
 800afd4:	fba2 2303 	umull	r2, r3, r2, r3
 800afd8:	0a5b      	lsrs	r3, r3, #9
 800afda:	f241 3288 	movw	r2, #5000	; 0x1388
 800afde:	fb02 f303 	mul.w	r3, r2, r3
 800afe2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	1e5a      	subs	r2, r3, #1
 800afe8:	61fa      	str	r2, [r7, #28]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d102      	bne.n	800aff4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aff2:	e052      	b.n	800b09a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b000:	2b00      	cmp	r3, #0
 800b002:	d0ef      	beq.n	800afe4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1ea      	bne.n	800afe4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b012:	f003 0304 	and.w	r3, r3, #4
 800b016:	2b00      	cmp	r3, #0
 800b018:	d004      	beq.n	800b024 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2204      	movs	r2, #4
 800b01e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b020:	2304      	movs	r3, #4
 800b022:	e03a      	b.n	800b09a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d004      	beq.n	800b03a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2201      	movs	r2, #1
 800b034:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b036:	2301      	movs	r3, #1
 800b038:	e02f      	b.n	800b09a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7ff fb7c 	bl	800a738 <SDMMC_GetCommandResponse>
 800b040:	4603      	mov	r3, r0
 800b042:	461a      	mov	r2, r3
 800b044:	7afb      	ldrb	r3, [r7, #11]
 800b046:	4293      	cmp	r3, r2
 800b048:	d001      	beq.n	800b04e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b04a:	2301      	movs	r3, #1
 800b04c:	e025      	b.n	800b09a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	4a16      	ldr	r2, [pc, #88]	; (800b0ac <SDMMC_GetCmdResp6+0xec>)
 800b052:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b054:	2100      	movs	r1, #0
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f7ff fb7b 	bl	800a752 <SDMMC_GetResponse>
 800b05c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d106      	bne.n	800b076 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	0c1b      	lsrs	r3, r3, #16
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b072:	2300      	movs	r3, #0
 800b074:	e011      	b.n	800b09a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b084:	e009      	b.n	800b09a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b094:	e001      	b.n	800b09a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3720      	adds	r7, #32
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	24000000 	.word	0x24000000
 800b0a8:	10624dd3 	.word	0x10624dd3
 800b0ac:	002000c5 	.word	0x002000c5

0800b0b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b0b8:	4b22      	ldr	r3, [pc, #136]	; (800b144 <SDMMC_GetCmdResp7+0x94>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a22      	ldr	r2, [pc, #136]	; (800b148 <SDMMC_GetCmdResp7+0x98>)
 800b0be:	fba2 2303 	umull	r2, r3, r2, r3
 800b0c2:	0a5b      	lsrs	r3, r3, #9
 800b0c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0c8:	fb02 f303 	mul.w	r3, r2, r3
 800b0cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	1e5a      	subs	r2, r3, #1
 800b0d2:	60fa      	str	r2, [r7, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0dc:	e02c      	b.n	800b138 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0ef      	beq.n	800b0ce <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1ea      	bne.n	800b0ce <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fc:	f003 0304 	and.w	r3, r3, #4
 800b100:	2b00      	cmp	r3, #0
 800b102:	d004      	beq.n	800b10e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2204      	movs	r2, #4
 800b108:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b10a:	2304      	movs	r3, #4
 800b10c:	e014      	b.n	800b138 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	2b00      	cmp	r3, #0
 800b118:	d004      	beq.n	800b124 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b120:	2301      	movs	r3, #1
 800b122:	e009      	b.n	800b138 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2240      	movs	r2, #64	; 0x40
 800b134:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b136:	2300      	movs	r3, #0

}
 800b138:	4618      	mov	r0, r3
 800b13a:	3714      	adds	r7, #20
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	24000000 	.word	0x24000000
 800b148:	10624dd3 	.word	0x10624dd3

0800b14c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b154:	4b11      	ldr	r3, [pc, #68]	; (800b19c <SDMMC_GetCmdError+0x50>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a11      	ldr	r2, [pc, #68]	; (800b1a0 <SDMMC_GetCmdError+0x54>)
 800b15a:	fba2 2303 	umull	r2, r3, r2, r3
 800b15e:	0a5b      	lsrs	r3, r3, #9
 800b160:	f241 3288 	movw	r2, #5000	; 0x1388
 800b164:	fb02 f303 	mul.w	r3, r2, r3
 800b168:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	1e5a      	subs	r2, r3, #1
 800b16e:	60fa      	str	r2, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b174:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b178:	e009      	b.n	800b18e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0f1      	beq.n	800b16a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a06      	ldr	r2, [pc, #24]	; (800b1a4 <SDMMC_GetCmdError+0x58>)
 800b18a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	24000000 	.word	0x24000000
 800b1a0:	10624dd3 	.word	0x10624dd3
 800b1a4:	002000c5 	.word	0x002000c5

0800b1a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	f107 001c 	add.w	r0, r7, #28
 800b1b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d120      	bne.n	800b202 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68da      	ldr	r2, [r3, #12]
 800b1d0:	4b2a      	ldr	r3, [pc, #168]	; (800b27c <USB_CoreInit+0xd4>)
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d105      	bne.n	800b1f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f001 faf8 	bl	800c7ec <USB_CoreReset>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	73fb      	strb	r3, [r7, #15]
 800b200:	e01a      	b.n	800b238 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f001 faec 	bl	800c7ec <USB_CoreReset>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d106      	bne.n	800b22c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	639a      	str	r2, [r3, #56]	; 0x38
 800b22a:	e005      	b.n	800b238 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d116      	bne.n	800b26c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b242:	b29a      	uxth	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b24c:	4b0c      	ldr	r3, [pc, #48]	; (800b280 <USB_CoreInit+0xd8>)
 800b24e:	4313      	orrs	r3, r2
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	f043 0206 	orr.w	r2, r3, #6
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	f043 0220 	orr.w	r2, r3, #32
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b278:	b004      	add	sp, #16
 800b27a:	4770      	bx	lr
 800b27c:	ffbdffbf 	.word	0xffbdffbf
 800b280:	03ee0000 	.word	0x03ee0000

0800b284 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b284:	b480      	push	{r7}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	2b02      	cmp	r3, #2
 800b296:	d165      	bne.n	800b364 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	4a41      	ldr	r2, [pc, #260]	; (800b3a0 <USB_SetTurnaroundTime+0x11c>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d906      	bls.n	800b2ae <USB_SetTurnaroundTime+0x2a>
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	4a40      	ldr	r2, [pc, #256]	; (800b3a4 <USB_SetTurnaroundTime+0x120>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d202      	bcs.n	800b2ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b2a8:	230f      	movs	r3, #15
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	e062      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	4a3c      	ldr	r2, [pc, #240]	; (800b3a4 <USB_SetTurnaroundTime+0x120>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d306      	bcc.n	800b2c4 <USB_SetTurnaroundTime+0x40>
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	4a3b      	ldr	r2, [pc, #236]	; (800b3a8 <USB_SetTurnaroundTime+0x124>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d202      	bcs.n	800b2c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b2be:	230e      	movs	r3, #14
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	e057      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	4a38      	ldr	r2, [pc, #224]	; (800b3a8 <USB_SetTurnaroundTime+0x124>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d306      	bcc.n	800b2da <USB_SetTurnaroundTime+0x56>
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	4a37      	ldr	r2, [pc, #220]	; (800b3ac <USB_SetTurnaroundTime+0x128>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d202      	bcs.n	800b2da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b2d4:	230d      	movs	r3, #13
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	e04c      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	4a33      	ldr	r2, [pc, #204]	; (800b3ac <USB_SetTurnaroundTime+0x128>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d306      	bcc.n	800b2f0 <USB_SetTurnaroundTime+0x6c>
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	4a32      	ldr	r2, [pc, #200]	; (800b3b0 <USB_SetTurnaroundTime+0x12c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d802      	bhi.n	800b2f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b2ea:	230c      	movs	r3, #12
 800b2ec:	617b      	str	r3, [r7, #20]
 800b2ee:	e041      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	4a2f      	ldr	r2, [pc, #188]	; (800b3b0 <USB_SetTurnaroundTime+0x12c>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d906      	bls.n	800b306 <USB_SetTurnaroundTime+0x82>
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	4a2e      	ldr	r2, [pc, #184]	; (800b3b4 <USB_SetTurnaroundTime+0x130>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d802      	bhi.n	800b306 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b300:	230b      	movs	r3, #11
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	e036      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	4a2a      	ldr	r2, [pc, #168]	; (800b3b4 <USB_SetTurnaroundTime+0x130>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d906      	bls.n	800b31c <USB_SetTurnaroundTime+0x98>
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	4a29      	ldr	r2, [pc, #164]	; (800b3b8 <USB_SetTurnaroundTime+0x134>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d802      	bhi.n	800b31c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b316:	230a      	movs	r3, #10
 800b318:	617b      	str	r3, [r7, #20]
 800b31a:	e02b      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	4a26      	ldr	r2, [pc, #152]	; (800b3b8 <USB_SetTurnaroundTime+0x134>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d906      	bls.n	800b332 <USB_SetTurnaroundTime+0xae>
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	4a25      	ldr	r2, [pc, #148]	; (800b3bc <USB_SetTurnaroundTime+0x138>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d202      	bcs.n	800b332 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b32c:	2309      	movs	r3, #9
 800b32e:	617b      	str	r3, [r7, #20]
 800b330:	e020      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	4a21      	ldr	r2, [pc, #132]	; (800b3bc <USB_SetTurnaroundTime+0x138>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d306      	bcc.n	800b348 <USB_SetTurnaroundTime+0xc4>
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	4a20      	ldr	r2, [pc, #128]	; (800b3c0 <USB_SetTurnaroundTime+0x13c>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d802      	bhi.n	800b348 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b342:	2308      	movs	r3, #8
 800b344:	617b      	str	r3, [r7, #20]
 800b346:	e015      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	4a1d      	ldr	r2, [pc, #116]	; (800b3c0 <USB_SetTurnaroundTime+0x13c>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d906      	bls.n	800b35e <USB_SetTurnaroundTime+0xda>
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	4a1c      	ldr	r2, [pc, #112]	; (800b3c4 <USB_SetTurnaroundTime+0x140>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d202      	bcs.n	800b35e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b358:	2307      	movs	r3, #7
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	e00a      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b35e:	2306      	movs	r3, #6
 800b360:	617b      	str	r3, [r7, #20]
 800b362:	e007      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b364:	79fb      	ldrb	r3, [r7, #7]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d102      	bne.n	800b370 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b36a:	2309      	movs	r3, #9
 800b36c:	617b      	str	r3, [r7, #20]
 800b36e:	e001      	b.n	800b374 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b370:	2309      	movs	r3, #9
 800b372:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	68da      	ldr	r2, [r3, #12]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	029b      	lsls	r3, r3, #10
 800b388:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b38c:	431a      	orrs	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	371c      	adds	r7, #28
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	00d8acbf 	.word	0x00d8acbf
 800b3a4:	00e4e1c0 	.word	0x00e4e1c0
 800b3a8:	00f42400 	.word	0x00f42400
 800b3ac:	01067380 	.word	0x01067380
 800b3b0:	011a499f 	.word	0x011a499f
 800b3b4:	01312cff 	.word	0x01312cff
 800b3b8:	014ca43f 	.word	0x014ca43f
 800b3bc:	016e3600 	.word	0x016e3600
 800b3c0:	01a6ab1f 	.word	0x01a6ab1f
 800b3c4:	01e84800 	.word	0x01e84800

0800b3c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	f043 0201 	orr.w	r2, r3, #1
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	f023 0201 	bic.w	r2, r3, #1
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b418:	2300      	movs	r3, #0
 800b41a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b428:	78fb      	ldrb	r3, [r7, #3]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d115      	bne.n	800b45a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b43a:	2001      	movs	r0, #1
 800b43c:	f7f5 fcea 	bl	8000e14 <HAL_Delay>
      ms++;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3301      	adds	r3, #1
 800b444:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f001 f93f 	bl	800c6ca <USB_GetMode>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d01e      	beq.n	800b490 <USB_SetCurrentMode+0x84>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b31      	cmp	r3, #49	; 0x31
 800b456:	d9f0      	bls.n	800b43a <USB_SetCurrentMode+0x2e>
 800b458:	e01a      	b.n	800b490 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b45a:	78fb      	ldrb	r3, [r7, #3]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d115      	bne.n	800b48c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b46c:	2001      	movs	r0, #1
 800b46e:	f7f5 fcd1 	bl	8000e14 <HAL_Delay>
      ms++;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	3301      	adds	r3, #1
 800b476:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f001 f926 	bl	800c6ca <USB_GetMode>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d005      	beq.n	800b490 <USB_SetCurrentMode+0x84>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b31      	cmp	r3, #49	; 0x31
 800b488:	d9f0      	bls.n	800b46c <USB_SetCurrentMode+0x60>
 800b48a:	e001      	b.n	800b490 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e005      	b.n	800b49c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2b32      	cmp	r3, #50	; 0x32
 800b494:	d101      	bne.n	800b49a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e000      	b.n	800b49c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b086      	sub	sp, #24
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b4b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b4be:	2300      	movs	r3, #0
 800b4c0:	613b      	str	r3, [r7, #16]
 800b4c2:	e009      	b.n	800b4d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	3340      	adds	r3, #64	; 0x40
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	613b      	str	r3, [r7, #16]
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	2b0e      	cmp	r3, #14
 800b4dc:	d9f2      	bls.n	800b4c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d11c      	bne.n	800b51e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4f2:	f043 0302 	orr.w	r3, r3, #2
 800b4f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	601a      	str	r2, [r3, #0]
 800b51c:	e005      	b.n	800b52a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b522:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b530:	461a      	mov	r2, r3
 800b532:	2300      	movs	r3, #0
 800b534:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b53c:	4619      	mov	r1, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b544:	461a      	mov	r2, r3
 800b546:	680b      	ldr	r3, [r1, #0]
 800b548:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d10c      	bne.n	800b56a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	2b00      	cmp	r3, #0
 800b554:	d104      	bne.n	800b560 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b556:	2100      	movs	r1, #0
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f965 	bl	800b828 <USB_SetDevSpeed>
 800b55e:	e008      	b.n	800b572 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b560:	2101      	movs	r1, #1
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f960 	bl	800b828 <USB_SetDevSpeed>
 800b568:	e003      	b.n	800b572 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b56a:	2103      	movs	r1, #3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f95b 	bl	800b828 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b572:	2110      	movs	r1, #16
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f8f3 	bl	800b760 <USB_FlushTxFifo>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f91f 	bl	800b7c8 <USB_FlushRxFifo>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d001      	beq.n	800b594 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59a:	461a      	mov	r2, r3
 800b59c:	2300      	movs	r3, #0
 800b59e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	613b      	str	r3, [r7, #16]
 800b5bc:	e043      	b.n	800b646 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	015a      	lsls	r2, r3, #5
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5d4:	d118      	bne.n	800b608 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	015a      	lsls	r2, r3, #5
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b5ee:	6013      	str	r3, [r2, #0]
 800b5f0:	e013      	b.n	800b61a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	015a      	lsls	r2, r3, #5
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5fe:	461a      	mov	r2, r3
 800b600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b604:	6013      	str	r3, [r2, #0]
 800b606:	e008      	b.n	800b61a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	015a      	lsls	r2, r3, #5
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b614:	461a      	mov	r2, r3
 800b616:	2300      	movs	r3, #0
 800b618:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	015a      	lsls	r2, r3, #5
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	4413      	add	r3, r2
 800b622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b626:	461a      	mov	r2, r3
 800b628:	2300      	movs	r3, #0
 800b62a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	015a      	lsls	r2, r3, #5
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4413      	add	r3, r2
 800b634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b638:	461a      	mov	r2, r3
 800b63a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b63e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	3301      	adds	r3, #1
 800b644:	613b      	str	r3, [r7, #16]
 800b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d3b7      	bcc.n	800b5be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b64e:	2300      	movs	r3, #0
 800b650:	613b      	str	r3, [r7, #16]
 800b652:	e043      	b.n	800b6dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	015a      	lsls	r2, r3, #5
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b66a:	d118      	bne.n	800b69e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10a      	bne.n	800b688 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	015a      	lsls	r2, r3, #5
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	4413      	add	r3, r2
 800b67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67e:	461a      	mov	r2, r3
 800b680:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b684:	6013      	str	r3, [r2, #0]
 800b686:	e013      	b.n	800b6b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	015a      	lsls	r2, r3, #5
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	4413      	add	r3, r2
 800b690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b694:	461a      	mov	r2, r3
 800b696:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b69a:	6013      	str	r3, [r2, #0]
 800b69c:	e008      	b.n	800b6b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6bc:	461a      	mov	r2, r3
 800b6be:	2300      	movs	r3, #0
 800b6c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	015a      	lsls	r2, r3, #5
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	613b      	str	r3, [r7, #16]
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d3b7      	bcc.n	800b654 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b704:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d105      	bne.n	800b718 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	f043 0210 	orr.w	r2, r3, #16
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	4b0e      	ldr	r3, [pc, #56]	; (800b758 <USB_DevInit+0x2b4>)
 800b71e:	4313      	orrs	r3, r2
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b726:	2b00      	cmp	r3, #0
 800b728:	d005      	beq.n	800b736 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	f043 0208 	orr.w	r2, r3, #8
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d105      	bne.n	800b748 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	699a      	ldr	r2, [r3, #24]
 800b740:	4b06      	ldr	r3, [pc, #24]	; (800b75c <USB_DevInit+0x2b8>)
 800b742:	4313      	orrs	r3, r2
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b748:	7dfb      	ldrb	r3, [r7, #23]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3718      	adds	r7, #24
 800b74e:	46bd      	mov	sp, r7
 800b750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b754:	b004      	add	sp, #16
 800b756:	4770      	bx	lr
 800b758:	803c3800 	.word	0x803c3800
 800b75c:	40000004 	.word	0x40000004

0800b760 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b76a:	2300      	movs	r3, #0
 800b76c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3301      	adds	r3, #1
 800b772:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4a13      	ldr	r2, [pc, #76]	; (800b7c4 <USB_FlushTxFifo+0x64>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d901      	bls.n	800b780 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b77c:	2303      	movs	r3, #3
 800b77e:	e01b      	b.n	800b7b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	2b00      	cmp	r3, #0
 800b786:	daf2      	bge.n	800b76e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b788:	2300      	movs	r3, #0
 800b78a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	019b      	lsls	r3, r3, #6
 800b790:	f043 0220 	orr.w	r2, r3, #32
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	3301      	adds	r3, #1
 800b79c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	4a08      	ldr	r2, [pc, #32]	; (800b7c4 <USB_FlushTxFifo+0x64>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d901      	bls.n	800b7aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e006      	b.n	800b7b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	f003 0320 	and.w	r3, r3, #32
 800b7b2:	2b20      	cmp	r3, #32
 800b7b4:	d0f0      	beq.n	800b798 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	00030d40 	.word	0x00030d40

0800b7c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	4a11      	ldr	r2, [pc, #68]	; (800b824 <USB_FlushRxFifo+0x5c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d901      	bls.n	800b7e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	e018      	b.n	800b818 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	daf2      	bge.n	800b7d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2210      	movs	r2, #16
 800b7f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	4a08      	ldr	r2, [pc, #32]	; (800b824 <USB_FlushRxFifo+0x5c>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d901      	bls.n	800b80a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b806:	2303      	movs	r3, #3
 800b808:	e006      	b.n	800b818 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	f003 0310 	and.w	r3, r3, #16
 800b812:	2b10      	cmp	r3, #16
 800b814:	d0f0      	beq.n	800b7f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	00030d40 	.word	0x00030d40

0800b828 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	78fb      	ldrb	r3, [r7, #3]
 800b842:	68f9      	ldr	r1, [r7, #12]
 800b844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b848:	4313      	orrs	r3, r2
 800b84a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3714      	adds	r7, #20
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b087      	sub	sp, #28
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f003 0306 	and.w	r3, r3, #6
 800b872:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d102      	bne.n	800b880 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b87a:	2300      	movs	r3, #0
 800b87c:	75fb      	strb	r3, [r7, #23]
 800b87e:	e00a      	b.n	800b896 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2b02      	cmp	r3, #2
 800b884:	d002      	beq.n	800b88c <USB_GetDevSpeed+0x32>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b06      	cmp	r3, #6
 800b88a:	d102      	bne.n	800b892 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b88c:	2302      	movs	r3, #2
 800b88e:	75fb      	strb	r3, [r7, #23]
 800b890:	e001      	b.n	800b896 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b892:	230f      	movs	r3, #15
 800b894:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b896:	7dfb      	ldrb	r3, [r7, #23]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	371c      	adds	r7, #28
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	785b      	ldrb	r3, [r3, #1]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d139      	bne.n	800b934 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8c6:	69da      	ldr	r2, [r3, #28]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	f003 030f 	and.w	r3, r3, #15
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	68f9      	ldr	r1, [r7, #12]
 800b8da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d153      	bne.n	800b9a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	015a      	lsls	r2, r3, #5
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	4413      	add	r3, r2
 800b900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	791b      	ldrb	r3, [r3, #4]
 800b912:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b914:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	059b      	lsls	r3, r3, #22
 800b91a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b91c:	431a      	orrs	r2, r3
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	0159      	lsls	r1, r3, #5
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	440b      	add	r3, r1
 800b926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b92a:	4619      	mov	r1, r3
 800b92c:	4b20      	ldr	r3, [pc, #128]	; (800b9b0 <USB_ActivateEndpoint+0x10c>)
 800b92e:	4313      	orrs	r3, r2
 800b930:	600b      	str	r3, [r1, #0]
 800b932:	e035      	b.n	800b9a0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b93a:	69da      	ldr	r2, [r3, #28]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	f003 030f 	and.w	r3, r3, #15
 800b944:	2101      	movs	r1, #1
 800b946:	fa01 f303 	lsl.w	r3, r1, r3
 800b94a:	041b      	lsls	r3, r3, #16
 800b94c:	68f9      	ldr	r1, [r7, #12]
 800b94e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b952:	4313      	orrs	r3, r2
 800b954:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	015a      	lsls	r2, r3, #5
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	4413      	add	r3, r2
 800b95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d119      	bne.n	800b9a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	4413      	add	r3, r2
 800b974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	791b      	ldrb	r3, [r3, #4]
 800b986:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b988:	430b      	orrs	r3, r1
 800b98a:	431a      	orrs	r2, r3
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	0159      	lsls	r1, r3, #5
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	440b      	add	r3, r1
 800b994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b998:	4619      	mov	r1, r3
 800b99a:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <USB_ActivateEndpoint+0x10c>)
 800b99c:	4313      	orrs	r3, r2
 800b99e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	10008000 	.word	0x10008000

0800b9b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	785b      	ldrb	r3, [r3, #1]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d161      	bne.n	800ba94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	015a      	lsls	r2, r3, #5
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9e6:	d11f      	bne.n	800ba28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	015a      	lsls	r2, r3, #5
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	0151      	lsls	r1, r2, #5
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	440a      	add	r2, r1
 800b9fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	015a      	lsls	r2, r3, #5
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	4413      	add	r3, r2
 800ba10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	0151      	lsls	r1, r2, #5
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	440a      	add	r2, r1
 800ba1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	f003 030f 	and.w	r3, r3, #15
 800ba38:	2101      	movs	r1, #1
 800ba3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	43db      	mvns	r3, r3
 800ba42:	68f9      	ldr	r1, [r7, #12]
 800ba44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba48:	4013      	ands	r3, r2
 800ba4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba52:	69da      	ldr	r2, [r3, #28]
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	f003 030f 	and.w	r3, r3, #15
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	43db      	mvns	r3, r3
 800ba66:	68f9      	ldr	r1, [r7, #12]
 800ba68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	0159      	lsls	r1, r3, #5
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	440b      	add	r3, r1
 800ba86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4b35      	ldr	r3, [pc, #212]	; (800bb64 <USB_DeactivateEndpoint+0x1b0>)
 800ba8e:	4013      	ands	r3, r2
 800ba90:	600b      	str	r3, [r1, #0]
 800ba92:	e060      	b.n	800bb56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	015a      	lsls	r2, r3, #5
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800baa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800baaa:	d11f      	bne.n	800baec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	0151      	lsls	r1, r2, #5
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	440a      	add	r2, r1
 800bac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800baca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	015a      	lsls	r2, r3, #5
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	4413      	add	r3, r2
 800bad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	0151      	lsls	r1, r2, #5
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	440a      	add	r2, r1
 800bae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800baea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	2101      	movs	r1, #1
 800bafe:	fa01 f303 	lsl.w	r3, r1, r3
 800bb02:	041b      	lsls	r3, r3, #16
 800bb04:	43db      	mvns	r3, r3
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb16:	69da      	ldr	r2, [r3, #28]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	f003 030f 	and.w	r3, r3, #15
 800bb20:	2101      	movs	r1, #1
 800bb22:	fa01 f303 	lsl.w	r3, r1, r3
 800bb26:	041b      	lsls	r3, r3, #16
 800bb28:	43db      	mvns	r3, r3
 800bb2a:	68f9      	ldr	r1, [r7, #12]
 800bb2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb30:	4013      	ands	r3, r2
 800bb32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	0159      	lsls	r1, r3, #5
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	440b      	add	r3, r1
 800bb4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb4e:	4619      	mov	r1, r3
 800bb50:	4b05      	ldr	r3, [pc, #20]	; (800bb68 <USB_DeactivateEndpoint+0x1b4>)
 800bb52:	4013      	ands	r3, r2
 800bb54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	ec337800 	.word	0xec337800
 800bb68:	eff37800 	.word	0xeff37800

0800bb6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b08a      	sub	sp, #40	; 0x28
 800bb70:	af02      	add	r7, sp, #8
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	4613      	mov	r3, r2
 800bb78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	785b      	ldrb	r3, [r3, #1]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	f040 8181 	bne.w	800be90 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d132      	bne.n	800bbfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	015a      	lsls	r2, r3, #5
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba2:	691a      	ldr	r2, [r3, #16]
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	0159      	lsls	r1, r3, #5
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	440b      	add	r3, r1
 800bbac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	4ba5      	ldr	r3, [pc, #660]	; (800be48 <USB_EPStartXfer+0x2dc>)
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	015a      	lsls	r2, r3, #5
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	69ba      	ldr	r2, [r7, #24]
 800bbc8:	0151      	lsls	r1, r2, #5
 800bbca:	69fa      	ldr	r2, [r7, #28]
 800bbcc:	440a      	add	r2, r1
 800bbce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	015a      	lsls	r2, r3, #5
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	4413      	add	r3, r2
 800bbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe4:	691a      	ldr	r2, [r3, #16]
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	0159      	lsls	r1, r3, #5
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	440b      	add	r3, r1
 800bbee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	4b95      	ldr	r3, [pc, #596]	; (800be4c <USB_EPStartXfer+0x2e0>)
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	610b      	str	r3, [r1, #16]
 800bbfa:	e092      	b.n	800bd22 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	015a      	lsls	r2, r3, #5
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	4413      	add	r3, r2
 800bc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc08:	691a      	ldr	r2, [r3, #16]
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	0159      	lsls	r1, r3, #5
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	440b      	add	r3, r1
 800bc12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc16:	4619      	mov	r1, r3
 800bc18:	4b8c      	ldr	r3, [pc, #560]	; (800be4c <USB_EPStartXfer+0x2e0>)
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	015a      	lsls	r2, r3, #5
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	4413      	add	r3, r2
 800bc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc2a:	691a      	ldr	r2, [r3, #16]
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	0159      	lsls	r1, r3, #5
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	440b      	add	r3, r1
 800bc34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4b83      	ldr	r3, [pc, #524]	; (800be48 <USB_EPStartXfer+0x2dc>)
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d11a      	bne.n	800bc7c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	691a      	ldr	r2, [r3, #16]
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d903      	bls.n	800bc5a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	689a      	ldr	r2, [r3, #8]
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	015a      	lsls	r2, r3, #5
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	4413      	add	r3, r2
 800bc62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	69ba      	ldr	r2, [r7, #24]
 800bc6a:	0151      	lsls	r1, r2, #5
 800bc6c:	69fa      	ldr	r2, [r7, #28]
 800bc6e:	440a      	add	r2, r1
 800bc70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc78:	6113      	str	r3, [r2, #16]
 800bc7a:	e01b      	b.n	800bcb4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	015a      	lsls	r2, r3, #5
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	4413      	add	r3, r2
 800bc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc88:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	6919      	ldr	r1, [r3, #16]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	440b      	add	r3, r1
 800bc94:	1e59      	subs	r1, r3, #1
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc9e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bca0:	4b6b      	ldr	r3, [pc, #428]	; (800be50 <USB_EPStartXfer+0x2e4>)
 800bca2:	400b      	ands	r3, r1
 800bca4:	69b9      	ldr	r1, [r7, #24]
 800bca6:	0148      	lsls	r0, r1, #5
 800bca8:	69f9      	ldr	r1, [r7, #28]
 800bcaa:	4401      	add	r1, r0
 800bcac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	015a      	lsls	r2, r3, #5
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc0:	691a      	ldr	r2, [r3, #16]
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcca:	69b9      	ldr	r1, [r7, #24]
 800bccc:	0148      	lsls	r0, r1, #5
 800bcce:	69f9      	ldr	r1, [r7, #28]
 800bcd0:	4401      	add	r1, r0
 800bcd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	791b      	ldrb	r3, [r3, #4]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d11f      	bne.n	800bd22 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	69ba      	ldr	r2, [r7, #24]
 800bcf2:	0151      	lsls	r1, r2, #5
 800bcf4:	69fa      	ldr	r2, [r7, #28]
 800bcf6:	440a      	add	r2, r1
 800bcf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bd00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	015a      	lsls	r2, r3, #5
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	4413      	add	r3, r2
 800bd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	69ba      	ldr	r2, [r7, #24]
 800bd12:	0151      	lsls	r1, r2, #5
 800bd14:	69fa      	ldr	r2, [r7, #28]
 800bd16:	440a      	add	r2, r1
 800bd18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d14b      	bne.n	800bdc0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d009      	beq.n	800bd44 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	015a      	lsls	r2, r3, #5
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	4413      	add	r3, r2
 800bd38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	69db      	ldr	r3, [r3, #28]
 800bd42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	791b      	ldrb	r3, [r3, #4]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d128      	bne.n	800bd9e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d110      	bne.n	800bd7e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	015a      	lsls	r2, r3, #5
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	4413      	add	r3, r2
 800bd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	69ba      	ldr	r2, [r7, #24]
 800bd6c:	0151      	lsls	r1, r2, #5
 800bd6e:	69fa      	ldr	r2, [r7, #28]
 800bd70:	440a      	add	r2, r1
 800bd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd7a:	6013      	str	r3, [r2, #0]
 800bd7c:	e00f      	b.n	800bd9e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	015a      	lsls	r2, r3, #5
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	4413      	add	r3, r2
 800bd86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	69ba      	ldr	r2, [r7, #24]
 800bd8e:	0151      	lsls	r1, r2, #5
 800bd90:	69fa      	ldr	r2, [r7, #28]
 800bd92:	440a      	add	r2, r1
 800bd94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	015a      	lsls	r2, r3, #5
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	4413      	add	r3, r2
 800bda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	0151      	lsls	r1, r2, #5
 800bdb0:	69fa      	ldr	r2, [r7, #28]
 800bdb2:	440a      	add	r2, r1
 800bdb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bdbc:	6013      	str	r3, [r2, #0]
 800bdbe:	e16a      	b.n	800c096 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	0151      	lsls	r1, r2, #5
 800bdd2:	69fa      	ldr	r2, [r7, #28]
 800bdd4:	440a      	add	r2, r1
 800bdd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bdde:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	791b      	ldrb	r3, [r3, #4]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d015      	beq.n	800be14 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f000 8152 	beq.w	800c096 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	f003 030f 	and.w	r3, r3, #15
 800be02:	2101      	movs	r1, #1
 800be04:	fa01 f303 	lsl.w	r3, r1, r3
 800be08:	69f9      	ldr	r1, [r7, #28]
 800be0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be0e:	4313      	orrs	r3, r2
 800be10:	634b      	str	r3, [r1, #52]	; 0x34
 800be12:	e140      	b.n	800c096 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be20:	2b00      	cmp	r3, #0
 800be22:	d117      	bne.n	800be54 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	015a      	lsls	r2, r3, #5
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	4413      	add	r3, r2
 800be2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	69ba      	ldr	r2, [r7, #24]
 800be34:	0151      	lsls	r1, r2, #5
 800be36:	69fa      	ldr	r2, [r7, #28]
 800be38:	440a      	add	r2, r1
 800be3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	e016      	b.n	800be74 <USB_EPStartXfer+0x308>
 800be46:	bf00      	nop
 800be48:	e007ffff 	.word	0xe007ffff
 800be4c:	fff80000 	.word	0xfff80000
 800be50:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	015a      	lsls	r2, r3, #5
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	4413      	add	r3, r2
 800be5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	69ba      	ldr	r2, [r7, #24]
 800be64:	0151      	lsls	r1, r2, #5
 800be66:	69fa      	ldr	r2, [r7, #28]
 800be68:	440a      	add	r2, r1
 800be6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be72:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	68d9      	ldr	r1, [r3, #12]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	781a      	ldrb	r2, [r3, #0]
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	b298      	uxth	r0, r3
 800be82:	79fb      	ldrb	r3, [r7, #7]
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	4603      	mov	r3, r0
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f000 f9b9 	bl	800c200 <USB_WritePacket>
 800be8e:	e102      	b.n	800c096 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	015a      	lsls	r2, r3, #5
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	4413      	add	r3, r2
 800be98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be9c:	691a      	ldr	r2, [r3, #16]
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	0159      	lsls	r1, r3, #5
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	440b      	add	r3, r1
 800bea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beaa:	4619      	mov	r1, r3
 800beac:	4b7c      	ldr	r3, [pc, #496]	; (800c0a0 <USB_EPStartXfer+0x534>)
 800beae:	4013      	ands	r3, r2
 800beb0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bebe:	691a      	ldr	r2, [r3, #16]
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	0159      	lsls	r1, r3, #5
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	440b      	add	r3, r1
 800bec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800becc:	4619      	mov	r1, r3
 800bece:	4b75      	ldr	r3, [pc, #468]	; (800c0a4 <USB_EPStartXfer+0x538>)
 800bed0:	4013      	ands	r3, r2
 800bed2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d12f      	bne.n	800bf3a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d003      	beq.n	800beea <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	689a      	ldr	r2, [r3, #8]
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	015a      	lsls	r2, r3, #5
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	4413      	add	r3, r2
 800befa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800befe:	691a      	ldr	r2, [r3, #16]
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	6a1b      	ldr	r3, [r3, #32]
 800bf04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf08:	69b9      	ldr	r1, [r7, #24]
 800bf0a:	0148      	lsls	r0, r1, #5
 800bf0c:	69f9      	ldr	r1, [r7, #28]
 800bf0e:	4401      	add	r1, r0
 800bf10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf14:	4313      	orrs	r3, r2
 800bf16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	015a      	lsls	r2, r3, #5
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	4413      	add	r3, r2
 800bf20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	69ba      	ldr	r2, [r7, #24]
 800bf28:	0151      	lsls	r1, r2, #5
 800bf2a:	69fa      	ldr	r2, [r7, #28]
 800bf2c:	440a      	add	r2, r1
 800bf2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf36:	6113      	str	r3, [r2, #16]
 800bf38:	e05f      	b.n	800bffa <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d123      	bne.n	800bf8a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf4e:	691a      	ldr	r2, [r3, #16]
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf58:	69b9      	ldr	r1, [r7, #24]
 800bf5a:	0148      	lsls	r0, r1, #5
 800bf5c:	69f9      	ldr	r1, [r7, #28]
 800bf5e:	4401      	add	r1, r0
 800bf60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf64:	4313      	orrs	r3, r2
 800bf66:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	015a      	lsls	r2, r3, #5
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	4413      	add	r3, r2
 800bf70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	69ba      	ldr	r2, [r7, #24]
 800bf78:	0151      	lsls	r1, r2, #5
 800bf7a:	69fa      	ldr	r2, [r7, #28]
 800bf7c:	440a      	add	r2, r1
 800bf7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf86:	6113      	str	r3, [r2, #16]
 800bf88:	e037      	b.n	800bffa <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	691a      	ldr	r2, [r3, #16]
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	4413      	add	r3, r2
 800bf94:	1e5a      	subs	r2, r3, #1
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf9e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	8afa      	ldrh	r2, [r7, #22]
 800bfa6:	fb03 f202 	mul.w	r2, r3, r2
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	015a      	lsls	r2, r3, #5
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfba:	691a      	ldr	r2, [r3, #16]
 800bfbc:	8afb      	ldrh	r3, [r7, #22]
 800bfbe:	04d9      	lsls	r1, r3, #19
 800bfc0:	4b39      	ldr	r3, [pc, #228]	; (800c0a8 <USB_EPStartXfer+0x53c>)
 800bfc2:	400b      	ands	r3, r1
 800bfc4:	69b9      	ldr	r1, [r7, #24]
 800bfc6:	0148      	lsls	r0, r1, #5
 800bfc8:	69f9      	ldr	r1, [r7, #28]
 800bfca:	4401      	add	r1, r0
 800bfcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	015a      	lsls	r2, r3, #5
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe0:	691a      	ldr	r2, [r3, #16]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfea:	69b9      	ldr	r1, [r7, #24]
 800bfec:	0148      	lsls	r0, r1, #5
 800bfee:	69f9      	ldr	r1, [r7, #28]
 800bff0:	4401      	add	r1, r0
 800bff2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bff6:	4313      	orrs	r3, r2
 800bff8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bffa:	79fb      	ldrb	r3, [r7, #7]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d10d      	bne.n	800c01c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d009      	beq.n	800c01c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	68d9      	ldr	r1, [r3, #12]
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	015a      	lsls	r2, r3, #5
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	4413      	add	r3, r2
 800c014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c018:	460a      	mov	r2, r1
 800c01a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	791b      	ldrb	r3, [r3, #4]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d128      	bne.n	800c076 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c030:	2b00      	cmp	r3, #0
 800c032:	d110      	bne.n	800c056 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	015a      	lsls	r2, r3, #5
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	4413      	add	r3, r2
 800c03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	0151      	lsls	r1, r2, #5
 800c046:	69fa      	ldr	r2, [r7, #28]
 800c048:	440a      	add	r2, r1
 800c04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c04e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c052:	6013      	str	r3, [r2, #0]
 800c054:	e00f      	b.n	800c076 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	69ba      	ldr	r2, [r7, #24]
 800c066:	0151      	lsls	r1, r2, #5
 800c068:	69fa      	ldr	r2, [r7, #28]
 800c06a:	440a      	add	r2, r1
 800c06c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c074:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	015a      	lsls	r2, r3, #5
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	4413      	add	r3, r2
 800c07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	69ba      	ldr	r2, [r7, #24]
 800c086:	0151      	lsls	r1, r2, #5
 800c088:	69fa      	ldr	r2, [r7, #28]
 800c08a:	440a      	add	r2, r1
 800c08c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c090:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c094:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3720      	adds	r7, #32
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	fff80000 	.word	0xfff80000
 800c0a4:	e007ffff 	.word	0xe007ffff
 800c0a8:	1ff80000 	.word	0x1ff80000

0800c0ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b087      	sub	sp, #28
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	785b      	ldrb	r3, [r3, #1]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d14a      	bne.n	800c160 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	015a      	lsls	r2, r3, #5
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0e2:	f040 8086 	bne.w	800c1f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	015a      	lsls	r2, r3, #5
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	7812      	ldrb	r2, [r2, #0]
 800c0fa:	0151      	lsls	r1, r2, #5
 800c0fc:	693a      	ldr	r2, [r7, #16]
 800c0fe:	440a      	add	r2, r1
 800c100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c104:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c108:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	015a      	lsls	r2, r3, #5
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	4413      	add	r3, r2
 800c114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	7812      	ldrb	r2, [r2, #0]
 800c11e:	0151      	lsls	r1, r2, #5
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	440a      	add	r2, r1
 800c124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c12c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3301      	adds	r3, #1
 800c132:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f242 7210 	movw	r2, #10000	; 0x2710
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d902      	bls.n	800c144 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	75fb      	strb	r3, [r7, #23]
          break;
 800c142:	e056      	b.n	800c1f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	015a      	lsls	r2, r3, #5
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	4413      	add	r3, r2
 800c14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c15c:	d0e7      	beq.n	800c12e <USB_EPStopXfer+0x82>
 800c15e:	e048      	b.n	800c1f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	015a      	lsls	r2, r3, #5
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	4413      	add	r3, r2
 800c16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c178:	d13b      	bne.n	800c1f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	015a      	lsls	r2, r3, #5
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	4413      	add	r3, r2
 800c184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	7812      	ldrb	r2, [r2, #0]
 800c18e:	0151      	lsls	r1, r2, #5
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	440a      	add	r2, r1
 800c194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c198:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c19c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	015a      	lsls	r2, r3, #5
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	7812      	ldrb	r2, [r2, #0]
 800c1b2:	0151      	lsls	r1, r2, #5
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	440a      	add	r2, r1
 800c1b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f242 7210 	movw	r2, #10000	; 0x2710
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d902      	bls.n	800c1d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	75fb      	strb	r3, [r7, #23]
          break;
 800c1d6:	e00c      	b.n	800c1f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	015a      	lsls	r2, r3, #5
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1f0:	d0e7      	beq.n	800c1c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	371c      	adds	r7, #28
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c200:	b480      	push	{r7}
 800c202:	b089      	sub	sp, #36	; 0x24
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	4611      	mov	r1, r2
 800c20c:	461a      	mov	r2, r3
 800c20e:	460b      	mov	r3, r1
 800c210:	71fb      	strb	r3, [r7, #7]
 800c212:	4613      	mov	r3, r2
 800c214:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c21e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c222:	2b00      	cmp	r3, #0
 800c224:	d123      	bne.n	800c26e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c226:	88bb      	ldrh	r3, [r7, #4]
 800c228:	3303      	adds	r3, #3
 800c22a:	089b      	lsrs	r3, r3, #2
 800c22c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c22e:	2300      	movs	r3, #0
 800c230:	61bb      	str	r3, [r7, #24]
 800c232:	e018      	b.n	800c266 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c234:	79fb      	ldrb	r3, [r7, #7]
 800c236:	031a      	lsls	r2, r3, #12
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c240:	461a      	mov	r2, r3
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	3301      	adds	r3, #1
 800c24c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	3301      	adds	r3, #1
 800c252:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	3301      	adds	r3, #1
 800c258:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	3301      	adds	r3, #1
 800c25e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	3301      	adds	r3, #1
 800c264:	61bb      	str	r3, [r7, #24]
 800c266:	69ba      	ldr	r2, [r7, #24]
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d3e2      	bcc.n	800c234 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3724      	adds	r7, #36	; 0x24
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b08b      	sub	sp, #44	; 0x2c
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	4613      	mov	r3, r2
 800c288:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c292:	88fb      	ldrh	r3, [r7, #6]
 800c294:	089b      	lsrs	r3, r3, #2
 800c296:	b29b      	uxth	r3, r3
 800c298:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c29a:	88fb      	ldrh	r3, [r7, #6]
 800c29c:	f003 0303 	and.w	r3, r3, #3
 800c2a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	623b      	str	r3, [r7, #32]
 800c2a6:	e014      	b.n	800c2d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	601a      	str	r2, [r3, #0]
    pDest++;
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2bc:	3301      	adds	r3, #1
 800c2be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	623b      	str	r3, [r7, #32]
 800c2d2:	6a3a      	ldr	r2, [r7, #32]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d3e6      	bcc.n	800c2a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c2da:	8bfb      	ldrh	r3, [r7, #30]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d01e      	beq.n	800c31e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f107 0310 	add.w	r3, r7, #16
 800c2f0:	6812      	ldr	r2, [r2, #0]
 800c2f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c2f4:	693a      	ldr	r2, [r7, #16]
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	00db      	lsls	r3, r3, #3
 800c2fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c300:	b2da      	uxtb	r2, r3
 800c302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c304:	701a      	strb	r2, [r3, #0]
      i++;
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	3301      	adds	r3, #1
 800c30a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30e:	3301      	adds	r3, #1
 800c310:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c312:	8bfb      	ldrh	r3, [r7, #30]
 800c314:	3b01      	subs	r3, #1
 800c316:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c318:	8bfb      	ldrh	r3, [r7, #30]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1ea      	bne.n	800c2f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c320:	4618      	mov	r0, r3
 800c322:	372c      	adds	r7, #44	; 0x2c
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	785b      	ldrb	r3, [r3, #1]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d12c      	bne.n	800c3a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	015a      	lsls	r2, r3, #5
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4413      	add	r3, r2
 800c350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	db12      	blt.n	800c380 <USB_EPSetStall+0x54>
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00f      	beq.n	800c380 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4413      	add	r3, r2
 800c368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	0151      	lsls	r1, r2, #5
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	440a      	add	r2, r1
 800c376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c37a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c37e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	015a      	lsls	r2, r3, #5
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	4413      	add	r3, r2
 800c388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	0151      	lsls	r1, r2, #5
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	440a      	add	r2, r1
 800c396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c39a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	e02b      	b.n	800c3fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	015a      	lsls	r2, r3, #5
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	db12      	blt.n	800c3da <USB_EPSetStall+0xae>
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00f      	beq.n	800c3da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	015a      	lsls	r2, r3, #5
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	0151      	lsls	r1, r2, #5
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	440a      	add	r2, r1
 800c3d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c3d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	015a      	lsls	r2, r3, #5
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	0151      	lsls	r1, r2, #5
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	440a      	add	r2, r1
 800c3f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	785b      	ldrb	r3, [r3, #1]
 800c420:	2b01      	cmp	r3, #1
 800c422:	d128      	bne.n	800c476 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	0151      	lsls	r1, r2, #5
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	440a      	add	r2, r1
 800c43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c43e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c442:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	791b      	ldrb	r3, [r3, #4]
 800c448:	2b03      	cmp	r3, #3
 800c44a:	d003      	beq.n	800c454 <USB_EPClearStall+0x4c>
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	791b      	ldrb	r3, [r3, #4]
 800c450:	2b02      	cmp	r3, #2
 800c452:	d138      	bne.n	800c4c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	015a      	lsls	r2, r3, #5
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4413      	add	r3, r2
 800c45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	0151      	lsls	r1, r2, #5
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	440a      	add	r2, r1
 800c46a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c46e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	e027      	b.n	800c4c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	015a      	lsls	r2, r3, #5
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	4413      	add	r3, r2
 800c47e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	0151      	lsls	r1, r2, #5
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	440a      	add	r2, r1
 800c48c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c490:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c494:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	791b      	ldrb	r3, [r3, #4]
 800c49a:	2b03      	cmp	r3, #3
 800c49c:	d003      	beq.n	800c4a6 <USB_EPClearStall+0x9e>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	791b      	ldrb	r3, [r3, #4]
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d10f      	bne.n	800c4c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	015a      	lsls	r2, r3, #5
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	0151      	lsls	r1, r2, #5
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	440a      	add	r2, r1
 800c4bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3714      	adds	r7, #20
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	460b      	mov	r3, r1
 800c4de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c4f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	78fb      	ldrb	r3, [r7, #3]
 800c502:	011b      	lsls	r3, r3, #4
 800c504:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c508:	68f9      	ldr	r1, [r7, #12]
 800c50a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c50e:	4313      	orrs	r3, r2
 800c510:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3714      	adds	r7, #20
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c53a:	f023 0303 	bic.w	r3, r3, #3
 800c53e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c54e:	f023 0302 	bic.w	r3, r3, #2
 800c552:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3714      	adds	r7, #20
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr

0800c562 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c562:	b480      	push	{r7}
 800c564:	b085      	sub	sp, #20
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c57c:	f023 0303 	bic.w	r3, r3, #3
 800c580:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c590:	f043 0302 	orr.w	r3, r3, #2
 800c594:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3714      	adds	r7, #20
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	699b      	ldr	r3, [r3, #24]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b085      	sub	sp, #20
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5dc:	699b      	ldr	r3, [r3, #24]
 800c5de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	0c1b      	lsrs	r3, r3, #16
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b085      	sub	sp, #20
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c610:	699b      	ldr	r3, [r3, #24]
 800c612:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c61a:	69db      	ldr	r3, [r3, #28]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	4013      	ands	r3, r2
 800c620:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	b29b      	uxth	r3, r3
}
 800c626:	4618      	mov	r0, r3
 800c628:	3714      	adds	r7, #20
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c632:	b480      	push	{r7}
 800c634:	b085      	sub	sp, #20
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	460b      	mov	r3, r1
 800c63c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c642:	78fb      	ldrb	r3, [r7, #3]
 800c644:	015a      	lsls	r2, r3, #5
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	4413      	add	r3, r2
 800c64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c658:	695b      	ldr	r3, [r3, #20]
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	4013      	ands	r3, r2
 800c65e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c660:	68bb      	ldr	r3, [r7, #8]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3714      	adds	r7, #20
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c66e:	b480      	push	{r7}
 800c670:	b087      	sub	sp, #28
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	460b      	mov	r3, r1
 800c678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c684:	691b      	ldr	r3, [r3, #16]
 800c686:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c690:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c692:	78fb      	ldrb	r3, [r7, #3]
 800c694:	f003 030f 	and.w	r3, r3, #15
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	fa22 f303 	lsr.w	r3, r2, r3
 800c69e:	01db      	lsls	r3, r3, #7
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	693a      	ldr	r2, [r7, #16]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c6a8:	78fb      	ldrb	r3, [r7, #3]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	4013      	ands	r3, r2
 800c6ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	371c      	adds	r7, #28
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr

0800c6ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	b083      	sub	sp, #12
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	f003 0301 	and.w	r3, r3, #1
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	370c      	adds	r7, #12
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c702:	4619      	mov	r1, r3
 800c704:	4b09      	ldr	r3, [pc, #36]	; (800c72c <USB_ActivateSetup+0x44>)
 800c706:	4013      	ands	r3, r2
 800c708:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c71c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	fffff800 	.word	0xfffff800

0800c730 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	460b      	mov	r3, r1
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	333c      	adds	r3, #60	; 0x3c
 800c746:	3304      	adds	r3, #4
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	4a26      	ldr	r2, [pc, #152]	; (800c7e8 <USB_EP0_OutStart+0xb8>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d90a      	bls.n	800c76a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c764:	d101      	bne.n	800c76a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	e037      	b.n	800c7da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c770:	461a      	mov	r2, r3
 800c772:	2300      	movs	r3, #0
 800c774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	697a      	ldr	r2, [r7, #20]
 800c794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c798:	f043 0318 	orr.w	r3, r3, #24
 800c79c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c7b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c7b2:	7afb      	ldrb	r3, [r7, #11]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d10f      	bne.n	800c7d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7be:	461a      	mov	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	697a      	ldr	r2, [r7, #20]
 800c7ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c7d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	371c      	adds	r7, #28
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	4f54300a 	.word	0x4f54300a

0800c7ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	4a13      	ldr	r2, [pc, #76]	; (800c850 <USB_CoreReset+0x64>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d901      	bls.n	800c80a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c806:	2303      	movs	r3, #3
 800c808:	e01b      	b.n	800c842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	daf2      	bge.n	800c7f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c812:	2300      	movs	r3, #0
 800c814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	f043 0201 	orr.w	r2, r3, #1
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	4a09      	ldr	r2, [pc, #36]	; (800c850 <USB_CoreReset+0x64>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d901      	bls.n	800c834 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c830:	2303      	movs	r3, #3
 800c832:	e006      	b.n	800c842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d0f0      	beq.n	800c822 <USB_CoreReset+0x36>

  return HAL_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	00030d40 	.word	0x00030d40

0800c854 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c858:	4904      	ldr	r1, [pc, #16]	; (800c86c <MX_FATFS_Init+0x18>)
 800c85a:	4805      	ldr	r0, [pc, #20]	; (800c870 <MX_FATFS_Init+0x1c>)
 800c85c:	f007 ffb8 	bl	80147d0 <FATFS_LinkDriver>
 800c860:	4603      	mov	r3, r0
 800c862:	461a      	mov	r2, r3
 800c864:	4b03      	ldr	r3, [pc, #12]	; (800c874 <MX_FATFS_Init+0x20>)
 800c866:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c868:	bf00      	nop
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	24000428 	.word	0x24000428
 800c870:	24000010 	.word	0x24000010
 800c874:	24000424 	.word	0x24000424

0800c878 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c878:	b480      	push	{r7}
 800c87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c87c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c87e:	4618      	mov	r0, r3
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	4603      	mov	r3, r0
 800c890:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return RES_OK;
 800c892:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 800c894:	4618      	mov	r0, r3
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return RES_OK;
 800c8aa:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60b9      	str	r1, [r7, #8]
 800c8c0:	607a      	str	r2, [r7, #4]
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SD_ReadDisk(buff,sector,count);
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	6879      	ldr	r1, [r7, #4]
 800c8cc:	68b8      	ldr	r0, [r7, #8]
 800c8ce:	f008 f961 	bl	8014b94 <SD_ReadDisk>
    return RES_OK;
 800c8d2:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60b9      	str	r1, [r7, #8]
 800c8e4:	607a      	str	r2, [r7, #4]
 800c8e6:	603b      	str	r3, [r7, #0]
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SD_WriteDisk((uint8_t*)buff,sector,count);
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	6879      	ldr	r1, [r7, #4]
 800c8f0:	68b8      	ldr	r0, [r7, #8]
 800c8f2:	f008 f985 	bl	8014c00 <SD_WriteDisk>
    return RES_OK;
 800c8f6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	4603      	mov	r3, r0
 800c908:	603a      	str	r2, [r7, #0]
 800c90a:	71fb      	strb	r3, [r7, #7]
 800c90c:	460b      	mov	r3, r1
 800c90e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
	DRESULT res;
	switch(cmd)
 800c910:	79bb      	ldrb	r3, [r7, #6]
 800c912:	2b03      	cmp	r3, #3
 800c914:	d823      	bhi.n	800c95e <USER_ioctl+0x5e>
 800c916:	a201      	add	r2, pc, #4	; (adr r2, 800c91c <USER_ioctl+0x1c>)
 800c918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91c:	0800c92d 	.word	0x0800c92d
 800c920:	0800c951 	.word	0x0800c951
 800c924:	0800c933 	.word	0x0800c933
 800c928:	0800c941 	.word	0x0800c941
	{
		case CTRL_SYNC:
			res = RES_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	73fb      	strb	r3, [r7, #15]
			break;
 800c930:	e018      	b.n	800c964 <USER_ioctl+0x64>
		case GET_SECTOR_SIZE:
			*(DWORD*)buff = 512;
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c938:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 800c93a:	2300      	movs	r3, #0
 800c93c:	73fb      	strb	r3, [r7, #15]
			break;
 800c93e:	e011      	b.n	800c964 <USER_ioctl+0x64>
		case GET_BLOCK_SIZE:
			*(WORD*)buff = SDCardInfo.LogBlockSize;
 800c940:	4b0c      	ldr	r3, [pc, #48]	; (800c974 <USER_ioctl+0x74>)
 800c942:	69db      	ldr	r3, [r3, #28]
 800c944:	b29a      	uxth	r2, r3
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	73fb      	strb	r3, [r7, #15]
			break;
 800c94e:	e009      	b.n	800c964 <USER_ioctl+0x64>
		case GET_SECTOR_COUNT:
			*(DWORD*)buff = SDCardInfo.LogBlockNbr;
 800c950:	4b08      	ldr	r3, [pc, #32]	; (800c974 <USER_ioctl+0x74>)
 800c952:	699a      	ldr	r2, [r3, #24]
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 800c958:	2300      	movs	r3, #0
 800c95a:	73fb      	strb	r3, [r7, #15]
			break;
 800c95c:	e002      	b.n	800c964 <USER_ioctl+0x64>
		default:
			res = RES_PARERR;
 800c95e:	2304      	movs	r3, #4
 800c960:	73fb      	strb	r3, [r7, #15]
			break;
 800c962:	bf00      	nop
	}

    return res;
 800c964:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c966:	4618      	mov	r0, r3
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	24000934 	.word	0x24000934

0800c978 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	460b      	mov	r3, r1
 800c982:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c984:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c988:	f009 fb34 	bl	8015ff4 <malloc>
 800c98c:	4603      	mov	r3, r0
 800c98e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10a      	bne.n	800c9ac <USBD_CDC_Init+0x34>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	33b2      	adds	r3, #178	; 0xb2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4413      	add	r3, r2
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	e0fd      	b.n	800cba8 <USBD_CDC_Init+0x230>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c9ac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f009 fc14 	bl	80161e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	33b2      	adds	r3, #178	; 0xb2
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	4413      	add	r3, r2
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	33b2      	adds	r3, #178	; 0xb2
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	4413      	add	r3, r2
 800c9d8:	685a      	ldr	r2, [r3, #4]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	2202      	movs	r2, #2
 800c9ea:	2180      	movs	r1, #128	; 0x80
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f003 fcee 	bl	80103ce <USBD_CoreGetEPAdd>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	4b6e      	ldr	r3, [pc, #440]	; (800cbb0 <USBD_CDC_Init+0x238>)
 800c9f8:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2202      	movs	r2, #2
 800ca04:	2100      	movs	r1, #0
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f003 fce1 	bl	80103ce <USBD_CoreGetEPAdd>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	461a      	mov	r2, r3
 800ca10:	4b68      	ldr	r3, [pc, #416]	; (800cbb4 <USBD_CDC_Init+0x23c>)
 800ca12:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2203      	movs	r2, #3
 800ca1e:	2180      	movs	r1, #128	; 0x80
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f003 fcd4 	bl	80103ce <USBD_CoreGetEPAdd>
 800ca26:	4603      	mov	r3, r0
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4b63      	ldr	r3, [pc, #396]	; (800cbb8 <USBD_CDC_Init+0x240>)
 800ca2c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	7c1b      	ldrb	r3, [r3, #16]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d138      	bne.n	800caa8 <USBD_CDC_Init+0x130>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca36:	4b5e      	ldr	r3, [pc, #376]	; (800cbb0 <USBD_CDC_Init+0x238>)
 800ca38:	7819      	ldrb	r1, [r3, #0]
 800ca3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca3e:	2202      	movs	r2, #2
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f009 f942 	bl	8015cca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca46:	4b5a      	ldr	r3, [pc, #360]	; (800cbb0 <USBD_CDC_Init+0x238>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	f003 020f 	and.w	r2, r3, #15
 800ca4e:	6879      	ldr	r1, [r7, #4]
 800ca50:	4613      	mov	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	440b      	add	r3, r1
 800ca5a:	3324      	adds	r3, #36	; 0x24
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca60:	4b54      	ldr	r3, [pc, #336]	; (800cbb4 <USBD_CDC_Init+0x23c>)
 800ca62:	7819      	ldrb	r1, [r3, #0]
 800ca64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca68:	2202      	movs	r2, #2
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f009 f92d 	bl	8015cca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca70:	4b50      	ldr	r3, [pc, #320]	; (800cbb4 <USBD_CDC_Init+0x23c>)
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	f003 020f 	and.w	r2, r3, #15
 800ca78:	6879      	ldr	r1, [r7, #4]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	440b      	add	r3, r1
 800ca84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca88:	2201      	movs	r2, #1
 800ca8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ca8c:	4b4a      	ldr	r3, [pc, #296]	; (800cbb8 <USBD_CDC_Init+0x240>)
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	f003 020f 	and.w	r2, r3, #15
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	4613      	mov	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4413      	add	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	440b      	add	r3, r1
 800caa0:	3326      	adds	r3, #38	; 0x26
 800caa2:	2210      	movs	r2, #16
 800caa4:	801a      	strh	r2, [r3, #0]
 800caa6:	e035      	b.n	800cb14 <USBD_CDC_Init+0x19c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800caa8:	4b41      	ldr	r3, [pc, #260]	; (800cbb0 <USBD_CDC_Init+0x238>)
 800caaa:	7819      	ldrb	r1, [r3, #0]
 800caac:	2340      	movs	r3, #64	; 0x40
 800caae:	2202      	movs	r2, #2
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f009 f90a 	bl	8015cca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cab6:	4b3e      	ldr	r3, [pc, #248]	; (800cbb0 <USBD_CDC_Init+0x238>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	f003 020f 	and.w	r2, r3, #15
 800cabe:	6879      	ldr	r1, [r7, #4]
 800cac0:	4613      	mov	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	440b      	add	r3, r1
 800caca:	3324      	adds	r3, #36	; 0x24
 800cacc:	2201      	movs	r2, #1
 800cace:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cad0:	4b38      	ldr	r3, [pc, #224]	; (800cbb4 <USBD_CDC_Init+0x23c>)
 800cad2:	7819      	ldrb	r1, [r3, #0]
 800cad4:	2340      	movs	r3, #64	; 0x40
 800cad6:	2202      	movs	r2, #2
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f009 f8f6 	bl	8015cca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cade:	4b35      	ldr	r3, [pc, #212]	; (800cbb4 <USBD_CDC_Init+0x23c>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	f003 020f 	and.w	r2, r3, #15
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	440b      	add	r3, r1
 800caf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800caf6:	2201      	movs	r2, #1
 800caf8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cafa:	4b2f      	ldr	r3, [pc, #188]	; (800cbb8 <USBD_CDC_Init+0x240>)
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	f003 020f 	and.w	r2, r3, #15
 800cb02:	6879      	ldr	r1, [r7, #4]
 800cb04:	4613      	mov	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4413      	add	r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	440b      	add	r3, r1
 800cb0e:	3326      	adds	r3, #38	; 0x26
 800cb10:	2210      	movs	r2, #16
 800cb12:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cb14:	4b28      	ldr	r3, [pc, #160]	; (800cbb8 <USBD_CDC_Init+0x240>)
 800cb16:	7819      	ldrb	r1, [r3, #0]
 800cb18:	2308      	movs	r3, #8
 800cb1a:	2203      	movs	r2, #3
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f009 f8d4 	bl	8015cca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cb22:	4b25      	ldr	r3, [pc, #148]	; (800cbb8 <USBD_CDC_Init+0x240>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	f003 020f 	and.w	r2, r3, #15
 800cb2a:	6879      	ldr	r1, [r7, #4]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	440b      	add	r3, r1
 800cb36:	3324      	adds	r3, #36	; 0x24
 800cb38:	2201      	movs	r2, #1
 800cb3a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	33b6      	adds	r3, #182	; 0xb6
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4413      	add	r3, r2
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <USBD_CDC_Init+0x1fe>
  {
    return (uint8_t)USBD_EMEM;
 800cb72:	2302      	movs	r3, #2
 800cb74:	e018      	b.n	800cba8 <USBD_CDC_Init+0x230>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	7c1b      	ldrb	r3, [r3, #16]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10a      	bne.n	800cb94 <USBD_CDC_Init+0x21c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb7e:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <USBD_CDC_Init+0x23c>)
 800cb80:	7819      	ldrb	r1, [r3, #0]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f009 f9aa 	bl	8015ee6 <USBD_LL_PrepareReceive>
 800cb92:	e008      	b.n	800cba6 <USBD_CDC_Init+0x22e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb94:	4b07      	ldr	r3, [pc, #28]	; (800cbb4 <USBD_CDC_Init+0x23c>)
 800cb96:	7819      	ldrb	r1, [r3, #0]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb9e:	2340      	movs	r3, #64	; 0x40
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f009 f9a0 	bl	8015ee6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	2400005c 	.word	0x2400005c
 800cbb4:	2400005d 	.word	0x2400005d
 800cbb8:	2400005e 	.word	0x2400005e

0800cbbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);


#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this CDC class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2202      	movs	r2, #2
 800cbd2:	2180      	movs	r1, #128	; 0x80
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f003 fbfa 	bl	80103ce <USBD_CoreGetEPAdd>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	461a      	mov	r2, r3
 800cbde:	4b4a      	ldr	r3, [pc, #296]	; (800cd08 <USBD_CDC_DeInit+0x14c>)
 800cbe0:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2202      	movs	r2, #2
 800cbec:	2100      	movs	r1, #0
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f003 fbed 	bl	80103ce <USBD_CoreGetEPAdd>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	4b44      	ldr	r3, [pc, #272]	; (800cd0c <USBD_CDC_DeInit+0x150>)
 800cbfa:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2203      	movs	r2, #3
 800cc06:	2180      	movs	r1, #128	; 0x80
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f003 fbe0 	bl	80103ce <USBD_CoreGetEPAdd>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	461a      	mov	r2, r3
 800cc12:	4b3f      	ldr	r3, [pc, #252]	; (800cd10 <USBD_CDC_DeInit+0x154>)
 800cc14:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cc16:	4b3c      	ldr	r3, [pc, #240]	; (800cd08 <USBD_CDC_DeInit+0x14c>)
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f009 f87a 	bl	8015d16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cc22:	4b39      	ldr	r3, [pc, #228]	; (800cd08 <USBD_CDC_DeInit+0x14c>)
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	f003 020f 	and.w	r2, r3, #15
 800cc2a:	6879      	ldr	r1, [r7, #4]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	440b      	add	r3, r1
 800cc36:	3324      	adds	r3, #36	; 0x24
 800cc38:	2200      	movs	r2, #0
 800cc3a:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cc3c:	4b33      	ldr	r3, [pc, #204]	; (800cd0c <USBD_CDC_DeInit+0x150>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f009 f867 	bl	8015d16 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cc48:	4b30      	ldr	r3, [pc, #192]	; (800cd0c <USBD_CDC_DeInit+0x150>)
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	f003 020f 	and.w	r2, r3, #15
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	4613      	mov	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	4413      	add	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	440b      	add	r3, r1
 800cc5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc60:	2200      	movs	r2, #0
 800cc62:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cc64:	4b2a      	ldr	r3, [pc, #168]	; (800cd10 <USBD_CDC_DeInit+0x154>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	4619      	mov	r1, r3
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f009 f853 	bl	8015d16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cc70:	4b27      	ldr	r3, [pc, #156]	; (800cd10 <USBD_CDC_DeInit+0x154>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	f003 020f 	and.w	r2, r3, #15
 800cc78:	6879      	ldr	r1, [r7, #4]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	4413      	add	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	440b      	add	r3, r1
 800cc84:	3324      	adds	r3, #36	; 0x24
 800cc86:	2200      	movs	r2, #0
 800cc88:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cc8a:	4b21      	ldr	r3, [pc, #132]	; (800cd10 <USBD_CDC_DeInit+0x154>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	f003 020f 	and.w	r2, r3, #15
 800cc92:	6879      	ldr	r1, [r7, #4]
 800cc94:	4613      	mov	r3, r2
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	4413      	add	r3, r2
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	440b      	add	r3, r1
 800cc9e:	3326      	adds	r3, #38	; 0x26
 800cca0:	2200      	movs	r2, #0
 800cca2:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	33b2      	adds	r3, #178	; 0xb2
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	4413      	add	r3, r2
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d021      	beq.n	800ccfc <USBD_CDC_DeInit+0x140>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	33b6      	adds	r3, #182	; 0xb6
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	4413      	add	r3, r2
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	33b2      	adds	r3, #178	; 0xb2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4413      	add	r3, r2
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f009 f991 	bl	8016004 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	33b2      	adds	r3, #178	; 0xb2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  }

  return (uint8_t)USBD_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3708      	adds	r7, #8
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	2400005c 	.word	0x2400005c
 800cd0c:	2400005d 	.word	0x2400005d
 800cd10:	2400005e 	.word	0x2400005e

0800cd14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b086      	sub	sp, #24
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	33b2      	adds	r3, #178	; 0xb2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4413      	add	r3, r2
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cd30:	2300      	movs	r3, #0
 800cd32:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cd34:	2300      	movs	r3, #0
 800cd36:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cd42:	2303      	movs	r3, #3
 800cd44:	e0c0      	b.n	800cec8 <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d050      	beq.n	800cdf4 <USBD_CDC_Setup+0xe0>
 800cd52:	2b20      	cmp	r3, #32
 800cd54:	f040 80b0 	bne.w	800ceb8 <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	88db      	ldrh	r3, [r3, #6]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d03a      	beq.n	800cdd6 <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	b25b      	sxtb	r3, r3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	da1b      	bge.n	800cda2 <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	33b6      	adds	r3, #182	; 0xb6
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	4413      	add	r3, r2
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cd80:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd82:	683a      	ldr	r2, [r7, #0]
 800cd84:	88d2      	ldrh	r2, [r2, #6]
 800cd86:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	88db      	ldrh	r3, [r3, #6]
 800cd8c:	2b07      	cmp	r3, #7
 800cd8e:	bf28      	it	cs
 800cd90:	2307      	movcs	r3, #7
 800cd92:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	89fa      	ldrh	r2, [r7, #14]
 800cd98:	4619      	mov	r1, r3
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f004 fa2e 	bl	80111fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cda0:	e091      	b.n	800cec6 <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	785a      	ldrb	r2, [r3, #1]
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	88db      	ldrh	r3, [r3, #6]
 800cdb0:	2b3f      	cmp	r3, #63	; 0x3f
 800cdb2:	d803      	bhi.n	800cdbc <USBD_CDC_Setup+0xa8>
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	88db      	ldrh	r3, [r3, #6]
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	e000      	b.n	800cdbe <USBD_CDC_Setup+0xaa>
 800cdbc:	2240      	movs	r2, #64	; 0x40
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cdc4:	6939      	ldr	r1, [r7, #16]
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cdcc:	461a      	mov	r2, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f004 fa40 	bl	8011254 <USBD_CtlPrepareRx>
      break;
 800cdd4:	e077      	b.n	800cec6 <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	33b6      	adds	r3, #182	; 0xb6
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	4413      	add	r3, r2
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	683a      	ldr	r2, [r7, #0]
 800cdea:	7850      	ldrb	r0, [r2, #1]
 800cdec:	2200      	movs	r2, #0
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	4798      	blx	r3
      break;
 800cdf2:	e068      	b.n	800cec6 <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	785b      	ldrb	r3, [r3, #1]
 800cdf8:	2b0b      	cmp	r3, #11
 800cdfa:	d852      	bhi.n	800cea2 <USBD_CDC_Setup+0x18e>
 800cdfc:	a201      	add	r2, pc, #4	; (adr r2, 800ce04 <USBD_CDC_Setup+0xf0>)
 800cdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce02:	bf00      	nop
 800ce04:	0800ce35 	.word	0x0800ce35
 800ce08:	0800ceb1 	.word	0x0800ceb1
 800ce0c:	0800cea3 	.word	0x0800cea3
 800ce10:	0800cea3 	.word	0x0800cea3
 800ce14:	0800cea3 	.word	0x0800cea3
 800ce18:	0800cea3 	.word	0x0800cea3
 800ce1c:	0800cea3 	.word	0x0800cea3
 800ce20:	0800cea3 	.word	0x0800cea3
 800ce24:	0800cea3 	.word	0x0800cea3
 800ce28:	0800cea3 	.word	0x0800cea3
 800ce2c:	0800ce5f 	.word	0x0800ce5f
 800ce30:	0800ce89 	.word	0x0800ce89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	2b03      	cmp	r3, #3
 800ce3e:	d107      	bne.n	800ce50 <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ce40:	f107 030a 	add.w	r3, r7, #10
 800ce44:	2202      	movs	r2, #2
 800ce46:	4619      	mov	r1, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f004 f9d7 	bl	80111fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce4e:	e032      	b.n	800ceb6 <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f004 f961 	bl	801111a <USBD_CtlError>
            ret = USBD_FAIL;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	75fb      	strb	r3, [r7, #23]
          break;
 800ce5c:	e02b      	b.n	800ceb6 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d107      	bne.n	800ce7a <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ce6a:	f107 030d 	add.w	r3, r7, #13
 800ce6e:	2201      	movs	r2, #1
 800ce70:	4619      	mov	r1, r3
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f004 f9c2 	bl	80111fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce78:	e01d      	b.n	800ceb6 <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 800ce7a:	6839      	ldr	r1, [r7, #0]
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f004 f94c 	bl	801111a <USBD_CtlError>
            ret = USBD_FAIL;
 800ce82:	2303      	movs	r3, #3
 800ce84:	75fb      	strb	r3, [r7, #23]
          break;
 800ce86:	e016      	b.n	800ceb6 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b03      	cmp	r3, #3
 800ce92:	d00f      	beq.n	800ceb4 <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f004 f93f 	bl	801111a <USBD_CtlError>
            ret = USBD_FAIL;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cea0:	e008      	b.n	800ceb4 <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cea2:	6839      	ldr	r1, [r7, #0]
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f004 f938 	bl	801111a <USBD_CtlError>
          ret = USBD_FAIL;
 800ceaa:	2303      	movs	r3, #3
 800ceac:	75fb      	strb	r3, [r7, #23]
          break;
 800ceae:	e002      	b.n	800ceb6 <USBD_CDC_Setup+0x1a2>
          break;
 800ceb0:	bf00      	nop
 800ceb2:	e008      	b.n	800cec6 <USBD_CDC_Setup+0x1b2>
          break;
 800ceb4:	bf00      	nop
      }
      break;
 800ceb6:	e006      	b.n	800cec6 <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f004 f92d 	bl	801111a <USBD_CtlError>
      ret = USBD_FAIL;
 800cec0:	2303      	movs	r3, #3
 800cec2:	75fb      	strb	r3, [r7, #23]
      break;
 800cec4:	bf00      	nop
  }

  return (uint8_t)ret;
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	33b2      	adds	r3, #178	; 0xb2
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	4413      	add	r3, r2
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d101      	bne.n	800cefc <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800cef8:	2303      	movs	r3, #3
 800cefa:	e066      	b.n	800cfca <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	33b2      	adds	r3, #178	; 0xb2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4413      	add	r3, r2
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf0e:	78fb      	ldrb	r3, [r7, #3]
 800cf10:	f003 020f 	and.w	r2, r3, #15
 800cf14:	6879      	ldr	r1, [r7, #4]
 800cf16:	4613      	mov	r3, r2
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	4413      	add	r3, r2
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	440b      	add	r3, r1
 800cf20:	3318      	adds	r3, #24
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d02f      	beq.n	800cf88 <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cf28:	78fb      	ldrb	r3, [r7, #3]
 800cf2a:	f003 020f 	and.w	r2, r3, #15
 800cf2e:	6879      	ldr	r1, [r7, #4]
 800cf30:	4613      	mov	r3, r2
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	4413      	add	r3, r2
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	440b      	add	r3, r1
 800cf3a:	3318      	adds	r3, #24
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	78fb      	ldrb	r3, [r7, #3]
 800cf40:	f003 010f 	and.w	r1, r3, #15
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	460b      	mov	r3, r1
 800cf48:	00db      	lsls	r3, r3, #3
 800cf4a:	440b      	add	r3, r1
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4403      	add	r3, r0
 800cf50:	3344      	adds	r3, #68	; 0x44
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf58:	fb01 f303 	mul.w	r3, r1, r3
 800cf5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d112      	bne.n	800cf88 <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cf62:	78fb      	ldrb	r3, [r7, #3]
 800cf64:	f003 020f 	and.w	r2, r3, #15
 800cf68:	6879      	ldr	r1, [r7, #4]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4413      	add	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	440b      	add	r3, r1
 800cf74:	3318      	adds	r3, #24
 800cf76:	2200      	movs	r2, #0
 800cf78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cf7a:	78f9      	ldrb	r1, [r7, #3]
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	2200      	movs	r2, #0
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f008 ff8f 	bl	8015ea4 <USBD_LL_Transmit>
 800cf86:	e01f      	b.n	800cfc8 <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	33b6      	adds	r3, #182	; 0xb6
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	4413      	add	r3, r2
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d010      	beq.n	800cfc8 <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	33b6      	adds	r3, #182	; 0xb6
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cfc4:	78fa      	ldrb	r2, [r7, #3]
 800cfc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cfc8:	2300      	movs	r3, #0
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3710      	adds	r7, #16
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b084      	sub	sp, #16
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
 800cfda:	460b      	mov	r3, r1
 800cfdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	33b2      	adds	r3, #178	; 0xb2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	4413      	add	r3, r2
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	33b2      	adds	r3, #178	; 0xb2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 800d004:	2303      	movs	r3, #3
 800d006:	e01a      	b.n	800d03e <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d008:	78fb      	ldrb	r3, [r7, #3]
 800d00a:	4619      	mov	r1, r3
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f008 ff8b 	bl	8015f28 <USBD_LL_GetRxDataSize>
 800d012:	4602      	mov	r2, r0
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	33b6      	adds	r3, #182	; 0xb6
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	4413      	add	r3, r2
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d032:	68fa      	ldr	r2, [r7, #12]
 800d034:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d038:	4611      	mov	r1, r2
 800d03a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b084      	sub	sp, #16
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	33b2      	adds	r3, #178	; 0xb2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	4413      	add	r3, r2
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d101      	bne.n	800d06a <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d066:	2303      	movs	r3, #3
 800d068:	e025      	b.n	800d0b6 <USBD_CDC_EP0_RxReady+0x70>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	33b6      	adds	r3, #182	; 0xb6
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d01a      	beq.n	800d0b4 <USBD_CDC_EP0_RxReady+0x6e>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d084:	2bff      	cmp	r3, #255	; 0xff
 800d086:	d015      	beq.n	800d0b4 <USBD_CDC_EP0_RxReady+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	33b6      	adds	r3, #182	; 0xb6
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	4413      	add	r3, r2
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	68fa      	ldr	r2, [r7, #12]
 800d09c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d0a0:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d0a8:	b292      	uxth	r2, r2
 800d0aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	22ff      	movs	r2, #255	; 0xff
 800d0b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d101      	bne.n	800d0d2 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d0ce:	2303      	movs	r3, #3
 800d0d0:	e009      	b.n	800d0e6 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	33b6      	adds	r3, #182	; 0xb6
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr

0800d0f2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b087      	sub	sp, #28
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	60f8      	str	r0, [r7, #12]
 800d0fa:	60b9      	str	r1, [r7, #8]
 800d0fc:	607a      	str	r2, [r7, #4]
 800d0fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 800d100:	78fb      	ldrb	r3, [r7, #3]
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	33b2      	adds	r3, #178	; 0xb2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	4413      	add	r3, r2
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	617b      	str	r3, [r7, #20]
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d101      	bne.n	800d118 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d114:	2303      	movs	r3, #3
 800d116:	e008      	b.n	800d12a <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	68ba      	ldr	r2, [r7, #8]
 800d11c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d128:	2300      	movs	r3, #0
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	371c      	adds	r7, #28
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr

0800d136 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d136:	b480      	push	{r7}
 800d138:	b085      	sub	sp, #20
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	33b2      	adds	r3, #178	; 0xb2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d101      	bne.n	800d15c <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d158:	2303      	movs	r3, #3
 800d15a:	e004      	b.n	800d166 <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	683a      	ldr	r2, [r7, #0]
 800d160:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3714      	adds	r7, #20
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
	...

0800d174 <USBD_CDC_TransmitPacket>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 800d180:	78fb      	ldrb	r3, [r7, #3]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	33b2      	adds	r3, #178	; 0xb2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	60bb      	str	r3, [r7, #8]
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d18e:	2301      	movs	r3, #1
 800d190:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
 800d192:	78fb      	ldrb	r3, [r7, #3]
 800d194:	2202      	movs	r2, #2
 800d196:	2180      	movs	r1, #128	; 0x80
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f003 f918 	bl	80103ce <USBD_CoreGetEPAdd>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4b18      	ldr	r3, [pc, #96]	; (800d204 <USBD_CDC_TransmitPacket+0x90>)
 800d1a4:	701a      	strb	r2, [r3, #0]
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d101      	bne.n	800d1b0 <USBD_CDC_TransmitPacket+0x3c>
  {
    return (uint8_t)USBD_FAIL;
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	e025      	b.n	800d1fc <USBD_CDC_TransmitPacket+0x88>
  }

  if (hcdc->TxState == 0U)
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d11f      	bne.n	800d1fa <USBD_CDC_TransmitPacket+0x86>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d1c2:	4b10      	ldr	r3, [pc, #64]	; (800d204 <USBD_CDC_TransmitPacket+0x90>)
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	f003 020f 	and.w	r2, r3, #15
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4403      	add	r3, r0
 800d1dc:	3318      	adds	r3, #24
 800d1de:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d1e0:	4b08      	ldr	r3, [pc, #32]	; (800d204 <USBD_CDC_TransmitPacket+0x90>)
 800d1e2:	7819      	ldrb	r1, [r3, #0]
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f008 fe57 	bl	8015ea4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	2400005c 	.word	0x2400005c

0800d208 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	33b2      	adds	r3, #178	; 0xb2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	2202      	movs	r2, #2
 800d22c:	2100      	movs	r1, #0
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f003 f8cd 	bl	80103ce <USBD_CoreGetEPAdd>
 800d234:	4603      	mov	r3, r0
 800d236:	461a      	mov	r2, r3
 800d238:	4b15      	ldr	r3, [pc, #84]	; (800d290 <USBD_CDC_ReceivePacket+0x88>)
 800d23a:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	33b2      	adds	r3, #178	; 0xb2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	4413      	add	r3, r2
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <USBD_CDC_ReceivePacket+0x4c>
  {
    return (uint8_t)USBD_FAIL;
 800d250:	2303      	movs	r3, #3
 800d252:	e018      	b.n	800d286 <USBD_CDC_ReceivePacket+0x7e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	7c1b      	ldrb	r3, [r3, #16]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10a      	bne.n	800d272 <USBD_CDC_ReceivePacket+0x6a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d25c:	4b0c      	ldr	r3, [pc, #48]	; (800d290 <USBD_CDC_ReceivePacket+0x88>)
 800d25e:	7819      	ldrb	r1, [r3, #0]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f008 fe3b 	bl	8015ee6 <USBD_LL_PrepareReceive>
 800d270:	e008      	b.n	800d284 <USBD_CDC_ReceivePacket+0x7c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d272:	4b07      	ldr	r3, [pc, #28]	; (800d290 <USBD_CDC_ReceivePacket+0x88>)
 800d274:	7819      	ldrb	r1, [r3, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d27c:	2340      	movs	r3, #64	; 0x40
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f008 fe31 	bl	8015ee6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	2400005d 	.word	0x2400005d

0800d294 <USBD_CMPSIT_AddClass>:
  */
uint8_t  USBD_CMPSIT_AddClass(USBD_HandleTypeDef *pdev,
                              USBD_ClassTypeDef *pclass,
                              USBD_CompositeClassTypeDef class,
                              uint8_t cfgidx)
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	4611      	mov	r1, r2
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	71fb      	strb	r3, [r7, #7]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	71bb      	strb	r3, [r7, #6]
	switch(class)
 800d2aa:	79fb      	ldrb	r3, [r7, #7]
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d003      	beq.n	800d2b8 <USBD_CMPSIT_AddClass+0x24>
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	f000 80ec 	beq.w	800d48e <USBD_CMPSIT_AddClass+0x1fa>

			pdev->tclasslist[pdev->classId].NumIf = 1;
			pdev->tclasslist[pdev->classId].Ifs[0] = 2;

		}break;
		default:break;
 800d2b6:	e194      	b.n	800d5e2 <USBD_CMPSIT_AddClass+0x34e>
			pdev->tclasslist[pdev->classId].ClassType = CLASS_TYPE_CDC;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d2be:	68f9      	ldr	r1, [r7, #12]
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	00db      	lsls	r3, r3, #3
 800d2c4:	1a9b      	subs	r3, r3, r2
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	440b      	add	r3, r1
 800d2ca:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d2ce:	2202      	movs	r2, #2
 800d2d0:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Active = 1U;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d2d8:	68f9      	ldr	r1, [r7, #12]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	00db      	lsls	r3, r3, #3
 800d2de:	1a9b      	subs	r3, r3, r2
 800d2e0:	00db      	lsls	r3, r3, #3
 800d2e2:	440b      	add	r3, r1
 800d2e4:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumEps = 3;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d2f2:	68f9      	ldr	r1, [r7, #12]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	00db      	lsls	r3, r3, #3
 800d2f8:	1a9b      	subs	r3, r3, r2
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	440b      	add	r3, r1
 800d2fe:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800d302:	2203      	movs	r2, #3
 800d304:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].add = CDC_CMD_EP;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d30c:	68f9      	ldr	r1, [r7, #12]
 800d30e:	4613      	mov	r3, r2
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	1a9b      	subs	r3, r3, r2
 800d314:	00db      	lsls	r3, r3, #3
 800d316:	440b      	add	r3, r1
 800d318:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800d31c:	2282      	movs	r2, #130	; 0x82
 800d31e:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].type = USBD_EP_TYPE_INTR;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d326:	68f9      	ldr	r1, [r7, #12]
 800d328:	4613      	mov	r3, r2
 800d32a:	00db      	lsls	r3, r3, #3
 800d32c:	1a9b      	subs	r3, r3, r2
 800d32e:	00db      	lsls	r3, r3, #3
 800d330:	440b      	add	r3, r1
 800d332:	f203 3311 	addw	r3, r3, #785	; 0x311
 800d336:	2203      	movs	r2, #3
 800d338:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].size = CDC_CMD_PACKET_SIZE;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d340:	68f9      	ldr	r1, [r7, #12]
 800d342:	4613      	mov	r3, r2
 800d344:	00db      	lsls	r3, r3, #3
 800d346:	1a9b      	subs	r3, r3, r2
 800d348:	00db      	lsls	r3, r3, #3
 800d34a:	440b      	add	r3, r1
 800d34c:	f203 3312 	addw	r3, r3, #786	; 0x312
 800d350:	2208      	movs	r2, #8
 800d352:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].is_used = 1U;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d35a:	68f9      	ldr	r1, [r7, #12]
 800d35c:	4613      	mov	r3, r2
 800d35e:	00db      	lsls	r3, r3, #3
 800d360:	1a9b      	subs	r3, r3, r2
 800d362:	00db      	lsls	r3, r3, #3
 800d364:	440b      	add	r3, r1
 800d366:	f203 3313 	addw	r3, r3, #787	; 0x313
 800d36a:	2201      	movs	r2, #1
 800d36c:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].add = CDC_OUT_EP;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d374:	68f9      	ldr	r1, [r7, #12]
 800d376:	4613      	mov	r3, r2
 800d378:	00db      	lsls	r3, r3, #3
 800d37a:	1a9b      	subs	r3, r3, r2
 800d37c:	00db      	lsls	r3, r3, #3
 800d37e:	440b      	add	r3, r1
 800d380:	f503 7345 	add.w	r3, r3, #788	; 0x314
 800d384:	2201      	movs	r2, #1
 800d386:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].type = USBD_EP_TYPE_BULK;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d38e:	68f9      	ldr	r1, [r7, #12]
 800d390:	4613      	mov	r3, r2
 800d392:	00db      	lsls	r3, r3, #3
 800d394:	1a9b      	subs	r3, r3, r2
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	440b      	add	r3, r1
 800d39a:	f203 3315 	addw	r3, r3, #789	; 0x315
 800d39e:	2202      	movs	r2, #2
 800d3a0:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].size = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d3a8:	68f9      	ldr	r1, [r7, #12]
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	1a9b      	subs	r3, r3, r2
 800d3b0:	00db      	lsls	r3, r3, #3
 800d3b2:	440b      	add	r3, r1
 800d3b4:	f203 3316 	addw	r3, r3, #790	; 0x316
 800d3b8:	2240      	movs	r2, #64	; 0x40
 800d3ba:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].is_used = 1U;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d3c2:	68f9      	ldr	r1, [r7, #12]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	1a9b      	subs	r3, r3, r2
 800d3ca:	00db      	lsls	r3, r3, #3
 800d3cc:	440b      	add	r3, r1
 800d3ce:	f203 3317 	addw	r3, r3, #791	; 0x317
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].add = CDC_IN_EP;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d3dc:	68f9      	ldr	r1, [r7, #12]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	00db      	lsls	r3, r3, #3
 800d3e2:	1a9b      	subs	r3, r3, r2
 800d3e4:	00db      	lsls	r3, r3, #3
 800d3e6:	440b      	add	r3, r1
 800d3e8:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800d3ec:	2281      	movs	r2, #129	; 0x81
 800d3ee:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].type = USBD_EP_TYPE_BULK;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d3f6:	68f9      	ldr	r1, [r7, #12]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	00db      	lsls	r3, r3, #3
 800d3fc:	1a9b      	subs	r3, r3, r2
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	440b      	add	r3, r1
 800d402:	f203 3319 	addw	r3, r3, #793	; 0x319
 800d406:	2202      	movs	r2, #2
 800d408:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].size = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d410:	68f9      	ldr	r1, [r7, #12]
 800d412:	4613      	mov	r3, r2
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	1a9b      	subs	r3, r3, r2
 800d418:	00db      	lsls	r3, r3, #3
 800d41a:	440b      	add	r3, r1
 800d41c:	f203 331a 	addw	r3, r3, #794	; 0x31a
 800d420:	2240      	movs	r2, #64	; 0x40
 800d422:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].is_used = 1U;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d42a:	68f9      	ldr	r1, [r7, #12]
 800d42c:	4613      	mov	r3, r2
 800d42e:	00db      	lsls	r3, r3, #3
 800d430:	1a9b      	subs	r3, r3, r2
 800d432:	00db      	lsls	r3, r3, #3
 800d434:	440b      	add	r3, r1
 800d436:	f203 331b 	addw	r3, r3, #795	; 0x31b
 800d43a:	2201      	movs	r2, #1
 800d43c:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumIf = 2;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d444:	68f9      	ldr	r1, [r7, #12]
 800d446:	4613      	mov	r3, r2
 800d448:	00db      	lsls	r3, r3, #3
 800d44a:	1a9b      	subs	r3, r3, r2
 800d44c:	00db      	lsls	r3, r3, #3
 800d44e:	440b      	add	r3, r1
 800d450:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800d454:	2202      	movs	r2, #2
 800d456:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[0] = 0;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d45e:	68f9      	ldr	r1, [r7, #12]
 800d460:	4613      	mov	r3, r2
 800d462:	00db      	lsls	r3, r3, #3
 800d464:	1a9b      	subs	r3, r3, r2
 800d466:	00db      	lsls	r3, r3, #3
 800d468:	440b      	add	r3, r1
 800d46a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800d46e:	2200      	movs	r2, #0
 800d470:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[1] = 1;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d478:	68f9      	ldr	r1, [r7, #12]
 800d47a:	4613      	mov	r3, r2
 800d47c:	00db      	lsls	r3, r3, #3
 800d47e:	1a9b      	subs	r3, r3, r2
 800d480:	00db      	lsls	r3, r3, #3
 800d482:	440b      	add	r3, r1
 800d484:	f203 332d 	addw	r3, r3, #813	; 0x32d
 800d488:	2201      	movs	r2, #1
 800d48a:	701a      	strb	r2, [r3, #0]
		}break;
 800d48c:	e0a9      	b.n	800d5e2 <USBD_CMPSIT_AddClass+0x34e>
			pdev->tclasslist[pdev->classId].ClassType = CLASS_TYPE_MSC;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d494:	68f9      	ldr	r1, [r7, #12]
 800d496:	4613      	mov	r3, r2
 800d498:	00db      	lsls	r3, r3, #3
 800d49a:	1a9b      	subs	r3, r3, r2
 800d49c:	00db      	lsls	r3, r3, #3
 800d49e:	440b      	add	r3, r1
 800d4a0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d4a4:	2203      	movs	r2, #3
 800d4a6:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Active = 1U;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d4ae:	68f9      	ldr	r1, [r7, #12]
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	00db      	lsls	r3, r3, #3
 800d4b4:	1a9b      	subs	r3, r3, r2
 800d4b6:	00db      	lsls	r3, r3, #3
 800d4b8:	440b      	add	r3, r1
 800d4ba:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800d4be:	2201      	movs	r2, #1
 800d4c0:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumEps = 2;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d4c8:	68f9      	ldr	r1, [r7, #12]
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	00db      	lsls	r3, r3, #3
 800d4ce:	1a9b      	subs	r3, r3, r2
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	440b      	add	r3, r1
 800d4d4:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800d4d8:	2202      	movs	r2, #2
 800d4da:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].add = MSC_EPIN_ADDR;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d4e2:	68f9      	ldr	r1, [r7, #12]
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	1a9b      	subs	r3, r3, r2
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	440b      	add	r3, r1
 800d4ee:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800d4f2:	2283      	movs	r2, #131	; 0x83
 800d4f4:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].type = USBD_EP_TYPE_BULK;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d4fc:	68f9      	ldr	r1, [r7, #12]
 800d4fe:	4613      	mov	r3, r2
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	1a9b      	subs	r3, r3, r2
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	440b      	add	r3, r1
 800d508:	f203 3311 	addw	r3, r3, #785	; 0x311
 800d50c:	2202      	movs	r2, #2
 800d50e:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].size = MSC_MAX_FS_PACKET;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d516:	68f9      	ldr	r1, [r7, #12]
 800d518:	4613      	mov	r3, r2
 800d51a:	00db      	lsls	r3, r3, #3
 800d51c:	1a9b      	subs	r3, r3, r2
 800d51e:	00db      	lsls	r3, r3, #3
 800d520:	440b      	add	r3, r1
 800d522:	f203 3312 	addw	r3, r3, #786	; 0x312
 800d526:	2240      	movs	r2, #64	; 0x40
 800d528:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].is_used = 1U;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d530:	68f9      	ldr	r1, [r7, #12]
 800d532:	4613      	mov	r3, r2
 800d534:	00db      	lsls	r3, r3, #3
 800d536:	1a9b      	subs	r3, r3, r2
 800d538:	00db      	lsls	r3, r3, #3
 800d53a:	440b      	add	r3, r1
 800d53c:	f203 3313 	addw	r3, r3, #787	; 0x313
 800d540:	2201      	movs	r2, #1
 800d542:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].add = MSC_EPOUT_ADDR;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d54a:	68f9      	ldr	r1, [r7, #12]
 800d54c:	4613      	mov	r3, r2
 800d54e:	00db      	lsls	r3, r3, #3
 800d550:	1a9b      	subs	r3, r3, r2
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	440b      	add	r3, r1
 800d556:	f503 7345 	add.w	r3, r3, #788	; 0x314
 800d55a:	2203      	movs	r2, #3
 800d55c:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].type = USBD_EP_TYPE_BULK;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d564:	68f9      	ldr	r1, [r7, #12]
 800d566:	4613      	mov	r3, r2
 800d568:	00db      	lsls	r3, r3, #3
 800d56a:	1a9b      	subs	r3, r3, r2
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	440b      	add	r3, r1
 800d570:	f203 3315 	addw	r3, r3, #789	; 0x315
 800d574:	2202      	movs	r2, #2
 800d576:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].size = MSC_MAX_FS_PACKET;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d57e:	68f9      	ldr	r1, [r7, #12]
 800d580:	4613      	mov	r3, r2
 800d582:	00db      	lsls	r3, r3, #3
 800d584:	1a9b      	subs	r3, r3, r2
 800d586:	00db      	lsls	r3, r3, #3
 800d588:	440b      	add	r3, r1
 800d58a:	f203 3316 	addw	r3, r3, #790	; 0x316
 800d58e:	2240      	movs	r2, #64	; 0x40
 800d590:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].is_used = 1U;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d598:	68f9      	ldr	r1, [r7, #12]
 800d59a:	4613      	mov	r3, r2
 800d59c:	00db      	lsls	r3, r3, #3
 800d59e:	1a9b      	subs	r3, r3, r2
 800d5a0:	00db      	lsls	r3, r3, #3
 800d5a2:	440b      	add	r3, r1
 800d5a4:	f203 3317 	addw	r3, r3, #791	; 0x317
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumIf = 1;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d5b2:	68f9      	ldr	r1, [r7, #12]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	00db      	lsls	r3, r3, #3
 800d5b8:	1a9b      	subs	r3, r3, r2
 800d5ba:	00db      	lsls	r3, r3, #3
 800d5bc:	440b      	add	r3, r1
 800d5be:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[0] = 2;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d5cc:	68f9      	ldr	r1, [r7, #12]
 800d5ce:	4613      	mov	r3, r2
 800d5d0:	00db      	lsls	r3, r3, #3
 800d5d2:	1a9b      	subs	r3, r3, r2
 800d5d4:	00db      	lsls	r3, r3, #3
 800d5d6:	440b      	add	r3, r1
 800d5d8:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800d5dc:	2202      	movs	r2, #2
 800d5de:	701a      	strb	r2, [r3, #0]
		}break;
 800d5e0:	bf00      	nop
	}
	pdev->tclasslist[pdev->classId].CurrPcktSze = 0U;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d5e8:	68f9      	ldr	r1, [r7, #12]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	1a9b      	subs	r3, r3, r2
 800d5f0:	00db      	lsls	r3, r3, #3
 800d5f2:	440b      	add	r3, r1
 800d5f4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3714      	adds	r7, #20
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr
	...

0800d60c <USBD_CMPSIT_GetFSCfgDesc>:
  *         return configuration descriptor for both FS and HS modes
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetFSCfgDesc(uint16_t *length)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 800d614:	4b05      	ldr	r3, [pc, #20]	; (800d62c <USBD_CMPSIT_GetFSCfgDesc+0x20>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	b29a      	uxth	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_FSCfgDesc;
 800d61e:	4b04      	ldr	r3, [pc, #16]	; (800d630 <USBD_CMPSIT_GetFSCfgDesc+0x24>)
}
 800d620:	4618      	mov	r0, r3
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr
 800d62c:	24000104 	.word	0x24000104
 800d630:	24000098 	.word	0x24000098

0800d634 <USBD_CMPSIT_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 800d63c:	4b05      	ldr	r3, [pc, #20]	; (800d654 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x20>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	b29a      	uxth	r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_FSCfgDesc;
 800d646:	4b04      	ldr	r3, [pc, #16]	; (800d658 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x24>)
}
 800d648:	4618      	mov	r0, r3
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr
 800d654:	24000104 	.word	0x24000104
 800d658:	24000098 	.word	0x24000098

0800d65c <USBD_CMPSIT_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)(sizeof(USBD_CMPSIT_DeviceQualifierDesc));
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	220a      	movs	r2, #10
 800d668:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_DeviceQualifierDesc;
 800d66a:	4b03      	ldr	r3, [pc, #12]	; (800d678 <USBD_CMPSIT_GetDeviceQualifierDescriptor+0x1c>)
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	24000108 	.word	0x24000108

0800d67c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	460b      	mov	r3, r1
 800d686:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d688:	f248 0074 	movw	r0, #32884	; 0x8074
 800d68c:	f008 fcb2 	bl	8015ff4 <malloc>
 800d690:	4603      	mov	r3, r0
 800d692:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10a      	bne.n	800d6b0 <USBD_MSC_Init+0x34>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	33b2      	adds	r3, #178	; 0xb2
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	e08a      	b.n	800d7c6 <USBD_MSC_Init+0x14a>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	33b2      	adds	r3, #178	; 0xb2
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	4413      	add	r3, r2
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	33b2      	adds	r3, #178	; 0xb2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	2202      	movs	r2, #2
 800d6e2:	2180      	movs	r1, #128	; 0x80
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f002 fe72 	bl	80103ce <USBD_CoreGetEPAdd>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	4b38      	ldr	r3, [pc, #224]	; (800d7d0 <USBD_MSC_Init+0x154>)
 800d6f0:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f002 fe65 	bl	80103ce <USBD_CoreGetEPAdd>
 800d704:	4603      	mov	r3, r0
 800d706:	461a      	mov	r2, r3
 800d708:	4b32      	ldr	r3, [pc, #200]	; (800d7d4 <USBD_MSC_Init+0x158>)
 800d70a:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	7c1b      	ldrb	r3, [r3, #16]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d12b      	bne.n	800d76c <USBD_MSC_Init+0xf0>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d714:	4b2f      	ldr	r3, [pc, #188]	; (800d7d4 <USBD_MSC_Init+0x158>)
 800d716:	7819      	ldrb	r1, [r3, #0]
 800d718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d71c:	2202      	movs	r2, #2
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f008 fad3 	bl	8015cca <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d724:	4b2b      	ldr	r3, [pc, #172]	; (800d7d4 <USBD_MSC_Init+0x158>)
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	f003 020f 	and.w	r2, r3, #15
 800d72c:	6879      	ldr	r1, [r7, #4]
 800d72e:	4613      	mov	r3, r2
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4413      	add	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	440b      	add	r3, r1
 800d738:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d73c:	2201      	movs	r2, #1
 800d73e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d740:	4b23      	ldr	r3, [pc, #140]	; (800d7d0 <USBD_MSC_Init+0x154>)
 800d742:	7819      	ldrb	r1, [r3, #0]
 800d744:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d748:	2202      	movs	r2, #2
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f008 fabd 	bl	8015cca <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d750:	4b1f      	ldr	r3, [pc, #124]	; (800d7d0 <USBD_MSC_Init+0x154>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	f003 020f 	and.w	r2, r3, #15
 800d758:	6879      	ldr	r1, [r7, #4]
 800d75a:	4613      	mov	r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4413      	add	r3, r2
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	440b      	add	r3, r1
 800d764:	3324      	adds	r3, #36	; 0x24
 800d766:	2201      	movs	r2, #1
 800d768:	801a      	strh	r2, [r3, #0]
 800d76a:	e028      	b.n	800d7be <USBD_MSC_Init+0x142>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d76c:	4b19      	ldr	r3, [pc, #100]	; (800d7d4 <USBD_MSC_Init+0x158>)
 800d76e:	7819      	ldrb	r1, [r3, #0]
 800d770:	2340      	movs	r3, #64	; 0x40
 800d772:	2202      	movs	r2, #2
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f008 faa8 	bl	8015cca <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d77a:	4b16      	ldr	r3, [pc, #88]	; (800d7d4 <USBD_MSC_Init+0x158>)
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	f003 020f 	and.w	r2, r3, #15
 800d782:	6879      	ldr	r1, [r7, #4]
 800d784:	4613      	mov	r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	4413      	add	r3, r2
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	440b      	add	r3, r1
 800d78e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d792:	2201      	movs	r2, #1
 800d794:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d796:	4b0e      	ldr	r3, [pc, #56]	; (800d7d0 <USBD_MSC_Init+0x154>)
 800d798:	7819      	ldrb	r1, [r3, #0]
 800d79a:	2340      	movs	r3, #64	; 0x40
 800d79c:	2202      	movs	r2, #2
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f008 fa93 	bl	8015cca <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d7a4:	4b0a      	ldr	r3, [pc, #40]	; (800d7d0 <USBD_MSC_Init+0x154>)
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	f003 020f 	and.w	r2, r3, #15
 800d7ac:	6879      	ldr	r1, [r7, #4]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	440b      	add	r3, r1
 800d7b8:	3324      	adds	r3, #36	; 0x24
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f9d4 	bl	800db6c <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	2400014c 	.word	0x2400014c
 800d7d4:	2400014d 	.word	0x2400014d

0800d7d8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	2180      	movs	r1, #128	; 0x80
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f002 fdec 	bl	80103ce <USBD_CoreGetEPAdd>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	4b30      	ldr	r3, [pc, #192]	; (800d8bc <USBD_MSC_DeInit+0xe4>)
 800d7fc:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2202      	movs	r2, #2
 800d808:	2100      	movs	r1, #0
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f002 fddf 	bl	80103ce <USBD_CoreGetEPAdd>
 800d810:	4603      	mov	r3, r0
 800d812:	461a      	mov	r2, r3
 800d814:	4b2a      	ldr	r3, [pc, #168]	; (800d8c0 <USBD_MSC_DeInit+0xe8>)
 800d816:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800d818:	4b29      	ldr	r3, [pc, #164]	; (800d8c0 <USBD_MSC_DeInit+0xe8>)
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	4619      	mov	r1, r3
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f008 fa79 	bl	8015d16 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800d824:	4b26      	ldr	r3, [pc, #152]	; (800d8c0 <USBD_MSC_DeInit+0xe8>)
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	f003 020f 	and.w	r2, r3, #15
 800d82c:	6879      	ldr	r1, [r7, #4]
 800d82e:	4613      	mov	r3, r2
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	4413      	add	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	440b      	add	r3, r1
 800d838:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d83c:	2200      	movs	r2, #0
 800d83e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800d840:	4b1e      	ldr	r3, [pc, #120]	; (800d8bc <USBD_MSC_DeInit+0xe4>)
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	4619      	mov	r1, r3
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f008 fa65 	bl	8015d16 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800d84c:	4b1b      	ldr	r3, [pc, #108]	; (800d8bc <USBD_MSC_DeInit+0xe4>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	f003 020f 	and.w	r2, r3, #15
 800d854:	6879      	ldr	r1, [r7, #4]
 800d856:	4613      	mov	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4413      	add	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	440b      	add	r3, r1
 800d860:	3324      	adds	r3, #36	; 0x24
 800d862:	2200      	movs	r2, #0
 800d864:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	33b2      	adds	r3, #178	; 0xb2
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4413      	add	r3, r2
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d01a      	beq.n	800d8b0 <USBD_MSC_DeInit+0xd8>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 fa32 	bl	800dce4 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	33b2      	adds	r3, #178	; 0xb2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	4618      	mov	r0, r3
 800d892:	f008 fbb7 	bl	8016004 <free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	33b2      	adds	r3, #178	; 0xb2
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	4413      	add	r3, r2
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  }

  return (uint8_t)USBD_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	2400014c 	.word	0x2400014c
 800d8c0:	2400014d 	.word	0x2400014d

0800d8c4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	33b2      	adds	r3, #178	; 0xb2
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	81fb      	strh	r3, [r7, #14]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	2180      	movs	r1, #128	; 0x80
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f002 fd6a 	bl	80103ce <USBD_CoreGetEPAdd>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	4b7c      	ldr	r3, [pc, #496]	; (800daf0 <USBD_MSC_Setup+0x22c>)
 800d900:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	2202      	movs	r2, #2
 800d90c:	2100      	movs	r1, #0
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f002 fd5d 	bl	80103ce <USBD_CoreGetEPAdd>
 800d914:	4603      	mov	r3, r0
 800d916:	461a      	mov	r2, r3
 800d918:	4b76      	ldr	r3, [pc, #472]	; (800daf4 <USBD_MSC_Setup+0x230>)
 800d91a:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <USBD_MSC_Setup+0x62>
  {
    return (uint8_t)USBD_FAIL;
 800d922:	2303      	movs	r3, #3
 800d924:	e0e0      	b.n	800dae8 <USBD_MSC_Setup+0x224>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d053      	beq.n	800d9da <USBD_MSC_Setup+0x116>
 800d932:	2b20      	cmp	r3, #32
 800d934:	f040 80d0 	bne.w	800dad8 <USBD_MSC_Setup+0x214>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	785b      	ldrb	r3, [r3, #1]
 800d93c:	2bfe      	cmp	r3, #254	; 0xfe
 800d93e:	d002      	beq.n	800d946 <USBD_MSC_Setup+0x82>
 800d940:	2bff      	cmp	r3, #255	; 0xff
 800d942:	d02a      	beq.n	800d99a <USBD_MSC_Setup+0xd6>
 800d944:	e041      	b.n	800d9ca <USBD_MSC_Setup+0x106>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	885b      	ldrh	r3, [r3, #2]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d11e      	bne.n	800d98c <USBD_MSC_Setup+0xc8>
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	88db      	ldrh	r3, [r3, #6]
 800d952:	2b01      	cmp	r3, #1
 800d954:	d11a      	bne.n	800d98c <USBD_MSC_Setup+0xc8>
              ((req->bmRequest & 0x80U) == 0x80U))
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	da15      	bge.n	800d98c <USBD_MSC_Setup+0xc8>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	33b6      	adds	r3, #182	; 0xb6
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4413      	add	r3, r2
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	4798      	blx	r3
 800d974:	4603      	mov	r3, r0
 800d976:	461a      	mov	r2, r3
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	2201      	movs	r2, #1
 800d980:	4619      	mov	r1, r3
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f003 fc3a 	bl	80111fc <USBD_CtlSendData>
 800d988:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d98a:	e025      	b.n	800d9d8 <USBD_MSC_Setup+0x114>
            USBD_CtlError(pdev, req);
 800d98c:	6839      	ldr	r1, [r7, #0]
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f003 fbc3 	bl	801111a <USBD_CtlError>
            ret = USBD_FAIL;
 800d994:	2303      	movs	r3, #3
 800d996:	75fb      	strb	r3, [r7, #23]
          break;
 800d998:	e01e      	b.n	800d9d8 <USBD_MSC_Setup+0x114>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	885b      	ldrh	r3, [r3, #2]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d10c      	bne.n	800d9bc <USBD_MSC_Setup+0xf8>
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	88db      	ldrh	r3, [r3, #6]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d108      	bne.n	800d9bc <USBD_MSC_Setup+0xf8>
              ((req->bmRequest & 0x80U) != 0x80U))
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	db03      	blt.n	800d9bc <USBD_MSC_Setup+0xf8>
          {
            MSC_BOT_Reset(pdev);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 f945 	bl	800dc44 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d9ba:	e00d      	b.n	800d9d8 <USBD_MSC_Setup+0x114>
            USBD_CtlError(pdev, req);
 800d9bc:	6839      	ldr	r1, [r7, #0]
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f003 fbab 	bl	801111a <USBD_CtlError>
            ret = USBD_FAIL;
 800d9c4:	2303      	movs	r3, #3
 800d9c6:	75fb      	strb	r3, [r7, #23]
          break;
 800d9c8:	e006      	b.n	800d9d8 <USBD_MSC_Setup+0x114>

        default:
          USBD_CtlError(pdev, req);
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f003 fba4 	bl	801111a <USBD_CtlError>
          ret = USBD_FAIL;
 800d9d2:	2303      	movs	r3, #3
 800d9d4:	75fb      	strb	r3, [r7, #23]
          break;
 800d9d6:	bf00      	nop
      }
      break;
 800d9d8:	e085      	b.n	800dae6 <USBD_MSC_Setup+0x222>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	785b      	ldrb	r3, [r3, #1]
 800d9de:	2b0b      	cmp	r3, #11
 800d9e0:	d871      	bhi.n	800dac6 <USBD_MSC_Setup+0x202>
 800d9e2:	a201      	add	r2, pc, #4	; (adr r2, 800d9e8 <USBD_MSC_Setup+0x124>)
 800d9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e8:	0800da19 	.word	0x0800da19
 800d9ec:	0800da95 	.word	0x0800da95
 800d9f0:	0800dac7 	.word	0x0800dac7
 800d9f4:	0800dac7 	.word	0x0800dac7
 800d9f8:	0800dac7 	.word	0x0800dac7
 800d9fc:	0800dac7 	.word	0x0800dac7
 800da00:	0800dac7 	.word	0x0800dac7
 800da04:	0800dac7 	.word	0x0800dac7
 800da08:	0800dac7 	.word	0x0800dac7
 800da0c:	0800dac7 	.word	0x0800dac7
 800da10:	0800da43 	.word	0x0800da43
 800da14:	0800da6d 	.word	0x0800da6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	2b03      	cmp	r3, #3
 800da22:	d107      	bne.n	800da34 <USBD_MSC_Setup+0x170>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800da24:	f107 030e 	add.w	r3, r7, #14
 800da28:	2202      	movs	r2, #2
 800da2a:	4619      	mov	r1, r3
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f003 fbe5 	bl	80111fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da32:	e050      	b.n	800dad6 <USBD_MSC_Setup+0x212>
            USBD_CtlError(pdev, req);
 800da34:	6839      	ldr	r1, [r7, #0]
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f003 fb6f 	bl	801111a <USBD_CtlError>
            ret = USBD_FAIL;
 800da3c:	2303      	movs	r3, #3
 800da3e:	75fb      	strb	r3, [r7, #23]
          break;
 800da40:	e049      	b.n	800dad6 <USBD_MSC_Setup+0x212>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	2b03      	cmp	r3, #3
 800da4c:	d107      	bne.n	800da5e <USBD_MSC_Setup+0x19a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	3304      	adds	r3, #4
 800da52:	2201      	movs	r2, #1
 800da54:	4619      	mov	r1, r3
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f003 fbd0 	bl	80111fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da5c:	e03b      	b.n	800dad6 <USBD_MSC_Setup+0x212>
            USBD_CtlError(pdev, req);
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f003 fb5a 	bl	801111a <USBD_CtlError>
            ret = USBD_FAIL;
 800da66:	2303      	movs	r3, #3
 800da68:	75fb      	strb	r3, [r7, #23]
          break;
 800da6a:	e034      	b.n	800dad6 <USBD_MSC_Setup+0x212>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b03      	cmp	r3, #3
 800da76:	d106      	bne.n	800da86 <USBD_MSC_Setup+0x1c2>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	885b      	ldrh	r3, [r3, #2]
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	461a      	mov	r2, r3
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da84:	e027      	b.n	800dad6 <USBD_MSC_Setup+0x212>
            USBD_CtlError(pdev, req);
 800da86:	6839      	ldr	r1, [r7, #0]
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f003 fb46 	bl	801111a <USBD_CtlError>
            ret = USBD_FAIL;
 800da8e:	2303      	movs	r3, #3
 800da90:	75fb      	strb	r3, [r7, #23]
          break;
 800da92:	e020      	b.n	800dad6 <USBD_MSC_Setup+0x212>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	2b03      	cmp	r3, #3
 800da9e:	d119      	bne.n	800dad4 <USBD_MSC_Setup+0x210>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	885b      	ldrh	r3, [r3, #2]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d115      	bne.n	800dad4 <USBD_MSC_Setup+0x210>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	889b      	ldrh	r3, [r3, #4]
 800daac:	b2db      	uxtb	r3, r3
 800daae:	4619      	mov	r1, r3
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f008 f94f 	bl	8015d54 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	889b      	ldrh	r3, [r3, #4]
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 fb6e 	bl	800e1a0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800dac4:	e006      	b.n	800dad4 <USBD_MSC_Setup+0x210>

        default:
          USBD_CtlError(pdev, req);
 800dac6:	6839      	ldr	r1, [r7, #0]
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f003 fb26 	bl	801111a <USBD_CtlError>
          ret = USBD_FAIL;
 800dace:	2303      	movs	r3, #3
 800dad0:	75fb      	strb	r3, [r7, #23]
          break;
 800dad2:	e000      	b.n	800dad6 <USBD_MSC_Setup+0x212>
          break;
 800dad4:	bf00      	nop
      }
      break;
 800dad6:	e006      	b.n	800dae6 <USBD_MSC_Setup+0x222>

    default:
      USBD_CtlError(pdev, req);
 800dad8:	6839      	ldr	r1, [r7, #0]
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f003 fb1d 	bl	801111a <USBD_CtlError>
      ret = USBD_FAIL;
 800dae0:	2303      	movs	r3, #3
 800dae2:	75fb      	strb	r3, [r7, #23]
      break;
 800dae4:	bf00      	nop
  }

  return (uint8_t)ret;
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3718      	adds	r7, #24
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	2400014c 	.word	0x2400014c
 800daf4:	2400014d 	.word	0x2400014d

0800daf8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	460b      	mov	r3, r1
 800db02:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800db04:	78fb      	ldrb	r3, [r7, #3]
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 f904 	bl	800dd16 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800db0e:	2300      	movs	r3, #0
}
 800db10:	4618      	mov	r0, r3
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	460b      	mov	r3, r1
 800db22:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800db24:	78fb      	ldrb	r3, [r7, #3]
 800db26:	4619      	mov	r1, r3
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f931 	bl	800dd90 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d101      	bne.n	800db4c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800db48:	2303      	movs	r3, #3
 800db4a:	e009      	b.n	800db60 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	33b6      	adds	r3, #182	; 0xb6
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	4413      	add	r3, r2
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	33b2      	adds	r3, #178	; 0xb2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4413      	add	r3, r2
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	2202      	movs	r2, #2
 800db90:	2180      	movs	r1, #128	; 0x80
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f002 fc1b 	bl	80103ce <USBD_CoreGetEPAdd>
 800db98:	4603      	mov	r3, r0
 800db9a:	461a      	mov	r2, r3
 800db9c:	4b27      	ldr	r3, [pc, #156]	; (800dc3c <MSC_BOT_Init+0xd0>)
 800db9e:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	2202      	movs	r2, #2
 800dbaa:	2100      	movs	r1, #0
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f002 fc0e 	bl	80103ce <USBD_CoreGetEPAdd>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	4b22      	ldr	r3, [pc, #136]	; (800dc40 <MSC_BOT_Init+0xd4>)
 800dbb8:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d039      	beq.n	800dc34 <MSC_BOT_Init+0xc8>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dbea:	2200      	movs	r2, #0
 800dbec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	33b6      	adds	r3, #182	; 0xb6
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4413      	add	r3, r2
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2000      	movs	r0, #0
 800dc04:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800dc06:	4b0e      	ldr	r3, [pc, #56]	; (800dc40 <MSC_BOT_Init+0xd4>)
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f008 f8a1 	bl	8015d54 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800dc12:	4b0a      	ldr	r3, [pc, #40]	; (800dc3c <MSC_BOT_Init+0xd0>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	4619      	mov	r1, r3
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f008 f89b 	bl	8015d54 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800dc1e:	4b08      	ldr	r3, [pc, #32]	; (800dc40 <MSC_BOT_Init+0xd4>)
 800dc20:	7819      	ldrb	r1, [r3, #0]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f248 0210 	movw	r2, #32784	; 0x8010
 800dc28:	441a      	add	r2, r3
 800dc2a:	231f      	movs	r3, #31
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f008 f95a 	bl	8015ee6 <USBD_LL_PrepareReceive>
 800dc32:	e000      	b.n	800dc36 <MSC_BOT_Init+0xca>
    return;
 800dc34:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	2400014c 	.word	0x2400014c
 800dc40:	2400014d 	.word	0x2400014d

0800dc44 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	33b2      	adds	r3, #178	; 0xb2
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	4413      	add	r3, r2
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2202      	movs	r2, #2
 800dc68:	2180      	movs	r1, #128	; 0x80
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f002 fbaf 	bl	80103ce <USBD_CoreGetEPAdd>
 800dc70:	4603      	mov	r3, r0
 800dc72:	461a      	mov	r2, r3
 800dc74:	4b19      	ldr	r3, [pc, #100]	; (800dcdc <MSC_BOT_Reset+0x98>)
 800dc76:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	2202      	movs	r2, #2
 800dc82:	2100      	movs	r1, #0
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f002 fba2 	bl	80103ce <USBD_CoreGetEPAdd>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	4b14      	ldr	r3, [pc, #80]	; (800dce0 <MSC_BOT_Reset+0x9c>)
 800dc90:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d01c      	beq.n	800dcd2 <MSC_BOT_Reset+0x8e>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2201      	movs	r2, #1
 800dca2:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800dca4:	4b0d      	ldr	r3, [pc, #52]	; (800dcdc <MSC_BOT_Reset+0x98>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	4619      	mov	r1, r3
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f008 f890 	bl	8015dd0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800dcb0:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <MSC_BOT_Reset+0x9c>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f008 f88a 	bl	8015dd0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800dcbc:	4b08      	ldr	r3, [pc, #32]	; (800dce0 <MSC_BOT_Reset+0x9c>)
 800dcbe:	7819      	ldrb	r1, [r3, #0]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f248 0210 	movw	r2, #32784	; 0x8010
 800dcc6:	441a      	add	r2, r3
 800dcc8:	231f      	movs	r3, #31
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f008 f90b 	bl	8015ee6 <USBD_LL_PrepareReceive>
 800dcd0:	e000      	b.n	800dcd4 <MSC_BOT_Reset+0x90>
    return;
 800dcd2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	2400014c 	.word	0x2400014c
 800dce0:	2400014d 	.word	0x2400014d

0800dce4 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	33b2      	adds	r3, #178	; 0xb2
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4413      	add	r3, r2
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d002      	beq.n	800dd0a <MSC_BOT_DeInit+0x26>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2200      	movs	r2, #0
 800dd08:	721a      	strb	r2, [r3, #8]
  }
}
 800dd0a:	bf00      	nop
 800dd0c:	3714      	adds	r7, #20
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr

0800dd16 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b084      	sub	sp, #16
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	460b      	mov	r3, r1
 800dd20:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	33b2      	adds	r3, #178	; 0xb2
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	4413      	add	r3, r2
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d022      	beq.n	800dd80 <MSC_BOT_DataIn+0x6a>
  {
    return;
  }

  switch (hmsc->bot_state)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	7a1b      	ldrb	r3, [r3, #8]
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d005      	beq.n	800dd4e <MSC_BOT_DataIn+0x38>
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	db1e      	blt.n	800dd84 <MSC_BOT_DataIn+0x6e>
 800dd46:	3b03      	subs	r3, #3
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d81b      	bhi.n	800dd84 <MSC_BOT_DataIn+0x6e>
 800dd4c:	e013      	b.n	800dd76 <MSC_BOT_DataIn+0x60>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dd54:	7f59      	ldrb	r1, [r3, #29]
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	f248 031f 	movw	r3, #32799	; 0x801f
 800dd5c:	4413      	add	r3, r2
 800dd5e:	461a      	mov	r2, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 fa71 	bl	800e248 <SCSI_ProcessCmd>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	da0d      	bge.n	800dd88 <MSC_BOT_DataIn+0x72>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dd6c:	2101      	movs	r1, #1
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f95a 	bl	800e028 <MSC_BOT_SendCSW>
      }
      break;
 800dd74:	e008      	b.n	800dd88 <MSC_BOT_DataIn+0x72>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800dd76:	2100      	movs	r1, #0
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 f955 	bl	800e028 <MSC_BOT_SendCSW>
      break;
 800dd7e:	e004      	b.n	800dd8a <MSC_BOT_DataIn+0x74>
    return;
 800dd80:	bf00      	nop
 800dd82:	e002      	b.n	800dd8a <MSC_BOT_DataIn+0x74>

    default:
      break;
 800dd84:	bf00      	nop
 800dd86:	e000      	b.n	800dd8a <MSC_BOT_DataIn+0x74>
      break;
 800dd88:	bf00      	nop
  }
}
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	33b2      	adds	r3, #178	; 0xb2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	4413      	add	r3, r2
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d01e      	beq.n	800ddf2 <MSC_BOT_DataOut+0x62>
  {
    return;
  }

  switch (hmsc->bot_state)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	7a1b      	ldrb	r3, [r3, #8]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <MSC_BOT_DataOut+0x32>
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d004      	beq.n	800ddca <MSC_BOT_DataOut+0x3a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800ddc0:	e01a      	b.n	800ddf8 <MSC_BOT_DataOut+0x68>
      MSC_BOT_CBW_Decode(pdev);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 f81c 	bl	800de00 <MSC_BOT_CBW_Decode>
      break;
 800ddc8:	e016      	b.n	800ddf8 <MSC_BOT_DataOut+0x68>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ddd0:	7f59      	ldrb	r1, [r3, #29]
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	f248 031f 	movw	r3, #32799	; 0x801f
 800ddd8:	4413      	add	r3, r2
 800ddda:	461a      	mov	r2, r3
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 fa33 	bl	800e248 <SCSI_ProcessCmd>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	da06      	bge.n	800ddf6 <MSC_BOT_DataOut+0x66>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dde8:	2101      	movs	r1, #1
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 f91c 	bl	800e028 <MSC_BOT_SendCSW>
      break;
 800ddf0:	e001      	b.n	800ddf6 <MSC_BOT_DataOut+0x66>
    return;
 800ddf2:	bf00      	nop
 800ddf4:	e000      	b.n	800ddf8 <MSC_BOT_DataOut+0x68>
      break;
 800ddf6:	bf00      	nop
  }
}
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
	...

0800de00 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	33b2      	adds	r3, #178	; 0xb2
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	4413      	add	r3, r2
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2202      	movs	r2, #2
 800de24:	2180      	movs	r1, #128	; 0x80
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f002 fad1 	bl	80103ce <USBD_CoreGetEPAdd>
 800de2c:	4603      	mov	r3, r0
 800de2e:	461a      	mov	r2, r3
 800de30:	4b4e      	ldr	r3, [pc, #312]	; (800df6c <MSC_BOT_CBW_Decode+0x16c>)
 800de32:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2202      	movs	r2, #2
 800de3e:	2100      	movs	r1, #0
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f002 fac4 	bl	80103ce <USBD_CoreGetEPAdd>
 800de46:	4603      	mov	r3, r0
 800de48:	461a      	mov	r2, r3
 800de4a:	4b49      	ldr	r3, [pc, #292]	; (800df70 <MSC_BOT_CBW_Decode+0x170>)
 800de4c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2b00      	cmp	r3, #0
 800de52:	f000 8085 	beq.w	800df60 <MSC_BOT_CBW_Decode+0x160>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800de64:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de6c:	699b      	ldr	r3, [r3, #24]
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800de74:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800de76:	4b3e      	ldr	r3, [pc, #248]	; (800df70 <MSC_BOT_CBW_Decode+0x170>)
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	4619      	mov	r1, r3
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f008 f853 	bl	8015f28 <USBD_LL_GetRxDataSize>
 800de82:	4603      	mov	r3, r0
 800de84:	2b1f      	cmp	r3, #31
 800de86:	d118      	bne.n	800deba <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de8e:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800de90:	4a38      	ldr	r2, [pc, #224]	; (800df74 <MSC_BOT_CBW_Decode+0x174>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d111      	bne.n	800deba <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de9c:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d80b      	bhi.n	800deba <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dea8:	7f9b      	ldrb	r3, [r3, #30]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d005      	beq.n	800deba <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.bCBLength > 16U))
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800deb4:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800deb6:	2b10      	cmp	r3, #16
 800deb8:	d90f      	bls.n	800deda <MSC_BOT_CBW_Decode+0xda>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dec0:	7f59      	ldrb	r1, [r3, #29]
 800dec2:	2320      	movs	r3, #32
 800dec4:	2205      	movs	r2, #5
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 fef4 	bl	800ecb4 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2202      	movs	r2, #2
 800ded0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f904 	bl	800e0e0 <MSC_BOT_Abort>
 800ded8:	e045      	b.n	800df66 <MSC_BOT_CBW_Decode+0x166>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dee0:	7f59      	ldrb	r1, [r3, #29]
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	f248 031f 	movw	r3, #32799	; 0x801f
 800dee8:	4413      	add	r3, r2
 800deea:	461a      	mov	r2, r3
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f9ab 	bl	800e248 <SCSI_ProcessCmd>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	da0c      	bge.n	800df12 <MSC_BOT_CBW_Decode+0x112>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	7a1b      	ldrb	r3, [r3, #8]
 800defc:	2b05      	cmp	r3, #5
 800defe:	d104      	bne.n	800df0a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800df00:	2101      	movs	r1, #1
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 f890 	bl	800e028 <MSC_BOT_SendCSW>
 800df08:	e02d      	b.n	800df66 <MSC_BOT_CBW_Decode+0x166>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f8e8 	bl	800e0e0 <MSC_BOT_Abort>
 800df10:	e029      	b.n	800df66 <MSC_BOT_CBW_Decode+0x166>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	7a1b      	ldrb	r3, [r3, #8]
 800df16:	2b02      	cmp	r3, #2
 800df18:	d024      	beq.n	800df64 <MSC_BOT_CBW_Decode+0x164>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d020      	beq.n	800df64 <MSC_BOT_CBW_Decode+0x164>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800df26:	2b03      	cmp	r3, #3
 800df28:	d01c      	beq.n	800df64 <MSC_BOT_CBW_Decode+0x164>
    {
      if (hmsc->bot_data_length > 0U)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d009      	beq.n	800df46 <MSC_BOT_CBW_Decode+0x146>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f103 0110 	add.w	r1, r3, #16
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	461a      	mov	r2, r3
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 f81a 	bl	800df78 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800df44:	e00f      	b.n	800df66 <MSC_BOT_CBW_Decode+0x166>
      }
      else if (hmsc->bot_data_length == 0U)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d104      	bne.n	800df58 <MSC_BOT_CBW_Decode+0x158>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800df4e:	2100      	movs	r1, #0
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 f869 	bl	800e028 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800df56:	e006      	b.n	800df66 <MSC_BOT_CBW_Decode+0x166>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f8c1 	bl	800e0e0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800df5e:	e002      	b.n	800df66 <MSC_BOT_CBW_Decode+0x166>
    return;
 800df60:	bf00      	nop
 800df62:	e000      	b.n	800df66 <MSC_BOT_CBW_Decode+0x166>
      }
    }
    else
    {
      return;
 800df64:	bf00      	nop
    }
  }
}
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	2400014c 	.word	0x2400014c
 800df70:	2400014d 	.word	0x2400014d
 800df74:	43425355 	.word	0x43425355

0800df78 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b086      	sub	sp, #24
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	33b2      	adds	r3, #178	; 0xb2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4413      	add	r3, r2
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	617b      	str	r3, [r7, #20]

  uint32_t length;

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	2202      	movs	r2, #2
 800dfa0:	2180      	movs	r1, #128	; 0x80
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f002 fa13 	bl	80103ce <USBD_CoreGetEPAdd>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	461a      	mov	r2, r3
 800dfac:	4b1c      	ldr	r3, [pc, #112]	; (800e020 <MSC_BOT_SendData+0xa8>)
 800dfae:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	2202      	movs	r2, #2
 800dfba:	2100      	movs	r1, #0
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f002 fa06 	bl	80103ce <USBD_CoreGetEPAdd>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	4b17      	ldr	r3, [pc, #92]	; (800e024 <MSC_BOT_SendData+0xac>)
 800dfc8:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d023      	beq.n	800e018 <MSC_BOT_SendData+0xa0>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dfd6:	699b      	ldr	r3, [r3, #24]
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	bf28      	it	cs
 800dfde:	4613      	movcs	r3, r2
 800dfe0:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dfe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	697a      	ldr	r2, [r7, #20]
 800dff0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800dff4:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	2204      	movs	r2, #4
 800e006:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800e008:	4b05      	ldr	r3, [pc, #20]	; (800e020 <MSC_BOT_SendData+0xa8>)
 800e00a:	7819      	ldrb	r1, [r3, #0]
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	68ba      	ldr	r2, [r7, #8]
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f007 ff47 	bl	8015ea4 <USBD_LL_Transmit>
 800e016:	e000      	b.n	800e01a <MSC_BOT_SendData+0xa2>
    return;
 800e018:	bf00      	nop
}
 800e01a:	3718      	adds	r7, #24
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	2400014c 	.word	0x2400014c
 800e024:	2400014d 	.word	0x2400014d

0800e028 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	460b      	mov	r3, r1
 800e032:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	33b2      	adds	r3, #178	; 0xb2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	4413      	add	r3, r2
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	2202      	movs	r2, #2
 800e050:	2180      	movs	r1, #128	; 0x80
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f002 f9bb 	bl	80103ce <USBD_CoreGetEPAdd>
 800e058:	4603      	mov	r3, r0
 800e05a:	461a      	mov	r2, r3
 800e05c:	4b1d      	ldr	r3, [pc, #116]	; (800e0d4 <MSC_BOT_SendCSW+0xac>)
 800e05e:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2202      	movs	r2, #2
 800e06a:	2100      	movs	r1, #0
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f002 f9ae 	bl	80103ce <USBD_CoreGetEPAdd>
 800e072:	4603      	mov	r3, r0
 800e074:	461a      	mov	r2, r3
 800e076:	4b18      	ldr	r3, [pc, #96]	; (800e0d8 <MSC_BOT_SendCSW+0xb0>)
 800e078:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d024      	beq.n	800e0ca <MSC_BOT_SendCSW+0xa2>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e086:	461a      	mov	r2, r3
 800e088:	4b14      	ldr	r3, [pc, #80]	; (800e0dc <MSC_BOT_SendCSW+0xb4>)
 800e08a:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e092:	461a      	mov	r2, r3
 800e094:	78fb      	ldrb	r3, [r7, #3]
 800e096:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2200      	movs	r2, #0
 800e09e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800e0a0:	4b0c      	ldr	r3, [pc, #48]	; (800e0d4 <MSC_BOT_SendCSW+0xac>)
 800e0a2:	7819      	ldrb	r1, [r3, #0]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f248 0230 	movw	r2, #32816	; 0x8030
 800e0aa:	441a      	add	r2, r3
 800e0ac:	230d      	movs	r3, #13
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f007 fef8 	bl	8015ea4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800e0b4:	4b08      	ldr	r3, [pc, #32]	; (800e0d8 <MSC_BOT_SendCSW+0xb0>)
 800e0b6:	7819      	ldrb	r1, [r3, #0]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f248 0210 	movw	r2, #32784	; 0x8010
 800e0be:	441a      	add	r2, r3
 800e0c0:	231f      	movs	r3, #31
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f007 ff0f 	bl	8015ee6 <USBD_LL_PrepareReceive>
 800e0c8:	e000      	b.n	800e0cc <MSC_BOT_SendCSW+0xa4>
    return;
 800e0ca:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	2400014c 	.word	0x2400014c
 800e0d8:	2400014d 	.word	0x2400014d
 800e0dc:	53425355 	.word	0x53425355

0800e0e0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	33b2      	adds	r3, #178	; 0xb2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2202      	movs	r2, #2
 800e104:	2180      	movs	r1, #128	; 0x80
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f002 f961 	bl	80103ce <USBD_CoreGetEPAdd>
 800e10c:	4603      	mov	r3, r0
 800e10e:	461a      	mov	r2, r3
 800e110:	4b21      	ldr	r3, [pc, #132]	; (800e198 <MSC_BOT_Abort+0xb8>)
 800e112:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2202      	movs	r2, #2
 800e11e:	2100      	movs	r1, #0
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f002 f954 	bl	80103ce <USBD_CoreGetEPAdd>
 800e126:	4603      	mov	r3, r0
 800e128:	461a      	mov	r2, r3
 800e12a:	4b1c      	ldr	r3, [pc, #112]	; (800e19c <MSC_BOT_Abort+0xbc>)
 800e12c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d02c      	beq.n	800e18e <MSC_BOT_Abort+0xae>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e13a:	7f1b      	ldrb	r3, [r3, #28]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10f      	bne.n	800e160 <MSC_BOT_Abort+0x80>
      (hmsc->cbw.dDataLength != 0U) &&
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e146:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d009      	beq.n	800e160 <MSC_BOT_Abort+0x80>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e150:	2b00      	cmp	r3, #0
 800e152:	d105      	bne.n	800e160 <MSC_BOT_Abort+0x80>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e154:	4b11      	ldr	r3, [pc, #68]	; (800e19c <MSC_BOT_Abort+0xbc>)
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f007 fe19 	bl	8015d92 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e160:	4b0d      	ldr	r3, [pc, #52]	; (800e198 <MSC_BOT_Abort+0xb8>)
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	4619      	mov	r1, r3
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f007 fe13 	bl	8015d92 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	7a5b      	ldrb	r3, [r3, #9]
 800e170:	2b02      	cmp	r3, #2
 800e172:	d10d      	bne.n	800e190 <MSC_BOT_Abort+0xb0>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e174:	4b08      	ldr	r3, [pc, #32]	; (800e198 <MSC_BOT_Abort+0xb8>)
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	4619      	mov	r1, r3
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f007 fe09 	bl	8015d92 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e180:	4b06      	ldr	r3, [pc, #24]	; (800e19c <MSC_BOT_Abort+0xbc>)
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	4619      	mov	r1, r3
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f007 fe03 	bl	8015d92 <USBD_LL_StallEP>
 800e18c:	e000      	b.n	800e190 <MSC_BOT_Abort+0xb0>
    return;
 800e18e:	bf00      	nop
  }
}
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	2400014c 	.word	0x2400014c
 800e19c:	2400014d 	.word	0x2400014d

0800e1a0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	33b2      	adds	r3, #178	; 0xb2
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4413      	add	r3, r2
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	2202      	movs	r2, #2
 800e1c8:	2180      	movs	r1, #128	; 0x80
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f002 f8ff 	bl	80103ce <USBD_CoreGetEPAdd>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	4b1a      	ldr	r3, [pc, #104]	; (800e240 <MSC_BOT_CplClrFeature+0xa0>)
 800e1d6:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	2202      	movs	r2, #2
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f002 f8f2 	bl	80103ce <USBD_CoreGetEPAdd>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	4b15      	ldr	r3, [pc, #84]	; (800e244 <MSC_BOT_CplClrFeature+0xa4>)
 800e1f0:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d01d      	beq.n	800e234 <MSC_BOT_CplClrFeature+0x94>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	7a5b      	ldrb	r3, [r3, #9]
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d10c      	bne.n	800e21a <MSC_BOT_CplClrFeature+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e200:	4b0f      	ldr	r3, [pc, #60]	; (800e240 <MSC_BOT_CplClrFeature+0xa0>)
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	4619      	mov	r1, r3
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f007 fdc3 	bl	8015d92 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e20c:	4b0d      	ldr	r3, [pc, #52]	; (800e244 <MSC_BOT_CplClrFeature+0xa4>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	4619      	mov	r1, r3
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f007 fdbd 	bl	8015d92 <USBD_LL_StallEP>
 800e218:	e00f      	b.n	800e23a <MSC_BOT_CplClrFeature+0x9a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e21a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	da0a      	bge.n	800e238 <MSC_BOT_CplClrFeature+0x98>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	7a5b      	ldrb	r3, [r3, #9]
 800e226:	2b01      	cmp	r3, #1
 800e228:	d006      	beq.n	800e238 <MSC_BOT_CplClrFeature+0x98>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e22a:	2101      	movs	r1, #1
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f7ff fefb 	bl	800e028 <MSC_BOT_SendCSW>
 800e232:	e002      	b.n	800e23a <MSC_BOT_CplClrFeature+0x9a>
    return;
 800e234:	bf00      	nop
 800e236:	e000      	b.n	800e23a <MSC_BOT_CplClrFeature+0x9a>
  }
  else
  {
    return;
 800e238:	bf00      	nop
  }
}
 800e23a:	3710      	adds	r7, #16
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	2400014c 	.word	0x2400014c
 800e244:	2400014d 	.word	0x2400014d

0800e248 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b086      	sub	sp, #24
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	460b      	mov	r3, r1
 800e252:	607a      	str	r2, [r7, #4]
 800e254:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	33b2      	adds	r3, #178	; 0xb2
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4413      	add	r3, r2
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d102      	bne.n	800e274 <SCSI_ProcessCmd+0x2c>
  {
    return -1;
 800e26e:	f04f 33ff 	mov.w	r3, #4294967295
 800e272:	e167      	b.n	800e544 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	2baa      	cmp	r3, #170	; 0xaa
 800e27a:	f000 8143 	beq.w	800e504 <SCSI_ProcessCmd+0x2bc>
 800e27e:	2baa      	cmp	r3, #170	; 0xaa
 800e280:	f300 8152 	bgt.w	800e528 <SCSI_ProcessCmd+0x2e0>
 800e284:	2ba8      	cmp	r3, #168	; 0xa8
 800e286:	f000 812b 	beq.w	800e4e0 <SCSI_ProcessCmd+0x298>
 800e28a:	2ba8      	cmp	r3, #168	; 0xa8
 800e28c:	f300 814c 	bgt.w	800e528 <SCSI_ProcessCmd+0x2e0>
 800e290:	2b5a      	cmp	r3, #90	; 0x5a
 800e292:	f300 80bf 	bgt.w	800e414 <SCSI_ProcessCmd+0x1cc>
 800e296:	2b00      	cmp	r3, #0
 800e298:	f2c0 8146 	blt.w	800e528 <SCSI_ProcessCmd+0x2e0>
 800e29c:	2b5a      	cmp	r3, #90	; 0x5a
 800e29e:	f200 8143 	bhi.w	800e528 <SCSI_ProcessCmd+0x2e0>
 800e2a2:	a201      	add	r2, pc, #4	; (adr r2, 800e2a8 <SCSI_ProcessCmd+0x60>)
 800e2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a8:	0800e41b 	.word	0x0800e41b
 800e2ac:	0800e529 	.word	0x0800e529
 800e2b0:	0800e529 	.word	0x0800e529
 800e2b4:	0800e42d 	.word	0x0800e42d
 800e2b8:	0800e529 	.word	0x0800e529
 800e2bc:	0800e529 	.word	0x0800e529
 800e2c0:	0800e529 	.word	0x0800e529
 800e2c4:	0800e529 	.word	0x0800e529
 800e2c8:	0800e529 	.word	0x0800e529
 800e2cc:	0800e529 	.word	0x0800e529
 800e2d0:	0800e529 	.word	0x0800e529
 800e2d4:	0800e529 	.word	0x0800e529
 800e2d8:	0800e529 	.word	0x0800e529
 800e2dc:	0800e529 	.word	0x0800e529
 800e2e0:	0800e529 	.word	0x0800e529
 800e2e4:	0800e529 	.word	0x0800e529
 800e2e8:	0800e529 	.word	0x0800e529
 800e2ec:	0800e529 	.word	0x0800e529
 800e2f0:	0800e43f 	.word	0x0800e43f
 800e2f4:	0800e529 	.word	0x0800e529
 800e2f8:	0800e529 	.word	0x0800e529
 800e2fc:	0800e529 	.word	0x0800e529
 800e300:	0800e529 	.word	0x0800e529
 800e304:	0800e529 	.word	0x0800e529
 800e308:	0800e529 	.word	0x0800e529
 800e30c:	0800e529 	.word	0x0800e529
 800e310:	0800e475 	.word	0x0800e475
 800e314:	0800e451 	.word	0x0800e451
 800e318:	0800e529 	.word	0x0800e529
 800e31c:	0800e529 	.word	0x0800e529
 800e320:	0800e463 	.word	0x0800e463
 800e324:	0800e529 	.word	0x0800e529
 800e328:	0800e529 	.word	0x0800e529
 800e32c:	0800e529 	.word	0x0800e529
 800e330:	0800e529 	.word	0x0800e529
 800e334:	0800e499 	.word	0x0800e499
 800e338:	0800e529 	.word	0x0800e529
 800e33c:	0800e4ab 	.word	0x0800e4ab
 800e340:	0800e529 	.word	0x0800e529
 800e344:	0800e529 	.word	0x0800e529
 800e348:	0800e4cf 	.word	0x0800e4cf
 800e34c:	0800e529 	.word	0x0800e529
 800e350:	0800e4f3 	.word	0x0800e4f3
 800e354:	0800e529 	.word	0x0800e529
 800e358:	0800e529 	.word	0x0800e529
 800e35c:	0800e529 	.word	0x0800e529
 800e360:	0800e529 	.word	0x0800e529
 800e364:	0800e517 	.word	0x0800e517
 800e368:	0800e529 	.word	0x0800e529
 800e36c:	0800e529 	.word	0x0800e529
 800e370:	0800e529 	.word	0x0800e529
 800e374:	0800e529 	.word	0x0800e529
 800e378:	0800e529 	.word	0x0800e529
 800e37c:	0800e529 	.word	0x0800e529
 800e380:	0800e529 	.word	0x0800e529
 800e384:	0800e529 	.word	0x0800e529
 800e388:	0800e529 	.word	0x0800e529
 800e38c:	0800e529 	.word	0x0800e529
 800e390:	0800e529 	.word	0x0800e529
 800e394:	0800e529 	.word	0x0800e529
 800e398:	0800e529 	.word	0x0800e529
 800e39c:	0800e529 	.word	0x0800e529
 800e3a0:	0800e529 	.word	0x0800e529
 800e3a4:	0800e529 	.word	0x0800e529
 800e3a8:	0800e529 	.word	0x0800e529
 800e3ac:	0800e529 	.word	0x0800e529
 800e3b0:	0800e529 	.word	0x0800e529
 800e3b4:	0800e529 	.word	0x0800e529
 800e3b8:	0800e529 	.word	0x0800e529
 800e3bc:	0800e529 	.word	0x0800e529
 800e3c0:	0800e529 	.word	0x0800e529
 800e3c4:	0800e529 	.word	0x0800e529
 800e3c8:	0800e529 	.word	0x0800e529
 800e3cc:	0800e529 	.word	0x0800e529
 800e3d0:	0800e529 	.word	0x0800e529
 800e3d4:	0800e529 	.word	0x0800e529
 800e3d8:	0800e529 	.word	0x0800e529
 800e3dc:	0800e529 	.word	0x0800e529
 800e3e0:	0800e529 	.word	0x0800e529
 800e3e4:	0800e529 	.word	0x0800e529
 800e3e8:	0800e529 	.word	0x0800e529
 800e3ec:	0800e529 	.word	0x0800e529
 800e3f0:	0800e529 	.word	0x0800e529
 800e3f4:	0800e529 	.word	0x0800e529
 800e3f8:	0800e529 	.word	0x0800e529
 800e3fc:	0800e529 	.word	0x0800e529
 800e400:	0800e529 	.word	0x0800e529
 800e404:	0800e529 	.word	0x0800e529
 800e408:	0800e529 	.word	0x0800e529
 800e40c:	0800e529 	.word	0x0800e529
 800e410:	0800e487 	.word	0x0800e487
 800e414:	2b9e      	cmp	r3, #158	; 0x9e
 800e416:	d051      	beq.n	800e4bc <SCSI_ProcessCmd+0x274>
 800e418:	e086      	b.n	800e528 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e41a:	7afb      	ldrb	r3, [r7, #11]
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	4619      	mov	r1, r3
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f000 f893 	bl	800e54c <SCSI_TestUnitReady>
 800e426:	4603      	mov	r3, r0
 800e428:	75fb      	strb	r3, [r7, #23]
      break;
 800e42a:	e089      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800e42c:	7afb      	ldrb	r3, [r7, #11]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	4619      	mov	r1, r3
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f000 fb9e 	bl	800eb74 <SCSI_RequestSense>
 800e438:	4603      	mov	r3, r0
 800e43a:	75fb      	strb	r3, [r7, #23]
      break;
 800e43c:	e080      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800e43e:	7afb      	ldrb	r3, [r7, #11]
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	4619      	mov	r1, r3
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f000 f8df 	bl	800e608 <SCSI_Inquiry>
 800e44a:	4603      	mov	r3, r0
 800e44c:	75fb      	strb	r3, [r7, #23]
      break;
 800e44e:	e077      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e450:	7afb      	ldrb	r3, [r7, #11]
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	4619      	mov	r1, r3
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f000 fc8e 	bl	800ed78 <SCSI_StartStopUnit>
 800e45c:	4603      	mov	r3, r0
 800e45e:	75fb      	strb	r3, [r7, #23]
      break;
 800e460:	e06e      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e462:	7afb      	ldrb	r3, [r7, #11]
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	4619      	mov	r1, r3
 800e468:	68f8      	ldr	r0, [r7, #12]
 800e46a:	f000 fce3 	bl	800ee34 <SCSI_AllowPreventRemovable>
 800e46e:	4603      	mov	r3, r0
 800e470:	75fb      	strb	r3, [r7, #23]
      break;
 800e472:	e065      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e474:	7afb      	ldrb	r3, [r7, #11]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	4619      	mov	r1, r3
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f000 fb1a 	bl	800eab4 <SCSI_ModeSense6>
 800e480:	4603      	mov	r3, r0
 800e482:	75fb      	strb	r3, [r7, #23]
      break;
 800e484:	e05c      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e486:	7afb      	ldrb	r3, [r7, #11]
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	4619      	mov	r1, r3
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f000 fb41 	bl	800eb14 <SCSI_ModeSense10>
 800e492:	4603      	mov	r3, r0
 800e494:	75fb      	strb	r3, [r7, #23]
      break;
 800e496:	e053      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e498:	7afb      	ldrb	r3, [r7, #11]
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	4619      	mov	r1, r3
 800e49e:	68f8      	ldr	r0, [r7, #12]
 800e4a0:	f000 fa8a 	bl	800e9b8 <SCSI_ReadFormatCapacity>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	75fb      	strb	r3, [r7, #23]
      break;
 800e4a8:	e04a      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e4aa:	7afb      	ldrb	r3, [r7, #11]
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f000 f92b 	bl	800e70c <SCSI_ReadCapacity10>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	75fb      	strb	r3, [r7, #23]
      break;
 800e4ba:	e041      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e4bc:	7afb      	ldrb	r3, [r7, #11]
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f000 f9b2 	bl	800e82c <SCSI_ReadCapacity16>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	75fb      	strb	r3, [r7, #23]
      break;
 800e4cc:	e038      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800e4ce:	7afb      	ldrb	r3, [r7, #11]
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	68f8      	ldr	r0, [r7, #12]
 800e4d6:	f000 fcdf 	bl	800ee98 <SCSI_Read10>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	75fb      	strb	r3, [r7, #23]
      break;
 800e4de:	e02f      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800e4e0:	7afb      	ldrb	r3, [r7, #11]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f000 fd8e 	bl	800f008 <SCSI_Read12>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	75fb      	strb	r3, [r7, #23]
      break;
 800e4f0:	e026      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800e4f2:	7afb      	ldrb	r3, [r7, #11]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f000 fe47 	bl	800f18c <SCSI_Write10>
 800e4fe:	4603      	mov	r3, r0
 800e500:	75fb      	strb	r3, [r7, #23]
      break;
 800e502:	e01d      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800e504:	7afb      	ldrb	r3, [r7, #11]
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	4619      	mov	r1, r3
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f000 ff30 	bl	800f370 <SCSI_Write12>
 800e510:	4603      	mov	r3, r0
 800e512:	75fb      	strb	r3, [r7, #23]
      break;
 800e514:	e014      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800e516:	7afb      	ldrb	r3, [r7, #11]
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	4619      	mov	r1, r3
 800e51c:	68f8      	ldr	r0, [r7, #12]
 800e51e:	f001 f829 	bl	800f574 <SCSI_Verify10>
 800e522:	4603      	mov	r3, r0
 800e524:	75fb      	strb	r3, [r7, #23]
      break;
 800e526:	e00b      	b.n	800e540 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e528:	7af9      	ldrb	r1, [r7, #11]
 800e52a:	2320      	movs	r3, #32
 800e52c:	2205      	movs	r2, #5
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f000 fbc0 	bl	800ecb4 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	2202      	movs	r2, #2
 800e538:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800e53a:	23ff      	movs	r3, #255	; 0xff
 800e53c:	75fb      	strb	r3, [r7, #23]
      break;
 800e53e:	bf00      	nop
  }

  return ret;
 800e540:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b086      	sub	sp, #24
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	460b      	mov	r3, r1
 800e556:	607a      	str	r2, [r7, #4]
 800e558:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e560:	68fa      	ldr	r2, [r7, #12]
 800e562:	33b2      	adds	r3, #178	; 0xb2
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	4413      	add	r3, r2
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d102      	bne.n	800e578 <SCSI_TestUnitReady+0x2c>
  {
    return -1;
 800e572:	f04f 33ff 	mov.w	r3, #4294967295
 800e576:	e043      	b.n	800e600 <SCSI_TestUnitReady+0xb4>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e57e:	699b      	ldr	r3, [r3, #24]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00b      	beq.n	800e59c <SCSI_TestUnitReady+0x50>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e58a:	7f59      	ldrb	r1, [r3, #29]
 800e58c:	2320      	movs	r3, #32
 800e58e:	2205      	movs	r2, #5
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f000 fb8f 	bl	800ecb4 <SCSI_SenseCode>

    return -1;
 800e596:	f04f 33ff 	mov.w	r3, #4294967295
 800e59a:	e031      	b.n	800e600 <SCSI_TestUnitReady+0xb4>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e5a2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d10b      	bne.n	800e5c2 <SCSI_TestUnitReady+0x76>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e5aa:	7af9      	ldrb	r1, [r7, #11]
 800e5ac:	233a      	movs	r3, #58	; 0x3a
 800e5ae:	2202      	movs	r2, #2
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f000 fb7f 	bl	800ecb4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	2205      	movs	r2, #5
 800e5ba:	721a      	strb	r2, [r3, #8]
    return -1;
 800e5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c0:	e01e      	b.n	800e600 <SCSI_TestUnitReady+0xb4>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e5c8:	68fa      	ldr	r2, [r7, #12]
 800e5ca:	33b6      	adds	r3, #182	; 0xb6
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	4413      	add	r3, r2
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	689b      	ldr	r3, [r3, #8]
 800e5d4:	7afa      	ldrb	r2, [r7, #11]
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	4798      	blx	r3
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00b      	beq.n	800e5f8 <SCSI_TestUnitReady+0xac>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e5e0:	7af9      	ldrb	r1, [r7, #11]
 800e5e2:	233a      	movs	r3, #58	; 0x3a
 800e5e4:	2202      	movs	r2, #2
 800e5e6:	68f8      	ldr	r0, [r7, #12]
 800e5e8:	f000 fb64 	bl	800ecb4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	2205      	movs	r2, #5
 800e5f0:	721a      	strb	r2, [r3, #8]

    return -1;
 800e5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f6:	e003      	b.n	800e600 <SCSI_TestUnitReady+0xb4>
  }
  hmsc->bot_data_length = 0U;
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	60da      	str	r2, [r3, #12]

  return 0;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3718      	adds	r7, #24
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b088      	sub	sp, #32
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	460b      	mov	r3, r1
 800e612:	607a      	str	r2, [r7, #4]
 800e614:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	33b2      	adds	r3, #178	; 0xb2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4413      	add	r3, r2
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d102      	bne.n	800e634 <SCSI_Inquiry+0x2c>
  {
    return -1;
 800e62e:	f04f 33ff 	mov.w	r3, #4294967295
 800e632:	e062      	b.n	800e6fa <SCSI_Inquiry+0xf2>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e63a:	699b      	ldr	r3, [r3, #24]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d10b      	bne.n	800e658 <SCSI_Inquiry+0x50>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e646:	7f59      	ldrb	r1, [r3, #29]
 800e648:	2320      	movs	r3, #32
 800e64a:	2205      	movs	r2, #5
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f000 fb31 	bl	800ecb4 <SCSI_SenseCode>
    return -1;
 800e652:	f04f 33ff 	mov.w	r3, #4294967295
 800e656:	e050      	b.n	800e6fa <SCSI_Inquiry+0xf2>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	3301      	adds	r3, #1
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	2b00      	cmp	r3, #0
 800e664:	d021      	beq.n	800e6aa <SCSI_Inquiry+0xa2>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	3302      	adds	r3, #2
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d105      	bne.n	800e67c <SCSI_Inquiry+0x74>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e670:	2206      	movs	r2, #6
 800e672:	4924      	ldr	r1, [pc, #144]	; (800e704 <SCSI_Inquiry+0xfc>)
 800e674:	69b8      	ldr	r0, [r7, #24]
 800e676:	f001 f947 	bl	800f908 <SCSI_UpdateBotData>
 800e67a:	e03d      	b.n	800e6f8 <SCSI_Inquiry+0xf0>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	3302      	adds	r3, #2
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	2b80      	cmp	r3, #128	; 0x80
 800e684:	d105      	bne.n	800e692 <SCSI_Inquiry+0x8a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e686:	2208      	movs	r2, #8
 800e688:	491f      	ldr	r1, [pc, #124]	; (800e708 <SCSI_Inquiry+0x100>)
 800e68a:	69b8      	ldr	r0, [r7, #24]
 800e68c:	f001 f93c 	bl	800f908 <SCSI_UpdateBotData>
 800e690:	e032      	b.n	800e6f8 <SCSI_Inquiry+0xf0>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e698:	7f59      	ldrb	r1, [r3, #29]
 800e69a:	2324      	movs	r3, #36	; 0x24
 800e69c:	2205      	movs	r2, #5
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f000 fb08 	bl	800ecb4 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a8:	e027      	b.n	800e6fa <SCSI_Inquiry+0xf2>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	33b6      	adds	r3, #182	; 0xb6
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	4413      	add	r3, r2
 800e6b8:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e6ba:	69d9      	ldr	r1, [r3, #28]
 800e6bc:	7afa      	ldrb	r2, [r7, #11]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	00db      	lsls	r3, r3, #3
 800e6c2:	4413      	add	r3, r2
 800e6c4:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800e6c6:	440b      	add	r3, r1
 800e6c8:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	3304      	adds	r3, #4
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	3305      	adds	r3, #5
 800e6d4:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	3304      	adds	r3, #4
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	8bfa      	ldrh	r2, [r7, #30]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d303      	bcc.n	800e6ec <SCSI_Inquiry+0xe4>
    {
      len = params[4];
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	3304      	adds	r3, #4
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e6ec:	8bfb      	ldrh	r3, [r7, #30]
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	6979      	ldr	r1, [r7, #20]
 800e6f2:	69b8      	ldr	r0, [r7, #24]
 800e6f4:	f001 f908 	bl	800f908 <SCSI_UpdateBotData>
  }

  return 0;
 800e6f8:	2300      	movs	r3, #0
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3720      	adds	r7, #32
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	24000150 	.word	0x24000150
 800e708:	24000158 	.word	0x24000158

0800e70c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e70c:	b590      	push	{r4, r7, lr}
 800e70e:	b087      	sub	sp, #28
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	460b      	mov	r3, r1
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	33b2      	adds	r3, #178	; 0xb2
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	4413      	add	r3, r2
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d102      	bne.n	800e738 <SCSI_ReadCapacity10+0x2c>
  {
    return -1;
 800e732:	f04f 33ff 	mov.w	r3, #4294967295
 800e736:	e075      	b.n	800e824 <SCSI_ReadCapacity10+0x118>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e73e:	68fa      	ldr	r2, [r7, #12]
 800e740:	33b6      	adds	r3, #182	; 0xb6
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4413      	add	r3, r2
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	685c      	ldr	r4, [r3, #4]
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	f248 0368 	movw	r3, #32872	; 0x8068
 800e750:	4413      	add	r3, r2
 800e752:	6979      	ldr	r1, [r7, #20]
 800e754:	f248 0264 	movw	r2, #32868	; 0x8064
 800e758:	440a      	add	r2, r1
 800e75a:	7af8      	ldrb	r0, [r7, #11]
 800e75c:	4619      	mov	r1, r3
 800e75e:	47a0      	blx	r4
 800e760:	4603      	mov	r3, r0
 800e762:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e764:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d106      	bne.n	800e77a <SCSI_ReadCapacity10+0x6e>
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e772:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800e776:	2b02      	cmp	r3, #2
 800e778:	d108      	bne.n	800e78c <SCSI_ReadCapacity10+0x80>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e77a:	7af9      	ldrb	r1, [r7, #11]
 800e77c:	233a      	movs	r3, #58	; 0x3a
 800e77e:	2202      	movs	r2, #2
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f000 fa97 	bl	800ecb4 <SCSI_SenseCode>
    return -1;
 800e786:	f04f 33ff 	mov.w	r3, #4294967295
 800e78a:	e04b      	b.n	800e824 <SCSI_ReadCapacity10+0x118>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e794:	3b01      	subs	r3, #1
 800e796:	0e1b      	lsrs	r3, r3, #24
 800e798:	b2da      	uxtb	r2, r3
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e7a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	0c1b      	lsrs	r3, r3, #16
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e7b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7b8:	3b01      	subs	r3, #1
 800e7ba:	0a1b      	lsrs	r3, r3, #8
 800e7bc:	b2da      	uxtb	r2, r3
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e7c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e7da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e7de:	161b      	asrs	r3, r3, #24
 800e7e0:	b2da      	uxtb	r2, r3
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e7ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e7f0:	141b      	asrs	r3, r3, #16
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e7fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e802:	0a1b      	lsrs	r3, r3, #8
 800e804:	b29b      	uxth	r3, r3
 800e806:	b2da      	uxtb	r2, r3
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e812:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e816:	b2da      	uxtb	r2, r3
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	2208      	movs	r2, #8
 800e820:	60da      	str	r2, [r3, #12]

  return 0;
 800e822:	2300      	movs	r3, #0

}
 800e824:	4618      	mov	r0, r3
 800e826:	371c      	adds	r7, #28
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd90      	pop	{r4, r7, pc}

0800e82c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e82c:	b590      	push	{r4, r7, lr}
 800e82e:	b089      	sub	sp, #36	; 0x24
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	460b      	mov	r3, r1
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	33b2      	adds	r3, #178	; 0xb2
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	4413      	add	r3, r2
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d102      	bne.n	800e858 <SCSI_ReadCapacity16+0x2c>
  {
    return -1;
 800e852:	f04f 33ff 	mov.w	r3, #4294967295
 800e856:	e0ab      	b.n	800e9b0 <SCSI_ReadCapacity16+0x184>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e85e:	68fa      	ldr	r2, [r7, #12]
 800e860:	33b6      	adds	r3, #182	; 0xb6
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4413      	add	r3, r2
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	685c      	ldr	r4, [r3, #4]
 800e86a:	69ba      	ldr	r2, [r7, #24]
 800e86c:	f248 0368 	movw	r3, #32872	; 0x8068
 800e870:	4413      	add	r3, r2
 800e872:	69b9      	ldr	r1, [r7, #24]
 800e874:	f248 0264 	movw	r2, #32868	; 0x8064
 800e878:	440a      	add	r2, r1
 800e87a:	7af8      	ldrb	r0, [r7, #11]
 800e87c:	4619      	mov	r1, r3
 800e87e:	47a0      	blx	r4
 800e880:	4603      	mov	r3, r0
 800e882:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d106      	bne.n	800e89a <SCSI_ReadCapacity16+0x6e>
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e892:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800e896:	2b02      	cmp	r3, #2
 800e898:	d108      	bne.n	800e8ac <SCSI_ReadCapacity16+0x80>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e89a:	7af9      	ldrb	r1, [r7, #11]
 800e89c:	233a      	movs	r3, #58	; 0x3a
 800e89e:	2202      	movs	r2, #2
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f000 fa07 	bl	800ecb4 <SCSI_SenseCode>
    return -1;
 800e8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8aa:	e081      	b.n	800e9b0 <SCSI_ReadCapacity16+0x184>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	330a      	adds	r3, #10
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	330b      	adds	r3, #11
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e8bc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	330c      	adds	r3, #12
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e8c6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	320d      	adds	r2, #13
 800e8cc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e8ce:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	61fb      	str	r3, [r7, #28]
 800e8d8:	e008      	b.n	800e8ec <SCSI_ReadCapacity16+0xc0>
  {
    hmsc->bot_data[idx] = 0U;
 800e8da:	69ba      	ldr	r2, [r7, #24]
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	4413      	add	r3, r2
 800e8e0:	3310      	adds	r3, #16
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	61fb      	str	r3, [r7, #28]
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	69fa      	ldr	r2, [r7, #28]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d3f1      	bcc.n	800e8da <SCSI_ReadCapacity16+0xae>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e8fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8fe:	3b01      	subs	r3, #1
 800e900:	0e1b      	lsrs	r3, r3, #24
 800e902:	b2da      	uxtb	r2, r3
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e90e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e910:	3b01      	subs	r3, #1
 800e912:	0c1b      	lsrs	r3, r3, #16
 800e914:	b2da      	uxtb	r2, r3
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e922:	3b01      	subs	r3, #1
 800e924:	0a1b      	lsrs	r3, r3, #8
 800e926:	b2da      	uxtb	r2, r3
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e934:	b2db      	uxtb	r3, r3
 800e936:	3b01      	subs	r3, #1
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e944:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e948:	161b      	asrs	r3, r3, #24
 800e94a:	b2da      	uxtb	r2, r3
 800e94c:	69bb      	ldr	r3, [r7, #24]
 800e94e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e956:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e95a:	141b      	asrs	r3, r3, #16
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e968:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e96c:	0a1b      	lsrs	r3, r3, #8
 800e96e:	b29b      	uxth	r3, r3
 800e970:	b2da      	uxtb	r2, r3
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e97c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e980:	b2da      	uxtb	r2, r3
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	330a      	adds	r3, #10
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	330b      	adds	r3, #11
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e996:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	330c      	adds	r3, #12
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e9a0:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	320d      	adds	r2, #13
 800e9a6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e9a8:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	60da      	str	r2, [r3, #12]

  return 0;
 800e9ae:	2300      	movs	r3, #0
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3724      	adds	r7, #36	; 0x24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd90      	pop	{r4, r7, pc}

0800e9b8 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b088      	sub	sp, #32
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	607a      	str	r2, [r7, #4]
 800e9c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	33b2      	adds	r3, #178	; 0xb2
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	4413      	add	r3, r2
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d102      	bne.n	800e9e4 <SCSI_ReadFormatCapacity+0x2c>
  {
    return -1;
 800e9de:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e2:	e063      	b.n	800eaac <SCSI_ReadFormatCapacity+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e9ea:	68fa      	ldr	r2, [r7, #12]
 800e9ec:	33b6      	adds	r3, #182	; 0xb6
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	4413      	add	r3, r2
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	f107 0214 	add.w	r2, r7, #20
 800e9fa:	f107 0110 	add.w	r1, r7, #16
 800e9fe:	7af8      	ldrb	r0, [r7, #11]
 800ea00:	4798      	blx	r3
 800ea02:	4603      	mov	r3, r0
 800ea04:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ea06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d106      	bne.n	800ea1c <SCSI_ReadFormatCapacity+0x64>
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ea14:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800ea18:	2b02      	cmp	r3, #2
 800ea1a:	d108      	bne.n	800ea2e <SCSI_ReadFormatCapacity+0x76>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ea1c:	7af9      	ldrb	r1, [r7, #11]
 800ea1e:	233a      	movs	r3, #58	; 0x3a
 800ea20:	2202      	movs	r2, #2
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f000 f946 	bl	800ecb4 <SCSI_SenseCode>
    return -1;
 800ea28:	f04f 33ff 	mov.w	r3, #4294967295
 800ea2c:	e03e      	b.n	800eaac <SCSI_ReadFormatCapacity+0xf4>
  }

  for (i = 0U; i < 12U ; i++)
 800ea2e:	2300      	movs	r3, #0
 800ea30:	83fb      	strh	r3, [r7, #30]
 800ea32:	e007      	b.n	800ea44 <SCSI_ReadFormatCapacity+0x8c>
  {
    hmsc->bot_data[i] = 0U;
 800ea34:	8bfb      	ldrh	r3, [r7, #30]
 800ea36:	69ba      	ldr	r2, [r7, #24]
 800ea38:	4413      	add	r3, r2
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800ea3e:	8bfb      	ldrh	r3, [r7, #30]
 800ea40:	3301      	adds	r3, #1
 800ea42:	83fb      	strh	r3, [r7, #30]
 800ea44:	8bfb      	ldrh	r3, [r7, #30]
 800ea46:	2b0b      	cmp	r3, #11
 800ea48:	d9f4      	bls.n	800ea34 <SCSI_ReadFormatCapacity+0x7c>
  }

  hmsc->bot_data[3] = 0x08U;
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	2208      	movs	r2, #8
 800ea4e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	3b01      	subs	r3, #1
 800ea54:	0e1b      	lsrs	r3, r3, #24
 800ea56:	b2da      	uxtb	r2, r3
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	3b01      	subs	r3, #1
 800ea60:	0c1b      	lsrs	r3, r3, #16
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	3b01      	subs	r3, #1
 800ea6c:	0a1b      	lsrs	r3, r3, #8
 800ea6e:	b2da      	uxtb	r2, r3
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	2202      	movs	r2, #2
 800ea84:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800ea86:	8abb      	ldrh	r3, [r7, #20]
 800ea88:	141b      	asrs	r3, r3, #16
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800ea90:	8abb      	ldrh	r3, [r7, #20]
 800ea92:	0a1b      	lsrs	r3, r3, #8
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800ea9c:	8abb      	ldrh	r3, [r7, #20]
 800ea9e:	b2da      	uxtb	r2, r3
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	220c      	movs	r2, #12
 800eaa8:	60da      	str	r2, [r3, #12]

  return 0;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3720      	adds	r7, #32
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b086      	sub	sp, #24
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	460b      	mov	r3, r1
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eac8:	68fa      	ldr	r2, [r7, #12]
 800eaca:	33b2      	adds	r3, #178	; 0xb2
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4413      	add	r3, r2
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800ead4:	2317      	movs	r3, #23
 800ead6:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d102      	bne.n	800eae4 <SCSI_ModeSense6+0x30>
  {
    return -1;
 800eade:	f04f 33ff 	mov.w	r3, #4294967295
 800eae2:	e011      	b.n	800eb08 <SCSI_ModeSense6+0x54>
  }

  if (params[4] <= len)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	3304      	adds	r3, #4
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	8afa      	ldrh	r2, [r7, #22]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d303      	bcc.n	800eafa <SCSI_ModeSense6+0x46>
  {
    len = params[4];
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	3304      	adds	r3, #4
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800eafa:	8afb      	ldrh	r3, [r7, #22]
 800eafc:	461a      	mov	r2, r3
 800eafe:	4904      	ldr	r1, [pc, #16]	; (800eb10 <SCSI_ModeSense6+0x5c>)
 800eb00:	6938      	ldr	r0, [r7, #16]
 800eb02:	f000 ff01 	bl	800f908 <SCSI_UpdateBotData>

  return 0;
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	24000160 	.word	0x24000160

0800eb14 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b086      	sub	sp, #24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	607a      	str	r2, [r7, #4]
 800eb20:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	33b2      	adds	r3, #178	; 0xb2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	4413      	add	r3, r2
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800eb34:	231b      	movs	r3, #27
 800eb36:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d102      	bne.n	800eb44 <SCSI_ModeSense10+0x30>
  {
    return -1;
 800eb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb42:	e011      	b.n	800eb68 <SCSI_ModeSense10+0x54>
  }

  if (params[8] <= len)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	3308      	adds	r3, #8
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	8afa      	ldrh	r2, [r7, #22]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d303      	bcc.n	800eb5a <SCSI_ModeSense10+0x46>
  {
    len = params[8];
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3308      	adds	r3, #8
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800eb5a:	8afb      	ldrh	r3, [r7, #22]
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	4904      	ldr	r1, [pc, #16]	; (800eb70 <SCSI_ModeSense10+0x5c>)
 800eb60:	6938      	ldr	r0, [r7, #16]
 800eb62:	f000 fed1 	bl	800f908 <SCSI_UpdateBotData>

  return 0;
 800eb66:	2300      	movs	r3, #0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3718      	adds	r7, #24
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	24000178 	.word	0x24000178

0800eb74 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b086      	sub	sp, #24
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	607a      	str	r2, [r7, #4]
 800eb80:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	33b2      	adds	r3, #178	; 0xb2
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	4413      	add	r3, r2
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d102      	bne.n	800eba0 <SCSI_RequestSense+0x2c>
  {
    return -1;
 800eb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb9e:	e085      	b.n	800ecac <SCSI_RequestSense+0x138>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800eba6:	699b      	ldr	r3, [r3, #24]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10b      	bne.n	800ebc4 <SCSI_RequestSense+0x50>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ebb2:	7f59      	ldrb	r1, [r3, #29]
 800ebb4:	2320      	movs	r3, #32
 800ebb6:	2205      	movs	r2, #5
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f000 f87b 	bl	800ecb4 <SCSI_SenseCode>
    return -1;
 800ebbe:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc2:	e073      	b.n	800ecac <SCSI_RequestSense+0x138>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	75fb      	strb	r3, [r7, #23]
 800ebc8:	e007      	b.n	800ebda <SCSI_RequestSense+0x66>
  {
    hmsc->bot_data[i] = 0U;
 800ebca:	7dfb      	ldrb	r3, [r7, #23]
 800ebcc:	693a      	ldr	r2, [r7, #16]
 800ebce:	4413      	add	r3, r2
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ebd4:	7dfb      	ldrb	r3, [r7, #23]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	75fb      	strb	r3, [r7, #23]
 800ebda:	7dfb      	ldrb	r3, [r7, #23]
 800ebdc:	2b11      	cmp	r3, #17
 800ebde:	d9f4      	bls.n	800ebca <SCSI_RequestSense+0x56>
  }

  hmsc->bot_data[0] = 0x70U;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	2270      	movs	r2, #112	; 0x70
 800ebe4:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	220c      	movs	r2, #12
 800ebea:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ebf2:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ebfc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d044      	beq.n	800ec8e <SCSI_RequestSense+0x11a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ec0a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ec0e:	4619      	mov	r1, r3
 800ec10:	693a      	ldr	r2, [r7, #16]
 800ec12:	f241 0308 	movw	r3, #4104	; 0x1008
 800ec16:	440b      	add	r3, r1
 800ec18:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ec26:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	693a      	ldr	r2, [r7, #16]
 800ec2e:	f241 0308 	movw	r3, #4104	; 0x1008
 800ec32:	440b      	add	r3, r1
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	4413      	add	r3, r2
 800ec38:	791a      	ldrb	r2, [r3, #4]
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ec44:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ec48:	4619      	mov	r1, r3
 800ec4a:	693a      	ldr	r2, [r7, #16]
 800ec4c:	f241 0308 	movw	r3, #4104	; 0x1008
 800ec50:	440b      	add	r3, r1
 800ec52:	00db      	lsls	r3, r3, #3
 800ec54:	4413      	add	r3, r2
 800ec56:	795a      	ldrb	r2, [r3, #5]
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ec62:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ec66:	3301      	adds	r3, #1
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ec70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ec7a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ec7e:	2b04      	cmp	r3, #4
 800ec80:	d105      	bne.n	800ec8e <SCSI_RequestSense+0x11a>
    {
      hmsc->scsi_sense_head = 0U;
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	2212      	movs	r2, #18
 800ec92:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	3304      	adds	r3, #4
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	2b12      	cmp	r3, #18
 800ec9c:	d805      	bhi.n	800ecaa <SCSI_RequestSense+0x136>
  {
    hmsc->bot_data_length = params[4];
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	3304      	adds	r3, #4
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	461a      	mov	r2, r3
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3718      	adds	r7, #24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	4608      	mov	r0, r1
 800ecbe:	4611      	mov	r1, r2
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	70fb      	strb	r3, [r7, #3]
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	70bb      	strb	r3, [r7, #2]
 800ecca:	4613      	mov	r3, r2
 800eccc:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	33b2      	adds	r3, #178	; 0xb2
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4413      	add	r3, r2
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d042      	beq.n	800ed6c <SCSI_SenseCode+0xb8>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ecec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	f241 0308 	movw	r3, #4104	; 0x1008
 800ecf8:	440b      	add	r3, r1
 800ecfa:	78b9      	ldrb	r1, [r7, #2]
 800ecfc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ed06:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	f241 0308 	movw	r3, #4104	; 0x1008
 800ed12:	440b      	add	r3, r1
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	4413      	add	r3, r2
 800ed18:	787a      	ldrb	r2, [r7, #1]
 800ed1a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ed22:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ed26:	4619      	mov	r1, r3
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	f241 0308 	movw	r3, #4104	; 0x1008
 800ed2e:	440b      	add	r3, r1
 800ed30:	00db      	lsls	r3, r3, #3
 800ed32:	4413      	add	r3, r2
 800ed34:	2200      	movs	r2, #0
 800ed36:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ed3e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ed42:	3301      	adds	r3, #1
 800ed44:	b2da      	uxtb	r2, r3
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ed4c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ed56:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ed5a:	2b04      	cmp	r3, #4
 800ed5c:	d107      	bne.n	800ed6e <SCSI_SenseCode+0xba>
  {
    hmsc->scsi_sense_tail = 0U;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ed64:	2200      	movs	r2, #0
 800ed66:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800ed6a:	e000      	b.n	800ed6e <SCSI_SenseCode+0xba>
    return;
 800ed6c:	bf00      	nop
  }
}
 800ed6e:	3714      	adds	r7, #20
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b086      	sub	sp, #24
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	460b      	mov	r3, r1
 800ed82:	607a      	str	r2, [r7, #4]
 800ed84:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	33b2      	adds	r3, #178	; 0xb2
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	4413      	add	r3, r2
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d102      	bne.n	800eda4 <SCSI_StartStopUnit+0x2c>
  {
    return -1;
 800ed9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eda2:	e043      	b.n	800ee2c <SCSI_StartStopUnit+0xb4>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800edaa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d10f      	bne.n	800edd2 <SCSI_StartStopUnit+0x5a>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	3304      	adds	r3, #4
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	f003 0303 	and.w	r3, r3, #3
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d108      	bne.n	800edd2 <SCSI_StartStopUnit+0x5a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800edc0:	7af9      	ldrb	r1, [r7, #11]
 800edc2:	2324      	movs	r3, #36	; 0x24
 800edc4:	2205      	movs	r2, #5
 800edc6:	68f8      	ldr	r0, [r7, #12]
 800edc8:	f7ff ff74 	bl	800ecb4 <SCSI_SenseCode>

    return -1;
 800edcc:	f04f 33ff 	mov.w	r3, #4294967295
 800edd0:	e02c      	b.n	800ee2c <SCSI_StartStopUnit+0xb4>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	3304      	adds	r3, #4
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	f003 0303 	and.w	r3, r3, #3
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d106      	bne.n	800edee <SCSI_StartStopUnit+0x76>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ede6:	2200      	movs	r2, #0
 800ede8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800edec:	e01a      	b.n	800ee24 <SCSI_StartStopUnit+0xac>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	3304      	adds	r3, #4
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	f003 0303 	and.w	r3, r3, #3
 800edf8:	2b02      	cmp	r3, #2
 800edfa:	d106      	bne.n	800ee0a <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ee02:	2202      	movs	r2, #2
 800ee04:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800ee08:	e00c      	b.n	800ee24 <SCSI_StartStopUnit+0xac>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	3304      	adds	r3, #4
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	f003 0303 	and.w	r3, r3, #3
 800ee14:	2b03      	cmp	r3, #3
 800ee16:	d105      	bne.n	800ee24 <SCSI_StartStopUnit+0xac>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	2200      	movs	r2, #0
 800ee28:	60da      	str	r2, [r3, #12]

  return 0;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3718      	adds	r7, #24
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b087      	sub	sp, #28
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	607a      	str	r2, [r7, #4]
 800ee40:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	33b2      	adds	r3, #178	; 0xb2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4413      	add	r3, r2
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d102      	bne.n	800ee60 <SCSI_AllowPreventRemovable+0x2c>
  {
    return -1;
 800ee5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee5e:	e015      	b.n	800ee8c <SCSI_AllowPreventRemovable+0x58>
  }

  if (params[4] == 0U)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	3304      	adds	r3, #4
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d106      	bne.n	800ee78 <SCSI_AllowPreventRemovable+0x44>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ee70:	2200      	movs	r2, #0
 800ee72:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800ee76:	e005      	b.n	800ee84 <SCSI_AllowPreventRemovable+0x50>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ee7e:	2201      	movs	r2, #1
 800ee80:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	2200      	movs	r2, #0
 800ee88:	60da      	str	r2, [r3, #12]

  return 0;
 800ee8a:	2300      	movs	r3, #0
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	371c      	adds	r7, #28
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	460b      	mov	r3, r1
 800eea2:	607a      	str	r2, [r7, #4]
 800eea4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	33b2      	adds	r3, #178	; 0xb2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4413      	add	r3, r2
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d102      	bne.n	800eec4 <SCSI_Read10+0x2c>
  {
    return -1;
 800eebe:	f04f 33ff 	mov.w	r3, #4294967295
 800eec2:	e09d      	b.n	800f000 <SCSI_Read10+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	7a1b      	ldrb	r3, [r3, #8]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f040 808f 	bne.w	800efec <SCSI_Read10+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800eed4:	7f1b      	ldrb	r3, [r3, #28]
 800eed6:	b25b      	sxtb	r3, r3
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	db0b      	blt.n	800eef4 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800eee2:	7f59      	ldrb	r1, [r3, #29]
 800eee4:	2320      	movs	r3, #32
 800eee6:	2205      	movs	r2, #5
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f7ff fee3 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800eeee:	f04f 33ff 	mov.w	r3, #4294967295
 800eef2:	e085      	b.n	800f000 <SCSI_Read10+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800eefa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	d108      	bne.n	800ef14 <SCSI_Read10+0x7c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef02:	7af9      	ldrb	r1, [r7, #11]
 800ef04:	233a      	movs	r3, #58	; 0x3a
 800ef06:	2202      	movs	r2, #2
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f7ff fed3 	bl	800ecb4 <SCSI_SenseCode>

      return -1;
 800ef0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef12:	e075      	b.n	800f000 <SCSI_Read10+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	33b6      	adds	r3, #182	; 0xb6
 800ef1e:	009b      	lsls	r3, r3, #2
 800ef20:	4413      	add	r3, r2
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	7afa      	ldrb	r2, [r7, #11]
 800ef28:	4610      	mov	r0, r2
 800ef2a:	4798      	blx	r3
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d008      	beq.n	800ef44 <SCSI_Read10+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef32:	7af9      	ldrb	r1, [r7, #11]
 800ef34:	233a      	movs	r3, #58	; 0x3a
 800ef36:	2202      	movs	r2, #2
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f7ff febb 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800ef3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef42:	e05d      	b.n	800f000 <SCSI_Read10+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	3302      	adds	r3, #2
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	3303      	adds	r3, #3
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef54:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	3304      	adds	r3, #4
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ef5e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	3205      	adds	r2, #5
 800ef64:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ef66:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef68:	697a      	ldr	r2, [r7, #20]
 800ef6a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800ef6e:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	3307      	adds	r3, #7
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	021b      	lsls	r3, r3, #8
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	3208      	adds	r2, #8
 800ef7c:	7812      	ldrb	r2, [r2, #0]
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	697a      	ldr	r2, [r7, #20]
 800ef82:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800ef86:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ef8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ef96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef98:	7af9      	ldrb	r1, [r7, #11]
 800ef9a:	68f8      	ldr	r0, [r7, #12]
 800ef9c:	f000 fb2a 	bl	800f5f4 <SCSI_CheckAddressRange>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	da02      	bge.n	800efac <SCSI_Read10+0x114>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800efa6:	f04f 33ff 	mov.w	r3, #4294967295
 800efaa:	e029      	b.n	800f000 <SCSI_Read10+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800efb2:	699a      	ldr	r2, [r3, #24]
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800efba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efbc:	6979      	ldr	r1, [r7, #20]
 800efbe:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800efc2:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800efc6:	fb01 f303 	mul.w	r3, r1, r3
 800efca:	429a      	cmp	r2, r3
 800efcc:	d00b      	beq.n	800efe6 <SCSI_Read10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800efd4:	7f59      	ldrb	r1, [r3, #29]
 800efd6:	2320      	movs	r3, #32
 800efd8:	2205      	movs	r2, #5
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f7ff fe6a 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800efe0:	f04f 33ff 	mov.w	r3, #4294967295
 800efe4:	e00c      	b.n	800f000 <SCSI_Read10+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	2202      	movs	r2, #2
 800efea:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800eff2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800eff4:	7afb      	ldrb	r3, [r7, #11]
 800eff6:	4619      	mov	r1, r3
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f000 fb29 	bl	800f650 <SCSI_ProcessRead>
 800effe:	4603      	mov	r3, r0
}
 800f000:	4618      	mov	r0, r3
 800f002:	3718      	adds	r7, #24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b086      	sub	sp, #24
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	460b      	mov	r3, r1
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	33b2      	adds	r3, #178	; 0xb2
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	4413      	add	r3, r2
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d102      	bne.n	800f034 <SCSI_Read12+0x2c>
  {
    return -1;
 800f02e:	f04f 33ff 	mov.w	r3, #4294967295
 800f032:	e0a7      	b.n	800f184 <SCSI_Read12+0x17c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	7a1b      	ldrb	r3, [r3, #8]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f040 8099 	bne.w	800f170 <SCSI_Read12+0x168>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f044:	7f1b      	ldrb	r3, [r3, #28]
 800f046:	b25b      	sxtb	r3, r3
 800f048:	2b00      	cmp	r3, #0
 800f04a:	db0b      	blt.n	800f064 <SCSI_Read12+0x5c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f052:	7f59      	ldrb	r1, [r3, #29]
 800f054:	2320      	movs	r3, #32
 800f056:	2205      	movs	r2, #5
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f7ff fe2b 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f05e:	f04f 33ff 	mov.w	r3, #4294967295
 800f062:	e08f      	b.n	800f184 <SCSI_Read12+0x17c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f06a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800f06e:	2b02      	cmp	r3, #2
 800f070:	d108      	bne.n	800f084 <SCSI_Read12+0x7c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f072:	7af9      	ldrb	r1, [r7, #11]
 800f074:	233a      	movs	r3, #58	; 0x3a
 800f076:	2202      	movs	r2, #2
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f7ff fe1b 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f07e:	f04f 33ff 	mov.w	r3, #4294967295
 800f082:	e07f      	b.n	800f184 <SCSI_Read12+0x17c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	33b6      	adds	r3, #182	; 0xb6
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	4413      	add	r3, r2
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	7afa      	ldrb	r2, [r7, #11]
 800f098:	4610      	mov	r0, r2
 800f09a:	4798      	blx	r3
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d008      	beq.n	800f0b4 <SCSI_Read12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f0a2:	7af9      	ldrb	r1, [r7, #11]
 800f0a4:	233a      	movs	r3, #58	; 0x3a
 800f0a6:	2202      	movs	r2, #2
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f7ff fe03 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b2:	e067      	b.n	800f184 <SCSI_Read12+0x17c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	3302      	adds	r3, #2
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	3303      	adds	r3, #3
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0c4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	3304      	adds	r3, #4
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f0ce:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	3205      	adds	r2, #5
 800f0d4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f0d6:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0d8:	697a      	ldr	r2, [r7, #20]
 800f0da:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f0de:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	3306      	adds	r3, #6
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	3307      	adds	r3, #7
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f0f0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	3308      	adds	r3, #8
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f0fa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	3209      	adds	r2, #9
 800f100:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f102:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f104:	697a      	ldr	r2, [r7, #20]
 800f106:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f10a:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f112:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f11c:	7af9      	ldrb	r1, [r7, #11]
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f000 fa68 	bl	800f5f4 <SCSI_CheckAddressRange>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	da02      	bge.n	800f130 <SCSI_Read12+0x128>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f12a:	f04f 33ff 	mov.w	r3, #4294967295
 800f12e:	e029      	b.n	800f184 <SCSI_Read12+0x17c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f136:	699a      	ldr	r2, [r3, #24]
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f140:	6979      	ldr	r1, [r7, #20]
 800f142:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800f146:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800f14a:	fb01 f303 	mul.w	r3, r1, r3
 800f14e:	429a      	cmp	r2, r3
 800f150:	d00b      	beq.n	800f16a <SCSI_Read12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f158:	7f59      	ldrb	r1, [r3, #29]
 800f15a:	2320      	movs	r3, #32
 800f15c:	2205      	movs	r2, #5
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f7ff fda8 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f164:	f04f 33ff 	mov.w	r3, #4294967295
 800f168:	e00c      	b.n	800f184 <SCSI_Read12+0x17c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	2202      	movs	r2, #2
 800f16e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f176:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f178:	7afb      	ldrb	r3, [r7, #11]
 800f17a:	4619      	mov	r1, r3
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f000 fa67 	bl	800f650 <SCSI_ProcessRead>
 800f182:	4603      	mov	r3, r0
}
 800f184:	4618      	mov	r0, r3
 800f186:	3718      	adds	r7, #24
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b086      	sub	sp, #24
 800f190:	af00      	add	r7, sp, #0
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	460b      	mov	r3, r1
 800f196:	607a      	str	r2, [r7, #4]
 800f198:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f1a0:	68fa      	ldr	r2, [r7, #12]
 800f1a2:	33b2      	adds	r3, #178	; 0xb2
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	4413      	add	r3, r2
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d102      	bne.n	800f1b8 <SCSI_Write10+0x2c>
  {
    return -1;
 800f1b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1b6:	e0d4      	b.n	800f362 <SCSI_Write10+0x1d6>
  }

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	2202      	movs	r2, #2
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	68f8      	ldr	r0, [r7, #12]
 800f1c6:	f001 f902 	bl	80103ce <USBD_CoreGetEPAdd>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	4b67      	ldr	r3, [pc, #412]	; (800f36c <SCSI_Write10+0x1e0>)
 800f1d0:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	7a1b      	ldrb	r3, [r3, #8]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f040 80bd 	bne.w	800f356 <SCSI_Write10+0x1ca>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f1e2:	699b      	ldr	r3, [r3, #24]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d10b      	bne.n	800f200 <SCSI_Write10+0x74>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f1ee:	7f59      	ldrb	r1, [r3, #29]
 800f1f0:	2320      	movs	r3, #32
 800f1f2:	2205      	movs	r2, #5
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	f7ff fd5d 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f1fe:	e0b0      	b.n	800f362 <SCSI_Write10+0x1d6>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f206:	7f1b      	ldrb	r3, [r3, #28]
 800f208:	b25b      	sxtb	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	da0b      	bge.n	800f226 <SCSI_Write10+0x9a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f214:	7f59      	ldrb	r1, [r3, #29]
 800f216:	2320      	movs	r3, #32
 800f218:	2205      	movs	r2, #5
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f7ff fd4a 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f220:	f04f 33ff 	mov.w	r3, #4294967295
 800f224:	e09d      	b.n	800f362 <SCSI_Write10+0x1d6>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	33b6      	adds	r3, #182	; 0xb6
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	4413      	add	r3, r2
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	7afa      	ldrb	r2, [r7, #11]
 800f23a:	4610      	mov	r0, r2
 800f23c:	4798      	blx	r3
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d008      	beq.n	800f256 <SCSI_Write10+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f244:	7af9      	ldrb	r1, [r7, #11]
 800f246:	233a      	movs	r3, #58	; 0x3a
 800f248:	2202      	movs	r2, #2
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f7ff fd32 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f250:	f04f 33ff 	mov.w	r3, #4294967295
 800f254:	e085      	b.n	800f362 <SCSI_Write10+0x1d6>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f25c:	68fa      	ldr	r2, [r7, #12]
 800f25e:	33b6      	adds	r3, #182	; 0xb6
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	4413      	add	r3, r2
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	7afa      	ldrb	r2, [r7, #11]
 800f26a:	4610      	mov	r0, r2
 800f26c:	4798      	blx	r3
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d008      	beq.n	800f286 <SCSI_Write10+0xfa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f274:	7af9      	ldrb	r1, [r7, #11]
 800f276:	2327      	movs	r3, #39	; 0x27
 800f278:	2202      	movs	r2, #2
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	f7ff fd1a 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f280:	f04f 33ff 	mov.w	r3, #4294967295
 800f284:	e06d      	b.n	800f362 <SCSI_Write10+0x1d6>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	3302      	adds	r3, #2
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	3303      	adds	r3, #3
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f296:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	3304      	adds	r3, #4
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f2a0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	3205      	adds	r2, #5
 800f2a6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f2a8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f2aa:	697a      	ldr	r2, [r7, #20]
 800f2ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f2b0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	3307      	adds	r3, #7
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	3208      	adds	r2, #8
 800f2be:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f2c8:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f2d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2da:	7af9      	ldrb	r1, [r7, #11]
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f000 f989 	bl	800f5f4 <SCSI_CheckAddressRange>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	da02      	bge.n	800f2ee <SCSI_Write10+0x162>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ec:	e039      	b.n	800f362 <SCSI_Write10+0x1d6>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2f6:	697a      	ldr	r2, [r7, #20]
 800f2f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f2fc:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800f300:	fb02 f303 	mul.w	r3, r2, r3
 800f304:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f30c:	699b      	ldr	r3, [r3, #24]
 800f30e:	693a      	ldr	r2, [r7, #16]
 800f310:	429a      	cmp	r2, r3
 800f312:	d00b      	beq.n	800f32c <SCSI_Write10+0x1a0>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f31a:	7f59      	ldrb	r1, [r3, #29]
 800f31c:	2320      	movs	r3, #32
 800f31e:	2205      	movs	r2, #5
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f7ff fcc7 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f326:	f04f 33ff 	mov.w	r3, #4294967295
 800f32a:	e01a      	b.n	800f362 <SCSI_Write10+0x1d6>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f332:	bf28      	it	cs
 800f334:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800f338:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	2201      	movs	r2, #1
 800f33e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f340:	4b0a      	ldr	r3, [pc, #40]	; (800f36c <SCSI_Write10+0x1e0>)
 800f342:	7819      	ldrb	r1, [r3, #0]
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	f103 0210 	add.w	r2, r3, #16
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f006 fdca 	bl	8015ee6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f352:	2300      	movs	r3, #0
 800f354:	e005      	b.n	800f362 <SCSI_Write10+0x1d6>
    return SCSI_ProcessWrite(pdev, lun);
 800f356:	7afb      	ldrb	r3, [r7, #11]
 800f358:	4619      	mov	r1, r3
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f000 fa1c 	bl	800f798 <SCSI_ProcessWrite>
 800f360:	4603      	mov	r3, r0
}
 800f362:	4618      	mov	r0, r3
 800f364:	3718      	adds	r7, #24
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	2400014d 	.word	0x2400014d

0800f370 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b086      	sub	sp, #24
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	460b      	mov	r3, r1
 800f37a:	607a      	str	r2, [r7, #4]
 800f37c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f384:	68fa      	ldr	r2, [r7, #12]
 800f386:	33b2      	adds	r3, #178	; 0xb2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	4413      	add	r3, r2
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d102      	bne.n	800f39c <SCSI_Write12+0x2c>
  {
    return -1;
 800f396:	f04f 33ff 	mov.w	r3, #4294967295
 800f39a:	e0e4      	b.n	800f566 <SCSI_Write12+0x1f6>
  }
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	2100      	movs	r1, #0
 800f3a8:	68f8      	ldr	r0, [r7, #12]
 800f3aa:	f001 f810 	bl	80103ce <USBD_CoreGetEPAdd>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	4b6f      	ldr	r3, [pc, #444]	; (800f570 <SCSI_Write12+0x200>)
 800f3b4:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	7a1b      	ldrb	r3, [r3, #8]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f040 80cd 	bne.w	800f55a <SCSI_Write12+0x1ea>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f3c6:	699b      	ldr	r3, [r3, #24]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d10b      	bne.n	800f3e4 <SCSI_Write12+0x74>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f3d2:	7f59      	ldrb	r1, [r3, #29]
 800f3d4:	2320      	movs	r3, #32
 800f3d6:	2205      	movs	r2, #5
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f7ff fc6b 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f3de:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e2:	e0c0      	b.n	800f566 <SCSI_Write12+0x1f6>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f3ea:	7f1b      	ldrb	r3, [r3, #28]
 800f3ec:	b25b      	sxtb	r3, r3
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	da0b      	bge.n	800f40a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f3f8:	7f59      	ldrb	r1, [r3, #29]
 800f3fa:	2320      	movs	r3, #32
 800f3fc:	2205      	movs	r2, #5
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f7ff fc58 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f404:	f04f 33ff 	mov.w	r3, #4294967295
 800f408:	e0ad      	b.n	800f566 <SCSI_Write12+0x1f6>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	33b6      	adds	r3, #182	; 0xb6
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	4413      	add	r3, r2
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	7afa      	ldrb	r2, [r7, #11]
 800f41e:	4610      	mov	r0, r2
 800f420:	4798      	blx	r3
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d00b      	beq.n	800f440 <SCSI_Write12+0xd0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f428:	7af9      	ldrb	r1, [r7, #11]
 800f42a:	233a      	movs	r3, #58	; 0x3a
 800f42c:	2202      	movs	r2, #2
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	f7ff fc40 	bl	800ecb4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	2205      	movs	r2, #5
 800f438:	721a      	strb	r2, [r3, #8]
      return -1;
 800f43a:	f04f 33ff 	mov.w	r3, #4294967295
 800f43e:	e092      	b.n	800f566 <SCSI_Write12+0x1f6>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	33b6      	adds	r3, #182	; 0xb6
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4413      	add	r3, r2
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	7afa      	ldrb	r2, [r7, #11]
 800f454:	4610      	mov	r0, r2
 800f456:	4798      	blx	r3
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00b      	beq.n	800f476 <SCSI_Write12+0x106>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f45e:	7af9      	ldrb	r1, [r7, #11]
 800f460:	2327      	movs	r3, #39	; 0x27
 800f462:	2202      	movs	r2, #2
 800f464:	68f8      	ldr	r0, [r7, #12]
 800f466:	f7ff fc25 	bl	800ecb4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	2205      	movs	r2, #5
 800f46e:	721a      	strb	r2, [r3, #8]
      return -1;
 800f470:	f04f 33ff 	mov.w	r3, #4294967295
 800f474:	e077      	b.n	800f566 <SCSI_Write12+0x1f6>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	3302      	adds	r3, #2
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	3303      	adds	r3, #3
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f486:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3304      	adds	r3, #4
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f490:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	3205      	adds	r2, #5
 800f496:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f498:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f49a:	697a      	ldr	r2, [r7, #20]
 800f49c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f4a0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	3306      	adds	r3, #6
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	3307      	adds	r3, #7
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f4b2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	3308      	adds	r3, #8
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f4bc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	3209      	adds	r2, #9
 800f4c2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f4c4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f4c6:	697a      	ldr	r2, [r7, #20]
 800f4c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f4cc:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f4d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4de:	7af9      	ldrb	r1, [r7, #11]
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f000 f887 	bl	800f5f4 <SCSI_CheckAddressRange>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	da02      	bge.n	800f4f2 <SCSI_Write12+0x182>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f0:	e039      	b.n	800f566 <SCSI_Write12+0x1f6>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4fa:	697a      	ldr	r2, [r7, #20]
 800f4fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f500:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800f504:	fb02 f303 	mul.w	r3, r2, r3
 800f508:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f510:	699b      	ldr	r3, [r3, #24]
 800f512:	693a      	ldr	r2, [r7, #16]
 800f514:	429a      	cmp	r2, r3
 800f516:	d00b      	beq.n	800f530 <SCSI_Write12+0x1c0>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f51e:	7f59      	ldrb	r1, [r3, #29]
 800f520:	2320      	movs	r3, #32
 800f522:	2205      	movs	r2, #5
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f7ff fbc5 	bl	800ecb4 <SCSI_SenseCode>
      return -1;
 800f52a:	f04f 33ff 	mov.w	r3, #4294967295
 800f52e:	e01a      	b.n	800f566 <SCSI_Write12+0x1f6>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f536:	bf28      	it	cs
 800f538:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800f53c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	2201      	movs	r2, #1
 800f542:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f544:	4b0a      	ldr	r3, [pc, #40]	; (800f570 <SCSI_Write12+0x200>)
 800f546:	7819      	ldrb	r1, [r3, #0]
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	f103 0210 	add.w	r2, r3, #16
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f006 fcc8 	bl	8015ee6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f556:	2300      	movs	r3, #0
 800f558:	e005      	b.n	800f566 <SCSI_Write12+0x1f6>
    return SCSI_ProcessWrite(pdev, lun);
 800f55a:	7afb      	ldrb	r3, [r7, #11]
 800f55c:	4619      	mov	r1, r3
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	f000 f91a 	bl	800f798 <SCSI_ProcessWrite>
 800f564:	4603      	mov	r3, r0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3718      	adds	r7, #24
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	2400014d 	.word	0x2400014d

0800f574 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b086      	sub	sp, #24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	460b      	mov	r3, r1
 800f57e:	607a      	str	r2, [r7, #4]
 800f580:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	33b2      	adds	r3, #178	; 0xb2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4413      	add	r3, r2
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d102      	bne.n	800f5a0 <SCSI_Verify10+0x2c>
  {
    return -1;
 800f59a:	f04f 33ff 	mov.w	r3, #4294967295
 800f59e:	e025      	b.n	800f5ec <SCSI_Verify10+0x78>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	f003 0302 	and.w	r3, r3, #2
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d008      	beq.n	800f5c0 <SCSI_Verify10+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f5ae:	7af9      	ldrb	r1, [r7, #11]
 800f5b0:	2324      	movs	r3, #36	; 0x24
 800f5b2:	2205      	movs	r2, #5
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f7ff fb7d 	bl	800ecb4 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f5be:	e015      	b.n	800f5ec <SCSI_Verify10+0x78>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f5c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5d0:	7af9      	ldrb	r1, [r7, #11]
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f000 f80e 	bl	800f5f4 <SCSI_CheckAddressRange>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	da02      	bge.n	800f5e4 <SCSI_Verify10+0x70>
  {
    return -1; /* error */
 800f5de:	f04f 33ff 	mov.w	r3, #4294967295
 800f5e2:	e003      	b.n	800f5ec <SCSI_Verify10+0x78>
  }

  hmsc->bot_data_length = 0U;
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	60da      	str	r2, [r3, #12]

  return 0;
 800f5ea:	2300      	movs	r3, #0
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3718      	adds	r7, #24
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b086      	sub	sp, #24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	607a      	str	r2, [r7, #4]
 800f5fe:	603b      	str	r3, [r7, #0]
 800f600:	460b      	mov	r3, r1
 800f602:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f60a:	68fa      	ldr	r2, [r7, #12]
 800f60c:	33b2      	adds	r3, #178	; 0xb2
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	4413      	add	r3, r2
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d102      	bne.n	800f622 <SCSI_CheckAddressRange+0x2e>
  {
    return -1;
 800f61c:	f04f 33ff 	mov.w	r3, #4294967295
 800f620:	e012      	b.n	800f648 <SCSI_CheckAddressRange+0x54>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	441a      	add	r2, r3
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f62e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f630:	429a      	cmp	r2, r3
 800f632:	d908      	bls.n	800f646 <SCSI_CheckAddressRange+0x52>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f634:	7af9      	ldrb	r1, [r7, #11]
 800f636:	2321      	movs	r3, #33	; 0x21
 800f638:	2205      	movs	r2, #5
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	f7ff fb3a 	bl	800ecb4 <SCSI_SenseCode>
    return -1;
 800f640:	f04f 33ff 	mov.w	r3, #4294967295
 800f644:	e000      	b.n	800f648 <SCSI_CheckAddressRange+0x54>
  }

  return 0;
 800f646:	2300      	movs	r3, #0
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3718      	adds	r7, #24
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f650:	b590      	push	{r4, r7, lr}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	460b      	mov	r3, r1
 800f65a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	33b2      	adds	r3, #178	; 0xb2
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	4413      	add	r3, r2
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d102      	bne.n	800f67a <SCSI_ProcessRead+0x2a>
  {
    return -1;
 800f674:	f04f 33ff 	mov.w	r3, #4294967295
 800f678:	e088      	b.n	800f78c <SCSI_ProcessRead+0x13c>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f688:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800f68c:	fb02 f303 	mul.w	r3, r2, r3
 800f690:	60bb      	str	r3, [r7, #8]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	2202      	movs	r2, #2
 800f69c:	2180      	movs	r1, #128	; 0x80
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fe95 	bl	80103ce <USBD_CoreGetEPAdd>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	4b3a      	ldr	r3, [pc, #232]	; (800f794 <SCSI_ProcessRead+0x144>)
 800f6aa:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6b2:	bf28      	it	cs
 800f6b4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800f6b8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	33b6      	adds	r3, #182	; 0xb6
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	4413      	add	r3, r2
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	691c      	ldr	r4, [r3, #16]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f103 0110 	add.w	r1, r3, #16
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f6d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f6e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	78f8      	ldrb	r0, [r7, #3]
 800f6f0:	47a0      	blx	r4
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	da08      	bge.n	800f70a <SCSI_ProcessRead+0xba>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f6f8:	78f9      	ldrb	r1, [r7, #3]
 800f6fa:	2311      	movs	r3, #17
 800f6fc:	2204      	movs	r2, #4
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f7ff fad8 	bl	800ecb4 <SCSI_SenseCode>
    return -1;
 800f704:	f04f 33ff 	mov.w	r3, #4294967295
 800f708:	e040      	b.n	800f78c <SCSI_ProcessRead+0x13c>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800f70a:	4b22      	ldr	r3, [pc, #136]	; (800f794 <SCSI_ProcessRead+0x144>)
 800f70c:	7819      	ldrb	r1, [r3, #0]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f103 0210 	add.w	r2, r3, #16
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f006 fbc4 	bl	8015ea4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f722:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f72a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f72e:	4619      	mov	r1, r3
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	fbb3 f3f1 	udiv	r3, r3, r1
 800f736:	4413      	add	r3, r2
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f73e:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f74e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f752:	4619      	mov	r1, r3
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	fbb3 f3f1 	udiv	r3, r3, r1
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f762:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f76a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	68fa      	ldr	r2, [r7, #12]
 800f772:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f776:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f780:	2b00      	cmp	r3, #0
 800f782:	d102      	bne.n	800f78a <SCSI_ProcessRead+0x13a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2203      	movs	r2, #3
 800f788:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3714      	adds	r7, #20
 800f790:	46bd      	mov	sp, r7
 800f792:	bd90      	pop	{r4, r7, pc}
 800f794:	2400014c 	.word	0x2400014c

0800f798 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f798:	b590      	push	{r4, r7, lr}
 800f79a:	b085      	sub	sp, #20
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	33b2      	adds	r3, #178	; 0xb2
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	4413      	add	r3, r2
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d102      	bne.n	800f7c2 <SCSI_ProcessWrite+0x2a>
  {
    return -1;
 800f7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f7c0:	e09b      	b.n	800f8fa <SCSI_ProcessWrite+0x162>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7ca:	68fa      	ldr	r2, [r7, #12]
 800f7cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f7d0:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800f7d4:	fb02 f303 	mul.w	r3, r2, r3
 800f7d8:	60bb      	str	r3, [r7, #8]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	2202      	movs	r2, #2
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f000 fdf1 	bl	80103ce <USBD_CoreGetEPAdd>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	4b44      	ldr	r3, [pc, #272]	; (800f904 <SCSI_ProcessWrite+0x16c>)
 800f7f2:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7fa:	bf28      	it	cs
 800f7fc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800f800:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	33b6      	adds	r3, #182	; 0xb6
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	4413      	add	r3, r2
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	695c      	ldr	r4, [r3, #20]
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f103 0110 	add.w	r1, r3, #16
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f820:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f828:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f82c:	4618      	mov	r0, r3
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f834:	b29b      	uxth	r3, r3
 800f836:	78f8      	ldrb	r0, [r7, #3]
 800f838:	47a0      	blx	r4
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	da08      	bge.n	800f852 <SCSI_ProcessWrite+0xba>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f840:	78f9      	ldrb	r1, [r7, #3]
 800f842:	2303      	movs	r3, #3
 800f844:	2204      	movs	r2, #4
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7ff fa34 	bl	800ecb4 <SCSI_SenseCode>
    return -1;
 800f84c:	f04f 33ff 	mov.w	r3, #4294967295
 800f850:	e053      	b.n	800f8fa <SCSI_ProcessWrite+0x162>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f858:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f860:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f864:	4619      	mov	r1, r3
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	fbb3 f3f1 	udiv	r3, r3, r1
 800f86c:	4413      	add	r3, r2
 800f86e:	68fa      	ldr	r2, [r7, #12]
 800f870:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f874:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f87c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f884:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f888:	4619      	mov	r1, r3
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f890:	1ad3      	subs	r3, r2, r3
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f898:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f8a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f8ac:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d104      	bne.n	800f8c4 <SCSI_ProcessWrite+0x12c>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f7fe fbb3 	bl	800e028 <MSC_BOT_SendCSW>
 800f8c2:	e019      	b.n	800f8f8 <SCSI_ProcessWrite+0x160>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f8ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800f8d2:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800f8d6:	fb02 f303 	mul.w	r3, r2, r3
 800f8da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8de:	bf28      	it	cs
 800f8e0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800f8e4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f8e6:	4b07      	ldr	r3, [pc, #28]	; (800f904 <SCSI_ProcessWrite+0x16c>)
 800f8e8:	7819      	ldrb	r1, [r3, #0]
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f103 0210 	add.w	r2, r3, #16
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f006 faf7 	bl	8015ee6 <USBD_LL_PrepareReceive>
  }

  return 0;
 800f8f8:	2300      	movs	r3, #0
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3714      	adds	r7, #20
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd90      	pop	{r4, r7, pc}
 800f902:	bf00      	nop
 800f904:	2400014d 	.word	0x2400014d

0800f908 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f908:	b480      	push	{r7}
 800f90a:	b087      	sub	sp, #28
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	4613      	mov	r3, r2
 800f914:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f916:	88fb      	ldrh	r3, [r7, #6]
 800f918:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d102      	bne.n	800f926 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800f920:	f04f 33ff 	mov.w	r3, #4294967295
 800f924:	e013      	b.n	800f94e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800f926:	8afa      	ldrh	r2, [r7, #22]
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f92c:	e00b      	b.n	800f946 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800f92e:	8afb      	ldrh	r3, [r7, #22]
 800f930:	3b01      	subs	r3, #1
 800f932:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f934:	8afb      	ldrh	r3, [r7, #22]
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	441a      	add	r2, r3
 800f93a:	8afb      	ldrh	r3, [r7, #22]
 800f93c:	7811      	ldrb	r1, [r2, #0]
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	4413      	add	r3, r2
 800f942:	460a      	mov	r2, r1
 800f944:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f946:	8afb      	ldrh	r3, [r7, #22]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d1f0      	bne.n	800f92e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800f94c:	2300      	movs	r3, #0
}
 800f94e:	4618      	mov	r0, r3
 800f950:	371c      	adds	r7, #28
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b086      	sub	sp, #24
 800f95e:	af00      	add	r7, sp, #0
 800f960:	60f8      	str	r0, [r7, #12]
 800f962:	60b9      	str	r1, [r7, #8]
 800f964:	4613      	mov	r3, r2
 800f966:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d101      	bne.n	800f972 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f96e:	2303      	movs	r3, #3
 800f970:	e040      	b.n	800f9f4 <USBD_Init+0x9a>
  }

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800f972:	2300      	movs	r3, #0
 800f974:	617b      	str	r3, [r7, #20]
 800f976:	e022      	b.n	800f9be <USBD_Init+0x64>
  {
    /* Unlink previous class*/
    pdev->pClass[i] = NULL;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	697a      	ldr	r2, [r7, #20]
 800f97c:	32ae      	adds	r2, #174	; 0xae
 800f97e:	2100      	movs	r1, #0
 800f980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pUserData[i] = NULL;
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	33b6      	adds	r3, #182	; 0xb6
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4413      	add	r3, r2
 800f98e:	2200      	movs	r2, #0
 800f990:	605a      	str	r2, [r3, #4]

    /* Set class as inactive */
    pdev->tclasslist[i].Active = 0;
 800f992:	68f9      	ldr	r1, [r7, #12]
 800f994:	697a      	ldr	r2, [r7, #20]
 800f996:	4613      	mov	r3, r2
 800f998:	00db      	lsls	r3, r3, #3
 800f99a:	1a9b      	subs	r3, r3, r2
 800f99c:	00db      	lsls	r3, r3, #3
 800f99e:	440b      	add	r3, r1
 800f9a0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	601a      	str	r2, [r3, #0]
    pdev->NumClasses = 0;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
    pdev->classId = 0;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	617b      	str	r3, [r7, #20]
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	2b03      	cmp	r3, #3
 800f9c2:	d9d9      	bls.n	800f978 <USBD_Init+0x1e>
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
  pdev->pUserData[0] = NULL;
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d003      	beq.n	800f9da <USBD_Init+0x80>
  {
    pdev->pDesc = pdesc;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	68ba      	ldr	r2, [r7, #8]
 800f9d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	79fa      	ldrb	r2, [r7, #7]
 800f9e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f9e8:	68f8      	ldr	r0, [r7, #12]
 800f9ea:	f006 f901 	bl	8015bf0 <USBD_LL_Init>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	74fb      	strb	r3, [r7, #19]

  return ret;
 800f9f2:	7cfb      	ldrb	r3, [r7, #19]
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3718      	adds	r7, #24
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <USBD_RegisterClassComposite>:
  * @param  EpAddr: Endpoint Address handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClassComposite(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass,
                                                USBD_CompositeClassTypeDef classtype, uint8_t *EpAddr)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b086      	sub	sp, #24
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	603b      	str	r3, [r7, #0]
 800fa08:	4613      	mov	r3, r2
 800fa0a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	75fb      	strb	r3, [r7, #23]
  uint16_t len = 0U;
 800fa10:	2300      	movs	r3, #0
 800fa12:	82bb      	strh	r3, [r7, #20]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fa1a:	2b03      	cmp	r3, #3
 800fa1c:	d835      	bhi.n	800fa8a <USBD_RegisterClassComposite+0x8e>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800fa24:	2b03      	cmp	r3, #3
 800fa26:	d830      	bhi.n	800fa8a <USBD_RegisterClassComposite+0x8e>
  {
    if ((uint32_t)pclass != 0U)
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d02b      	beq.n	800fa86 <USBD_RegisterClassComposite+0x8a>
    {
      /* Link the class to the USB Device handle */
      pdev->pClass[pdev->classId] = pclass;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	32ae      	adds	r2, #174	; 0xae
 800fa38:	68b9      	ldr	r1, [r7, #8]
 800fa3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      ret = USBD_OK;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	75fb      	strb	r3, [r7, #23]

      pdev->tclasslist[pdev->classId].EpAdd = EpAddr;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800fa48:	68f9      	ldr	r1, [r7, #12]
 800fa4a:	4613      	mov	r3, r2
 800fa4c:	00db      	lsls	r3, r3, #3
 800fa4e:	1a9b      	subs	r3, r3, r2
 800fa50:	00db      	lsls	r3, r3, #3
 800fa52:	440b      	add	r3, r1
 800fa54:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800fa58:	683a      	ldr	r2, [r7, #0]
 800fa5a:	601a      	str	r2, [r3, #0]

      /* Call the composite class builder */
      (void)USBD_CMPSIT_AddClass(pdev, pclass, classtype, 0);
 800fa5c:	79fa      	ldrb	r2, [r7, #7]
 800fa5e:	2300      	movs	r3, #0
 800fa60:	68b9      	ldr	r1, [r7, #8]
 800fa62:	68f8      	ldr	r0, [r7, #12]
 800fa64:	f7fd fc16 	bl	800d294 <USBD_CMPSIT_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fa6e:	1c5a      	adds	r2, r3, #1
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
      pdev->NumClasses ++;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800fa7c:	1c5a      	adds	r2, r3, #1
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 800fa84:	e001      	b.n	800fa8a <USBD_RegisterClassComposite+0x8e>
    else
    {
#if (USBD_DEBUG_LEVEL > 1U)
      USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
      ret = USBD_FAIL;
 800fa86:	2303      	movs	r3, #3
 800fa88:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (ret == USBD_OK)
 800fa8a:	7dfb      	ldrb	r3, [r7, #23]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d109      	bne.n	800faa4 <USBD_RegisterClassComposite+0xa8>
  {
    /* Get Device Configuration Descriptor */
#ifdef USE_USB_HS
    pdev->pConfDesc = USBD_CMPSIT.GetHSConfigDescriptor(&len);
#else /* Default USE_USB_FS */
    pdev->pConfDesc = USBD_CMPSIT.GetFSConfigDescriptor(&len);
 800fa90:	4b07      	ldr	r3, [pc, #28]	; (800fab0 <USBD_RegisterClassComposite+0xb4>)
 800fa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa94:	f107 0214 	add.w	r2, r7, #20
 800fa98:	4610      	mov	r0, r2
 800fa9a:	4798      	blx	r3
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
#endif /* USE_USB_FS */
  }

  return ret;
 800faa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3718      	adds	r7, #24
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	24000060 	.word	0x24000060

0800fab4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2200      	movs	r2, #0
 800fac0:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f006 f8e5 	bl	8015c94 <USBD_LL_Start>
 800faca:	4603      	mov	r3, r0
}
 800facc:	4618      	mov	r0, r3
 800face:	3708      	adds	r7, #8
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fadc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fade:	4618      	mov	r0, r3
 800fae0:	370c      	adds	r7, #12
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr

0800faea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b084      	sub	sp, #16
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
 800faf2:	460b      	mov	r3, r1
 800faf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800faf6:	2300      	movs	r3, #0
 800faf8:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800fafa:	2300      	movs	r3, #0
 800fafc:	60bb      	str	r3, [r7, #8]
 800fafe:	e028      	b.n	800fb52 <USBD_SetClassConfig+0x68>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800fb00:	6879      	ldr	r1, [r7, #4]
 800fb02:	68ba      	ldr	r2, [r7, #8]
 800fb04:	4613      	mov	r3, r2
 800fb06:	00db      	lsls	r3, r3, #3
 800fb08:	1a9b      	subs	r3, r3, r2
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	440b      	add	r3, r1
 800fb0e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2b01      	cmp	r3, #1
 800fb16:	d119      	bne.n	800fb4c <USBD_SetClassConfig+0x62>
    {
      if (pdev->pClass[i] != NULL)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	68ba      	ldr	r2, [r7, #8]
 800fb1c:	32ae      	adds	r2, #174	; 0xae
 800fb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d012      	beq.n	800fb4c <USBD_SetClassConfig+0x62>
      {
        pdev->classId = i;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Set configuration  and Start the Class*/
        if (pdev->pClass[i]->Init(pdev, cfgidx) != 0U)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	68ba      	ldr	r2, [r7, #8]
 800fb32:	32ae      	adds	r2, #174	; 0xae
 800fb34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	78fa      	ldrb	r2, [r7, #3]
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	4798      	blx	r3
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d001      	beq.n	800fb4c <USBD_SetClassConfig+0x62>
        {
          ret = USBD_FAIL;
 800fb48:	2303      	movs	r3, #3
 800fb4a:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	60bb      	str	r3, [r7, #8]
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	2b03      	cmp	r3, #3
 800fb56:	d9d3      	bls.n	800fb00 <USBD_SetClassConfig+0x16>
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b084      	sub	sp, #16
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800fb72:	2300      	movs	r3, #0
 800fb74:	60bb      	str	r3, [r7, #8]
 800fb76:	e028      	b.n	800fbca <USBD_ClrClassConfig+0x68>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800fb78:	6879      	ldr	r1, [r7, #4]
 800fb7a:	68ba      	ldr	r2, [r7, #8]
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	00db      	lsls	r3, r3, #3
 800fb80:	1a9b      	subs	r3, r3, r2
 800fb82:	00db      	lsls	r3, r3, #3
 800fb84:	440b      	add	r3, r1
 800fb86:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d119      	bne.n	800fbc4 <USBD_ClrClassConfig+0x62>
    {
      if (pdev->pClass[i] != NULL)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	32ae      	adds	r2, #174	; 0xae
 800fb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d012      	beq.n	800fbc4 <USBD_ClrClassConfig+0x62>
      {
        pdev->classId = i;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	68ba      	ldr	r2, [r7, #8]
 800fba2:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process */
        if (pdev->pClass[i]->DeInit(pdev, cfgidx) != 0U)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	68ba      	ldr	r2, [r7, #8]
 800fbaa:	32ae      	adds	r2, #174	; 0xae
 800fbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb0:	685b      	ldr	r3, [r3, #4]
 800fbb2:	78fa      	ldrb	r2, [r7, #3]
 800fbb4:	4611      	mov	r1, r2
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	4798      	blx	r3
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d001      	beq.n	800fbc4 <USBD_ClrClassConfig+0x62>
        {
          ret = USBD_FAIL;
 800fbc0:	2303      	movs	r3, #3
 800fbc2:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	60bb      	str	r3, [r7, #8]
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	2b03      	cmp	r3, #3
 800fbce:	d9d3      	bls.n	800fb78 <USBD_ClrClassConfig+0x16>
  {
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3710      	adds	r7, #16
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b084      	sub	sp, #16
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
 800fbe2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fbea:	6839      	ldr	r1, [r7, #0]
 800fbec:	4618      	mov	r0, r3
 800fbee:	f001 fa5a 	bl	80110a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fc00:	461a      	mov	r2, r3
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fc0e:	f003 031f 	and.w	r3, r3, #31
 800fc12:	2b02      	cmp	r3, #2
 800fc14:	d01a      	beq.n	800fc4c <USBD_LL_SetupStage+0x72>
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	d822      	bhi.n	800fc60 <USBD_LL_SetupStage+0x86>
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d002      	beq.n	800fc24 <USBD_LL_SetupStage+0x4a>
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d00a      	beq.n	800fc38 <USBD_LL_SetupStage+0x5e>
 800fc22:	e01d      	b.n	800fc60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 fc4d 	bl	80104cc <USBD_StdDevReq>
 800fc32:	4603      	mov	r3, r0
 800fc34:	73fb      	strb	r3, [r7, #15]
      break;
 800fc36:	e020      	b.n	800fc7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fc3e:	4619      	mov	r1, r3
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 fcb5 	bl	80105b0 <USBD_StdItfReq>
 800fc46:	4603      	mov	r3, r0
 800fc48:	73fb      	strb	r3, [r7, #15]
      break;
 800fc4a:	e016      	b.n	800fc7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fc52:	4619      	mov	r1, r3
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f000 fd17 	bl	8010688 <USBD_StdEPReq>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	73fb      	strb	r3, [r7, #15]
      break;
 800fc5e:	e00c      	b.n	800fc7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fc66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f006 f88f 	bl	8015d92 <USBD_LL_StallEP>
 800fc74:	4603      	mov	r3, r0
 800fc76:	73fb      	strb	r3, [r7, #15]
      break;
 800fc78:	bf00      	nop
  }

  return ret;
 800fc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	607a      	str	r2, [r7, #4]
 800fc90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fc92:	2300      	movs	r3, #0
 800fc94:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fc96:	7afb      	ldrb	r3, [r7, #11]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d16e      	bne.n	800fd7a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fca2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fcaa:	2b03      	cmp	r3, #3
 800fcac:	f040 8098 	bne.w	800fde0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	689a      	ldr	r2, [r3, #8]
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d913      	bls.n	800fce4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	689a      	ldr	r2, [r3, #8]
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	1ad2      	subs	r2, r2, r3
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	68da      	ldr	r2, [r3, #12]
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	689b      	ldr	r3, [r3, #8]
 800fcd2:	4293      	cmp	r3, r2
 800fcd4:	bf28      	it	cs
 800fcd6:	4613      	movcs	r3, r2
 800fcd8:	461a      	mov	r2, r3
 800fcda:	6879      	ldr	r1, [r7, #4]
 800fcdc:	68f8      	ldr	r0, [r7, #12]
 800fcde:	f001 fad6 	bl	801128e <USBD_CtlContinueRx>
 800fce2:	e07d      	b.n	800fde0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fcea:	f003 031f 	and.w	r3, r3, #31
 800fcee:	2b02      	cmp	r3, #2
 800fcf0:	d014      	beq.n	800fd1c <USBD_LL_DataOutStage+0x98>
 800fcf2:	2b02      	cmp	r3, #2
 800fcf4:	d81d      	bhi.n	800fd32 <USBD_LL_DataOutStage+0xae>
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d002      	beq.n	800fd00 <USBD_LL_DataOutStage+0x7c>
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	d003      	beq.n	800fd06 <USBD_LL_DataOutStage+0x82>
 800fcfe:	e018      	b.n	800fd32 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fd00:	2300      	movs	r3, #0
 800fd02:	75bb      	strb	r3, [r7, #22]
            break;
 800fd04:	e018      	b.n	800fd38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	4619      	mov	r1, r3
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f000 fabf 	bl	8010294 <USBD_CoreFindIF>
 800fd16:	4603      	mov	r3, r0
 800fd18:	75bb      	strb	r3, [r7, #22]
            break;
 800fd1a:	e00d      	b.n	800fd38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	4619      	mov	r1, r3
 800fd26:	68f8      	ldr	r0, [r7, #12]
 800fd28:	f000 fb03 	bl	8010332 <USBD_CoreFindEP>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	75bb      	strb	r3, [r7, #22]
            break;
 800fd30:	e002      	b.n	800fd38 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fd32:	2300      	movs	r3, #0
 800fd34:	75bb      	strb	r3, [r7, #22]
            break;
 800fd36:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fd38:	7dbb      	ldrb	r3, [r7, #22]
 800fd3a:	2b03      	cmp	r3, #3
 800fd3c:	d819      	bhi.n	800fd72 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	2b03      	cmp	r3, #3
 800fd48:	d113      	bne.n	800fd72 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fd4a:	7dba      	ldrb	r2, [r7, #22]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	32ae      	adds	r2, #174	; 0xae
 800fd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd54:	691b      	ldr	r3, [r3, #16]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00b      	beq.n	800fd72 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fd5a:	7dba      	ldrb	r2, [r7, #22]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fd62:	7dba      	ldrb	r2, [r7, #22]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	32ae      	adds	r2, #174	; 0xae
 800fd68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f001 fa9c 	bl	80112b0 <USBD_CtlSendStatus>
 800fd78:	e032      	b.n	800fde0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fd7a:	7afb      	ldrb	r3, [r7, #11]
 800fd7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	4619      	mov	r1, r3
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f000 fad4 	bl	8010332 <USBD_CoreFindEP>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fd8e:	7dbb      	ldrb	r3, [r7, #22]
 800fd90:	2bff      	cmp	r3, #255	; 0xff
 800fd92:	d025      	beq.n	800fde0 <USBD_LL_DataOutStage+0x15c>
 800fd94:	7dbb      	ldrb	r3, [r7, #22]
 800fd96:	2b03      	cmp	r3, #3
 800fd98:	d822      	bhi.n	800fde0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	2b03      	cmp	r3, #3
 800fda4:	d117      	bne.n	800fdd6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fda6:	7dba      	ldrb	r2, [r7, #22]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	32ae      	adds	r2, #174	; 0xae
 800fdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdb0:	699b      	ldr	r3, [r3, #24]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d00f      	beq.n	800fdd6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fdb6:	7dba      	ldrb	r2, [r7, #22]
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fdbe:	7dba      	ldrb	r2, [r7, #22]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	32ae      	adds	r2, #174	; 0xae
 800fdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdc8:	699b      	ldr	r3, [r3, #24]
 800fdca:	7afa      	ldrb	r2, [r7, #11]
 800fdcc:	4611      	mov	r1, r2
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	4798      	blx	r3
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fdd6:	7dfb      	ldrb	r3, [r7, #23]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d001      	beq.n	800fde0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fddc:	7dfb      	ldrb	r3, [r7, #23]
 800fdde:	e000      	b.n	800fde2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fde0:	2300      	movs	r3, #0
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3718      	adds	r7, #24
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}

0800fdea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fdea:	b580      	push	{r7, lr}
 800fdec:	b086      	sub	sp, #24
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	60f8      	str	r0, [r7, #12]
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	607a      	str	r2, [r7, #4]
 800fdf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fdf8:	7afb      	ldrb	r3, [r7, #11]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d16f      	bne.n	800fede <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	3314      	adds	r3, #20
 800fe02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe0a:	2b02      	cmp	r3, #2
 800fe0c:	d15a      	bne.n	800fec4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	689a      	ldr	r2, [r3, #8]
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	68db      	ldr	r3, [r3, #12]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d914      	bls.n	800fe44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	689a      	ldr	r2, [r3, #8]
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	1ad2      	subs	r2, r2, r3
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	6879      	ldr	r1, [r7, #4]
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	f001 f9fe 	bl	8011232 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe36:	2300      	movs	r3, #0
 800fe38:	2200      	movs	r2, #0
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f006 f852 	bl	8015ee6 <USBD_LL_PrepareReceive>
 800fe42:	e03f      	b.n	800fec4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	68da      	ldr	r2, [r3, #12]
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d11c      	bne.n	800fe8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	685a      	ldr	r2, [r3, #4]
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d316      	bcc.n	800fe8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	685a      	ldr	r2, [r3, #4]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d20f      	bcs.n	800fe8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	2100      	movs	r1, #0
 800fe6e:	68f8      	ldr	r0, [r7, #12]
 800fe70:	f001 f9df 	bl	8011232 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	2200      	movs	r2, #0
 800fe80:	2100      	movs	r1, #0
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f006 f82f 	bl	8015ee6 <USBD_LL_PrepareReceive>
 800fe88:	e01c      	b.n	800fec4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	d10f      	bne.n	800feb6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe9c:	68db      	ldr	r3, [r3, #12]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d009      	beq.n	800feb6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	2200      	movs	r2, #0
 800fea6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
              pdev->pClass[0]->EP0_TxSent(pdev);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	68f8      	ldr	r0, [r7, #12]
 800feb4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800feb6:	2180      	movs	r1, #128	; 0x80
 800feb8:	68f8      	ldr	r0, [r7, #12]
 800feba:	f005 ff6a 	bl	8015d92 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f001 fa09 	bl	80112d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d03a      	beq.n	800ff44 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fece:	68f8      	ldr	r0, [r7, #12]
 800fed0:	f7ff fe00 	bl	800fad4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2200      	movs	r2, #0
 800fed8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fedc:	e032      	b.n	800ff44 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fede:	7afb      	ldrb	r3, [r7, #11]
 800fee0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	4619      	mov	r1, r3
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f000 fa22 	bl	8010332 <USBD_CoreFindEP>
 800feee:	4603      	mov	r3, r0
 800fef0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fef2:	7dfb      	ldrb	r3, [r7, #23]
 800fef4:	2bff      	cmp	r3, #255	; 0xff
 800fef6:	d025      	beq.n	800ff44 <USBD_LL_DataInStage+0x15a>
 800fef8:	7dfb      	ldrb	r3, [r7, #23]
 800fefa:	2b03      	cmp	r3, #3
 800fefc:	d822      	bhi.n	800ff44 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	2b03      	cmp	r3, #3
 800ff08:	d11c      	bne.n	800ff44 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ff0a:	7dfa      	ldrb	r2, [r7, #23]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	32ae      	adds	r2, #174	; 0xae
 800ff10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff14:	695b      	ldr	r3, [r3, #20]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d014      	beq.n	800ff44 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ff1a:	7dfa      	ldrb	r2, [r7, #23]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ff22:	7dfa      	ldrb	r2, [r7, #23]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	32ae      	adds	r2, #174	; 0xae
 800ff28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff2c:	695b      	ldr	r3, [r3, #20]
 800ff2e:	7afa      	ldrb	r2, [r7, #11]
 800ff30:	4611      	mov	r1, r2
 800ff32:	68f8      	ldr	r0, [r7, #12]
 800ff34:	4798      	blx	r3
 800ff36:	4603      	mov	r3, r0
 800ff38:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ff3a:	7dbb      	ldrb	r3, [r7, #22]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ff40:	7dbb      	ldrb	r3, [r7, #22]
 800ff42:	e000      	b.n	800ff46 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ff44:	2300      	movs	r3, #0
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3718      	adds	r7, #24
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	b084      	sub	sp, #16
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff56:	2300      	movs	r3, #0
 800ff58:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2200      	movs	r2, #0
 800ff66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800ff80:	2300      	movs	r3, #0
 800ff82:	60bb      	str	r3, [r7, #8]
 800ff84:	e032      	b.n	800ffec <USBD_LL_Reset+0x9e>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800ff86:	6879      	ldr	r1, [r7, #4]
 800ff88:	68ba      	ldr	r2, [r7, #8]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	00db      	lsls	r3, r3, #3
 800ff8e:	1a9b      	subs	r3, r3, r2
 800ff90:	00db      	lsls	r3, r3, #3
 800ff92:	440b      	add	r3, r1
 800ff94:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d123      	bne.n	800ffe6 <USBD_LL_Reset+0x98>
    {
      if (pdev->pClass[i] != NULL)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	68ba      	ldr	r2, [r7, #8]
 800ffa2:	32ae      	adds	r2, #174	; 0xae
 800ffa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d01c      	beq.n	800ffe6 <USBD_LL_Reset+0x98>
      {
        pdev->classId = i;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	68ba      	ldr	r2, [r7, #8]
 800ffb0:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process*/

        if (pdev->pClass[i]->DeInit != NULL)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	68ba      	ldr	r2, [r7, #8]
 800ffb8:	32ae      	adds	r2, #174	; 0xae
 800ffba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d010      	beq.n	800ffe6 <USBD_LL_Reset+0x98>
        {
          if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	32ae      	adds	r2, #174	; 0xae
 800ffca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	6852      	ldr	r2, [r2, #4]
 800ffd4:	b2d2      	uxtb	r2, r2
 800ffd6:	4611      	mov	r1, r2
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	4798      	blx	r3
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <USBD_LL_Reset+0x98>
          {
            ret = USBD_FAIL;
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	60bb      	str	r3, [r7, #8]
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	2b03      	cmp	r3, #3
 800fff0:	d9c9      	bls.n	800ff86 <USBD_LL_Reset+0x38>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fff2:	2340      	movs	r3, #64	; 0x40
 800fff4:	2200      	movs	r2, #0
 800fff6:	2100      	movs	r1, #0
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f005 fe66 	bl	8015cca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2201      	movs	r2, #1
 8010002:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2240      	movs	r2, #64	; 0x40
 801000a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801000e:	2340      	movs	r3, #64	; 0x40
 8010010:	2200      	movs	r2, #0
 8010012:	2180      	movs	r1, #128	; 0x80
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f005 fe58 	bl	8015cca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2201      	movs	r2, #1
 801001e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2240      	movs	r2, #64	; 0x40
 8010024:	621a      	str	r2, [r3, #32]

  return ret;
 8010026:	7bfb      	ldrb	r3, [r7, #15]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3710      	adds	r7, #16
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010030:	b480      	push	{r7}
 8010032:	b083      	sub	sp, #12
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	460b      	mov	r3, r1
 801003a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	78fa      	ldrb	r2, [r7, #3]
 8010040:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010050:	b480      	push	{r7}
 8010052:	b083      	sub	sp, #12
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801005e:	b2db      	uxtb	r3, r3
 8010060:	2b04      	cmp	r3, #4
 8010062:	d006      	beq.n	8010072 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801006a:	b2da      	uxtb	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2204      	movs	r2, #4
 8010076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801007a:	2300      	movs	r3, #0
}
 801007c:	4618      	mov	r0, r3
 801007e:	370c      	adds	r7, #12
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010096:	b2db      	uxtb	r3, r3
 8010098:	2b04      	cmp	r3, #4
 801009a:	d106      	bne.n	80100aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80100a2:	b2da      	uxtb	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80100aa:	2300      	movs	r3, #0
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	2b03      	cmp	r3, #3
 80100ca:	d12f      	bne.n	801012c <USBD_LL_SOF+0x74>
  {
#ifdef USE_USBD_COMPOSITE
    /* Parse the table of classes in use */
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80100cc:	2300      	movs	r3, #0
 80100ce:	60fb      	str	r3, [r7, #12]
 80100d0:	e029      	b.n	8010126 <USBD_LL_SOF+0x6e>
    {
      /* Check if current class is in use */
      if ((pdev->tclasslist[i].Active) == 1U)
 80100d2:	6879      	ldr	r1, [r7, #4]
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	4613      	mov	r3, r2
 80100d8:	00db      	lsls	r3, r3, #3
 80100da:	1a9b      	subs	r3, r3, r2
 80100dc:	00db      	lsls	r3, r3, #3
 80100de:	440b      	add	r3, r1
 80100e0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2b01      	cmp	r3, #1
 80100e8:	d11a      	bne.n	8010120 <USBD_LL_SOF+0x68>
      {
        if (pdev->pClass[i] != NULL)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	32ae      	adds	r2, #174	; 0xae
 80100f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d013      	beq.n	8010120 <USBD_LL_SOF+0x68>
        {
          if (pdev->pClass[i]->SOF != NULL)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	68fa      	ldr	r2, [r7, #12]
 80100fc:	32ae      	adds	r2, #174	; 0xae
 80100fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010102:	69db      	ldr	r3, [r3, #28]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d00b      	beq.n	8010120 <USBD_LL_SOF+0x68>
          {
            pdev->classId = i;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
            (void)pdev->pClass[i]->SOF(pdev);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	68fa      	ldr	r2, [r7, #12]
 8010114:	32ae      	adds	r2, #174	; 0xae
 8010116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801011a:	69db      	ldr	r3, [r3, #28]
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	4798      	blx	r3
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	3301      	adds	r3, #1
 8010124:	60fb      	str	r3, [r7, #12]
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2b03      	cmp	r3, #3
 801012a:	d9d2      	bls.n	80100d2 <USBD_LL_SOF+0x1a>
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801012c:	2300      	movs	r3, #0
}
 801012e:	4618      	mov	r0, r3
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}

08010136 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010136:	b580      	push	{r7, lr}
 8010138:	b082      	sub	sp, #8
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
 801013e:	460b      	mov	r3, r1
 8010140:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	32ae      	adds	r2, #174	; 0xae
 801014c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d101      	bne.n	8010158 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010154:	2303      	movs	r3, #3
 8010156:	e01c      	b.n	8010192 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801015e:	b2db      	uxtb	r3, r3
 8010160:	2b03      	cmp	r3, #3
 8010162:	d115      	bne.n	8010190 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	32ae      	adds	r2, #174	; 0xae
 801016e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010172:	6a1b      	ldr	r3, [r3, #32]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00b      	beq.n	8010190 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	32ae      	adds	r2, #174	; 0xae
 8010182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010186:	6a1b      	ldr	r3, [r3, #32]
 8010188:	78fa      	ldrb	r2, [r7, #3]
 801018a:	4611      	mov	r1, r2
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010190:	2300      	movs	r3, #0
}
 8010192:	4618      	mov	r0, r3
 8010194:	3708      	adds	r7, #8
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b082      	sub	sp, #8
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
 80101a2:	460b      	mov	r3, r1
 80101a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	32ae      	adds	r2, #174	; 0xae
 80101b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d101      	bne.n	80101bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80101b8:	2303      	movs	r3, #3
 80101ba:	e01c      	b.n	80101f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101c2:	b2db      	uxtb	r3, r3
 80101c4:	2b03      	cmp	r3, #3
 80101c6:	d115      	bne.n	80101f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	32ae      	adds	r2, #174	; 0xae
 80101d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00b      	beq.n	80101f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	32ae      	adds	r2, #174	; 0xae
 80101e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ec:	78fa      	ldrb	r2, [r7, #3]
 80101ee:	4611      	mov	r1, r2
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80101f4:	2300      	movs	r3, #0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80101fe:	b480      	push	{r7}
 8010200:	b083      	sub	sp, #12
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010206:	2300      	movs	r3, #0
}
 8010208:	4618      	mov	r0, r3
 801020a:	370c      	adds	r7, #12
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801021c:	2300      	movs	r3, #0
 801021e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2201      	movs	r2, #1
 8010224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8010228:	2300      	movs	r3, #0
 801022a:	60bb      	str	r3, [r7, #8]
 801022c:	e02a      	b.n	8010284 <USBD_LL_DevDisconnected+0x70>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 801022e:	6879      	ldr	r1, [r7, #4]
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	4613      	mov	r3, r2
 8010234:	00db      	lsls	r3, r3, #3
 8010236:	1a9b      	subs	r3, r3, r2
 8010238:	00db      	lsls	r3, r3, #3
 801023a:	440b      	add	r3, r1
 801023c:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d11b      	bne.n	801027e <USBD_LL_DevDisconnected+0x6a>
    {
      if (pdev->pClass[i] != NULL)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	68ba      	ldr	r2, [r7, #8]
 801024a:	32ae      	adds	r2, #174	; 0xae
 801024c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d014      	beq.n	801027e <USBD_LL_DevDisconnected+0x6a>
      {
        pdev->classId = i;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	68ba      	ldr	r2, [r7, #8]
 8010258:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process*/
        if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	32ae      	adds	r2, #174	; 0xae
 8010262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	6852      	ldr	r2, [r2, #4]
 801026c:	b2d2      	uxtb	r2, r2
 801026e:	4611      	mov	r1, r2
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	4798      	blx	r3
 8010274:	4603      	mov	r3, r0
 8010276:	2b00      	cmp	r3, #0
 8010278:	d001      	beq.n	801027e <USBD_LL_DevDisconnected+0x6a>
        {
          ret = USBD_FAIL;
 801027a:	2303      	movs	r3, #3
 801027c:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	3301      	adds	r3, #1
 8010282:	60bb      	str	r3, [r7, #8]
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	2b03      	cmp	r3, #3
 8010288:	d9d1      	bls.n	801022e <USBD_LL_DevDisconnected+0x1a>
      ret = USBD_FAIL;
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801028a:	7bfb      	ldrb	r3, [r7, #15]
}
 801028c:	4618      	mov	r0, r3
 801028e:	3710      	adds	r7, #16
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	460b      	mov	r3, r1
 801029e:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80102a0:	2300      	movs	r3, #0
 80102a2:	60fb      	str	r3, [r7, #12]
 80102a4:	e03b      	b.n	801031e <USBD_CoreFindIF+0x8a>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 80102a6:	6879      	ldr	r1, [r7, #4]
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	4613      	mov	r3, r2
 80102ac:	00db      	lsls	r3, r3, #3
 80102ae:	1a9b      	subs	r3, r3, r2
 80102b0:	00db      	lsls	r3, r3, #3
 80102b2:	440b      	add	r3, r1
 80102b4:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d12c      	bne.n	8010318 <USBD_CoreFindIF+0x84>
    {
      /* Parse all interfaces listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80102be:	2300      	movs	r3, #0
 80102c0:	60bb      	str	r3, [r7, #8]
 80102c2:	e01c      	b.n	80102fe <USBD_CoreFindIF+0x6a>
      {
        /* Check if requested Interface matches the current class interface */
        if (pdev->tclasslist[i].Ifs[j] == index)
 80102c4:	6879      	ldr	r1, [r7, #4]
 80102c6:	68fa      	ldr	r2, [r7, #12]
 80102c8:	4613      	mov	r3, r2
 80102ca:	00db      	lsls	r3, r3, #3
 80102cc:	1a9b      	subs	r3, r3, r2
 80102ce:	00db      	lsls	r3, r3, #3
 80102d0:	18ca      	adds	r2, r1, r3
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	4413      	add	r3, r2
 80102d6:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	78fa      	ldrb	r2, [r7, #3]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d10a      	bne.n	80102f8 <USBD_CoreFindIF+0x64>
        {
          if (pdev->pClass[i]->Setup != NULL)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	68fa      	ldr	r2, [r7, #12]
 80102e6:	32ae      	adds	r2, #174	; 0xae
 80102e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d002      	beq.n	80102f8 <USBD_CoreFindIF+0x64>
          {
            return (uint8_t)i;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	e016      	b.n	8010326 <USBD_CoreFindIF+0x92>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	3301      	adds	r3, #1
 80102fc:	60bb      	str	r3, [r7, #8]
 80102fe:	6879      	ldr	r1, [r7, #4]
 8010300:	68fa      	ldr	r2, [r7, #12]
 8010302:	4613      	mov	r3, r2
 8010304:	00db      	lsls	r3, r3, #3
 8010306:	1a9b      	subs	r3, r3, r2
 8010308:	00db      	lsls	r3, r3, #3
 801030a:	440b      	add	r3, r1
 801030c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	68ba      	ldr	r2, [r7, #8]
 8010314:	429a      	cmp	r2, r3
 8010316:	d3d5      	bcc.n	80102c4 <USBD_CoreFindIF+0x30>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	3301      	adds	r3, #1
 801031c:	60fb      	str	r3, [r7, #12]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2b03      	cmp	r3, #3
 8010322:	d9c0      	bls.n	80102a6 <USBD_CoreFindIF+0x12>
        }
      }
    }
  }

  return 0xFFU;
 8010324:	23ff      	movs	r3, #255	; 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8010326:	4618      	mov	r0, r3
 8010328:	3714      	adds	r7, #20
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr

08010332 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010332:	b480      	push	{r7}
 8010334:	b085      	sub	sp, #20
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
 801033a:	460b      	mov	r3, r1
 801033c:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 801033e:	2300      	movs	r3, #0
 8010340:	60fb      	str	r3, [r7, #12]
 8010342:	e03a      	b.n	80103ba <USBD_CoreFindEP+0x88>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8010344:	6879      	ldr	r1, [r7, #4]
 8010346:	68fa      	ldr	r2, [r7, #12]
 8010348:	4613      	mov	r3, r2
 801034a:	00db      	lsls	r3, r3, #3
 801034c:	1a9b      	subs	r3, r3, r2
 801034e:	00db      	lsls	r3, r3, #3
 8010350:	440b      	add	r3, r1
 8010352:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b01      	cmp	r3, #1
 801035a:	d12b      	bne.n	80103b4 <USBD_CoreFindEP+0x82>
    {
      /* Parse all endpoints listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 801035c:	2300      	movs	r3, #0
 801035e:	60bb      	str	r3, [r7, #8]
 8010360:	e01b      	b.n	801039a <USBD_CoreFindEP+0x68>
      {
        /* Check if requested endpoint matches the current class endpoint */
        if (pdev->tclasslist[i].Eps[j].add == index)
 8010362:	6879      	ldr	r1, [r7, #4]
 8010364:	68fa      	ldr	r2, [r7, #12]
 8010366:	4613      	mov	r3, r2
 8010368:	00db      	lsls	r3, r3, #3
 801036a:	1a9b      	subs	r3, r3, r2
 801036c:	005b      	lsls	r3, r3, #1
 801036e:	68ba      	ldr	r2, [r7, #8]
 8010370:	4413      	add	r3, r2
 8010372:	33c4      	adds	r3, #196	; 0xc4
 8010374:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8010378:	78fa      	ldrb	r2, [r7, #3]
 801037a:	429a      	cmp	r2, r3
 801037c:	d10a      	bne.n	8010394 <USBD_CoreFindEP+0x62>
        {
          if (pdev->pClass[i]->Setup != NULL)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	32ae      	adds	r2, #174	; 0xae
 8010384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d002      	beq.n	8010394 <USBD_CoreFindEP+0x62>
          {
            return (uint8_t)i;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	b2db      	uxtb	r3, r3
 8010392:	e016      	b.n	80103c2 <USBD_CoreFindEP+0x90>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	3301      	adds	r3, #1
 8010398:	60bb      	str	r3, [r7, #8]
 801039a:	6879      	ldr	r1, [r7, #4]
 801039c:	68fa      	ldr	r2, [r7, #12]
 801039e:	4613      	mov	r3, r2
 80103a0:	00db      	lsls	r3, r3, #3
 80103a2:	1a9b      	subs	r3, r3, r2
 80103a4:	00db      	lsls	r3, r3, #3
 80103a6:	440b      	add	r3, r1
 80103a8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	68ba      	ldr	r2, [r7, #8]
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d3d6      	bcc.n	8010362 <USBD_CoreFindEP+0x30>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	3301      	adds	r3, #1
 80103b8:	60fb      	str	r3, [r7, #12]
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b03      	cmp	r3, #3
 80103be:	d9c1      	bls.n	8010344 <USBD_CoreFindEP+0x12>
        }
      }
    }
  }

  return 0xFFU;
 80103c0:	23ff      	movs	r3, #255	; 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr

080103ce <USBD_CoreGetEPAdd>:
  * @param  ep_type: USBD_EP_TYPE_CTRL, USBD_EP_TYPE_ISOC, USBD_EP_TYPE_BULK or USBD_EP_TYPE_INTR
  * @param  ClassId: The Class ID
  * @retval Address of the selected endpoint or 0xFFU if no endpoint found.
  */
uint8_t USBD_CoreGetEPAdd(USBD_HandleTypeDef *pdev, uint8_t ep_dir, uint8_t ep_type, uint8_t ClassId)
{
 80103ce:	b480      	push	{r7}
 80103d0:	b085      	sub	sp, #20
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
 80103d6:	4608      	mov	r0, r1
 80103d8:	4611      	mov	r1, r2
 80103da:	461a      	mov	r2, r3
 80103dc:	4603      	mov	r3, r0
 80103de:	70fb      	strb	r3, [r7, #3]
 80103e0:	460b      	mov	r3, r1
 80103e2:	70bb      	strb	r3, [r7, #2]
 80103e4:	4613      	mov	r3, r2
 80103e6:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  /* Find the EP address in the selected class table */
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 80103e8:	2300      	movs	r3, #0
 80103ea:	73fb      	strb	r3, [r7, #15]
 80103ec:	e03b      	b.n	8010466 <USBD_CoreGetEPAdd+0x98>
  {
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 80103ee:	787a      	ldrb	r2, [r7, #1]
 80103f0:	7bf8      	ldrb	r0, [r7, #15]
 80103f2:	6879      	ldr	r1, [r7, #4]
 80103f4:	4613      	mov	r3, r2
 80103f6:	00db      	lsls	r3, r3, #3
 80103f8:	1a9b      	subs	r3, r3, r2
 80103fa:	005b      	lsls	r3, r3, #1
 80103fc:	4403      	add	r3, r0
 80103fe:	33c4      	adds	r3, #196	; 0xc4
 8010400:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8010404:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8010408:	78fb      	ldrb	r3, [r7, #3]
 801040a:	429a      	cmp	r2, r3
 801040c:	d128      	bne.n	8010460 <USBD_CoreGetEPAdd+0x92>
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 801040e:	787a      	ldrb	r2, [r7, #1]
 8010410:	7bf8      	ldrb	r0, [r7, #15]
 8010412:	6879      	ldr	r1, [r7, #4]
 8010414:	4613      	mov	r3, r2
 8010416:	00db      	lsls	r3, r3, #3
 8010418:	1a9b      	subs	r3, r3, r2
 801041a:	005b      	lsls	r3, r3, #1
 801041c:	4403      	add	r3, r0
 801041e:	33c4      	adds	r3, #196	; 0xc4
 8010420:	009b      	lsls	r3, r3, #2
 8010422:	440b      	add	r3, r1
 8010424:	785b      	ldrb	r3, [r3, #1]
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 8010426:	78ba      	ldrb	r2, [r7, #2]
 8010428:	429a      	cmp	r2, r3
 801042a:	d119      	bne.n	8010460 <USBD_CoreGetEPAdd+0x92>
        (pdev->tclasslist[ClassId].Eps[idx].is_used != 0U))
 801042c:	787a      	ldrb	r2, [r7, #1]
 801042e:	7bf8      	ldrb	r0, [r7, #15]
 8010430:	6879      	ldr	r1, [r7, #4]
 8010432:	4613      	mov	r3, r2
 8010434:	00db      	lsls	r3, r3, #3
 8010436:	1a9b      	subs	r3, r3, r2
 8010438:	005b      	lsls	r3, r3, #1
 801043a:	4403      	add	r3, r0
 801043c:	33c4      	adds	r3, #196	; 0xc4
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	440b      	add	r3, r1
 8010442:	78db      	ldrb	r3, [r3, #3]
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00b      	beq.n	8010460 <USBD_CoreGetEPAdd+0x92>
    {
      return (pdev->tclasslist[ClassId].Eps[idx].add);
 8010448:	787a      	ldrb	r2, [r7, #1]
 801044a:	7bf8      	ldrb	r0, [r7, #15]
 801044c:	6879      	ldr	r1, [r7, #4]
 801044e:	4613      	mov	r3, r2
 8010450:	00db      	lsls	r3, r3, #3
 8010452:	1a9b      	subs	r3, r3, r2
 8010454:	005b      	lsls	r3, r3, #1
 8010456:	4403      	add	r3, r0
 8010458:	33c4      	adds	r3, #196	; 0xc4
 801045a:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 801045e:	e010      	b.n	8010482 <USBD_CoreGetEPAdd+0xb4>
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 8010460:	7bfb      	ldrb	r3, [r7, #15]
 8010462:	3301      	adds	r3, #1
 8010464:	73fb      	strb	r3, [r7, #15]
 8010466:	7bf9      	ldrb	r1, [r7, #15]
 8010468:	787a      	ldrb	r2, [r7, #1]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	4613      	mov	r3, r2
 801046e:	00db      	lsls	r3, r3, #3
 8010470:	1a9b      	subs	r3, r3, r2
 8010472:	00db      	lsls	r3, r3, #3
 8010474:	4403      	add	r3, r0
 8010476:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4299      	cmp	r1, r3
 801047e:	d3b6      	bcc.n	80103ee <USBD_CoreGetEPAdd+0x20>
    }
  }

  /* If reaching this point, then no endpoint was found */
  return 0xFFU;
 8010480:	23ff      	movs	r3, #255	; 0xff
}
 8010482:	4618      	mov	r0, r3
 8010484:	3714      	adds	r7, #20
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr

0801048e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801048e:	b480      	push	{r7}
 8010490:	b087      	sub	sp, #28
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	3301      	adds	r3, #1
 80104a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80104ac:	8a3b      	ldrh	r3, [r7, #16]
 80104ae:	021b      	lsls	r3, r3, #8
 80104b0:	b21a      	sxth	r2, r3
 80104b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80104b6:	4313      	orrs	r3, r2
 80104b8:	b21b      	sxth	r3, r3
 80104ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80104bc:	89fb      	ldrh	r3, [r7, #14]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	371c      	adds	r7, #28
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr
	...

080104cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b084      	sub	sp, #16
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80104d6:	2300      	movs	r3, #0
 80104d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80104e2:	2b40      	cmp	r3, #64	; 0x40
 80104e4:	d005      	beq.n	80104f2 <USBD_StdDevReq+0x26>
 80104e6:	2b40      	cmp	r3, #64	; 0x40
 80104e8:	d857      	bhi.n	801059a <USBD_StdDevReq+0xce>
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00f      	beq.n	801050e <USBD_StdDevReq+0x42>
 80104ee:	2b20      	cmp	r3, #32
 80104f0:	d153      	bne.n	801059a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	32ae      	adds	r2, #174	; 0xae
 80104fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010500:	689b      	ldr	r3, [r3, #8]
 8010502:	6839      	ldr	r1, [r7, #0]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	4798      	blx	r3
 8010508:	4603      	mov	r3, r0
 801050a:	73fb      	strb	r3, [r7, #15]
      break;
 801050c:	e04a      	b.n	80105a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	785b      	ldrb	r3, [r3, #1]
 8010512:	2b09      	cmp	r3, #9
 8010514:	d83b      	bhi.n	801058e <USBD_StdDevReq+0xc2>
 8010516:	a201      	add	r2, pc, #4	; (adr r2, 801051c <USBD_StdDevReq+0x50>)
 8010518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801051c:	08010571 	.word	0x08010571
 8010520:	08010585 	.word	0x08010585
 8010524:	0801058f 	.word	0x0801058f
 8010528:	0801057b 	.word	0x0801057b
 801052c:	0801058f 	.word	0x0801058f
 8010530:	0801054f 	.word	0x0801054f
 8010534:	08010545 	.word	0x08010545
 8010538:	0801058f 	.word	0x0801058f
 801053c:	08010567 	.word	0x08010567
 8010540:	08010559 	.word	0x08010559
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010544:	6839      	ldr	r1, [r7, #0]
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 fa3c 	bl	80109c4 <USBD_GetDescriptor>
          break;
 801054c:	e024      	b.n	8010598 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801054e:	6839      	ldr	r1, [r7, #0]
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f000 fc05 	bl	8010d60 <USBD_SetAddress>
          break;
 8010556:	e01f      	b.n	8010598 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010558:	6839      	ldr	r1, [r7, #0]
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f000 fc44 	bl	8010de8 <USBD_SetConfig>
 8010560:	4603      	mov	r3, r0
 8010562:	73fb      	strb	r3, [r7, #15]
          break;
 8010564:	e018      	b.n	8010598 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010566:	6839      	ldr	r1, [r7, #0]
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f000 fce7 	bl	8010f3c <USBD_GetConfig>
          break;
 801056e:	e013      	b.n	8010598 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010570:	6839      	ldr	r1, [r7, #0]
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 fd18 	bl	8010fa8 <USBD_GetStatus>
          break;
 8010578:	e00e      	b.n	8010598 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801057a:	6839      	ldr	r1, [r7, #0]
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f000 fd47 	bl	8011010 <USBD_SetFeature>
          break;
 8010582:	e009      	b.n	8010598 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010584:	6839      	ldr	r1, [r7, #0]
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 fd6b 	bl	8011062 <USBD_ClrFeature>
          break;
 801058c:	e004      	b.n	8010598 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801058e:	6839      	ldr	r1, [r7, #0]
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f000 fdc2 	bl	801111a <USBD_CtlError>
          break;
 8010596:	bf00      	nop
      }
      break;
 8010598:	e004      	b.n	80105a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801059a:	6839      	ldr	r1, [r7, #0]
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f000 fdbc 	bl	801111a <USBD_CtlError>
      break;
 80105a2:	bf00      	nop
  }

  return ret;
 80105a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop

080105b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105ba:	2300      	movs	r3, #0
 80105bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80105c6:	2b40      	cmp	r3, #64	; 0x40
 80105c8:	d005      	beq.n	80105d6 <USBD_StdItfReq+0x26>
 80105ca:	2b40      	cmp	r3, #64	; 0x40
 80105cc:	d852      	bhi.n	8010674 <USBD_StdItfReq+0xc4>
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d001      	beq.n	80105d6 <USBD_StdItfReq+0x26>
 80105d2:	2b20      	cmp	r3, #32
 80105d4:	d14e      	bne.n	8010674 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	3b01      	subs	r3, #1
 80105e0:	2b02      	cmp	r3, #2
 80105e2:	d840      	bhi.n	8010666 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	889b      	ldrh	r3, [r3, #4]
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	2b03      	cmp	r3, #3
 80105ec:	d836      	bhi.n	801065c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	889b      	ldrh	r3, [r3, #4]
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	4619      	mov	r1, r3
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7ff fe4c 	bl	8010294 <USBD_CoreFindIF>
 80105fc:	4603      	mov	r3, r0
 80105fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010600:	7bbb      	ldrb	r3, [r7, #14]
 8010602:	2bff      	cmp	r3, #255	; 0xff
 8010604:	d01d      	beq.n	8010642 <USBD_StdItfReq+0x92>
 8010606:	7bbb      	ldrb	r3, [r7, #14]
 8010608:	2b03      	cmp	r3, #3
 801060a:	d81a      	bhi.n	8010642 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801060c:	7bba      	ldrb	r2, [r7, #14]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	32ae      	adds	r2, #174	; 0xae
 8010612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010616:	689b      	ldr	r3, [r3, #8]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00f      	beq.n	801063c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801061c:	7bba      	ldrb	r2, [r7, #14]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010624:	7bba      	ldrb	r2, [r7, #14]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	32ae      	adds	r2, #174	; 0xae
 801062a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801062e:	689b      	ldr	r3, [r3, #8]
 8010630:	6839      	ldr	r1, [r7, #0]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	4798      	blx	r3
 8010636:	4603      	mov	r3, r0
 8010638:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801063a:	e004      	b.n	8010646 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801063c:	2303      	movs	r3, #3
 801063e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010640:	e001      	b.n	8010646 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010642:	2303      	movs	r3, #3
 8010644:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	88db      	ldrh	r3, [r3, #6]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d110      	bne.n	8010670 <USBD_StdItfReq+0xc0>
 801064e:	7bfb      	ldrb	r3, [r7, #15]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10d      	bne.n	8010670 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 fe2b 	bl	80112b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801065a:	e009      	b.n	8010670 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801065c:	6839      	ldr	r1, [r7, #0]
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 fd5b 	bl	801111a <USBD_CtlError>
          break;
 8010664:	e004      	b.n	8010670 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010666:	6839      	ldr	r1, [r7, #0]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f000 fd56 	bl	801111a <USBD_CtlError>
          break;
 801066e:	e000      	b.n	8010672 <USBD_StdItfReq+0xc2>
          break;
 8010670:	bf00      	nop
      }
      break;
 8010672:	e004      	b.n	801067e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010674:	6839      	ldr	r1, [r7, #0]
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 fd4f 	bl	801111a <USBD_CtlError>
      break;
 801067c:	bf00      	nop
  }

  return ret;
 801067e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010680:	4618      	mov	r0, r3
 8010682:	3710      	adds	r7, #16
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010692:	2300      	movs	r3, #0
 8010694:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	889b      	ldrh	r3, [r3, #4]
 801069a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80106a4:	2b40      	cmp	r3, #64	; 0x40
 80106a6:	d007      	beq.n	80106b8 <USBD_StdEPReq+0x30>
 80106a8:	2b40      	cmp	r3, #64	; 0x40
 80106aa:	f200 817f 	bhi.w	80109ac <USBD_StdEPReq+0x324>
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d02a      	beq.n	8010708 <USBD_StdEPReq+0x80>
 80106b2:	2b20      	cmp	r3, #32
 80106b4:	f040 817a 	bne.w	80109ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80106b8:	7bbb      	ldrb	r3, [r7, #14]
 80106ba:	4619      	mov	r1, r3
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f7ff fe38 	bl	8010332 <USBD_CoreFindEP>
 80106c2:	4603      	mov	r3, r0
 80106c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80106c6:	7b7b      	ldrb	r3, [r7, #13]
 80106c8:	2bff      	cmp	r3, #255	; 0xff
 80106ca:	f000 8174 	beq.w	80109b6 <USBD_StdEPReq+0x32e>
 80106ce:	7b7b      	ldrb	r3, [r7, #13]
 80106d0:	2b03      	cmp	r3, #3
 80106d2:	f200 8170 	bhi.w	80109b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80106d6:	7b7a      	ldrb	r2, [r7, #13]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80106de:	7b7a      	ldrb	r2, [r7, #13]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	32ae      	adds	r2, #174	; 0xae
 80106e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106e8:	689b      	ldr	r3, [r3, #8]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f000 8163 	beq.w	80109b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80106f0:	7b7a      	ldrb	r2, [r7, #13]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	32ae      	adds	r2, #174	; 0xae
 80106f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106fa:	689b      	ldr	r3, [r3, #8]
 80106fc:	6839      	ldr	r1, [r7, #0]
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	4798      	blx	r3
 8010702:	4603      	mov	r3, r0
 8010704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010706:	e156      	b.n	80109b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	785b      	ldrb	r3, [r3, #1]
 801070c:	2b03      	cmp	r3, #3
 801070e:	d008      	beq.n	8010722 <USBD_StdEPReq+0x9a>
 8010710:	2b03      	cmp	r3, #3
 8010712:	f300 8145 	bgt.w	80109a0 <USBD_StdEPReq+0x318>
 8010716:	2b00      	cmp	r3, #0
 8010718:	f000 809b 	beq.w	8010852 <USBD_StdEPReq+0x1ca>
 801071c:	2b01      	cmp	r3, #1
 801071e:	d03c      	beq.n	801079a <USBD_StdEPReq+0x112>
 8010720:	e13e      	b.n	80109a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010728:	b2db      	uxtb	r3, r3
 801072a:	2b02      	cmp	r3, #2
 801072c:	d002      	beq.n	8010734 <USBD_StdEPReq+0xac>
 801072e:	2b03      	cmp	r3, #3
 8010730:	d016      	beq.n	8010760 <USBD_StdEPReq+0xd8>
 8010732:	e02c      	b.n	801078e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010734:	7bbb      	ldrb	r3, [r7, #14]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d00d      	beq.n	8010756 <USBD_StdEPReq+0xce>
 801073a:	7bbb      	ldrb	r3, [r7, #14]
 801073c:	2b80      	cmp	r3, #128	; 0x80
 801073e:	d00a      	beq.n	8010756 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010740:	7bbb      	ldrb	r3, [r7, #14]
 8010742:	4619      	mov	r1, r3
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f005 fb24 	bl	8015d92 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801074a:	2180      	movs	r1, #128	; 0x80
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f005 fb20 	bl	8015d92 <USBD_LL_StallEP>
 8010752:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010754:	e020      	b.n	8010798 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010756:	6839      	ldr	r1, [r7, #0]
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 fcde 	bl	801111a <USBD_CtlError>
              break;
 801075e:	e01b      	b.n	8010798 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	885b      	ldrh	r3, [r3, #2]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d10e      	bne.n	8010786 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010768:	7bbb      	ldrb	r3, [r7, #14]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d00b      	beq.n	8010786 <USBD_StdEPReq+0xfe>
 801076e:	7bbb      	ldrb	r3, [r7, #14]
 8010770:	2b80      	cmp	r3, #128	; 0x80
 8010772:	d008      	beq.n	8010786 <USBD_StdEPReq+0xfe>
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	88db      	ldrh	r3, [r3, #6]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d104      	bne.n	8010786 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801077c:	7bbb      	ldrb	r3, [r7, #14]
 801077e:	4619      	mov	r1, r3
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f005 fb06 	bl	8015d92 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 fd92 	bl	80112b0 <USBD_CtlSendStatus>

              break;
 801078c:	e004      	b.n	8010798 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801078e:	6839      	ldr	r1, [r7, #0]
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f000 fcc2 	bl	801111a <USBD_CtlError>
              break;
 8010796:	bf00      	nop
          }
          break;
 8010798:	e107      	b.n	80109aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d002      	beq.n	80107ac <USBD_StdEPReq+0x124>
 80107a6:	2b03      	cmp	r3, #3
 80107a8:	d016      	beq.n	80107d8 <USBD_StdEPReq+0x150>
 80107aa:	e04b      	b.n	8010844 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80107ac:	7bbb      	ldrb	r3, [r7, #14]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d00d      	beq.n	80107ce <USBD_StdEPReq+0x146>
 80107b2:	7bbb      	ldrb	r3, [r7, #14]
 80107b4:	2b80      	cmp	r3, #128	; 0x80
 80107b6:	d00a      	beq.n	80107ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80107b8:	7bbb      	ldrb	r3, [r7, #14]
 80107ba:	4619      	mov	r1, r3
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f005 fae8 	bl	8015d92 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80107c2:	2180      	movs	r1, #128	; 0x80
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f005 fae4 	bl	8015d92 <USBD_LL_StallEP>
 80107ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80107cc:	e040      	b.n	8010850 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80107ce:	6839      	ldr	r1, [r7, #0]
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f000 fca2 	bl	801111a <USBD_CtlError>
              break;
 80107d6:	e03b      	b.n	8010850 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	885b      	ldrh	r3, [r3, #2]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d136      	bne.n	801084e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80107e0:	7bbb      	ldrb	r3, [r7, #14]
 80107e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d004      	beq.n	80107f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80107ea:	7bbb      	ldrb	r3, [r7, #14]
 80107ec:	4619      	mov	r1, r3
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f005 faee 	bl	8015dd0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 fd5b 	bl	80112b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80107fa:	7bbb      	ldrb	r3, [r7, #14]
 80107fc:	4619      	mov	r1, r3
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f7ff fd97 	bl	8010332 <USBD_CoreFindEP>
 8010804:	4603      	mov	r3, r0
 8010806:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010808:	7b7b      	ldrb	r3, [r7, #13]
 801080a:	2bff      	cmp	r3, #255	; 0xff
 801080c:	d01f      	beq.n	801084e <USBD_StdEPReq+0x1c6>
 801080e:	7b7b      	ldrb	r3, [r7, #13]
 8010810:	2b03      	cmp	r3, #3
 8010812:	d81c      	bhi.n	801084e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010814:	7b7a      	ldrb	r2, [r7, #13]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801081c:	7b7a      	ldrb	r2, [r7, #13]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	32ae      	adds	r2, #174	; 0xae
 8010822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010826:	689b      	ldr	r3, [r3, #8]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d010      	beq.n	801084e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801082c:	7b7a      	ldrb	r2, [r7, #13]
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	32ae      	adds	r2, #174	; 0xae
 8010832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010836:	689b      	ldr	r3, [r3, #8]
 8010838:	6839      	ldr	r1, [r7, #0]
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	4798      	blx	r3
 801083e:	4603      	mov	r3, r0
 8010840:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010842:	e004      	b.n	801084e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010844:	6839      	ldr	r1, [r7, #0]
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 fc67 	bl	801111a <USBD_CtlError>
              break;
 801084c:	e000      	b.n	8010850 <USBD_StdEPReq+0x1c8>
              break;
 801084e:	bf00      	nop
          }
          break;
 8010850:	e0ab      	b.n	80109aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010858:	b2db      	uxtb	r3, r3
 801085a:	2b02      	cmp	r3, #2
 801085c:	d002      	beq.n	8010864 <USBD_StdEPReq+0x1dc>
 801085e:	2b03      	cmp	r3, #3
 8010860:	d032      	beq.n	80108c8 <USBD_StdEPReq+0x240>
 8010862:	e097      	b.n	8010994 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010864:	7bbb      	ldrb	r3, [r7, #14]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d007      	beq.n	801087a <USBD_StdEPReq+0x1f2>
 801086a:	7bbb      	ldrb	r3, [r7, #14]
 801086c:	2b80      	cmp	r3, #128	; 0x80
 801086e:	d004      	beq.n	801087a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010870:	6839      	ldr	r1, [r7, #0]
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 fc51 	bl	801111a <USBD_CtlError>
                break;
 8010878:	e091      	b.n	801099e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801087a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801087e:	2b00      	cmp	r3, #0
 8010880:	da0b      	bge.n	801089a <USBD_StdEPReq+0x212>
 8010882:	7bbb      	ldrb	r3, [r7, #14]
 8010884:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010888:	4613      	mov	r3, r2
 801088a:	009b      	lsls	r3, r3, #2
 801088c:	4413      	add	r3, r2
 801088e:	009b      	lsls	r3, r3, #2
 8010890:	3310      	adds	r3, #16
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	4413      	add	r3, r2
 8010896:	3304      	adds	r3, #4
 8010898:	e00b      	b.n	80108b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801089a:	7bbb      	ldrb	r3, [r7, #14]
 801089c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108a0:	4613      	mov	r3, r2
 80108a2:	009b      	lsls	r3, r3, #2
 80108a4:	4413      	add	r3, r2
 80108a6:	009b      	lsls	r3, r3, #2
 80108a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	4413      	add	r3, r2
 80108b0:	3304      	adds	r3, #4
 80108b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	2200      	movs	r2, #0
 80108b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	2202      	movs	r2, #2
 80108be:	4619      	mov	r1, r3
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 fc9b 	bl	80111fc <USBD_CtlSendData>
              break;
 80108c6:	e06a      	b.n	801099e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80108c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	da11      	bge.n	80108f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80108d0:	7bbb      	ldrb	r3, [r7, #14]
 80108d2:	f003 020f 	and.w	r2, r3, #15
 80108d6:	6879      	ldr	r1, [r7, #4]
 80108d8:	4613      	mov	r3, r2
 80108da:	009b      	lsls	r3, r3, #2
 80108dc:	4413      	add	r3, r2
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	440b      	add	r3, r1
 80108e2:	3324      	adds	r3, #36	; 0x24
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d117      	bne.n	801091a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80108ea:	6839      	ldr	r1, [r7, #0]
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f000 fc14 	bl	801111a <USBD_CtlError>
                  break;
 80108f2:	e054      	b.n	801099e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80108f4:	7bbb      	ldrb	r3, [r7, #14]
 80108f6:	f003 020f 	and.w	r2, r3, #15
 80108fa:	6879      	ldr	r1, [r7, #4]
 80108fc:	4613      	mov	r3, r2
 80108fe:	009b      	lsls	r3, r3, #2
 8010900:	4413      	add	r3, r2
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	440b      	add	r3, r1
 8010906:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801090a:	881b      	ldrh	r3, [r3, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d104      	bne.n	801091a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010910:	6839      	ldr	r1, [r7, #0]
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 fc01 	bl	801111a <USBD_CtlError>
                  break;
 8010918:	e041      	b.n	801099e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801091a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801091e:	2b00      	cmp	r3, #0
 8010920:	da0b      	bge.n	801093a <USBD_StdEPReq+0x2b2>
 8010922:	7bbb      	ldrb	r3, [r7, #14]
 8010924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010928:	4613      	mov	r3, r2
 801092a:	009b      	lsls	r3, r3, #2
 801092c:	4413      	add	r3, r2
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	3310      	adds	r3, #16
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	4413      	add	r3, r2
 8010936:	3304      	adds	r3, #4
 8010938:	e00b      	b.n	8010952 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801093a:	7bbb      	ldrb	r3, [r7, #14]
 801093c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010940:	4613      	mov	r3, r2
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	4413      	add	r3, r2
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	4413      	add	r3, r2
 8010950:	3304      	adds	r3, #4
 8010952:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010954:	7bbb      	ldrb	r3, [r7, #14]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d002      	beq.n	8010960 <USBD_StdEPReq+0x2d8>
 801095a:	7bbb      	ldrb	r3, [r7, #14]
 801095c:	2b80      	cmp	r3, #128	; 0x80
 801095e:	d103      	bne.n	8010968 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	2200      	movs	r2, #0
 8010964:	601a      	str	r2, [r3, #0]
 8010966:	e00e      	b.n	8010986 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010968:	7bbb      	ldrb	r3, [r7, #14]
 801096a:	4619      	mov	r1, r3
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f005 fa4e 	bl	8015e0e <USBD_LL_IsStallEP>
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d003      	beq.n	8010980 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	2201      	movs	r2, #1
 801097c:	601a      	str	r2, [r3, #0]
 801097e:	e002      	b.n	8010986 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	2200      	movs	r2, #0
 8010984:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	2202      	movs	r2, #2
 801098a:	4619      	mov	r1, r3
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 fc35 	bl	80111fc <USBD_CtlSendData>
              break;
 8010992:	e004      	b.n	801099e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010994:	6839      	ldr	r1, [r7, #0]
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 fbbf 	bl	801111a <USBD_CtlError>
              break;
 801099c:	bf00      	nop
          }
          break;
 801099e:	e004      	b.n	80109aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80109a0:	6839      	ldr	r1, [r7, #0]
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 fbb9 	bl	801111a <USBD_CtlError>
          break;
 80109a8:	bf00      	nop
      }
      break;
 80109aa:	e005      	b.n	80109b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80109ac:	6839      	ldr	r1, [r7, #0]
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 fbb3 	bl	801111a <USBD_CtlError>
      break;
 80109b4:	e000      	b.n	80109b8 <USBD_StdEPReq+0x330>
      break;
 80109b6:	bf00      	nop
  }

  return ret;
 80109b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3710      	adds	r7, #16
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
	...

080109c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80109ce:	2300      	movs	r3, #0
 80109d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80109d2:	2300      	movs	r3, #0
 80109d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80109d6:	2300      	movs	r3, #0
 80109d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	885b      	ldrh	r3, [r3, #2]
 80109de:	0a1b      	lsrs	r3, r3, #8
 80109e0:	b29b      	uxth	r3, r3
 80109e2:	3b01      	subs	r3, #1
 80109e4:	2b0e      	cmp	r3, #14
 80109e6:	f200 818d 	bhi.w	8010d04 <USBD_GetDescriptor+0x340>
 80109ea:	a201      	add	r2, pc, #4	; (adr r2, 80109f0 <USBD_GetDescriptor+0x2c>)
 80109ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f0:	08010a61 	.word	0x08010a61
 80109f4:	08010a79 	.word	0x08010a79
 80109f8:	08010af1 	.word	0x08010af1
 80109fc:	08010d05 	.word	0x08010d05
 8010a00:	08010d05 	.word	0x08010d05
 8010a04:	08010c67 	.word	0x08010c67
 8010a08:	08010caf 	.word	0x08010caf
 8010a0c:	08010d05 	.word	0x08010d05
 8010a10:	08010d05 	.word	0x08010d05
 8010a14:	08010d05 	.word	0x08010d05
 8010a18:	08010d05 	.word	0x08010d05
 8010a1c:	08010d05 	.word	0x08010d05
 8010a20:	08010d05 	.word	0x08010d05
 8010a24:	08010d05 	.word	0x08010d05
 8010a28:	08010a2d 	.word	0x08010a2d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a32:	69db      	ldr	r3, [r3, #28]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00b      	beq.n	8010a50 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a3e:	69db      	ldr	r3, [r3, #28]
 8010a40:	687a      	ldr	r2, [r7, #4]
 8010a42:	7c12      	ldrb	r2, [r2, #16]
 8010a44:	f107 0108 	add.w	r1, r7, #8
 8010a48:	4610      	mov	r0, r2
 8010a4a:	4798      	blx	r3
 8010a4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010a4e:	e161      	b.n	8010d14 <USBD_GetDescriptor+0x350>
        USBD_CtlError(pdev, req);
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 fb61 	bl	801111a <USBD_CtlError>
        err++;
 8010a58:	7afb      	ldrb	r3, [r7, #11]
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	72fb      	strb	r3, [r7, #11]
      break;
 8010a5e:	e159      	b.n	8010d14 <USBD_GetDescriptor+0x350>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	7c12      	ldrb	r2, [r2, #16]
 8010a6c:	f107 0108 	add.w	r1, r7, #8
 8010a70:	4610      	mov	r0, r2
 8010a72:	4798      	blx	r3
 8010a74:	60f8      	str	r0, [r7, #12]
      break;
 8010a76:	e14d      	b.n	8010d14 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	7c1b      	ldrb	r3, [r3, #16]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d11b      	bne.n	8010ab8 <USBD_GetDescriptor+0xf4>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d007      	beq.n	8010a9c <USBD_GetDescriptor+0xd8>
        {
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
 8010a8c:	4b9c      	ldr	r3, [pc, #624]	; (8010d00 <USBD_GetDescriptor+0x33c>)
 8010a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a90:	f107 0208 	add.w	r2, r7, #8
 8010a94:	4610      	mov	r0, r2
 8010a96:	4798      	blx	r3
 8010a98:	60f8      	str	r0, [r7, #12]
 8010a9a:	e008      	b.n	8010aae <USBD_GetDescriptor+0xea>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aa4:	f107 0208 	add.w	r2, r7, #8
 8010aa8:	4610      	mov	r0, r2
 8010aaa:	4798      	blx	r3
 8010aac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	2202      	movs	r2, #2
 8010ab4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010ab6:	e12d      	b.n	8010d14 <USBD_GetDescriptor+0x350>
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d007      	beq.n	8010ad4 <USBD_GetDescriptor+0x110>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
 8010ac4:	4b8e      	ldr	r3, [pc, #568]	; (8010d00 <USBD_GetDescriptor+0x33c>)
 8010ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac8:	f107 0208 	add.w	r2, r7, #8
 8010acc:	4610      	mov	r0, r2
 8010ace:	4798      	blx	r3
 8010ad0:	60f8      	str	r0, [r7, #12]
 8010ad2:	e008      	b.n	8010ae6 <USBD_GetDescriptor+0x122>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010adc:	f107 0208 	add.w	r2, r7, #8
 8010ae0:	4610      	mov	r0, r2
 8010ae2:	4798      	blx	r3
 8010ae4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	2202      	movs	r2, #2
 8010aec:	701a      	strb	r2, [r3, #0]
      break;
 8010aee:	e111      	b.n	8010d14 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	885b      	ldrh	r3, [r3, #2]
 8010af4:	b2db      	uxtb	r3, r3
 8010af6:	2b05      	cmp	r3, #5
 8010af8:	f200 80ac 	bhi.w	8010c54 <USBD_GetDescriptor+0x290>
 8010afc:	a201      	add	r2, pc, #4	; (adr r2, 8010b04 <USBD_GetDescriptor+0x140>)
 8010afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b02:	bf00      	nop
 8010b04:	08010b1d 	.word	0x08010b1d
 8010b08:	08010b51 	.word	0x08010b51
 8010b0c:	08010b85 	.word	0x08010b85
 8010b10:	08010bb9 	.word	0x08010bb9
 8010b14:	08010bed 	.word	0x08010bed
 8010b18:	08010c21 	.word	0x08010c21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00b      	beq.n	8010b40 <USBD_GetDescriptor+0x17c>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	7c12      	ldrb	r2, [r2, #16]
 8010b34:	f107 0108 	add.w	r1, r7, #8
 8010b38:	4610      	mov	r0, r2
 8010b3a:	4798      	blx	r3
 8010b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b3e:	e091      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8010b40:	6839      	ldr	r1, [r7, #0]
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 fae9 	bl	801111a <USBD_CtlError>
            err++;
 8010b48:	7afb      	ldrb	r3, [r7, #11]
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8010b4e:	e089      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b56:	689b      	ldr	r3, [r3, #8]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d00b      	beq.n	8010b74 <USBD_GetDescriptor+0x1b0>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b62:	689b      	ldr	r3, [r3, #8]
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	7c12      	ldrb	r2, [r2, #16]
 8010b68:	f107 0108 	add.w	r1, r7, #8
 8010b6c:	4610      	mov	r0, r2
 8010b6e:	4798      	blx	r3
 8010b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b72:	e077      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8010b74:	6839      	ldr	r1, [r7, #0]
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 facf 	bl	801111a <USBD_CtlError>
            err++;
 8010b7c:	7afb      	ldrb	r3, [r7, #11]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	72fb      	strb	r3, [r7, #11]
          break;
 8010b82:	e06f      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d00b      	beq.n	8010ba8 <USBD_GetDescriptor+0x1e4>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	7c12      	ldrb	r2, [r2, #16]
 8010b9c:	f107 0108 	add.w	r1, r7, #8
 8010ba0:	4610      	mov	r0, r2
 8010ba2:	4798      	blx	r3
 8010ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ba6:	e05d      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8010ba8:	6839      	ldr	r1, [r7, #0]
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f000 fab5 	bl	801111a <USBD_CtlError>
            err++;
 8010bb0:	7afb      	ldrb	r3, [r7, #11]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8010bb6:	e055      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010bbe:	691b      	ldr	r3, [r3, #16]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d00b      	beq.n	8010bdc <USBD_GetDescriptor+0x218>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010bca:	691b      	ldr	r3, [r3, #16]
 8010bcc:	687a      	ldr	r2, [r7, #4]
 8010bce:	7c12      	ldrb	r2, [r2, #16]
 8010bd0:	f107 0108 	add.w	r1, r7, #8
 8010bd4:	4610      	mov	r0, r2
 8010bd6:	4798      	blx	r3
 8010bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010bda:	e043      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8010bdc:	6839      	ldr	r1, [r7, #0]
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 fa9b 	bl	801111a <USBD_CtlError>
            err++;
 8010be4:	7afb      	ldrb	r3, [r7, #11]
 8010be6:	3301      	adds	r3, #1
 8010be8:	72fb      	strb	r3, [r7, #11]
          break;
 8010bea:	e03b      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010bf2:	695b      	ldr	r3, [r3, #20]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00b      	beq.n	8010c10 <USBD_GetDescriptor+0x24c>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010bfe:	695b      	ldr	r3, [r3, #20]
 8010c00:	687a      	ldr	r2, [r7, #4]
 8010c02:	7c12      	ldrb	r2, [r2, #16]
 8010c04:	f107 0108 	add.w	r1, r7, #8
 8010c08:	4610      	mov	r0, r2
 8010c0a:	4798      	blx	r3
 8010c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c0e:	e029      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8010c10:	6839      	ldr	r1, [r7, #0]
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 fa81 	bl	801111a <USBD_CtlError>
            err++;
 8010c18:	7afb      	ldrb	r3, [r7, #11]
 8010c1a:	3301      	adds	r3, #1
 8010c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8010c1e:	e021      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c26:	699b      	ldr	r3, [r3, #24]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d00b      	beq.n	8010c44 <USBD_GetDescriptor+0x280>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c32:	699b      	ldr	r3, [r3, #24]
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	7c12      	ldrb	r2, [r2, #16]
 8010c38:	f107 0108 	add.w	r1, r7, #8
 8010c3c:	4610      	mov	r0, r2
 8010c3e:	4798      	blx	r3
 8010c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c42:	e00f      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8010c44:	6839      	ldr	r1, [r7, #0]
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 fa67 	bl	801111a <USBD_CtlError>
            err++;
 8010c4c:	7afb      	ldrb	r3, [r7, #11]
 8010c4e:	3301      	adds	r3, #1
 8010c50:	72fb      	strb	r3, [r7, #11]
          break;
 8010c52:	e007      	b.n	8010c64 <USBD_GetDescriptor+0x2a0>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010c54:	6839      	ldr	r1, [r7, #0]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 fa5f 	bl	801111a <USBD_CtlError>
          err++;
 8010c5c:	7afb      	ldrb	r3, [r7, #11]
 8010c5e:	3301      	adds	r3, #1
 8010c60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010c62:	bf00      	nop
      }
      break;
 8010c64:	e056      	b.n	8010d14 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	7c1b      	ldrb	r3, [r3, #16]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d117      	bne.n	8010c9e <USBD_GetDescriptor+0x2da>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d007      	beq.n	8010c8a <USBD_GetDescriptor+0x2c6>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
 8010c7a:	4b21      	ldr	r3, [pc, #132]	; (8010d00 <USBD_GetDescriptor+0x33c>)
 8010c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c7e:	f107 0208 	add.w	r2, r7, #8
 8010c82:	4610      	mov	r0, r2
 8010c84:	4798      	blx	r3
 8010c86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010c88:	e044      	b.n	8010d14 <USBD_GetDescriptor+0x350>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c92:	f107 0208 	add.w	r2, r7, #8
 8010c96:	4610      	mov	r0, r2
 8010c98:	4798      	blx	r3
 8010c9a:	60f8      	str	r0, [r7, #12]
      break;
 8010c9c:	e03a      	b.n	8010d14 <USBD_GetDescriptor+0x350>
        USBD_CtlError(pdev, req);
 8010c9e:	6839      	ldr	r1, [r7, #0]
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f000 fa3a 	bl	801111a <USBD_CtlError>
        err++;
 8010ca6:	7afb      	ldrb	r3, [r7, #11]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	72fb      	strb	r3, [r7, #11]
      break;
 8010cac:	e032      	b.n	8010d14 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	7c1b      	ldrb	r3, [r3, #16]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d11b      	bne.n	8010cee <USBD_GetDescriptor+0x32a>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d007      	beq.n	8010cd2 <USBD_GetDescriptor+0x30e>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
 8010cc2:	4b0f      	ldr	r3, [pc, #60]	; (8010d00 <USBD_GetDescriptor+0x33c>)
 8010cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cc6:	f107 0208 	add.w	r2, r7, #8
 8010cca:	4610      	mov	r0, r2
 8010ccc:	4798      	blx	r3
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	e008      	b.n	8010ce4 <USBD_GetDescriptor+0x320>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cda:	f107 0208 	add.w	r2, r7, #8
 8010cde:	4610      	mov	r0, r2
 8010ce0:	4798      	blx	r3
 8010ce2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	2207      	movs	r2, #7
 8010cea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010cec:	e012      	b.n	8010d14 <USBD_GetDescriptor+0x350>
        USBD_CtlError(pdev, req);
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 fa12 	bl	801111a <USBD_CtlError>
        err++;
 8010cf6:	7afb      	ldrb	r3, [r7, #11]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	72fb      	strb	r3, [r7, #11]
      break;
 8010cfc:	e00a      	b.n	8010d14 <USBD_GetDescriptor+0x350>
 8010cfe:	bf00      	nop
 8010d00:	24000060 	.word	0x24000060

    default:
      USBD_CtlError(pdev, req);
 8010d04:	6839      	ldr	r1, [r7, #0]
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f000 fa07 	bl	801111a <USBD_CtlError>
      err++;
 8010d0c:	7afb      	ldrb	r3, [r7, #11]
 8010d0e:	3301      	adds	r3, #1
 8010d10:	72fb      	strb	r3, [r7, #11]
      break;
 8010d12:	bf00      	nop
  }

  if (err != 0U)
 8010d14:	7afb      	ldrb	r3, [r7, #11]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d11e      	bne.n	8010d58 <USBD_GetDescriptor+0x394>
  {
    return;
  }

  if (req->wLength != 0U)
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	88db      	ldrh	r3, [r3, #6]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d016      	beq.n	8010d50 <USBD_GetDescriptor+0x38c>
  {
    if (len != 0U)
 8010d22:	893b      	ldrh	r3, [r7, #8]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00e      	beq.n	8010d46 <USBD_GetDescriptor+0x382>
    {
      len = MIN(len, req->wLength);
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	88da      	ldrh	r2, [r3, #6]
 8010d2c:	893b      	ldrh	r3, [r7, #8]
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	bf28      	it	cs
 8010d32:	4613      	movcs	r3, r2
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010d38:	893b      	ldrh	r3, [r7, #8]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	68f9      	ldr	r1, [r7, #12]
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f000 fa5c 	bl	80111fc <USBD_CtlSendData>
 8010d44:	e009      	b.n	8010d5a <USBD_GetDescriptor+0x396>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010d46:	6839      	ldr	r1, [r7, #0]
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f000 f9e6 	bl	801111a <USBD_CtlError>
 8010d4e:	e004      	b.n	8010d5a <USBD_GetDescriptor+0x396>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 faad 	bl	80112b0 <USBD_CtlSendStatus>
 8010d56:	e000      	b.n	8010d5a <USBD_GetDescriptor+0x396>
    return;
 8010d58:	bf00      	nop
  }
}
 8010d5a:	3710      	adds	r7, #16
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	889b      	ldrh	r3, [r3, #4]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d131      	bne.n	8010dd6 <USBD_SetAddress+0x76>
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	88db      	ldrh	r3, [r3, #6]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d12d      	bne.n	8010dd6 <USBD_SetAddress+0x76>
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	885b      	ldrh	r3, [r3, #2]
 8010d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8010d80:	d829      	bhi.n	8010dd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	885b      	ldrh	r3, [r3, #2]
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	2b03      	cmp	r3, #3
 8010d98:	d104      	bne.n	8010da4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010d9a:	6839      	ldr	r1, [r7, #0]
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 f9bc 	bl	801111a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010da2:	e01d      	b.n	8010de0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	7bfa      	ldrb	r2, [r7, #15]
 8010da8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010dac:	7bfb      	ldrb	r3, [r7, #15]
 8010dae:	4619      	mov	r1, r3
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f005 f858 	bl	8015e66 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f000 fa7a 	bl	80112b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010dbc:	7bfb      	ldrb	r3, [r7, #15]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d004      	beq.n	8010dcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2202      	movs	r2, #2
 8010dc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dca:	e009      	b.n	8010de0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2201      	movs	r2, #1
 8010dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dd4:	e004      	b.n	8010de0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010dd6:	6839      	ldr	r1, [r7, #0]
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 f99e 	bl	801111a <USBD_CtlError>
  }
}
 8010dde:	bf00      	nop
 8010de0:	bf00      	nop
 8010de2:	3710      	adds	r7, #16
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b084      	sub	sp, #16
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010df2:	2300      	movs	r3, #0
 8010df4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	885b      	ldrh	r3, [r3, #2]
 8010dfa:	b2da      	uxtb	r2, r3
 8010dfc:	4b4e      	ldr	r3, [pc, #312]	; (8010f38 <USBD_SetConfig+0x150>)
 8010dfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010e00:	4b4d      	ldr	r3, [pc, #308]	; (8010f38 <USBD_SetConfig+0x150>)
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	d905      	bls.n	8010e14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010e08:	6839      	ldr	r1, [r7, #0]
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f000 f985 	bl	801111a <USBD_CtlError>
    return USBD_FAIL;
 8010e10:	2303      	movs	r3, #3
 8010e12:	e08c      	b.n	8010f2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e1a:	b2db      	uxtb	r3, r3
 8010e1c:	2b02      	cmp	r3, #2
 8010e1e:	d002      	beq.n	8010e26 <USBD_SetConfig+0x3e>
 8010e20:	2b03      	cmp	r3, #3
 8010e22:	d029      	beq.n	8010e78 <USBD_SetConfig+0x90>
 8010e24:	e075      	b.n	8010f12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010e26:	4b44      	ldr	r3, [pc, #272]	; (8010f38 <USBD_SetConfig+0x150>)
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d020      	beq.n	8010e70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010e2e:	4b42      	ldr	r3, [pc, #264]	; (8010f38 <USBD_SetConfig+0x150>)
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	461a      	mov	r2, r3
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010e38:	4b3f      	ldr	r3, [pc, #252]	; (8010f38 <USBD_SetConfig+0x150>)
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	4619      	mov	r1, r3
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f7fe fe53 	bl	800faea <USBD_SetClassConfig>
 8010e44:	4603      	mov	r3, r0
 8010e46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010e48:	7bfb      	ldrb	r3, [r7, #15]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d008      	beq.n	8010e60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010e4e:	6839      	ldr	r1, [r7, #0]
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f000 f962 	bl	801111a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2202      	movs	r2, #2
 8010e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010e5e:	e065      	b.n	8010f2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f000 fa25 	bl	80112b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2203      	movs	r2, #3
 8010e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010e6e:	e05d      	b.n	8010f2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f000 fa1d 	bl	80112b0 <USBD_CtlSendStatus>
      break;
 8010e76:	e059      	b.n	8010f2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010e78:	4b2f      	ldr	r3, [pc, #188]	; (8010f38 <USBD_SetConfig+0x150>)
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d112      	bne.n	8010ea6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2202      	movs	r2, #2
 8010e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010e88:	4b2b      	ldr	r3, [pc, #172]	; (8010f38 <USBD_SetConfig+0x150>)
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010e92:	4b29      	ldr	r3, [pc, #164]	; (8010f38 <USBD_SetConfig+0x150>)
 8010e94:	781b      	ldrb	r3, [r3, #0]
 8010e96:	4619      	mov	r1, r3
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7fe fe62 	bl	800fb62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 fa06 	bl	80112b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010ea4:	e042      	b.n	8010f2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010ea6:	4b24      	ldr	r3, [pc, #144]	; (8010f38 <USBD_SetConfig+0x150>)
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	461a      	mov	r2, r3
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d02a      	beq.n	8010f0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	4619      	mov	r1, r3
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7fe fe50 	bl	800fb62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010ec2:	4b1d      	ldr	r3, [pc, #116]	; (8010f38 <USBD_SetConfig+0x150>)
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010ecc:	4b1a      	ldr	r3, [pc, #104]	; (8010f38 <USBD_SetConfig+0x150>)
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7fe fe09 	bl	800faea <USBD_SetClassConfig>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010edc:	7bfb      	ldrb	r3, [r7, #15]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00f      	beq.n	8010f02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010ee2:	6839      	ldr	r1, [r7, #0]
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f000 f918 	bl	801111a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	b2db      	uxtb	r3, r3
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f7fe fe35 	bl	800fb62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2202      	movs	r2, #2
 8010efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010f00:	e014      	b.n	8010f2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 f9d4 	bl	80112b0 <USBD_CtlSendStatus>
      break;
 8010f08:	e010      	b.n	8010f2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f000 f9d0 	bl	80112b0 <USBD_CtlSendStatus>
      break;
 8010f10:	e00c      	b.n	8010f2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010f12:	6839      	ldr	r1, [r7, #0]
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f000 f900 	bl	801111a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010f1a:	4b07      	ldr	r3, [pc, #28]	; (8010f38 <USBD_SetConfig+0x150>)
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	4619      	mov	r1, r3
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f7fe fe1e 	bl	800fb62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010f26:	2303      	movs	r3, #3
 8010f28:	73fb      	strb	r3, [r7, #15]
      break;
 8010f2a:	bf00      	nop
  }

  return ret;
 8010f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	2400042c 	.word	0x2400042c

08010f3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b082      	sub	sp, #8
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	88db      	ldrh	r3, [r3, #6]
 8010f4a:	2b01      	cmp	r3, #1
 8010f4c:	d004      	beq.n	8010f58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010f4e:	6839      	ldr	r1, [r7, #0]
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 f8e2 	bl	801111a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010f56:	e023      	b.n	8010fa0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	2b02      	cmp	r3, #2
 8010f62:	dc02      	bgt.n	8010f6a <USBD_GetConfig+0x2e>
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	dc03      	bgt.n	8010f70 <USBD_GetConfig+0x34>
 8010f68:	e015      	b.n	8010f96 <USBD_GetConfig+0x5a>
 8010f6a:	2b03      	cmp	r3, #3
 8010f6c:	d00b      	beq.n	8010f86 <USBD_GetConfig+0x4a>
 8010f6e:	e012      	b.n	8010f96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2200      	movs	r2, #0
 8010f74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	3308      	adds	r3, #8
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 f93c 	bl	80111fc <USBD_CtlSendData>
        break;
 8010f84:	e00c      	b.n	8010fa0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	3304      	adds	r3, #4
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f000 f934 	bl	80111fc <USBD_CtlSendData>
        break;
 8010f94:	e004      	b.n	8010fa0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010f96:	6839      	ldr	r1, [r7, #0]
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 f8be 	bl	801111a <USBD_CtlError>
        break;
 8010f9e:	bf00      	nop
}
 8010fa0:	bf00      	nop
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b082      	sub	sp, #8
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fb8:	b2db      	uxtb	r3, r3
 8010fba:	3b01      	subs	r3, #1
 8010fbc:	2b02      	cmp	r3, #2
 8010fbe:	d81e      	bhi.n	8010ffe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	88db      	ldrh	r3, [r3, #6]
 8010fc4:	2b02      	cmp	r3, #2
 8010fc6:	d004      	beq.n	8010fd2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010fc8:	6839      	ldr	r1, [r7, #0]
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 f8a5 	bl	801111a <USBD_CtlError>
        break;
 8010fd0:	e01a      	b.n	8011008 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2201      	movs	r2, #1
 8010fd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d005      	beq.n	8010fee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	f043 0202 	orr.w	r2, r3, #2
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	330c      	adds	r3, #12
 8010ff2:	2202      	movs	r2, #2
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 f900 	bl	80111fc <USBD_CtlSendData>
      break;
 8010ffc:	e004      	b.n	8011008 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010ffe:	6839      	ldr	r1, [r7, #0]
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f000 f88a 	bl	801111a <USBD_CtlError>
      break;
 8011006:	bf00      	nop
  }
}
 8011008:	bf00      	nop
 801100a:	3708      	adds	r7, #8
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	885b      	ldrh	r3, [r3, #2]
 801101e:	2b01      	cmp	r3, #1
 8011020:	d107      	bne.n	8011032 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2201      	movs	r2, #1
 8011026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 f940 	bl	80112b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011030:	e013      	b.n	801105a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	885b      	ldrh	r3, [r3, #2]
 8011036:	2b02      	cmp	r3, #2
 8011038:	d10b      	bne.n	8011052 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	889b      	ldrh	r3, [r3, #4]
 801103e:	0a1b      	lsrs	r3, r3, #8
 8011040:	b29b      	uxth	r3, r3
 8011042:	b2da      	uxtb	r2, r3
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 f930 	bl	80112b0 <USBD_CtlSendStatus>
}
 8011050:	e003      	b.n	801105a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011052:	6839      	ldr	r1, [r7, #0]
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 f860 	bl	801111a <USBD_CtlError>
}
 801105a:	bf00      	nop
 801105c:	3708      	adds	r7, #8
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}

08011062 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011062:	b580      	push	{r7, lr}
 8011064:	b082      	sub	sp, #8
 8011066:	af00      	add	r7, sp, #0
 8011068:	6078      	str	r0, [r7, #4]
 801106a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011072:	b2db      	uxtb	r3, r3
 8011074:	3b01      	subs	r3, #1
 8011076:	2b02      	cmp	r3, #2
 8011078:	d80b      	bhi.n	8011092 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	885b      	ldrh	r3, [r3, #2]
 801107e:	2b01      	cmp	r3, #1
 8011080:	d10c      	bne.n	801109c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2200      	movs	r2, #0
 8011086:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 f910 	bl	80112b0 <USBD_CtlSendStatus>
      }
      break;
 8011090:	e004      	b.n	801109c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011092:	6839      	ldr	r1, [r7, #0]
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 f840 	bl	801111a <USBD_CtlError>
      break;
 801109a:	e000      	b.n	801109e <USBD_ClrFeature+0x3c>
      break;
 801109c:	bf00      	nop
  }
}
 801109e:	bf00      	nop
 80110a0:	3708      	adds	r7, #8
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}

080110a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80110a6:	b580      	push	{r7, lr}
 80110a8:	b084      	sub	sp, #16
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	6078      	str	r0, [r7, #4]
 80110ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	781a      	ldrb	r2, [r3, #0]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	3301      	adds	r3, #1
 80110c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	781a      	ldrb	r2, [r3, #0]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	3301      	adds	r3, #1
 80110ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80110d0:	68f8      	ldr	r0, [r7, #12]
 80110d2:	f7ff f9dc 	bl	801048e <SWAPBYTE>
 80110d6:	4603      	mov	r3, r0
 80110d8:	461a      	mov	r2, r3
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	3301      	adds	r3, #1
 80110e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	3301      	adds	r3, #1
 80110e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80110ea:	68f8      	ldr	r0, [r7, #12]
 80110ec:	f7ff f9cf 	bl	801048e <SWAPBYTE>
 80110f0:	4603      	mov	r3, r0
 80110f2:	461a      	mov	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	3301      	adds	r3, #1
 80110fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	3301      	adds	r3, #1
 8011102:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f7ff f9c2 	bl	801048e <SWAPBYTE>
 801110a:	4603      	mov	r3, r0
 801110c:	461a      	mov	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	80da      	strh	r2, [r3, #6]
}
 8011112:	bf00      	nop
 8011114:	3710      	adds	r7, #16
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}

0801111a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801111a:	b580      	push	{r7, lr}
 801111c:	b082      	sub	sp, #8
 801111e:	af00      	add	r7, sp, #0
 8011120:	6078      	str	r0, [r7, #4]
 8011122:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011124:	2180      	movs	r1, #128	; 0x80
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f004 fe33 	bl	8015d92 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801112c:	2100      	movs	r1, #0
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f004 fe2f 	bl	8015d92 <USBD_LL_StallEP>
}
 8011134:	bf00      	nop
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b086      	sub	sp, #24
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011148:	2300      	movs	r3, #0
 801114a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d036      	beq.n	80111c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011156:	6938      	ldr	r0, [r7, #16]
 8011158:	f000 f836 	bl	80111c8 <USBD_GetLen>
 801115c:	4603      	mov	r3, r0
 801115e:	3301      	adds	r3, #1
 8011160:	b29b      	uxth	r3, r3
 8011162:	005b      	lsls	r3, r3, #1
 8011164:	b29a      	uxth	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801116a:	7dfb      	ldrb	r3, [r7, #23]
 801116c:	68ba      	ldr	r2, [r7, #8]
 801116e:	4413      	add	r3, r2
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	7812      	ldrb	r2, [r2, #0]
 8011174:	701a      	strb	r2, [r3, #0]
  idx++;
 8011176:	7dfb      	ldrb	r3, [r7, #23]
 8011178:	3301      	adds	r3, #1
 801117a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801117c:	7dfb      	ldrb	r3, [r7, #23]
 801117e:	68ba      	ldr	r2, [r7, #8]
 8011180:	4413      	add	r3, r2
 8011182:	2203      	movs	r2, #3
 8011184:	701a      	strb	r2, [r3, #0]
  idx++;
 8011186:	7dfb      	ldrb	r3, [r7, #23]
 8011188:	3301      	adds	r3, #1
 801118a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801118c:	e013      	b.n	80111b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801118e:	7dfb      	ldrb	r3, [r7, #23]
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	4413      	add	r3, r2
 8011194:	693a      	ldr	r2, [r7, #16]
 8011196:	7812      	ldrb	r2, [r2, #0]
 8011198:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	3301      	adds	r3, #1
 801119e:	613b      	str	r3, [r7, #16]
    idx++;
 80111a0:	7dfb      	ldrb	r3, [r7, #23]
 80111a2:	3301      	adds	r3, #1
 80111a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80111a6:	7dfb      	ldrb	r3, [r7, #23]
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	4413      	add	r3, r2
 80111ac:	2200      	movs	r2, #0
 80111ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80111b0:	7dfb      	ldrb	r3, [r7, #23]
 80111b2:	3301      	adds	r3, #1
 80111b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d1e7      	bne.n	801118e <USBD_GetString+0x52>
 80111be:	e000      	b.n	80111c2 <USBD_GetString+0x86>
    return;
 80111c0:	bf00      	nop
  }
}
 80111c2:	3718      	adds	r7, #24
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b085      	sub	sp, #20
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80111d0:	2300      	movs	r3, #0
 80111d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80111d8:	e005      	b.n	80111e6 <USBD_GetLen+0x1e>
  {
    len++;
 80111da:	7bfb      	ldrb	r3, [r7, #15]
 80111dc:	3301      	adds	r3, #1
 80111de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	3301      	adds	r3, #1
 80111e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d1f5      	bne.n	80111da <USBD_GetLen+0x12>
  }

  return len;
 80111ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3714      	adds	r7, #20
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	60b9      	str	r1, [r7, #8]
 8011206:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2202      	movs	r2, #2
 801120c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	68ba      	ldr	r2, [r7, #8]
 8011220:	2100      	movs	r1, #0
 8011222:	68f8      	ldr	r0, [r7, #12]
 8011224:	f004 fe3e 	bl	8015ea4 <USBD_LL_Transmit>

  return USBD_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3710      	adds	r7, #16
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}

08011232 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011232:	b580      	push	{r7, lr}
 8011234:	b084      	sub	sp, #16
 8011236:	af00      	add	r7, sp, #0
 8011238:	60f8      	str	r0, [r7, #12]
 801123a:	60b9      	str	r1, [r7, #8]
 801123c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	68ba      	ldr	r2, [r7, #8]
 8011242:	2100      	movs	r1, #0
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f004 fe2d 	bl	8015ea4 <USBD_LL_Transmit>

  return USBD_OK;
 801124a:	2300      	movs	r3, #0
}
 801124c:	4618      	mov	r0, r3
 801124e:	3710      	adds	r7, #16
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2203      	movs	r2, #3
 8011264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	68ba      	ldr	r2, [r7, #8]
 801127c:	2100      	movs	r1, #0
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f004 fe31 	bl	8015ee6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011284:	2300      	movs	r3, #0
}
 8011286:	4618      	mov	r0, r3
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}

0801128e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801128e:	b580      	push	{r7, lr}
 8011290:	b084      	sub	sp, #16
 8011292:	af00      	add	r7, sp, #0
 8011294:	60f8      	str	r0, [r7, #12]
 8011296:	60b9      	str	r1, [r7, #8]
 8011298:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	68ba      	ldr	r2, [r7, #8]
 801129e:	2100      	movs	r1, #0
 80112a0:	68f8      	ldr	r0, [r7, #12]
 80112a2:	f004 fe20 	bl	8015ee6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112a6:	2300      	movs	r3, #0
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3710      	adds	r7, #16
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2204      	movs	r2, #4
 80112bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80112c0:	2300      	movs	r3, #0
 80112c2:	2200      	movs	r2, #0
 80112c4:	2100      	movs	r1, #0
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f004 fdec 	bl	8015ea4 <USBD_LL_Transmit>

  return USBD_OK;
 80112cc:	2300      	movs	r3, #0
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b082      	sub	sp, #8
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2205      	movs	r2, #5
 80112e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80112e6:	2300      	movs	r3, #0
 80112e8:	2200      	movs	r2, #0
 80112ea:	2100      	movs	r1, #0
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f004 fdfa 	bl	8015ee6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112f2:	2300      	movs	r3, #0
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	4603      	mov	r3, r0
 8011304:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011306:	79fb      	ldrb	r3, [r7, #7]
 8011308:	4a08      	ldr	r2, [pc, #32]	; (801132c <disk_status+0x30>)
 801130a:	009b      	lsls	r3, r3, #2
 801130c:	4413      	add	r3, r2
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	79fa      	ldrb	r2, [r7, #7]
 8011314:	4905      	ldr	r1, [pc, #20]	; (801132c <disk_status+0x30>)
 8011316:	440a      	add	r2, r1
 8011318:	7a12      	ldrb	r2, [r2, #8]
 801131a:	4610      	mov	r0, r2
 801131c:	4798      	blx	r3
 801131e:	4603      	mov	r3, r0
 8011320:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011322:	7bfb      	ldrb	r3, [r7, #15]
}
 8011324:	4618      	mov	r0, r3
 8011326:	3710      	adds	r7, #16
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	24000458 	.word	0x24000458

08011330 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	4603      	mov	r3, r0
 8011338:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801133a:	2300      	movs	r3, #0
 801133c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801133e:	79fb      	ldrb	r3, [r7, #7]
 8011340:	4a0d      	ldr	r2, [pc, #52]	; (8011378 <disk_initialize+0x48>)
 8011342:	5cd3      	ldrb	r3, [r2, r3]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d111      	bne.n	801136c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011348:	79fb      	ldrb	r3, [r7, #7]
 801134a:	4a0b      	ldr	r2, [pc, #44]	; (8011378 <disk_initialize+0x48>)
 801134c:	2101      	movs	r1, #1
 801134e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011350:	79fb      	ldrb	r3, [r7, #7]
 8011352:	4a09      	ldr	r2, [pc, #36]	; (8011378 <disk_initialize+0x48>)
 8011354:	009b      	lsls	r3, r3, #2
 8011356:	4413      	add	r3, r2
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	79fa      	ldrb	r2, [r7, #7]
 801135e:	4906      	ldr	r1, [pc, #24]	; (8011378 <disk_initialize+0x48>)
 8011360:	440a      	add	r2, r1
 8011362:	7a12      	ldrb	r2, [r2, #8]
 8011364:	4610      	mov	r0, r2
 8011366:	4798      	blx	r3
 8011368:	4603      	mov	r3, r0
 801136a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801136c:	7bfb      	ldrb	r3, [r7, #15]
}
 801136e:	4618      	mov	r0, r3
 8011370:	3710      	adds	r7, #16
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	24000458 	.word	0x24000458

0801137c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801137c:	b590      	push	{r4, r7, lr}
 801137e:	b087      	sub	sp, #28
 8011380:	af00      	add	r7, sp, #0
 8011382:	60b9      	str	r1, [r7, #8]
 8011384:	607a      	str	r2, [r7, #4]
 8011386:	603b      	str	r3, [r7, #0]
 8011388:	4603      	mov	r3, r0
 801138a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801138c:	7bfb      	ldrb	r3, [r7, #15]
 801138e:	4a0a      	ldr	r2, [pc, #40]	; (80113b8 <disk_read+0x3c>)
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	4413      	add	r3, r2
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	689c      	ldr	r4, [r3, #8]
 8011398:	7bfb      	ldrb	r3, [r7, #15]
 801139a:	4a07      	ldr	r2, [pc, #28]	; (80113b8 <disk_read+0x3c>)
 801139c:	4413      	add	r3, r2
 801139e:	7a18      	ldrb	r0, [r3, #8]
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	687a      	ldr	r2, [r7, #4]
 80113a4:	68b9      	ldr	r1, [r7, #8]
 80113a6:	47a0      	blx	r4
 80113a8:	4603      	mov	r3, r0
 80113aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80113ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	371c      	adds	r7, #28
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd90      	pop	{r4, r7, pc}
 80113b6:	bf00      	nop
 80113b8:	24000458 	.word	0x24000458

080113bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80113bc:	b590      	push	{r4, r7, lr}
 80113be:	b087      	sub	sp, #28
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	60b9      	str	r1, [r7, #8]
 80113c4:	607a      	str	r2, [r7, #4]
 80113c6:	603b      	str	r3, [r7, #0]
 80113c8:	4603      	mov	r3, r0
 80113ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80113cc:	7bfb      	ldrb	r3, [r7, #15]
 80113ce:	4a0a      	ldr	r2, [pc, #40]	; (80113f8 <disk_write+0x3c>)
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	4413      	add	r3, r2
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	68dc      	ldr	r4, [r3, #12]
 80113d8:	7bfb      	ldrb	r3, [r7, #15]
 80113da:	4a07      	ldr	r2, [pc, #28]	; (80113f8 <disk_write+0x3c>)
 80113dc:	4413      	add	r3, r2
 80113de:	7a18      	ldrb	r0, [r3, #8]
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	687a      	ldr	r2, [r7, #4]
 80113e4:	68b9      	ldr	r1, [r7, #8]
 80113e6:	47a0      	blx	r4
 80113e8:	4603      	mov	r3, r0
 80113ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80113ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	371c      	adds	r7, #28
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd90      	pop	{r4, r7, pc}
 80113f6:	bf00      	nop
 80113f8:	24000458 	.word	0x24000458

080113fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	4603      	mov	r3, r0
 8011404:	603a      	str	r2, [r7, #0]
 8011406:	71fb      	strb	r3, [r7, #7]
 8011408:	460b      	mov	r3, r1
 801140a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801140c:	79fb      	ldrb	r3, [r7, #7]
 801140e:	4a09      	ldr	r2, [pc, #36]	; (8011434 <disk_ioctl+0x38>)
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	4413      	add	r3, r2
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	691b      	ldr	r3, [r3, #16]
 8011418:	79fa      	ldrb	r2, [r7, #7]
 801141a:	4906      	ldr	r1, [pc, #24]	; (8011434 <disk_ioctl+0x38>)
 801141c:	440a      	add	r2, r1
 801141e:	7a10      	ldrb	r0, [r2, #8]
 8011420:	79b9      	ldrb	r1, [r7, #6]
 8011422:	683a      	ldr	r2, [r7, #0]
 8011424:	4798      	blx	r3
 8011426:	4603      	mov	r3, r0
 8011428:	73fb      	strb	r3, [r7, #15]
  return res;
 801142a:	7bfb      	ldrb	r3, [r7, #15]
}
 801142c:	4618      	mov	r0, r3
 801142e:	3710      	adds	r7, #16
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	24000458 	.word	0x24000458

08011438 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011438:	b480      	push	{r7}
 801143a:	b085      	sub	sp, #20
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	3301      	adds	r3, #1
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011448:	89fb      	ldrh	r3, [r7, #14]
 801144a:	021b      	lsls	r3, r3, #8
 801144c:	b21a      	sxth	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	b21b      	sxth	r3, r3
 8011454:	4313      	orrs	r3, r2
 8011456:	b21b      	sxth	r3, r3
 8011458:	81fb      	strh	r3, [r7, #14]
	return rv;
 801145a:	89fb      	ldrh	r3, [r7, #14]
}
 801145c:	4618      	mov	r0, r3
 801145e:	3714      	adds	r7, #20
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr

08011468 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011468:	b480      	push	{r7}
 801146a:	b085      	sub	sp, #20
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	3303      	adds	r3, #3
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	021b      	lsls	r3, r3, #8
 801147c:	687a      	ldr	r2, [r7, #4]
 801147e:	3202      	adds	r2, #2
 8011480:	7812      	ldrb	r2, [r2, #0]
 8011482:	4313      	orrs	r3, r2
 8011484:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	021b      	lsls	r3, r3, #8
 801148a:	687a      	ldr	r2, [r7, #4]
 801148c:	3201      	adds	r2, #1
 801148e:	7812      	ldrb	r2, [r2, #0]
 8011490:	4313      	orrs	r3, r2
 8011492:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	021b      	lsls	r3, r3, #8
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	7812      	ldrb	r2, [r2, #0]
 801149c:	4313      	orrs	r3, r2
 801149e:	60fb      	str	r3, [r7, #12]
	return rv;
 80114a0:	68fb      	ldr	r3, [r7, #12]
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3714      	adds	r7, #20
 80114a6:	46bd      	mov	sp, r7
 80114a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ac:	4770      	bx	lr

080114ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80114ae:	b480      	push	{r7}
 80114b0:	b083      	sub	sp, #12
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
 80114b6:	460b      	mov	r3, r1
 80114b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	1c5a      	adds	r2, r3, #1
 80114be:	607a      	str	r2, [r7, #4]
 80114c0:	887a      	ldrh	r2, [r7, #2]
 80114c2:	b2d2      	uxtb	r2, r2
 80114c4:	701a      	strb	r2, [r3, #0]
 80114c6:	887b      	ldrh	r3, [r7, #2]
 80114c8:	0a1b      	lsrs	r3, r3, #8
 80114ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	1c5a      	adds	r2, r3, #1
 80114d0:	607a      	str	r2, [r7, #4]
 80114d2:	887a      	ldrh	r2, [r7, #2]
 80114d4:	b2d2      	uxtb	r2, r2
 80114d6:	701a      	strb	r2, [r3, #0]
}
 80114d8:	bf00      	nop
 80114da:	370c      	adds	r7, #12
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr

080114e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	1c5a      	adds	r2, r3, #1
 80114f2:	607a      	str	r2, [r7, #4]
 80114f4:	683a      	ldr	r2, [r7, #0]
 80114f6:	b2d2      	uxtb	r2, r2
 80114f8:	701a      	strb	r2, [r3, #0]
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	0a1b      	lsrs	r3, r3, #8
 80114fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	1c5a      	adds	r2, r3, #1
 8011504:	607a      	str	r2, [r7, #4]
 8011506:	683a      	ldr	r2, [r7, #0]
 8011508:	b2d2      	uxtb	r2, r2
 801150a:	701a      	strb	r2, [r3, #0]
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	0a1b      	lsrs	r3, r3, #8
 8011510:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	1c5a      	adds	r2, r3, #1
 8011516:	607a      	str	r2, [r7, #4]
 8011518:	683a      	ldr	r2, [r7, #0]
 801151a:	b2d2      	uxtb	r2, r2
 801151c:	701a      	strb	r2, [r3, #0]
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	0a1b      	lsrs	r3, r3, #8
 8011522:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	1c5a      	adds	r2, r3, #1
 8011528:	607a      	str	r2, [r7, #4]
 801152a:	683a      	ldr	r2, [r7, #0]
 801152c:	b2d2      	uxtb	r2, r2
 801152e:	701a      	strb	r2, [r3, #0]
}
 8011530:	bf00      	nop
 8011532:	370c      	adds	r7, #12
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr

0801153c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801153c:	b480      	push	{r7}
 801153e:	b087      	sub	sp, #28
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00d      	beq.n	8011572 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011556:	693a      	ldr	r2, [r7, #16]
 8011558:	1c53      	adds	r3, r2, #1
 801155a:	613b      	str	r3, [r7, #16]
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	1c59      	adds	r1, r3, #1
 8011560:	6179      	str	r1, [r7, #20]
 8011562:	7812      	ldrb	r2, [r2, #0]
 8011564:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	3b01      	subs	r3, #1
 801156a:	607b      	str	r3, [r7, #4]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d1f1      	bne.n	8011556 <mem_cpy+0x1a>
	}
}
 8011572:	bf00      	nop
 8011574:	371c      	adds	r7, #28
 8011576:	46bd      	mov	sp, r7
 8011578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157c:	4770      	bx	lr

0801157e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801157e:	b480      	push	{r7}
 8011580:	b087      	sub	sp, #28
 8011582:	af00      	add	r7, sp, #0
 8011584:	60f8      	str	r0, [r7, #12]
 8011586:	60b9      	str	r1, [r7, #8]
 8011588:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	1c5a      	adds	r2, r3, #1
 8011592:	617a      	str	r2, [r7, #20]
 8011594:	68ba      	ldr	r2, [r7, #8]
 8011596:	b2d2      	uxtb	r2, r2
 8011598:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	3b01      	subs	r3, #1
 801159e:	607b      	str	r3, [r7, #4]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d1f3      	bne.n	801158e <mem_set+0x10>
}
 80115a6:	bf00      	nop
 80115a8:	bf00      	nop
 80115aa:	371c      	adds	r7, #28
 80115ac:	46bd      	mov	sp, r7
 80115ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b2:	4770      	bx	lr

080115b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80115b4:	b480      	push	{r7}
 80115b6:	b089      	sub	sp, #36	; 0x24
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	61fb      	str	r3, [r7, #28]
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80115cc:	69fb      	ldr	r3, [r7, #28]
 80115ce:	1c5a      	adds	r2, r3, #1
 80115d0:	61fa      	str	r2, [r7, #28]
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	4619      	mov	r1, r3
 80115d6:	69bb      	ldr	r3, [r7, #24]
 80115d8:	1c5a      	adds	r2, r3, #1
 80115da:	61ba      	str	r2, [r7, #24]
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	1acb      	subs	r3, r1, r3
 80115e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	3b01      	subs	r3, #1
 80115e6:	607b      	str	r3, [r7, #4]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d002      	beq.n	80115f4 <mem_cmp+0x40>
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d0eb      	beq.n	80115cc <mem_cmp+0x18>

	return r;
 80115f4:	697b      	ldr	r3, [r7, #20]
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3724      	adds	r7, #36	; 0x24
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr

08011602 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011602:	b480      	push	{r7}
 8011604:	b083      	sub	sp, #12
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
 801160a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801160c:	e002      	b.n	8011614 <chk_chr+0x12>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	3301      	adds	r3, #1
 8011612:	607b      	str	r3, [r7, #4]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d005      	beq.n	8011628 <chk_chr+0x26>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	781b      	ldrb	r3, [r3, #0]
 8011620:	461a      	mov	r2, r3
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	4293      	cmp	r3, r2
 8011626:	d1f2      	bne.n	801160e <chk_chr+0xc>
	return *str;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	781b      	ldrb	r3, [r3, #0]
}
 801162c:	4618      	mov	r0, r3
 801162e:	370c      	adds	r7, #12
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr

08011638 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011638:	b480      	push	{r7}
 801163a:	b085      	sub	sp, #20
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
 8011640:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011642:	2300      	movs	r3, #0
 8011644:	60bb      	str	r3, [r7, #8]
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	60fb      	str	r3, [r7, #12]
 801164a:	e029      	b.n	80116a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801164c:	4a27      	ldr	r2, [pc, #156]	; (80116ec <chk_lock+0xb4>)
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	011b      	lsls	r3, r3, #4
 8011652:	4413      	add	r3, r2
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d01d      	beq.n	8011696 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801165a:	4a24      	ldr	r2, [pc, #144]	; (80116ec <chk_lock+0xb4>)
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	011b      	lsls	r3, r3, #4
 8011660:	4413      	add	r3, r2
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	429a      	cmp	r2, r3
 801166a:	d116      	bne.n	801169a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801166c:	4a1f      	ldr	r2, [pc, #124]	; (80116ec <chk_lock+0xb4>)
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	011b      	lsls	r3, r3, #4
 8011672:	4413      	add	r3, r2
 8011674:	3304      	adds	r3, #4
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801167c:	429a      	cmp	r2, r3
 801167e:	d10c      	bne.n	801169a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011680:	4a1a      	ldr	r2, [pc, #104]	; (80116ec <chk_lock+0xb4>)
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	011b      	lsls	r3, r3, #4
 8011686:	4413      	add	r3, r2
 8011688:	3308      	adds	r3, #8
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011690:	429a      	cmp	r2, r3
 8011692:	d102      	bne.n	801169a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011694:	e007      	b.n	80116a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011696:	2301      	movs	r3, #1
 8011698:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	3301      	adds	r3, #1
 801169e:	60fb      	str	r3, [r7, #12]
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d9d2      	bls.n	801164c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2b02      	cmp	r3, #2
 80116aa:	d109      	bne.n	80116c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d102      	bne.n	80116b8 <chk_lock+0x80>
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	2b02      	cmp	r3, #2
 80116b6:	d101      	bne.n	80116bc <chk_lock+0x84>
 80116b8:	2300      	movs	r3, #0
 80116ba:	e010      	b.n	80116de <chk_lock+0xa6>
 80116bc:	2312      	movs	r3, #18
 80116be:	e00e      	b.n	80116de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d108      	bne.n	80116d8 <chk_lock+0xa0>
 80116c6:	4a09      	ldr	r2, [pc, #36]	; (80116ec <chk_lock+0xb4>)
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	011b      	lsls	r3, r3, #4
 80116cc:	4413      	add	r3, r2
 80116ce:	330c      	adds	r3, #12
 80116d0:	881b      	ldrh	r3, [r3, #0]
 80116d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116d6:	d101      	bne.n	80116dc <chk_lock+0xa4>
 80116d8:	2310      	movs	r3, #16
 80116da:	e000      	b.n	80116de <chk_lock+0xa6>
 80116dc:	2300      	movs	r3, #0
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3714      	adds	r7, #20
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop
 80116ec:	24000438 	.word	0x24000438

080116f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80116f0:	b480      	push	{r7}
 80116f2:	b083      	sub	sp, #12
 80116f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80116f6:	2300      	movs	r3, #0
 80116f8:	607b      	str	r3, [r7, #4]
 80116fa:	e002      	b.n	8011702 <enq_lock+0x12>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	3301      	adds	r3, #1
 8011700:	607b      	str	r3, [r7, #4]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2b01      	cmp	r3, #1
 8011706:	d806      	bhi.n	8011716 <enq_lock+0x26>
 8011708:	4a09      	ldr	r2, [pc, #36]	; (8011730 <enq_lock+0x40>)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	011b      	lsls	r3, r3, #4
 801170e:	4413      	add	r3, r2
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d1f2      	bne.n	80116fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2b02      	cmp	r3, #2
 801171a:	bf14      	ite	ne
 801171c:	2301      	movne	r3, #1
 801171e:	2300      	moveq	r3, #0
 8011720:	b2db      	uxtb	r3, r3
}
 8011722:	4618      	mov	r0, r3
 8011724:	370c      	adds	r7, #12
 8011726:	46bd      	mov	sp, r7
 8011728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop
 8011730:	24000438 	.word	0x24000438

08011734 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011734:	b480      	push	{r7}
 8011736:	b085      	sub	sp, #20
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801173e:	2300      	movs	r3, #0
 8011740:	60fb      	str	r3, [r7, #12]
 8011742:	e01f      	b.n	8011784 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011744:	4a41      	ldr	r2, [pc, #260]	; (801184c <inc_lock+0x118>)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	011b      	lsls	r3, r3, #4
 801174a:	4413      	add	r3, r2
 801174c:	681a      	ldr	r2, [r3, #0]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	429a      	cmp	r2, r3
 8011754:	d113      	bne.n	801177e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011756:	4a3d      	ldr	r2, [pc, #244]	; (801184c <inc_lock+0x118>)
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	011b      	lsls	r3, r3, #4
 801175c:	4413      	add	r3, r2
 801175e:	3304      	adds	r3, #4
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011766:	429a      	cmp	r2, r3
 8011768:	d109      	bne.n	801177e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801176a:	4a38      	ldr	r2, [pc, #224]	; (801184c <inc_lock+0x118>)
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	011b      	lsls	r3, r3, #4
 8011770:	4413      	add	r3, r2
 8011772:	3308      	adds	r3, #8
 8011774:	681a      	ldr	r2, [r3, #0]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801177a:	429a      	cmp	r2, r3
 801177c:	d006      	beq.n	801178c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	3301      	adds	r3, #1
 8011782:	60fb      	str	r3, [r7, #12]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2b01      	cmp	r3, #1
 8011788:	d9dc      	bls.n	8011744 <inc_lock+0x10>
 801178a:	e000      	b.n	801178e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801178c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2b02      	cmp	r3, #2
 8011792:	d132      	bne.n	80117fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011794:	2300      	movs	r3, #0
 8011796:	60fb      	str	r3, [r7, #12]
 8011798:	e002      	b.n	80117a0 <inc_lock+0x6c>
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	3301      	adds	r3, #1
 801179e:	60fb      	str	r3, [r7, #12]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d806      	bhi.n	80117b4 <inc_lock+0x80>
 80117a6:	4a29      	ldr	r2, [pc, #164]	; (801184c <inc_lock+0x118>)
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	011b      	lsls	r3, r3, #4
 80117ac:	4413      	add	r3, r2
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d1f2      	bne.n	801179a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2b02      	cmp	r3, #2
 80117b8:	d101      	bne.n	80117be <inc_lock+0x8a>
 80117ba:	2300      	movs	r3, #0
 80117bc:	e040      	b.n	8011840 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681a      	ldr	r2, [r3, #0]
 80117c2:	4922      	ldr	r1, [pc, #136]	; (801184c <inc_lock+0x118>)
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	011b      	lsls	r3, r3, #4
 80117c8:	440b      	add	r3, r1
 80117ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	689a      	ldr	r2, [r3, #8]
 80117d0:	491e      	ldr	r1, [pc, #120]	; (801184c <inc_lock+0x118>)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	011b      	lsls	r3, r3, #4
 80117d6:	440b      	add	r3, r1
 80117d8:	3304      	adds	r3, #4
 80117da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	695a      	ldr	r2, [r3, #20]
 80117e0:	491a      	ldr	r1, [pc, #104]	; (801184c <inc_lock+0x118>)
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	011b      	lsls	r3, r3, #4
 80117e6:	440b      	add	r3, r1
 80117e8:	3308      	adds	r3, #8
 80117ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80117ec:	4a17      	ldr	r2, [pc, #92]	; (801184c <inc_lock+0x118>)
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	011b      	lsls	r3, r3, #4
 80117f2:	4413      	add	r3, r2
 80117f4:	330c      	adds	r3, #12
 80117f6:	2200      	movs	r2, #0
 80117f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d009      	beq.n	8011814 <inc_lock+0xe0>
 8011800:	4a12      	ldr	r2, [pc, #72]	; (801184c <inc_lock+0x118>)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	011b      	lsls	r3, r3, #4
 8011806:	4413      	add	r3, r2
 8011808:	330c      	adds	r3, #12
 801180a:	881b      	ldrh	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d001      	beq.n	8011814 <inc_lock+0xe0>
 8011810:	2300      	movs	r3, #0
 8011812:	e015      	b.n	8011840 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d108      	bne.n	801182c <inc_lock+0xf8>
 801181a:	4a0c      	ldr	r2, [pc, #48]	; (801184c <inc_lock+0x118>)
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	011b      	lsls	r3, r3, #4
 8011820:	4413      	add	r3, r2
 8011822:	330c      	adds	r3, #12
 8011824:	881b      	ldrh	r3, [r3, #0]
 8011826:	3301      	adds	r3, #1
 8011828:	b29a      	uxth	r2, r3
 801182a:	e001      	b.n	8011830 <inc_lock+0xfc>
 801182c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011830:	4906      	ldr	r1, [pc, #24]	; (801184c <inc_lock+0x118>)
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	011b      	lsls	r3, r3, #4
 8011836:	440b      	add	r3, r1
 8011838:	330c      	adds	r3, #12
 801183a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	3301      	adds	r3, #1
}
 8011840:	4618      	mov	r0, r3
 8011842:	3714      	adds	r7, #20
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr
 801184c:	24000438 	.word	0x24000438

08011850 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011850:	b480      	push	{r7}
 8011852:	b085      	sub	sp, #20
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	3b01      	subs	r3, #1
 801185c:	607b      	str	r3, [r7, #4]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2b01      	cmp	r3, #1
 8011862:	d825      	bhi.n	80118b0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011864:	4a17      	ldr	r2, [pc, #92]	; (80118c4 <dec_lock+0x74>)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	011b      	lsls	r3, r3, #4
 801186a:	4413      	add	r3, r2
 801186c:	330c      	adds	r3, #12
 801186e:	881b      	ldrh	r3, [r3, #0]
 8011870:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011872:	89fb      	ldrh	r3, [r7, #14]
 8011874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011878:	d101      	bne.n	801187e <dec_lock+0x2e>
 801187a:	2300      	movs	r3, #0
 801187c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801187e:	89fb      	ldrh	r3, [r7, #14]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <dec_lock+0x3a>
 8011884:	89fb      	ldrh	r3, [r7, #14]
 8011886:	3b01      	subs	r3, #1
 8011888:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801188a:	4a0e      	ldr	r2, [pc, #56]	; (80118c4 <dec_lock+0x74>)
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	011b      	lsls	r3, r3, #4
 8011890:	4413      	add	r3, r2
 8011892:	330c      	adds	r3, #12
 8011894:	89fa      	ldrh	r2, [r7, #14]
 8011896:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011898:	89fb      	ldrh	r3, [r7, #14]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d105      	bne.n	80118aa <dec_lock+0x5a>
 801189e:	4a09      	ldr	r2, [pc, #36]	; (80118c4 <dec_lock+0x74>)
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	011b      	lsls	r3, r3, #4
 80118a4:	4413      	add	r3, r2
 80118a6:	2200      	movs	r2, #0
 80118a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80118aa:	2300      	movs	r3, #0
 80118ac:	737b      	strb	r3, [r7, #13]
 80118ae:	e001      	b.n	80118b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80118b0:	2302      	movs	r3, #2
 80118b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80118b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3714      	adds	r7, #20
 80118ba:	46bd      	mov	sp, r7
 80118bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c0:	4770      	bx	lr
 80118c2:	bf00      	nop
 80118c4:	24000438 	.word	0x24000438

080118c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80118c8:	b480      	push	{r7}
 80118ca:	b085      	sub	sp, #20
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80118d0:	2300      	movs	r3, #0
 80118d2:	60fb      	str	r3, [r7, #12]
 80118d4:	e010      	b.n	80118f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80118d6:	4a0d      	ldr	r2, [pc, #52]	; (801190c <clear_lock+0x44>)
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	011b      	lsls	r3, r3, #4
 80118dc:	4413      	add	r3, r2
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d105      	bne.n	80118f2 <clear_lock+0x2a>
 80118e6:	4a09      	ldr	r2, [pc, #36]	; (801190c <clear_lock+0x44>)
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	011b      	lsls	r3, r3, #4
 80118ec:	4413      	add	r3, r2
 80118ee:	2200      	movs	r2, #0
 80118f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	3301      	adds	r3, #1
 80118f6:	60fb      	str	r3, [r7, #12]
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d9eb      	bls.n	80118d6 <clear_lock+0xe>
	}
}
 80118fe:	bf00      	nop
 8011900:	bf00      	nop
 8011902:	3714      	adds	r7, #20
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr
 801190c:	24000438 	.word	0x24000438

08011910 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b086      	sub	sp, #24
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011918:	2300      	movs	r3, #0
 801191a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	78db      	ldrb	r3, [r3, #3]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d034      	beq.n	801198e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011928:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	7858      	ldrb	r0, [r3, #1]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011934:	2301      	movs	r3, #1
 8011936:	697a      	ldr	r2, [r7, #20]
 8011938:	f7ff fd40 	bl	80113bc <disk_write>
 801193c:	4603      	mov	r3, r0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d002      	beq.n	8011948 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011942:	2301      	movs	r3, #1
 8011944:	73fb      	strb	r3, [r7, #15]
 8011946:	e022      	b.n	801198e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2200      	movs	r2, #0
 801194c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011952:	697a      	ldr	r2, [r7, #20]
 8011954:	1ad2      	subs	r2, r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	69db      	ldr	r3, [r3, #28]
 801195a:	429a      	cmp	r2, r3
 801195c:	d217      	bcs.n	801198e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	789b      	ldrb	r3, [r3, #2]
 8011962:	613b      	str	r3, [r7, #16]
 8011964:	e010      	b.n	8011988 <sync_window+0x78>
					wsect += fs->fsize;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	69db      	ldr	r3, [r3, #28]
 801196a:	697a      	ldr	r2, [r7, #20]
 801196c:	4413      	add	r3, r2
 801196e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	7858      	ldrb	r0, [r3, #1]
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801197a:	2301      	movs	r3, #1
 801197c:	697a      	ldr	r2, [r7, #20]
 801197e:	f7ff fd1d 	bl	80113bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	3b01      	subs	r3, #1
 8011986:	613b      	str	r3, [r7, #16]
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	2b01      	cmp	r3, #1
 801198c:	d8eb      	bhi.n	8011966 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011990:	4618      	mov	r0, r3
 8011992:	3718      	adds	r7, #24
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}

08011998 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b084      	sub	sp, #16
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80119a2:	2300      	movs	r3, #0
 80119a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d01b      	beq.n	80119e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f7ff ffad 	bl	8011910 <sync_window>
 80119b6:	4603      	mov	r3, r0
 80119b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80119ba:	7bfb      	ldrb	r3, [r7, #15]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d113      	bne.n	80119e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	7858      	ldrb	r0, [r3, #1]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80119ca:	2301      	movs	r3, #1
 80119cc:	683a      	ldr	r2, [r7, #0]
 80119ce:	f7ff fcd5 	bl	801137c <disk_read>
 80119d2:	4603      	mov	r3, r0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d004      	beq.n	80119e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80119d8:	f04f 33ff 	mov.w	r3, #4294967295
 80119dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80119de:	2301      	movs	r3, #1
 80119e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	683a      	ldr	r2, [r7, #0]
 80119e6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80119e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
	...

080119f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f7ff ff87 	bl	8011910 <sync_window>
 8011a02:	4603      	mov	r3, r0
 8011a04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011a06:	7bfb      	ldrb	r3, [r7, #15]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d158      	bne.n	8011abe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	2b03      	cmp	r3, #3
 8011a12:	d148      	bne.n	8011aa6 <sync_fs+0xb2>
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	791b      	ldrb	r3, [r3, #4]
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d144      	bne.n	8011aa6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	3334      	adds	r3, #52	; 0x34
 8011a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a24:	2100      	movs	r1, #0
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7ff fda9 	bl	801157e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	3334      	adds	r3, #52	; 0x34
 8011a30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011a34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7ff fd38 	bl	80114ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	3334      	adds	r3, #52	; 0x34
 8011a42:	4921      	ldr	r1, [pc, #132]	; (8011ac8 <sync_fs+0xd4>)
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7ff fd4d 	bl	80114e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	3334      	adds	r3, #52	; 0x34
 8011a4e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011a52:	491e      	ldr	r1, [pc, #120]	; (8011acc <sync_fs+0xd8>)
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7ff fd45 	bl	80114e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	3334      	adds	r3, #52	; 0x34
 8011a5e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	695b      	ldr	r3, [r3, #20]
 8011a66:	4619      	mov	r1, r3
 8011a68:	4610      	mov	r0, r2
 8011a6a:	f7ff fd3b 	bl	80114e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	3334      	adds	r3, #52	; 0x34
 8011a72:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	691b      	ldr	r3, [r3, #16]
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	4610      	mov	r0, r2
 8011a7e:	f7ff fd31 	bl	80114e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6a1b      	ldr	r3, [r3, #32]
 8011a86:	1c5a      	adds	r2, r3, #1
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	7858      	ldrb	r0, [r3, #1]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	f7ff fc8e 	bl	80113bc <disk_write>
			fs->fsi_flag = 0;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	785b      	ldrb	r3, [r3, #1]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	2100      	movs	r1, #0
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7ff fca4 	bl	80113fc <disk_ioctl>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d001      	beq.n	8011abe <sync_fs+0xca>
 8011aba:	2301      	movs	r3, #1
 8011abc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3710      	adds	r7, #16
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	41615252 	.word	0x41615252
 8011acc:	61417272 	.word	0x61417272

08011ad0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b083      	sub	sp, #12
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	3b02      	subs	r3, #2
 8011ade:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	699b      	ldr	r3, [r3, #24]
 8011ae4:	3b02      	subs	r3, #2
 8011ae6:	683a      	ldr	r2, [r7, #0]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d301      	bcc.n	8011af0 <clust2sect+0x20>
 8011aec:	2300      	movs	r3, #0
 8011aee:	e008      	b.n	8011b02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	895b      	ldrh	r3, [r3, #10]
 8011af4:	461a      	mov	r2, r3
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	fb03 f202 	mul.w	r2, r3, r2
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b00:	4413      	add	r3, r2
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	370c      	adds	r7, #12
 8011b06:	46bd      	mov	sp, r7
 8011b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0c:	4770      	bx	lr

08011b0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b086      	sub	sp, #24
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	2b01      	cmp	r3, #1
 8011b22:	d904      	bls.n	8011b2e <get_fat+0x20>
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	699b      	ldr	r3, [r3, #24]
 8011b28:	683a      	ldr	r2, [r7, #0]
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	d302      	bcc.n	8011b34 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011b2e:	2301      	movs	r3, #1
 8011b30:	617b      	str	r3, [r7, #20]
 8011b32:	e08f      	b.n	8011c54 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011b34:	f04f 33ff 	mov.w	r3, #4294967295
 8011b38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	2b03      	cmp	r3, #3
 8011b40:	d062      	beq.n	8011c08 <get_fat+0xfa>
 8011b42:	2b03      	cmp	r3, #3
 8011b44:	dc7c      	bgt.n	8011c40 <get_fat+0x132>
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d002      	beq.n	8011b50 <get_fat+0x42>
 8011b4a:	2b02      	cmp	r3, #2
 8011b4c:	d042      	beq.n	8011bd4 <get_fat+0xc6>
 8011b4e:	e077      	b.n	8011c40 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	60fb      	str	r3, [r7, #12]
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	085b      	lsrs	r3, r3, #1
 8011b58:	68fa      	ldr	r2, [r7, #12]
 8011b5a:	4413      	add	r3, r2
 8011b5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	0a5b      	lsrs	r3, r3, #9
 8011b66:	4413      	add	r3, r2
 8011b68:	4619      	mov	r1, r3
 8011b6a:	6938      	ldr	r0, [r7, #16]
 8011b6c:	f7ff ff14 	bl	8011998 <move_window>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d167      	bne.n	8011c46 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	1c5a      	adds	r2, r3, #1
 8011b7a:	60fa      	str	r2, [r7, #12]
 8011b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b80:	693a      	ldr	r2, [r7, #16]
 8011b82:	4413      	add	r3, r2
 8011b84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011b88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	0a5b      	lsrs	r3, r3, #9
 8011b92:	4413      	add	r3, r2
 8011b94:	4619      	mov	r1, r3
 8011b96:	6938      	ldr	r0, [r7, #16]
 8011b98:	f7ff fefe 	bl	8011998 <move_window>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d153      	bne.n	8011c4a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ba8:	693a      	ldr	r2, [r7, #16]
 8011baa:	4413      	add	r3, r2
 8011bac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011bb0:	021b      	lsls	r3, r3, #8
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	4313      	orrs	r3, r2
 8011bb8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	f003 0301 	and.w	r3, r3, #1
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d002      	beq.n	8011bca <get_fat+0xbc>
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	091b      	lsrs	r3, r3, #4
 8011bc8:	e002      	b.n	8011bd0 <get_fat+0xc2>
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011bd0:	617b      	str	r3, [r7, #20]
			break;
 8011bd2:	e03f      	b.n	8011c54 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	0a1b      	lsrs	r3, r3, #8
 8011bdc:	4413      	add	r3, r2
 8011bde:	4619      	mov	r1, r3
 8011be0:	6938      	ldr	r0, [r7, #16]
 8011be2:	f7ff fed9 	bl	8011998 <move_window>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d130      	bne.n	8011c4e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	005b      	lsls	r3, r3, #1
 8011bf6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011bfa:	4413      	add	r3, r2
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7ff fc1b 	bl	8011438 <ld_word>
 8011c02:	4603      	mov	r3, r0
 8011c04:	617b      	str	r3, [r7, #20]
			break;
 8011c06:	e025      	b.n	8011c54 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	09db      	lsrs	r3, r3, #7
 8011c10:	4413      	add	r3, r2
 8011c12:	4619      	mov	r1, r3
 8011c14:	6938      	ldr	r0, [r7, #16]
 8011c16:	f7ff febf 	bl	8011998 <move_window>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d118      	bne.n	8011c52 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011c2e:	4413      	add	r3, r2
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7ff fc19 	bl	8011468 <ld_dword>
 8011c36:	4603      	mov	r3, r0
 8011c38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011c3c:	617b      	str	r3, [r7, #20]
			break;
 8011c3e:	e009      	b.n	8011c54 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011c40:	2301      	movs	r3, #1
 8011c42:	617b      	str	r3, [r7, #20]
 8011c44:	e006      	b.n	8011c54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c46:	bf00      	nop
 8011c48:	e004      	b.n	8011c54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c4a:	bf00      	nop
 8011c4c:	e002      	b.n	8011c54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011c4e:	bf00      	nop
 8011c50:	e000      	b.n	8011c54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011c52:	bf00      	nop
		}
	}

	return val;
 8011c54:	697b      	ldr	r3, [r7, #20]
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3718      	adds	r7, #24
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}

08011c5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011c5e:	b590      	push	{r4, r7, lr}
 8011c60:	b089      	sub	sp, #36	; 0x24
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	60f8      	str	r0, [r7, #12]
 8011c66:	60b9      	str	r1, [r7, #8]
 8011c68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011c6a:	2302      	movs	r3, #2
 8011c6c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	f240 80d9 	bls.w	8011e28 <put_fat+0x1ca>
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	699b      	ldr	r3, [r3, #24]
 8011c7a:	68ba      	ldr	r2, [r7, #8]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	f080 80d3 	bcs.w	8011e28 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	2b03      	cmp	r3, #3
 8011c88:	f000 8096 	beq.w	8011db8 <put_fat+0x15a>
 8011c8c:	2b03      	cmp	r3, #3
 8011c8e:	f300 80cb 	bgt.w	8011e28 <put_fat+0x1ca>
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d002      	beq.n	8011c9c <put_fat+0x3e>
 8011c96:	2b02      	cmp	r3, #2
 8011c98:	d06e      	beq.n	8011d78 <put_fat+0x11a>
 8011c9a:	e0c5      	b.n	8011e28 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	61bb      	str	r3, [r7, #24]
 8011ca0:	69bb      	ldr	r3, [r7, #24]
 8011ca2:	085b      	lsrs	r3, r3, #1
 8011ca4:	69ba      	ldr	r2, [r7, #24]
 8011ca6:	4413      	add	r3, r2
 8011ca8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cae:	69bb      	ldr	r3, [r7, #24]
 8011cb0:	0a5b      	lsrs	r3, r3, #9
 8011cb2:	4413      	add	r3, r2
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	68f8      	ldr	r0, [r7, #12]
 8011cb8:	f7ff fe6e 	bl	8011998 <move_window>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011cc0:	7ffb      	ldrb	r3, [r7, #31]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	f040 80a9 	bne.w	8011e1a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011cce:	69bb      	ldr	r3, [r7, #24]
 8011cd0:	1c59      	adds	r1, r3, #1
 8011cd2:	61b9      	str	r1, [r7, #24]
 8011cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cd8:	4413      	add	r3, r2
 8011cda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	f003 0301 	and.w	r3, r3, #1
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d00d      	beq.n	8011d02 <put_fat+0xa4>
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	b25b      	sxtb	r3, r3
 8011cec:	f003 030f 	and.w	r3, r3, #15
 8011cf0:	b25a      	sxtb	r2, r3
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	011b      	lsls	r3, r3, #4
 8011cf8:	b25b      	sxtb	r3, r3
 8011cfa:	4313      	orrs	r3, r2
 8011cfc:	b25b      	sxtb	r3, r3
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	e001      	b.n	8011d06 <put_fat+0xa8>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	697a      	ldr	r2, [r7, #20]
 8011d08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	0a5b      	lsrs	r3, r3, #9
 8011d18:	4413      	add	r3, r2
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f7ff fe3b 	bl	8011998 <move_window>
 8011d22:	4603      	mov	r3, r0
 8011d24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011d26:	7ffb      	ldrb	r3, [r7, #31]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d178      	bne.n	8011e1e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011d32:	69bb      	ldr	r3, [r7, #24]
 8011d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d38:	4413      	add	r3, r2
 8011d3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	f003 0301 	and.w	r3, r3, #1
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d003      	beq.n	8011d4e <put_fat+0xf0>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	091b      	lsrs	r3, r3, #4
 8011d4a:	b2db      	uxtb	r3, r3
 8011d4c:	e00e      	b.n	8011d6c <put_fat+0x10e>
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	b25b      	sxtb	r3, r3
 8011d54:	f023 030f 	bic.w	r3, r3, #15
 8011d58:	b25a      	sxtb	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	0a1b      	lsrs	r3, r3, #8
 8011d5e:	b25b      	sxtb	r3, r3
 8011d60:	f003 030f 	and.w	r3, r3, #15
 8011d64:	b25b      	sxtb	r3, r3
 8011d66:	4313      	orrs	r3, r2
 8011d68:	b25b      	sxtb	r3, r3
 8011d6a:	b2db      	uxtb	r3, r3
 8011d6c:	697a      	ldr	r2, [r7, #20]
 8011d6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2201      	movs	r2, #1
 8011d74:	70da      	strb	r2, [r3, #3]
			break;
 8011d76:	e057      	b.n	8011e28 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	0a1b      	lsrs	r3, r3, #8
 8011d80:	4413      	add	r3, r2
 8011d82:	4619      	mov	r1, r3
 8011d84:	68f8      	ldr	r0, [r7, #12]
 8011d86:	f7ff fe07 	bl	8011998 <move_window>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011d8e:	7ffb      	ldrb	r3, [r7, #31]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d146      	bne.n	8011e22 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	005b      	lsls	r3, r3, #1
 8011d9e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011da2:	4413      	add	r3, r2
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	b292      	uxth	r2, r2
 8011da8:	4611      	mov	r1, r2
 8011daa:	4618      	mov	r0, r3
 8011dac:	f7ff fb7f 	bl	80114ae <st_word>
			fs->wflag = 1;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2201      	movs	r2, #1
 8011db4:	70da      	strb	r2, [r3, #3]
			break;
 8011db6:	e037      	b.n	8011e28 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	09db      	lsrs	r3, r3, #7
 8011dc0:	4413      	add	r3, r2
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	68f8      	ldr	r0, [r7, #12]
 8011dc6:	f7ff fde7 	bl	8011998 <move_window>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011dce:	7ffb      	ldrb	r3, [r7, #31]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d128      	bne.n	8011e26 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	009b      	lsls	r3, r3, #2
 8011de4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011de8:	4413      	add	r3, r2
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7ff fb3c 	bl	8011468 <ld_dword>
 8011df0:	4603      	mov	r3, r0
 8011df2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011df6:	4323      	orrs	r3, r4
 8011df8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	009b      	lsls	r3, r3, #2
 8011e04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011e08:	4413      	add	r3, r2
 8011e0a:	6879      	ldr	r1, [r7, #4]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7ff fb69 	bl	80114e4 <st_dword>
			fs->wflag = 1;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2201      	movs	r2, #1
 8011e16:	70da      	strb	r2, [r3, #3]
			break;
 8011e18:	e006      	b.n	8011e28 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011e1a:	bf00      	nop
 8011e1c:	e004      	b.n	8011e28 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011e1e:	bf00      	nop
 8011e20:	e002      	b.n	8011e28 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011e22:	bf00      	nop
 8011e24:	e000      	b.n	8011e28 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011e26:	bf00      	nop
		}
	}
	return res;
 8011e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3724      	adds	r7, #36	; 0x24
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd90      	pop	{r4, r7, pc}

08011e32 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b088      	sub	sp, #32
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	60f8      	str	r0, [r7, #12]
 8011e3a:	60b9      	str	r1, [r7, #8]
 8011e3c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d904      	bls.n	8011e58 <remove_chain+0x26>
 8011e4e:	69bb      	ldr	r3, [r7, #24]
 8011e50:	699b      	ldr	r3, [r3, #24]
 8011e52:	68ba      	ldr	r2, [r7, #8]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d301      	bcc.n	8011e5c <remove_chain+0x2a>
 8011e58:	2302      	movs	r3, #2
 8011e5a:	e04b      	b.n	8011ef4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d00c      	beq.n	8011e7c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011e62:	f04f 32ff 	mov.w	r2, #4294967295
 8011e66:	6879      	ldr	r1, [r7, #4]
 8011e68:	69b8      	ldr	r0, [r7, #24]
 8011e6a:	f7ff fef8 	bl	8011c5e <put_fat>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011e72:	7ffb      	ldrb	r3, [r7, #31]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d001      	beq.n	8011e7c <remove_chain+0x4a>
 8011e78:	7ffb      	ldrb	r3, [r7, #31]
 8011e7a:	e03b      	b.n	8011ef4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011e7c:	68b9      	ldr	r1, [r7, #8]
 8011e7e:	68f8      	ldr	r0, [r7, #12]
 8011e80:	f7ff fe45 	bl	8011b0e <get_fat>
 8011e84:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d031      	beq.n	8011ef0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	d101      	bne.n	8011e96 <remove_chain+0x64>
 8011e92:	2302      	movs	r3, #2
 8011e94:	e02e      	b.n	8011ef4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e9c:	d101      	bne.n	8011ea2 <remove_chain+0x70>
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	e028      	b.n	8011ef4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	68b9      	ldr	r1, [r7, #8]
 8011ea6:	69b8      	ldr	r0, [r7, #24]
 8011ea8:	f7ff fed9 	bl	8011c5e <put_fat>
 8011eac:	4603      	mov	r3, r0
 8011eae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011eb0:	7ffb      	ldrb	r3, [r7, #31]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d001      	beq.n	8011eba <remove_chain+0x88>
 8011eb6:	7ffb      	ldrb	r3, [r7, #31]
 8011eb8:	e01c      	b.n	8011ef4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	695a      	ldr	r2, [r3, #20]
 8011ebe:	69bb      	ldr	r3, [r7, #24]
 8011ec0:	699b      	ldr	r3, [r3, #24]
 8011ec2:	3b02      	subs	r3, #2
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d20b      	bcs.n	8011ee0 <remove_chain+0xae>
			fs->free_clst++;
 8011ec8:	69bb      	ldr	r3, [r7, #24]
 8011eca:	695b      	ldr	r3, [r3, #20]
 8011ecc:	1c5a      	adds	r2, r3, #1
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011ed2:	69bb      	ldr	r3, [r7, #24]
 8011ed4:	791b      	ldrb	r3, [r3, #4]
 8011ed6:	f043 0301 	orr.w	r3, r3, #1
 8011eda:	b2da      	uxtb	r2, r3
 8011edc:	69bb      	ldr	r3, [r7, #24]
 8011ede:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011ee4:	69bb      	ldr	r3, [r7, #24]
 8011ee6:	699b      	ldr	r3, [r3, #24]
 8011ee8:	68ba      	ldr	r2, [r7, #8]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d3c6      	bcc.n	8011e7c <remove_chain+0x4a>
 8011eee:	e000      	b.n	8011ef2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011ef0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011ef2:	2300      	movs	r3, #0
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3720      	adds	r7, #32
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b088      	sub	sp, #32
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d10d      	bne.n	8011f2e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	691b      	ldr	r3, [r3, #16]
 8011f16:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011f18:	69bb      	ldr	r3, [r7, #24]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d004      	beq.n	8011f28 <create_chain+0x2c>
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	699b      	ldr	r3, [r3, #24]
 8011f22:	69ba      	ldr	r2, [r7, #24]
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d31b      	bcc.n	8011f60 <create_chain+0x64>
 8011f28:	2301      	movs	r3, #1
 8011f2a:	61bb      	str	r3, [r7, #24]
 8011f2c:	e018      	b.n	8011f60 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011f2e:	6839      	ldr	r1, [r7, #0]
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f7ff fdec 	bl	8011b0e <get_fat>
 8011f36:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d801      	bhi.n	8011f42 <create_chain+0x46>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e070      	b.n	8012024 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f48:	d101      	bne.n	8011f4e <create_chain+0x52>
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	e06a      	b.n	8012024 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	699b      	ldr	r3, [r3, #24]
 8011f52:	68fa      	ldr	r2, [r7, #12]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d201      	bcs.n	8011f5c <create_chain+0x60>
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	e063      	b.n	8012024 <create_chain+0x128>
		scl = clst;
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011f60:	69bb      	ldr	r3, [r7, #24]
 8011f62:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011f64:	69fb      	ldr	r3, [r7, #28]
 8011f66:	3301      	adds	r3, #1
 8011f68:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011f6a:	693b      	ldr	r3, [r7, #16]
 8011f6c:	699b      	ldr	r3, [r3, #24]
 8011f6e:	69fa      	ldr	r2, [r7, #28]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d307      	bcc.n	8011f84 <create_chain+0x88>
				ncl = 2;
 8011f74:	2302      	movs	r3, #2
 8011f76:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011f78:	69fa      	ldr	r2, [r7, #28]
 8011f7a:	69bb      	ldr	r3, [r7, #24]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d901      	bls.n	8011f84 <create_chain+0x88>
 8011f80:	2300      	movs	r3, #0
 8011f82:	e04f      	b.n	8012024 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011f84:	69f9      	ldr	r1, [r7, #28]
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ff fdc1 	bl	8011b0e <get_fat>
 8011f8c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d00e      	beq.n	8011fb2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2b01      	cmp	r3, #1
 8011f98:	d003      	beq.n	8011fa2 <create_chain+0xa6>
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa0:	d101      	bne.n	8011fa6 <create_chain+0xaa>
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	e03e      	b.n	8012024 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011fa6:	69fa      	ldr	r2, [r7, #28]
 8011fa8:	69bb      	ldr	r3, [r7, #24]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d1da      	bne.n	8011f64 <create_chain+0x68>
 8011fae:	2300      	movs	r3, #0
 8011fb0:	e038      	b.n	8012024 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011fb2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8011fb8:	69f9      	ldr	r1, [r7, #28]
 8011fba:	6938      	ldr	r0, [r7, #16]
 8011fbc:	f7ff fe4f 	bl	8011c5e <put_fat>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011fc4:	7dfb      	ldrb	r3, [r7, #23]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d109      	bne.n	8011fde <create_chain+0xe2>
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d006      	beq.n	8011fde <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011fd0:	69fa      	ldr	r2, [r7, #28]
 8011fd2:	6839      	ldr	r1, [r7, #0]
 8011fd4:	6938      	ldr	r0, [r7, #16]
 8011fd6:	f7ff fe42 	bl	8011c5e <put_fat>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011fde:	7dfb      	ldrb	r3, [r7, #23]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d116      	bne.n	8012012 <create_chain+0x116>
		fs->last_clst = ncl;
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	69fa      	ldr	r2, [r7, #28]
 8011fe8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	695a      	ldr	r2, [r3, #20]
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	699b      	ldr	r3, [r3, #24]
 8011ff2:	3b02      	subs	r3, #2
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d804      	bhi.n	8012002 <create_chain+0x106>
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	695b      	ldr	r3, [r3, #20]
 8011ffc:	1e5a      	subs	r2, r3, #1
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	791b      	ldrb	r3, [r3, #4]
 8012006:	f043 0301 	orr.w	r3, r3, #1
 801200a:	b2da      	uxtb	r2, r3
 801200c:	693b      	ldr	r3, [r7, #16]
 801200e:	711a      	strb	r2, [r3, #4]
 8012010:	e007      	b.n	8012022 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012012:	7dfb      	ldrb	r3, [r7, #23]
 8012014:	2b01      	cmp	r3, #1
 8012016:	d102      	bne.n	801201e <create_chain+0x122>
 8012018:	f04f 33ff 	mov.w	r3, #4294967295
 801201c:	e000      	b.n	8012020 <create_chain+0x124>
 801201e:	2301      	movs	r3, #1
 8012020:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012022:	69fb      	ldr	r3, [r7, #28]
}
 8012024:	4618      	mov	r0, r3
 8012026:	3720      	adds	r7, #32
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801202c:	b480      	push	{r7}
 801202e:	b087      	sub	sp, #28
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012040:	3304      	adds	r3, #4
 8012042:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	0a5b      	lsrs	r3, r3, #9
 8012048:	68fa      	ldr	r2, [r7, #12]
 801204a:	8952      	ldrh	r2, [r2, #10]
 801204c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012050:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	1d1a      	adds	r2, r3, #4
 8012056:	613a      	str	r2, [r7, #16]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d101      	bne.n	8012066 <clmt_clust+0x3a>
 8012062:	2300      	movs	r3, #0
 8012064:	e010      	b.n	8012088 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012066:	697a      	ldr	r2, [r7, #20]
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	429a      	cmp	r2, r3
 801206c:	d307      	bcc.n	801207e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801206e:	697a      	ldr	r2, [r7, #20]
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	617b      	str	r3, [r7, #20]
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	3304      	adds	r3, #4
 801207a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801207c:	e7e9      	b.n	8012052 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801207e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	4413      	add	r3, r2
}
 8012088:	4618      	mov	r0, r3
 801208a:	371c      	adds	r7, #28
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b086      	sub	sp, #24
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80120aa:	d204      	bcs.n	80120b6 <dir_sdi+0x22>
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	f003 031f 	and.w	r3, r3, #31
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d001      	beq.n	80120ba <dir_sdi+0x26>
		return FR_INT_ERR;
 80120b6:	2302      	movs	r3, #2
 80120b8:	e063      	b.n	8012182 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	683a      	ldr	r2, [r7, #0]
 80120be:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	689b      	ldr	r3, [r3, #8]
 80120c4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d106      	bne.n	80120da <dir_sdi+0x46>
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	781b      	ldrb	r3, [r3, #0]
 80120d0:	2b02      	cmp	r3, #2
 80120d2:	d902      	bls.n	80120da <dir_sdi+0x46>
		clst = fs->dirbase;
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120d8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d10c      	bne.n	80120fa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	095b      	lsrs	r3, r3, #5
 80120e4:	693a      	ldr	r2, [r7, #16]
 80120e6:	8912      	ldrh	r2, [r2, #8]
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d301      	bcc.n	80120f0 <dir_sdi+0x5c>
 80120ec:	2302      	movs	r3, #2
 80120ee:	e048      	b.n	8012182 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	61da      	str	r2, [r3, #28]
 80120f8:	e029      	b.n	801214e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	895b      	ldrh	r3, [r3, #10]
 80120fe:	025b      	lsls	r3, r3, #9
 8012100:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012102:	e019      	b.n	8012138 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6979      	ldr	r1, [r7, #20]
 8012108:	4618      	mov	r0, r3
 801210a:	f7ff fd00 	bl	8011b0e <get_fat>
 801210e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012116:	d101      	bne.n	801211c <dir_sdi+0x88>
 8012118:	2301      	movs	r3, #1
 801211a:	e032      	b.n	8012182 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	2b01      	cmp	r3, #1
 8012120:	d904      	bls.n	801212c <dir_sdi+0x98>
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	699b      	ldr	r3, [r3, #24]
 8012126:	697a      	ldr	r2, [r7, #20]
 8012128:	429a      	cmp	r2, r3
 801212a:	d301      	bcc.n	8012130 <dir_sdi+0x9c>
 801212c:	2302      	movs	r3, #2
 801212e:	e028      	b.n	8012182 <dir_sdi+0xee>
			ofs -= csz;
 8012130:	683a      	ldr	r2, [r7, #0]
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	1ad3      	subs	r3, r2, r3
 8012136:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012138:	683a      	ldr	r2, [r7, #0]
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	429a      	cmp	r2, r3
 801213e:	d2e1      	bcs.n	8012104 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012140:	6979      	ldr	r1, [r7, #20]
 8012142:	6938      	ldr	r0, [r7, #16]
 8012144:	f7ff fcc4 	bl	8011ad0 <clust2sect>
 8012148:	4602      	mov	r2, r0
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	697a      	ldr	r2, [r7, #20]
 8012152:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	69db      	ldr	r3, [r3, #28]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d101      	bne.n	8012160 <dir_sdi+0xcc>
 801215c:	2302      	movs	r3, #2
 801215e:	e010      	b.n	8012182 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	69da      	ldr	r2, [r3, #28]
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	0a5b      	lsrs	r3, r3, #9
 8012168:	441a      	add	r2, r3
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801217a:	441a      	add	r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	3718      	adds	r7, #24
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}

0801218a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801218a:	b580      	push	{r7, lr}
 801218c:	b086      	sub	sp, #24
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
 8012192:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	695b      	ldr	r3, [r3, #20]
 801219e:	3320      	adds	r3, #32
 80121a0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	69db      	ldr	r3, [r3, #28]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d003      	beq.n	80121b2 <dir_next+0x28>
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80121b0:	d301      	bcc.n	80121b6 <dir_next+0x2c>
 80121b2:	2304      	movs	r3, #4
 80121b4:	e0aa      	b.n	801230c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121bc:	2b00      	cmp	r3, #0
 80121be:	f040 8098 	bne.w	80122f2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	69db      	ldr	r3, [r3, #28]
 80121c6:	1c5a      	adds	r2, r3, #1
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	699b      	ldr	r3, [r3, #24]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d10b      	bne.n	80121ec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	095b      	lsrs	r3, r3, #5
 80121d8:	68fa      	ldr	r2, [r7, #12]
 80121da:	8912      	ldrh	r2, [r2, #8]
 80121dc:	4293      	cmp	r3, r2
 80121de:	f0c0 8088 	bcc.w	80122f2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2200      	movs	r2, #0
 80121e6:	61da      	str	r2, [r3, #28]
 80121e8:	2304      	movs	r3, #4
 80121ea:	e08f      	b.n	801230c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	0a5b      	lsrs	r3, r3, #9
 80121f0:	68fa      	ldr	r2, [r7, #12]
 80121f2:	8952      	ldrh	r2, [r2, #10]
 80121f4:	3a01      	subs	r2, #1
 80121f6:	4013      	ands	r3, r2
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d17a      	bne.n	80122f2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80121fc:	687a      	ldr	r2, [r7, #4]
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	699b      	ldr	r3, [r3, #24]
 8012202:	4619      	mov	r1, r3
 8012204:	4610      	mov	r0, r2
 8012206:	f7ff fc82 	bl	8011b0e <get_fat>
 801220a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	2b01      	cmp	r3, #1
 8012210:	d801      	bhi.n	8012216 <dir_next+0x8c>
 8012212:	2302      	movs	r3, #2
 8012214:	e07a      	b.n	801230c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801221c:	d101      	bne.n	8012222 <dir_next+0x98>
 801221e:	2301      	movs	r3, #1
 8012220:	e074      	b.n	801230c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	699b      	ldr	r3, [r3, #24]
 8012226:	697a      	ldr	r2, [r7, #20]
 8012228:	429a      	cmp	r2, r3
 801222a:	d358      	bcc.n	80122de <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d104      	bne.n	801223c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2200      	movs	r2, #0
 8012236:	61da      	str	r2, [r3, #28]
 8012238:	2304      	movs	r3, #4
 801223a:	e067      	b.n	801230c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801223c:	687a      	ldr	r2, [r7, #4]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	699b      	ldr	r3, [r3, #24]
 8012242:	4619      	mov	r1, r3
 8012244:	4610      	mov	r0, r2
 8012246:	f7ff fe59 	bl	8011efc <create_chain>
 801224a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d101      	bne.n	8012256 <dir_next+0xcc>
 8012252:	2307      	movs	r3, #7
 8012254:	e05a      	b.n	801230c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d101      	bne.n	8012260 <dir_next+0xd6>
 801225c:	2302      	movs	r3, #2
 801225e:	e055      	b.n	801230c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012266:	d101      	bne.n	801226c <dir_next+0xe2>
 8012268:	2301      	movs	r3, #1
 801226a:	e04f      	b.n	801230c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f7ff fb4f 	bl	8011910 <sync_window>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d001      	beq.n	801227c <dir_next+0xf2>
 8012278:	2301      	movs	r3, #1
 801227a:	e047      	b.n	801230c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	3334      	adds	r3, #52	; 0x34
 8012280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012284:	2100      	movs	r1, #0
 8012286:	4618      	mov	r0, r3
 8012288:	f7ff f979 	bl	801157e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801228c:	2300      	movs	r3, #0
 801228e:	613b      	str	r3, [r7, #16]
 8012290:	6979      	ldr	r1, [r7, #20]
 8012292:	68f8      	ldr	r0, [r7, #12]
 8012294:	f7ff fc1c 	bl	8011ad0 <clust2sect>
 8012298:	4602      	mov	r2, r0
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	631a      	str	r2, [r3, #48]	; 0x30
 801229e:	e012      	b.n	80122c6 <dir_next+0x13c>
						fs->wflag = 1;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	2201      	movs	r2, #1
 80122a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f7ff fb32 	bl	8011910 <sync_window>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d001      	beq.n	80122b6 <dir_next+0x12c>
 80122b2:	2301      	movs	r3, #1
 80122b4:	e02a      	b.n	801230c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	3301      	adds	r3, #1
 80122ba:	613b      	str	r3, [r7, #16]
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122c0:	1c5a      	adds	r2, r3, #1
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	631a      	str	r2, [r3, #48]	; 0x30
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	895b      	ldrh	r3, [r3, #10]
 80122ca:	461a      	mov	r2, r3
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d3e6      	bcc.n	80122a0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	1ad2      	subs	r2, r2, r3
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	697a      	ldr	r2, [r7, #20]
 80122e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80122e4:	6979      	ldr	r1, [r7, #20]
 80122e6:	68f8      	ldr	r0, [r7, #12]
 80122e8:	f7ff fbf2 	bl	8011ad0 <clust2sect>
 80122ec:	4602      	mov	r2, r0
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012304:	441a      	add	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801230a:	2300      	movs	r3, #0
}
 801230c:	4618      	mov	r0, r3
 801230e:	3718      	adds	r7, #24
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b086      	sub	sp, #24
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012324:	2100      	movs	r1, #0
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7ff feb4 	bl	8012094 <dir_sdi>
 801232c:	4603      	mov	r3, r0
 801232e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012330:	7dfb      	ldrb	r3, [r7, #23]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d12b      	bne.n	801238e <dir_alloc+0x7a>
		n = 0;
 8012336:	2300      	movs	r3, #0
 8012338:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	69db      	ldr	r3, [r3, #28]
 801233e:	4619      	mov	r1, r3
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f7ff fb29 	bl	8011998 <move_window>
 8012346:	4603      	mov	r3, r0
 8012348:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801234a:	7dfb      	ldrb	r3, [r7, #23]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d11d      	bne.n	801238c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6a1b      	ldr	r3, [r3, #32]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	2be5      	cmp	r3, #229	; 0xe5
 8012358:	d004      	beq.n	8012364 <dir_alloc+0x50>
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6a1b      	ldr	r3, [r3, #32]
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d107      	bne.n	8012374 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	3301      	adds	r3, #1
 8012368:	613b      	str	r3, [r7, #16]
 801236a:	693a      	ldr	r2, [r7, #16]
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	429a      	cmp	r2, r3
 8012370:	d102      	bne.n	8012378 <dir_alloc+0x64>
 8012372:	e00c      	b.n	801238e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012374:	2300      	movs	r3, #0
 8012376:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012378:	2101      	movs	r1, #1
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f7ff ff05 	bl	801218a <dir_next>
 8012380:	4603      	mov	r3, r0
 8012382:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012384:	7dfb      	ldrb	r3, [r7, #23]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d0d7      	beq.n	801233a <dir_alloc+0x26>
 801238a:	e000      	b.n	801238e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801238c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801238e:	7dfb      	ldrb	r3, [r7, #23]
 8012390:	2b04      	cmp	r3, #4
 8012392:	d101      	bne.n	8012398 <dir_alloc+0x84>
 8012394:	2307      	movs	r3, #7
 8012396:	75fb      	strb	r3, [r7, #23]
	return res;
 8012398:	7dfb      	ldrb	r3, [r7, #23]
}
 801239a:	4618      	mov	r0, r3
 801239c:	3718      	adds	r7, #24
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}

080123a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80123a2:	b580      	push	{r7, lr}
 80123a4:	b084      	sub	sp, #16
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	6078      	str	r0, [r7, #4]
 80123aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	331a      	adds	r3, #26
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7ff f841 	bl	8011438 <ld_word>
 80123b6:	4603      	mov	r3, r0
 80123b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	2b03      	cmp	r3, #3
 80123c0:	d109      	bne.n	80123d6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	3314      	adds	r3, #20
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7ff f836 	bl	8011438 <ld_word>
 80123cc:	4603      	mov	r3, r0
 80123ce:	041b      	lsls	r3, r3, #16
 80123d0:	68fa      	ldr	r2, [r7, #12]
 80123d2:	4313      	orrs	r3, r2
 80123d4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80123d6:	68fb      	ldr	r3, [r7, #12]
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3710      	adds	r7, #16
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b084      	sub	sp, #16
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	60f8      	str	r0, [r7, #12]
 80123e8:	60b9      	str	r1, [r7, #8]
 80123ea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	331a      	adds	r3, #26
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	b292      	uxth	r2, r2
 80123f4:	4611      	mov	r1, r2
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7ff f859 	bl	80114ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	2b03      	cmp	r3, #3
 8012402:	d109      	bne.n	8012418 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	f103 0214 	add.w	r2, r3, #20
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	0c1b      	lsrs	r3, r3, #16
 801240e:	b29b      	uxth	r3, r3
 8012410:	4619      	mov	r1, r3
 8012412:	4610      	mov	r0, r2
 8012414:	f7ff f84b 	bl	80114ae <st_word>
	}
}
 8012418:	bf00      	nop
 801241a:	3710      	adds	r7, #16
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}

08012420 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012420:	b590      	push	{r4, r7, lr}
 8012422:	b087      	sub	sp, #28
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	331a      	adds	r3, #26
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff f802 	bl	8011438 <ld_word>
 8012434:	4603      	mov	r3, r0
 8012436:	2b00      	cmp	r3, #0
 8012438:	d001      	beq.n	801243e <cmp_lfn+0x1e>
 801243a:	2300      	movs	r3, #0
 801243c:	e059      	b.n	80124f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012446:	1e5a      	subs	r2, r3, #1
 8012448:	4613      	mov	r3, r2
 801244a:	005b      	lsls	r3, r3, #1
 801244c:	4413      	add	r3, r2
 801244e:	009b      	lsls	r3, r3, #2
 8012450:	4413      	add	r3, r2
 8012452:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012454:	2301      	movs	r3, #1
 8012456:	81fb      	strh	r3, [r7, #14]
 8012458:	2300      	movs	r3, #0
 801245a:	613b      	str	r3, [r7, #16]
 801245c:	e033      	b.n	80124c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801245e:	4a27      	ldr	r2, [pc, #156]	; (80124fc <cmp_lfn+0xdc>)
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	4413      	add	r3, r2
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	461a      	mov	r2, r3
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	4413      	add	r3, r2
 801246c:	4618      	mov	r0, r3
 801246e:	f7fe ffe3 	bl	8011438 <ld_word>
 8012472:	4603      	mov	r3, r0
 8012474:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012476:	89fb      	ldrh	r3, [r7, #14]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d01a      	beq.n	80124b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	2bfe      	cmp	r3, #254	; 0xfe
 8012480:	d812      	bhi.n	80124a8 <cmp_lfn+0x88>
 8012482:	89bb      	ldrh	r3, [r7, #12]
 8012484:	4618      	mov	r0, r3
 8012486:	f002 fa11 	bl	80148ac <ff_wtoupper>
 801248a:	4603      	mov	r3, r0
 801248c:	461c      	mov	r4, r3
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	1c5a      	adds	r2, r3, #1
 8012492:	617a      	str	r2, [r7, #20]
 8012494:	005b      	lsls	r3, r3, #1
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	4413      	add	r3, r2
 801249a:	881b      	ldrh	r3, [r3, #0]
 801249c:	4618      	mov	r0, r3
 801249e:	f002 fa05 	bl	80148ac <ff_wtoupper>
 80124a2:	4603      	mov	r3, r0
 80124a4:	429c      	cmp	r4, r3
 80124a6:	d001      	beq.n	80124ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80124a8:	2300      	movs	r3, #0
 80124aa:	e022      	b.n	80124f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 80124ac:	89bb      	ldrh	r3, [r7, #12]
 80124ae:	81fb      	strh	r3, [r7, #14]
 80124b0:	e006      	b.n	80124c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80124b2:	89bb      	ldrh	r3, [r7, #12]
 80124b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124b8:	4293      	cmp	r3, r2
 80124ba:	d001      	beq.n	80124c0 <cmp_lfn+0xa0>
 80124bc:	2300      	movs	r3, #0
 80124be:	e018      	b.n	80124f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	3301      	adds	r3, #1
 80124c4:	613b      	str	r3, [r7, #16]
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	2b0c      	cmp	r3, #12
 80124ca:	d9c8      	bls.n	801245e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d00b      	beq.n	80124f0 <cmp_lfn+0xd0>
 80124d8:	89fb      	ldrh	r3, [r7, #14]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d008      	beq.n	80124f0 <cmp_lfn+0xd0>
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	005b      	lsls	r3, r3, #1
 80124e2:	687a      	ldr	r2, [r7, #4]
 80124e4:	4413      	add	r3, r2
 80124e6:	881b      	ldrh	r3, [r3, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d001      	beq.n	80124f0 <cmp_lfn+0xd0>
 80124ec:	2300      	movs	r3, #0
 80124ee:	e000      	b.n	80124f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80124f0:	2301      	movs	r3, #1
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	371c      	adds	r7, #28
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd90      	pop	{r4, r7, pc}
 80124fa:	bf00      	nop
 80124fc:	08016ab4 	.word	0x08016ab4

08012500 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b086      	sub	sp, #24
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	331a      	adds	r3, #26
 801250e:	4618      	mov	r0, r3
 8012510:	f7fe ff92 	bl	8011438 <ld_word>
 8012514:	4603      	mov	r3, r0
 8012516:	2b00      	cmp	r3, #0
 8012518:	d001      	beq.n	801251e <pick_lfn+0x1e>
 801251a:	2300      	movs	r3, #0
 801251c:	e04d      	b.n	80125ba <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012526:	1e5a      	subs	r2, r3, #1
 8012528:	4613      	mov	r3, r2
 801252a:	005b      	lsls	r3, r3, #1
 801252c:	4413      	add	r3, r2
 801252e:	009b      	lsls	r3, r3, #2
 8012530:	4413      	add	r3, r2
 8012532:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012534:	2301      	movs	r3, #1
 8012536:	81fb      	strh	r3, [r7, #14]
 8012538:	2300      	movs	r3, #0
 801253a:	613b      	str	r3, [r7, #16]
 801253c:	e028      	b.n	8012590 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801253e:	4a21      	ldr	r2, [pc, #132]	; (80125c4 <pick_lfn+0xc4>)
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	4413      	add	r3, r2
 8012544:	781b      	ldrb	r3, [r3, #0]
 8012546:	461a      	mov	r2, r3
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	4413      	add	r3, r2
 801254c:	4618      	mov	r0, r3
 801254e:	f7fe ff73 	bl	8011438 <ld_word>
 8012552:	4603      	mov	r3, r0
 8012554:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012556:	89fb      	ldrh	r3, [r7, #14]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00f      	beq.n	801257c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	2bfe      	cmp	r3, #254	; 0xfe
 8012560:	d901      	bls.n	8012566 <pick_lfn+0x66>
 8012562:	2300      	movs	r3, #0
 8012564:	e029      	b.n	80125ba <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012566:	89bb      	ldrh	r3, [r7, #12]
 8012568:	81fb      	strh	r3, [r7, #14]
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	1c5a      	adds	r2, r3, #1
 801256e:	617a      	str	r2, [r7, #20]
 8012570:	005b      	lsls	r3, r3, #1
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	4413      	add	r3, r2
 8012576:	89fa      	ldrh	r2, [r7, #14]
 8012578:	801a      	strh	r2, [r3, #0]
 801257a:	e006      	b.n	801258a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801257c:	89bb      	ldrh	r3, [r7, #12]
 801257e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012582:	4293      	cmp	r3, r2
 8012584:	d001      	beq.n	801258a <pick_lfn+0x8a>
 8012586:	2300      	movs	r3, #0
 8012588:	e017      	b.n	80125ba <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	3301      	adds	r3, #1
 801258e:	613b      	str	r3, [r7, #16]
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	2b0c      	cmp	r3, #12
 8012594:	d9d3      	bls.n	801253e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d00a      	beq.n	80125b8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	2bfe      	cmp	r3, #254	; 0xfe
 80125a6:	d901      	bls.n	80125ac <pick_lfn+0xac>
 80125a8:	2300      	movs	r3, #0
 80125aa:	e006      	b.n	80125ba <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	005b      	lsls	r3, r3, #1
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	4413      	add	r3, r2
 80125b4:	2200      	movs	r2, #0
 80125b6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80125b8:	2301      	movs	r3, #1
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3718      	adds	r7, #24
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
 80125c2:	bf00      	nop
 80125c4:	08016ab4 	.word	0x08016ab4

080125c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b088      	sub	sp, #32
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	4611      	mov	r1, r2
 80125d4:	461a      	mov	r2, r3
 80125d6:	460b      	mov	r3, r1
 80125d8:	71fb      	strb	r3, [r7, #7]
 80125da:	4613      	mov	r3, r2
 80125dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	330d      	adds	r3, #13
 80125e2:	79ba      	ldrb	r2, [r7, #6]
 80125e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	330b      	adds	r3, #11
 80125ea:	220f      	movs	r2, #15
 80125ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	330c      	adds	r3, #12
 80125f2:	2200      	movs	r2, #0
 80125f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	331a      	adds	r3, #26
 80125fa:	2100      	movs	r1, #0
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7fe ff56 	bl	80114ae <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012602:	79fb      	ldrb	r3, [r7, #7]
 8012604:	1e5a      	subs	r2, r3, #1
 8012606:	4613      	mov	r3, r2
 8012608:	005b      	lsls	r3, r3, #1
 801260a:	4413      	add	r3, r2
 801260c:	009b      	lsls	r3, r3, #2
 801260e:	4413      	add	r3, r2
 8012610:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012612:	2300      	movs	r3, #0
 8012614:	82fb      	strh	r3, [r7, #22]
 8012616:	2300      	movs	r3, #0
 8012618:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801261a:	8afb      	ldrh	r3, [r7, #22]
 801261c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012620:	4293      	cmp	r3, r2
 8012622:	d007      	beq.n	8012634 <put_lfn+0x6c>
 8012624:	69fb      	ldr	r3, [r7, #28]
 8012626:	1c5a      	adds	r2, r3, #1
 8012628:	61fa      	str	r2, [r7, #28]
 801262a:	005b      	lsls	r3, r3, #1
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	4413      	add	r3, r2
 8012630:	881b      	ldrh	r3, [r3, #0]
 8012632:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012634:	4a17      	ldr	r2, [pc, #92]	; (8012694 <put_lfn+0xcc>)
 8012636:	69bb      	ldr	r3, [r7, #24]
 8012638:	4413      	add	r3, r2
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	461a      	mov	r2, r3
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	4413      	add	r3, r2
 8012642:	8afa      	ldrh	r2, [r7, #22]
 8012644:	4611      	mov	r1, r2
 8012646:	4618      	mov	r0, r3
 8012648:	f7fe ff31 	bl	80114ae <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801264c:	8afb      	ldrh	r3, [r7, #22]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d102      	bne.n	8012658 <put_lfn+0x90>
 8012652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012656:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012658:	69bb      	ldr	r3, [r7, #24]
 801265a:	3301      	adds	r3, #1
 801265c:	61bb      	str	r3, [r7, #24]
 801265e:	69bb      	ldr	r3, [r7, #24]
 8012660:	2b0c      	cmp	r3, #12
 8012662:	d9da      	bls.n	801261a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012664:	8afb      	ldrh	r3, [r7, #22]
 8012666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801266a:	4293      	cmp	r3, r2
 801266c:	d006      	beq.n	801267c <put_lfn+0xb4>
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	005b      	lsls	r3, r3, #1
 8012672:	68fa      	ldr	r2, [r7, #12]
 8012674:	4413      	add	r3, r2
 8012676:	881b      	ldrh	r3, [r3, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d103      	bne.n	8012684 <put_lfn+0xbc>
 801267c:	79fb      	ldrb	r3, [r7, #7]
 801267e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012682:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	79fa      	ldrb	r2, [r7, #7]
 8012688:	701a      	strb	r2, [r3, #0]
}
 801268a:	bf00      	nop
 801268c:	3720      	adds	r7, #32
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	08016ab4 	.word	0x08016ab4

08012698 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b08c      	sub	sp, #48	; 0x30
 801269c:	af00      	add	r7, sp, #0
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	60b9      	str	r1, [r7, #8]
 80126a2:	607a      	str	r2, [r7, #4]
 80126a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80126a6:	220b      	movs	r2, #11
 80126a8:	68b9      	ldr	r1, [r7, #8]
 80126aa:	68f8      	ldr	r0, [r7, #12]
 80126ac:	f7fe ff46 	bl	801153c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	2b05      	cmp	r3, #5
 80126b4:	d929      	bls.n	801270a <gen_numname+0x72>
		sr = seq;
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80126ba:	e020      	b.n	80126fe <gen_numname+0x66>
			wc = *lfn++;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	1c9a      	adds	r2, r3, #2
 80126c0:	607a      	str	r2, [r7, #4]
 80126c2:	881b      	ldrh	r3, [r3, #0]
 80126c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80126c6:	2300      	movs	r3, #0
 80126c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80126ca:	e015      	b.n	80126f8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	005a      	lsls	r2, r3, #1
 80126d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126d2:	f003 0301 	and.w	r3, r3, #1
 80126d6:	4413      	add	r3, r2
 80126d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80126da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126dc:	085b      	lsrs	r3, r3, #1
 80126de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d003      	beq.n	80126f2 <gen_numname+0x5a>
 80126ea:	69fa      	ldr	r2, [r7, #28]
 80126ec:	4b3b      	ldr	r3, [pc, #236]	; (80127dc <gen_numname+0x144>)
 80126ee:	4053      	eors	r3, r2
 80126f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80126f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f4:	3301      	adds	r3, #1
 80126f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80126f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fa:	2b0f      	cmp	r3, #15
 80126fc:	d9e6      	bls.n	80126cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	881b      	ldrh	r3, [r3, #0]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d1da      	bne.n	80126bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801270a:	2307      	movs	r3, #7
 801270c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	b2db      	uxtb	r3, r3
 8012712:	f003 030f 	and.w	r3, r3, #15
 8012716:	b2db      	uxtb	r3, r3
 8012718:	3330      	adds	r3, #48	; 0x30
 801271a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801271e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012722:	2b39      	cmp	r3, #57	; 0x39
 8012724:	d904      	bls.n	8012730 <gen_numname+0x98>
 8012726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801272a:	3307      	adds	r3, #7
 801272c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8012730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012732:	1e5a      	subs	r2, r3, #1
 8012734:	62ba      	str	r2, [r7, #40]	; 0x28
 8012736:	3330      	adds	r3, #48	; 0x30
 8012738:	443b      	add	r3, r7
 801273a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801273e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	091b      	lsrs	r3, r3, #4
 8012746:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d1df      	bne.n	801270e <gen_numname+0x76>
	ns[i] = '~';
 801274e:	f107 0214 	add.w	r2, r7, #20
 8012752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012754:	4413      	add	r3, r2
 8012756:	227e      	movs	r2, #126	; 0x7e
 8012758:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801275a:	2300      	movs	r3, #0
 801275c:	627b      	str	r3, [r7, #36]	; 0x24
 801275e:	e016      	b.n	801278e <gen_numname+0xf6>
		if (IsDBCS1(dst[j])) {
 8012760:	68fa      	ldr	r2, [r7, #12]
 8012762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012764:	4413      	add	r3, r2
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	2b80      	cmp	r3, #128	; 0x80
 801276a:	d90d      	bls.n	8012788 <gen_numname+0xf0>
 801276c:	68fa      	ldr	r2, [r7, #12]
 801276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012770:	4413      	add	r3, r2
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	2bff      	cmp	r3, #255	; 0xff
 8012776:	d007      	beq.n	8012788 <gen_numname+0xf0>
			if (j == i - 1) break;
 8012778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801277a:	3b01      	subs	r3, #1
 801277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801277e:	429a      	cmp	r2, r3
 8012780:	d010      	beq.n	80127a4 <gen_numname+0x10c>
			j++;
 8012782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012784:	3301      	adds	r3, #1
 8012786:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278a:	3301      	adds	r3, #1
 801278c:	627b      	str	r3, [r7, #36]	; 0x24
 801278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012792:	429a      	cmp	r2, r3
 8012794:	d207      	bcs.n	80127a6 <gen_numname+0x10e>
 8012796:	68fa      	ldr	r2, [r7, #12]
 8012798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279a:	4413      	add	r3, r2
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	2b20      	cmp	r3, #32
 80127a0:	d1de      	bne.n	8012760 <gen_numname+0xc8>
 80127a2:	e000      	b.n	80127a6 <gen_numname+0x10e>
			if (j == i - 1) break;
 80127a4:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80127a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a8:	2b07      	cmp	r3, #7
 80127aa:	d807      	bhi.n	80127bc <gen_numname+0x124>
 80127ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ae:	1c5a      	adds	r2, r3, #1
 80127b0:	62ba      	str	r2, [r7, #40]	; 0x28
 80127b2:	3330      	adds	r3, #48	; 0x30
 80127b4:	443b      	add	r3, r7
 80127b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80127ba:	e000      	b.n	80127be <gen_numname+0x126>
 80127bc:	2120      	movs	r1, #32
 80127be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c0:	1c5a      	adds	r2, r3, #1
 80127c2:	627a      	str	r2, [r7, #36]	; 0x24
 80127c4:	68fa      	ldr	r2, [r7, #12]
 80127c6:	4413      	add	r3, r2
 80127c8:	460a      	mov	r2, r1
 80127ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80127cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ce:	2b07      	cmp	r3, #7
 80127d0:	d9e9      	bls.n	80127a6 <gen_numname+0x10e>
}
 80127d2:	bf00      	nop
 80127d4:	bf00      	nop
 80127d6:	3730      	adds	r7, #48	; 0x30
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	00011021 	.word	0x00011021

080127e0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80127e0:	b480      	push	{r7}
 80127e2:	b085      	sub	sp, #20
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80127e8:	2300      	movs	r3, #0
 80127ea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80127ec:	230b      	movs	r3, #11
 80127ee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80127f0:	7bfb      	ldrb	r3, [r7, #15]
 80127f2:	b2da      	uxtb	r2, r3
 80127f4:	0852      	lsrs	r2, r2, #1
 80127f6:	01db      	lsls	r3, r3, #7
 80127f8:	4313      	orrs	r3, r2
 80127fa:	b2da      	uxtb	r2, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	1c59      	adds	r1, r3, #1
 8012800:	6079      	str	r1, [r7, #4]
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	4413      	add	r3, r2
 8012806:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	3b01      	subs	r3, #1
 801280c:	60bb      	str	r3, [r7, #8]
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d1ed      	bne.n	80127f0 <sum_sfn+0x10>
	return sum;
 8012814:	7bfb      	ldrb	r3, [r7, #15]
}
 8012816:	4618      	mov	r0, r3
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr

08012822 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012822:	b580      	push	{r7, lr}
 8012824:	b086      	sub	sp, #24
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
 801282a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801282c:	2304      	movs	r3, #4
 801282e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8012836:	23ff      	movs	r3, #255	; 0xff
 8012838:	757b      	strb	r3, [r7, #21]
 801283a:	23ff      	movs	r3, #255	; 0xff
 801283c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801283e:	e081      	b.n	8012944 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	69db      	ldr	r3, [r3, #28]
 8012844:	4619      	mov	r1, r3
 8012846:	6938      	ldr	r0, [r7, #16]
 8012848:	f7ff f8a6 	bl	8011998 <move_window>
 801284c:	4603      	mov	r3, r0
 801284e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012850:	7dfb      	ldrb	r3, [r7, #23]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d17c      	bne.n	8012950 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6a1b      	ldr	r3, [r3, #32]
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801285e:	7dbb      	ldrb	r3, [r7, #22]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d102      	bne.n	801286a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012864:	2304      	movs	r3, #4
 8012866:	75fb      	strb	r3, [r7, #23]
 8012868:	e077      	b.n	801295a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6a1b      	ldr	r3, [r3, #32]
 801286e:	330b      	adds	r3, #11
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012876:	73fb      	strb	r3, [r7, #15]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	7bfa      	ldrb	r2, [r7, #15]
 801287c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801287e:	7dbb      	ldrb	r3, [r7, #22]
 8012880:	2be5      	cmp	r3, #229	; 0xe5
 8012882:	d00e      	beq.n	80128a2 <dir_read+0x80>
 8012884:	7dbb      	ldrb	r3, [r7, #22]
 8012886:	2b2e      	cmp	r3, #46	; 0x2e
 8012888:	d00b      	beq.n	80128a2 <dir_read+0x80>
 801288a:	7bfb      	ldrb	r3, [r7, #15]
 801288c:	f023 0320 	bic.w	r3, r3, #32
 8012890:	2b08      	cmp	r3, #8
 8012892:	bf0c      	ite	eq
 8012894:	2301      	moveq	r3, #1
 8012896:	2300      	movne	r3, #0
 8012898:	b2db      	uxtb	r3, r3
 801289a:	461a      	mov	r2, r3
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	4293      	cmp	r3, r2
 80128a0:	d002      	beq.n	80128a8 <dir_read+0x86>
				ord = 0xFF;
 80128a2:	23ff      	movs	r3, #255	; 0xff
 80128a4:	757b      	strb	r3, [r7, #21]
 80128a6:	e044      	b.n	8012932 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80128a8:	7bfb      	ldrb	r3, [r7, #15]
 80128aa:	2b0f      	cmp	r3, #15
 80128ac:	d12f      	bne.n	801290e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80128ae:	7dbb      	ldrb	r3, [r7, #22]
 80128b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d00d      	beq.n	80128d4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6a1b      	ldr	r3, [r3, #32]
 80128bc:	7b5b      	ldrb	r3, [r3, #13]
 80128be:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80128c0:	7dbb      	ldrb	r3, [r7, #22]
 80128c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128c6:	75bb      	strb	r3, [r7, #22]
 80128c8:	7dbb      	ldrb	r3, [r7, #22]
 80128ca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	695a      	ldr	r2, [r3, #20]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80128d4:	7dba      	ldrb	r2, [r7, #22]
 80128d6:	7d7b      	ldrb	r3, [r7, #21]
 80128d8:	429a      	cmp	r2, r3
 80128da:	d115      	bne.n	8012908 <dir_read+0xe6>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6a1b      	ldr	r3, [r3, #32]
 80128e0:	330d      	adds	r3, #13
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	7d3a      	ldrb	r2, [r7, #20]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d10e      	bne.n	8012908 <dir_read+0xe6>
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	68da      	ldr	r2, [r3, #12]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6a1b      	ldr	r3, [r3, #32]
 80128f2:	4619      	mov	r1, r3
 80128f4:	4610      	mov	r0, r2
 80128f6:	f7ff fe03 	bl	8012500 <pick_lfn>
 80128fa:	4603      	mov	r3, r0
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d003      	beq.n	8012908 <dir_read+0xe6>
 8012900:	7d7b      	ldrb	r3, [r7, #21]
 8012902:	3b01      	subs	r3, #1
 8012904:	b2db      	uxtb	r3, r3
 8012906:	e000      	b.n	801290a <dir_read+0xe8>
 8012908:	23ff      	movs	r3, #255	; 0xff
 801290a:	757b      	strb	r3, [r7, #21]
 801290c:	e011      	b.n	8012932 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801290e:	7d7b      	ldrb	r3, [r7, #21]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d109      	bne.n	8012928 <dir_read+0x106>
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6a1b      	ldr	r3, [r3, #32]
 8012918:	4618      	mov	r0, r3
 801291a:	f7ff ff61 	bl	80127e0 <sum_sfn>
 801291e:	4603      	mov	r3, r0
 8012920:	461a      	mov	r2, r3
 8012922:	7d3b      	ldrb	r3, [r7, #20]
 8012924:	4293      	cmp	r3, r2
 8012926:	d015      	beq.n	8012954 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f04f 32ff 	mov.w	r2, #4294967295
 801292e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8012930:	e010      	b.n	8012954 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012932:	2100      	movs	r1, #0
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7ff fc28 	bl	801218a <dir_next>
 801293a:	4603      	mov	r3, r0
 801293c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801293e:	7dfb      	ldrb	r3, [r7, #23]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d109      	bne.n	8012958 <dir_read+0x136>
	while (dp->sect) {
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	69db      	ldr	r3, [r3, #28]
 8012948:	2b00      	cmp	r3, #0
 801294a:	f47f af79 	bne.w	8012840 <dir_read+0x1e>
 801294e:	e004      	b.n	801295a <dir_read+0x138>
		if (res != FR_OK) break;
 8012950:	bf00      	nop
 8012952:	e002      	b.n	801295a <dir_read+0x138>
					break;
 8012954:	bf00      	nop
 8012956:	e000      	b.n	801295a <dir_read+0x138>
		if (res != FR_OK) break;
 8012958:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801295a:	7dfb      	ldrb	r3, [r7, #23]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d002      	beq.n	8012966 <dir_read+0x144>
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2200      	movs	r2, #0
 8012964:	61da      	str	r2, [r3, #28]
	return res;
 8012966:	7dfb      	ldrb	r3, [r7, #23]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3718      	adds	r7, #24
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b086      	sub	sp, #24
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801297e:	2100      	movs	r1, #0
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f7ff fb87 	bl	8012094 <dir_sdi>
 8012986:	4603      	mov	r3, r0
 8012988:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801298a:	7dfb      	ldrb	r3, [r7, #23]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d001      	beq.n	8012994 <dir_find+0x24>
 8012990:	7dfb      	ldrb	r3, [r7, #23]
 8012992:	e0a9      	b.n	8012ae8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012994:	23ff      	movs	r3, #255	; 0xff
 8012996:	753b      	strb	r3, [r7, #20]
 8012998:	7d3b      	ldrb	r3, [r7, #20]
 801299a:	757b      	strb	r3, [r7, #21]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f04f 32ff 	mov.w	r2, #4294967295
 80129a2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	69db      	ldr	r3, [r3, #28]
 80129a8:	4619      	mov	r1, r3
 80129aa:	6938      	ldr	r0, [r7, #16]
 80129ac:	f7fe fff4 	bl	8011998 <move_window>
 80129b0:	4603      	mov	r3, r0
 80129b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80129b4:	7dfb      	ldrb	r3, [r7, #23]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	f040 8090 	bne.w	8012adc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	6a1b      	ldr	r3, [r3, #32]
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80129c4:	7dbb      	ldrb	r3, [r7, #22]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d102      	bne.n	80129d0 <dir_find+0x60>
 80129ca:	2304      	movs	r3, #4
 80129cc:	75fb      	strb	r3, [r7, #23]
 80129ce:	e08a      	b.n	8012ae6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6a1b      	ldr	r3, [r3, #32]
 80129d4:	330b      	adds	r3, #11
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80129dc:	73fb      	strb	r3, [r7, #15]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	7bfa      	ldrb	r2, [r7, #15]
 80129e2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80129e4:	7dbb      	ldrb	r3, [r7, #22]
 80129e6:	2be5      	cmp	r3, #229	; 0xe5
 80129e8:	d007      	beq.n	80129fa <dir_find+0x8a>
 80129ea:	7bfb      	ldrb	r3, [r7, #15]
 80129ec:	f003 0308 	and.w	r3, r3, #8
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d009      	beq.n	8012a08 <dir_find+0x98>
 80129f4:	7bfb      	ldrb	r3, [r7, #15]
 80129f6:	2b0f      	cmp	r3, #15
 80129f8:	d006      	beq.n	8012a08 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80129fa:	23ff      	movs	r3, #255	; 0xff
 80129fc:	757b      	strb	r3, [r7, #21]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f04f 32ff 	mov.w	r2, #4294967295
 8012a04:	631a      	str	r2, [r3, #48]	; 0x30
 8012a06:	e05e      	b.n	8012ac6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012a08:	7bfb      	ldrb	r3, [r7, #15]
 8012a0a:	2b0f      	cmp	r3, #15
 8012a0c:	d136      	bne.n	8012a7c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d154      	bne.n	8012ac6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012a1c:	7dbb      	ldrb	r3, [r7, #22]
 8012a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d00d      	beq.n	8012a42 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6a1b      	ldr	r3, [r3, #32]
 8012a2a:	7b5b      	ldrb	r3, [r3, #13]
 8012a2c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012a2e:	7dbb      	ldrb	r3, [r7, #22]
 8012a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a34:	75bb      	strb	r3, [r7, #22]
 8012a36:	7dbb      	ldrb	r3, [r7, #22]
 8012a38:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	695a      	ldr	r2, [r3, #20]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012a42:	7dba      	ldrb	r2, [r7, #22]
 8012a44:	7d7b      	ldrb	r3, [r7, #21]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d115      	bne.n	8012a76 <dir_find+0x106>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6a1b      	ldr	r3, [r3, #32]
 8012a4e:	330d      	adds	r3, #13
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	7d3a      	ldrb	r2, [r7, #20]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d10e      	bne.n	8012a76 <dir_find+0x106>
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	68da      	ldr	r2, [r3, #12]
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6a1b      	ldr	r3, [r3, #32]
 8012a60:	4619      	mov	r1, r3
 8012a62:	4610      	mov	r0, r2
 8012a64:	f7ff fcdc 	bl	8012420 <cmp_lfn>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d003      	beq.n	8012a76 <dir_find+0x106>
 8012a6e:	7d7b      	ldrb	r3, [r7, #21]
 8012a70:	3b01      	subs	r3, #1
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	e000      	b.n	8012a78 <dir_find+0x108>
 8012a76:	23ff      	movs	r3, #255	; 0xff
 8012a78:	757b      	strb	r3, [r7, #21]
 8012a7a:	e024      	b.n	8012ac6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012a7c:	7d7b      	ldrb	r3, [r7, #21]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d109      	bne.n	8012a96 <dir_find+0x126>
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6a1b      	ldr	r3, [r3, #32]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7ff feaa 	bl	80127e0 <sum_sfn>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	461a      	mov	r2, r3
 8012a90:	7d3b      	ldrb	r3, [r7, #20]
 8012a92:	4293      	cmp	r3, r2
 8012a94:	d024      	beq.n	8012ae0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012a9c:	f003 0301 	and.w	r3, r3, #1
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d10a      	bne.n	8012aba <dir_find+0x14a>
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6a18      	ldr	r0, [r3, #32]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	3324      	adds	r3, #36	; 0x24
 8012aac:	220b      	movs	r2, #11
 8012aae:	4619      	mov	r1, r3
 8012ab0:	f7fe fd80 	bl	80115b4 <mem_cmp>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d014      	beq.n	8012ae4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012aba:	23ff      	movs	r3, #255	; 0xff
 8012abc:	757b      	strb	r3, [r7, #21]
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012ac6:	2100      	movs	r1, #0
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7ff fb5e 	bl	801218a <dir_next>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012ad2:	7dfb      	ldrb	r3, [r7, #23]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	f43f af65 	beq.w	80129a4 <dir_find+0x34>
 8012ada:	e004      	b.n	8012ae6 <dir_find+0x176>
		if (res != FR_OK) break;
 8012adc:	bf00      	nop
 8012ade:	e002      	b.n	8012ae6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012ae0:	bf00      	nop
 8012ae2:	e000      	b.n	8012ae6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012ae4:	bf00      	nop

	return res;
 8012ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3718      	adds	r7, #24
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b08c      	sub	sp, #48	; 0x30
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012b04:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d001      	beq.n	8012b10 <dir_register+0x20>
 8012b0c:	2306      	movs	r3, #6
 8012b0e:	e0e0      	b.n	8012cd2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012b10:	2300      	movs	r3, #0
 8012b12:	627b      	str	r3, [r7, #36]	; 0x24
 8012b14:	e002      	b.n	8012b1c <dir_register+0x2c>
 8012b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b18:	3301      	adds	r3, #1
 8012b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8012b1c:	69fb      	ldr	r3, [r7, #28]
 8012b1e:	68da      	ldr	r2, [r3, #12]
 8012b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b22:	005b      	lsls	r3, r3, #1
 8012b24:	4413      	add	r3, r2
 8012b26:	881b      	ldrh	r3, [r3, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d1f4      	bne.n	8012b16 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8012b32:	f107 030c 	add.w	r3, r7, #12
 8012b36:	220c      	movs	r2, #12
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7fe fcff 	bl	801153c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012b3e:	7dfb      	ldrb	r3, [r7, #23]
 8012b40:	f003 0301 	and.w	r3, r3, #1
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d032      	beq.n	8012bae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2240      	movs	r2, #64	; 0x40
 8012b4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8012b50:	2301      	movs	r3, #1
 8012b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b54:	e016      	b.n	8012b84 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	68da      	ldr	r2, [r3, #12]
 8012b60:	f107 010c 	add.w	r1, r7, #12
 8012b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b66:	f7ff fd97 	bl	8012698 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7ff ff00 	bl	8012970 <dir_find>
 8012b70:	4603      	mov	r3, r0
 8012b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8012b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d106      	bne.n	8012b8c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b80:	3301      	adds	r3, #1
 8012b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b86:	2b63      	cmp	r3, #99	; 0x63
 8012b88:	d9e5      	bls.n	8012b56 <dir_register+0x66>
 8012b8a:	e000      	b.n	8012b8e <dir_register+0x9e>
			if (res != FR_OK) break;
 8012b8c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b90:	2b64      	cmp	r3, #100	; 0x64
 8012b92:	d101      	bne.n	8012b98 <dir_register+0xa8>
 8012b94:	2307      	movs	r3, #7
 8012b96:	e09c      	b.n	8012cd2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b9c:	2b04      	cmp	r3, #4
 8012b9e:	d002      	beq.n	8012ba6 <dir_register+0xb6>
 8012ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ba4:	e095      	b.n	8012cd2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012ba6:	7dfa      	ldrb	r2, [r7, #23]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012bae:	7dfb      	ldrb	r3, [r7, #23]
 8012bb0:	f003 0302 	and.w	r3, r3, #2
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d007      	beq.n	8012bc8 <dir_register+0xd8>
 8012bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bba:	330c      	adds	r3, #12
 8012bbc:	4a47      	ldr	r2, [pc, #284]	; (8012cdc <dir_register+0x1ec>)
 8012bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8012bc2:	089b      	lsrs	r3, r3, #2
 8012bc4:	3301      	adds	r3, #1
 8012bc6:	e000      	b.n	8012bca <dir_register+0xda>
 8012bc8:	2301      	movs	r3, #1
 8012bca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012bcc:	6a39      	ldr	r1, [r7, #32]
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f7ff fba0 	bl	8012314 <dir_alloc>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d148      	bne.n	8012c74 <dir_register+0x184>
 8012be2:	6a3b      	ldr	r3, [r7, #32]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	623b      	str	r3, [r7, #32]
 8012be8:	6a3b      	ldr	r3, [r7, #32]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d042      	beq.n	8012c74 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	695a      	ldr	r2, [r3, #20]
 8012bf2:	6a3b      	ldr	r3, [r7, #32]
 8012bf4:	015b      	lsls	r3, r3, #5
 8012bf6:	1ad3      	subs	r3, r2, r3
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7ff fa4a 	bl	8012094 <dir_sdi>
 8012c00:	4603      	mov	r3, r0
 8012c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d132      	bne.n	8012c74 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	3324      	adds	r3, #36	; 0x24
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7ff fde4 	bl	80127e0 <sum_sfn>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	69db      	ldr	r3, [r3, #28]
 8012c20:	4619      	mov	r1, r3
 8012c22:	69f8      	ldr	r0, [r7, #28]
 8012c24:	f7fe feb8 	bl	8011998 <move_window>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8012c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d11d      	bne.n	8012c72 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	68d8      	ldr	r0, [r3, #12]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6a19      	ldr	r1, [r3, #32]
 8012c3e:	6a3b      	ldr	r3, [r7, #32]
 8012c40:	b2da      	uxtb	r2, r3
 8012c42:	7efb      	ldrb	r3, [r7, #27]
 8012c44:	f7ff fcc0 	bl	80125c8 <put_lfn>
				fs->wflag = 1;
 8012c48:	69fb      	ldr	r3, [r7, #28]
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012c4e:	2100      	movs	r1, #0
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f7ff fa9a 	bl	801218a <dir_next>
 8012c56:	4603      	mov	r3, r0
 8012c58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8012c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d107      	bne.n	8012c74 <dir_register+0x184>
 8012c64:	6a3b      	ldr	r3, [r7, #32]
 8012c66:	3b01      	subs	r3, #1
 8012c68:	623b      	str	r3, [r7, #32]
 8012c6a:	6a3b      	ldr	r3, [r7, #32]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d1d5      	bne.n	8012c1c <dir_register+0x12c>
 8012c70:	e000      	b.n	8012c74 <dir_register+0x184>
				if (res != FR_OK) break;
 8012c72:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d128      	bne.n	8012cce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	69db      	ldr	r3, [r3, #28]
 8012c80:	4619      	mov	r1, r3
 8012c82:	69f8      	ldr	r0, [r7, #28]
 8012c84:	f7fe fe88 	bl	8011998 <move_window>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d11b      	bne.n	8012cce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6a1b      	ldr	r3, [r3, #32]
 8012c9a:	2220      	movs	r2, #32
 8012c9c:	2100      	movs	r1, #0
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7fe fc6d 	bl	801157e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6a18      	ldr	r0, [r3, #32]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	3324      	adds	r3, #36	; 0x24
 8012cac:	220b      	movs	r2, #11
 8012cae:	4619      	mov	r1, r3
 8012cb0:	f7fe fc44 	bl	801153c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6a1b      	ldr	r3, [r3, #32]
 8012cbe:	330c      	adds	r3, #12
 8012cc0:	f002 0218 	and.w	r2, r2, #24
 8012cc4:	b2d2      	uxtb	r2, r2
 8012cc6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012cc8:	69fb      	ldr	r3, [r7, #28]
 8012cca:	2201      	movs	r2, #1
 8012ccc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3730      	adds	r7, #48	; 0x30
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	4ec4ec4f 	.word	0x4ec4ec4f

08012ce0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b08a      	sub	sp, #40	; 0x28
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	613b      	str	r3, [r7, #16]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	60fb      	str	r3, [r7, #12]
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	617b      	str	r3, [r7, #20]
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	1c5a      	adds	r2, r3, #1
 8012d04:	61ba      	str	r2, [r7, #24]
 8012d06:	693a      	ldr	r2, [r7, #16]
 8012d08:	4413      	add	r3, r2
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012d0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d10:	2b1f      	cmp	r3, #31
 8012d12:	d96a      	bls.n	8012dea <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d16:	2b2f      	cmp	r3, #47	; 0x2f
 8012d18:	d006      	beq.n	8012d28 <create_name+0x48>
 8012d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d1c:	2b5c      	cmp	r3, #92	; 0x5c
 8012d1e:	d110      	bne.n	8012d42 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012d20:	e002      	b.n	8012d28 <create_name+0x48>
 8012d22:	69bb      	ldr	r3, [r7, #24]
 8012d24:	3301      	adds	r3, #1
 8012d26:	61bb      	str	r3, [r7, #24]
 8012d28:	693a      	ldr	r2, [r7, #16]
 8012d2a:	69bb      	ldr	r3, [r7, #24]
 8012d2c:	4413      	add	r3, r2
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	2b2f      	cmp	r3, #47	; 0x2f
 8012d32:	d0f6      	beq.n	8012d22 <create_name+0x42>
 8012d34:	693a      	ldr	r2, [r7, #16]
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	4413      	add	r3, r2
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	2b5c      	cmp	r3, #92	; 0x5c
 8012d3e:	d0f0      	beq.n	8012d22 <create_name+0x42>
			break;
 8012d40:	e054      	b.n	8012dec <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	2bfe      	cmp	r3, #254	; 0xfe
 8012d46:	d901      	bls.n	8012d4c <create_name+0x6c>
 8012d48:	2306      	movs	r3, #6
 8012d4a:	e1bf      	b.n	80130cc <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d4e:	b2db      	uxtb	r3, r3
 8012d50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8012d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d54:	b2db      	uxtb	r3, r3
 8012d56:	2b80      	cmp	r3, #128	; 0x80
 8012d58:	d925      	bls.n	8012da6 <create_name+0xc6>
 8012d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d5c:	b2db      	uxtb	r3, r3
 8012d5e:	2bff      	cmp	r3, #255	; 0xff
 8012d60:	d021      	beq.n	8012da6 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	1c5a      	adds	r2, r3, #1
 8012d66:	61ba      	str	r2, [r7, #24]
 8012d68:	693a      	ldr	r2, [r7, #16]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	781b      	ldrb	r3, [r3, #0]
 8012d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 8012d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d74:	021b      	lsls	r3, r3, #8
 8012d76:	b29a      	uxth	r2, r3
 8012d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d7c:	b29b      	uxth	r3, r3
 8012d7e:	4413      	add	r3, r2
 8012d80:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 8012d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d86:	2b3f      	cmp	r3, #63	; 0x3f
 8012d88:	d903      	bls.n	8012d92 <create_name+0xb2>
 8012d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d8e:	2b7e      	cmp	r3, #126	; 0x7e
 8012d90:	d909      	bls.n	8012da6 <create_name+0xc6>
 8012d92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	da03      	bge.n	8012da2 <create_name+0xc2>
 8012d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d9e:	2bff      	cmp	r3, #255	; 0xff
 8012da0:	d101      	bne.n	8012da6 <create_name+0xc6>
 8012da2:	2306      	movs	r3, #6
 8012da4:	e192      	b.n	80130cc <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012da8:	2101      	movs	r1, #1
 8012daa:	4618      	mov	r0, r3
 8012dac:	f001 fd20 	bl	80147f0 <ff_convert>
 8012db0:	4603      	mov	r3, r0
 8012db2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d101      	bne.n	8012dbe <create_name+0xde>
 8012dba:	2306      	movs	r3, #6
 8012dbc:	e186      	b.n	80130cc <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8012dc2:	d809      	bhi.n	8012dd8 <create_name+0xf8>
 8012dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012dc6:	4619      	mov	r1, r3
 8012dc8:	489a      	ldr	r0, [pc, #616]	; (8013034 <create_name+0x354>)
 8012dca:	f7fe fc1a 	bl	8011602 <chk_chr>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d001      	beq.n	8012dd8 <create_name+0xf8>
 8012dd4:	2306      	movs	r3, #6
 8012dd6:	e179      	b.n	80130cc <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	1c5a      	adds	r2, r3, #1
 8012ddc:	617a      	str	r2, [r7, #20]
 8012dde:	005b      	lsls	r3, r3, #1
 8012de0:	68fa      	ldr	r2, [r7, #12]
 8012de2:	4413      	add	r3, r2
 8012de4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012de6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012de8:	e78a      	b.n	8012d00 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012dea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012dec:	693a      	ldr	r2, [r7, #16]
 8012dee:	69bb      	ldr	r3, [r7, #24]
 8012df0:	441a      	add	r2, r3
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012df8:	2b1f      	cmp	r3, #31
 8012dfa:	d801      	bhi.n	8012e00 <create_name+0x120>
 8012dfc:	2304      	movs	r3, #4
 8012dfe:	e000      	b.n	8012e02 <create_name+0x122>
 8012e00:	2300      	movs	r3, #0
 8012e02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012e06:	e011      	b.n	8012e2c <create_name+0x14c>
		w = lfn[di - 1];
 8012e08:	697a      	ldr	r2, [r7, #20]
 8012e0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012e0e:	4413      	add	r3, r2
 8012e10:	005b      	lsls	r3, r3, #1
 8012e12:	68fa      	ldr	r2, [r7, #12]
 8012e14:	4413      	add	r3, r2
 8012e16:	881b      	ldrh	r3, [r3, #0]
 8012e18:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8012e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e1c:	2b20      	cmp	r3, #32
 8012e1e:	d002      	beq.n	8012e26 <create_name+0x146>
 8012e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e22:	2b2e      	cmp	r3, #46	; 0x2e
 8012e24:	d106      	bne.n	8012e34 <create_name+0x154>
		di--;
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	3b01      	subs	r3, #1
 8012e2a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012e2c:	697b      	ldr	r3, [r7, #20]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d1ea      	bne.n	8012e08 <create_name+0x128>
 8012e32:	e000      	b.n	8012e36 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 8012e34:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	005b      	lsls	r3, r3, #1
 8012e3a:	68fa      	ldr	r2, [r7, #12]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	2200      	movs	r2, #0
 8012e40:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d101      	bne.n	8012e4c <create_name+0x16c>
 8012e48:	2306      	movs	r3, #6
 8012e4a:	e13f      	b.n	80130cc <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	3324      	adds	r3, #36	; 0x24
 8012e50:	220b      	movs	r2, #11
 8012e52:	2120      	movs	r1, #32
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7fe fb92 	bl	801157e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	61bb      	str	r3, [r7, #24]
 8012e5e:	e002      	b.n	8012e66 <create_name+0x186>
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	3301      	adds	r3, #1
 8012e64:	61bb      	str	r3, [r7, #24]
 8012e66:	69bb      	ldr	r3, [r7, #24]
 8012e68:	005b      	lsls	r3, r3, #1
 8012e6a:	68fa      	ldr	r2, [r7, #12]
 8012e6c:	4413      	add	r3, r2
 8012e6e:	881b      	ldrh	r3, [r3, #0]
 8012e70:	2b20      	cmp	r3, #32
 8012e72:	d0f5      	beq.n	8012e60 <create_name+0x180>
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	005b      	lsls	r3, r3, #1
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	4413      	add	r3, r2
 8012e7c:	881b      	ldrh	r3, [r3, #0]
 8012e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8012e80:	d0ee      	beq.n	8012e60 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d009      	beq.n	8012e9c <create_name+0x1bc>
 8012e88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e8c:	f043 0303 	orr.w	r3, r3, #3
 8012e90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012e94:	e002      	b.n	8012e9c <create_name+0x1bc>
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	3b01      	subs	r3, #1
 8012e9a:	617b      	str	r3, [r7, #20]
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d009      	beq.n	8012eb6 <create_name+0x1d6>
 8012ea2:	697a      	ldr	r2, [r7, #20]
 8012ea4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012ea8:	4413      	add	r3, r2
 8012eaa:	005b      	lsls	r3, r3, #1
 8012eac:	68fa      	ldr	r2, [r7, #12]
 8012eae:	4413      	add	r3, r2
 8012eb0:	881b      	ldrh	r3, [r3, #0]
 8012eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8012eb4:	d1ef      	bne.n	8012e96 <create_name+0x1b6>

	i = b = 0; ni = 8;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	623b      	str	r3, [r7, #32]
 8012ec0:	2308      	movs	r3, #8
 8012ec2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	1c5a      	adds	r2, r3, #1
 8012ec8:	61ba      	str	r2, [r7, #24]
 8012eca:	005b      	lsls	r3, r3, #1
 8012ecc:	68fa      	ldr	r2, [r7, #12]
 8012ece:	4413      	add	r3, r2
 8012ed0:	881b      	ldrh	r3, [r3, #0]
 8012ed2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012ed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	f000 80aa 	beq.w	8013030 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012edc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ede:	2b20      	cmp	r3, #32
 8012ee0:	d006      	beq.n	8012ef0 <create_name+0x210>
 8012ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8012ee6:	d10a      	bne.n	8012efe <create_name+0x21e>
 8012ee8:	69ba      	ldr	r2, [r7, #24]
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d006      	beq.n	8012efe <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 8012ef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ef4:	f043 0303 	orr.w	r3, r3, #3
 8012ef8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012efc:	e097      	b.n	801302e <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012efe:	6a3a      	ldr	r2, [r7, #32]
 8012f00:	69fb      	ldr	r3, [r7, #28]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d203      	bcs.n	8012f0e <create_name+0x22e>
 8012f06:	69ba      	ldr	r2, [r7, #24]
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d123      	bne.n	8012f56 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	2b0b      	cmp	r3, #11
 8012f12:	d106      	bne.n	8012f22 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 8012f14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f18:	f043 0303 	orr.w	r3, r3, #3
 8012f1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012f20:	e08d      	b.n	801303e <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8012f22:	69ba      	ldr	r2, [r7, #24]
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d005      	beq.n	8012f36 <create_name+0x256>
 8012f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f2e:	f043 0303 	orr.w	r3, r3, #3
 8012f32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8012f36:	69ba      	ldr	r2, [r7, #24]
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d87e      	bhi.n	801303c <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	61bb      	str	r3, [r7, #24]
 8012f42:	2308      	movs	r3, #8
 8012f44:	623b      	str	r3, [r7, #32]
 8012f46:	230b      	movs	r3, #11
 8012f48:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f54:	e06b      	b.n	801302e <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f58:	2b7f      	cmp	r3, #127	; 0x7f
 8012f5a:	d910      	bls.n	8012f7e <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8012f5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f001 fca4 	bl	80148ac <ff_wtoupper>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2100      	movs	r1, #0
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f001 fc41 	bl	80147f0 <ff_convert>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012f72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f76:	f043 0302 	orr.w	r3, r3, #2
 8012f7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 8012f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f80:	2bff      	cmp	r3, #255	; 0xff
 8012f82:	d91a      	bls.n	8012fba <create_name+0x2da>
			if (i >= ni - 1) {
 8012f84:	69fb      	ldr	r3, [r7, #28]
 8012f86:	3b01      	subs	r3, #1
 8012f88:	6a3a      	ldr	r2, [r7, #32]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d308      	bcc.n	8012fa0 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8012f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f92:	f043 0303 	orr.w	r3, r3, #3
 8012f96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012f9a:	69fb      	ldr	r3, [r7, #28]
 8012f9c:	623b      	str	r3, [r7, #32]
 8012f9e:	e046      	b.n	801302e <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8012fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012fa2:	0a1b      	lsrs	r3, r3, #8
 8012fa4:	b299      	uxth	r1, r3
 8012fa6:	6a3b      	ldr	r3, [r7, #32]
 8012fa8:	1c5a      	adds	r2, r3, #1
 8012faa:	623a      	str	r2, [r7, #32]
 8012fac:	b2c9      	uxtb	r1, r1
 8012fae:	687a      	ldr	r2, [r7, #4]
 8012fb0:	4413      	add	r3, r2
 8012fb2:	460a      	mov	r2, r1
 8012fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012fb8:	e02f      	b.n	801301a <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012fba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d007      	beq.n	8012fd0 <create_name+0x2f0>
 8012fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	481c      	ldr	r0, [pc, #112]	; (8013038 <create_name+0x358>)
 8012fc6:	f7fe fb1c 	bl	8011602 <chk_chr>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d008      	beq.n	8012fe2 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012fd0:	235f      	movs	r3, #95	; 0x5f
 8012fd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012fd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012fd8:	f043 0303 	orr.w	r3, r3, #3
 8012fdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012fe0:	e01b      	b.n	801301a <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012fe4:	2b40      	cmp	r3, #64	; 0x40
 8012fe6:	d909      	bls.n	8012ffc <create_name+0x31c>
 8012fe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012fea:	2b5a      	cmp	r3, #90	; 0x5a
 8012fec:	d806      	bhi.n	8012ffc <create_name+0x31c>
					b |= 2;
 8012fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ff2:	f043 0302 	orr.w	r3, r3, #2
 8012ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ffa:	e00e      	b.n	801301a <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ffe:	2b60      	cmp	r3, #96	; 0x60
 8013000:	d90b      	bls.n	801301a <create_name+0x33a>
 8013002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013004:	2b7a      	cmp	r3, #122	; 0x7a
 8013006:	d808      	bhi.n	801301a <create_name+0x33a>
						b |= 1; w -= 0x20;
 8013008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801300c:	f043 0301 	orr.w	r3, r3, #1
 8013010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013016:	3b20      	subs	r3, #32
 8013018:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801301a:	6a3b      	ldr	r3, [r7, #32]
 801301c:	1c5a      	adds	r2, r3, #1
 801301e:	623a      	str	r2, [r7, #32]
 8013020:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013022:	b2d1      	uxtb	r1, r2
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	4413      	add	r3, r2
 8013028:	460a      	mov	r2, r1
 801302a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801302e:	e749      	b.n	8012ec4 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 8013030:	bf00      	nop
 8013032:	e004      	b.n	801303e <create_name+0x35e>
 8013034:	080169c8 	.word	0x080169c8
 8013038:	080169d4 	.word	0x080169d4
			if (si > di) break;			/* No extension */
 801303c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013044:	2be5      	cmp	r3, #229	; 0xe5
 8013046:	d103      	bne.n	8013050 <create_name+0x370>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2205      	movs	r2, #5
 801304c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	2b08      	cmp	r3, #8
 8013054:	d104      	bne.n	8013060 <create_name+0x380>
 8013056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013064:	f003 030c 	and.w	r3, r3, #12
 8013068:	2b0c      	cmp	r3, #12
 801306a:	d005      	beq.n	8013078 <create_name+0x398>
 801306c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013070:	f003 0303 	and.w	r3, r3, #3
 8013074:	2b03      	cmp	r3, #3
 8013076:	d105      	bne.n	8013084 <create_name+0x3a4>
 8013078:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801307c:	f043 0302 	orr.w	r3, r3, #2
 8013080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013084:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013088:	f003 0302 	and.w	r3, r3, #2
 801308c:	2b00      	cmp	r3, #0
 801308e:	d117      	bne.n	80130c0 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013094:	f003 0303 	and.w	r3, r3, #3
 8013098:	2b01      	cmp	r3, #1
 801309a:	d105      	bne.n	80130a8 <create_name+0x3c8>
 801309c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80130a0:	f043 0310 	orr.w	r3, r3, #16
 80130a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80130a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130ac:	f003 030c 	and.w	r3, r3, #12
 80130b0:	2b04      	cmp	r3, #4
 80130b2:	d105      	bne.n	80130c0 <create_name+0x3e0>
 80130b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80130b8:	f043 0308 	orr.w	r3, r3, #8
 80130bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80130c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80130ca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80130cc:	4618      	mov	r0, r3
 80130ce:	3728      	adds	r7, #40	; 0x28
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}

080130d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b086      	sub	sp, #24
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
 80130dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80130e8:	e002      	b.n	80130f0 <follow_path+0x1c>
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	3301      	adds	r3, #1
 80130ee:	603b      	str	r3, [r7, #0]
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	2b2f      	cmp	r3, #47	; 0x2f
 80130f6:	d0f8      	beq.n	80130ea <follow_path+0x16>
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	2b5c      	cmp	r3, #92	; 0x5c
 80130fe:	d0f4      	beq.n	80130ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013100:	693b      	ldr	r3, [r7, #16]
 8013102:	2200      	movs	r2, #0
 8013104:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	2b1f      	cmp	r3, #31
 801310c:	d80a      	bhi.n	8013124 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	2280      	movs	r2, #128	; 0x80
 8013112:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013116:	2100      	movs	r1, #0
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f7fe ffbb 	bl	8012094 <dir_sdi>
 801311e:	4603      	mov	r3, r0
 8013120:	75fb      	strb	r3, [r7, #23]
 8013122:	e043      	b.n	80131ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013124:	463b      	mov	r3, r7
 8013126:	4619      	mov	r1, r3
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f7ff fdd9 	bl	8012ce0 <create_name>
 801312e:	4603      	mov	r3, r0
 8013130:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013132:	7dfb      	ldrb	r3, [r7, #23]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d134      	bne.n	80131a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7ff fc19 	bl	8012970 <dir_find>
 801313e:	4603      	mov	r3, r0
 8013140:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013148:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801314a:	7dfb      	ldrb	r3, [r7, #23]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d00a      	beq.n	8013166 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013150:	7dfb      	ldrb	r3, [r7, #23]
 8013152:	2b04      	cmp	r3, #4
 8013154:	d127      	bne.n	80131a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013156:	7afb      	ldrb	r3, [r7, #11]
 8013158:	f003 0304 	and.w	r3, r3, #4
 801315c:	2b00      	cmp	r3, #0
 801315e:	d122      	bne.n	80131a6 <follow_path+0xd2>
 8013160:	2305      	movs	r3, #5
 8013162:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013164:	e01f      	b.n	80131a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013166:	7afb      	ldrb	r3, [r7, #11]
 8013168:	f003 0304 	and.w	r3, r3, #4
 801316c:	2b00      	cmp	r3, #0
 801316e:	d11c      	bne.n	80131aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	799b      	ldrb	r3, [r3, #6]
 8013174:	f003 0310 	and.w	r3, r3, #16
 8013178:	2b00      	cmp	r3, #0
 801317a:	d102      	bne.n	8013182 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801317c:	2305      	movs	r3, #5
 801317e:	75fb      	strb	r3, [r7, #23]
 8013180:	e014      	b.n	80131ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	695b      	ldr	r3, [r3, #20]
 801318c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013190:	4413      	add	r3, r2
 8013192:	4619      	mov	r1, r3
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f7ff f904 	bl	80123a2 <ld_clust>
 801319a:	4602      	mov	r2, r0
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80131a0:	e7c0      	b.n	8013124 <follow_path+0x50>
			if (res != FR_OK) break;
 80131a2:	bf00      	nop
 80131a4:	e002      	b.n	80131ac <follow_path+0xd8>
				break;
 80131a6:	bf00      	nop
 80131a8:	e000      	b.n	80131ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80131aa:	bf00      	nop
			}
		}
	}

	return res;
 80131ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3718      	adds	r7, #24
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}

080131b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80131b6:	b480      	push	{r7}
 80131b8:	b087      	sub	sp, #28
 80131ba:	af00      	add	r7, sp, #0
 80131bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80131be:	f04f 33ff 	mov.w	r3, #4294967295
 80131c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d031      	beq.n	8013230 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	617b      	str	r3, [r7, #20]
 80131d2:	e002      	b.n	80131da <get_ldnumber+0x24>
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	3301      	adds	r3, #1
 80131d8:	617b      	str	r3, [r7, #20]
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	2b1f      	cmp	r3, #31
 80131e0:	d903      	bls.n	80131ea <get_ldnumber+0x34>
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	2b3a      	cmp	r3, #58	; 0x3a
 80131e8:	d1f4      	bne.n	80131d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	2b3a      	cmp	r3, #58	; 0x3a
 80131f0:	d11c      	bne.n	801322c <get_ldnumber+0x76>
			tp = *path;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	1c5a      	adds	r2, r3, #1
 80131fc:	60fa      	str	r2, [r7, #12]
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	3b30      	subs	r3, #48	; 0x30
 8013202:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	2b09      	cmp	r3, #9
 8013208:	d80e      	bhi.n	8013228 <get_ldnumber+0x72>
 801320a:	68fa      	ldr	r2, [r7, #12]
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	429a      	cmp	r2, r3
 8013210:	d10a      	bne.n	8013228 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d107      	bne.n	8013228 <get_ldnumber+0x72>
					vol = (int)i;
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	3301      	adds	r3, #1
 8013220:	617b      	str	r3, [r7, #20]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	697a      	ldr	r2, [r7, #20]
 8013226:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	e002      	b.n	8013232 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801322c:	2300      	movs	r3, #0
 801322e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013230:	693b      	ldr	r3, [r7, #16]
}
 8013232:	4618      	mov	r0, r3
 8013234:	371c      	adds	r7, #28
 8013236:	46bd      	mov	sp, r7
 8013238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323c:	4770      	bx	lr
	...

08013240 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2200      	movs	r2, #0
 801324e:	70da      	strb	r2, [r3, #3]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f04f 32ff 	mov.w	r2, #4294967295
 8013256:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013258:	6839      	ldr	r1, [r7, #0]
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7fe fb9c 	bl	8011998 <move_window>
 8013260:	4603      	mov	r3, r0
 8013262:	2b00      	cmp	r3, #0
 8013264:	d001      	beq.n	801326a <check_fs+0x2a>
 8013266:	2304      	movs	r3, #4
 8013268:	e038      	b.n	80132dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	3334      	adds	r3, #52	; 0x34
 801326e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013272:	4618      	mov	r0, r3
 8013274:	f7fe f8e0 	bl	8011438 <ld_word>
 8013278:	4603      	mov	r3, r0
 801327a:	461a      	mov	r2, r3
 801327c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013280:	429a      	cmp	r2, r3
 8013282:	d001      	beq.n	8013288 <check_fs+0x48>
 8013284:	2303      	movs	r3, #3
 8013286:	e029      	b.n	80132dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801328e:	2be9      	cmp	r3, #233	; 0xe9
 8013290:	d009      	beq.n	80132a6 <check_fs+0x66>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013298:	2beb      	cmp	r3, #235	; 0xeb
 801329a:	d11e      	bne.n	80132da <check_fs+0x9a>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80132a2:	2b90      	cmp	r3, #144	; 0x90
 80132a4:	d119      	bne.n	80132da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	3334      	adds	r3, #52	; 0x34
 80132aa:	3336      	adds	r3, #54	; 0x36
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7fe f8db 	bl	8011468 <ld_dword>
 80132b2:	4603      	mov	r3, r0
 80132b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80132b8:	4a0a      	ldr	r2, [pc, #40]	; (80132e4 <check_fs+0xa4>)
 80132ba:	4293      	cmp	r3, r2
 80132bc:	d101      	bne.n	80132c2 <check_fs+0x82>
 80132be:	2300      	movs	r3, #0
 80132c0:	e00c      	b.n	80132dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	3334      	adds	r3, #52	; 0x34
 80132c6:	3352      	adds	r3, #82	; 0x52
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7fe f8cd 	bl	8011468 <ld_dword>
 80132ce:	4603      	mov	r3, r0
 80132d0:	4a05      	ldr	r2, [pc, #20]	; (80132e8 <check_fs+0xa8>)
 80132d2:	4293      	cmp	r3, r2
 80132d4:	d101      	bne.n	80132da <check_fs+0x9a>
 80132d6:	2300      	movs	r3, #0
 80132d8:	e000      	b.n	80132dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80132da:	2302      	movs	r3, #2
}
 80132dc:	4618      	mov	r0, r3
 80132de:	3708      	adds	r7, #8
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}
 80132e4:	00544146 	.word	0x00544146
 80132e8:	33544146 	.word	0x33544146

080132ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b096      	sub	sp, #88	; 0x58
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	4613      	mov	r3, r2
 80132f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	2200      	movs	r2, #0
 80132fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013300:	68f8      	ldr	r0, [r7, #12]
 8013302:	f7ff ff58 	bl	80131b6 <get_ldnumber>
 8013306:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801330a:	2b00      	cmp	r3, #0
 801330c:	da01      	bge.n	8013312 <find_volume+0x26>
 801330e:	230b      	movs	r3, #11
 8013310:	e22d      	b.n	801376e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013312:	4aa1      	ldr	r2, [pc, #644]	; (8013598 <find_volume+0x2ac>)
 8013314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801331a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331e:	2b00      	cmp	r3, #0
 8013320:	d101      	bne.n	8013326 <find_volume+0x3a>
 8013322:	230c      	movs	r3, #12
 8013324:	e223      	b.n	801376e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801332a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801332c:	79fb      	ldrb	r3, [r7, #7]
 801332e:	f023 0301 	bic.w	r3, r3, #1
 8013332:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d01a      	beq.n	8013372 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801333e:	785b      	ldrb	r3, [r3, #1]
 8013340:	4618      	mov	r0, r3
 8013342:	f7fd ffdb 	bl	80112fc <disk_status>
 8013346:	4603      	mov	r3, r0
 8013348:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801334c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013350:	f003 0301 	and.w	r3, r3, #1
 8013354:	2b00      	cmp	r3, #0
 8013356:	d10c      	bne.n	8013372 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013358:	79fb      	ldrb	r3, [r7, #7]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d007      	beq.n	801336e <find_volume+0x82>
 801335e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013362:	f003 0304 	and.w	r3, r3, #4
 8013366:	2b00      	cmp	r3, #0
 8013368:	d001      	beq.n	801336e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801336a:	230a      	movs	r3, #10
 801336c:	e1ff      	b.n	801376e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801336e:	2300      	movs	r3, #0
 8013370:	e1fd      	b.n	801376e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013374:	2200      	movs	r2, #0
 8013376:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801337a:	b2da      	uxtb	r2, r3
 801337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801337e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013382:	785b      	ldrb	r3, [r3, #1]
 8013384:	4618      	mov	r0, r3
 8013386:	f7fd ffd3 	bl	8011330 <disk_initialize>
 801338a:	4603      	mov	r3, r0
 801338c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013394:	f003 0301 	and.w	r3, r3, #1
 8013398:	2b00      	cmp	r3, #0
 801339a:	d001      	beq.n	80133a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801339c:	2303      	movs	r3, #3
 801339e:	e1e6      	b.n	801376e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80133a0:	79fb      	ldrb	r3, [r7, #7]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d007      	beq.n	80133b6 <find_volume+0xca>
 80133a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80133aa:	f003 0304 	and.w	r3, r3, #4
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d001      	beq.n	80133b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80133b2:	230a      	movs	r3, #10
 80133b4:	e1db      	b.n	801376e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80133b6:	2300      	movs	r3, #0
 80133b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80133ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80133bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80133be:	f7ff ff3f 	bl	8013240 <check_fs>
 80133c2:	4603      	mov	r3, r0
 80133c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80133c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	d149      	bne.n	8013464 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80133d0:	2300      	movs	r3, #0
 80133d2:	643b      	str	r3, [r7, #64]	; 0x40
 80133d4:	e01e      	b.n	8013414 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80133d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80133dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133de:	011b      	lsls	r3, r3, #4
 80133e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80133e4:	4413      	add	r3, r2
 80133e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80133e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ea:	3304      	adds	r3, #4
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d006      	beq.n	8013400 <find_volume+0x114>
 80133f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f4:	3308      	adds	r3, #8
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7fe f836 	bl	8011468 <ld_dword>
 80133fc:	4602      	mov	r2, r0
 80133fe:	e000      	b.n	8013402 <find_volume+0x116>
 8013400:	2200      	movs	r2, #0
 8013402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013404:	009b      	lsls	r3, r3, #2
 8013406:	3358      	adds	r3, #88	; 0x58
 8013408:	443b      	add	r3, r7
 801340a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801340e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013410:	3301      	adds	r3, #1
 8013412:	643b      	str	r3, [r7, #64]	; 0x40
 8013414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013416:	2b03      	cmp	r3, #3
 8013418:	d9dd      	bls.n	80133d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801341a:	2300      	movs	r3, #0
 801341c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801341e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013420:	2b00      	cmp	r3, #0
 8013422:	d002      	beq.n	801342a <find_volume+0x13e>
 8013424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013426:	3b01      	subs	r3, #1
 8013428:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801342a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	3358      	adds	r3, #88	; 0x58
 8013430:	443b      	add	r3, r7
 8013432:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013436:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801343a:	2b00      	cmp	r3, #0
 801343c:	d005      	beq.n	801344a <find_volume+0x15e>
 801343e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013442:	f7ff fefd 	bl	8013240 <check_fs>
 8013446:	4603      	mov	r3, r0
 8013448:	e000      	b.n	801344c <find_volume+0x160>
 801344a:	2303      	movs	r3, #3
 801344c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013454:	2b01      	cmp	r3, #1
 8013456:	d905      	bls.n	8013464 <find_volume+0x178>
 8013458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801345a:	3301      	adds	r3, #1
 801345c:	643b      	str	r3, [r7, #64]	; 0x40
 801345e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013460:	2b03      	cmp	r3, #3
 8013462:	d9e2      	bls.n	801342a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013468:	2b04      	cmp	r3, #4
 801346a:	d101      	bne.n	8013470 <find_volume+0x184>
 801346c:	2301      	movs	r3, #1
 801346e:	e17e      	b.n	801376e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013474:	2b01      	cmp	r3, #1
 8013476:	d901      	bls.n	801347c <find_volume+0x190>
 8013478:	230d      	movs	r3, #13
 801347a:	e178      	b.n	801376e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801347e:	3334      	adds	r3, #52	; 0x34
 8013480:	330b      	adds	r3, #11
 8013482:	4618      	mov	r0, r3
 8013484:	f7fd ffd8 	bl	8011438 <ld_word>
 8013488:	4603      	mov	r3, r0
 801348a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801348e:	d001      	beq.n	8013494 <find_volume+0x1a8>
 8013490:	230d      	movs	r3, #13
 8013492:	e16c      	b.n	801376e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013496:	3334      	adds	r3, #52	; 0x34
 8013498:	3316      	adds	r3, #22
 801349a:	4618      	mov	r0, r3
 801349c:	f7fd ffcc 	bl	8011438 <ld_word>
 80134a0:	4603      	mov	r3, r0
 80134a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80134a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d106      	bne.n	80134b8 <find_volume+0x1cc>
 80134aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ac:	3334      	adds	r3, #52	; 0x34
 80134ae:	3324      	adds	r3, #36	; 0x24
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7fd ffd9 	bl	8011468 <ld_dword>
 80134b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80134b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80134bc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80134be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80134c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80134c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ca:	789b      	ldrb	r3, [r3, #2]
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	d005      	beq.n	80134dc <find_volume+0x1f0>
 80134d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134d2:	789b      	ldrb	r3, [r3, #2]
 80134d4:	2b02      	cmp	r3, #2
 80134d6:	d001      	beq.n	80134dc <find_volume+0x1f0>
 80134d8:	230d      	movs	r3, #13
 80134da:	e148      	b.n	801376e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80134dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134de:	789b      	ldrb	r3, [r3, #2]
 80134e0:	461a      	mov	r2, r3
 80134e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134e4:	fb02 f303 	mul.w	r3, r2, r3
 80134e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80134ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80134f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f8:	895b      	ldrh	r3, [r3, #10]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d008      	beq.n	8013510 <find_volume+0x224>
 80134fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013500:	895b      	ldrh	r3, [r3, #10]
 8013502:	461a      	mov	r2, r3
 8013504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013506:	895b      	ldrh	r3, [r3, #10]
 8013508:	3b01      	subs	r3, #1
 801350a:	4013      	ands	r3, r2
 801350c:	2b00      	cmp	r3, #0
 801350e:	d001      	beq.n	8013514 <find_volume+0x228>
 8013510:	230d      	movs	r3, #13
 8013512:	e12c      	b.n	801376e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013516:	3334      	adds	r3, #52	; 0x34
 8013518:	3311      	adds	r3, #17
 801351a:	4618      	mov	r0, r3
 801351c:	f7fd ff8c 	bl	8011438 <ld_word>
 8013520:	4603      	mov	r3, r0
 8013522:	461a      	mov	r2, r3
 8013524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013526:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801352a:	891b      	ldrh	r3, [r3, #8]
 801352c:	f003 030f 	and.w	r3, r3, #15
 8013530:	b29b      	uxth	r3, r3
 8013532:	2b00      	cmp	r3, #0
 8013534:	d001      	beq.n	801353a <find_volume+0x24e>
 8013536:	230d      	movs	r3, #13
 8013538:	e119      	b.n	801376e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801353c:	3334      	adds	r3, #52	; 0x34
 801353e:	3313      	adds	r3, #19
 8013540:	4618      	mov	r0, r3
 8013542:	f7fd ff79 	bl	8011438 <ld_word>
 8013546:	4603      	mov	r3, r0
 8013548:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801354a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801354c:	2b00      	cmp	r3, #0
 801354e:	d106      	bne.n	801355e <find_volume+0x272>
 8013550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013552:	3334      	adds	r3, #52	; 0x34
 8013554:	3320      	adds	r3, #32
 8013556:	4618      	mov	r0, r3
 8013558:	f7fd ff86 	bl	8011468 <ld_dword>
 801355c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013560:	3334      	adds	r3, #52	; 0x34
 8013562:	330e      	adds	r3, #14
 8013564:	4618      	mov	r0, r3
 8013566:	f7fd ff67 	bl	8011438 <ld_word>
 801356a:	4603      	mov	r3, r0
 801356c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801356e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013570:	2b00      	cmp	r3, #0
 8013572:	d101      	bne.n	8013578 <find_volume+0x28c>
 8013574:	230d      	movs	r3, #13
 8013576:	e0fa      	b.n	801376e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013578:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801357c:	4413      	add	r3, r2
 801357e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013580:	8912      	ldrh	r2, [r2, #8]
 8013582:	0912      	lsrs	r2, r2, #4
 8013584:	b292      	uxth	r2, r2
 8013586:	4413      	add	r3, r2
 8013588:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801358a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801358e:	429a      	cmp	r2, r3
 8013590:	d204      	bcs.n	801359c <find_volume+0x2b0>
 8013592:	230d      	movs	r3, #13
 8013594:	e0eb      	b.n	801376e <find_volume+0x482>
 8013596:	bf00      	nop
 8013598:	24000430 	.word	0x24000430
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801359c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a0:	1ad3      	subs	r3, r2, r3
 80135a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135a4:	8952      	ldrh	r2, [r2, #10]
 80135a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80135aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80135ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d101      	bne.n	80135b6 <find_volume+0x2ca>
 80135b2:	230d      	movs	r3, #13
 80135b4:	e0db      	b.n	801376e <find_volume+0x482>
		fmt = FS_FAT32;
 80135b6:	2303      	movs	r3, #3
 80135b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80135bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d802      	bhi.n	80135cc <find_volume+0x2e0>
 80135c6:	2302      	movs	r3, #2
 80135c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80135cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 80135d2:	4293      	cmp	r3, r2
 80135d4:	d802      	bhi.n	80135dc <find_volume+0x2f0>
 80135d6:	2301      	movs	r3, #1
 80135d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80135dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135de:	1c9a      	adds	r2, r3, #2
 80135e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80135e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80135e8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80135ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80135ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ee:	441a      	add	r2, r3
 80135f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80135f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80135f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f8:	441a      	add	r2, r3
 80135fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80135fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013602:	2b03      	cmp	r3, #3
 8013604:	d11e      	bne.n	8013644 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013608:	3334      	adds	r3, #52	; 0x34
 801360a:	332a      	adds	r3, #42	; 0x2a
 801360c:	4618      	mov	r0, r3
 801360e:	f7fd ff13 	bl	8011438 <ld_word>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d001      	beq.n	801361c <find_volume+0x330>
 8013618:	230d      	movs	r3, #13
 801361a:	e0a8      	b.n	801376e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801361c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801361e:	891b      	ldrh	r3, [r3, #8]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d001      	beq.n	8013628 <find_volume+0x33c>
 8013624:	230d      	movs	r3, #13
 8013626:	e0a2      	b.n	801376e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362a:	3334      	adds	r3, #52	; 0x34
 801362c:	332c      	adds	r3, #44	; 0x2c
 801362e:	4618      	mov	r0, r3
 8013630:	f7fd ff1a 	bl	8011468 <ld_dword>
 8013634:	4602      	mov	r2, r0
 8013636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013638:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801363c:	699b      	ldr	r3, [r3, #24]
 801363e:	009b      	lsls	r3, r3, #2
 8013640:	647b      	str	r3, [r7, #68]	; 0x44
 8013642:	e01f      	b.n	8013684 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013646:	891b      	ldrh	r3, [r3, #8]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d101      	bne.n	8013650 <find_volume+0x364>
 801364c:	230d      	movs	r3, #13
 801364e:	e08e      	b.n	801376e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013656:	441a      	add	r2, r3
 8013658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801365a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801365c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013660:	2b02      	cmp	r3, #2
 8013662:	d103      	bne.n	801366c <find_volume+0x380>
 8013664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013666:	699b      	ldr	r3, [r3, #24]
 8013668:	005b      	lsls	r3, r3, #1
 801366a:	e00a      	b.n	8013682 <find_volume+0x396>
 801366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801366e:	699a      	ldr	r2, [r3, #24]
 8013670:	4613      	mov	r3, r2
 8013672:	005b      	lsls	r3, r3, #1
 8013674:	4413      	add	r3, r2
 8013676:	085a      	lsrs	r2, r3, #1
 8013678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801367a:	699b      	ldr	r3, [r3, #24]
 801367c:	f003 0301 	and.w	r3, r3, #1
 8013680:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013682:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013686:	69da      	ldr	r2, [r3, #28]
 8013688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801368a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801368e:	0a5b      	lsrs	r3, r3, #9
 8013690:	429a      	cmp	r2, r3
 8013692:	d201      	bcs.n	8013698 <find_volume+0x3ac>
 8013694:	230d      	movs	r3, #13
 8013696:	e06a      	b.n	801376e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801369a:	f04f 32ff 	mov.w	r2, #4294967295
 801369e:	615a      	str	r2, [r3, #20]
 80136a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136a2:	695a      	ldr	r2, [r3, #20]
 80136a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136a6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80136a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136aa:	2280      	movs	r2, #128	; 0x80
 80136ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80136ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80136b2:	2b03      	cmp	r3, #3
 80136b4:	d149      	bne.n	801374a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80136b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b8:	3334      	adds	r3, #52	; 0x34
 80136ba:	3330      	adds	r3, #48	; 0x30
 80136bc:	4618      	mov	r0, r3
 80136be:	f7fd febb 	bl	8011438 <ld_word>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b01      	cmp	r3, #1
 80136c6:	d140      	bne.n	801374a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80136c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136ca:	3301      	adds	r3, #1
 80136cc:	4619      	mov	r1, r3
 80136ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80136d0:	f7fe f962 	bl	8011998 <move_window>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d137      	bne.n	801374a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80136da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136dc:	2200      	movs	r2, #0
 80136de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80136e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136e2:	3334      	adds	r3, #52	; 0x34
 80136e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7fd fea5 	bl	8011438 <ld_word>
 80136ee:	4603      	mov	r3, r0
 80136f0:	461a      	mov	r2, r3
 80136f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d127      	bne.n	801374a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80136fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136fc:	3334      	adds	r3, #52	; 0x34
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fd feb2 	bl	8011468 <ld_dword>
 8013704:	4603      	mov	r3, r0
 8013706:	4a1c      	ldr	r2, [pc, #112]	; (8013778 <find_volume+0x48c>)
 8013708:	4293      	cmp	r3, r2
 801370a:	d11e      	bne.n	801374a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801370e:	3334      	adds	r3, #52	; 0x34
 8013710:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013714:	4618      	mov	r0, r3
 8013716:	f7fd fea7 	bl	8011468 <ld_dword>
 801371a:	4603      	mov	r3, r0
 801371c:	4a17      	ldr	r2, [pc, #92]	; (801377c <find_volume+0x490>)
 801371e:	4293      	cmp	r3, r2
 8013720:	d113      	bne.n	801374a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013724:	3334      	adds	r3, #52	; 0x34
 8013726:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801372a:	4618      	mov	r0, r3
 801372c:	f7fd fe9c 	bl	8011468 <ld_dword>
 8013730:	4602      	mov	r2, r0
 8013732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013734:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013738:	3334      	adds	r3, #52	; 0x34
 801373a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801373e:	4618      	mov	r0, r3
 8013740:	f7fd fe92 	bl	8011468 <ld_dword>
 8013744:	4602      	mov	r2, r0
 8013746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013748:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801374c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013750:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013752:	4b0b      	ldr	r3, [pc, #44]	; (8013780 <find_volume+0x494>)
 8013754:	881b      	ldrh	r3, [r3, #0]
 8013756:	3301      	adds	r3, #1
 8013758:	b29a      	uxth	r2, r3
 801375a:	4b09      	ldr	r3, [pc, #36]	; (8013780 <find_volume+0x494>)
 801375c:	801a      	strh	r2, [r3, #0]
 801375e:	4b08      	ldr	r3, [pc, #32]	; (8013780 <find_volume+0x494>)
 8013760:	881a      	ldrh	r2, [r3, #0]
 8013762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013764:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013766:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013768:	f7fe f8ae 	bl	80118c8 <clear_lock>
#endif
	return FR_OK;
 801376c:	2300      	movs	r3, #0
}
 801376e:	4618      	mov	r0, r3
 8013770:	3758      	adds	r7, #88	; 0x58
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}
 8013776:	bf00      	nop
 8013778:	41615252 	.word	0x41615252
 801377c:	61417272 	.word	0x61417272
 8013780:	24000434 	.word	0x24000434

08013784 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801378e:	2309      	movs	r3, #9
 8013790:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d01c      	beq.n	80137d2 <validate+0x4e>
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d018      	beq.n	80137d2 <validate+0x4e>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d013      	beq.n	80137d2 <validate+0x4e>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	889a      	ldrh	r2, [r3, #4]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	88db      	ldrh	r3, [r3, #6]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d10c      	bne.n	80137d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	785b      	ldrb	r3, [r3, #1]
 80137be:	4618      	mov	r0, r3
 80137c0:	f7fd fd9c 	bl	80112fc <disk_status>
 80137c4:	4603      	mov	r3, r0
 80137c6:	f003 0301 	and.w	r3, r3, #1
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d101      	bne.n	80137d2 <validate+0x4e>
			res = FR_OK;
 80137ce:	2300      	movs	r3, #0
 80137d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80137d2:	7bfb      	ldrb	r3, [r7, #15]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d102      	bne.n	80137de <validate+0x5a>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	e000      	b.n	80137e0 <validate+0x5c>
 80137de:	2300      	movs	r3, #0
 80137e0:	683a      	ldr	r2, [r7, #0]
 80137e2:	6013      	str	r3, [r2, #0]
	return res;
 80137e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3710      	adds	r7, #16
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
	...

080137f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b088      	sub	sp, #32
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	4613      	mov	r3, r2
 80137fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013802:	f107 0310 	add.w	r3, r7, #16
 8013806:	4618      	mov	r0, r3
 8013808:	f7ff fcd5 	bl	80131b6 <get_ldnumber>
 801380c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801380e:	69fb      	ldr	r3, [r7, #28]
 8013810:	2b00      	cmp	r3, #0
 8013812:	da01      	bge.n	8013818 <f_mount+0x28>
 8013814:	230b      	movs	r3, #11
 8013816:	e02b      	b.n	8013870 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013818:	4a17      	ldr	r2, [pc, #92]	; (8013878 <f_mount+0x88>)
 801381a:	69fb      	ldr	r3, [r7, #28]
 801381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013820:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013822:	69bb      	ldr	r3, [r7, #24]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d005      	beq.n	8013834 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013828:	69b8      	ldr	r0, [r7, #24]
 801382a:	f7fe f84d 	bl	80118c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801382e:	69bb      	ldr	r3, [r7, #24]
 8013830:	2200      	movs	r2, #0
 8013832:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d002      	beq.n	8013840 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2200      	movs	r2, #0
 801383e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013840:	68fa      	ldr	r2, [r7, #12]
 8013842:	490d      	ldr	r1, [pc, #52]	; (8013878 <f_mount+0x88>)
 8013844:	69fb      	ldr	r3, [r7, #28]
 8013846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d002      	beq.n	8013856 <f_mount+0x66>
 8013850:	79fb      	ldrb	r3, [r7, #7]
 8013852:	2b01      	cmp	r3, #1
 8013854:	d001      	beq.n	801385a <f_mount+0x6a>
 8013856:	2300      	movs	r3, #0
 8013858:	e00a      	b.n	8013870 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801385a:	f107 010c 	add.w	r1, r7, #12
 801385e:	f107 0308 	add.w	r3, r7, #8
 8013862:	2200      	movs	r2, #0
 8013864:	4618      	mov	r0, r3
 8013866:	f7ff fd41 	bl	80132ec <find_volume>
 801386a:	4603      	mov	r3, r0
 801386c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801386e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013870:	4618      	mov	r0, r3
 8013872:	3720      	adds	r7, #32
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}
 8013878:	24000430 	.word	0x24000430

0801387c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8013882:	af00      	add	r7, sp, #0
 8013884:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013888:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801388c:	6018      	str	r0, [r3, #0]
 801388e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013892:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8013896:	6019      	str	r1, [r3, #0]
 8013898:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801389c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80138a0:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80138a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80138a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d101      	bne.n	80138b4 <f_open+0x38>
 80138b0:	2309      	movs	r3, #9
 80138b2:	e295      	b.n	8013de0 <f_open+0x564>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80138b4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80138b8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80138bc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80138c0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80138c4:	7812      	ldrb	r2, [r2, #0]
 80138c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80138ca:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80138cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80138d0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80138d4:	781a      	ldrb	r2, [r3, #0]
 80138d6:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80138da:	f107 0308 	add.w	r3, r7, #8
 80138de:	4618      	mov	r0, r3
 80138e0:	f7ff fd04 	bl	80132ec <find_volume>
 80138e4:	4603      	mov	r3, r0
 80138e6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 80138ea:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	f040 8269 	bne.w	8013dc6 <f_open+0x54a>
		dj.obj.fs = fs;
 80138f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80138f8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80138fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013900:	f107 0214 	add.w	r2, r7, #20
 8013904:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8013906:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801390a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013914:	4611      	mov	r1, r2
 8013916:	4618      	mov	r0, r3
 8013918:	f7ff fbdc 	bl	80130d4 <follow_path>
 801391c:	4603      	mov	r3, r0
 801391e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013922:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013926:	2b00      	cmp	r3, #0
 8013928:	d11e      	bne.n	8013968 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801392a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 801392e:	b25b      	sxtb	r3, r3
 8013930:	2b00      	cmp	r3, #0
 8013932:	da03      	bge.n	801393c <f_open+0xc0>
				res = FR_INVALID_NAME;
 8013934:	2306      	movs	r3, #6
 8013936:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801393a:	e015      	b.n	8013968 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801393c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013940:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	f023 0301 	bic.w	r3, r3, #1
 801394a:	2b00      	cmp	r3, #0
 801394c:	bf14      	ite	ne
 801394e:	2301      	movne	r3, #1
 8013950:	2300      	moveq	r3, #0
 8013952:	b2db      	uxtb	r3, r3
 8013954:	461a      	mov	r2, r3
 8013956:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801395a:	4611      	mov	r1, r2
 801395c:	4618      	mov	r0, r3
 801395e:	f7fd fe6b 	bl	8011638 <chk_lock>
 8013962:	4603      	mov	r3, r0
 8013964:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013968:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801396c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	f003 031c 	and.w	r3, r3, #28
 8013976:	2b00      	cmp	r3, #0
 8013978:	f000 80a7 	beq.w	8013aca <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 801397c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013980:	2b00      	cmp	r3, #0
 8013982:	d01f      	beq.n	80139c4 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013984:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013988:	2b04      	cmp	r3, #4
 801398a:	d10e      	bne.n	80139aa <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801398c:	f7fd feb0 	bl	80116f0 <enq_lock>
 8013990:	4603      	mov	r3, r0
 8013992:	2b00      	cmp	r3, #0
 8013994:	d006      	beq.n	80139a4 <f_open+0x128>
 8013996:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801399a:	4618      	mov	r0, r3
 801399c:	f7ff f8a8 	bl	8012af0 <dir_register>
 80139a0:	4603      	mov	r3, r0
 80139a2:	e000      	b.n	80139a6 <f_open+0x12a>
 80139a4:	2312      	movs	r3, #18
 80139a6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80139aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80139ae:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80139b2:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80139b6:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80139ba:	7812      	ldrb	r2, [r2, #0]
 80139bc:	f042 0208 	orr.w	r2, r2, #8
 80139c0:	701a      	strb	r2, [r3, #0]
 80139c2:	e015      	b.n	80139f0 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80139c4:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80139c8:	f003 0311 	and.w	r3, r3, #17
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d003      	beq.n	80139d8 <f_open+0x15c>
					res = FR_DENIED;
 80139d0:	2307      	movs	r3, #7
 80139d2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80139d6:	e00b      	b.n	80139f0 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80139d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80139dc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	f003 0304 	and.w	r3, r3, #4
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d002      	beq.n	80139f0 <f_open+0x174>
 80139ea:	2308      	movs	r3, #8
 80139ec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80139f0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	f040 8088 	bne.w	8013b0a <f_open+0x28e>
 80139fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80139fe:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013a02:	781b      	ldrb	r3, [r3, #0]
 8013a04:	f003 0308 	and.w	r3, r3, #8
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d07e      	beq.n	8013b0a <f_open+0x28e>
				dw = GET_FATTIME();
 8013a0c:	f7f8 ff34 	bl	800c878 <get_fattime>
 8013a10:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013a14:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013a18:	330e      	adds	r3, #14
 8013a1a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7fd fd60 	bl	80114e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013a24:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013a28:	3316      	adds	r3, #22
 8013a2a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7fd fd58 	bl	80114e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013a34:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013a38:	330b      	adds	r3, #11
 8013a3a:	2220      	movs	r2, #32
 8013a3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013a3e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013a42:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8013a46:	4611      	mov	r1, r2
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7fe fcaa 	bl	80123a2 <ld_clust>
 8013a4e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013a52:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013a56:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7fe fcbf 	bl	80123e0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013a62:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013a66:	331c      	adds	r3, #28
 8013a68:	2100      	movs	r1, #0
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7fd fd3a 	bl	80114e4 <st_dword>
					fs->wflag = 1;
 8013a70:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013a74:	2201      	movs	r2, #1
 8013a76:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013a78:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d044      	beq.n	8013b0a <f_open+0x28e>
						dw = fs->winsect;
 8013a80:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a86:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8013a8a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013a8e:	2200      	movs	r2, #0
 8013a90:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7fe f9cc 	bl	8011e32 <remove_chain>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8013aa0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d130      	bne.n	8013b0a <f_open+0x28e>
							res = move_window(fs, dw);
 8013aa8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013aac:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7fd ff71 	bl	8011998 <move_window>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013abc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013ac0:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8013ac4:	3a01      	subs	r2, #1
 8013ac6:	611a      	str	r2, [r3, #16]
 8013ac8:	e01f      	b.n	8013b0a <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013aca:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d11b      	bne.n	8013b0a <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013ad2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8013ad6:	f003 0310 	and.w	r3, r3, #16
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d003      	beq.n	8013ae6 <f_open+0x26a>
					res = FR_NO_FILE;
 8013ade:	2304      	movs	r3, #4
 8013ae0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8013ae4:	e011      	b.n	8013b0a <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013ae6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013aea:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	f003 0302 	and.w	r3, r3, #2
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d008      	beq.n	8013b0a <f_open+0x28e>
 8013af8:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8013afc:	f003 0301 	and.w	r3, r3, #1
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d002      	beq.n	8013b0a <f_open+0x28e>
						res = FR_DENIED;
 8013b04:	2307      	movs	r3, #7
 8013b06:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8013b0a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d14a      	bne.n	8013ba8 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013b12:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013b16:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013b1a:	781b      	ldrb	r3, [r3, #0]
 8013b1c:	f003 0308 	and.w	r3, r3, #8
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d00b      	beq.n	8013b3c <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8013b24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013b28:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013b2c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8013b30:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8013b34:	7812      	ldrb	r2, [r2, #0]
 8013b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013b3a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013b3c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b42:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013b46:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013b4e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8013b52:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013b56:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013b5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013b62:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	f023 0301 	bic.w	r3, r3, #1
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	bf14      	ite	ne
 8013b70:	2301      	movne	r3, #1
 8013b72:	2300      	moveq	r3, #0
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	461a      	mov	r2, r3
 8013b78:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013b7c:	4611      	mov	r1, r2
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7fd fdd8 	bl	8011734 <inc_lock>
 8013b84:	4602      	mov	r2, r0
 8013b86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013b8a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013b92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013b96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	691b      	ldr	r3, [r3, #16]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d102      	bne.n	8013ba8 <f_open+0x32c>
 8013ba2:	2302      	movs	r3, #2
 8013ba4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013ba8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f040 810a 	bne.w	8013dc6 <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013bb2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013bb6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8013bba:	4611      	mov	r1, r2
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7fe fbf0 	bl	80123a2 <ld_clust>
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013bc8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013bd0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013bd4:	331c      	adds	r3, #28
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7fd fc46 	bl	8011468 <ld_dword>
 8013bdc:	4602      	mov	r2, r0
 8013bde:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013be2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013bea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013bee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013bf8:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8013bfc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013c00:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013c08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013c0c:	88da      	ldrh	r2, [r3, #6]
 8013c0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013c12:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013c1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013c1e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8013c28:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8013c2c:	7812      	ldrb	r2, [r2, #0]
 8013c2e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013c30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013c34:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013c3e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013c42:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013c4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013c50:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	2200      	movs	r2, #0
 8013c58:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013c5a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013c5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	3330      	adds	r3, #48	; 0x30
 8013c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c6a:	2100      	movs	r1, #0
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7fd fc86 	bl	801157e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013c72:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013c76:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	f003 0320 	and.w	r3, r3, #32
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	f000 80a0 	beq.w	8013dc6 <f_open+0x54a>
 8013c86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013c8a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	68db      	ldr	r3, [r3, #12]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	f000 8097 	beq.w	8013dc6 <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013c98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013c9c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	68da      	ldr	r2, [r3, #12]
 8013ca4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013ca8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013cb0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013cb4:	895b      	ldrh	r3, [r3, #10]
 8013cb6:	025b      	lsls	r3, r3, #9
 8013cb8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013cbc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013cc0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	689b      	ldr	r3, [r3, #8]
 8013cc8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013ccc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013cd0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8013cdc:	e021      	b.n	8013d22 <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 8013cde:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013ce2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7fd ff0e 	bl	8011b0e <get_fat>
 8013cf2:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8013cf6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8013cfa:	2b01      	cmp	r3, #1
 8013cfc:	d802      	bhi.n	8013d04 <f_open+0x488>
 8013cfe:	2302      	movs	r3, #2
 8013d00:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013d04:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8013d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d0c:	d102      	bne.n	8013d14 <f_open+0x498>
 8013d0e:	2301      	movs	r3, #1
 8013d10:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013d14:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8013d18:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8013d1c:	1ad3      	subs	r3, r2, r3
 8013d1e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8013d22:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d105      	bne.n	8013d36 <f_open+0x4ba>
 8013d2a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8013d2e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d8d3      	bhi.n	8013cde <f_open+0x462>
				}
				fp->clust = clst;
 8013d36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d3a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8013d44:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013d46:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d13b      	bne.n	8013dc6 <f_open+0x54a>
 8013d4e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8013d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d035      	beq.n	8013dc6 <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013d5a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013d5e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7fd feb4 	bl	8011ad0 <clust2sect>
 8013d68:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8013d6c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d103      	bne.n	8013d7c <f_open+0x500>
						res = FR_INT_ERR;
 8013d74:	2302      	movs	r3, #2
 8013d76:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8013d7a:	e024      	b.n	8013dc6 <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013d7c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8013d80:	0a5a      	lsrs	r2, r3, #9
 8013d82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8013d86:	441a      	add	r2, r3
 8013d88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d8c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013d94:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013d98:	7858      	ldrb	r0, [r3, #1]
 8013d9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d9e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013da8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013dac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	6a1a      	ldr	r2, [r3, #32]
 8013db4:	2301      	movs	r3, #1
 8013db6:	f7fd fae1 	bl	801137c <disk_read>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d002      	beq.n	8013dc6 <f_open+0x54a>
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013dc6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d006      	beq.n	8013ddc <f_open+0x560>
 8013dce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013dd2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013ddc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}

08013dea <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013dea:	b580      	push	{r7, lr}
 8013dec:	b08e      	sub	sp, #56	; 0x38
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	60f8      	str	r0, [r7, #12]
 8013df2:	60b9      	str	r1, [r7, #8]
 8013df4:	607a      	str	r2, [r7, #4]
 8013df6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f107 0214 	add.w	r2, r7, #20
 8013e08:	4611      	mov	r1, r2
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7ff fcba 	bl	8013784 <validate>
 8013e10:	4603      	mov	r3, r0
 8013e12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013e16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d107      	bne.n	8013e2e <f_read+0x44>
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	7d5b      	ldrb	r3, [r3, #21]
 8013e22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d002      	beq.n	8013e34 <f_read+0x4a>
 8013e2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e32:	e115      	b.n	8014060 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	7d1b      	ldrb	r3, [r3, #20]
 8013e38:	f003 0301 	and.w	r3, r3, #1
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d101      	bne.n	8013e44 <f_read+0x5a>
 8013e40:	2307      	movs	r3, #7
 8013e42:	e10d      	b.n	8014060 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	68da      	ldr	r2, [r3, #12]
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	699b      	ldr	r3, [r3, #24]
 8013e4c:	1ad3      	subs	r3, r2, r3
 8013e4e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013e50:	687a      	ldr	r2, [r7, #4]
 8013e52:	6a3b      	ldr	r3, [r7, #32]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	f240 80fe 	bls.w	8014056 <f_read+0x26c>
 8013e5a:	6a3b      	ldr	r3, [r7, #32]
 8013e5c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013e5e:	e0fa      	b.n	8014056 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	699b      	ldr	r3, [r3, #24]
 8013e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	f040 80c6 	bne.w	8013ffa <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	699b      	ldr	r3, [r3, #24]
 8013e72:	0a5b      	lsrs	r3, r3, #9
 8013e74:	697a      	ldr	r2, [r7, #20]
 8013e76:	8952      	ldrh	r2, [r2, #10]
 8013e78:	3a01      	subs	r2, #1
 8013e7a:	4013      	ands	r3, r2
 8013e7c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013e7e:	69fb      	ldr	r3, [r7, #28]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d12f      	bne.n	8013ee4 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	699b      	ldr	r3, [r3, #24]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d103      	bne.n	8013e94 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	689b      	ldr	r3, [r3, #8]
 8013e90:	633b      	str	r3, [r7, #48]	; 0x30
 8013e92:	e013      	b.n	8013ebc <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d007      	beq.n	8013eac <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	699b      	ldr	r3, [r3, #24]
 8013ea0:	4619      	mov	r1, r3
 8013ea2:	68f8      	ldr	r0, [r7, #12]
 8013ea4:	f7fe f8c2 	bl	801202c <clmt_clust>
 8013ea8:	6338      	str	r0, [r7, #48]	; 0x30
 8013eaa:	e007      	b.n	8013ebc <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013eac:	68fa      	ldr	r2, [r7, #12]
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	69db      	ldr	r3, [r3, #28]
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	4610      	mov	r0, r2
 8013eb6:	f7fd fe2a 	bl	8011b0e <get_fat>
 8013eba:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ebe:	2b01      	cmp	r3, #1
 8013ec0:	d804      	bhi.n	8013ecc <f_read+0xe2>
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	2202      	movs	r2, #2
 8013ec6:	755a      	strb	r2, [r3, #21]
 8013ec8:	2302      	movs	r3, #2
 8013eca:	e0c9      	b.n	8014060 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ed2:	d104      	bne.n	8013ede <f_read+0xf4>
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	755a      	strb	r2, [r3, #21]
 8013eda:	2301      	movs	r3, #1
 8013edc:	e0c0      	b.n	8014060 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ee2:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013ee4:	697a      	ldr	r2, [r7, #20]
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	69db      	ldr	r3, [r3, #28]
 8013eea:	4619      	mov	r1, r3
 8013eec:	4610      	mov	r0, r2
 8013eee:	f7fd fdef 	bl	8011ad0 <clust2sect>
 8013ef2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013ef4:	69bb      	ldr	r3, [r7, #24]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d104      	bne.n	8013f04 <f_read+0x11a>
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	2202      	movs	r2, #2
 8013efe:	755a      	strb	r2, [r3, #21]
 8013f00:	2302      	movs	r3, #2
 8013f02:	e0ad      	b.n	8014060 <f_read+0x276>
			sect += csect;
 8013f04:	69ba      	ldr	r2, [r7, #24]
 8013f06:	69fb      	ldr	r3, [r7, #28]
 8013f08:	4413      	add	r3, r2
 8013f0a:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	0a5b      	lsrs	r3, r3, #9
 8013f10:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d039      	beq.n	8013f8c <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013f18:	69fa      	ldr	r2, [r7, #28]
 8013f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f1c:	4413      	add	r3, r2
 8013f1e:	697a      	ldr	r2, [r7, #20]
 8013f20:	8952      	ldrh	r2, [r2, #10]
 8013f22:	4293      	cmp	r3, r2
 8013f24:	d905      	bls.n	8013f32 <f_read+0x148>
					cc = fs->csize - csect;
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	895b      	ldrh	r3, [r3, #10]
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	69fb      	ldr	r3, [r7, #28]
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	7858      	ldrb	r0, [r3, #1]
 8013f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f38:	69ba      	ldr	r2, [r7, #24]
 8013f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f3c:	f7fd fa1e 	bl	801137c <disk_read>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d004      	beq.n	8013f50 <f_read+0x166>
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	2201      	movs	r2, #1
 8013f4a:	755a      	strb	r2, [r3, #21]
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	e087      	b.n	8014060 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	7d1b      	ldrb	r3, [r3, #20]
 8013f54:	b25b      	sxtb	r3, r3
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	da14      	bge.n	8013f84 <f_read+0x19a>
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	6a1a      	ldr	r2, [r3, #32]
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	1ad3      	subs	r3, r2, r3
 8013f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f64:	429a      	cmp	r2, r3
 8013f66:	d90d      	bls.n	8013f84 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	6a1a      	ldr	r2, [r3, #32]
 8013f6c:	69bb      	ldr	r3, [r7, #24]
 8013f6e:	1ad3      	subs	r3, r2, r3
 8013f70:	025b      	lsls	r3, r3, #9
 8013f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f74:	18d0      	adds	r0, r2, r3
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	3330      	adds	r3, #48	; 0x30
 8013f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f7e:	4619      	mov	r1, r3
 8013f80:	f7fd fadc 	bl	801153c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f86:	025b      	lsls	r3, r3, #9
 8013f88:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013f8a:	e050      	b.n	801402e <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	6a1b      	ldr	r3, [r3, #32]
 8013f90:	69ba      	ldr	r2, [r7, #24]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d02e      	beq.n	8013ff4 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	7d1b      	ldrb	r3, [r3, #20]
 8013f9a:	b25b      	sxtb	r3, r3
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	da18      	bge.n	8013fd2 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	7858      	ldrb	r0, [r3, #1]
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	6a1a      	ldr	r2, [r3, #32]
 8013fae:	2301      	movs	r3, #1
 8013fb0:	f7fd fa04 	bl	80113bc <disk_write>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d004      	beq.n	8013fc4 <f_read+0x1da>
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2201      	movs	r2, #1
 8013fbe:	755a      	strb	r2, [r3, #21]
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	e04d      	b.n	8014060 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	7d1b      	ldrb	r3, [r3, #20]
 8013fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fcc:	b2da      	uxtb	r2, r3
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	7858      	ldrb	r0, [r3, #1]
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fdc:	2301      	movs	r3, #1
 8013fde:	69ba      	ldr	r2, [r7, #24]
 8013fe0:	f7fd f9cc 	bl	801137c <disk_read>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d004      	beq.n	8013ff4 <f_read+0x20a>
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2201      	movs	r2, #1
 8013fee:	755a      	strb	r2, [r3, #21]
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	e035      	b.n	8014060 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	69ba      	ldr	r2, [r7, #24]
 8013ff8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	699b      	ldr	r3, [r3, #24]
 8013ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014002:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014006:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	429a      	cmp	r2, r3
 801400e:	d901      	bls.n	8014014 <f_read+0x22a>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	699b      	ldr	r3, [r3, #24]
 801401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014022:	4413      	add	r3, r2
 8014024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014026:	4619      	mov	r1, r3
 8014028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801402a:	f7fd fa87 	bl	801153c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014032:	4413      	add	r3, r2
 8014034:	627b      	str	r3, [r7, #36]	; 0x24
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	699a      	ldr	r2, [r3, #24]
 801403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801403c:	441a      	add	r2, r3
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	619a      	str	r2, [r3, #24]
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	681a      	ldr	r2, [r3, #0]
 8014046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014048:	441a      	add	r2, r3
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	601a      	str	r2, [r3, #0]
 801404e:	687a      	ldr	r2, [r7, #4]
 8014050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014052:	1ad3      	subs	r3, r2, r3
 8014054:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2b00      	cmp	r3, #0
 801405a:	f47f af01 	bne.w	8013e60 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801405e:	2300      	movs	r3, #0
}
 8014060:	4618      	mov	r0, r3
 8014062:	3738      	adds	r7, #56	; 0x38
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}

08014068 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b08c      	sub	sp, #48	; 0x30
 801406c:	af00      	add	r7, sp, #0
 801406e:	60f8      	str	r0, [r7, #12]
 8014070:	60b9      	str	r1, [r7, #8]
 8014072:	607a      	str	r2, [r7, #4]
 8014074:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	2200      	movs	r2, #0
 801407e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	f107 0210 	add.w	r2, r7, #16
 8014086:	4611      	mov	r1, r2
 8014088:	4618      	mov	r0, r3
 801408a:	f7ff fb7b 	bl	8013784 <validate>
 801408e:	4603      	mov	r3, r0
 8014090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014094:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014098:	2b00      	cmp	r3, #0
 801409a:	d107      	bne.n	80140ac <f_write+0x44>
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	7d5b      	ldrb	r3, [r3, #21]
 80140a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80140a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d002      	beq.n	80140b2 <f_write+0x4a>
 80140ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140b0:	e14b      	b.n	801434a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	7d1b      	ldrb	r3, [r3, #20]
 80140b6:	f003 0302 	and.w	r3, r3, #2
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d101      	bne.n	80140c2 <f_write+0x5a>
 80140be:	2307      	movs	r3, #7
 80140c0:	e143      	b.n	801434a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	699a      	ldr	r2, [r3, #24]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	441a      	add	r2, r3
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	699b      	ldr	r3, [r3, #24]
 80140ce:	429a      	cmp	r2, r3
 80140d0:	f080 812d 	bcs.w	801432e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	699b      	ldr	r3, [r3, #24]
 80140d8:	43db      	mvns	r3, r3
 80140da:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80140dc:	e127      	b.n	801432e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	699b      	ldr	r3, [r3, #24]
 80140e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	f040 80e3 	bne.w	80142b2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	699b      	ldr	r3, [r3, #24]
 80140f0:	0a5b      	lsrs	r3, r3, #9
 80140f2:	693a      	ldr	r2, [r7, #16]
 80140f4:	8952      	ldrh	r2, [r2, #10]
 80140f6:	3a01      	subs	r2, #1
 80140f8:	4013      	ands	r3, r2
 80140fa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80140fc:	69bb      	ldr	r3, [r7, #24]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d143      	bne.n	801418a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	699b      	ldr	r3, [r3, #24]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d10c      	bne.n	8014124 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	689b      	ldr	r3, [r3, #8]
 801410e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014112:	2b00      	cmp	r3, #0
 8014114:	d11a      	bne.n	801414c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	2100      	movs	r1, #0
 801411a:	4618      	mov	r0, r3
 801411c:	f7fd feee 	bl	8011efc <create_chain>
 8014120:	62b8      	str	r0, [r7, #40]	; 0x28
 8014122:	e013      	b.n	801414c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014128:	2b00      	cmp	r3, #0
 801412a:	d007      	beq.n	801413c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	699b      	ldr	r3, [r3, #24]
 8014130:	4619      	mov	r1, r3
 8014132:	68f8      	ldr	r0, [r7, #12]
 8014134:	f7fd ff7a 	bl	801202c <clmt_clust>
 8014138:	62b8      	str	r0, [r7, #40]	; 0x28
 801413a:	e007      	b.n	801414c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801413c:	68fa      	ldr	r2, [r7, #12]
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	69db      	ldr	r3, [r3, #28]
 8014142:	4619      	mov	r1, r3
 8014144:	4610      	mov	r0, r2
 8014146:	f7fd fed9 	bl	8011efc <create_chain>
 801414a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801414e:	2b00      	cmp	r3, #0
 8014150:	f000 80f2 	beq.w	8014338 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014156:	2b01      	cmp	r3, #1
 8014158:	d104      	bne.n	8014164 <f_write+0xfc>
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2202      	movs	r2, #2
 801415e:	755a      	strb	r2, [r3, #21]
 8014160:	2302      	movs	r3, #2
 8014162:	e0f2      	b.n	801434a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801416a:	d104      	bne.n	8014176 <f_write+0x10e>
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	2201      	movs	r2, #1
 8014170:	755a      	strb	r2, [r3, #21]
 8014172:	2301      	movs	r3, #1
 8014174:	e0e9      	b.n	801434a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801417a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	689b      	ldr	r3, [r3, #8]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d102      	bne.n	801418a <f_write+0x122>
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014188:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	7d1b      	ldrb	r3, [r3, #20]
 801418e:	b25b      	sxtb	r3, r3
 8014190:	2b00      	cmp	r3, #0
 8014192:	da18      	bge.n	80141c6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	7858      	ldrb	r0, [r3, #1]
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	6a1a      	ldr	r2, [r3, #32]
 80141a2:	2301      	movs	r3, #1
 80141a4:	f7fd f90a 	bl	80113bc <disk_write>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d004      	beq.n	80141b8 <f_write+0x150>
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	2201      	movs	r2, #1
 80141b2:	755a      	strb	r2, [r3, #21]
 80141b4:	2301      	movs	r3, #1
 80141b6:	e0c8      	b.n	801434a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	7d1b      	ldrb	r3, [r3, #20]
 80141bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80141c0:	b2da      	uxtb	r2, r3
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80141c6:	693a      	ldr	r2, [r7, #16]
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	69db      	ldr	r3, [r3, #28]
 80141cc:	4619      	mov	r1, r3
 80141ce:	4610      	mov	r0, r2
 80141d0:	f7fd fc7e 	bl	8011ad0 <clust2sect>
 80141d4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80141d6:	697b      	ldr	r3, [r7, #20]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d104      	bne.n	80141e6 <f_write+0x17e>
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	2202      	movs	r2, #2
 80141e0:	755a      	strb	r2, [r3, #21]
 80141e2:	2302      	movs	r3, #2
 80141e4:	e0b1      	b.n	801434a <f_write+0x2e2>
			sect += csect;
 80141e6:	697a      	ldr	r2, [r7, #20]
 80141e8:	69bb      	ldr	r3, [r7, #24]
 80141ea:	4413      	add	r3, r2
 80141ec:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	0a5b      	lsrs	r3, r3, #9
 80141f2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80141f4:	6a3b      	ldr	r3, [r7, #32]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d03c      	beq.n	8014274 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80141fa:	69ba      	ldr	r2, [r7, #24]
 80141fc:	6a3b      	ldr	r3, [r7, #32]
 80141fe:	4413      	add	r3, r2
 8014200:	693a      	ldr	r2, [r7, #16]
 8014202:	8952      	ldrh	r2, [r2, #10]
 8014204:	4293      	cmp	r3, r2
 8014206:	d905      	bls.n	8014214 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014208:	693b      	ldr	r3, [r7, #16]
 801420a:	895b      	ldrh	r3, [r3, #10]
 801420c:	461a      	mov	r2, r3
 801420e:	69bb      	ldr	r3, [r7, #24]
 8014210:	1ad3      	subs	r3, r2, r3
 8014212:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	7858      	ldrb	r0, [r3, #1]
 8014218:	6a3b      	ldr	r3, [r7, #32]
 801421a:	697a      	ldr	r2, [r7, #20]
 801421c:	69f9      	ldr	r1, [r7, #28]
 801421e:	f7fd f8cd 	bl	80113bc <disk_write>
 8014222:	4603      	mov	r3, r0
 8014224:	2b00      	cmp	r3, #0
 8014226:	d004      	beq.n	8014232 <f_write+0x1ca>
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2201      	movs	r2, #1
 801422c:	755a      	strb	r2, [r3, #21]
 801422e:	2301      	movs	r3, #1
 8014230:	e08b      	b.n	801434a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	6a1a      	ldr	r2, [r3, #32]
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	1ad3      	subs	r3, r2, r3
 801423a:	6a3a      	ldr	r2, [r7, #32]
 801423c:	429a      	cmp	r2, r3
 801423e:	d915      	bls.n	801426c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	6a1a      	ldr	r2, [r3, #32]
 801424a:	697b      	ldr	r3, [r7, #20]
 801424c:	1ad3      	subs	r3, r2, r3
 801424e:	025b      	lsls	r3, r3, #9
 8014250:	69fa      	ldr	r2, [r7, #28]
 8014252:	4413      	add	r3, r2
 8014254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014258:	4619      	mov	r1, r3
 801425a:	f7fd f96f 	bl	801153c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	7d1b      	ldrb	r3, [r3, #20]
 8014262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014266:	b2da      	uxtb	r2, r3
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801426c:	6a3b      	ldr	r3, [r7, #32]
 801426e:	025b      	lsls	r3, r3, #9
 8014270:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014272:	e03f      	b.n	80142f4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	6a1b      	ldr	r3, [r3, #32]
 8014278:	697a      	ldr	r2, [r7, #20]
 801427a:	429a      	cmp	r2, r3
 801427c:	d016      	beq.n	80142ac <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	699a      	ldr	r2, [r3, #24]
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014286:	429a      	cmp	r2, r3
 8014288:	d210      	bcs.n	80142ac <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	7858      	ldrb	r0, [r3, #1]
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014294:	2301      	movs	r3, #1
 8014296:	697a      	ldr	r2, [r7, #20]
 8014298:	f7fd f870 	bl	801137c <disk_read>
 801429c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d004      	beq.n	80142ac <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	2201      	movs	r2, #1
 80142a6:	755a      	strb	r2, [r3, #21]
 80142a8:	2301      	movs	r3, #1
 80142aa:	e04e      	b.n	801434a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	697a      	ldr	r2, [r7, #20]
 80142b0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	699b      	ldr	r3, [r3, #24]
 80142b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142ba:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80142be:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80142c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	429a      	cmp	r2, r3
 80142c6:	d901      	bls.n	80142cc <f_write+0x264>
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	699b      	ldr	r3, [r3, #24]
 80142d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142da:	4413      	add	r3, r2
 80142dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142de:	69f9      	ldr	r1, [r7, #28]
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7fd f92b 	bl	801153c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	7d1b      	ldrb	r3, [r3, #20]
 80142ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80142ee:	b2da      	uxtb	r2, r3
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80142f4:	69fa      	ldr	r2, [r7, #28]
 80142f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f8:	4413      	add	r3, r2
 80142fa:	61fb      	str	r3, [r7, #28]
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	699a      	ldr	r2, [r3, #24]
 8014300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014302:	441a      	add	r2, r3
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	619a      	str	r2, [r3, #24]
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	68da      	ldr	r2, [r3, #12]
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	699b      	ldr	r3, [r3, #24]
 8014310:	429a      	cmp	r2, r3
 8014312:	bf38      	it	cc
 8014314:	461a      	movcc	r2, r3
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	60da      	str	r2, [r3, #12]
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	681a      	ldr	r2, [r3, #0]
 801431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014320:	441a      	add	r2, r3
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	601a      	str	r2, [r3, #0]
 8014326:	687a      	ldr	r2, [r7, #4]
 8014328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432a:	1ad3      	subs	r3, r2, r3
 801432c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2b00      	cmp	r3, #0
 8014332:	f47f aed4 	bne.w	80140de <f_write+0x76>
 8014336:	e000      	b.n	801433a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014338:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	7d1b      	ldrb	r3, [r3, #20]
 801433e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014342:	b2da      	uxtb	r2, r3
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014348:	2300      	movs	r3, #0
}
 801434a:	4618      	mov	r0, r3
 801434c:	3730      	adds	r7, #48	; 0x30
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}

08014352 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014352:	b580      	push	{r7, lr}
 8014354:	b086      	sub	sp, #24
 8014356:	af00      	add	r7, sp, #0
 8014358:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f107 0208 	add.w	r2, r7, #8
 8014360:	4611      	mov	r1, r2
 8014362:	4618      	mov	r0, r3
 8014364:	f7ff fa0e 	bl	8013784 <validate>
 8014368:	4603      	mov	r3, r0
 801436a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801436c:	7dfb      	ldrb	r3, [r7, #23]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d168      	bne.n	8014444 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	7d1b      	ldrb	r3, [r3, #20]
 8014376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801437a:	2b00      	cmp	r3, #0
 801437c:	d062      	beq.n	8014444 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	7d1b      	ldrb	r3, [r3, #20]
 8014382:	b25b      	sxtb	r3, r3
 8014384:	2b00      	cmp	r3, #0
 8014386:	da15      	bge.n	80143b4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	7858      	ldrb	r0, [r3, #1]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6a1a      	ldr	r2, [r3, #32]
 8014396:	2301      	movs	r3, #1
 8014398:	f7fd f810 	bl	80113bc <disk_write>
 801439c:	4603      	mov	r3, r0
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d001      	beq.n	80143a6 <f_sync+0x54>
 80143a2:	2301      	movs	r3, #1
 80143a4:	e04f      	b.n	8014446 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	7d1b      	ldrb	r3, [r3, #20]
 80143aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143ae:	b2da      	uxtb	r2, r3
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80143b4:	f7f8 fa60 	bl	800c878 <get_fattime>
 80143b8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80143ba:	68ba      	ldr	r2, [r7, #8]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143c0:	4619      	mov	r1, r3
 80143c2:	4610      	mov	r0, r2
 80143c4:	f7fd fae8 	bl	8011998 <move_window>
 80143c8:	4603      	mov	r3, r0
 80143ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80143cc:	7dfb      	ldrb	r3, [r7, #23]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d138      	bne.n	8014444 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143d6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	330b      	adds	r3, #11
 80143dc:	781a      	ldrb	r2, [r3, #0]
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	330b      	adds	r3, #11
 80143e2:	f042 0220 	orr.w	r2, r2, #32
 80143e6:	b2d2      	uxtb	r2, r2
 80143e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6818      	ldr	r0, [r3, #0]
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	689b      	ldr	r3, [r3, #8]
 80143f2:	461a      	mov	r2, r3
 80143f4:	68f9      	ldr	r1, [r7, #12]
 80143f6:	f7fd fff3 	bl	80123e0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f103 021c 	add.w	r2, r3, #28
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	68db      	ldr	r3, [r3, #12]
 8014404:	4619      	mov	r1, r3
 8014406:	4610      	mov	r0, r2
 8014408:	f7fd f86c 	bl	80114e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	3316      	adds	r3, #22
 8014410:	6939      	ldr	r1, [r7, #16]
 8014412:	4618      	mov	r0, r3
 8014414:	f7fd f866 	bl	80114e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	3312      	adds	r3, #18
 801441c:	2100      	movs	r1, #0
 801441e:	4618      	mov	r0, r3
 8014420:	f7fd f845 	bl	80114ae <st_word>
					fs->wflag = 1;
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	2201      	movs	r2, #1
 8014428:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	4618      	mov	r0, r3
 801442e:	f7fd fae1 	bl	80119f4 <sync_fs>
 8014432:	4603      	mov	r3, r0
 8014434:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	7d1b      	ldrb	r3, [r3, #20]
 801443a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801443e:	b2da      	uxtb	r2, r3
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014444:	7dfb      	ldrb	r3, [r7, #23]
}
 8014446:	4618      	mov	r0, r3
 8014448:	3718      	adds	r7, #24
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}

0801444e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801444e:	b580      	push	{r7, lr}
 8014450:	b084      	sub	sp, #16
 8014452:	af00      	add	r7, sp, #0
 8014454:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f7ff ff7b 	bl	8014352 <f_sync>
 801445c:	4603      	mov	r3, r0
 801445e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014460:	7bfb      	ldrb	r3, [r7, #15]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d118      	bne.n	8014498 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	f107 0208 	add.w	r2, r7, #8
 801446c:	4611      	mov	r1, r2
 801446e:	4618      	mov	r0, r3
 8014470:	f7ff f988 	bl	8013784 <validate>
 8014474:	4603      	mov	r3, r0
 8014476:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014478:	7bfb      	ldrb	r3, [r7, #15]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d10c      	bne.n	8014498 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	691b      	ldr	r3, [r3, #16]
 8014482:	4618      	mov	r0, r3
 8014484:	f7fd f9e4 	bl	8011850 <dec_lock>
 8014488:	4603      	mov	r3, r0
 801448a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801448c:	7bfb      	ldrb	r3, [r7, #15]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d102      	bne.n	8014498 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2200      	movs	r2, #0
 8014496:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014498:	7bfb      	ldrb	r3, [r7, #15]
}
 801449a:	4618      	mov	r0, r3
 801449c:	3710      	adds	r7, #16
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}
	...

080144a4 <f_setlabel>:
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Pointer to the volume label to set */
)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b09a      	sub	sp, #104	; 0x68
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
	WCHAR w;
	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";


	/* Get logical drive */
	res = find_volume(&label, &fs, FA_WRITE);
 80144ac:	f107 0120 	add.w	r1, r7, #32
 80144b0:	1d3b      	adds	r3, r7, #4
 80144b2:	2202      	movs	r2, #2
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fe ff19 	bl	80132ec <find_volume>
 80144ba:	4603      	mov	r3, r0
 80144bc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if (res != FR_OK) LEAVE_FF(fs, res);
 80144c0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d002      	beq.n	80144ce <f_setlabel+0x2a>
 80144c8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80144cc:	e12d      	b.n	801472a <f_setlabel+0x286>
	dj.obj.fs = fs;
 80144ce:	6a3b      	ldr	r3, [r7, #32]
 80144d0:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get length of given volume label */
	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
 80144d2:	2300      	movs	r3, #0
 80144d4:	667b      	str	r3, [r7, #100]	; 0x64
 80144d6:	e002      	b.n	80144de <f_setlabel+0x3a>
 80144d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80144da:	3301      	adds	r3, #1
 80144dc:	667b      	str	r3, [r7, #100]	; 0x64
 80144de:	687a      	ldr	r2, [r7, #4]
 80144e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80144e2:	4413      	add	r3, r2
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	2b1f      	cmp	r3, #31
 80144e8:	d8f6      	bhi.n	80144d8 <f_setlabel+0x34>
		}
		slen = j;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
 80144ea:	e002      	b.n	80144f2 <f_setlabel+0x4e>
 80144ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80144ee:	3b01      	subs	r3, #1
 80144f0:	667b      	str	r3, [r7, #100]	; 0x64
 80144f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d006      	beq.n	8014506 <f_setlabel+0x62>
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80144fc:	3b01      	subs	r3, #1
 80144fe:	4413      	add	r3, r2
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	2b20      	cmp	r3, #32
 8014504:	d0f2      	beq.n	80144ec <f_setlabel+0x48>
		if (slen) {		/* Is there a volume label to be set? */
 8014506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014508:	2b00      	cmp	r3, #0
 801450a:	f000 80a5 	beq.w	8014658 <f_setlabel+0x1b4>
			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
 801450e:	2300      	movs	r3, #0
 8014510:	723b      	strb	r3, [r7, #8]
 8014512:	2300      	movs	r3, #0
 8014514:	65bb      	str	r3, [r7, #88]	; 0x58
 8014516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014518:	65fb      	str	r3, [r7, #92]	; 0x5c
			do {
#if _LFN_UNICODE
				w = ff_convert(ff_wtoupper(label[i++]), 0);
#else
				w = (BYTE)label[i++];
 801451a:	687a      	ldr	r2, [r7, #4]
 801451c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801451e:	1c59      	adds	r1, r3, #1
 8014520:	65f9      	str	r1, [r7, #92]	; 0x5c
 8014522:	4413      	add	r3, r2
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				if (IsDBCS1(w)) {
 801452a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801452e:	b2db      	uxtb	r3, r3
 8014530:	2b80      	cmp	r3, #128	; 0x80
 8014532:	d936      	bls.n	80145a2 <f_setlabel+0xfe>
 8014534:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014538:	b2db      	uxtb	r3, r3
 801453a:	2bff      	cmp	r3, #255	; 0xff
 801453c:	d031      	beq.n	80145a2 <f_setlabel+0xfe>
					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
 801453e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014540:	2b09      	cmp	r3, #9
 8014542:	d82b      	bhi.n	801459c <f_setlabel+0xf8>
 8014544:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014548:	429a      	cmp	r2, r3
 801454a:	d227      	bcs.n	801459c <f_setlabel+0xf8>
 801454c:	687a      	ldr	r2, [r7, #4]
 801454e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014550:	4413      	add	r3, r2
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	2b3f      	cmp	r3, #63	; 0x3f
 8014556:	d905      	bls.n	8014564 <f_setlabel+0xc0>
 8014558:	687a      	ldr	r2, [r7, #4]
 801455a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801455c:	4413      	add	r3, r2
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	2b7e      	cmp	r3, #126	; 0x7e
 8014562:	d90c      	bls.n	801457e <f_setlabel+0xda>
 8014564:	687a      	ldr	r2, [r7, #4]
 8014566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014568:	4413      	add	r3, r2
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	b25b      	sxtb	r3, r3
 801456e:	2b00      	cmp	r3, #0
 8014570:	da14      	bge.n	801459c <f_setlabel+0xf8>
 8014572:	687a      	ldr	r2, [r7, #4]
 8014574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014576:	4413      	add	r3, r2
 8014578:	781b      	ldrb	r3, [r3, #0]
 801457a:	2bff      	cmp	r3, #255	; 0xff
 801457c:	d00e      	beq.n	801459c <f_setlabel+0xf8>
 801457e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014582:	021b      	lsls	r3, r3, #8
 8014584:	b21a      	sxth	r2, r3
 8014586:	6879      	ldr	r1, [r7, #4]
 8014588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801458a:	1c58      	adds	r0, r3, #1
 801458c:	65f8      	str	r0, [r7, #92]	; 0x5c
 801458e:	440b      	add	r3, r1
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	b21b      	sxth	r3, r3
 8014594:	4313      	orrs	r3, r2
 8014596:	b21b      	sxth	r3, r3
 8014598:	b29b      	uxth	r3, r3
 801459a:	e000      	b.n	801459e <f_setlabel+0xfa>
 801459c:	2300      	movs	r3, #0
 801459e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				}
#if _USE_LFN != 0
				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
 80145a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80145a6:	2101      	movs	r1, #1
 80145a8:	4618      	mov	r0, r3
 80145aa:	f000 f921 	bl	80147f0 <ff_convert>
 80145ae:	4603      	mov	r3, r0
 80145b0:	4618      	mov	r0, r3
 80145b2:	f000 f97b 	bl	80148ac <ff_wtoupper>
 80145b6:	4603      	mov	r3, r0
 80145b8:	2100      	movs	r1, #0
 80145ba:	4618      	mov	r0, r3
 80145bc:	f000 f918 	bl	80147f0 <ff_convert>
 80145c0:	4603      	mov	r3, r0
 80145c2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
#else
				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
#endif
				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 80145c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d012      	beq.n	80145f4 <f_setlabel+0x150>
 80145ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80145d2:	4619      	mov	r1, r3
 80145d4:	4857      	ldr	r0, [pc, #348]	; (8014734 <f_setlabel+0x290>)
 80145d6:	f7fd f814 	bl	8011602 <chk_chr>
 80145da:	4603      	mov	r3, r0
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d109      	bne.n	80145f4 <f_setlabel+0x150>
 80145e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80145e4:	2bff      	cmp	r3, #255	; 0xff
 80145e6:	d901      	bls.n	80145ec <f_setlabel+0x148>
 80145e8:	220a      	movs	r2, #10
 80145ea:	e000      	b.n	80145ee <f_setlabel+0x14a>
 80145ec:	220b      	movs	r2, #11
 80145ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d801      	bhi.n	80145f8 <f_setlabel+0x154>
					LEAVE_FF(fs, FR_INVALID_NAME);
 80145f4:	2306      	movs	r3, #6
 80145f6:	e098      	b.n	801472a <f_setlabel+0x286>
				}
				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
 80145f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80145fc:	2bff      	cmp	r3, #255	; 0xff
 80145fe:	d90b      	bls.n	8014618 <f_setlabel+0x174>
 8014600:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014604:	0a1b      	lsrs	r3, r3, #8
 8014606:	b299      	uxth	r1, r3
 8014608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801460a:	1c5a      	adds	r2, r3, #1
 801460c:	65ba      	str	r2, [r7, #88]	; 0x58
 801460e:	b2ca      	uxtb	r2, r1
 8014610:	3368      	adds	r3, #104	; 0x68
 8014612:	443b      	add	r3, r7
 8014614:	f803 2c60 	strb.w	r2, [r3, #-96]
				dirvn[j++] = (BYTE)w;
 8014618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801461a:	1c5a      	adds	r2, r3, #1
 801461c:	65ba      	str	r2, [r7, #88]	; 0x58
 801461e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8014622:	b2d2      	uxtb	r2, r2
 8014624:	3368      	adds	r3, #104	; 0x68
 8014626:	443b      	add	r3, r7
 8014628:	f803 2c60 	strb.w	r2, [r3, #-96]
			} while (i < slen);
 801462c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801462e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014630:	429a      	cmp	r2, r3
 8014632:	f4ff af72 	bcc.w	801451a <f_setlabel+0x76>
			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
 8014636:	e007      	b.n	8014648 <f_setlabel+0x1a4>
 8014638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801463a:	1c5a      	adds	r2, r3, #1
 801463c:	65ba      	str	r2, [r7, #88]	; 0x58
 801463e:	3368      	adds	r3, #104	; 0x68
 8014640:	443b      	add	r3, r7
 8014642:	2220      	movs	r2, #32
 8014644:	f803 2c60 	strb.w	r2, [r3, #-96]
 8014648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801464a:	2b0a      	cmp	r3, #10
 801464c:	d9f4      	bls.n	8014638 <f_setlabel+0x194>
			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 801464e:	7a3b      	ldrb	r3, [r7, #8]
 8014650:	2be5      	cmp	r3, #229	; 0xe5
 8014652:	d101      	bne.n	8014658 <f_setlabel+0x1b4>
 8014654:	2306      	movs	r3, #6
 8014656:	e068      	b.n	801472a <f_setlabel+0x286>
		}
	}

	/* Set volume label */
	dj.obj.sclust = 0;		/* Open root directory */
 8014658:	2300      	movs	r3, #0
 801465a:	62fb      	str	r3, [r7, #44]	; 0x2c
	res = dir_sdi(&dj, 0);
 801465c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014660:	2100      	movs	r1, #0
 8014662:	4618      	mov	r0, r3
 8014664:	f7fd fd16 	bl	8012094 <dir_sdi>
 8014668:	4603      	mov	r3, r0
 801466a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if (res == FR_OK) {
 801466e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8014672:	2b00      	cmp	r3, #0
 8014674:	d157      	bne.n	8014726 <f_setlabel+0x282>
		res = dir_read(&dj, 1);	/* Get volume label entry */
 8014676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801467a:	2101      	movs	r1, #1
 801467c:	4618      	mov	r0, r3
 801467e:	f7fe f8d0 	bl	8012822 <dir_read>
 8014682:	4603      	mov	r3, r0
 8014684:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		if (res == FR_OK) {
 8014688:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801468c:	2b00      	cmp	r3, #0
 801468e:	d118      	bne.n	80146c2 <f_setlabel+0x21e>
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
			} else {
				if (slen) {
 8014690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014692:	2b00      	cmp	r3, #0
 8014694:	d007      	beq.n	80146a6 <f_setlabel+0x202>
					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
 8014696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014698:	f107 0108 	add.w	r1, r7, #8
 801469c:	220b      	movs	r2, #11
 801469e:	4618      	mov	r0, r3
 80146a0:	f7fc ff4c 	bl	801153c <mem_cpy>
 80146a4:	e002      	b.n	80146ac <f_setlabel+0x208>
				} else {
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 80146a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146a8:	22e5      	movs	r2, #229	; 0xe5
 80146aa:	701a      	strb	r2, [r3, #0]
				}
			}
			fs->wflag = 1;
 80146ac:	6a3b      	ldr	r3, [r7, #32]
 80146ae:	2201      	movs	r2, #1
 80146b0:	70da      	strb	r2, [r3, #3]
			res = sync_fs(fs);
 80146b2:	6a3b      	ldr	r3, [r7, #32]
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7fd f99d 	bl	80119f4 <sync_fs>
 80146ba:	4603      	mov	r3, r0
 80146bc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80146c0:	e031      	b.n	8014726 <f_setlabel+0x282>
		} else {			/* No volume label entry is found or error */
			if (res == FR_NO_FILE) {
 80146c2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80146c6:	2b04      	cmp	r3, #4
 80146c8:	d12d      	bne.n	8014726 <f_setlabel+0x282>
				res = FR_OK;
 80146ca:	2300      	movs	r3, #0
 80146cc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				if (slen) {	/* Create a volume label entry */
 80146d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d027      	beq.n	8014726 <f_setlabel+0x282>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 80146d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80146da:	2101      	movs	r1, #1
 80146dc:	4618      	mov	r0, r3
 80146de:	f7fd fe19 	bl	8012314 <dir_alloc>
 80146e2:	4603      	mov	r3, r0
 80146e4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
					if (res == FR_OK) {
 80146e8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d11a      	bne.n	8014726 <f_setlabel+0x282>
						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
 80146f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146f2:	2220      	movs	r2, #32
 80146f4:	2100      	movs	r1, #0
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7fc ff41 	bl	801157e <mem_set>
						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
						} else {
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 80146fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146fe:	330b      	adds	r3, #11
 8014700:	2208      	movs	r2, #8
 8014702:	701a      	strb	r2, [r3, #0]
							mem_cpy(dj.dir, dirvn, 11);
 8014704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014706:	f107 0108 	add.w	r1, r7, #8
 801470a:	220b      	movs	r2, #11
 801470c:	4618      	mov	r0, r3
 801470e:	f7fc ff15 	bl	801153c <mem_cpy>
						}
						fs->wflag = 1;
 8014712:	6a3b      	ldr	r3, [r7, #32]
 8014714:	2201      	movs	r2, #1
 8014716:	70da      	strb	r2, [r3, #3]
						res = sync_fs(fs);
 8014718:	6a3b      	ldr	r3, [r7, #32]
 801471a:	4618      	mov	r0, r3
 801471c:	f7fd f96a 	bl	80119f4 <sync_fs>
 8014720:	4603      	mov	r3, r0
 8014722:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014726:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
}
 801472a:	4618      	mov	r0, r3
 801472c:	3768      	adds	r7, #104	; 0x68
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	08016ac4 	.word	0x08016ac4

08014738 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014738:	b480      	push	{r7}
 801473a:	b087      	sub	sp, #28
 801473c:	af00      	add	r7, sp, #0
 801473e:	60f8      	str	r0, [r7, #12]
 8014740:	60b9      	str	r1, [r7, #8]
 8014742:	4613      	mov	r3, r2
 8014744:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014746:	2301      	movs	r3, #1
 8014748:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801474a:	2300      	movs	r3, #0
 801474c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801474e:	4b1f      	ldr	r3, [pc, #124]	; (80147cc <FATFS_LinkDriverEx+0x94>)
 8014750:	7a5b      	ldrb	r3, [r3, #9]
 8014752:	b2db      	uxtb	r3, r3
 8014754:	2b00      	cmp	r3, #0
 8014756:	d131      	bne.n	80147bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014758:	4b1c      	ldr	r3, [pc, #112]	; (80147cc <FATFS_LinkDriverEx+0x94>)
 801475a:	7a5b      	ldrb	r3, [r3, #9]
 801475c:	b2db      	uxtb	r3, r3
 801475e:	461a      	mov	r2, r3
 8014760:	4b1a      	ldr	r3, [pc, #104]	; (80147cc <FATFS_LinkDriverEx+0x94>)
 8014762:	2100      	movs	r1, #0
 8014764:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014766:	4b19      	ldr	r3, [pc, #100]	; (80147cc <FATFS_LinkDriverEx+0x94>)
 8014768:	7a5b      	ldrb	r3, [r3, #9]
 801476a:	b2db      	uxtb	r3, r3
 801476c:	4a17      	ldr	r2, [pc, #92]	; (80147cc <FATFS_LinkDriverEx+0x94>)
 801476e:	009b      	lsls	r3, r3, #2
 8014770:	4413      	add	r3, r2
 8014772:	68fa      	ldr	r2, [r7, #12]
 8014774:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014776:	4b15      	ldr	r3, [pc, #84]	; (80147cc <FATFS_LinkDriverEx+0x94>)
 8014778:	7a5b      	ldrb	r3, [r3, #9]
 801477a:	b2db      	uxtb	r3, r3
 801477c:	461a      	mov	r2, r3
 801477e:	4b13      	ldr	r3, [pc, #76]	; (80147cc <FATFS_LinkDriverEx+0x94>)
 8014780:	4413      	add	r3, r2
 8014782:	79fa      	ldrb	r2, [r7, #7]
 8014784:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014786:	4b11      	ldr	r3, [pc, #68]	; (80147cc <FATFS_LinkDriverEx+0x94>)
 8014788:	7a5b      	ldrb	r3, [r3, #9]
 801478a:	b2db      	uxtb	r3, r3
 801478c:	1c5a      	adds	r2, r3, #1
 801478e:	b2d1      	uxtb	r1, r2
 8014790:	4a0e      	ldr	r2, [pc, #56]	; (80147cc <FATFS_LinkDriverEx+0x94>)
 8014792:	7251      	strb	r1, [r2, #9]
 8014794:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014796:	7dbb      	ldrb	r3, [r7, #22]
 8014798:	3330      	adds	r3, #48	; 0x30
 801479a:	b2da      	uxtb	r2, r3
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	3301      	adds	r3, #1
 80147a4:	223a      	movs	r2, #58	; 0x3a
 80147a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	3302      	adds	r3, #2
 80147ac:	222f      	movs	r2, #47	; 0x2f
 80147ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	3303      	adds	r3, #3
 80147b4:	2200      	movs	r2, #0
 80147b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80147b8:	2300      	movs	r3, #0
 80147ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80147bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80147be:	4618      	mov	r0, r3
 80147c0:	371c      	adds	r7, #28
 80147c2:	46bd      	mov	sp, r7
 80147c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c8:	4770      	bx	lr
 80147ca:	bf00      	nop
 80147cc:	24000458 	.word	0x24000458

080147d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80147da:	2200      	movs	r2, #0
 80147dc:	6839      	ldr	r1, [r7, #0]
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f7ff ffaa 	bl	8014738 <FATFS_LinkDriverEx>
 80147e4:	4603      	mov	r3, r0
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3708      	adds	r7, #8
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
	...

080147f0 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80147f0:	b480      	push	{r7}
 80147f2:	b089      	sub	sp, #36	; 0x24
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	4603      	mov	r3, r0
 80147f8:	6039      	str	r1, [r7, #0]
 80147fa:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 80147fc:	88fb      	ldrh	r3, [r7, #6]
 80147fe:	2b7f      	cmp	r3, #127	; 0x7f
 8014800:	d802      	bhi.n	8014808 <ff_convert+0x18>
		c = chr;
 8014802:	88fb      	ldrh	r3, [r7, #6]
 8014804:	837b      	strh	r3, [r7, #26]
 8014806:	e046      	b.n	8014896 <ff_convert+0xa6>
	} else {
		if (dir) {		/* OEM code to unicode */
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d005      	beq.n	801481a <ff_convert+0x2a>
			p = oem2uni;
 801480e:	4b25      	ldr	r3, [pc, #148]	; (80148a4 <ff_convert+0xb4>)
 8014810:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 8014812:	f245 5320 	movw	r3, #21792	; 0x5520
 8014816:	60bb      	str	r3, [r7, #8]
 8014818:	e004      	b.n	8014824 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 801481a:	4b23      	ldr	r3, [pc, #140]	; (80148a8 <ff_convert+0xb8>)
 801481c:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 801481e:	f245 5320 	movw	r3, #21792	; 0x5520
 8014822:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 8014824:	2300      	movs	r3, #0
 8014826:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 8014828:	2310      	movs	r3, #16
 801482a:	613b      	str	r3, [r7, #16]
 801482c:	e022      	b.n	8014874 <ff_convert+0x84>
			i = li + (hi - li) / 2;
 801482e:	68ba      	ldr	r2, [r7, #8]
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	1ad3      	subs	r3, r2, r3
 8014834:	2b00      	cmp	r3, #0
 8014836:	da00      	bge.n	801483a <ff_convert+0x4a>
 8014838:	3301      	adds	r3, #1
 801483a:	105b      	asrs	r3, r3, #1
 801483c:	461a      	mov	r2, r3
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	4413      	add	r3, r2
 8014842:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 8014844:	697b      	ldr	r3, [r7, #20]
 8014846:	009b      	lsls	r3, r3, #2
 8014848:	69fa      	ldr	r2, [r7, #28]
 801484a:	4413      	add	r3, r2
 801484c:	881b      	ldrh	r3, [r3, #0]
 801484e:	88fa      	ldrh	r2, [r7, #6]
 8014850:	429a      	cmp	r2, r3
 8014852:	d013      	beq.n	801487c <ff_convert+0x8c>
			if (chr > p[i * 2])
 8014854:	697b      	ldr	r3, [r7, #20]
 8014856:	009b      	lsls	r3, r3, #2
 8014858:	69fa      	ldr	r2, [r7, #28]
 801485a:	4413      	add	r3, r2
 801485c:	881b      	ldrh	r3, [r3, #0]
 801485e:	88fa      	ldrh	r2, [r7, #6]
 8014860:	429a      	cmp	r2, r3
 8014862:	d902      	bls.n	801486a <ff_convert+0x7a>
				li = i;
 8014864:	697b      	ldr	r3, [r7, #20]
 8014866:	60fb      	str	r3, [r7, #12]
 8014868:	e001      	b.n	801486e <ff_convert+0x7e>
			else
				hi = i;
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 801486e:	693b      	ldr	r3, [r7, #16]
 8014870:	3b01      	subs	r3, #1
 8014872:	613b      	str	r3, [r7, #16]
 8014874:	693b      	ldr	r3, [r7, #16]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d1d9      	bne.n	801482e <ff_convert+0x3e>
 801487a:	e000      	b.n	801487e <ff_convert+0x8e>
			if (chr == p[i * 2]) break;
 801487c:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d006      	beq.n	8014892 <ff_convert+0xa2>
 8014884:	697b      	ldr	r3, [r7, #20]
 8014886:	009b      	lsls	r3, r3, #2
 8014888:	3302      	adds	r3, #2
 801488a:	69fa      	ldr	r2, [r7, #28]
 801488c:	4413      	add	r3, r2
 801488e:	881b      	ldrh	r3, [r3, #0]
 8014890:	e000      	b.n	8014894 <ff_convert+0xa4>
 8014892:	2300      	movs	r3, #0
 8014894:	837b      	strh	r3, [r7, #26]
	}

	return c;
 8014896:	8b7b      	ldrh	r3, [r7, #26]
}
 8014898:	4618      	mov	r0, r3
 801489a:	3724      	adds	r7, #36	; 0x24
 801489c:	46bd      	mov	sp, r7
 801489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a2:	4770      	bx	lr
 80148a4:	0802bf58 	.word	0x0802bf58
 80148a8:	08016ad4 	.word	0x08016ad4

080148ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80148ac:	b480      	push	{r7}
 80148ae:	b087      	sub	sp, #28
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	4603      	mov	r3, r0
 80148b4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80148b6:	88fb      	ldrh	r3, [r7, #6]
 80148b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80148bc:	d201      	bcs.n	80148c2 <ff_wtoupper+0x16>
 80148be:	4b3e      	ldr	r3, [pc, #248]	; (80149b8 <ff_wtoupper+0x10c>)
 80148c0:	e000      	b.n	80148c4 <ff_wtoupper+0x18>
 80148c2:	4b3e      	ldr	r3, [pc, #248]	; (80149bc <ff_wtoupper+0x110>)
 80148c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	1c9a      	adds	r2, r3, #2
 80148ca:	617a      	str	r2, [r7, #20]
 80148cc:	881b      	ldrh	r3, [r3, #0]
 80148ce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80148d0:	8a7b      	ldrh	r3, [r7, #18]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d068      	beq.n	80149a8 <ff_wtoupper+0xfc>
 80148d6:	88fa      	ldrh	r2, [r7, #6]
 80148d8:	8a7b      	ldrh	r3, [r7, #18]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d364      	bcc.n	80149a8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	1c9a      	adds	r2, r3, #2
 80148e2:	617a      	str	r2, [r7, #20]
 80148e4:	881b      	ldrh	r3, [r3, #0]
 80148e6:	823b      	strh	r3, [r7, #16]
 80148e8:	8a3b      	ldrh	r3, [r7, #16]
 80148ea:	0a1b      	lsrs	r3, r3, #8
 80148ec:	81fb      	strh	r3, [r7, #14]
 80148ee:	8a3b      	ldrh	r3, [r7, #16]
 80148f0:	b2db      	uxtb	r3, r3
 80148f2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80148f4:	88fa      	ldrh	r2, [r7, #6]
 80148f6:	8a79      	ldrh	r1, [r7, #18]
 80148f8:	8a3b      	ldrh	r3, [r7, #16]
 80148fa:	440b      	add	r3, r1
 80148fc:	429a      	cmp	r2, r3
 80148fe:	da49      	bge.n	8014994 <ff_wtoupper+0xe8>
			switch (cmd) {
 8014900:	89fb      	ldrh	r3, [r7, #14]
 8014902:	2b08      	cmp	r3, #8
 8014904:	d84f      	bhi.n	80149a6 <ff_wtoupper+0xfa>
 8014906:	a201      	add	r2, pc, #4	; (adr r2, 801490c <ff_wtoupper+0x60>)
 8014908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801490c:	08014931 	.word	0x08014931
 8014910:	08014943 	.word	0x08014943
 8014914:	08014959 	.word	0x08014959
 8014918:	08014961 	.word	0x08014961
 801491c:	08014969 	.word	0x08014969
 8014920:	08014971 	.word	0x08014971
 8014924:	08014979 	.word	0x08014979
 8014928:	08014981 	.word	0x08014981
 801492c:	08014989 	.word	0x08014989
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014930:	88fa      	ldrh	r2, [r7, #6]
 8014932:	8a7b      	ldrh	r3, [r7, #18]
 8014934:	1ad3      	subs	r3, r2, r3
 8014936:	005b      	lsls	r3, r3, #1
 8014938:	697a      	ldr	r2, [r7, #20]
 801493a:	4413      	add	r3, r2
 801493c:	881b      	ldrh	r3, [r3, #0]
 801493e:	80fb      	strh	r3, [r7, #6]
 8014940:	e027      	b.n	8014992 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014942:	88fa      	ldrh	r2, [r7, #6]
 8014944:	8a7b      	ldrh	r3, [r7, #18]
 8014946:	1ad3      	subs	r3, r2, r3
 8014948:	b29b      	uxth	r3, r3
 801494a:	f003 0301 	and.w	r3, r3, #1
 801494e:	b29b      	uxth	r3, r3
 8014950:	88fa      	ldrh	r2, [r7, #6]
 8014952:	1ad3      	subs	r3, r2, r3
 8014954:	80fb      	strh	r3, [r7, #6]
 8014956:	e01c      	b.n	8014992 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014958:	88fb      	ldrh	r3, [r7, #6]
 801495a:	3b10      	subs	r3, #16
 801495c:	80fb      	strh	r3, [r7, #6]
 801495e:	e018      	b.n	8014992 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014960:	88fb      	ldrh	r3, [r7, #6]
 8014962:	3b20      	subs	r3, #32
 8014964:	80fb      	strh	r3, [r7, #6]
 8014966:	e014      	b.n	8014992 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014968:	88fb      	ldrh	r3, [r7, #6]
 801496a:	3b30      	subs	r3, #48	; 0x30
 801496c:	80fb      	strh	r3, [r7, #6]
 801496e:	e010      	b.n	8014992 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014970:	88fb      	ldrh	r3, [r7, #6]
 8014972:	3b1a      	subs	r3, #26
 8014974:	80fb      	strh	r3, [r7, #6]
 8014976:	e00c      	b.n	8014992 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014978:	88fb      	ldrh	r3, [r7, #6]
 801497a:	3308      	adds	r3, #8
 801497c:	80fb      	strh	r3, [r7, #6]
 801497e:	e008      	b.n	8014992 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014980:	88fb      	ldrh	r3, [r7, #6]
 8014982:	3b50      	subs	r3, #80	; 0x50
 8014984:	80fb      	strh	r3, [r7, #6]
 8014986:	e004      	b.n	8014992 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014988:	88fb      	ldrh	r3, [r7, #6]
 801498a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801498e:	80fb      	strh	r3, [r7, #6]
 8014990:	bf00      	nop
			}
			break;
 8014992:	e008      	b.n	80149a6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014994:	89fb      	ldrh	r3, [r7, #14]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d195      	bne.n	80148c6 <ff_wtoupper+0x1a>
 801499a:	8a3b      	ldrh	r3, [r7, #16]
 801499c:	005b      	lsls	r3, r3, #1
 801499e:	697a      	ldr	r2, [r7, #20]
 80149a0:	4413      	add	r3, r2
 80149a2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80149a4:	e78f      	b.n	80148c6 <ff_wtoupper+0x1a>
			break;
 80149a6:	bf00      	nop
	}

	return chr;
 80149a8:	88fb      	ldrh	r3, [r7, #6]
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	371c      	adds	r7, #28
 80149ae:	46bd      	mov	sp, r7
 80149b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b4:	4770      	bx	lr
 80149b6:	bf00      	nop
 80149b8:	080413dc 	.word	0x080413dc
 80149bc:	080415d0 	.word	0x080415d0

080149c0 <FatFs_read_Check>:
UINT MyFile_Num;
BYTE ReadBuffer[100] = {0};
BYTE WriteBuffer[] = "STM32H7 SD test fatfs"; // 要写入的数据

void FatFs_read_Check(void) // 判断FatFs是否挂载成功
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af02      	add	r7, sp, #8
	//在外部 SD 卡挂载文件系统，文件系统挂载时会对 SD 卡初始化
	MyFile_Res = f_mount(&fs, "0:", 1); //	挂载SD卡
 80149c6:	2201      	movs	r2, #1
 80149c8:	491a      	ldr	r1, [pc, #104]	; (8014a34 <FatFs_read_Check+0x74>)
 80149ca:	481b      	ldr	r0, [pc, #108]	; (8014a38 <FatFs_read_Check+0x78>)
 80149cc:	f7fe ff10 	bl	80137f0 <f_mount>
 80149d0:	4603      	mov	r3, r0
 80149d2:	461a      	mov	r2, r3
 80149d4:	4b19      	ldr	r3, [pc, #100]	; (8014a3c <FatFs_read_Check+0x7c>)
 80149d6:	701a      	strb	r2, [r3, #0]

	if (MyFile_Res == FR_OK) // 判断是否挂载成功
 80149d8:	4b18      	ldr	r3, [pc, #96]	; (8014a3c <FatFs_read_Check+0x7c>)
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d126      	bne.n	8014a2e <FatFs_read_Check+0x6e>
	{
		f_setlabel("SD");  //修改磁盘标签
 80149e0:	4817      	ldr	r0, [pc, #92]	; (8014a40 <FatFs_read_Check+0x80>)
 80149e2:	f7ff fd5f 	bl	80144a4 <f_setlabel>
		MyFile_Res = f_open(&file, "0:SD_test.txt", FA_OPEN_EXISTING | FA_READ);
 80149e6:	2201      	movs	r2, #1
 80149e8:	4916      	ldr	r1, [pc, #88]	; (8014a44 <FatFs_read_Check+0x84>)
 80149ea:	4817      	ldr	r0, [pc, #92]	; (8014a48 <FatFs_read_Check+0x88>)
 80149ec:	f7fe ff46 	bl	801387c <f_open>
 80149f0:	4603      	mov	r3, r0
 80149f2:	461a      	mov	r2, r3
 80149f4:	4b11      	ldr	r3, [pc, #68]	; (8014a3c <FatFs_read_Check+0x7c>)
 80149f6:	701a      	strb	r2, [r3, #0]
		if (MyFile_Res == FR_OK)
 80149f8:	4b10      	ldr	r3, [pc, #64]	; (8014a3c <FatFs_read_Check+0x7c>)
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d116      	bne.n	8014a2e <FatFs_read_Check+0x6e>
		{
		 MyFile_Res = f_read(&file, ReadBuffer, 100, &MyFile_Num); // 读取文件
 8014a00:	4b12      	ldr	r3, [pc, #72]	; (8014a4c <FatFs_read_Check+0x8c>)
 8014a02:	2264      	movs	r2, #100	; 0x64
 8014a04:	4912      	ldr	r1, [pc, #72]	; (8014a50 <FatFs_read_Check+0x90>)
 8014a06:	4810      	ldr	r0, [pc, #64]	; (8014a48 <FatFs_read_Check+0x88>)
 8014a08:	f7ff f9ef 	bl	8013dea <f_read>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	461a      	mov	r2, r3
 8014a10:	4b0a      	ldr	r3, [pc, #40]	; (8014a3c <FatFs_read_Check+0x7c>)
 8014a12:	701a      	strb	r2, [r3, #0]
		 LCD_ShowString(0, 0, 160, 128, 16, ReadBuffer); //lcd上显示出来读取的文件内容
 8014a14:	4b0e      	ldr	r3, [pc, #56]	; (8014a50 <FatFs_read_Check+0x90>)
 8014a16:	9301      	str	r3, [sp, #4]
 8014a18:	2310      	movs	r3, #16
 8014a1a:	9300      	str	r3, [sp, #0]
 8014a1c:	2380      	movs	r3, #128	; 0x80
 8014a1e:	22a0      	movs	r2, #160	; 0xa0
 8014a20:	2100      	movs	r1, #0
 8014a22:	2000      	movs	r0, #0
 8014a24:	f000 f9d6 	bl	8014dd4 <LCD_ShowString>
		 f_close(&file);
 8014a28:	4807      	ldr	r0, [pc, #28]	; (8014a48 <FatFs_read_Check+0x88>)
 8014a2a:	f7ff fd10 	bl	801444e <f_close>
		}
	}

}
 8014a2e:	bf00      	nop
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	08016a10 	.word	0x08016a10
 8014a38:	24000464 	.word	0x24000464
 8014a3c:	24000698 	.word	0x24000698
 8014a40:	08016a14 	.word	0x08016a14
 8014a44:	08016a18 	.word	0x08016a18
 8014a48:	2400069c 	.word	0x2400069c
 8014a4c:	240008cc 	.word	0x240008cc
 8014a50:	240008d0 	.word	0x240008d0

08014a54 <FatFs_write_Check>:

void FatFs_write_Check(void)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af02      	add	r7, sp, #8

  MyFile_Res = f_mount(&fs, "0:", 1);
 8014a5a:	2201      	movs	r2, #1
 8014a5c:	4932      	ldr	r1, [pc, #200]	; (8014b28 <FatFs_write_Check+0xd4>)
 8014a5e:	4833      	ldr	r0, [pc, #204]	; (8014b2c <FatFs_write_Check+0xd8>)
 8014a60:	f7fe fec6 	bl	80137f0 <f_mount>
 8014a64:	4603      	mov	r3, r0
 8014a66:	461a      	mov	r2, r3
 8014a68:	4b31      	ldr	r3, [pc, #196]	; (8014b30 <FatFs_write_Check+0xdc>)
 8014a6a:	701a      	strb	r2, [r3, #0]

  MyFile_Res = f_open(&file, "0:write_test.txt",FA_CREATE_ALWAYS | FA_WRITE); // 打开文件，若不存在则创建该文件
 8014a6c:	220a      	movs	r2, #10
 8014a6e:	4931      	ldr	r1, [pc, #196]	; (8014b34 <FatFs_write_Check+0xe0>)
 8014a70:	4831      	ldr	r0, [pc, #196]	; (8014b38 <FatFs_write_Check+0xe4>)
 8014a72:	f7fe ff03 	bl	801387c <f_open>
 8014a76:	4603      	mov	r3, r0
 8014a78:	461a      	mov	r2, r3
 8014a7a:	4b2d      	ldr	r3, [pc, #180]	; (8014b30 <FatFs_write_Check+0xdc>)
 8014a7c:	701a      	strb	r2, [r3, #0]
  if (MyFile_Res == FR_OK)
 8014a7e:	4b2c      	ldr	r3, [pc, #176]	; (8014b30 <FatFs_write_Check+0xdc>)
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d118      	bne.n	8014ab8 <FatFs_write_Check+0x64>
  {
     MyFile_Res = f_write(&file, WriteBuffer,sizeof(WriteBuffer), &MyFile_Num); // 向文件写入数据
 8014a86:	4b2d      	ldr	r3, [pc, #180]	; (8014b3c <FatFs_write_Check+0xe8>)
 8014a88:	2216      	movs	r2, #22
 8014a8a:	492d      	ldr	r1, [pc, #180]	; (8014b40 <FatFs_write_Check+0xec>)
 8014a8c:	482a      	ldr	r0, [pc, #168]	; (8014b38 <FatFs_write_Check+0xe4>)
 8014a8e:	f7ff faeb 	bl	8014068 <f_write>
 8014a92:	4603      	mov	r3, r0
 8014a94:	461a      	mov	r2, r3
 8014a96:	4b26      	ldr	r3, [pc, #152]	; (8014b30 <FatFs_write_Check+0xdc>)
 8014a98:	701a      	strb	r2, [r3, #0]
     if (MyFile_Res == FR_OK)
 8014a9a:	4b25      	ldr	r3, [pc, #148]	; (8014b30 <FatFs_write_Check+0xdc>)
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d118      	bne.n	8014ad4 <FatFs_write_Check+0x80>
     {
    	 LCD_ShowString(0, 32, 160, 128, 16, "write ok"); //lcd上显示出来读取的文件内容
 8014aa2:	4b28      	ldr	r3, [pc, #160]	; (8014b44 <FatFs_write_Check+0xf0>)
 8014aa4:	9301      	str	r3, [sp, #4]
 8014aa6:	2310      	movs	r3, #16
 8014aa8:	9300      	str	r3, [sp, #0]
 8014aaa:	2380      	movs	r3, #128	; 0x80
 8014aac:	22a0      	movs	r2, #160	; 0xa0
 8014aae:	2120      	movs	r1, #32
 8014ab0:	2000      	movs	r0, #0
 8014ab2:	f000 f98f 	bl	8014dd4 <LCD_ShowString>
 8014ab6:	e00d      	b.n	8014ad4 <FatFs_write_Check+0x80>
     }
  }
  else if(MyFile_Res == FR_INVALID_NAME)
 8014ab8:	4b1d      	ldr	r3, [pc, #116]	; (8014b30 <FatFs_write_Check+0xdc>)
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	2b06      	cmp	r3, #6
 8014abe:	d109      	bne.n	8014ad4 <FatFs_write_Check+0x80>
  {
	  LCD_ShowString(0, 32, 160, 128, 16, "FR_INVALID_NAME"); //lcd上显示出来读取的文件内容
 8014ac0:	4b21      	ldr	r3, [pc, #132]	; (8014b48 <FatFs_write_Check+0xf4>)
 8014ac2:	9301      	str	r3, [sp, #4]
 8014ac4:	2310      	movs	r3, #16
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	2380      	movs	r3, #128	; 0x80
 8014aca:	22a0      	movs	r2, #160	; 0xa0
 8014acc:	2120      	movs	r1, #32
 8014ace:	2000      	movs	r0, #0
 8014ad0:	f000 f980 	bl	8014dd4 <LCD_ShowString>
  }
  f_close(&file);
 8014ad4:	4818      	ldr	r0, [pc, #96]	; (8014b38 <FatFs_write_Check+0xe4>)
 8014ad6:	f7ff fcba 	bl	801444e <f_close>

  MyFile_Res = f_open(&file, "0:write_test.txt", FA_OPEN_EXISTING | FA_READ);
 8014ada:	2201      	movs	r2, #1
 8014adc:	4915      	ldr	r1, [pc, #84]	; (8014b34 <FatFs_write_Check+0xe0>)
 8014ade:	4816      	ldr	r0, [pc, #88]	; (8014b38 <FatFs_write_Check+0xe4>)
 8014ae0:	f7fe fecc 	bl	801387c <f_open>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	461a      	mov	r2, r3
 8014ae8:	4b11      	ldr	r3, [pc, #68]	; (8014b30 <FatFs_write_Check+0xdc>)
 8014aea:	701a      	strb	r2, [r3, #0]
  if (MyFile_Res == FR_OK)
 8014aec:	4b10      	ldr	r3, [pc, #64]	; (8014b30 <FatFs_write_Check+0xdc>)
 8014aee:	781b      	ldrb	r3, [r3, #0]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d116      	bne.n	8014b22 <FatFs_write_Check+0xce>
	{
	 MyFile_Res = f_read(&file, ReadBuffer, 100, &MyFile_Num); // 读取文件
 8014af4:	4b11      	ldr	r3, [pc, #68]	; (8014b3c <FatFs_write_Check+0xe8>)
 8014af6:	2264      	movs	r2, #100	; 0x64
 8014af8:	4914      	ldr	r1, [pc, #80]	; (8014b4c <FatFs_write_Check+0xf8>)
 8014afa:	480f      	ldr	r0, [pc, #60]	; (8014b38 <FatFs_write_Check+0xe4>)
 8014afc:	f7ff f975 	bl	8013dea <f_read>
 8014b00:	4603      	mov	r3, r0
 8014b02:	461a      	mov	r2, r3
 8014b04:	4b0a      	ldr	r3, [pc, #40]	; (8014b30 <FatFs_write_Check+0xdc>)
 8014b06:	701a      	strb	r2, [r3, #0]
	 LCD_ShowString(0, 48, 160, 128, 16, ReadBuffer); //lcd上显示出来读取的文件内容
 8014b08:	4b10      	ldr	r3, [pc, #64]	; (8014b4c <FatFs_write_Check+0xf8>)
 8014b0a:	9301      	str	r3, [sp, #4]
 8014b0c:	2310      	movs	r3, #16
 8014b0e:	9300      	str	r3, [sp, #0]
 8014b10:	2380      	movs	r3, #128	; 0x80
 8014b12:	22a0      	movs	r2, #160	; 0xa0
 8014b14:	2130      	movs	r1, #48	; 0x30
 8014b16:	2000      	movs	r0, #0
 8014b18:	f000 f95c 	bl	8014dd4 <LCD_ShowString>
	 f_close(&file);
 8014b1c:	4806      	ldr	r0, [pc, #24]	; (8014b38 <FatFs_write_Check+0xe4>)
 8014b1e:	f7ff fc96 	bl	801444e <f_close>
	}
}
 8014b22:	bf00      	nop
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}
 8014b28:	08016a10 	.word	0x08016a10
 8014b2c:	24000464 	.word	0x24000464
 8014b30:	24000698 	.word	0x24000698
 8014b34:	08016a28 	.word	0x08016a28
 8014b38:	2400069c 	.word	0x2400069c
 8014b3c:	240008cc 	.word	0x240008cc
 8014b40:	24000194 	.word	0x24000194
 8014b44:	08016a3c 	.word	0x08016a3c
 8014b48:	08016a48 	.word	0x08016a48
 8014b4c:	240008d0 	.word	0x240008d0

08014b50 <SD_GetCardInfo>:

//得到卡信息
//cardinfo:卡信息存储区
//返回值:错误状态
uint8_t SD_GetCardInfo(HAL_SD_CardInfoTypeDef *cardinfo)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b084      	sub	sp, #16
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
    uint8_t sta;
	sta=HAL_SD_GetCardInfo(&hsd1,cardinfo);
 8014b58:	6879      	ldr	r1, [r7, #4]
 8014b5a:	4805      	ldr	r0, [pc, #20]	; (8014b70 <SD_GetCardInfo+0x20>)
 8014b5c:	f7f4 fa1e 	bl	8008f9c <HAL_SD_GetCardInfo>
 8014b60:	4603      	mov	r3, r0
 8014b62:	73fb      	strb	r3, [r7, #15]
    return sta;
 8014b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	3710      	adds	r7, #16
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	240002a0 	.word	0x240002a0

08014b74 <SD_GetCardState>:

//判断SD卡是否可以传输(读写)数据
//返回值:SD_TRANSFER_OK 传输完成，可以继续下一次传输
//		 SD_TRANSFER_BUSY SD卡正忙，不可以进行下一次传输
uint8_t SD_GetCardState(void)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&hsd1)==HAL_SD_CARD_TRANSFER )?SD_TRANSFER_OK:SD_TRANSFER_BUSY);
 8014b78:	4805      	ldr	r0, [pc, #20]	; (8014b90 <SD_GetCardState+0x1c>)
 8014b7a:	f7f4 fb4d 	bl	8009218 <HAL_SD_GetCardState>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	2b04      	cmp	r3, #4
 8014b82:	bf14      	ite	ne
 8014b84:	2301      	movne	r3, #1
 8014b86:	2300      	moveq	r3, #0
 8014b88:	b2db      	uxtb	r3, r3
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	bd80      	pop	{r7, pc}
 8014b8e:	bf00      	nop
 8014b90:	240002a0 	.word	0x240002a0

08014b94 <SD_ReadDisk>:
//buf:读数据缓存区
//sector:扇区地址
//cnt:扇区个数
//返回值:错误状态;0,正常;其他,错误代码;
uint8_t SD_ReadDisk(uint8_t* buf,uint32_t sector,uint32_t cnt)
{
 8014b94:	b5b0      	push	{r4, r5, r7, lr}
 8014b96:	b08a      	sub	sp, #40	; 0x28
 8014b98:	af02      	add	r7, sp, #8
 8014b9a:	60f8      	str	r0, [r7, #12]
 8014b9c:	60b9      	str	r1, [r7, #8]
 8014b9e:	607a      	str	r2, [r7, #4]
    uint8_t sta=HAL_OK;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout=SD_TIMEOUT;
 8014ba4:	4b14      	ldr	r3, [pc, #80]	; (8014bf8 <SD_ReadDisk+0x64>)
 8014ba6:	61bb      	str	r3, [r7, #24]
    long long lsector=sector;
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	2200      	movs	r2, #0
 8014bac:	461c      	mov	r4, r3
 8014bae:	4615      	mov	r5, r2
 8014bb0:	e9c7 4504 	strd	r4, r5, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014bb4:	b672      	cpsid	i
}
 8014bb6:	bf00      	nop
    __disable_irq();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
	sta=HAL_SD_ReadBlocks(&hsd1, (uint8_t*)buf,lsector,cnt,SD_TIMEOUT);//多个sector的读操作
 8014bb8:	693a      	ldr	r2, [r7, #16]
 8014bba:	4b0f      	ldr	r3, [pc, #60]	; (8014bf8 <SD_ReadDisk+0x64>)
 8014bbc:	9300      	str	r3, [sp, #0]
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	68f9      	ldr	r1, [r7, #12]
 8014bc2:	480e      	ldr	r0, [pc, #56]	; (8014bfc <SD_ReadDisk+0x68>)
 8014bc4:	f7f3 fc70 	bl	80084a8 <HAL_SD_ReadBlocks>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	77fb      	strb	r3, [r7, #31]

	//等待SD卡读完
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8014bcc:	e007      	b.n	8014bde <SD_ReadDisk+0x4a>
    {
		if(timeout-- == 0)
 8014bce:	69bb      	ldr	r3, [r7, #24]
 8014bd0:	1e5a      	subs	r2, r3, #1
 8014bd2:	61ba      	str	r2, [r7, #24]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d102      	bne.n	8014bde <SD_ReadDisk+0x4a>
		{
			sta=SD_TRANSFER_BUSY;
 8014bd8:	2301      	movs	r3, #1
 8014bda:	77fb      	strb	r3, [r7, #31]
            break;
 8014bdc:	e004      	b.n	8014be8 <SD_ReadDisk+0x54>
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8014bde:	f7ff ffc9 	bl	8014b74 <SD_GetCardState>
 8014be2:	4603      	mov	r3, r0
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d1f2      	bne.n	8014bce <SD_ReadDisk+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8014be8:	b662      	cpsie	i
}
 8014bea:	bf00      	nop
		}
    }
	__enable_irq();//开启总中断
    return sta;
 8014bec:	7ffb      	ldrb	r3, [r7, #31]
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3720      	adds	r7, #32
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	05f5e100 	.word	0x05f5e100
 8014bfc:	240002a0 	.word	0x240002a0

08014c00 <SD_WriteDisk>:
//buf:写数据缓存区
//sector:扇区地址
//cnt:扇区个数
//返回值:错误状态;0,正常;其他,错误代码;
uint8_t SD_WriteDisk(uint8_t *buf,uint32_t sector,uint32_t cnt)
{
 8014c00:	b5b0      	push	{r4, r5, r7, lr}
 8014c02:	b08a      	sub	sp, #40	; 0x28
 8014c04:	af02      	add	r7, sp, #8
 8014c06:	60f8      	str	r0, [r7, #12]
 8014c08:	60b9      	str	r1, [r7, #8]
 8014c0a:	607a      	str	r2, [r7, #4]
    uint8_t sta=HAL_OK;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout=SD_TIMEOUT;
 8014c10:	4b14      	ldr	r3, [pc, #80]	; (8014c64 <SD_WriteDisk+0x64>)
 8014c12:	61bb      	str	r3, [r7, #24]
    long long lsector=sector;
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	2200      	movs	r2, #0
 8014c18:	461c      	mov	r4, r3
 8014c1a:	4615      	mov	r5, r2
 8014c1c:	e9c7 4504 	strd	r4, r5, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014c20:	b672      	cpsid	i
}
 8014c22:	bf00      	nop
    __disable_irq();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
	sta=HAL_SD_WriteBlocks(&hsd1,(uint8_t*)buf,lsector,cnt,SD_TIMEOUT);//多个sector的写操作
 8014c24:	693a      	ldr	r2, [r7, #16]
 8014c26:	4b0f      	ldr	r3, [pc, #60]	; (8014c64 <SD_WriteDisk+0x64>)
 8014c28:	9300      	str	r3, [sp, #0]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	68f9      	ldr	r1, [r7, #12]
 8014c2e:	480e      	ldr	r0, [pc, #56]	; (8014c68 <SD_WriteDisk+0x68>)
 8014c30:	f7f3 fdc4 	bl	80087bc <HAL_SD_WriteBlocks>
 8014c34:	4603      	mov	r3, r0
 8014c36:	77fb      	strb	r3, [r7, #31]

	//等待SD卡写完
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8014c38:	e007      	b.n	8014c4a <SD_WriteDisk+0x4a>
    {
		if(timeout-- == 0)
 8014c3a:	69bb      	ldr	r3, [r7, #24]
 8014c3c:	1e5a      	subs	r2, r3, #1
 8014c3e:	61ba      	str	r2, [r7, #24]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d102      	bne.n	8014c4a <SD_WriteDisk+0x4a>
		{
			sta=SD_TRANSFER_BUSY;
 8014c44:	2301      	movs	r3, #1
 8014c46:	77fb      	strb	r3, [r7, #31]
            break;
 8014c48:	e004      	b.n	8014c54 <SD_WriteDisk+0x54>
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8014c4a:	f7ff ff93 	bl	8014b74 <SD_GetCardState>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d1f2      	bne.n	8014c3a <SD_WriteDisk+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8014c54:	b662      	cpsie	i
}
 8014c56:	bf00      	nop
		}
    }
	__enable_irq();//开启总中断
    return sta;
 8014c58:	7ffb      	ldrb	r3, [r7, #31]
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3720      	adds	r7, #32
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bdb0      	pop	{r4, r5, r7, pc}
 8014c62:	bf00      	nop
 8014c64:	05f5e100 	.word	0x05f5e100
 8014c68:	240002a0 	.word	0x240002a0

08014c6c <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size, uint8_t mode)
{
 8014c6c:	b590      	push	{r4, r7, lr}
 8014c6e:	b085      	sub	sp, #20
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	4604      	mov	r4, r0
 8014c74:	4608      	mov	r0, r1
 8014c76:	4611      	mov	r1, r2
 8014c78:	461a      	mov	r2, r3
 8014c7a:	4623      	mov	r3, r4
 8014c7c:	80fb      	strh	r3, [r7, #6]
 8014c7e:	4603      	mov	r3, r0
 8014c80:	80bb      	strh	r3, [r7, #4]
 8014c82:	460b      	mov	r3, r1
 8014c84:	70fb      	strb	r3, [r7, #3]
 8014c86:	4613      	mov	r3, r2
 8014c88:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8014c8a:	88bb      	ldrh	r3, [r7, #4]
 8014c8c:	817b      	strh	r3, [r7, #10]
    uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);		//得到字体一个字符对应点阵集所占的字节数
 8014c8e:	78bb      	ldrb	r3, [r7, #2]
 8014c90:	08db      	lsrs	r3, r3, #3
 8014c92:	b2db      	uxtb	r3, r3
 8014c94:	461a      	mov	r2, r3
 8014c96:	78bb      	ldrb	r3, [r7, #2]
 8014c98:	f003 0307 	and.w	r3, r3, #7
 8014c9c:	b2db      	uxtb	r3, r3
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	bf14      	ite	ne
 8014ca2:	2301      	movne	r3, #1
 8014ca4:	2300      	moveq	r3, #0
 8014ca6:	b2db      	uxtb	r3, r3
 8014ca8:	4413      	add	r3, r2
 8014caa:	b2da      	uxtb	r2, r3
 8014cac:	78bb      	ldrb	r3, [r7, #2]
 8014cae:	085b      	lsrs	r3, r3, #1
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	fb12 f303 	smulbb	r3, r2, r3
 8014cb6:	727b      	strb	r3, [r7, #9]
    num = num - ' '; //得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8014cb8:	78fb      	ldrb	r3, [r7, #3]
 8014cba:	3b20      	subs	r3, #32
 8014cbc:	70fb      	strb	r3, [r7, #3]

    for (t = 0; t < csize; t++)
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	737b      	strb	r3, [r7, #13]
 8014cc2:	e073      	b.n	8014dac <LCD_ShowChar+0x140>
    {
        if (size == 12)temp = asc2_1206[num][t]; 	 	//调用1206字体
 8014cc4:	78bb      	ldrb	r3, [r7, #2]
 8014cc6:	2b0c      	cmp	r3, #12
 8014cc8:	d10b      	bne.n	8014ce2 <LCD_ShowChar+0x76>
 8014cca:	78fa      	ldrb	r2, [r7, #3]
 8014ccc:	7b79      	ldrb	r1, [r7, #13]
 8014cce:	483d      	ldr	r0, [pc, #244]	; (8014dc4 <LCD_ShowChar+0x158>)
 8014cd0:	4613      	mov	r3, r2
 8014cd2:	005b      	lsls	r3, r3, #1
 8014cd4:	4413      	add	r3, r2
 8014cd6:	009b      	lsls	r3, r3, #2
 8014cd8:	4403      	add	r3, r0
 8014cda:	440b      	add	r3, r1
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	73fb      	strb	r3, [r7, #15]
 8014ce0:	e025      	b.n	8014d2e <LCD_ShowChar+0xc2>
        else if (size == 16)temp = asc2_1608[num][t];	//调用1608字体
 8014ce2:	78bb      	ldrb	r3, [r7, #2]
 8014ce4:	2b10      	cmp	r3, #16
 8014ce6:	d108      	bne.n	8014cfa <LCD_ShowChar+0x8e>
 8014ce8:	78fa      	ldrb	r2, [r7, #3]
 8014cea:	7b7b      	ldrb	r3, [r7, #13]
 8014cec:	4936      	ldr	r1, [pc, #216]	; (8014dc8 <LCD_ShowChar+0x15c>)
 8014cee:	0112      	lsls	r2, r2, #4
 8014cf0:	440a      	add	r2, r1
 8014cf2:	4413      	add	r3, r2
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	73fb      	strb	r3, [r7, #15]
 8014cf8:	e019      	b.n	8014d2e <LCD_ShowChar+0xc2>
        else if (size == 24)temp = asc2_2412[num][t];	//调用2412字体
 8014cfa:	78bb      	ldrb	r3, [r7, #2]
 8014cfc:	2b18      	cmp	r3, #24
 8014cfe:	d10b      	bne.n	8014d18 <LCD_ShowChar+0xac>
 8014d00:	78fa      	ldrb	r2, [r7, #3]
 8014d02:	7b79      	ldrb	r1, [r7, #13]
 8014d04:	4831      	ldr	r0, [pc, #196]	; (8014dcc <LCD_ShowChar+0x160>)
 8014d06:	4613      	mov	r3, r2
 8014d08:	00db      	lsls	r3, r3, #3
 8014d0a:	4413      	add	r3, r2
 8014d0c:	009b      	lsls	r3, r3, #2
 8014d0e:	4403      	add	r3, r0
 8014d10:	440b      	add	r3, r1
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	73fb      	strb	r3, [r7, #15]
 8014d16:	e00a      	b.n	8014d2e <LCD_ShowChar+0xc2>
        else if (size == 32)temp = asc2_3216[num][t];	//调用3216字体
 8014d18:	78bb      	ldrb	r3, [r7, #2]
 8014d1a:	2b20      	cmp	r3, #32
 8014d1c:	d14b      	bne.n	8014db6 <LCD_ShowChar+0x14a>
 8014d1e:	78fa      	ldrb	r2, [r7, #3]
 8014d20:	7b7b      	ldrb	r3, [r7, #13]
 8014d22:	492b      	ldr	r1, [pc, #172]	; (8014dd0 <LCD_ShowChar+0x164>)
 8014d24:	01d2      	lsls	r2, r2, #7
 8014d26:	440a      	add	r2, r1
 8014d28:	4413      	add	r3, r2
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	73fb      	strb	r3, [r7, #15]
        else return;								//没有的字库

        for (t1 = 0; t1 < 8; t1++)
 8014d2e:	2300      	movs	r3, #0
 8014d30:	73bb      	strb	r3, [r7, #14]
 8014d32:	e033      	b.n	8014d9c <LCD_ShowChar+0x130>
        {
            if (temp & 0x80)ST7735_DrawPixel(x, y, RED);
 8014d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	da07      	bge.n	8014d4c <LCD_ShowChar+0xe0>
 8014d3c:	88b9      	ldrh	r1, [r7, #4]
 8014d3e:	88fb      	ldrh	r3, [r7, #6]
 8014d40:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8014d44:	4618      	mov	r0, r3
 8014d46:	f000 fadf 	bl	8015308 <ST7735_DrawPixel>
 8014d4a:	e00a      	b.n	8014d62 <LCD_ShowChar+0xf6>
            else if (mode == 0)ST7735_DrawPixel(x, y, WHITE);
 8014d4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d106      	bne.n	8014d62 <LCD_ShowChar+0xf6>
 8014d54:	88b9      	ldrh	r1, [r7, #4]
 8014d56:	88fb      	ldrh	r3, [r7, #6]
 8014d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f000 fad3 	bl	8015308 <ST7735_DrawPixel>

            temp <<= 1;
 8014d62:	7bfb      	ldrb	r3, [r7, #15]
 8014d64:	005b      	lsls	r3, r3, #1
 8014d66:	73fb      	strb	r3, [r7, #15]
            y++;
 8014d68:	88bb      	ldrh	r3, [r7, #4]
 8014d6a:	3301      	adds	r3, #1
 8014d6c:	80bb      	strh	r3, [r7, #4]

            if (y >= 600)return;		//超区域了
 8014d6e:	88bb      	ldrh	r3, [r7, #4]
 8014d70:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8014d74:	d221      	bcs.n	8014dba <LCD_ShowChar+0x14e>

            if ((y - y0) == size)
 8014d76:	88ba      	ldrh	r2, [r7, #4]
 8014d78:	897b      	ldrh	r3, [r7, #10]
 8014d7a:	1ad2      	subs	r2, r2, r3
 8014d7c:	78bb      	ldrb	r3, [r7, #2]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d109      	bne.n	8014d96 <LCD_ShowChar+0x12a>
            {
                y = y0;
 8014d82:	897b      	ldrh	r3, [r7, #10]
 8014d84:	80bb      	strh	r3, [r7, #4]
                x++;
 8014d86:	88fb      	ldrh	r3, [r7, #6]
 8014d88:	3301      	adds	r3, #1
 8014d8a:	80fb      	strh	r3, [r7, #6]

                if (x >= 1024)return;	//超区域了
 8014d8c:	88fb      	ldrh	r3, [r7, #6]
 8014d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d92:	d307      	bcc.n	8014da4 <LCD_ShowChar+0x138>
 8014d94:	e012      	b.n	8014dbc <LCD_ShowChar+0x150>
        for (t1 = 0; t1 < 8; t1++)
 8014d96:	7bbb      	ldrb	r3, [r7, #14]
 8014d98:	3301      	adds	r3, #1
 8014d9a:	73bb      	strb	r3, [r7, #14]
 8014d9c:	7bbb      	ldrb	r3, [r7, #14]
 8014d9e:	2b07      	cmp	r3, #7
 8014da0:	d9c8      	bls.n	8014d34 <LCD_ShowChar+0xc8>
 8014da2:	e000      	b.n	8014da6 <LCD_ShowChar+0x13a>

                break;
 8014da4:	bf00      	nop
    for (t = 0; t < csize; t++)
 8014da6:	7b7b      	ldrb	r3, [r7, #13]
 8014da8:	3301      	adds	r3, #1
 8014daa:	737b      	strb	r3, [r7, #13]
 8014dac:	7b7a      	ldrb	r2, [r7, #13]
 8014dae:	7a7b      	ldrb	r3, [r7, #9]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d387      	bcc.n	8014cc4 <LCD_ShowChar+0x58>
 8014db4:	e002      	b.n	8014dbc <LCD_ShowChar+0x150>
        else return;								//没有的字库
 8014db6:	bf00      	nop
 8014db8:	e000      	b.n	8014dbc <LCD_ShowChar+0x150>
            if (y >= 600)return;		//超区域了
 8014dba:	bf00      	nop
            }
        }
    }
}
 8014dbc:	3714      	adds	r7, #20
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd90      	pop	{r4, r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	0804168c 	.word	0x0804168c
 8014dc8:	08041b00 	.word	0x08041b00
 8014dcc:	080420f0 	.word	0x080420f0
 8014dd0:	08042e4c 	.word	0x08042e4c

08014dd4 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, uint8_t *p)
{
 8014dd4:	b590      	push	{r4, r7, lr}
 8014dd6:	b087      	sub	sp, #28
 8014dd8:	af02      	add	r7, sp, #8
 8014dda:	4604      	mov	r4, r0
 8014ddc:	4608      	mov	r0, r1
 8014dde:	4611      	mov	r1, r2
 8014de0:	461a      	mov	r2, r3
 8014de2:	4623      	mov	r3, r4
 8014de4:	80fb      	strh	r3, [r7, #6]
 8014de6:	4603      	mov	r3, r0
 8014de8:	80bb      	strh	r3, [r7, #4]
 8014dea:	460b      	mov	r3, r1
 8014dec:	807b      	strh	r3, [r7, #2]
 8014dee:	4613      	mov	r3, r2
 8014df0:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8014df2:	88fb      	ldrh	r3, [r7, #6]
 8014df4:	73fb      	strb	r3, [r7, #15]
    width += x;
 8014df6:	887a      	ldrh	r2, [r7, #2]
 8014df8:	88fb      	ldrh	r3, [r7, #6]
 8014dfa:	4413      	add	r3, r2
 8014dfc:	807b      	strh	r3, [r7, #2]
    height += y;
 8014dfe:	883a      	ldrh	r2, [r7, #0]
 8014e00:	88bb      	ldrh	r3, [r7, #4]
 8014e02:	4413      	add	r3, r2
 8014e04:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' ')) //判断是不是非法字符!
 8014e06:	e024      	b.n	8014e52 <LCD_ShowString+0x7e>
    {
        if (x >= width)
 8014e08:	88fa      	ldrh	r2, [r7, #6]
 8014e0a:	887b      	ldrh	r3, [r7, #2]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d307      	bcc.n	8014e20 <LCD_ShowString+0x4c>
        {
            x = x0;
 8014e10:	7bfb      	ldrb	r3, [r7, #15]
 8014e12:	80fb      	strh	r3, [r7, #6]
            y += size;
 8014e14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014e18:	b29a      	uxth	r2, r3
 8014e1a:	88bb      	ldrh	r3, [r7, #4]
 8014e1c:	4413      	add	r3, r2
 8014e1e:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break; //退出
 8014e20:	88ba      	ldrh	r2, [r7, #4]
 8014e22:	883b      	ldrh	r3, [r7, #0]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d21d      	bcs.n	8014e64 <LCD_ShowString+0x90>

        LCD_ShowChar(x, y, *p, size, 0);
 8014e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e2a:	781a      	ldrb	r2, [r3, #0]
 8014e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014e30:	88b9      	ldrh	r1, [r7, #4]
 8014e32:	88f8      	ldrh	r0, [r7, #6]
 8014e34:	2400      	movs	r4, #0
 8014e36:	9400      	str	r4, [sp, #0]
 8014e38:	f7ff ff18 	bl	8014c6c <LCD_ShowChar>
        x += size / 2;
 8014e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014e40:	085b      	lsrs	r3, r3, #1
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	b29a      	uxth	r2, r3
 8014e46:	88fb      	ldrh	r3, [r7, #6]
 8014e48:	4413      	add	r3, r2
 8014e4a:	80fb      	strh	r3, [r7, #6]
        p++;
 8014e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4e:	3301      	adds	r3, #1
 8014e50:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' ')) //判断是不是非法字符!
 8014e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e54:	781b      	ldrb	r3, [r3, #0]
 8014e56:	2b7e      	cmp	r3, #126	; 0x7e
 8014e58:	d805      	bhi.n	8014e66 <LCD_ShowString+0x92>
 8014e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	2b1f      	cmp	r3, #31
 8014e60:	d8d2      	bhi.n	8014e08 <LCD_ShowString+0x34>
    }
}
 8014e62:	e000      	b.n	8014e66 <LCD_ShowString+0x92>
        if (y >= height)break; //退出
 8014e64:	bf00      	nop
}
 8014e66:	bf00      	nop
 8014e68:	3714      	adds	r7, #20
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd90      	pop	{r4, r7, pc}
	...

08014e70 <lcd_init>:

void lcd_init(void)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	af00      	add	r7, sp, #0
	uint32_t i;
	HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8014e74:	2201      	movs	r2, #1
 8014e76:	2120      	movs	r1, #32
 8014e78:	4810      	ldr	r0, [pc, #64]	; (8014ebc <lcd_init+0x4c>)
 8014e7a:	f7ee f9c3 	bl	8003204 <HAL_GPIO_WritePin>
	ST7735_Init();
 8014e7e:	f000 f8b5 	bl	8014fec <ST7735_Init>
	ST7735_FillScreen(RED);
 8014e82:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8014e86:	f000 fa74 	bl	8015372 <ST7735_FillScreen>
	HAL_Delay(200);
 8014e8a:	20c8      	movs	r0, #200	; 0xc8
 8014e8c:	f7eb ffc2 	bl	8000e14 <HAL_Delay>
	ST7735_FillScreen(GREEN);
 8014e90:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8014e94:	f000 fa6d 	bl	8015372 <ST7735_FillScreen>
	HAL_Delay(200);
 8014e98:	20c8      	movs	r0, #200	; 0xc8
 8014e9a:	f7eb ffbb 	bl	8000e14 <HAL_Delay>
	ST7735_FillScreen(BLUE);
 8014e9e:	201f      	movs	r0, #31
 8014ea0:	f000 fa67 	bl	8015372 <ST7735_FillScreen>
	HAL_Delay(200);
 8014ea4:	20c8      	movs	r0, #200	; 0xc8
 8014ea6:	f7eb ffb5 	bl	8000e14 <HAL_Delay>
	ST7735_FillScreen(WHITE);
 8014eaa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014eae:	f000 fa60 	bl	8015372 <ST7735_FillScreen>
	HAL_Delay(200);
 8014eb2:	20c8      	movs	r0, #200	; 0xc8
 8014eb4:	f7eb ffae 	bl	8000e14 <HAL_Delay>
//	LCD_ShowString(0, 0, 160, 128, 16, " lcd display test ");
//    for(i=0;i<100;i++)
//    {
//    	ST7735_DrawPixel(i,i,RED);
//    }
}
 8014eb8:	bf00      	nop
 8014eba:	bd80      	pop	{r7, pc}
 8014ebc:	58020000 	.word	0x58020000

08014ec0 <ST7735_Reset>:
#define ST7735_MADCTL_MY  0x80
#define ST7735_MADCTL_MV  0x20
#define ST7735_MADCTL_RGB 0x00

void ST7735_Reset(void)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014eca:	4808      	ldr	r0, [pc, #32]	; (8014eec <ST7735_Reset+0x2c>)
 8014ecc:	f7ee f99a 	bl	8003204 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8014ed0:	2064      	movs	r0, #100	; 0x64
 8014ed2:	f7eb ff9f 	bl	8000e14 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8014ed6:	2201      	movs	r2, #1
 8014ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014edc:	4803      	ldr	r0, [pc, #12]	; (8014eec <ST7735_Reset+0x2c>)
 8014ede:	f7ee f991 	bl	8003204 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8014ee2:	2064      	movs	r0, #100	; 0x64
 8014ee4:	f7eb ff96 	bl	8000e14 <HAL_Delay>
}
 8014ee8:	bf00      	nop
 8014eea:	bd80      	pop	{r7, pc}
 8014eec:	58020c00 	.word	0x58020c00

08014ef0 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8014efa:	2200      	movs	r2, #0
 8014efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8014f00:	480c      	ldr	r0, [pc, #48]	; (8014f34 <ST7735_WriteCommand+0x44>)
 8014f02:	f7ee f97f 	bl	8003204 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8014f06:	2200      	movs	r2, #0
 8014f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014f0c:	480a      	ldr	r0, [pc, #40]	; (8014f38 <ST7735_WriteCommand+0x48>)
 8014f0e:	f7ee f979 	bl	8003204 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, 100);
 8014f12:	1df9      	adds	r1, r7, #7
 8014f14:	2364      	movs	r3, #100	; 0x64
 8014f16:	2201      	movs	r2, #1
 8014f18:	4808      	ldr	r0, [pc, #32]	; (8014f3c <ST7735_WriteCommand+0x4c>)
 8014f1a:	f7f4 fe7b 	bl	8009c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8014f1e:	2201      	movs	r2, #1
 8014f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014f24:	4804      	ldr	r0, [pc, #16]	; (8014f38 <ST7735_WriteCommand+0x48>)
 8014f26:	f7ee f96d 	bl	8003204 <HAL_GPIO_WritePin>
}
 8014f2a:	bf00      	nop
 8014f2c:	3708      	adds	r7, #8
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}
 8014f32:	bf00      	nop
 8014f34:	58020c00 	.word	0x58020c00
 8014f38:	58020400 	.word	0x58020400
 8014f3c:	2400031c 	.word	0x2400031c

08014f40 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t data)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	4603      	mov	r3, r0
 8014f48:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8014f50:	480c      	ldr	r0, [pc, #48]	; (8014f84 <ST7735_WriteData+0x44>)
 8014f52:	f7ee f957 	bl	8003204 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8014f56:	2200      	movs	r2, #0
 8014f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014f5c:	480a      	ldr	r0, [pc, #40]	; (8014f88 <ST7735_WriteData+0x48>)
 8014f5e:	f7ee f951 	bl	8003204 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8014f62:	1df9      	adds	r1, r7, #7
 8014f64:	2364      	movs	r3, #100	; 0x64
 8014f66:	2201      	movs	r2, #1
 8014f68:	4808      	ldr	r0, [pc, #32]	; (8014f8c <ST7735_WriteData+0x4c>)
 8014f6a:	f7f4 fe53 	bl	8009c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8014f6e:	2201      	movs	r2, #1
 8014f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014f74:	4804      	ldr	r0, [pc, #16]	; (8014f88 <ST7735_WriteData+0x48>)
 8014f76:	f7ee f945 	bl	8003204 <HAL_GPIO_WritePin>
}
 8014f7a:	bf00      	nop
 8014f7c:	3708      	adds	r7, #8
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}
 8014f82:	bf00      	nop
 8014f84:	58020c00 	.word	0x58020c00
 8014f88:	58020400 	.word	0x58020400
 8014f8c:	2400031c 	.word	0x2400031c

08014f90 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t rotation)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b084      	sub	sp, #16
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	4603      	mov	r3, r0
 8014f98:	71fb      	strb	r3, [r7, #7]
    uint8_t madctl = 0;
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	73fb      	strb	r3, [r7, #15]

    switch (rotation)
 8014f9e:	79fb      	ldrb	r3, [r7, #7]
 8014fa0:	2b03      	cmp	r3, #3
 8014fa2:	d817      	bhi.n	8014fd4 <ST7735_SetRotation+0x44>
 8014fa4:	a201      	add	r2, pc, #4	; (adr r2, 8014fac <ST7735_SetRotation+0x1c>)
 8014fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014faa:	bf00      	nop
 8014fac:	08014fbd 	.word	0x08014fbd
 8014fb0:	08014fc3 	.word	0x08014fc3
 8014fb4:	08014fc9 	.word	0x08014fc9
 8014fb8:	08014fcf 	.word	0x08014fcf
    {
        case 0:
            madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8014fbc:	23c0      	movs	r3, #192	; 0xc0
 8014fbe:	73fb      	strb	r3, [r7, #15]
            break;
 8014fc0:	e008      	b.n	8014fd4 <ST7735_SetRotation+0x44>
        case 1:
            madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8014fc2:	23a0      	movs	r3, #160	; 0xa0
 8014fc4:	73fb      	strb	r3, [r7, #15]
            break;
 8014fc6:	e005      	b.n	8014fd4 <ST7735_SetRotation+0x44>
        case 2:
            madctl = ST7735_MADCTL_RGB;
 8014fc8:	2300      	movs	r3, #0
 8014fca:	73fb      	strb	r3, [r7, #15]
            break;
 8014fcc:	e002      	b.n	8014fd4 <ST7735_SetRotation+0x44>
        case 3:
            madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8014fce:	2360      	movs	r3, #96	; 0x60
 8014fd0:	73fb      	strb	r3, [r7, #15]
            break;
 8014fd2:	bf00      	nop
    }

    ST7735_WriteCommand(ST7735_MADCTL);
 8014fd4:	2036      	movs	r0, #54	; 0x36
 8014fd6:	f7ff ff8b 	bl	8014ef0 <ST7735_WriteCommand>
    ST7735_WriteData(madctl);
 8014fda:	7bfb      	ldrb	r3, [r7, #15]
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7ff ffaf 	bl	8014f40 <ST7735_WriteData>
}
 8014fe2:	bf00      	nop
 8014fe4:	3710      	adds	r7, #16
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop

08014fec <ST7735_Init>:

void ST7735_Init(void) {
 8014fec:	b580      	push	{r7, lr}
 8014fee:	af00      	add	r7, sp, #0
  // Initialize the display
  ST7735_Reset();
 8014ff0:	f7ff ff66 	bl	8014ec0 <ST7735_Reset>
  ST7735_WriteCommand(ST7735_SLPOUT);
 8014ff4:	2011      	movs	r0, #17
 8014ff6:	f7ff ff7b 	bl	8014ef0 <ST7735_WriteCommand>
  HAL_Delay(120);
 8014ffa:	2078      	movs	r0, #120	; 0x78
 8014ffc:	f7eb ff0a 	bl	8000e14 <HAL_Delay>
  ST7735_WriteCommand(ST7735_FRMCTR1);
 8015000:	20b1      	movs	r0, #177	; 0xb1
 8015002:	f7ff ff75 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 8015006:	2001      	movs	r0, #1
 8015008:	f7ff ff9a 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 801500c:	202c      	movs	r0, #44	; 0x2c
 801500e:	f7ff ff97 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8015012:	202d      	movs	r0, #45	; 0x2d
 8015014:	f7ff ff94 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_FRMCTR2);
 8015018:	20b2      	movs	r0, #178	; 0xb2
 801501a:	f7ff ff69 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 801501e:	2001      	movs	r0, #1
 8015020:	f7ff ff8e 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8015024:	202c      	movs	r0, #44	; 0x2c
 8015026:	f7ff ff8b 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 801502a:	202d      	movs	r0, #45	; 0x2d
 801502c:	f7ff ff88 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_FRMCTR3);
 8015030:	20b3      	movs	r0, #179	; 0xb3
 8015032:	f7ff ff5d 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 8015036:	2001      	movs	r0, #1
 8015038:	f7ff ff82 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 801503c:	202c      	movs	r0, #44	; 0x2c
 801503e:	f7ff ff7f 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8015042:	202d      	movs	r0, #45	; 0x2d
 8015044:	f7ff ff7c 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x01);
 8015048:	2001      	movs	r0, #1
 801504a:	f7ff ff79 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 801504e:	202c      	movs	r0, #44	; 0x2c
 8015050:	f7ff ff76 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8015054:	202d      	movs	r0, #45	; 0x2d
 8015056:	f7ff ff73 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_INVCTR);
 801505a:	20b4      	movs	r0, #180	; 0xb4
 801505c:	f7ff ff48 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x07);
 8015060:	2007      	movs	r0, #7
 8015062:	f7ff ff6d 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR1);
 8015066:	20c0      	movs	r0, #192	; 0xc0
 8015068:	f7ff ff42 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0xA2);
 801506c:	20a2      	movs	r0, #162	; 0xa2
 801506e:	f7ff ff67 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x02);
 8015072:	2002      	movs	r0, #2
 8015074:	f7ff ff64 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x84);
 8015078:	2084      	movs	r0, #132	; 0x84
 801507a:	f7ff ff61 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR2);
 801507e:	20c1      	movs	r0, #193	; 0xc1
 8015080:	f7ff ff36 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0xC5);
 8015084:	20c5      	movs	r0, #197	; 0xc5
 8015086:	f7ff ff5b 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR3);
 801508a:	20c2      	movs	r0, #194	; 0xc2
 801508c:	f7ff ff30 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x0A);
 8015090:	200a      	movs	r0, #10
 8015092:	f7ff ff55 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8015096:	2000      	movs	r0, #0
 8015098:	f7ff ff52 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR4);
 801509c:	20c3      	movs	r0, #195	; 0xc3
 801509e:	f7ff ff27 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x8A);
 80150a2:	208a      	movs	r0, #138	; 0x8a
 80150a4:	f7ff ff4c 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2A);
 80150a8:	202a      	movs	r0, #42	; 0x2a
 80150aa:	f7ff ff49 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR5);
 80150ae:	20c4      	movs	r0, #196	; 0xc4
 80150b0:	f7ff ff1e 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x8A);
 80150b4:	208a      	movs	r0, #138	; 0x8a
 80150b6:	f7ff ff43 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0xEE);
 80150ba:	20ee      	movs	r0, #238	; 0xee
 80150bc:	f7ff ff40 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_VMCTR1);
 80150c0:	20c5      	movs	r0, #197	; 0xc5
 80150c2:	f7ff ff15 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x0E);
 80150c6:	200e      	movs	r0, #14
 80150c8:	f7ff ff3a 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_INVOFF);
 80150cc:	2020      	movs	r0, #32
 80150ce:	f7ff ff0f 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteCommand(ST7735_COLMOD);
 80150d2:	203a      	movs	r0, #58	; 0x3a
 80150d4:	f7ff ff0c 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x05);
 80150d8:	2005      	movs	r0, #5
 80150da:	f7ff ff31 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_CASET);
 80150de:	202a      	movs	r0, #42	; 0x2a
 80150e0:	f7ff ff06 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 80150e4:	2000      	movs	r0, #0
 80150e6:	f7ff ff2b 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80150ea:	2000      	movs	r0, #0
 80150ec:	f7ff ff28 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80150f0:	2000      	movs	r0, #0
 80150f2:	f7ff ff25 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x7F);
 80150f6:	207f      	movs	r0, #127	; 0x7f
 80150f8:	f7ff ff22 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_RASET);
 80150fc:	202b      	movs	r0, #43	; 0x2b
 80150fe:	f7ff fef7 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8015102:	2000      	movs	r0, #0
 8015104:	f7ff ff1c 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8015108:	2000      	movs	r0, #0
 801510a:	f7ff ff19 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 801510e:	2000      	movs	r0, #0
 8015110:	f7ff ff16 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x9F);
 8015114:	209f      	movs	r0, #159	; 0x9f
 8015116:	f7ff ff13 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_GMCTRP1);
 801511a:	20e0      	movs	r0, #224	; 0xe0
 801511c:	f7ff fee8 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x02);
 8015120:	2002      	movs	r0, #2
 8015122:	f7ff ff0d 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x1C);
 8015126:	201c      	movs	r0, #28
 8015128:	f7ff ff0a 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x07);
 801512c:	2007      	movs	r0, #7
 801512e:	f7ff ff07 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x12);
 8015132:	2012      	movs	r0, #18
 8015134:	f7ff ff04 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x37);
 8015138:	2037      	movs	r0, #55	; 0x37
 801513a:	f7ff ff01 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x32);
 801513e:	2032      	movs	r0, #50	; 0x32
 8015140:	f7ff fefe 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 8015144:	2029      	movs	r0, #41	; 0x29
 8015146:	f7ff fefb 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 801514a:	202d      	movs	r0, #45	; 0x2d
 801514c:	f7ff fef8 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 8015150:	2029      	movs	r0, #41	; 0x29
 8015152:	f7ff fef5 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x25);
 8015156:	2025      	movs	r0, #37	; 0x25
 8015158:	f7ff fef2 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2B);
 801515c:	202b      	movs	r0, #43	; 0x2b
 801515e:	f7ff feef 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x39);
 8015162:	2039      	movs	r0, #57	; 0x39
 8015164:	f7ff feec 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8015168:	2000      	movs	r0, #0
 801516a:	f7ff fee9 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x01);
 801516e:	2001      	movs	r0, #1
 8015170:	f7ff fee6 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x03);
 8015174:	2003      	movs	r0, #3
 8015176:	f7ff fee3 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x10);
 801517a:	2010      	movs	r0, #16
 801517c:	f7ff fee0 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_GMCTRN1);
 8015180:	20e1      	movs	r0, #225	; 0xe1
 8015182:	f7ff feb5 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x03);
 8015186:	2003      	movs	r0, #3
 8015188:	f7ff feda 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x1D);
 801518c:	201d      	movs	r0, #29
 801518e:	f7ff fed7 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x07);
 8015192:	2007      	movs	r0, #7
 8015194:	f7ff fed4 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x06);
 8015198:	2006      	movs	r0, #6
 801519a:	f7ff fed1 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 801519e:	202e      	movs	r0, #46	; 0x2e
 80151a0:	f7ff fece 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 80151a4:	202c      	movs	r0, #44	; 0x2c
 80151a6:	f7ff fecb 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 80151aa:	2029      	movs	r0, #41	; 0x29
 80151ac:	f7ff fec8 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 80151b0:	202d      	movs	r0, #45	; 0x2d
 80151b2:	f7ff fec5 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 80151b6:	202e      	movs	r0, #46	; 0x2e
 80151b8:	f7ff fec2 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 80151bc:	202e      	movs	r0, #46	; 0x2e
 80151be:	f7ff febf 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x37);
 80151c2:	2037      	movs	r0, #55	; 0x37
 80151c4:	f7ff febc 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x3F);
 80151c8:	203f      	movs	r0, #63	; 0x3f
 80151ca:	f7ff feb9 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80151ce:	2000      	movs	r0, #0
 80151d0:	f7ff feb6 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80151d4:	2000      	movs	r0, #0
 80151d6:	f7ff feb3 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x02);
 80151da:	2002      	movs	r0, #2
 80151dc:	f7ff feb0 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x10);
 80151e0:	2010      	movs	r0, #16
 80151e2:	f7ff fead 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_NORON);
 80151e6:	2013      	movs	r0, #19
 80151e8:	f7ff fe82 	bl	8014ef0 <ST7735_WriteCommand>
  HAL_Delay(10);
 80151ec:	200a      	movs	r0, #10
 80151ee:	f7eb fe11 	bl	8000e14 <HAL_Delay>
  ST7735_WriteCommand(ST7735_DISPON);
 80151f2:	2029      	movs	r0, #41	; 0x29
 80151f4:	f7ff fe7c 	bl	8014ef0 <ST7735_WriteCommand>
  HAL_Delay(10);
 80151f8:	200a      	movs	r0, #10
 80151fa:	f7eb fe0b 	bl	8000e14 <HAL_Delay>

  ST7735_SetRotation(ST7735_ROTATION);
 80151fe:	2003      	movs	r0, #3
 8015200:	f7ff fec6 	bl	8014f90 <ST7735_SetRotation>
  ST7735_FillScreen(WHITE);
 8015204:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015208:	f000 f8b3 	bl	8015372 <ST7735_FillScreen>
}
 801520c:	bf00      	nop
 801520e:	bd80      	pop	{r7, pc}

08015210 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8015210:	b590      	push	{r4, r7, lr}
 8015212:	b083      	sub	sp, #12
 8015214:	af00      	add	r7, sp, #0
 8015216:	4604      	mov	r4, r0
 8015218:	4608      	mov	r0, r1
 801521a:	4611      	mov	r1, r2
 801521c:	461a      	mov	r2, r3
 801521e:	4623      	mov	r3, r4
 8015220:	71fb      	strb	r3, [r7, #7]
 8015222:	4603      	mov	r3, r0
 8015224:	71bb      	strb	r3, [r7, #6]
 8015226:	460b      	mov	r3, r1
 8015228:	717b      	strb	r3, [r7, #5]
 801522a:	4613      	mov	r3, r2
 801522c:	713b      	strb	r3, [r7, #4]
  y0 += ST7735_YSTART;

  x1 += ST7735_XSTART;
  y1 += ST7735_YSTART;

  ST7735_WriteCommand(ST7735_CASET);
 801522e:	202a      	movs	r0, #42	; 0x2a
 8015230:	f7ff fe5e 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8015234:	2000      	movs	r0, #0
 8015236:	f7ff fe83 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(x0 + ST7735_XSTART);
 801523a:	79fb      	ldrb	r3, [r7, #7]
 801523c:	4618      	mov	r0, r3
 801523e:	f7ff fe7f 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8015242:	2000      	movs	r0, #0
 8015244:	f7ff fe7c 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(x1 + ST7735_XSTART);
 8015248:	797b      	ldrb	r3, [r7, #5]
 801524a:	4618      	mov	r0, r3
 801524c:	f7ff fe78 	bl	8014f40 <ST7735_WriteData>

  ST7735_WriteCommand(ST7735_RASET);
 8015250:	202b      	movs	r0, #43	; 0x2b
 8015252:	f7ff fe4d 	bl	8014ef0 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8015256:	2000      	movs	r0, #0
 8015258:	f7ff fe72 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(y0 + ST7735_YSTART);
 801525c:	79bb      	ldrb	r3, [r7, #6]
 801525e:	4618      	mov	r0, r3
 8015260:	f7ff fe6e 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8015264:	2000      	movs	r0, #0
 8015266:	f7ff fe6b 	bl	8014f40 <ST7735_WriteData>
  ST7735_WriteData(y1 + ST7735_YSTART);
 801526a:	793b      	ldrb	r3, [r7, #4]
 801526c:	4618      	mov	r0, r3
 801526e:	f7ff fe67 	bl	8014f40 <ST7735_WriteData>
}
 8015272:	bf00      	nop
 8015274:	370c      	adds	r7, #12
 8015276:	46bd      	mov	sp, r7
 8015278:	bd90      	pop	{r4, r7, pc}

0801527a <ST7735_DrawRectangle>:

void ST7735_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 801527a:	b590      	push	{r4, r7, lr}
 801527c:	b085      	sub	sp, #20
 801527e:	af00      	add	r7, sp, #0
 8015280:	4604      	mov	r4, r0
 8015282:	4608      	mov	r0, r1
 8015284:	4611      	mov	r1, r2
 8015286:	461a      	mov	r2, r3
 8015288:	4623      	mov	r3, r4
 801528a:	80fb      	strh	r3, [r7, #6]
 801528c:	4603      	mov	r3, r0
 801528e:	80bb      	strh	r3, [r7, #4]
 8015290:	460b      	mov	r3, r1
 8015292:	807b      	strh	r3, [r7, #2]
 8015294:	4613      	mov	r3, r2
 8015296:	803b      	strh	r3, [r7, #0]
  ST7735_SetAddressWindow(x, y, x + width - 1, y + height - 1);
 8015298:	88fb      	ldrh	r3, [r7, #6]
 801529a:	b2d8      	uxtb	r0, r3
 801529c:	88bb      	ldrh	r3, [r7, #4]
 801529e:	b2d9      	uxtb	r1, r3
 80152a0:	88fb      	ldrh	r3, [r7, #6]
 80152a2:	b2da      	uxtb	r2, r3
 80152a4:	887b      	ldrh	r3, [r7, #2]
 80152a6:	b2db      	uxtb	r3, r3
 80152a8:	4413      	add	r3, r2
 80152aa:	b2db      	uxtb	r3, r3
 80152ac:	3b01      	subs	r3, #1
 80152ae:	b2dc      	uxtb	r4, r3
 80152b0:	88bb      	ldrh	r3, [r7, #4]
 80152b2:	b2da      	uxtb	r2, r3
 80152b4:	883b      	ldrh	r3, [r7, #0]
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	4413      	add	r3, r2
 80152ba:	b2db      	uxtb	r3, r3
 80152bc:	3b01      	subs	r3, #1
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	4622      	mov	r2, r4
 80152c2:	f7ff ffa5 	bl	8015210 <ST7735_SetAddressWindow>
  ST7735_WriteCommand(ST7735_RAMWR);
 80152c6:	202c      	movs	r0, #44	; 0x2c
 80152c8:	f7ff fe12 	bl	8014ef0 <ST7735_WriteCommand>
  // Write the color data
  for (uint16_t i = 0; i < width * height; i++)
 80152cc:	2300      	movs	r3, #0
 80152ce:	81fb      	strh	r3, [r7, #14]
 80152d0:	e00e      	b.n	80152f0 <ST7735_DrawRectangle+0x76>
  {
    ST7735_WriteData(color >> 8);
 80152d2:	8c3b      	ldrh	r3, [r7, #32]
 80152d4:	0a1b      	lsrs	r3, r3, #8
 80152d6:	b29b      	uxth	r3, r3
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	4618      	mov	r0, r3
 80152dc:	f7ff fe30 	bl	8014f40 <ST7735_WriteData>
    ST7735_WriteData(color & 0xFF);
 80152e0:	8c3b      	ldrh	r3, [r7, #32]
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7ff fe2b 	bl	8014f40 <ST7735_WriteData>
  for (uint16_t i = 0; i < width * height; i++)
 80152ea:	89fb      	ldrh	r3, [r7, #14]
 80152ec:	3301      	adds	r3, #1
 80152ee:	81fb      	strh	r3, [r7, #14]
 80152f0:	89fa      	ldrh	r2, [r7, #14]
 80152f2:	887b      	ldrh	r3, [r7, #2]
 80152f4:	8839      	ldrh	r1, [r7, #0]
 80152f6:	fb01 f303 	mul.w	r3, r1, r3
 80152fa:	429a      	cmp	r2, r3
 80152fc:	dbe9      	blt.n	80152d2 <ST7735_DrawRectangle+0x58>
  }
}
 80152fe:	bf00      	nop
 8015300:	bf00      	nop
 8015302:	3714      	adds	r7, #20
 8015304:	46bd      	mov	sp, r7
 8015306:	bd90      	pop	{r4, r7, pc}

08015308 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b084      	sub	sp, #16
 801530c:	af00      	add	r7, sp, #0
 801530e:	4603      	mov	r3, r0
 8015310:	80fb      	strh	r3, [r7, #6]
 8015312:	460b      	mov	r3, r1
 8015314:	80bb      	strh	r3, [r7, #4]
 8015316:	4613      	mov	r3, r2
 8015318:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 801531a:	88fb      	ldrh	r3, [r7, #6]
 801531c:	2b9f      	cmp	r3, #159	; 0x9f
 801531e:	d824      	bhi.n	801536a <ST7735_DrawPixel+0x62>
 8015320:	88bb      	ldrh	r3, [r7, #4]
 8015322:	2b7f      	cmp	r3, #127	; 0x7f
 8015324:	d821      	bhi.n	801536a <ST7735_DrawPixel+0x62>
        return;

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8015326:	88fb      	ldrh	r3, [r7, #6]
 8015328:	b2d8      	uxtb	r0, r3
 801532a:	88bb      	ldrh	r3, [r7, #4]
 801532c:	b2d9      	uxtb	r1, r3
 801532e:	88fb      	ldrh	r3, [r7, #6]
 8015330:	b2db      	uxtb	r3, r3
 8015332:	3301      	adds	r3, #1
 8015334:	b2da      	uxtb	r2, r3
 8015336:	88bb      	ldrh	r3, [r7, #4]
 8015338:	b2db      	uxtb	r3, r3
 801533a:	3301      	adds	r3, #1
 801533c:	b2db      	uxtb	r3, r3
 801533e:	f7ff ff67 	bl	8015210 <ST7735_SetAddressWindow>
    ST7735_WriteCommand(ST7735_RAMWR);
 8015342:	202c      	movs	r0, #44	; 0x2c
 8015344:	f7ff fdd4 	bl	8014ef0 <ST7735_WriteCommand>
    uint8_t data[2];
		data[0] = color >> 8;
 8015348:	887b      	ldrh	r3, [r7, #2]
 801534a:	0a1b      	lsrs	r3, r3, #8
 801534c:	b29b      	uxth	r3, r3
 801534e:	b2db      	uxtb	r3, r3
 8015350:	733b      	strb	r3, [r7, #12]
		data[1] = color & 0xFF;
 8015352:	887b      	ldrh	r3, [r7, #2]
 8015354:	b2db      	uxtb	r3, r3
 8015356:	737b      	strb	r3, [r7, #13]
		ST7735_WriteData(data[0]);
 8015358:	7b3b      	ldrb	r3, [r7, #12]
 801535a:	4618      	mov	r0, r3
 801535c:	f7ff fdf0 	bl	8014f40 <ST7735_WriteData>
		ST7735_WriteData(data[1]);
 8015360:	7b7b      	ldrb	r3, [r7, #13]
 8015362:	4618      	mov	r0, r3
 8015364:	f7ff fdec 	bl	8014f40 <ST7735_WriteData>
 8015368:	e000      	b.n	801536c <ST7735_DrawPixel+0x64>
        return;
 801536a:	bf00      	nop

}
 801536c:	3710      	adds	r7, #16
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}

08015372 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8015372:	b580      	push	{r7, lr}
 8015374:	b084      	sub	sp, #16
 8015376:	af02      	add	r7, sp, #8
 8015378:	4603      	mov	r3, r0
 801537a:	80fb      	strh	r3, [r7, #6]
  ST7735_DrawRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 801537c:	88fb      	ldrh	r3, [r7, #6]
 801537e:	9300      	str	r3, [sp, #0]
 8015380:	2380      	movs	r3, #128	; 0x80
 8015382:	22a0      	movs	r2, #160	; 0xa0
 8015384:	2100      	movs	r1, #0
 8015386:	2000      	movs	r0, #0
 8015388:	f7ff ff77 	bl	801527a <ST7735_DrawRectangle>
}
 801538c:	bf00      	nop
 801538e:	3708      	adds	r7, #8
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  /* USER CODE END USB_DEVICE_Init_PreTreatment usbCmpsitFS_Desc*/

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015398:	2200      	movs	r2, #0
 801539a:	491e      	ldr	r1, [pc, #120]	; (8015414 <MX_USB_DEVICE_Init+0x80>)
 801539c:	481e      	ldr	r0, [pc, #120]	; (8015418 <MX_USB_DEVICE_Init+0x84>)
 801539e:	f7fa fadc 	bl	800f95a <USBD_Init>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d001      	beq.n	80153ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80153a8:	f7eb f9a6 	bl	80006f8 <Error_Handler>
  }

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80153ac:	491b      	ldr	r1, [pc, #108]	; (801541c <MX_USB_DEVICE_Init+0x88>)
 80153ae:	481a      	ldr	r0, [pc, #104]	; (8015418 <MX_USB_DEVICE_Init+0x84>)
 80153b0:	f7f7 fe85 	bl	800d0be <USBD_CDC_RegisterInterface>
 80153b4:	4603      	mov	r3, r0
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d001      	beq.n	80153be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80153ba:	f7eb f99d 	bl	80006f8 <Error_Handler>
  }

  if(USBD_RegisterClassComposite(&hUsbDeviceFS, &USBD_CDC,CLASS_TYPE_CDC,0) != USBD_OK)
 80153be:	2300      	movs	r3, #0
 80153c0:	2202      	movs	r2, #2
 80153c2:	4917      	ldr	r1, [pc, #92]	; (8015420 <MX_USB_DEVICE_Init+0x8c>)
 80153c4:	4814      	ldr	r0, [pc, #80]	; (8015418 <MX_USB_DEVICE_Init+0x84>)
 80153c6:	f7fa fb19 	bl	800f9fc <USBD_RegisterClassComposite>
 80153ca:	4603      	mov	r3, r0
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d001      	beq.n	80153d4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80153d0:	f7eb f992 	bl	80006f8 <Error_Handler>
  }

  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80153d4:	4913      	ldr	r1, [pc, #76]	; (8015424 <MX_USB_DEVICE_Init+0x90>)
 80153d6:	4810      	ldr	r0, [pc, #64]	; (8015418 <MX_USB_DEVICE_Init+0x84>)
 80153d8:	f7f8 fbae 	bl	800db38 <USBD_MSC_RegisterStorage>
 80153dc:	4603      	mov	r3, r0
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d001      	beq.n	80153e6 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 80153e2:	f7eb f989 	bl	80006f8 <Error_Handler>
  }

  if(USBD_RegisterClassComposite(&hUsbDeviceFS, &USBD_MSC,CLASS_TYPE_MSC,0) != USBD_OK)
 80153e6:	2300      	movs	r3, #0
 80153e8:	2203      	movs	r2, #3
 80153ea:	490f      	ldr	r1, [pc, #60]	; (8015428 <MX_USB_DEVICE_Init+0x94>)
 80153ec:	480a      	ldr	r0, [pc, #40]	; (8015418 <MX_USB_DEVICE_Init+0x84>)
 80153ee:	f7fa fb05 	bl	800f9fc <USBD_RegisterClassComposite>
 80153f2:	4603      	mov	r3, r0
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d001      	beq.n	80153fc <MX_USB_DEVICE_Init+0x68>
  {
    Error_Handler();
 80153f8:	f7eb f97e 	bl	80006f8 <Error_Handler>
  }

  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80153fc:	4806      	ldr	r0, [pc, #24]	; (8015418 <MX_USB_DEVICE_Init+0x84>)
 80153fe:	f7fa fb59 	bl	800fab4 <USBD_Start>
 8015402:	4603      	mov	r3, r0
 8015404:	2b00      	cmp	r3, #0
 8015406:	d001      	beq.n	801540c <MX_USB_DEVICE_Init+0x78>
  {
    Error_Handler();
 8015408:	f7eb f976 	bl	80006f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801540c:	f7ef fa4e 	bl	80048ac <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015410:	bf00      	nop
 8015412:	bd80      	pop	{r7, pc}
 8015414:	240001c0 	.word	0x240001c0
 8015418:	24000958 	.word	0x24000958
 801541c:	240001ac 	.word	0x240001ac
 8015420:	24000024 	.word	0x24000024
 8015424:	24000214 	.word	0x24000214
 8015428:	24000114 	.word	0x24000114

0801542c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b082      	sub	sp, #8
 8015430:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
  return (USBD_OK);
#else
  USBD_HandleTypeDef *pdev = &hUsbDeviceFS;
 8015432:	4b0b      	ldr	r3, [pc, #44]	; (8015460 <CDC_Init_FS+0x34>)
 8015434:	607b      	str	r3, [r7, #4]
  uint8_t idx = USBD_CoreFindEP(pdev, CDC_IN_EP);
 8015436:	2181      	movs	r1, #129	; 0x81
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f7fa ff7a 	bl	8010332 <USBD_CoreFindEP>
 801543e:	4603      	mov	r3, r0
 8015440:	70fb      	strb	r3, [r7, #3]
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0,idx);
 8015442:	78fb      	ldrb	r3, [r7, #3]
 8015444:	2200      	movs	r2, #0
 8015446:	4907      	ldr	r1, [pc, #28]	; (8015464 <CDC_Init_FS+0x38>)
 8015448:	4805      	ldr	r0, [pc, #20]	; (8015460 <CDC_Init_FS+0x34>)
 801544a:	f7f7 fe52 	bl	800d0f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801544e:	4906      	ldr	r1, [pc, #24]	; (8015468 <CDC_Init_FS+0x3c>)
 8015450:	4803      	ldr	r0, [pc, #12]	; (8015460 <CDC_Init_FS+0x34>)
 8015452:	f7f7 fe70 	bl	800d136 <USBD_CDC_SetRxBuffer>
#endif
return (USBD_OK);
 8015456:	2300      	movs	r3, #0


  /* USER CODE END 3 */
}
 8015458:	4618      	mov	r0, r3
 801545a:	3708      	adds	r7, #8
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	24000958 	.word	0x24000958
 8015464:	24001538 	.word	0x24001538
 8015468:	24000d38 	.word	0x24000d38

0801546c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801546c:	b480      	push	{r7}
 801546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015470:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015472:	4618      	mov	r0, r3
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr

0801547c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801547c:	b480      	push	{r7}
 801547e:	b083      	sub	sp, #12
 8015480:	af00      	add	r7, sp, #0
 8015482:	4603      	mov	r3, r0
 8015484:	6039      	str	r1, [r7, #0]
 8015486:	71fb      	strb	r3, [r7, #7]
 8015488:	4613      	mov	r3, r2
 801548a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801548c:	79fb      	ldrb	r3, [r7, #7]
 801548e:	2b23      	cmp	r3, #35	; 0x23
 8015490:	d84a      	bhi.n	8015528 <CDC_Control_FS+0xac>
 8015492:	a201      	add	r2, pc, #4	; (adr r2, 8015498 <CDC_Control_FS+0x1c>)
 8015494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015498:	08015529 	.word	0x08015529
 801549c:	08015529 	.word	0x08015529
 80154a0:	08015529 	.word	0x08015529
 80154a4:	08015529 	.word	0x08015529
 80154a8:	08015529 	.word	0x08015529
 80154ac:	08015529 	.word	0x08015529
 80154b0:	08015529 	.word	0x08015529
 80154b4:	08015529 	.word	0x08015529
 80154b8:	08015529 	.word	0x08015529
 80154bc:	08015529 	.word	0x08015529
 80154c0:	08015529 	.word	0x08015529
 80154c4:	08015529 	.word	0x08015529
 80154c8:	08015529 	.word	0x08015529
 80154cc:	08015529 	.word	0x08015529
 80154d0:	08015529 	.word	0x08015529
 80154d4:	08015529 	.word	0x08015529
 80154d8:	08015529 	.word	0x08015529
 80154dc:	08015529 	.word	0x08015529
 80154e0:	08015529 	.word	0x08015529
 80154e4:	08015529 	.word	0x08015529
 80154e8:	08015529 	.word	0x08015529
 80154ec:	08015529 	.word	0x08015529
 80154f0:	08015529 	.word	0x08015529
 80154f4:	08015529 	.word	0x08015529
 80154f8:	08015529 	.word	0x08015529
 80154fc:	08015529 	.word	0x08015529
 8015500:	08015529 	.word	0x08015529
 8015504:	08015529 	.word	0x08015529
 8015508:	08015529 	.word	0x08015529
 801550c:	08015529 	.word	0x08015529
 8015510:	08015529 	.word	0x08015529
 8015514:	08015529 	.word	0x08015529
 8015518:	08015529 	.word	0x08015529
 801551c:	08015529 	.word	0x08015529
 8015520:	08015529 	.word	0x08015529
 8015524:	08015529 	.word	0x08015529
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015528:	bf00      	nop
  }

  return (USBD_OK);
 801552a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801552c:	4618      	mov	r0, r3
 801552e:	370c      	adds	r7, #12
 8015530:	46bd      	mov	sp, r7
 8015532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015536:	4770      	bx	lr

08015538 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b082      	sub	sp, #8
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
 8015540:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015542:	6879      	ldr	r1, [r7, #4]
 8015544:	4808      	ldr	r0, [pc, #32]	; (8015568 <CDC_Receive_FS+0x30>)
 8015546:	f7f7 fdf6 	bl	800d136 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801554a:	4807      	ldr	r0, [pc, #28]	; (8015568 <CDC_Receive_FS+0x30>)
 801554c:	f7f7 fe5c 	bl	800d208 <USBD_CDC_ReceivePacket>

  CDC_Transmit_FS(Buf, *Len);  //测试接收使用，将接收到的数据转发回去
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	b29b      	uxth	r3, r3
 8015556:	4619      	mov	r1, r3
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f000 f807 	bl	801556c <CDC_Transmit_FS>

  return (USBD_OK);
 801555e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015560:	4618      	mov	r0, r3
 8015562:	3708      	adds	r7, #8
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}
 8015568:	24000958 	.word	0x24000958

0801556c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b086      	sub	sp, #24
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
 8015574:	460b      	mov	r3, r1
 8015576:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015578:	2300      	movs	r3, #0
 801557a:	75fb      	strb	r3, [r7, #23]
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);

#else
  USBD_HandleTypeDef *pdev = &hUsbDeviceFS;
 801557c:	4b19      	ldr	r3, [pc, #100]	; (80155e4 <CDC_Transmit_FS+0x78>)
 801557e:	613b      	str	r3, [r7, #16]
  uint8_t idx = USBD_CoreFindEP(pdev, CDC_IN_EP);
 8015580:	2181      	movs	r1, #129	; 0x81
 8015582:	6938      	ldr	r0, [r7, #16]
 8015584:	f7fa fed5 	bl	8010332 <USBD_CoreFindEP>
 8015588:	4603      	mov	r3, r0
 801558a:	73fb      	strb	r3, [r7, #15]
  if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801558c:	7bfb      	ldrb	r3, [r7, #15]
 801558e:	2bff      	cmp	r3, #255	; 0xff
 8015590:	d023      	beq.n	80155da <CDC_Transmit_FS+0x6e>
 8015592:	7bfb      	ldrb	r3, [r7, #15]
 8015594:	2b03      	cmp	r3, #3
 8015596:	d820      	bhi.n	80155da <CDC_Transmit_FS+0x6e>
      {
        pdev->classId = idx;
 8015598:	7bfa      	ldrb	r2, [r7, #15]
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

        USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassDataCmsit[pdev->classId];
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80155a6:	4a0f      	ldr	r2, [pc, #60]	; (80155e4 <CDC_Transmit_FS+0x78>)
 80155a8:	33b2      	adds	r3, #178	; 0xb2
 80155aa:	009b      	lsls	r3, r3, #2
 80155ac:	4413      	add	r3, r2
 80155ae:	685b      	ldr	r3, [r3, #4]
 80155b0:	60bb      	str	r3, [r7, #8]
        if (hcdc->TxState != 0)
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d001      	beq.n	80155c0 <CDC_Transmit_FS+0x54>
        {
          return USBD_BUSY;
 80155bc:	2301      	movs	r3, #1
 80155be:	e00d      	b.n	80155dc <CDC_Transmit_FS+0x70>
        }
        USBD_CDC_SetTxBuffer(pdev, Buf, Len, idx);
 80155c0:	887a      	ldrh	r2, [r7, #2]
 80155c2:	7bfb      	ldrb	r3, [r7, #15]
 80155c4:	6879      	ldr	r1, [r7, #4]
 80155c6:	6938      	ldr	r0, [r7, #16]
 80155c8:	f7f7 fd93 	bl	800d0f2 <USBD_CDC_SetTxBuffer>
        result = USBD_CDC_TransmitPacket(pdev,idx);
 80155cc:	7bfb      	ldrb	r3, [r7, #15]
 80155ce:	4619      	mov	r1, r3
 80155d0:	6938      	ldr	r0, [r7, #16]
 80155d2:	f7f7 fdcf 	bl	800d174 <USBD_CDC_TransmitPacket>
 80155d6:	4603      	mov	r3, r0
 80155d8:	75fb      	strb	r3, [r7, #23]
      }
#endif
  /* USER CODE END 7 */
  return result;
 80155da:	7dfb      	ldrb	r3, [r7, #23]
}
 80155dc:	4618      	mov	r0, r3
 80155de:	3718      	adds	r7, #24
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}
 80155e4:	24000958 	.word	0x24000958

080155e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80155e8:	b480      	push	{r7}
 80155ea:	b087      	sub	sp, #28
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	60f8      	str	r0, [r7, #12]
 80155f0:	60b9      	str	r1, [r7, #8]
 80155f2:	4613      	mov	r3, r2
 80155f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80155f6:	2300      	movs	r3, #0
 80155f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80155fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80155fe:	4618      	mov	r0, r3
 8015600:	371c      	adds	r7, #28
 8015602:	46bd      	mov	sp, r7
 8015604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015608:	4770      	bx	lr
	...

0801560c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801560c:	b480      	push	{r7}
 801560e:	b083      	sub	sp, #12
 8015610:	af00      	add	r7, sp, #0
 8015612:	4603      	mov	r3, r0
 8015614:	6039      	str	r1, [r7, #0]
 8015616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	2212      	movs	r2, #18
 801561c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801561e:	4b03      	ldr	r3, [pc, #12]	; (801562c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015620:	4618      	mov	r0, r3
 8015622:	370c      	adds	r7, #12
 8015624:	46bd      	mov	sp, r7
 8015626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562a:	4770      	bx	lr
 801562c:	240001e0 	.word	0x240001e0

08015630 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015630:	b480      	push	{r7}
 8015632:	b083      	sub	sp, #12
 8015634:	af00      	add	r7, sp, #0
 8015636:	4603      	mov	r3, r0
 8015638:	6039      	str	r1, [r7, #0]
 801563a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	2204      	movs	r2, #4
 8015640:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015642:	4b03      	ldr	r3, [pc, #12]	; (8015650 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015644:	4618      	mov	r0, r3
 8015646:	370c      	adds	r7, #12
 8015648:	46bd      	mov	sp, r7
 801564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564e:	4770      	bx	lr
 8015650:	240001f4 	.word	0x240001f4

08015654 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
 801565a:	4603      	mov	r3, r0
 801565c:	6039      	str	r1, [r7, #0]
 801565e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015660:	79fb      	ldrb	r3, [r7, #7]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d105      	bne.n	8015672 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015666:	683a      	ldr	r2, [r7, #0]
 8015668:	4907      	ldr	r1, [pc, #28]	; (8015688 <USBD_FS_ProductStrDescriptor+0x34>)
 801566a:	4808      	ldr	r0, [pc, #32]	; (801568c <USBD_FS_ProductStrDescriptor+0x38>)
 801566c:	f7fb fd66 	bl	801113c <USBD_GetString>
 8015670:	e004      	b.n	801567c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015672:	683a      	ldr	r2, [r7, #0]
 8015674:	4904      	ldr	r1, [pc, #16]	; (8015688 <USBD_FS_ProductStrDescriptor+0x34>)
 8015676:	4805      	ldr	r0, [pc, #20]	; (801568c <USBD_FS_ProductStrDescriptor+0x38>)
 8015678:	f7fb fd60 	bl	801113c <USBD_GetString>
  }
  return USBD_StrDesc;
 801567c:	4b02      	ldr	r3, [pc, #8]	; (8015688 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801567e:	4618      	mov	r0, r3
 8015680:	3708      	adds	r7, #8
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}
 8015686:	bf00      	nop
 8015688:	24001d38 	.word	0x24001d38
 801568c:	08016a58 	.word	0x08016a58

08015690 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	4603      	mov	r3, r0
 8015698:	6039      	str	r1, [r7, #0]
 801569a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801569c:	683a      	ldr	r2, [r7, #0]
 801569e:	4904      	ldr	r1, [pc, #16]	; (80156b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80156a0:	4804      	ldr	r0, [pc, #16]	; (80156b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80156a2:	f7fb fd4b 	bl	801113c <USBD_GetString>
  return USBD_StrDesc;
 80156a6:	4b02      	ldr	r3, [pc, #8]	; (80156b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3708      	adds	r7, #8
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	24001d38 	.word	0x24001d38
 80156b4:	08016a6c 	.word	0x08016a6c

080156b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	4603      	mov	r3, r0
 80156c0:	6039      	str	r1, [r7, #0]
 80156c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	221a      	movs	r2, #26
 80156c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80156ca:	f000 f843 	bl	8015754 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80156ce:	4b02      	ldr	r3, [pc, #8]	; (80156d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80156d0:	4618      	mov	r0, r3
 80156d2:	3708      	adds	r7, #8
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	240001f8 	.word	0x240001f8

080156dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b082      	sub	sp, #8
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	4603      	mov	r3, r0
 80156e4:	6039      	str	r1, [r7, #0]
 80156e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80156e8:	79fb      	ldrb	r3, [r7, #7]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d105      	bne.n	80156fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80156ee:	683a      	ldr	r2, [r7, #0]
 80156f0:	4907      	ldr	r1, [pc, #28]	; (8015710 <USBD_FS_ConfigStrDescriptor+0x34>)
 80156f2:	4808      	ldr	r0, [pc, #32]	; (8015714 <USBD_FS_ConfigStrDescriptor+0x38>)
 80156f4:	f7fb fd22 	bl	801113c <USBD_GetString>
 80156f8:	e004      	b.n	8015704 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80156fa:	683a      	ldr	r2, [r7, #0]
 80156fc:	4904      	ldr	r1, [pc, #16]	; (8015710 <USBD_FS_ConfigStrDescriptor+0x34>)
 80156fe:	4805      	ldr	r0, [pc, #20]	; (8015714 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015700:	f7fb fd1c 	bl	801113c <USBD_GetString>
  }
  return USBD_StrDesc;
 8015704:	4b02      	ldr	r3, [pc, #8]	; (8015710 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015706:	4618      	mov	r0, r3
 8015708:	3708      	adds	r7, #8
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}
 801570e:	bf00      	nop
 8015710:	24001d38 	.word	0x24001d38
 8015714:	08016a80 	.word	0x08016a80

08015718 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b082      	sub	sp, #8
 801571c:	af00      	add	r7, sp, #0
 801571e:	4603      	mov	r3, r0
 8015720:	6039      	str	r1, [r7, #0]
 8015722:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015724:	79fb      	ldrb	r3, [r7, #7]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d105      	bne.n	8015736 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801572a:	683a      	ldr	r2, [r7, #0]
 801572c:	4907      	ldr	r1, [pc, #28]	; (801574c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801572e:	4808      	ldr	r0, [pc, #32]	; (8015750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015730:	f7fb fd04 	bl	801113c <USBD_GetString>
 8015734:	e004      	b.n	8015740 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015736:	683a      	ldr	r2, [r7, #0]
 8015738:	4904      	ldr	r1, [pc, #16]	; (801574c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801573a:	4805      	ldr	r0, [pc, #20]	; (8015750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801573c:	f7fb fcfe 	bl	801113c <USBD_GetString>
  }
  return USBD_StrDesc;
 8015740:	4b02      	ldr	r3, [pc, #8]	; (801574c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015742:	4618      	mov	r0, r3
 8015744:	3708      	adds	r7, #8
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	24001d38 	.word	0x24001d38
 8015750:	08016a8c 	.word	0x08016a8c

08015754 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b084      	sub	sp, #16
 8015758:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801575a:	4b0f      	ldr	r3, [pc, #60]	; (8015798 <Get_SerialNum+0x44>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015760:	4b0e      	ldr	r3, [pc, #56]	; (801579c <Get_SerialNum+0x48>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015766:	4b0e      	ldr	r3, [pc, #56]	; (80157a0 <Get_SerialNum+0x4c>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801576c:	68fa      	ldr	r2, [r7, #12]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	4413      	add	r3, r2
 8015772:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d009      	beq.n	801578e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801577a:	2208      	movs	r2, #8
 801577c:	4909      	ldr	r1, [pc, #36]	; (80157a4 <Get_SerialNum+0x50>)
 801577e:	68f8      	ldr	r0, [r7, #12]
 8015780:	f000 f814 	bl	80157ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015784:	2204      	movs	r2, #4
 8015786:	4908      	ldr	r1, [pc, #32]	; (80157a8 <Get_SerialNum+0x54>)
 8015788:	68b8      	ldr	r0, [r7, #8]
 801578a:	f000 f80f 	bl	80157ac <IntToUnicode>
  }
}
 801578e:	bf00      	nop
 8015790:	3710      	adds	r7, #16
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}
 8015796:	bf00      	nop
 8015798:	1ff1e800 	.word	0x1ff1e800
 801579c:	1ff1e804 	.word	0x1ff1e804
 80157a0:	1ff1e808 	.word	0x1ff1e808
 80157a4:	240001fa 	.word	0x240001fa
 80157a8:	2400020a 	.word	0x2400020a

080157ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b087      	sub	sp, #28
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	4613      	mov	r3, r2
 80157b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80157ba:	2300      	movs	r3, #0
 80157bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80157be:	2300      	movs	r3, #0
 80157c0:	75fb      	strb	r3, [r7, #23]
 80157c2:	e027      	b.n	8015814 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	0f1b      	lsrs	r3, r3, #28
 80157c8:	2b09      	cmp	r3, #9
 80157ca:	d80b      	bhi.n	80157e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	0f1b      	lsrs	r3, r3, #28
 80157d0:	b2da      	uxtb	r2, r3
 80157d2:	7dfb      	ldrb	r3, [r7, #23]
 80157d4:	005b      	lsls	r3, r3, #1
 80157d6:	4619      	mov	r1, r3
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	440b      	add	r3, r1
 80157dc:	3230      	adds	r2, #48	; 0x30
 80157de:	b2d2      	uxtb	r2, r2
 80157e0:	701a      	strb	r2, [r3, #0]
 80157e2:	e00a      	b.n	80157fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	0f1b      	lsrs	r3, r3, #28
 80157e8:	b2da      	uxtb	r2, r3
 80157ea:	7dfb      	ldrb	r3, [r7, #23]
 80157ec:	005b      	lsls	r3, r3, #1
 80157ee:	4619      	mov	r1, r3
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	440b      	add	r3, r1
 80157f4:	3237      	adds	r2, #55	; 0x37
 80157f6:	b2d2      	uxtb	r2, r2
 80157f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	011b      	lsls	r3, r3, #4
 80157fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015800:	7dfb      	ldrb	r3, [r7, #23]
 8015802:	005b      	lsls	r3, r3, #1
 8015804:	3301      	adds	r3, #1
 8015806:	68ba      	ldr	r2, [r7, #8]
 8015808:	4413      	add	r3, r2
 801580a:	2200      	movs	r2, #0
 801580c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801580e:	7dfb      	ldrb	r3, [r7, #23]
 8015810:	3301      	adds	r3, #1
 8015812:	75fb      	strb	r3, [r7, #23]
 8015814:	7dfa      	ldrb	r2, [r7, #23]
 8015816:	79fb      	ldrb	r3, [r7, #7]
 8015818:	429a      	cmp	r2, r3
 801581a:	d3d3      	bcc.n	80157c4 <IntToUnicode+0x18>
  }
}
 801581c:	bf00      	nop
 801581e:	bf00      	nop
 8015820:	371c      	adds	r7, #28
 8015822:	46bd      	mov	sp, r7
 8015824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015828:	4770      	bx	lr

0801582a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801582a:	b480      	push	{r7}
 801582c:	b083      	sub	sp, #12
 801582e:	af00      	add	r7, sp, #0
 8015830:	4603      	mov	r3, r0
 8015832:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 //UNUSED(lun);
//	SD_Init()
  return (USBD_OK);
 8015834:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8015836:	4618      	mov	r0, r3
 8015838:	370c      	adds	r7, #12
 801583a:	46bd      	mov	sp, r7
 801583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015840:	4770      	bx	lr
	...

08015844 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b084      	sub	sp, #16
 8015848:	af00      	add	r7, sp, #0
 801584a:	4603      	mov	r3, r0
 801584c:	60b9      	str	r1, [r7, #8]
 801584e:	607a      	str	r2, [r7, #4]
 8015850:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  //UNUSED(lun);
     SD_GetCardInfo(&SDCardInfo);
 8015852:	4809      	ldr	r0, [pc, #36]	; (8015878 <STORAGE_GetCapacity_FS+0x34>)
 8015854:	f7ff f97c 	bl	8014b50 <SD_GetCardInfo>
     *block_num = SDCardInfo.LogBlockNbr - 1;
 8015858:	4b07      	ldr	r3, [pc, #28]	; (8015878 <STORAGE_GetCapacity_FS+0x34>)
 801585a:	699b      	ldr	r3, [r3, #24]
 801585c:	1e5a      	subs	r2, r3, #1
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	601a      	str	r2, [r3, #0]
     *block_size = SDCardInfo.LogBlockSize;
 8015862:	4b05      	ldr	r3, [pc, #20]	; (8015878 <STORAGE_GetCapacity_FS+0x34>)
 8015864:	69db      	ldr	r3, [r3, #28]
 8015866:	b29a      	uxth	r2, r3
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801586c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801586e:	4618      	mov	r0, r3
 8015870:	3710      	adds	r7, #16
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}
 8015876:	bf00      	nop
 8015878:	24000934 	.word	0x24000934

0801587c <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801587c:	b480      	push	{r7}
 801587e:	b083      	sub	sp, #12
 8015880:	af00      	add	r7, sp, #0
 8015882:	4603      	mov	r3, r0
 8015884:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  //UNUSED(lun);

  return (USBD_OK);
 8015886:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015888:	4618      	mov	r0, r3
 801588a:	370c      	adds	r7, #12
 801588c:	46bd      	mov	sp, r7
 801588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015892:	4770      	bx	lr

08015894 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8015894:	b480      	push	{r7}
 8015896:	b083      	sub	sp, #12
 8015898:	af00      	add	r7, sp, #0
 801589a:	4603      	mov	r3, r0
 801589c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  //UNUSED(lun);

  return (USBD_OK);
 801589e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	370c      	adds	r7, #12
 80158a4:	46bd      	mov	sp, r7
 80158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158aa:	4770      	bx	lr

080158ac <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b086      	sub	sp, #24
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60b9      	str	r1, [r7, #8]
 80158b4:	607a      	str	r2, [r7, #4]
 80158b6:	461a      	mov	r2, r3
 80158b8:	4603      	mov	r3, r0
 80158ba:	73fb      	strb	r3, [r7, #15]
 80158bc:	4613      	mov	r3, r2
 80158be:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t res=0;
 80158c0:	2300      	movs	r3, #0
 80158c2:	75fb      	strb	r3, [r7, #23]
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);

    res=SD_ReadDisk(buf,blk_addr,blk_len);
 80158c4:	89bb      	ldrh	r3, [r7, #12]
 80158c6:	461a      	mov	r2, r3
 80158c8:	6879      	ldr	r1, [r7, #4]
 80158ca:	68b8      	ldr	r0, [r7, #8]
 80158cc:	f7ff f962 	bl	8014b94 <SD_ReadDisk>
 80158d0:	4603      	mov	r3, r0
 80158d2:	75fb      	strb	r3, [r7, #23]

  return (res);
 80158d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 80158d8:	4618      	mov	r0, r3
 80158da:	3718      	adds	r7, #24
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}

080158e0 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b086      	sub	sp, #24
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	60b9      	str	r1, [r7, #8]
 80158e8:	607a      	str	r2, [r7, #4]
 80158ea:	461a      	mov	r2, r3
 80158ec:	4603      	mov	r3, r0
 80158ee:	73fb      	strb	r3, [r7, #15]
 80158f0:	4613      	mov	r3, r2
 80158f2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t res=0;
 80158f4:	2300      	movs	r3, #0
 80158f6:	75fb      	strb	r3, [r7, #23]
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);

    res=SD_WriteDisk(buf,blk_addr,blk_len);
 80158f8:	89bb      	ldrh	r3, [r7, #12]
 80158fa:	461a      	mov	r2, r3
 80158fc:	6879      	ldr	r1, [r7, #4]
 80158fe:	68b8      	ldr	r0, [r7, #8]
 8015900:	f7ff f97e 	bl	8014c00 <SD_WriteDisk>
 8015904:	4603      	mov	r3, r0
 8015906:	75fb      	strb	r3, [r7, #23]


  return (res);
 8015908:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801590c:	4618      	mov	r0, r3
 801590e:	3718      	adds	r7, #24
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}

08015914 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8015914:	b480      	push	{r7}
 8015916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8015918:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801591a:	4618      	mov	r0, r3
 801591c:	46bd      	mov	sp, r7
 801591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015922:	4770      	bx	lr

08015924 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b0ba      	sub	sp, #232	; 0xe8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801592c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015930:	2200      	movs	r2, #0
 8015932:	601a      	str	r2, [r3, #0]
 8015934:	605a      	str	r2, [r3, #4]
 8015936:	609a      	str	r2, [r3, #8]
 8015938:	60da      	str	r2, [r3, #12]
 801593a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801593c:	f107 0310 	add.w	r3, r7, #16
 8015940:	22c0      	movs	r2, #192	; 0xc0
 8015942:	2100      	movs	r1, #0
 8015944:	4618      	mov	r0, r3
 8015946:	f000 fc4b 	bl	80161e0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	4a2c      	ldr	r2, [pc, #176]	; (8015a00 <HAL_PCD_MspInit+0xdc>)
 8015950:	4293      	cmp	r3, r2
 8015952:	d151      	bne.n	80159f8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015954:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8015958:	f04f 0300 	mov.w	r3, #0
 801595c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015960:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8015964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015968:	f107 0310 	add.w	r3, r7, #16
 801596c:	4618      	mov	r0, r3
 801596e:	f7ef ff7d 	bl	800586c <HAL_RCCEx_PeriphCLKConfig>
 8015972:	4603      	mov	r3, r0
 8015974:	2b00      	cmp	r3, #0
 8015976:	d001      	beq.n	801597c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8015978:	f7ea febe 	bl	80006f8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801597c:	f7ee ff96 	bl	80048ac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015980:	4b20      	ldr	r3, [pc, #128]	; (8015a04 <HAL_PCD_MspInit+0xe0>)
 8015982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015986:	4a1f      	ldr	r2, [pc, #124]	; (8015a04 <HAL_PCD_MspInit+0xe0>)
 8015988:	f043 0301 	orr.w	r3, r3, #1
 801598c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015990:	4b1c      	ldr	r3, [pc, #112]	; (8015a04 <HAL_PCD_MspInit+0xe0>)
 8015992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015996:	f003 0301 	and.w	r3, r3, #1
 801599a:	60fb      	str	r3, [r7, #12]
 801599c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801599e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80159a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80159a6:	2302      	movs	r3, #2
 80159a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159ac:	2300      	movs	r3, #0
 80159ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80159b2:	2302      	movs	r3, #2
 80159b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80159b8:	230a      	movs	r3, #10
 80159ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80159be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80159c2:	4619      	mov	r1, r3
 80159c4:	4810      	ldr	r0, [pc, #64]	; (8015a08 <HAL_PCD_MspInit+0xe4>)
 80159c6:	f7ed fa6d 	bl	8002ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80159ca:	4b0e      	ldr	r3, [pc, #56]	; (8015a04 <HAL_PCD_MspInit+0xe0>)
 80159cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80159d0:	4a0c      	ldr	r2, [pc, #48]	; (8015a04 <HAL_PCD_MspInit+0xe0>)
 80159d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80159d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80159da:	4b0a      	ldr	r3, [pc, #40]	; (8015a04 <HAL_PCD_MspInit+0xe0>)
 80159dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80159e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80159e4:	60bb      	str	r3, [r7, #8]
 80159e6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 80159e8:	2200      	movs	r2, #0
 80159ea:	2102      	movs	r1, #2
 80159ec:	2065      	movs	r0, #101	; 0x65
 80159ee:	f7eb fb1c 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80159f2:	2065      	movs	r0, #101	; 0x65
 80159f4:	f7eb fb33 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80159f8:	bf00      	nop
 80159fa:	37e8      	adds	r7, #232	; 0xe8
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}
 8015a00:	40080000 	.word	0x40080000
 8015a04:	58024400 	.word	0x58024400
 8015a08:	58020000 	.word	0x58020000

08015a0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015a20:	4619      	mov	r1, r3
 8015a22:	4610      	mov	r0, r2
 8015a24:	f7fa f8d9 	bl	800fbda <USBD_LL_SetupStage>
}
 8015a28:	bf00      	nop
 8015a2a:	3708      	adds	r7, #8
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}

08015a30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b082      	sub	sp, #8
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
 8015a38:	460b      	mov	r3, r1
 8015a3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015a42:	78fa      	ldrb	r2, [r7, #3]
 8015a44:	6879      	ldr	r1, [r7, #4]
 8015a46:	4613      	mov	r3, r2
 8015a48:	00db      	lsls	r3, r3, #3
 8015a4a:	4413      	add	r3, r2
 8015a4c:	009b      	lsls	r3, r3, #2
 8015a4e:	440b      	add	r3, r1
 8015a50:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8015a54:	681a      	ldr	r2, [r3, #0]
 8015a56:	78fb      	ldrb	r3, [r7, #3]
 8015a58:	4619      	mov	r1, r3
 8015a5a:	f7fa f913 	bl	800fc84 <USBD_LL_DataOutStage>
}
 8015a5e:	bf00      	nop
 8015a60:	3708      	adds	r7, #8
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}

08015a66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a66:	b580      	push	{r7, lr}
 8015a68:	b082      	sub	sp, #8
 8015a6a:	af00      	add	r7, sp, #0
 8015a6c:	6078      	str	r0, [r7, #4]
 8015a6e:	460b      	mov	r3, r1
 8015a70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015a78:	78fa      	ldrb	r2, [r7, #3]
 8015a7a:	6879      	ldr	r1, [r7, #4]
 8015a7c:	4613      	mov	r3, r2
 8015a7e:	00db      	lsls	r3, r3, #3
 8015a80:	4413      	add	r3, r2
 8015a82:	009b      	lsls	r3, r3, #2
 8015a84:	440b      	add	r3, r1
 8015a86:	3348      	adds	r3, #72	; 0x48
 8015a88:	681a      	ldr	r2, [r3, #0]
 8015a8a:	78fb      	ldrb	r3, [r7, #3]
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	f7fa f9ac 	bl	800fdea <USBD_LL_DataInStage>
}
 8015a92:	bf00      	nop
 8015a94:	3708      	adds	r7, #8
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}

08015a9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a9a:	b580      	push	{r7, lr}
 8015a9c:	b082      	sub	sp, #8
 8015a9e:	af00      	add	r7, sp, #0
 8015aa0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7fa fb05 	bl	80100b8 <USBD_LL_SOF>
}
 8015aae:	bf00      	nop
 8015ab0:	3708      	adds	r7, #8
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}

08015ab6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ab6:	b580      	push	{r7, lr}
 8015ab8:	b084      	sub	sp, #16
 8015aba:	af00      	add	r7, sp, #0
 8015abc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015abe:	2301      	movs	r3, #1
 8015ac0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	691b      	ldr	r3, [r3, #16]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d102      	bne.n	8015ad0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015aca:	2300      	movs	r3, #0
 8015acc:	73fb      	strb	r3, [r7, #15]
 8015ace:	e008      	b.n	8015ae2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	691b      	ldr	r3, [r3, #16]
 8015ad4:	2b02      	cmp	r3, #2
 8015ad6:	d102      	bne.n	8015ade <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015ad8:	2301      	movs	r3, #1
 8015ada:	73fb      	strb	r3, [r7, #15]
 8015adc:	e001      	b.n	8015ae2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015ade:	f7ea fe0b 	bl	80006f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015ae8:	7bfa      	ldrb	r2, [r7, #15]
 8015aea:	4611      	mov	r1, r2
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7fa fa9f 	bl	8010030 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015af8:	4618      	mov	r0, r3
 8015afa:	f7fa fa28 	bl	800ff4e <USBD_LL_Reset>
}
 8015afe:	bf00      	nop
 8015b00:	3710      	adds	r7, #16
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
	...

08015b08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b082      	sub	sp, #8
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7fa fa9a 	bl	8010050 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	687a      	ldr	r2, [r7, #4]
 8015b28:	6812      	ldr	r2, [r2, #0]
 8015b2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015b2e:	f043 0301 	orr.w	r3, r3, #1
 8015b32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	6a1b      	ldr	r3, [r3, #32]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d005      	beq.n	8015b48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015b3c:	4b04      	ldr	r3, [pc, #16]	; (8015b50 <HAL_PCD_SuspendCallback+0x48>)
 8015b3e:	691b      	ldr	r3, [r3, #16]
 8015b40:	4a03      	ldr	r2, [pc, #12]	; (8015b50 <HAL_PCD_SuspendCallback+0x48>)
 8015b42:	f043 0306 	orr.w	r3, r3, #6
 8015b46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015b48:	bf00      	nop
 8015b4a:	3708      	adds	r7, #8
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}
 8015b50:	e000ed00 	.word	0xe000ed00

08015b54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b082      	sub	sp, #8
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7fa fa90 	bl	8010088 <USBD_LL_Resume>
}
 8015b68:	bf00      	nop
 8015b6a:	3708      	adds	r7, #8
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}

08015b70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b082      	sub	sp, #8
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	460b      	mov	r3, r1
 8015b7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015b82:	78fa      	ldrb	r2, [r7, #3]
 8015b84:	4611      	mov	r1, r2
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7fa fb07 	bl	801019a <USBD_LL_IsoOUTIncomplete>
}
 8015b8c:	bf00      	nop
 8015b8e:	3708      	adds	r7, #8
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}

08015b94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	460b      	mov	r3, r1
 8015b9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015ba6:	78fa      	ldrb	r2, [r7, #3]
 8015ba8:	4611      	mov	r1, r2
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7fa fac3 	bl	8010136 <USBD_LL_IsoINIncomplete>
}
 8015bb0:	bf00      	nop
 8015bb2:	3708      	adds	r7, #8
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}

08015bb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b082      	sub	sp, #8
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f7fa fb19 	bl	80101fe <USBD_LL_DevConnected>
}
 8015bcc:	bf00      	nop
 8015bce:	3708      	adds	r7, #8
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b082      	sub	sp, #8
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7fa fb16 	bl	8010214 <USBD_LL_DevDisconnected>
}
 8015be8:	bf00      	nop
 8015bea:	3708      	adds	r7, #8
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d140      	bne.n	8015c82 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015c00:	4a22      	ldr	r2, [pc, #136]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	4a20      	ldr	r2, [pc, #128]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c0c:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015c10:	4b1e      	ldr	r3, [pc, #120]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c12:	4a1f      	ldr	r2, [pc, #124]	; (8015c90 <USBD_LL_Init+0xa0>)
 8015c14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015c16:	4b1d      	ldr	r3, [pc, #116]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c18:	2204      	movs	r2, #4
 8015c1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015c1c:	4b1b      	ldr	r3, [pc, #108]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c1e:	2202      	movs	r2, #2
 8015c20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015c22:	4b1a      	ldr	r3, [pc, #104]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c24:	2200      	movs	r2, #0
 8015c26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015c28:	4b18      	ldr	r3, [pc, #96]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c2a:	2202      	movs	r2, #2
 8015c2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015c2e:	4b17      	ldr	r3, [pc, #92]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c30:	2200      	movs	r2, #0
 8015c32:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015c34:	4b15      	ldr	r3, [pc, #84]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c36:	2200      	movs	r2, #0
 8015c38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015c3a:	4b14      	ldr	r3, [pc, #80]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015c40:	4b12      	ldr	r3, [pc, #72]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c42:	2200      	movs	r2, #0
 8015c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015c46:	4b11      	ldr	r3, [pc, #68]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c48:	2200      	movs	r2, #0
 8015c4a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015c4c:	480f      	ldr	r0, [pc, #60]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c4e:	f7ed fb0c 	bl	800326a <HAL_PCD_Init>
 8015c52:	4603      	mov	r3, r0
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d001      	beq.n	8015c5c <USBD_LL_Init+0x6c>
  {
    Error_Handler( );
 8015c58:	f7ea fd4e 	bl	80006f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015c5c:	2180      	movs	r1, #128	; 0x80
 8015c5e:	480b      	ldr	r0, [pc, #44]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c60:	f7ee fda9 	bl	80047b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015c64:	2240      	movs	r2, #64	; 0x40
 8015c66:	2100      	movs	r1, #0
 8015c68:	4808      	ldr	r0, [pc, #32]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c6a:	f7ee fd5d 	bl	8004728 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8015c6e:	2240      	movs	r2, #64	; 0x40
 8015c70:	2101      	movs	r1, #1
 8015c72:	4806      	ldr	r0, [pc, #24]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c74:	f7ee fd58 	bl	8004728 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 8015c78:	2240      	movs	r2, #64	; 0x40
 8015c7a:	2103      	movs	r1, #3
 8015c7c:	4803      	ldr	r0, [pc, #12]	; (8015c8c <USBD_LL_Init+0x9c>)
 8015c7e:	f7ee fd53 	bl	8004728 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015c82:	2300      	movs	r3, #0
}
 8015c84:	4618      	mov	r0, r3
 8015c86:	3708      	adds	r7, #8
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bd80      	pop	{r7, pc}
 8015c8c:	24001f38 	.word	0x24001f38
 8015c90:	40080000 	.word	0x40080000

08015c94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b084      	sub	sp, #16
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7ed fc01 	bl	80034b2 <HAL_PCD_Start>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cb4:	7bfb      	ldrb	r3, [r7, #15]
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f000 f94a 	bl	8015f50 <USBD_Get_USB_Status>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3710      	adds	r7, #16
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bd80      	pop	{r7, pc}

08015cca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015cca:	b580      	push	{r7, lr}
 8015ccc:	b084      	sub	sp, #16
 8015cce:	af00      	add	r7, sp, #0
 8015cd0:	6078      	str	r0, [r7, #4]
 8015cd2:	4608      	mov	r0, r1
 8015cd4:	4611      	mov	r1, r2
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	4603      	mov	r3, r0
 8015cda:	70fb      	strb	r3, [r7, #3]
 8015cdc:	460b      	mov	r3, r1
 8015cde:	70bb      	strb	r3, [r7, #2]
 8015ce0:	4613      	mov	r3, r2
 8015ce2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8015cf2:	78bb      	ldrb	r3, [r7, #2]
 8015cf4:	883a      	ldrh	r2, [r7, #0]
 8015cf6:	78f9      	ldrb	r1, [r7, #3]
 8015cf8:	f7ee f901 	bl	8003efe <HAL_PCD_EP_Open>
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d00:	7bfb      	ldrb	r3, [r7, #15]
 8015d02:	4618      	mov	r0, r3
 8015d04:	f000 f924 	bl	8015f50 <USBD_Get_USB_Status>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d0e:	4618      	mov	r0, r3
 8015d10:	3710      	adds	r7, #16
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bd80      	pop	{r7, pc}

08015d16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d16:	b580      	push	{r7, lr}
 8015d18:	b084      	sub	sp, #16
 8015d1a:	af00      	add	r7, sp, #0
 8015d1c:	6078      	str	r0, [r7, #4]
 8015d1e:	460b      	mov	r3, r1
 8015d20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d22:	2300      	movs	r3, #0
 8015d24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d26:	2300      	movs	r3, #0
 8015d28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015d30:	78fa      	ldrb	r2, [r7, #3]
 8015d32:	4611      	mov	r1, r2
 8015d34:	4618      	mov	r0, r3
 8015d36:	f7ee f94a 	bl	8003fce <HAL_PCD_EP_Close>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d3e:	7bfb      	ldrb	r3, [r7, #15]
 8015d40:	4618      	mov	r0, r3
 8015d42:	f000 f905 	bl	8015f50 <USBD_Get_USB_Status>
 8015d46:	4603      	mov	r3, r0
 8015d48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3710      	adds	r7, #16
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}

08015d54 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b084      	sub	sp, #16
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
 8015d5c:	460b      	mov	r3, r1
 8015d5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d60:	2300      	movs	r3, #0
 8015d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d64:	2300      	movs	r3, #0
 8015d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015d6e:	78fa      	ldrb	r2, [r7, #3]
 8015d70:	4611      	mov	r1, r2
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7ee faef 	bl	8004356 <HAL_PCD_EP_Flush>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d7c:	7bfb      	ldrb	r3, [r7, #15]
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f000 f8e6 	bl	8015f50 <USBD_Get_USB_Status>
 8015d84:	4603      	mov	r3, r0
 8015d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	3710      	adds	r7, #16
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}

08015d92 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d92:	b580      	push	{r7, lr}
 8015d94:	b084      	sub	sp, #16
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	6078      	str	r0, [r7, #4]
 8015d9a:	460b      	mov	r3, r1
 8015d9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015da2:	2300      	movs	r3, #0
 8015da4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015dac:	78fa      	ldrb	r2, [r7, #3]
 8015dae:	4611      	mov	r1, r2
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7ee f9e5 	bl	8004180 <HAL_PCD_EP_SetStall>
 8015db6:	4603      	mov	r3, r0
 8015db8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dba:	7bfb      	ldrb	r3, [r7, #15]
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	f000 f8c7 	bl	8015f50 <USBD_Get_USB_Status>
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	3710      	adds	r7, #16
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}

08015dd0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b084      	sub	sp, #16
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
 8015dd8:	460b      	mov	r3, r1
 8015dda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ddc:	2300      	movs	r3, #0
 8015dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015de0:	2300      	movs	r3, #0
 8015de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015dea:	78fa      	ldrb	r2, [r7, #3]
 8015dec:	4611      	mov	r1, r2
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7ee fa2a 	bl	8004248 <HAL_PCD_EP_ClrStall>
 8015df4:	4603      	mov	r3, r0
 8015df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015df8:	7bfb      	ldrb	r3, [r7, #15]
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f000 f8a8 	bl	8015f50 <USBD_Get_USB_Status>
 8015e00:	4603      	mov	r3, r0
 8015e02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}

08015e0e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e0e:	b480      	push	{r7}
 8015e10:	b085      	sub	sp, #20
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	6078      	str	r0, [r7, #4]
 8015e16:	460b      	mov	r3, r1
 8015e18:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015e20:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	da0b      	bge.n	8015e42 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015e2a:	78fb      	ldrb	r3, [r7, #3]
 8015e2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e30:	68f9      	ldr	r1, [r7, #12]
 8015e32:	4613      	mov	r3, r2
 8015e34:	00db      	lsls	r3, r3, #3
 8015e36:	4413      	add	r3, r2
 8015e38:	009b      	lsls	r3, r3, #2
 8015e3a:	440b      	add	r3, r1
 8015e3c:	333e      	adds	r3, #62	; 0x3e
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	e00b      	b.n	8015e5a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015e42:	78fb      	ldrb	r3, [r7, #3]
 8015e44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e48:	68f9      	ldr	r1, [r7, #12]
 8015e4a:	4613      	mov	r3, r2
 8015e4c:	00db      	lsls	r3, r3, #3
 8015e4e:	4413      	add	r3, r2
 8015e50:	009b      	lsls	r3, r3, #2
 8015e52:	440b      	add	r3, r1
 8015e54:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015e58:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3714      	adds	r7, #20
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e64:	4770      	bx	lr

08015e66 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015e66:	b580      	push	{r7, lr}
 8015e68:	b084      	sub	sp, #16
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	6078      	str	r0, [r7, #4]
 8015e6e:	460b      	mov	r3, r1
 8015e70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e72:	2300      	movs	r3, #0
 8015e74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e76:	2300      	movs	r3, #0
 8015e78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015e80:	78fa      	ldrb	r2, [r7, #3]
 8015e82:	4611      	mov	r1, r2
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7ee f815 	bl	8003eb4 <HAL_PCD_SetAddress>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e8e:	7bfb      	ldrb	r3, [r7, #15]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f000 f85d 	bl	8015f50 <USBD_Get_USB_Status>
 8015e96:	4603      	mov	r3, r0
 8015e98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3710      	adds	r7, #16
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b086      	sub	sp, #24
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	607a      	str	r2, [r7, #4]
 8015eae:	603b      	str	r3, [r7, #0]
 8015eb0:	460b      	mov	r3, r1
 8015eb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015eb8:	2300      	movs	r3, #0
 8015eba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8015ec2:	7af9      	ldrb	r1, [r7, #11]
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	687a      	ldr	r2, [r7, #4]
 8015ec8:	f7ee f91f 	bl	800410a <HAL_PCD_EP_Transmit>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ed0:	7dfb      	ldrb	r3, [r7, #23]
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f000 f83c 	bl	8015f50 <USBD_Get_USB_Status>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015edc:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3718      	adds	r7, #24
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}

08015ee6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b086      	sub	sp, #24
 8015eea:	af00      	add	r7, sp, #0
 8015eec:	60f8      	str	r0, [r7, #12]
 8015eee:	607a      	str	r2, [r7, #4]
 8015ef0:	603b      	str	r3, [r7, #0]
 8015ef2:	460b      	mov	r3, r1
 8015ef4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015efa:	2300      	movs	r3, #0
 8015efc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8015f04:	7af9      	ldrb	r1, [r7, #11]
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	f7ee f8aa 	bl	8004062 <HAL_PCD_EP_Receive>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f12:	7dfb      	ldrb	r3, [r7, #23]
 8015f14:	4618      	mov	r0, r3
 8015f16:	f000 f81b 	bl	8015f50 <USBD_Get_USB_Status>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015f1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015f20:	4618      	mov	r0, r3
 8015f22:	3718      	adds	r7, #24
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}

08015f28 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
 8015f30:	460b      	mov	r3, r1
 8015f32:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015f3a:	78fa      	ldrb	r2, [r7, #3]
 8015f3c:	4611      	mov	r1, r2
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7ee f8cb 	bl	80040da <HAL_PCD_EP_GetRxCount>
 8015f44:	4603      	mov	r3, r0
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3708      	adds	r7, #8
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}
	...

08015f50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015f50:	b480      	push	{r7}
 8015f52:	b085      	sub	sp, #20
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	4603      	mov	r3, r0
 8015f58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015f5e:	79fb      	ldrb	r3, [r7, #7]
 8015f60:	2b03      	cmp	r3, #3
 8015f62:	d817      	bhi.n	8015f94 <USBD_Get_USB_Status+0x44>
 8015f64:	a201      	add	r2, pc, #4	; (adr r2, 8015f6c <USBD_Get_USB_Status+0x1c>)
 8015f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f6a:	bf00      	nop
 8015f6c:	08015f7d 	.word	0x08015f7d
 8015f70:	08015f83 	.word	0x08015f83
 8015f74:	08015f89 	.word	0x08015f89
 8015f78:	08015f8f 	.word	0x08015f8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8015f80:	e00b      	b.n	8015f9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015f82:	2303      	movs	r3, #3
 8015f84:	73fb      	strb	r3, [r7, #15]
    break;
 8015f86:	e008      	b.n	8015f9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015f88:	2301      	movs	r3, #1
 8015f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8015f8c:	e005      	b.n	8015f9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015f8e:	2303      	movs	r3, #3
 8015f90:	73fb      	strb	r3, [r7, #15]
    break;
 8015f92:	e002      	b.n	8015f9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015f94:	2303      	movs	r3, #3
 8015f96:	73fb      	strb	r3, [r7, #15]
    break;
 8015f98:	bf00      	nop
  }
  return usb_status;
 8015f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3714      	adds	r7, #20
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr

08015fa8 <usb_printf>:
#include "usbd_cdc_if.h"

//extern uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];

void usb_printf(const char *format, ...)
{
 8015fa8:	b40f      	push	{r0, r1, r2, r3}
 8015faa:	b580      	push	{r7, lr}
 8015fac:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8015fb0:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
    uint8_t buf[APP_TX_DATA_SIZE];

    va_start(args, format);
 8015fb2:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8015fb6:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
    length = vsnprintf((char *)buf, APP_TX_DATA_SIZE, (char *)format, args);
 8015fba:	4638      	mov	r0, r7
 8015fbc:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8015fc0:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8015fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015fc8:	f000 f8fc 	bl	80161c4 <vsniprintf>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    va_end(args);
    CDC_Transmit_FS(buf, length);
 8015fd2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8015fd6:	b29a      	uxth	r2, r3
 8015fd8:	463b      	mov	r3, r7
 8015fda:	4611      	mov	r1, r2
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7ff fac5 	bl	801556c <CDC_Transmit_FS>
}
 8015fe2:	bf00      	nop
 8015fe4:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015fee:	b004      	add	sp, #16
 8015ff0:	4770      	bx	lr
	...

08015ff4 <malloc>:
 8015ff4:	4b02      	ldr	r3, [pc, #8]	; (8016000 <malloc+0xc>)
 8015ff6:	4601      	mov	r1, r0
 8015ff8:	6818      	ldr	r0, [r3, #0]
 8015ffa:	f000 b82b 	b.w	8016054 <_malloc_r>
 8015ffe:	bf00      	nop
 8016000:	24000280 	.word	0x24000280

08016004 <free>:
 8016004:	4b02      	ldr	r3, [pc, #8]	; (8016010 <free+0xc>)
 8016006:	4601      	mov	r1, r0
 8016008:	6818      	ldr	r0, [r3, #0]
 801600a:	f000 b92d 	b.w	8016268 <_free_r>
 801600e:	bf00      	nop
 8016010:	24000280 	.word	0x24000280

08016014 <sbrk_aligned>:
 8016014:	b570      	push	{r4, r5, r6, lr}
 8016016:	4e0e      	ldr	r6, [pc, #56]	; (8016050 <sbrk_aligned+0x3c>)
 8016018:	460c      	mov	r4, r1
 801601a:	6831      	ldr	r1, [r6, #0]
 801601c:	4605      	mov	r5, r0
 801601e:	b911      	cbnz	r1, 8016026 <sbrk_aligned+0x12>
 8016020:	f000 f8e6 	bl	80161f0 <_sbrk_r>
 8016024:	6030      	str	r0, [r6, #0]
 8016026:	4621      	mov	r1, r4
 8016028:	4628      	mov	r0, r5
 801602a:	f000 f8e1 	bl	80161f0 <_sbrk_r>
 801602e:	1c43      	adds	r3, r0, #1
 8016030:	d00a      	beq.n	8016048 <sbrk_aligned+0x34>
 8016032:	1cc4      	adds	r4, r0, #3
 8016034:	f024 0403 	bic.w	r4, r4, #3
 8016038:	42a0      	cmp	r0, r4
 801603a:	d007      	beq.n	801604c <sbrk_aligned+0x38>
 801603c:	1a21      	subs	r1, r4, r0
 801603e:	4628      	mov	r0, r5
 8016040:	f000 f8d6 	bl	80161f0 <_sbrk_r>
 8016044:	3001      	adds	r0, #1
 8016046:	d101      	bne.n	801604c <sbrk_aligned+0x38>
 8016048:	f04f 34ff 	mov.w	r4, #4294967295
 801604c:	4620      	mov	r0, r4
 801604e:	bd70      	pop	{r4, r5, r6, pc}
 8016050:	24002448 	.word	0x24002448

08016054 <_malloc_r>:
 8016054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016058:	1ccd      	adds	r5, r1, #3
 801605a:	f025 0503 	bic.w	r5, r5, #3
 801605e:	3508      	adds	r5, #8
 8016060:	2d0c      	cmp	r5, #12
 8016062:	bf38      	it	cc
 8016064:	250c      	movcc	r5, #12
 8016066:	2d00      	cmp	r5, #0
 8016068:	4607      	mov	r7, r0
 801606a:	db01      	blt.n	8016070 <_malloc_r+0x1c>
 801606c:	42a9      	cmp	r1, r5
 801606e:	d905      	bls.n	801607c <_malloc_r+0x28>
 8016070:	230c      	movs	r3, #12
 8016072:	603b      	str	r3, [r7, #0]
 8016074:	2600      	movs	r6, #0
 8016076:	4630      	mov	r0, r6
 8016078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801607c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016150 <_malloc_r+0xfc>
 8016080:	f000 f868 	bl	8016154 <__malloc_lock>
 8016084:	f8d8 3000 	ldr.w	r3, [r8]
 8016088:	461c      	mov	r4, r3
 801608a:	bb5c      	cbnz	r4, 80160e4 <_malloc_r+0x90>
 801608c:	4629      	mov	r1, r5
 801608e:	4638      	mov	r0, r7
 8016090:	f7ff ffc0 	bl	8016014 <sbrk_aligned>
 8016094:	1c43      	adds	r3, r0, #1
 8016096:	4604      	mov	r4, r0
 8016098:	d155      	bne.n	8016146 <_malloc_r+0xf2>
 801609a:	f8d8 4000 	ldr.w	r4, [r8]
 801609e:	4626      	mov	r6, r4
 80160a0:	2e00      	cmp	r6, #0
 80160a2:	d145      	bne.n	8016130 <_malloc_r+0xdc>
 80160a4:	2c00      	cmp	r4, #0
 80160a6:	d048      	beq.n	801613a <_malloc_r+0xe6>
 80160a8:	6823      	ldr	r3, [r4, #0]
 80160aa:	4631      	mov	r1, r6
 80160ac:	4638      	mov	r0, r7
 80160ae:	eb04 0903 	add.w	r9, r4, r3
 80160b2:	f000 f89d 	bl	80161f0 <_sbrk_r>
 80160b6:	4581      	cmp	r9, r0
 80160b8:	d13f      	bne.n	801613a <_malloc_r+0xe6>
 80160ba:	6821      	ldr	r1, [r4, #0]
 80160bc:	1a6d      	subs	r5, r5, r1
 80160be:	4629      	mov	r1, r5
 80160c0:	4638      	mov	r0, r7
 80160c2:	f7ff ffa7 	bl	8016014 <sbrk_aligned>
 80160c6:	3001      	adds	r0, #1
 80160c8:	d037      	beq.n	801613a <_malloc_r+0xe6>
 80160ca:	6823      	ldr	r3, [r4, #0]
 80160cc:	442b      	add	r3, r5
 80160ce:	6023      	str	r3, [r4, #0]
 80160d0:	f8d8 3000 	ldr.w	r3, [r8]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d038      	beq.n	801614a <_malloc_r+0xf6>
 80160d8:	685a      	ldr	r2, [r3, #4]
 80160da:	42a2      	cmp	r2, r4
 80160dc:	d12b      	bne.n	8016136 <_malloc_r+0xe2>
 80160de:	2200      	movs	r2, #0
 80160e0:	605a      	str	r2, [r3, #4]
 80160e2:	e00f      	b.n	8016104 <_malloc_r+0xb0>
 80160e4:	6822      	ldr	r2, [r4, #0]
 80160e6:	1b52      	subs	r2, r2, r5
 80160e8:	d41f      	bmi.n	801612a <_malloc_r+0xd6>
 80160ea:	2a0b      	cmp	r2, #11
 80160ec:	d917      	bls.n	801611e <_malloc_r+0xca>
 80160ee:	1961      	adds	r1, r4, r5
 80160f0:	42a3      	cmp	r3, r4
 80160f2:	6025      	str	r5, [r4, #0]
 80160f4:	bf18      	it	ne
 80160f6:	6059      	strne	r1, [r3, #4]
 80160f8:	6863      	ldr	r3, [r4, #4]
 80160fa:	bf08      	it	eq
 80160fc:	f8c8 1000 	streq.w	r1, [r8]
 8016100:	5162      	str	r2, [r4, r5]
 8016102:	604b      	str	r3, [r1, #4]
 8016104:	4638      	mov	r0, r7
 8016106:	f104 060b 	add.w	r6, r4, #11
 801610a:	f000 f829 	bl	8016160 <__malloc_unlock>
 801610e:	f026 0607 	bic.w	r6, r6, #7
 8016112:	1d23      	adds	r3, r4, #4
 8016114:	1af2      	subs	r2, r6, r3
 8016116:	d0ae      	beq.n	8016076 <_malloc_r+0x22>
 8016118:	1b9b      	subs	r3, r3, r6
 801611a:	50a3      	str	r3, [r4, r2]
 801611c:	e7ab      	b.n	8016076 <_malloc_r+0x22>
 801611e:	42a3      	cmp	r3, r4
 8016120:	6862      	ldr	r2, [r4, #4]
 8016122:	d1dd      	bne.n	80160e0 <_malloc_r+0x8c>
 8016124:	f8c8 2000 	str.w	r2, [r8]
 8016128:	e7ec      	b.n	8016104 <_malloc_r+0xb0>
 801612a:	4623      	mov	r3, r4
 801612c:	6864      	ldr	r4, [r4, #4]
 801612e:	e7ac      	b.n	801608a <_malloc_r+0x36>
 8016130:	4634      	mov	r4, r6
 8016132:	6876      	ldr	r6, [r6, #4]
 8016134:	e7b4      	b.n	80160a0 <_malloc_r+0x4c>
 8016136:	4613      	mov	r3, r2
 8016138:	e7cc      	b.n	80160d4 <_malloc_r+0x80>
 801613a:	230c      	movs	r3, #12
 801613c:	603b      	str	r3, [r7, #0]
 801613e:	4638      	mov	r0, r7
 8016140:	f000 f80e 	bl	8016160 <__malloc_unlock>
 8016144:	e797      	b.n	8016076 <_malloc_r+0x22>
 8016146:	6025      	str	r5, [r4, #0]
 8016148:	e7dc      	b.n	8016104 <_malloc_r+0xb0>
 801614a:	605b      	str	r3, [r3, #4]
 801614c:	deff      	udf	#255	; 0xff
 801614e:	bf00      	nop
 8016150:	24002444 	.word	0x24002444

08016154 <__malloc_lock>:
 8016154:	4801      	ldr	r0, [pc, #4]	; (801615c <__malloc_lock+0x8>)
 8016156:	f000 b885 	b.w	8016264 <__retarget_lock_acquire_recursive>
 801615a:	bf00      	nop
 801615c:	24002588 	.word	0x24002588

08016160 <__malloc_unlock>:
 8016160:	4801      	ldr	r0, [pc, #4]	; (8016168 <__malloc_unlock+0x8>)
 8016162:	f000 b880 	b.w	8016266 <__retarget_lock_release_recursive>
 8016166:	bf00      	nop
 8016168:	24002588 	.word	0x24002588

0801616c <_vsniprintf_r>:
 801616c:	b530      	push	{r4, r5, lr}
 801616e:	4614      	mov	r4, r2
 8016170:	2c00      	cmp	r4, #0
 8016172:	b09b      	sub	sp, #108	; 0x6c
 8016174:	4605      	mov	r5, r0
 8016176:	461a      	mov	r2, r3
 8016178:	da05      	bge.n	8016186 <_vsniprintf_r+0x1a>
 801617a:	238b      	movs	r3, #139	; 0x8b
 801617c:	6003      	str	r3, [r0, #0]
 801617e:	f04f 30ff 	mov.w	r0, #4294967295
 8016182:	b01b      	add	sp, #108	; 0x6c
 8016184:	bd30      	pop	{r4, r5, pc}
 8016186:	f44f 7302 	mov.w	r3, #520	; 0x208
 801618a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801618e:	bf14      	ite	ne
 8016190:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016194:	4623      	moveq	r3, r4
 8016196:	9302      	str	r3, [sp, #8]
 8016198:	9305      	str	r3, [sp, #20]
 801619a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801619e:	9100      	str	r1, [sp, #0]
 80161a0:	9104      	str	r1, [sp, #16]
 80161a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80161a6:	4669      	mov	r1, sp
 80161a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80161aa:	f000 f903 	bl	80163b4 <_svfiprintf_r>
 80161ae:	1c43      	adds	r3, r0, #1
 80161b0:	bfbc      	itt	lt
 80161b2:	238b      	movlt	r3, #139	; 0x8b
 80161b4:	602b      	strlt	r3, [r5, #0]
 80161b6:	2c00      	cmp	r4, #0
 80161b8:	d0e3      	beq.n	8016182 <_vsniprintf_r+0x16>
 80161ba:	9b00      	ldr	r3, [sp, #0]
 80161bc:	2200      	movs	r2, #0
 80161be:	701a      	strb	r2, [r3, #0]
 80161c0:	e7df      	b.n	8016182 <_vsniprintf_r+0x16>
	...

080161c4 <vsniprintf>:
 80161c4:	b507      	push	{r0, r1, r2, lr}
 80161c6:	9300      	str	r3, [sp, #0]
 80161c8:	4613      	mov	r3, r2
 80161ca:	460a      	mov	r2, r1
 80161cc:	4601      	mov	r1, r0
 80161ce:	4803      	ldr	r0, [pc, #12]	; (80161dc <vsniprintf+0x18>)
 80161d0:	6800      	ldr	r0, [r0, #0]
 80161d2:	f7ff ffcb 	bl	801616c <_vsniprintf_r>
 80161d6:	b003      	add	sp, #12
 80161d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80161dc:	24000280 	.word	0x24000280

080161e0 <memset>:
 80161e0:	4402      	add	r2, r0
 80161e2:	4603      	mov	r3, r0
 80161e4:	4293      	cmp	r3, r2
 80161e6:	d100      	bne.n	80161ea <memset+0xa>
 80161e8:	4770      	bx	lr
 80161ea:	f803 1b01 	strb.w	r1, [r3], #1
 80161ee:	e7f9      	b.n	80161e4 <memset+0x4>

080161f0 <_sbrk_r>:
 80161f0:	b538      	push	{r3, r4, r5, lr}
 80161f2:	4d06      	ldr	r5, [pc, #24]	; (801620c <_sbrk_r+0x1c>)
 80161f4:	2300      	movs	r3, #0
 80161f6:	4604      	mov	r4, r0
 80161f8:	4608      	mov	r0, r1
 80161fa:	602b      	str	r3, [r5, #0]
 80161fc:	f7ea fc90 	bl	8000b20 <_sbrk>
 8016200:	1c43      	adds	r3, r0, #1
 8016202:	d102      	bne.n	801620a <_sbrk_r+0x1a>
 8016204:	682b      	ldr	r3, [r5, #0]
 8016206:	b103      	cbz	r3, 801620a <_sbrk_r+0x1a>
 8016208:	6023      	str	r3, [r4, #0]
 801620a:	bd38      	pop	{r3, r4, r5, pc}
 801620c:	24002584 	.word	0x24002584

08016210 <__errno>:
 8016210:	4b01      	ldr	r3, [pc, #4]	; (8016218 <__errno+0x8>)
 8016212:	6818      	ldr	r0, [r3, #0]
 8016214:	4770      	bx	lr
 8016216:	bf00      	nop
 8016218:	24000280 	.word	0x24000280

0801621c <__libc_init_array>:
 801621c:	b570      	push	{r4, r5, r6, lr}
 801621e:	4d0d      	ldr	r5, [pc, #52]	; (8016254 <__libc_init_array+0x38>)
 8016220:	4c0d      	ldr	r4, [pc, #52]	; (8016258 <__libc_init_array+0x3c>)
 8016222:	1b64      	subs	r4, r4, r5
 8016224:	10a4      	asrs	r4, r4, #2
 8016226:	2600      	movs	r6, #0
 8016228:	42a6      	cmp	r6, r4
 801622a:	d109      	bne.n	8016240 <__libc_init_array+0x24>
 801622c:	4d0b      	ldr	r5, [pc, #44]	; (801625c <__libc_init_array+0x40>)
 801622e:	4c0c      	ldr	r4, [pc, #48]	; (8016260 <__libc_init_array+0x44>)
 8016230:	f000 fbae 	bl	8016990 <_init>
 8016234:	1b64      	subs	r4, r4, r5
 8016236:	10a4      	asrs	r4, r4, #2
 8016238:	2600      	movs	r6, #0
 801623a:	42a6      	cmp	r6, r4
 801623c:	d105      	bne.n	801624a <__libc_init_array+0x2e>
 801623e:	bd70      	pop	{r4, r5, r6, pc}
 8016240:	f855 3b04 	ldr.w	r3, [r5], #4
 8016244:	4798      	blx	r3
 8016246:	3601      	adds	r6, #1
 8016248:	e7ee      	b.n	8016228 <__libc_init_array+0xc>
 801624a:	f855 3b04 	ldr.w	r3, [r5], #4
 801624e:	4798      	blx	r3
 8016250:	3601      	adds	r6, #1
 8016252:	e7f2      	b.n	801623a <__libc_init_array+0x1e>
 8016254:	08045e24 	.word	0x08045e24
 8016258:	08045e24 	.word	0x08045e24
 801625c:	08045e24 	.word	0x08045e24
 8016260:	08045e28 	.word	0x08045e28

08016264 <__retarget_lock_acquire_recursive>:
 8016264:	4770      	bx	lr

08016266 <__retarget_lock_release_recursive>:
 8016266:	4770      	bx	lr

08016268 <_free_r>:
 8016268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801626a:	2900      	cmp	r1, #0
 801626c:	d044      	beq.n	80162f8 <_free_r+0x90>
 801626e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016272:	9001      	str	r0, [sp, #4]
 8016274:	2b00      	cmp	r3, #0
 8016276:	f1a1 0404 	sub.w	r4, r1, #4
 801627a:	bfb8      	it	lt
 801627c:	18e4      	addlt	r4, r4, r3
 801627e:	f7ff ff69 	bl	8016154 <__malloc_lock>
 8016282:	4a1e      	ldr	r2, [pc, #120]	; (80162fc <_free_r+0x94>)
 8016284:	9801      	ldr	r0, [sp, #4]
 8016286:	6813      	ldr	r3, [r2, #0]
 8016288:	b933      	cbnz	r3, 8016298 <_free_r+0x30>
 801628a:	6063      	str	r3, [r4, #4]
 801628c:	6014      	str	r4, [r2, #0]
 801628e:	b003      	add	sp, #12
 8016290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016294:	f7ff bf64 	b.w	8016160 <__malloc_unlock>
 8016298:	42a3      	cmp	r3, r4
 801629a:	d908      	bls.n	80162ae <_free_r+0x46>
 801629c:	6825      	ldr	r5, [r4, #0]
 801629e:	1961      	adds	r1, r4, r5
 80162a0:	428b      	cmp	r3, r1
 80162a2:	bf01      	itttt	eq
 80162a4:	6819      	ldreq	r1, [r3, #0]
 80162a6:	685b      	ldreq	r3, [r3, #4]
 80162a8:	1949      	addeq	r1, r1, r5
 80162aa:	6021      	streq	r1, [r4, #0]
 80162ac:	e7ed      	b.n	801628a <_free_r+0x22>
 80162ae:	461a      	mov	r2, r3
 80162b0:	685b      	ldr	r3, [r3, #4]
 80162b2:	b10b      	cbz	r3, 80162b8 <_free_r+0x50>
 80162b4:	42a3      	cmp	r3, r4
 80162b6:	d9fa      	bls.n	80162ae <_free_r+0x46>
 80162b8:	6811      	ldr	r1, [r2, #0]
 80162ba:	1855      	adds	r5, r2, r1
 80162bc:	42a5      	cmp	r5, r4
 80162be:	d10b      	bne.n	80162d8 <_free_r+0x70>
 80162c0:	6824      	ldr	r4, [r4, #0]
 80162c2:	4421      	add	r1, r4
 80162c4:	1854      	adds	r4, r2, r1
 80162c6:	42a3      	cmp	r3, r4
 80162c8:	6011      	str	r1, [r2, #0]
 80162ca:	d1e0      	bne.n	801628e <_free_r+0x26>
 80162cc:	681c      	ldr	r4, [r3, #0]
 80162ce:	685b      	ldr	r3, [r3, #4]
 80162d0:	6053      	str	r3, [r2, #4]
 80162d2:	440c      	add	r4, r1
 80162d4:	6014      	str	r4, [r2, #0]
 80162d6:	e7da      	b.n	801628e <_free_r+0x26>
 80162d8:	d902      	bls.n	80162e0 <_free_r+0x78>
 80162da:	230c      	movs	r3, #12
 80162dc:	6003      	str	r3, [r0, #0]
 80162de:	e7d6      	b.n	801628e <_free_r+0x26>
 80162e0:	6825      	ldr	r5, [r4, #0]
 80162e2:	1961      	adds	r1, r4, r5
 80162e4:	428b      	cmp	r3, r1
 80162e6:	bf04      	itt	eq
 80162e8:	6819      	ldreq	r1, [r3, #0]
 80162ea:	685b      	ldreq	r3, [r3, #4]
 80162ec:	6063      	str	r3, [r4, #4]
 80162ee:	bf04      	itt	eq
 80162f0:	1949      	addeq	r1, r1, r5
 80162f2:	6021      	streq	r1, [r4, #0]
 80162f4:	6054      	str	r4, [r2, #4]
 80162f6:	e7ca      	b.n	801628e <_free_r+0x26>
 80162f8:	b003      	add	sp, #12
 80162fa:	bd30      	pop	{r4, r5, pc}
 80162fc:	24002444 	.word	0x24002444

08016300 <__ssputs_r>:
 8016300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016304:	688e      	ldr	r6, [r1, #8]
 8016306:	461f      	mov	r7, r3
 8016308:	42be      	cmp	r6, r7
 801630a:	680b      	ldr	r3, [r1, #0]
 801630c:	4682      	mov	sl, r0
 801630e:	460c      	mov	r4, r1
 8016310:	4690      	mov	r8, r2
 8016312:	d82c      	bhi.n	801636e <__ssputs_r+0x6e>
 8016314:	898a      	ldrh	r2, [r1, #12]
 8016316:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801631a:	d026      	beq.n	801636a <__ssputs_r+0x6a>
 801631c:	6965      	ldr	r5, [r4, #20]
 801631e:	6909      	ldr	r1, [r1, #16]
 8016320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016324:	eba3 0901 	sub.w	r9, r3, r1
 8016328:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801632c:	1c7b      	adds	r3, r7, #1
 801632e:	444b      	add	r3, r9
 8016330:	106d      	asrs	r5, r5, #1
 8016332:	429d      	cmp	r5, r3
 8016334:	bf38      	it	cc
 8016336:	461d      	movcc	r5, r3
 8016338:	0553      	lsls	r3, r2, #21
 801633a:	d527      	bpl.n	801638c <__ssputs_r+0x8c>
 801633c:	4629      	mov	r1, r5
 801633e:	f7ff fe89 	bl	8016054 <_malloc_r>
 8016342:	4606      	mov	r6, r0
 8016344:	b360      	cbz	r0, 80163a0 <__ssputs_r+0xa0>
 8016346:	6921      	ldr	r1, [r4, #16]
 8016348:	464a      	mov	r2, r9
 801634a:	f000 fadb 	bl	8016904 <memcpy>
 801634e:	89a3      	ldrh	r3, [r4, #12]
 8016350:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016358:	81a3      	strh	r3, [r4, #12]
 801635a:	6126      	str	r6, [r4, #16]
 801635c:	6165      	str	r5, [r4, #20]
 801635e:	444e      	add	r6, r9
 8016360:	eba5 0509 	sub.w	r5, r5, r9
 8016364:	6026      	str	r6, [r4, #0]
 8016366:	60a5      	str	r5, [r4, #8]
 8016368:	463e      	mov	r6, r7
 801636a:	42be      	cmp	r6, r7
 801636c:	d900      	bls.n	8016370 <__ssputs_r+0x70>
 801636e:	463e      	mov	r6, r7
 8016370:	6820      	ldr	r0, [r4, #0]
 8016372:	4632      	mov	r2, r6
 8016374:	4641      	mov	r1, r8
 8016376:	f000 faab 	bl	80168d0 <memmove>
 801637a:	68a3      	ldr	r3, [r4, #8]
 801637c:	1b9b      	subs	r3, r3, r6
 801637e:	60a3      	str	r3, [r4, #8]
 8016380:	6823      	ldr	r3, [r4, #0]
 8016382:	4433      	add	r3, r6
 8016384:	6023      	str	r3, [r4, #0]
 8016386:	2000      	movs	r0, #0
 8016388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801638c:	462a      	mov	r2, r5
 801638e:	f000 fac7 	bl	8016920 <_realloc_r>
 8016392:	4606      	mov	r6, r0
 8016394:	2800      	cmp	r0, #0
 8016396:	d1e0      	bne.n	801635a <__ssputs_r+0x5a>
 8016398:	6921      	ldr	r1, [r4, #16]
 801639a:	4650      	mov	r0, sl
 801639c:	f7ff ff64 	bl	8016268 <_free_r>
 80163a0:	230c      	movs	r3, #12
 80163a2:	f8ca 3000 	str.w	r3, [sl]
 80163a6:	89a3      	ldrh	r3, [r4, #12]
 80163a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163ac:	81a3      	strh	r3, [r4, #12]
 80163ae:	f04f 30ff 	mov.w	r0, #4294967295
 80163b2:	e7e9      	b.n	8016388 <__ssputs_r+0x88>

080163b4 <_svfiprintf_r>:
 80163b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163b8:	4698      	mov	r8, r3
 80163ba:	898b      	ldrh	r3, [r1, #12]
 80163bc:	061b      	lsls	r3, r3, #24
 80163be:	b09d      	sub	sp, #116	; 0x74
 80163c0:	4607      	mov	r7, r0
 80163c2:	460d      	mov	r5, r1
 80163c4:	4614      	mov	r4, r2
 80163c6:	d50e      	bpl.n	80163e6 <_svfiprintf_r+0x32>
 80163c8:	690b      	ldr	r3, [r1, #16]
 80163ca:	b963      	cbnz	r3, 80163e6 <_svfiprintf_r+0x32>
 80163cc:	2140      	movs	r1, #64	; 0x40
 80163ce:	f7ff fe41 	bl	8016054 <_malloc_r>
 80163d2:	6028      	str	r0, [r5, #0]
 80163d4:	6128      	str	r0, [r5, #16]
 80163d6:	b920      	cbnz	r0, 80163e2 <_svfiprintf_r+0x2e>
 80163d8:	230c      	movs	r3, #12
 80163da:	603b      	str	r3, [r7, #0]
 80163dc:	f04f 30ff 	mov.w	r0, #4294967295
 80163e0:	e0d0      	b.n	8016584 <_svfiprintf_r+0x1d0>
 80163e2:	2340      	movs	r3, #64	; 0x40
 80163e4:	616b      	str	r3, [r5, #20]
 80163e6:	2300      	movs	r3, #0
 80163e8:	9309      	str	r3, [sp, #36]	; 0x24
 80163ea:	2320      	movs	r3, #32
 80163ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80163f4:	2330      	movs	r3, #48	; 0x30
 80163f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801659c <_svfiprintf_r+0x1e8>
 80163fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80163fe:	f04f 0901 	mov.w	r9, #1
 8016402:	4623      	mov	r3, r4
 8016404:	469a      	mov	sl, r3
 8016406:	f813 2b01 	ldrb.w	r2, [r3], #1
 801640a:	b10a      	cbz	r2, 8016410 <_svfiprintf_r+0x5c>
 801640c:	2a25      	cmp	r2, #37	; 0x25
 801640e:	d1f9      	bne.n	8016404 <_svfiprintf_r+0x50>
 8016410:	ebba 0b04 	subs.w	fp, sl, r4
 8016414:	d00b      	beq.n	801642e <_svfiprintf_r+0x7a>
 8016416:	465b      	mov	r3, fp
 8016418:	4622      	mov	r2, r4
 801641a:	4629      	mov	r1, r5
 801641c:	4638      	mov	r0, r7
 801641e:	f7ff ff6f 	bl	8016300 <__ssputs_r>
 8016422:	3001      	adds	r0, #1
 8016424:	f000 80a9 	beq.w	801657a <_svfiprintf_r+0x1c6>
 8016428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801642a:	445a      	add	r2, fp
 801642c:	9209      	str	r2, [sp, #36]	; 0x24
 801642e:	f89a 3000 	ldrb.w	r3, [sl]
 8016432:	2b00      	cmp	r3, #0
 8016434:	f000 80a1 	beq.w	801657a <_svfiprintf_r+0x1c6>
 8016438:	2300      	movs	r3, #0
 801643a:	f04f 32ff 	mov.w	r2, #4294967295
 801643e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016442:	f10a 0a01 	add.w	sl, sl, #1
 8016446:	9304      	str	r3, [sp, #16]
 8016448:	9307      	str	r3, [sp, #28]
 801644a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801644e:	931a      	str	r3, [sp, #104]	; 0x68
 8016450:	4654      	mov	r4, sl
 8016452:	2205      	movs	r2, #5
 8016454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016458:	4850      	ldr	r0, [pc, #320]	; (801659c <_svfiprintf_r+0x1e8>)
 801645a:	f7e9 ff41 	bl	80002e0 <memchr>
 801645e:	9a04      	ldr	r2, [sp, #16]
 8016460:	b9d8      	cbnz	r0, 801649a <_svfiprintf_r+0xe6>
 8016462:	06d0      	lsls	r0, r2, #27
 8016464:	bf44      	itt	mi
 8016466:	2320      	movmi	r3, #32
 8016468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801646c:	0711      	lsls	r1, r2, #28
 801646e:	bf44      	itt	mi
 8016470:	232b      	movmi	r3, #43	; 0x2b
 8016472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016476:	f89a 3000 	ldrb.w	r3, [sl]
 801647a:	2b2a      	cmp	r3, #42	; 0x2a
 801647c:	d015      	beq.n	80164aa <_svfiprintf_r+0xf6>
 801647e:	9a07      	ldr	r2, [sp, #28]
 8016480:	4654      	mov	r4, sl
 8016482:	2000      	movs	r0, #0
 8016484:	f04f 0c0a 	mov.w	ip, #10
 8016488:	4621      	mov	r1, r4
 801648a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801648e:	3b30      	subs	r3, #48	; 0x30
 8016490:	2b09      	cmp	r3, #9
 8016492:	d94d      	bls.n	8016530 <_svfiprintf_r+0x17c>
 8016494:	b1b0      	cbz	r0, 80164c4 <_svfiprintf_r+0x110>
 8016496:	9207      	str	r2, [sp, #28]
 8016498:	e014      	b.n	80164c4 <_svfiprintf_r+0x110>
 801649a:	eba0 0308 	sub.w	r3, r0, r8
 801649e:	fa09 f303 	lsl.w	r3, r9, r3
 80164a2:	4313      	orrs	r3, r2
 80164a4:	9304      	str	r3, [sp, #16]
 80164a6:	46a2      	mov	sl, r4
 80164a8:	e7d2      	b.n	8016450 <_svfiprintf_r+0x9c>
 80164aa:	9b03      	ldr	r3, [sp, #12]
 80164ac:	1d19      	adds	r1, r3, #4
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	9103      	str	r1, [sp, #12]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	bfbb      	ittet	lt
 80164b6:	425b      	neglt	r3, r3
 80164b8:	f042 0202 	orrlt.w	r2, r2, #2
 80164bc:	9307      	strge	r3, [sp, #28]
 80164be:	9307      	strlt	r3, [sp, #28]
 80164c0:	bfb8      	it	lt
 80164c2:	9204      	strlt	r2, [sp, #16]
 80164c4:	7823      	ldrb	r3, [r4, #0]
 80164c6:	2b2e      	cmp	r3, #46	; 0x2e
 80164c8:	d10c      	bne.n	80164e4 <_svfiprintf_r+0x130>
 80164ca:	7863      	ldrb	r3, [r4, #1]
 80164cc:	2b2a      	cmp	r3, #42	; 0x2a
 80164ce:	d134      	bne.n	801653a <_svfiprintf_r+0x186>
 80164d0:	9b03      	ldr	r3, [sp, #12]
 80164d2:	1d1a      	adds	r2, r3, #4
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	9203      	str	r2, [sp, #12]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	bfb8      	it	lt
 80164dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80164e0:	3402      	adds	r4, #2
 80164e2:	9305      	str	r3, [sp, #20]
 80164e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80165ac <_svfiprintf_r+0x1f8>
 80164e8:	7821      	ldrb	r1, [r4, #0]
 80164ea:	2203      	movs	r2, #3
 80164ec:	4650      	mov	r0, sl
 80164ee:	f7e9 fef7 	bl	80002e0 <memchr>
 80164f2:	b138      	cbz	r0, 8016504 <_svfiprintf_r+0x150>
 80164f4:	9b04      	ldr	r3, [sp, #16]
 80164f6:	eba0 000a 	sub.w	r0, r0, sl
 80164fa:	2240      	movs	r2, #64	; 0x40
 80164fc:	4082      	lsls	r2, r0
 80164fe:	4313      	orrs	r3, r2
 8016500:	3401      	adds	r4, #1
 8016502:	9304      	str	r3, [sp, #16]
 8016504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016508:	4825      	ldr	r0, [pc, #148]	; (80165a0 <_svfiprintf_r+0x1ec>)
 801650a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801650e:	2206      	movs	r2, #6
 8016510:	f7e9 fee6 	bl	80002e0 <memchr>
 8016514:	2800      	cmp	r0, #0
 8016516:	d038      	beq.n	801658a <_svfiprintf_r+0x1d6>
 8016518:	4b22      	ldr	r3, [pc, #136]	; (80165a4 <_svfiprintf_r+0x1f0>)
 801651a:	bb1b      	cbnz	r3, 8016564 <_svfiprintf_r+0x1b0>
 801651c:	9b03      	ldr	r3, [sp, #12]
 801651e:	3307      	adds	r3, #7
 8016520:	f023 0307 	bic.w	r3, r3, #7
 8016524:	3308      	adds	r3, #8
 8016526:	9303      	str	r3, [sp, #12]
 8016528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801652a:	4433      	add	r3, r6
 801652c:	9309      	str	r3, [sp, #36]	; 0x24
 801652e:	e768      	b.n	8016402 <_svfiprintf_r+0x4e>
 8016530:	fb0c 3202 	mla	r2, ip, r2, r3
 8016534:	460c      	mov	r4, r1
 8016536:	2001      	movs	r0, #1
 8016538:	e7a6      	b.n	8016488 <_svfiprintf_r+0xd4>
 801653a:	2300      	movs	r3, #0
 801653c:	3401      	adds	r4, #1
 801653e:	9305      	str	r3, [sp, #20]
 8016540:	4619      	mov	r1, r3
 8016542:	f04f 0c0a 	mov.w	ip, #10
 8016546:	4620      	mov	r0, r4
 8016548:	f810 2b01 	ldrb.w	r2, [r0], #1
 801654c:	3a30      	subs	r2, #48	; 0x30
 801654e:	2a09      	cmp	r2, #9
 8016550:	d903      	bls.n	801655a <_svfiprintf_r+0x1a6>
 8016552:	2b00      	cmp	r3, #0
 8016554:	d0c6      	beq.n	80164e4 <_svfiprintf_r+0x130>
 8016556:	9105      	str	r1, [sp, #20]
 8016558:	e7c4      	b.n	80164e4 <_svfiprintf_r+0x130>
 801655a:	fb0c 2101 	mla	r1, ip, r1, r2
 801655e:	4604      	mov	r4, r0
 8016560:	2301      	movs	r3, #1
 8016562:	e7f0      	b.n	8016546 <_svfiprintf_r+0x192>
 8016564:	ab03      	add	r3, sp, #12
 8016566:	9300      	str	r3, [sp, #0]
 8016568:	462a      	mov	r2, r5
 801656a:	4b0f      	ldr	r3, [pc, #60]	; (80165a8 <_svfiprintf_r+0x1f4>)
 801656c:	a904      	add	r1, sp, #16
 801656e:	4638      	mov	r0, r7
 8016570:	f3af 8000 	nop.w
 8016574:	1c42      	adds	r2, r0, #1
 8016576:	4606      	mov	r6, r0
 8016578:	d1d6      	bne.n	8016528 <_svfiprintf_r+0x174>
 801657a:	89ab      	ldrh	r3, [r5, #12]
 801657c:	065b      	lsls	r3, r3, #25
 801657e:	f53f af2d 	bmi.w	80163dc <_svfiprintf_r+0x28>
 8016582:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016584:	b01d      	add	sp, #116	; 0x74
 8016586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801658a:	ab03      	add	r3, sp, #12
 801658c:	9300      	str	r3, [sp, #0]
 801658e:	462a      	mov	r2, r5
 8016590:	4b05      	ldr	r3, [pc, #20]	; (80165a8 <_svfiprintf_r+0x1f4>)
 8016592:	a904      	add	r1, sp, #16
 8016594:	4638      	mov	r0, r7
 8016596:	f000 f879 	bl	801668c <_printf_i>
 801659a:	e7eb      	b.n	8016574 <_svfiprintf_r+0x1c0>
 801659c:	08045df0 	.word	0x08045df0
 80165a0:	08045dfa 	.word	0x08045dfa
 80165a4:	00000000 	.word	0x00000000
 80165a8:	08016301 	.word	0x08016301
 80165ac:	08045df6 	.word	0x08045df6

080165b0 <_printf_common>:
 80165b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165b4:	4616      	mov	r6, r2
 80165b6:	4699      	mov	r9, r3
 80165b8:	688a      	ldr	r2, [r1, #8]
 80165ba:	690b      	ldr	r3, [r1, #16]
 80165bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80165c0:	4293      	cmp	r3, r2
 80165c2:	bfb8      	it	lt
 80165c4:	4613      	movlt	r3, r2
 80165c6:	6033      	str	r3, [r6, #0]
 80165c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80165cc:	4607      	mov	r7, r0
 80165ce:	460c      	mov	r4, r1
 80165d0:	b10a      	cbz	r2, 80165d6 <_printf_common+0x26>
 80165d2:	3301      	adds	r3, #1
 80165d4:	6033      	str	r3, [r6, #0]
 80165d6:	6823      	ldr	r3, [r4, #0]
 80165d8:	0699      	lsls	r1, r3, #26
 80165da:	bf42      	ittt	mi
 80165dc:	6833      	ldrmi	r3, [r6, #0]
 80165de:	3302      	addmi	r3, #2
 80165e0:	6033      	strmi	r3, [r6, #0]
 80165e2:	6825      	ldr	r5, [r4, #0]
 80165e4:	f015 0506 	ands.w	r5, r5, #6
 80165e8:	d106      	bne.n	80165f8 <_printf_common+0x48>
 80165ea:	f104 0a19 	add.w	sl, r4, #25
 80165ee:	68e3      	ldr	r3, [r4, #12]
 80165f0:	6832      	ldr	r2, [r6, #0]
 80165f2:	1a9b      	subs	r3, r3, r2
 80165f4:	42ab      	cmp	r3, r5
 80165f6:	dc26      	bgt.n	8016646 <_printf_common+0x96>
 80165f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80165fc:	1e13      	subs	r3, r2, #0
 80165fe:	6822      	ldr	r2, [r4, #0]
 8016600:	bf18      	it	ne
 8016602:	2301      	movne	r3, #1
 8016604:	0692      	lsls	r2, r2, #26
 8016606:	d42b      	bmi.n	8016660 <_printf_common+0xb0>
 8016608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801660c:	4649      	mov	r1, r9
 801660e:	4638      	mov	r0, r7
 8016610:	47c0      	blx	r8
 8016612:	3001      	adds	r0, #1
 8016614:	d01e      	beq.n	8016654 <_printf_common+0xa4>
 8016616:	6823      	ldr	r3, [r4, #0]
 8016618:	6922      	ldr	r2, [r4, #16]
 801661a:	f003 0306 	and.w	r3, r3, #6
 801661e:	2b04      	cmp	r3, #4
 8016620:	bf02      	ittt	eq
 8016622:	68e5      	ldreq	r5, [r4, #12]
 8016624:	6833      	ldreq	r3, [r6, #0]
 8016626:	1aed      	subeq	r5, r5, r3
 8016628:	68a3      	ldr	r3, [r4, #8]
 801662a:	bf0c      	ite	eq
 801662c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016630:	2500      	movne	r5, #0
 8016632:	4293      	cmp	r3, r2
 8016634:	bfc4      	itt	gt
 8016636:	1a9b      	subgt	r3, r3, r2
 8016638:	18ed      	addgt	r5, r5, r3
 801663a:	2600      	movs	r6, #0
 801663c:	341a      	adds	r4, #26
 801663e:	42b5      	cmp	r5, r6
 8016640:	d11a      	bne.n	8016678 <_printf_common+0xc8>
 8016642:	2000      	movs	r0, #0
 8016644:	e008      	b.n	8016658 <_printf_common+0xa8>
 8016646:	2301      	movs	r3, #1
 8016648:	4652      	mov	r2, sl
 801664a:	4649      	mov	r1, r9
 801664c:	4638      	mov	r0, r7
 801664e:	47c0      	blx	r8
 8016650:	3001      	adds	r0, #1
 8016652:	d103      	bne.n	801665c <_printf_common+0xac>
 8016654:	f04f 30ff 	mov.w	r0, #4294967295
 8016658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801665c:	3501      	adds	r5, #1
 801665e:	e7c6      	b.n	80165ee <_printf_common+0x3e>
 8016660:	18e1      	adds	r1, r4, r3
 8016662:	1c5a      	adds	r2, r3, #1
 8016664:	2030      	movs	r0, #48	; 0x30
 8016666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801666a:	4422      	add	r2, r4
 801666c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016674:	3302      	adds	r3, #2
 8016676:	e7c7      	b.n	8016608 <_printf_common+0x58>
 8016678:	2301      	movs	r3, #1
 801667a:	4622      	mov	r2, r4
 801667c:	4649      	mov	r1, r9
 801667e:	4638      	mov	r0, r7
 8016680:	47c0      	blx	r8
 8016682:	3001      	adds	r0, #1
 8016684:	d0e6      	beq.n	8016654 <_printf_common+0xa4>
 8016686:	3601      	adds	r6, #1
 8016688:	e7d9      	b.n	801663e <_printf_common+0x8e>
	...

0801668c <_printf_i>:
 801668c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016690:	7e0f      	ldrb	r7, [r1, #24]
 8016692:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016694:	2f78      	cmp	r7, #120	; 0x78
 8016696:	4691      	mov	r9, r2
 8016698:	4680      	mov	r8, r0
 801669a:	460c      	mov	r4, r1
 801669c:	469a      	mov	sl, r3
 801669e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80166a2:	d807      	bhi.n	80166b4 <_printf_i+0x28>
 80166a4:	2f62      	cmp	r7, #98	; 0x62
 80166a6:	d80a      	bhi.n	80166be <_printf_i+0x32>
 80166a8:	2f00      	cmp	r7, #0
 80166aa:	f000 80d4 	beq.w	8016856 <_printf_i+0x1ca>
 80166ae:	2f58      	cmp	r7, #88	; 0x58
 80166b0:	f000 80c0 	beq.w	8016834 <_printf_i+0x1a8>
 80166b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80166bc:	e03a      	b.n	8016734 <_printf_i+0xa8>
 80166be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80166c2:	2b15      	cmp	r3, #21
 80166c4:	d8f6      	bhi.n	80166b4 <_printf_i+0x28>
 80166c6:	a101      	add	r1, pc, #4	; (adr r1, 80166cc <_printf_i+0x40>)
 80166c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80166cc:	08016725 	.word	0x08016725
 80166d0:	08016739 	.word	0x08016739
 80166d4:	080166b5 	.word	0x080166b5
 80166d8:	080166b5 	.word	0x080166b5
 80166dc:	080166b5 	.word	0x080166b5
 80166e0:	080166b5 	.word	0x080166b5
 80166e4:	08016739 	.word	0x08016739
 80166e8:	080166b5 	.word	0x080166b5
 80166ec:	080166b5 	.word	0x080166b5
 80166f0:	080166b5 	.word	0x080166b5
 80166f4:	080166b5 	.word	0x080166b5
 80166f8:	0801683d 	.word	0x0801683d
 80166fc:	08016765 	.word	0x08016765
 8016700:	080167f7 	.word	0x080167f7
 8016704:	080166b5 	.word	0x080166b5
 8016708:	080166b5 	.word	0x080166b5
 801670c:	0801685f 	.word	0x0801685f
 8016710:	080166b5 	.word	0x080166b5
 8016714:	08016765 	.word	0x08016765
 8016718:	080166b5 	.word	0x080166b5
 801671c:	080166b5 	.word	0x080166b5
 8016720:	080167ff 	.word	0x080167ff
 8016724:	682b      	ldr	r3, [r5, #0]
 8016726:	1d1a      	adds	r2, r3, #4
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	602a      	str	r2, [r5, #0]
 801672c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016734:	2301      	movs	r3, #1
 8016736:	e09f      	b.n	8016878 <_printf_i+0x1ec>
 8016738:	6820      	ldr	r0, [r4, #0]
 801673a:	682b      	ldr	r3, [r5, #0]
 801673c:	0607      	lsls	r7, r0, #24
 801673e:	f103 0104 	add.w	r1, r3, #4
 8016742:	6029      	str	r1, [r5, #0]
 8016744:	d501      	bpl.n	801674a <_printf_i+0xbe>
 8016746:	681e      	ldr	r6, [r3, #0]
 8016748:	e003      	b.n	8016752 <_printf_i+0xc6>
 801674a:	0646      	lsls	r6, r0, #25
 801674c:	d5fb      	bpl.n	8016746 <_printf_i+0xba>
 801674e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016752:	2e00      	cmp	r6, #0
 8016754:	da03      	bge.n	801675e <_printf_i+0xd2>
 8016756:	232d      	movs	r3, #45	; 0x2d
 8016758:	4276      	negs	r6, r6
 801675a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801675e:	485a      	ldr	r0, [pc, #360]	; (80168c8 <_printf_i+0x23c>)
 8016760:	230a      	movs	r3, #10
 8016762:	e012      	b.n	801678a <_printf_i+0xfe>
 8016764:	682b      	ldr	r3, [r5, #0]
 8016766:	6820      	ldr	r0, [r4, #0]
 8016768:	1d19      	adds	r1, r3, #4
 801676a:	6029      	str	r1, [r5, #0]
 801676c:	0605      	lsls	r5, r0, #24
 801676e:	d501      	bpl.n	8016774 <_printf_i+0xe8>
 8016770:	681e      	ldr	r6, [r3, #0]
 8016772:	e002      	b.n	801677a <_printf_i+0xee>
 8016774:	0641      	lsls	r1, r0, #25
 8016776:	d5fb      	bpl.n	8016770 <_printf_i+0xe4>
 8016778:	881e      	ldrh	r6, [r3, #0]
 801677a:	4853      	ldr	r0, [pc, #332]	; (80168c8 <_printf_i+0x23c>)
 801677c:	2f6f      	cmp	r7, #111	; 0x6f
 801677e:	bf0c      	ite	eq
 8016780:	2308      	moveq	r3, #8
 8016782:	230a      	movne	r3, #10
 8016784:	2100      	movs	r1, #0
 8016786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801678a:	6865      	ldr	r5, [r4, #4]
 801678c:	60a5      	str	r5, [r4, #8]
 801678e:	2d00      	cmp	r5, #0
 8016790:	bfa2      	ittt	ge
 8016792:	6821      	ldrge	r1, [r4, #0]
 8016794:	f021 0104 	bicge.w	r1, r1, #4
 8016798:	6021      	strge	r1, [r4, #0]
 801679a:	b90e      	cbnz	r6, 80167a0 <_printf_i+0x114>
 801679c:	2d00      	cmp	r5, #0
 801679e:	d04b      	beq.n	8016838 <_printf_i+0x1ac>
 80167a0:	4615      	mov	r5, r2
 80167a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80167a6:	fb03 6711 	mls	r7, r3, r1, r6
 80167aa:	5dc7      	ldrb	r7, [r0, r7]
 80167ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80167b0:	4637      	mov	r7, r6
 80167b2:	42bb      	cmp	r3, r7
 80167b4:	460e      	mov	r6, r1
 80167b6:	d9f4      	bls.n	80167a2 <_printf_i+0x116>
 80167b8:	2b08      	cmp	r3, #8
 80167ba:	d10b      	bne.n	80167d4 <_printf_i+0x148>
 80167bc:	6823      	ldr	r3, [r4, #0]
 80167be:	07de      	lsls	r6, r3, #31
 80167c0:	d508      	bpl.n	80167d4 <_printf_i+0x148>
 80167c2:	6923      	ldr	r3, [r4, #16]
 80167c4:	6861      	ldr	r1, [r4, #4]
 80167c6:	4299      	cmp	r1, r3
 80167c8:	bfde      	ittt	le
 80167ca:	2330      	movle	r3, #48	; 0x30
 80167cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80167d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80167d4:	1b52      	subs	r2, r2, r5
 80167d6:	6122      	str	r2, [r4, #16]
 80167d8:	f8cd a000 	str.w	sl, [sp]
 80167dc:	464b      	mov	r3, r9
 80167de:	aa03      	add	r2, sp, #12
 80167e0:	4621      	mov	r1, r4
 80167e2:	4640      	mov	r0, r8
 80167e4:	f7ff fee4 	bl	80165b0 <_printf_common>
 80167e8:	3001      	adds	r0, #1
 80167ea:	d14a      	bne.n	8016882 <_printf_i+0x1f6>
 80167ec:	f04f 30ff 	mov.w	r0, #4294967295
 80167f0:	b004      	add	sp, #16
 80167f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167f6:	6823      	ldr	r3, [r4, #0]
 80167f8:	f043 0320 	orr.w	r3, r3, #32
 80167fc:	6023      	str	r3, [r4, #0]
 80167fe:	4833      	ldr	r0, [pc, #204]	; (80168cc <_printf_i+0x240>)
 8016800:	2778      	movs	r7, #120	; 0x78
 8016802:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016806:	6823      	ldr	r3, [r4, #0]
 8016808:	6829      	ldr	r1, [r5, #0]
 801680a:	061f      	lsls	r7, r3, #24
 801680c:	f851 6b04 	ldr.w	r6, [r1], #4
 8016810:	d402      	bmi.n	8016818 <_printf_i+0x18c>
 8016812:	065f      	lsls	r7, r3, #25
 8016814:	bf48      	it	mi
 8016816:	b2b6      	uxthmi	r6, r6
 8016818:	07df      	lsls	r7, r3, #31
 801681a:	bf48      	it	mi
 801681c:	f043 0320 	orrmi.w	r3, r3, #32
 8016820:	6029      	str	r1, [r5, #0]
 8016822:	bf48      	it	mi
 8016824:	6023      	strmi	r3, [r4, #0]
 8016826:	b91e      	cbnz	r6, 8016830 <_printf_i+0x1a4>
 8016828:	6823      	ldr	r3, [r4, #0]
 801682a:	f023 0320 	bic.w	r3, r3, #32
 801682e:	6023      	str	r3, [r4, #0]
 8016830:	2310      	movs	r3, #16
 8016832:	e7a7      	b.n	8016784 <_printf_i+0xf8>
 8016834:	4824      	ldr	r0, [pc, #144]	; (80168c8 <_printf_i+0x23c>)
 8016836:	e7e4      	b.n	8016802 <_printf_i+0x176>
 8016838:	4615      	mov	r5, r2
 801683a:	e7bd      	b.n	80167b8 <_printf_i+0x12c>
 801683c:	682b      	ldr	r3, [r5, #0]
 801683e:	6826      	ldr	r6, [r4, #0]
 8016840:	6961      	ldr	r1, [r4, #20]
 8016842:	1d18      	adds	r0, r3, #4
 8016844:	6028      	str	r0, [r5, #0]
 8016846:	0635      	lsls	r5, r6, #24
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	d501      	bpl.n	8016850 <_printf_i+0x1c4>
 801684c:	6019      	str	r1, [r3, #0]
 801684e:	e002      	b.n	8016856 <_printf_i+0x1ca>
 8016850:	0670      	lsls	r0, r6, #25
 8016852:	d5fb      	bpl.n	801684c <_printf_i+0x1c0>
 8016854:	8019      	strh	r1, [r3, #0]
 8016856:	2300      	movs	r3, #0
 8016858:	6123      	str	r3, [r4, #16]
 801685a:	4615      	mov	r5, r2
 801685c:	e7bc      	b.n	80167d8 <_printf_i+0x14c>
 801685e:	682b      	ldr	r3, [r5, #0]
 8016860:	1d1a      	adds	r2, r3, #4
 8016862:	602a      	str	r2, [r5, #0]
 8016864:	681d      	ldr	r5, [r3, #0]
 8016866:	6862      	ldr	r2, [r4, #4]
 8016868:	2100      	movs	r1, #0
 801686a:	4628      	mov	r0, r5
 801686c:	f7e9 fd38 	bl	80002e0 <memchr>
 8016870:	b108      	cbz	r0, 8016876 <_printf_i+0x1ea>
 8016872:	1b40      	subs	r0, r0, r5
 8016874:	6060      	str	r0, [r4, #4]
 8016876:	6863      	ldr	r3, [r4, #4]
 8016878:	6123      	str	r3, [r4, #16]
 801687a:	2300      	movs	r3, #0
 801687c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016880:	e7aa      	b.n	80167d8 <_printf_i+0x14c>
 8016882:	6923      	ldr	r3, [r4, #16]
 8016884:	462a      	mov	r2, r5
 8016886:	4649      	mov	r1, r9
 8016888:	4640      	mov	r0, r8
 801688a:	47d0      	blx	sl
 801688c:	3001      	adds	r0, #1
 801688e:	d0ad      	beq.n	80167ec <_printf_i+0x160>
 8016890:	6823      	ldr	r3, [r4, #0]
 8016892:	079b      	lsls	r3, r3, #30
 8016894:	d413      	bmi.n	80168be <_printf_i+0x232>
 8016896:	68e0      	ldr	r0, [r4, #12]
 8016898:	9b03      	ldr	r3, [sp, #12]
 801689a:	4298      	cmp	r0, r3
 801689c:	bfb8      	it	lt
 801689e:	4618      	movlt	r0, r3
 80168a0:	e7a6      	b.n	80167f0 <_printf_i+0x164>
 80168a2:	2301      	movs	r3, #1
 80168a4:	4632      	mov	r2, r6
 80168a6:	4649      	mov	r1, r9
 80168a8:	4640      	mov	r0, r8
 80168aa:	47d0      	blx	sl
 80168ac:	3001      	adds	r0, #1
 80168ae:	d09d      	beq.n	80167ec <_printf_i+0x160>
 80168b0:	3501      	adds	r5, #1
 80168b2:	68e3      	ldr	r3, [r4, #12]
 80168b4:	9903      	ldr	r1, [sp, #12]
 80168b6:	1a5b      	subs	r3, r3, r1
 80168b8:	42ab      	cmp	r3, r5
 80168ba:	dcf2      	bgt.n	80168a2 <_printf_i+0x216>
 80168bc:	e7eb      	b.n	8016896 <_printf_i+0x20a>
 80168be:	2500      	movs	r5, #0
 80168c0:	f104 0619 	add.w	r6, r4, #25
 80168c4:	e7f5      	b.n	80168b2 <_printf_i+0x226>
 80168c6:	bf00      	nop
 80168c8:	08045e01 	.word	0x08045e01
 80168cc:	08045e12 	.word	0x08045e12

080168d0 <memmove>:
 80168d0:	4288      	cmp	r0, r1
 80168d2:	b510      	push	{r4, lr}
 80168d4:	eb01 0402 	add.w	r4, r1, r2
 80168d8:	d902      	bls.n	80168e0 <memmove+0x10>
 80168da:	4284      	cmp	r4, r0
 80168dc:	4623      	mov	r3, r4
 80168de:	d807      	bhi.n	80168f0 <memmove+0x20>
 80168e0:	1e43      	subs	r3, r0, #1
 80168e2:	42a1      	cmp	r1, r4
 80168e4:	d008      	beq.n	80168f8 <memmove+0x28>
 80168e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80168ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80168ee:	e7f8      	b.n	80168e2 <memmove+0x12>
 80168f0:	4402      	add	r2, r0
 80168f2:	4601      	mov	r1, r0
 80168f4:	428a      	cmp	r2, r1
 80168f6:	d100      	bne.n	80168fa <memmove+0x2a>
 80168f8:	bd10      	pop	{r4, pc}
 80168fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80168fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016902:	e7f7      	b.n	80168f4 <memmove+0x24>

08016904 <memcpy>:
 8016904:	440a      	add	r2, r1
 8016906:	4291      	cmp	r1, r2
 8016908:	f100 33ff 	add.w	r3, r0, #4294967295
 801690c:	d100      	bne.n	8016910 <memcpy+0xc>
 801690e:	4770      	bx	lr
 8016910:	b510      	push	{r4, lr}
 8016912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016916:	f803 4f01 	strb.w	r4, [r3, #1]!
 801691a:	4291      	cmp	r1, r2
 801691c:	d1f9      	bne.n	8016912 <memcpy+0xe>
 801691e:	bd10      	pop	{r4, pc}

08016920 <_realloc_r>:
 8016920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016924:	4680      	mov	r8, r0
 8016926:	4614      	mov	r4, r2
 8016928:	460e      	mov	r6, r1
 801692a:	b921      	cbnz	r1, 8016936 <_realloc_r+0x16>
 801692c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016930:	4611      	mov	r1, r2
 8016932:	f7ff bb8f 	b.w	8016054 <_malloc_r>
 8016936:	b92a      	cbnz	r2, 8016944 <_realloc_r+0x24>
 8016938:	f7ff fc96 	bl	8016268 <_free_r>
 801693c:	4625      	mov	r5, r4
 801693e:	4628      	mov	r0, r5
 8016940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016944:	f000 f81b 	bl	801697e <_malloc_usable_size_r>
 8016948:	4284      	cmp	r4, r0
 801694a:	4607      	mov	r7, r0
 801694c:	d802      	bhi.n	8016954 <_realloc_r+0x34>
 801694e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016952:	d812      	bhi.n	801697a <_realloc_r+0x5a>
 8016954:	4621      	mov	r1, r4
 8016956:	4640      	mov	r0, r8
 8016958:	f7ff fb7c 	bl	8016054 <_malloc_r>
 801695c:	4605      	mov	r5, r0
 801695e:	2800      	cmp	r0, #0
 8016960:	d0ed      	beq.n	801693e <_realloc_r+0x1e>
 8016962:	42bc      	cmp	r4, r7
 8016964:	4622      	mov	r2, r4
 8016966:	4631      	mov	r1, r6
 8016968:	bf28      	it	cs
 801696a:	463a      	movcs	r2, r7
 801696c:	f7ff ffca 	bl	8016904 <memcpy>
 8016970:	4631      	mov	r1, r6
 8016972:	4640      	mov	r0, r8
 8016974:	f7ff fc78 	bl	8016268 <_free_r>
 8016978:	e7e1      	b.n	801693e <_realloc_r+0x1e>
 801697a:	4635      	mov	r5, r6
 801697c:	e7df      	b.n	801693e <_realloc_r+0x1e>

0801697e <_malloc_usable_size_r>:
 801697e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016982:	1f18      	subs	r0, r3, #4
 8016984:	2b00      	cmp	r3, #0
 8016986:	bfbc      	itt	lt
 8016988:	580b      	ldrlt	r3, [r1, r0]
 801698a:	18c0      	addlt	r0, r0, r3
 801698c:	4770      	bx	lr
	...

08016990 <_init>:
 8016990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016992:	bf00      	nop
 8016994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016996:	bc08      	pop	{r3}
 8016998:	469e      	mov	lr, r3
 801699a:	4770      	bx	lr

0801699c <_fini>:
 801699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801699e:	bf00      	nop
 80169a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169a2:	bc08      	pop	{r3}
 80169a4:	469e      	mov	lr, r3
 80169a6:	4770      	bx	lr
