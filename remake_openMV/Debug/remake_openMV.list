
remake_openMV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b928  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f498  0801bbc8  0801bbc8  0002bbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0804b060  0804b060  0005b060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0804b064  0804b064  0005b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000898  24000000  0804b068  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000c438  24000898  0804b900  00060898  2**2
                  ALLOC
  7 ._user_heap_stack 00006000  2400ccd0  0804b900  0006ccd0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00060898  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000608c6  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f47f  00000000  00000000  00060909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007992  00000000  00000000  0008fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022b8  00000000  00000000  00097720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a18  00000000  00000000  000999d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000442a8  00000000  00000000  0009b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c418  00000000  00000000  000df698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b1e7  00000000  00000000  0011bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009398  00000000  00000000  00286c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000059  00000000  00000000  00290030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000898 	.word	0x24000898
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801bbb0 	.word	0x0801bbb0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400089c 	.word	0x2400089c
 80002dc:	0801bbb0 	.word	0x0801bbb0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <MX_DCMI_Init+0x60>)
 8000386:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <MX_DCMI_Init+0x64>)
 8000388:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_DCMI_Init+0x60>)
 800038c:	2200      	movs	r2, #0
 800038e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_DCMI_Init+0x60>)
 8000392:	2220      	movs	r2, #32
 8000394:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_DCMI_Init+0x60>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MX_DCMI_Init+0x60>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003b0:	2208      	movs	r2, #8
 80003b2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003bc:	2200      	movs	r2, #0
 80003be:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_DCMI_Init+0x60>)
 80003ce:	f001 f949 	bl	8001664 <HAL_DCMI_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80003d8:	f000 fbe6 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	240008b4 	.word	0x240008b4
 80003e4:	48020000 	.word	0x48020000

080003e8 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08e      	sub	sp, #56	; 0x38
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a79      	ldr	r2, [pc, #484]	; (80005ec <HAL_DCMI_MspInit+0x204>)
 8000406:	4293      	cmp	r3, r2
 8000408:	f040 80ec 	bne.w	80005e4 <HAL_DCMI_MspInit+0x1fc>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800040c:	4b78      	ldr	r3, [pc, #480]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800040e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000412:	4a77      	ldr	r2, [pc, #476]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800041c:	4b74      	ldr	r3, [pc, #464]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800041e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	623b      	str	r3, [r7, #32]
 8000428:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800042a:	4b71      	ldr	r3, [pc, #452]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800042c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000430:	4a6f      	ldr	r2, [pc, #444]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800043a:	4b6d      	ldr	r3, [pc, #436]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	61fb      	str	r3, [r7, #28]
 8000446:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000448:	4b69      	ldr	r3, [pc, #420]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800044a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044e:	4a68      	ldr	r2, [pc, #416]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000450:	f043 0302 	orr.w	r3, r3, #2
 8000454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000458:	4b65      	ldr	r3, [pc, #404]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800045a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045e:	f003 0302 	and.w	r3, r3, #2
 8000462:	61bb      	str	r3, [r7, #24]
 8000464:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000466:	4b62      	ldr	r3, [pc, #392]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046c:	4a60      	ldr	r2, [pc, #384]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800046e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000476:	4b5e      	ldr	r3, [pc, #376]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000480:	617b      	str	r3, [r7, #20]
 8000482:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000484:	4b5a      	ldr	r3, [pc, #360]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800048a:	4a59      	ldr	r2, [pc, #356]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000494:	4b56      	ldr	r3, [pc, #344]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 8000496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b53      	ldr	r3, [pc, #332]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 80004a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a8:	4a51      	ldr	r2, [pc, #324]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004b2:	4b4f      	ldr	r3, [pc, #316]	; (80005f0 <HAL_DCMI_MspInit+0x208>)
 80004b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80004c0:	2370      	movs	r3, #112	; 0x70
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	2302      	movs	r3, #2
 80004c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2300      	movs	r3, #0
 80004ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80004d0:	230d      	movs	r3, #13
 80004d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d8:	4619      	mov	r1, r3
 80004da:	4846      	ldr	r0, [pc, #280]	; (80005f4 <HAL_DCMI_MspInit+0x20c>)
 80004dc:	f004 fef2 	bl	80052c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80004e0:	23c0      	movs	r3, #192	; 0xc0
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e4:	2302      	movs	r3, #2
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2300      	movs	r3, #0
 80004ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80004f0:	230d      	movs	r3, #13
 80004f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f8:	4619      	mov	r1, r3
 80004fa:	483f      	ldr	r0, [pc, #252]	; (80005f8 <HAL_DCMI_MspInit+0x210>)
 80004fc:	f004 fee2 	bl	80052c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000500:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2300      	movs	r3, #0
 8000510:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000512:	230d      	movs	r3, #13
 8000514:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051a:	4619      	mov	r1, r3
 800051c:	4837      	ldr	r0, [pc, #220]	; (80005fc <HAL_DCMI_MspInit+0x214>)
 800051e:	f004 fed1 	bl	80052c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000522:	23c0      	movs	r3, #192	; 0xc0
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000526:	2302      	movs	r3, #2
 8000528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2300      	movs	r3, #0
 8000530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000532:	230d      	movs	r3, #13
 8000534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053a:	4619      	mov	r1, r3
 800053c:	4830      	ldr	r0, [pc, #192]	; (8000600 <HAL_DCMI_MspInit+0x218>)
 800053e:	f004 fec1 	bl	80052c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000542:	2350      	movs	r3, #80	; 0x50
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000546:	2302      	movs	r3, #2
 8000548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000552:	230d      	movs	r3, #13
 8000554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055a:	4619      	mov	r1, r3
 800055c:	4829      	ldr	r0, [pc, #164]	; (8000604 <HAL_DCMI_MspInit+0x21c>)
 800055e:	f004 feb1 	bl	80052c4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream1;
 8000562:	4b29      	ldr	r3, [pc, #164]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 8000564:	4a29      	ldr	r2, [pc, #164]	; (800060c <HAL_DCMI_MspInit+0x224>)
 8000566:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 800056a:	224b      	movs	r2, #75	; 0x4b
 800056c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800056e:	4b26      	ldr	r3, [pc, #152]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 800057c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000580:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 8000584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000588:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800058a:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 800058c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000590:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 8000594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000598:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800059a:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 800059c:	2200      	movs	r2, #0
 800059e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80005b8:	4813      	ldr	r0, [pc, #76]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005ba:	f001 fb97 	bl	8001cec <HAL_DMA_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 80005c4:	f000 faf0 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005cc:	649a      	str	r2, [r3, #72]	; 0x48
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_DCMI_MspInit+0x220>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 1, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	204e      	movs	r0, #78	; 0x4e
 80005da:	f001 f80e 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80005de:	204e      	movs	r0, #78	; 0x4e
 80005e0:	f001 f825 	bl	800162e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80005e4:	bf00      	nop
 80005e6:	3738      	adds	r7, #56	; 0x38
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	48020000 	.word	0x48020000
 80005f0:	58024400 	.word	0x58024400
 80005f4:	58021000 	.word	0x58021000
 80005f8:	58020400 	.word	0x58020400
 80005fc:	58021800 	.word	0x58021800
 8000600:	58020800 	.word	0x58020800
 8000604:	58020000 	.word	0x58020000
 8000608:	24000904 	.word	0x24000904
 800060c:	40020028 	.word	0x40020028

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_DMA_Init+0x4c>)
 8000618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800061c:	4a0f      	ldr	r2, [pc, #60]	; (800065c <MX_DMA_Init+0x4c>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_DMA_Init+0x4c>)
 8000628:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2102      	movs	r1, #2
 8000638:	200c      	movs	r0, #12
 800063a:	f000 ffde 	bl	80015fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800063e:	200c      	movs	r0, #12
 8000640:	f000 fff5 	bl	800162e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	2106      	movs	r1, #6
 8000648:	2010      	movs	r0, #16
 800064a:	f000 ffd6 	bl	80015fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800064e:	2010      	movs	r0, #16
 8000650:	f000 ffed 	bl	800162e <HAL_NVIC_EnableIRQ>

}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	58024400 	.word	0x58024400

08000660 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b7b      	ldr	r3, [pc, #492]	; (8000864 <MX_GPIO_Init+0x204>)
 8000678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067c:	4a79      	ldr	r2, [pc, #484]	; (8000864 <MX_GPIO_Init+0x204>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000686:	4b77      	ldr	r3, [pc, #476]	; (8000864 <MX_GPIO_Init+0x204>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000694:	4b73      	ldr	r3, [pc, #460]	; (8000864 <MX_GPIO_Init+0x204>)
 8000696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069a:	4a72      	ldr	r2, [pc, #456]	; (8000864 <MX_GPIO_Init+0x204>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a4:	4b6f      	ldr	r3, [pc, #444]	; (8000864 <MX_GPIO_Init+0x204>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b6c      	ldr	r3, [pc, #432]	; (8000864 <MX_GPIO_Init+0x204>)
 80006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b8:	4a6a      	ldr	r2, [pc, #424]	; (8000864 <MX_GPIO_Init+0x204>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c2:	4b68      	ldr	r3, [pc, #416]	; (8000864 <MX_GPIO_Init+0x204>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b64      	ldr	r3, [pc, #400]	; (8000864 <MX_GPIO_Init+0x204>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d6:	4a63      	ldr	r2, [pc, #396]	; (8000864 <MX_GPIO_Init+0x204>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e0:	4b60      	ldr	r3, [pc, #384]	; (8000864 <MX_GPIO_Init+0x204>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ee:	4b5d      	ldr	r3, [pc, #372]	; (8000864 <MX_GPIO_Init+0x204>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f4:	4a5b      	ldr	r2, [pc, #364]	; (8000864 <MX_GPIO_Init+0x204>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fe:	4b59      	ldr	r3, [pc, #356]	; (8000864 <MX_GPIO_Init+0x204>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	f003 0310 	and.w	r3, r3, #16
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800070c:	4b55      	ldr	r3, [pc, #340]	; (8000864 <MX_GPIO_Init+0x204>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000712:	4a54      	ldr	r2, [pc, #336]	; (8000864 <MX_GPIO_Init+0x204>)
 8000714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071c:	4b51      	ldr	r3, [pc, #324]	; (8000864 <MX_GPIO_Init+0x204>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <MX_GPIO_Init+0x204>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	4a4c      	ldr	r2, [pc, #304]	; (8000864 <MX_GPIO_Init+0x204>)
 8000732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073a:	4b4a      	ldr	r3, [pc, #296]	; (8000864 <MX_GPIO_Init+0x204>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	4846      	ldr	r0, [pc, #280]	; (8000868 <MX_GPIO_Init+0x208>)
 800074e:	f004 ff69 	bl	8005624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000758:	4844      	ldr	r0, [pc, #272]	; (800086c <MX_GPIO_Init+0x20c>)
 800075a:	f004 ff63 	bl	8005624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2107      	movs	r1, #7
 8000762:	4843      	ldr	r0, [pc, #268]	; (8000870 <MX_GPIO_Init+0x210>)
 8000764:	f004 ff5e 	bl	8005624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800076e:	483e      	ldr	r0, [pc, #248]	; (8000868 <MX_GPIO_Init+0x208>)
 8000770:	f004 ff58 	bl	8005624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2120      	movs	r1, #32
 8000778:	483c      	ldr	r0, [pc, #240]	; (800086c <MX_GPIO_Init+0x20c>)
 800077a:	f004 ff53 	bl	8005624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000784:	483b      	ldr	r0, [pc, #236]	; (8000874 <MX_GPIO_Init+0x214>)
 8000786:	f004 ff4d 	bl	8005624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWDN_Pin;
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000792:	2301      	movs	r3, #1
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_PWDN_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4831      	ldr	r0, [pc, #196]	; (8000868 <MX_GPIO_Init+0x208>)
 80007a2:	f004 fd8f 	bl	80052c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin;
 80007a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RST_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	482b      	ldr	r0, [pc, #172]	; (800086c <MX_GPIO_Init+0x20c>)
 80007c0:	f004 fd80 	bl	80052c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80007c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4822      	ldr	r0, [pc, #136]	; (800086c <MX_GPIO_Init+0x20c>)
 80007e2:	f004 fd6f 	bl	80052c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80007e6:	2307      	movs	r3, #7
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	481c      	ldr	r0, [pc, #112]	; (8000870 <MX_GPIO_Init+0x210>)
 80007fe:	f004 fd61 	bl	80052c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RST_Pin;
 8000802:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4813      	ldr	r0, [pc, #76]	; (8000868 <MX_GPIO_Init+0x208>)
 800081c:	f004 fd52 	bl	80052c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 8000820:	2320      	movs	r3, #32
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_GPIO_Init+0x20c>)
 8000838:	f004 fd44 	bl	80052c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <MX_GPIO_Init+0x214>)
 8000856:	f004 fd35 	bl	80052c4 <HAL_GPIO_Init>

}
 800085a:	bf00      	nop
 800085c:	3730      	adds	r7, #48	; 0x30
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	58024400 	.word	0x58024400
 8000868:	58020c00 	.word	0x58020c00
 800086c:	58020000 	.word	0x58020000
 8000870:	58020800 	.word	0x58020800
 8000874:	58020400 	.word	0x58020400

08000878 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_I2C1_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_I2C1_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109093DC;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_I2C1_Init+0x74>)
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x7c>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_I2C1_Init+0x74>)
 8000890:	2201      	movs	r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b2:	480e      	ldr	r0, [pc, #56]	; (80008ec <MX_I2C1_Init+0x74>)
 80008b4:	f004 fef4 	bl	80056a0 <HAL_I2C_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008be:	f000 f973 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_I2C1_Init+0x74>)
 80008c6:	f005 fc61 	bl	800618c <HAL_I2CEx_ConfigAnalogFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 f96a 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_I2C1_Init+0x74>)
 80008d8:	f005 fca3 	bl	8006222 <HAL_I2CEx_ConfigDigitalFilter>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 f961 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2400097c 	.word	0x2400097c
 80008f0:	40005400 	.word	0x40005400
 80008f4:	109093dc 	.word	0x109093dc

080008f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0ba      	sub	sp, #232	; 0xe8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	22c0      	movs	r2, #192	; 0xc0
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f01a fbf7 	bl	801b10c <memset>
  if(i2cHandle->Instance==I2C1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a31      	ldr	r2, [pc, #196]	; (80009e8 <HAL_I2C_MspInit+0xf0>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d15a      	bne.n	80009de <HAL_I2C_MspInit+0xe6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000928:	f04f 0208 	mov.w	r2, #8
 800092c:	f04f 0300 	mov.w	r3, #0
 8000930:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000938:	230c      	movs	r3, #12
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000940:	2303      	movs	r3, #3
 8000942:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000948:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800094e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 4096;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4618      	mov	r0, r3
 8000968:	f008 f812 	bl	8008990 <HAL_RCCEx_PeriphCLKConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000972:	f000 f919 	bl	8000ba8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000994:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099c:	2312      	movs	r3, #18
 800099e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ae:	2304      	movs	r3, #4
 80009b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <HAL_I2C_MspInit+0xf8>)
 80009bc:	f004 fc82 	bl	80052c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 80009c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009c6:	4a09      	ldr	r2, [pc, #36]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 80009c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_I2C_MspInit+0xf4>)
 80009d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009de:	bf00      	nop
 80009e0:	37e8      	adds	r7, #232	; 0xe8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40005400 	.word	0x40005400
 80009ec:	58024400 	.word	0x58024400
 80009f0:	58020400 	.word	0x58020400

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f000 fc62 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f000 f81c 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a00:	f7ff fe2e 	bl	8000660 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a04:	f7ff fe04 	bl	8000610 <MX_DMA_Init>
  MX_SPI2_Init();
 8000a08:	f000 f986 	bl	8000d18 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000a0c:	f017 fe5c 	bl	80186c8 <MX_USB_DEVICE_Init>
  MX_SDMMC1_SD_Init();
 8000a10:	f000 f8d0 	bl	8000bb4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000a14:	f00e ffb0 	bl	800f978 <MX_FATFS_Init>
  MX_DCMI_Init();
 8000a18:	f7ff fcb2 	bl	8000380 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000a1c:	f7ff ff2c 	bl	8000878 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000a20:	f017 fad4 	bl	8017fcc <lcd_init>
  FatFs_read_Check();
 8000a24:	f017 f85e 	bl	8017ae4 <FatFs_read_Check>
  FatFs_write_Check();
 8000a28:	f017 f8a6 	bl	8017b78 <FatFs_write_Check>
  camera_RGB565_init();
 8000a2c:	f018 fc56 	bl	80192dc <camera_RGB565_init>
//	  HAL_GPIO_TogglePin(LED_G_GPIO_Port,LED_G_Pin);
//	  HAL_Delay(500);
//	  HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);
//	  HAL_Delay(500);
//	  usb_printf("openmv4 plus board cdc test\r\n");
	  TFT_LCD_RGB565_run();
 8000a30:	f018 fd20 	bl	8019474 <TFT_LCD_RGB565_run>
 8000a34:	e7fc      	b.n	8000a30 <main+0x3c>
	...

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09e      	sub	sp, #120	; 0x78
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a42:	224c      	movs	r2, #76	; 0x4c
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f01a fb60 	bl	801b10c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2220      	movs	r2, #32
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f01a fb59 	bl	801b10c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f006 ff14 	bl	8007888 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b4d      	ldr	r3, [pc, #308]	; (8000b9c <SystemClock_Config+0x164>)
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	4a4c      	ldr	r2, [pc, #304]	; (8000b9c <SystemClock_Config+0x164>)
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a70:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <SystemClock_Config+0x164>)
 8000a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <SystemClock_Config+0x168>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <SystemClock_Config+0x168>)
 8000a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <SystemClock_Config+0x168>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a92:	bf00      	nop
 8000a94:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <SystemClock_Config+0x168>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa0:	d1f8      	bne.n	8000a94 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <SystemClock_Config+0x16c>)
 8000aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa8:	4a3e      	ldr	r2, [pc, #248]	; (8000ba4 <SystemClock_Config+0x16c>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ab2:	4b3c      	ldr	r3, [pc, #240]	; (8000ba4 <SystemClock_Config+0x16c>)
 8000ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	4b36      	ldr	r3, [pc, #216]	; (8000ba0 <SystemClock_Config+0x168>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a35      	ldr	r2, [pc, #212]	; (8000ba0 <SystemClock_Config+0x168>)
 8000aca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <SystemClock_Config+0x168>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <SystemClock_Config+0x164>)
 8000adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <SystemClock_Config+0x164>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <SystemClock_Config+0x164>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af2:	bf00      	nop
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <SystemClock_Config+0x168>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b00:	d1f8      	bne.n	8000af4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b02:	2321      	movs	r3, #33	; 0x21
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	2302      	movs	r3, #2
 8000b12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b14:	2302      	movs	r3, #2
 8000b16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000b1c:	23f0      	movs	r3, #240	; 0xf0
 8000b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b24:	2308      	movs	r3, #8
 8000b26:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f006 feed 	bl	800791c <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000b48:	f000 f82e 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	233f      	movs	r3, #63	; 0x3f
 8000b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2303      	movs	r3, #3
 8000b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b5c:	2340      	movs	r3, #64	; 0x40
 8000b5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b6a:	2340      	movs	r3, #64	; 0x40
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2104      	movs	r1, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f007 fb2b 	bl	80081d0 <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000b80:	f000 f812 	bl	8000ba8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 8000b84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b88:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f007 fcd5 	bl	800853c <HAL_RCC_MCOConfig>
}
 8000b92:	bf00      	nop
 8000b94:	3778      	adds	r7, #120	; 0x78
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	58000400 	.word	0x58000400
 8000ba0:	58024800 	.word	0x58024800
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <MX_SDMMC1_SD_Init+0x44>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bd0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000bda:	2204      	movs	r2, #4
 8000bdc:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_SDMMC1_SD_Init+0x40>)
 8000be0:	f00a fbd4 	bl	800b38c <HAL_SD_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000bea:	f7ff ffdd 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	240009d0 	.word	0x240009d0
 8000bf8:	52007000 	.word	0x52007000

08000bfc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0bc      	sub	sp, #240	; 0xf0
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	22c0      	movs	r2, #192	; 0xc0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f01a fa75 	bl	801b10c <memset>
  if(sdHandle->Instance==SDMMC1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a38      	ldr	r2, [pc, #224]	; (8000d08 <HAL_SD_MspInit+0x10c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d169      	bne.n	8000d00 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3c:	f107 0318 	add.w	r3, r7, #24
 8000c40:	4618      	mov	r0, r3
 8000c42:	f007 fea5 	bl	8008990 <HAL_RCCEx_PeriphCLKConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000c4c:	f7ff ffac 	bl	8000ba8 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000c50:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c56:	4a2d      	ldr	r2, [pc, #180]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_SD_MspInit+0x110>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8000caa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480f      	ldr	r0, [pc, #60]	; (8000d10 <HAL_SD_MspInit+0x114>)
 8000cd2:	f004 faf7 	bl	80052c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <HAL_SD_MspInit+0x118>)
 8000cfc:	f004 fae2 	bl	80052c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	37f0      	adds	r7, #240	; 0xf0
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	52007000 	.word	0x52007000
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	58020800 	.word	0x58020800
 8000d14:	58020c00 	.word	0x58020c00

08000d18 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d1e:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <MX_SPI2_Init+0xac>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d22:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d30:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_SPI2_Init+0xa8>)
 8000dac:	f00b fea0 	bl	800caf0 <HAL_SPI_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000db6:	f7ff fef7 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	24000a4c 	.word	0x24000a4c
 8000dc4:	40003800 	.word	0x40003800

08000dc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0ba      	sub	sp, #232	; 0xe8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	22c0      	movs	r2, #192	; 0xc0
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f01a f98f 	bl	801b10c <memset>
  if(spiHandle->Instance==SPI2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a42      	ldr	r2, [pc, #264]	; (8000efc <HAL_SPI_MspInit+0x134>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d17c      	bne.n	8000ef2 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 fdbf 	bl	8008990 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000e18:	f7ff fec6 	bl	8000ba8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e22:	4a37      	ldr	r2, [pc, #220]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <HAL_SPI_MspInit+0x138>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e58:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e72:	2305      	movs	r3, #5
 8000e74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4821      	ldr	r0, [pc, #132]	; (8000f04 <HAL_SPI_MspInit+0x13c>)
 8000e80:	f004 fa20 	bl	80052c4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream5;
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000e86:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <HAL_SPI_MspInit+0x144>)
 8000e88:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000e8c:	2228      	movs	r2, #40	; 0x28
 8000e8e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000ec8:	f000 ff10 	bl	8001cec <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8000ed2:	f7ff fe69 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000eda:	679a      	str	r2, [r3, #120]	; 0x78
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_SPI_MspInit+0x140>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2024      	movs	r0, #36	; 0x24
 8000ee8:	f000 fb87 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000eec:	2024      	movs	r0, #36	; 0x24
 8000eee:	f000 fb9e 	bl	800162e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	37e8      	adds	r7, #232	; 0xe8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40003800 	.word	0x40003800
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020400 	.word	0x58020400
 8000f08:	24000ad4 	.word	0x24000ad4
 8000f0c:	40020088 	.word	0x40020088

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_MspInit+0x3c>)
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_MspInit+0x3c>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_MspInit+0x3c>)
 8000f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	207d      	movs	r0, #125	; 0x7d
 8000f3a:	f000 fb5e 	bl	80015fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000f3e:	207d      	movs	r0, #125	; 0x7d
 8000f40:	f000 fb75 	bl	800162e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	58024400 	.word	0x58024400

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 fa02 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA1_Stream1_IRQHandler+0x10>)
 8000faa:	f002 f9c9 	bl	8003340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	24000904 	.word	0x24000904

08000fb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <DMA1_Stream5_IRQHandler+0x10>)
 8000fbe:	f002 f9bf 	bl	8003340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	24000ad4 	.word	0x24000ad4

08000fcc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <SPI2_IRQHandler+0x10>)
 8000fd2:	f00c f8ad 	bl	800d130 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	24000a4c 	.word	0x24000a4c

08000fe0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <DCMI_IRQHandler+0x10>)
 8000fe6:	f000 fd31 	bl	8001a4c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	240008b4 	.word	0x240008b4

08000ff4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <OTG_FS_IRQHandler+0x10>)
 8000ffa:	f005 fab7 	bl	800656c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	24002668 	.word	0x24002668

08001008 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800100c:	f004 fb24 	bl	8005658 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e00a      	b.n	800103c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001026:	f3af 8000 	nop.w
 800102a:	4601      	mov	r1, r0
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	60ba      	str	r2, [r7, #8]
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbf0      	blt.n	8001026 <_read+0x12>
  }

  return len;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e009      	b.n	8001074 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf1      	blt.n	8001060 <_write+0x12>
  }
  return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_close>:

int _close(int file)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ae:	605a      	str	r2, [r3, #4]
  return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_isatty>:

int _isatty(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f01a f852 	bl	801b1c8 <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	24080000 	.word	0x24080000
 8001150:	00004000 	.word	0x00004000
 8001154:	24000b4c 	.word	0x24000b4c
 8001158:	2400ccd0 	.word	0x2400ccd0

0800115c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001160:	4b37      	ldr	r3, [pc, #220]	; (8001240 <SystemInit+0xe4>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	4a36      	ldr	r2, [pc, #216]	; (8001240 <SystemInit+0xe4>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001170:	4b34      	ldr	r3, [pc, #208]	; (8001244 <SystemInit+0xe8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	2b06      	cmp	r3, #6
 800117a:	d807      	bhi.n	800118c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <SystemInit+0xe8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 030f 	bic.w	r3, r3, #15
 8001184:	4a2f      	ldr	r2, [pc, #188]	; (8001244 <SystemInit+0xe8>)
 8001186:	f043 0307 	orr.w	r3, r3, #7
 800118a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <SystemInit+0xec>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <SystemInit+0xec>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <SystemInit+0xec>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <SystemInit+0xec>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4929      	ldr	r1, [pc, #164]	; (8001248 <SystemInit+0xec>)
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <SystemInit+0xf0>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <SystemInit+0xe8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d007      	beq.n	80011c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <SystemInit+0xe8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 030f 	bic.w	r3, r3, #15
 80011be:	4a21      	ldr	r2, [pc, #132]	; (8001244 <SystemInit+0xe8>)
 80011c0:	f043 0307 	orr.w	r3, r3, #7
 80011c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <SystemInit+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <SystemInit+0xec>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <SystemInit+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <SystemInit+0xec>)
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <SystemInit+0xf4>)
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <SystemInit+0xec>)
 80011e0:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <SystemInit+0xf8>)
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <SystemInit+0xec>)
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <SystemInit+0xfc>)
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <SystemInit+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <SystemInit+0xec>)
 80011f2:	4a19      	ldr	r2, [pc, #100]	; (8001258 <SystemInit+0xfc>)
 80011f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <SystemInit+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <SystemInit+0xec>)
 80011fe:	4a16      	ldr	r2, [pc, #88]	; (8001258 <SystemInit+0xfc>)
 8001200:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <SystemInit+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <SystemInit+0xec>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <SystemInit+0xec>)
 800120e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <SystemInit+0xec>)
 8001216:	2200      	movs	r2, #0
 8001218:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <SystemInit+0x100>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <SystemInit+0x104>)
 8001220:	4013      	ands	r3, r2
 8001222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001226:	d202      	bcs.n	800122e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <SystemInit+0x108>)
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <SystemInit+0x10c>)
 8001230:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001234:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	52002000 	.word	0x52002000
 8001248:	58024400 	.word	0x58024400
 800124c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001250:	02020200 	.word	0x02020200
 8001254:	01ff0000 	.word	0x01ff0000
 8001258:	01010280 	.word	0x01010280
 800125c:	5c001000 	.word	0x5c001000
 8001260:	ffff0000 	.word	0xffff0000
 8001264:	51008108 	.word	0x51008108
 8001268:	52004000 	.word	0x52004000

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001270:	f7ff ff74 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	; (80012b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f019 ff9b 	bl	801b1d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff fba9 	bl	80009f4 <main>
  bx  lr
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012ac:	24000898 	.word	0x24000898
  ldr r2, =_sidata
 80012b0:	0804b068 	.word	0x0804b068
  ldr r2, =_sbss
 80012b4:	24000898 	.word	0x24000898
  ldr r4, =_ebss
 80012b8:	2400ccd0 	.word	0x2400ccd0

080012bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC3_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c6:	2003      	movs	r0, #3
 80012c8:	f000 f98c 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012cc:	f007 f9a0 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_Init+0x68>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	4913      	ldr	r1, [pc, #76]	; (800132c <HAL_Init+0x6c>)
 80012de:	5ccb      	ldrb	r3, [r1, r3]
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_Init+0x68>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_Init+0x6c>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_Init+0x70>)
 8001302:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_Init+0x74>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130a:	200f      	movs	r0, #15
 800130c:	f000 f814 	bl	8001338 <HAL_InitTick>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e002      	b.n	8001320 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800131a:	f7ff fdf9 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	58024400 	.word	0x58024400
 800132c:	0801bcd8 	.word	0x0801bcd8
 8001330:	24000004 	.word	0x24000004
 8001334:	24000000 	.word	0x24000000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_InitTick+0x60>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e021      	b.n	8001390 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_InitTick+0x64>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_InitTick+0x60>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f971 	bl	800164a <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f93b 	bl	80015fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x68>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2400000c 	.word	0x2400000c
 800139c:	24000000 	.word	0x24000000
 80013a0:	24000008 	.word	0x24000008

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	2400000c 	.word	0x2400000c
 80013c8:	24000b50 	.word	0x24000b50

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	24000b50 	.word	0x24000b50

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_Delay+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2400000c 	.word	0x2400000c

0800142c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_GetREVID+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	0c1b      	lsrs	r3, r3, #16
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	5c001000 	.word	0x5c001000

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <__NVIC_SetPriorityGrouping+0x40>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	4313      	orrs	r3, r2
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x40>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00
 8001488:	05fa0000 	.word	0x05fa0000

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f7ff ff8e 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff29 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff40 	bl	800148c <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff90 	bl	8001538 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5f 	bl	80014e4 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff33 	bl	80014a8 <__NVIC_EnableIRQ>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffa4 	bl	80015a0 <SysTick_Config>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e069      	b.n	800174a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7fe feb0 	bl	80003e8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_DCMI_Init+0xf0>)
 80016aa:	400b      	ands	r3, r1
 80016ac:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80016c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80016ce:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80016da:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80016e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80016f2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b10      	cmp	r3, #16
 8001702:	d112      	bne.n	800172a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7f1b      	ldrb	r3, [r3, #28]
 8001708:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7f5b      	ldrb	r3, [r3, #29]
 800170e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001710:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7f9b      	ldrb	r3, [r3, #30]
 8001716:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001718:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7fdb      	ldrb	r3, [r3, #31]
 8001720:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001726:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001728:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 021e 	orr.w	r2, r2, #30
 8001738:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	ffe0f007 	.word	0xffe0f007

08001758 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_DCMI_Start_DMA+0x1c>
 8001770:	2302      	movs	r3, #2
 8001772:	e0ab      	b.n	80018cc <HAL_DCMI_Start_DMA+0x174>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001792:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0202 	bic.w	r2, r2, #2
 80017a2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b8:	4a46      	ldr	r2, [pc, #280]	; (80018d4 <HAL_DCMI_Start_DMA+0x17c>)
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c0:	4a45      	ldr	r2, [pc, #276]	; (80018d8 <HAL_DCMI_Start_DMA+0x180>)
 80017c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c8:	2200      	movs	r2, #0
 80017ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ea:	d219      	bcs.n	8001820 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3328      	adds	r3, #40	; 0x28
 80017f6:	4619      	mov	r1, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	f000 fdd2 	bl	80023a4 <HAL_DMA_Start_IT>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d055      	beq.n	80018b2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2240      	movs	r2, #64	; 0x40
 800180a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e055      	b.n	80018cc <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001824:	4a2b      	ldr	r2, [pc, #172]	; (80018d4 <HAL_DCMI_Start_DMA+0x17c>)
 8001826:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800183a:	e009      	b.n	8001850 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001840:	085a      	lsrs	r2, r3, #1
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	005a      	lsls	r2, r3, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001858:	d2f0      	bcs.n	800183c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185e:	1e9a      	subs	r2, r3, #2
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3328      	adds	r3, #40	; 0x28
 8001882:	4619      	mov	r1, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	f003 f869 	bl	8004964 <HAL_DMAEx_MultiBufferStart_IT>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00c      	beq.n	80018b2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2240      	movs	r2, #64	; 0x40
 800189c:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00c      	b.n	80018cc <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	08001b8d 	.word	0x08001b8d
 80018d8:	08001cb3 	.word	0x08001cb3

080018dc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_DCMI_Stop+0xb8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <HAL_DCMI_Stop+0xbc>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0a5b      	lsrs	r3, r3, #9
 80018f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_DCMI_Stop+0x30>
 8001908:	2302      	movs	r3, #2
 800190a:	e03f      	b.n	800198c <HAL_DCMI_Stop+0xb0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3b01      	subs	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d108      	bne.n	800194a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	f043 0220 	orr.w	r2, r3, #32
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	72fb      	strb	r3, [r7, #11]
      break;
 8001948:	e006      	b.n	8001958 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1e9      	bne.n	800192c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001966:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196c:	4618      	mov	r0, r3
 800196e:	f000 ff83 	bl	8002878 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800198a:	7afb      	ldrb	r3, [r7, #11]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	24000000 	.word	0x24000000
 8001998:	10624dd3 	.word	0x10624dd3

0800199c <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_DCMI_Suspend+0xa8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_DCMI_Suspend+0xac>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0a5b      	lsrs	r3, r3, #9
 80019b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_DCMI_Suspend+0x30>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e034      	b.n	8001a36 <HAL_DCMI_Suspend+0x9a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d125      	bne.n	8001a2c <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2205      	movs	r2, #5
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10c      	bne.n	8001a1e <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	f043 0220 	orr.w	r2, r3, #32
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	72fb      	strb	r3, [r7, #11]
        break;
 8001a1c:	e006      	b.n	8001a2c <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e5      	bne.n	80019f8 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001a34:	7afb      	ldrb	r3, [r7, #11]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	24000000 	.word	0x24000000
 8001a48:	10624dd3 	.word	0x10624dd3

08001a4c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d016      	beq.n	8001a94 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f043 0202 	orr.w	r2, r3, #2
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a86:	4a31      	ldr	r2, [pc, #196]	; (8001b4c <HAL_DCMI_IRQHandler+0x100>)
 8001a88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 fa10 	bl	8002eb4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d016      	beq.n	8001acc <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001abe:	4a23      	ldr	r2, [pc, #140]	; (8001b4c <HAL_DCMI_IRQHandler+0x100>)
 8001ac0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 f9f4 	bl	8002eb4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2210      	movs	r2, #16
 8001adc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f840 	bl	8001b64 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2208      	movs	r2, #8
 8001af4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f83e 	bl	8001b78 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d01d      	beq.n	8001b42 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d107      	bne.n	8001b24 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 021e 	bic.w	r2, r2, #30
 8001b22:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f017 fc33 	bl	80193a8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	08001cb3 	.word	0x08001cb3

08001b50 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d043      	beq.n	8001c2a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bae:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d118      	bne.n	8001bee <DCMI_DMAXferCplt+0x62>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d015      	beq.n	8001bee <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd4:	00da      	lsls	r2, r3, #3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	4413      	add	r3, r2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f003 fa1f 	bl	8005020 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
 8001bec:	e044      	b.n	8001c78 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d13c      	bne.n	8001c78 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	00da      	lsls	r2, r3, #3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	4413      	add	r3, r2
 8001c16:	2201      	movs	r2, #1
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f003 fa01 	bl	8005020 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	1e5a      	subs	r2, r3, #1
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	639a      	str	r2, [r3, #56]	; 0x38
 8001c28:	e026      	b.n	8001c78 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	e017      	b.n	8001c78 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10f      	bne.n	8001c78 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c62:	0099      	lsls	r1, r3, #2
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	440a      	add	r2, r1
 8001c6e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d112      	bne.n	8001caa <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d103      	bne.n	8001caa <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d009      	beq.n	8001cde <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7ff ff36 	bl	8001b50 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff fb6a 	bl	80013cc <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e316      	b.n	8002332 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a66      	ldr	r2, [pc, #408]	; (8001ea4 <HAL_DMA_Init+0x1b8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d04a      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a65      	ldr	r2, [pc, #404]	; (8001ea8 <HAL_DMA_Init+0x1bc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d045      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a63      	ldr	r2, [pc, #396]	; (8001eac <HAL_DMA_Init+0x1c0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d040      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a62      	ldr	r2, [pc, #392]	; (8001eb0 <HAL_DMA_Init+0x1c4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d03b      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a60      	ldr	r2, [pc, #384]	; (8001eb4 <HAL_DMA_Init+0x1c8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d036      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a5f      	ldr	r2, [pc, #380]	; (8001eb8 <HAL_DMA_Init+0x1cc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d031      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a5d      	ldr	r2, [pc, #372]	; (8001ebc <HAL_DMA_Init+0x1d0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d02c      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5c      	ldr	r2, [pc, #368]	; (8001ec0 <HAL_DMA_Init+0x1d4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d027      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5a      	ldr	r2, [pc, #360]	; (8001ec4 <HAL_DMA_Init+0x1d8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d022      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a59      	ldr	r2, [pc, #356]	; (8001ec8 <HAL_DMA_Init+0x1dc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d01d      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_DMA_Init+0x1e0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d018      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <HAL_DMA_Init+0x1e4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a54      	ldr	r2, [pc, #336]	; (8001ed4 <HAL_DMA_Init+0x1e8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00e      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a53      	ldr	r2, [pc, #332]	; (8001ed8 <HAL_DMA_Init+0x1ec>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a51      	ldr	r2, [pc, #324]	; (8001edc <HAL_DMA_Init+0x1f0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a50      	ldr	r2, [pc, #320]	; (8001ee0 <HAL_DMA_Init+0x1f4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_DMA_Init+0xbc>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_DMA_Init+0xbe>
 8001da8:	2300      	movs	r3, #0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 813b 	beq.w	8002026 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a37      	ldr	r2, [pc, #220]	; (8001ea4 <HAL_DMA_Init+0x1b8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d04a      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a36      	ldr	r2, [pc, #216]	; (8001ea8 <HAL_DMA_Init+0x1bc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d045      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_DMA_Init+0x1c0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d040      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a33      	ldr	r2, [pc, #204]	; (8001eb0 <HAL_DMA_Init+0x1c4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d03b      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <HAL_DMA_Init+0x1c8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d036      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <HAL_DMA_Init+0x1cc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d031      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a2e      	ldr	r2, [pc, #184]	; (8001ebc <HAL_DMA_Init+0x1d0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02c      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <HAL_DMA_Init+0x1d4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d027      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2b      	ldr	r2, [pc, #172]	; (8001ec4 <HAL_DMA_Init+0x1d8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d022      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2a      	ldr	r2, [pc, #168]	; (8001ec8 <HAL_DMA_Init+0x1dc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d01d      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <HAL_DMA_Init+0x1e0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d018      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <HAL_DMA_Init+0x1e4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a25      	ldr	r2, [pc, #148]	; (8001ed4 <HAL_DMA_Init+0x1e8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00e      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a24      	ldr	r2, [pc, #144]	; (8001ed8 <HAL_DMA_Init+0x1ec>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <HAL_DMA_Init+0x1f0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a21      	ldr	r2, [pc, #132]	; (8001ee0 <HAL_DMA_Init+0x1f4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <HAL_DMA_Init+0x186>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_DMA_Init+0x196>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e82:	e02f      	b.n	8001ee4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e84:	f7ff faa2 	bl	80013cc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d928      	bls.n	8001ee4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e246      	b.n	8002332 <HAL_DMA_Init+0x646>
 8001ea4:	40020010 	.word	0x40020010
 8001ea8:	40020028 	.word	0x40020028
 8001eac:	40020040 	.word	0x40020040
 8001eb0:	40020058 	.word	0x40020058
 8001eb4:	40020070 	.word	0x40020070
 8001eb8:	40020088 	.word	0x40020088
 8001ebc:	400200a0 	.word	0x400200a0
 8001ec0:	400200b8 	.word	0x400200b8
 8001ec4:	40020410 	.word	0x40020410
 8001ec8:	40020428 	.word	0x40020428
 8001ecc:	40020440 	.word	0x40020440
 8001ed0:	40020458 	.word	0x40020458
 8001ed4:	40020470 	.word	0x40020470
 8001ed8:	40020488 	.word	0x40020488
 8001edc:	400204a0 	.word	0x400204a0
 8001ee0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1c8      	bne.n	8001e84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4b83      	ldr	r3, [pc, #524]	; (800210c <HAL_DMA_Init+0x420>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d107      	bne.n	8001f48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4313      	orrs	r3, r2
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f48:	4b71      	ldr	r3, [pc, #452]	; (8002110 <HAL_DMA_Init+0x424>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b71      	ldr	r3, [pc, #452]	; (8002114 <HAL_DMA_Init+0x428>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f54:	d328      	bcc.n	8001fa8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b28      	cmp	r3, #40	; 0x28
 8001f5c:	d903      	bls.n	8001f66 <HAL_DMA_Init+0x27a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b2e      	cmp	r3, #46	; 0x2e
 8001f64:	d917      	bls.n	8001f96 <HAL_DMA_Init+0x2aa>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b3e      	cmp	r3, #62	; 0x3e
 8001f6c:	d903      	bls.n	8001f76 <HAL_DMA_Init+0x28a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b42      	cmp	r3, #66	; 0x42
 8001f74:	d90f      	bls.n	8001f96 <HAL_DMA_Init+0x2aa>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b46      	cmp	r3, #70	; 0x46
 8001f7c:	d903      	bls.n	8001f86 <HAL_DMA_Init+0x29a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b48      	cmp	r3, #72	; 0x48
 8001f84:	d907      	bls.n	8001f96 <HAL_DMA_Init+0x2aa>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b4e      	cmp	r3, #78	; 0x4e
 8001f8c:	d905      	bls.n	8001f9a <HAL_DMA_Init+0x2ae>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b52      	cmp	r3, #82	; 0x52
 8001f94:	d801      	bhi.n	8001f9a <HAL_DMA_Init+0x2ae>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_DMA_Init+0x2b0>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f023 0307 	bic.w	r3, r3, #7
 8001fbe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d117      	bne.n	8002002 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00e      	beq.n	8002002 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f002 fb33 	bl	8004650 <DMA_CheckFifoParam>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2240      	movs	r2, #64	; 0x40
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e197      	b.n	8002332 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f002 fa6e 	bl	80044ec <DMA_CalcBaseAndBitshift>
 8002010:	4603      	mov	r3, r0
 8002012:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	223f      	movs	r2, #63	; 0x3f
 800201e:	409a      	lsls	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e0cd      	b.n	80021c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a3b      	ldr	r2, [pc, #236]	; (8002118 <HAL_DMA_Init+0x42c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d022      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a39      	ldr	r2, [pc, #228]	; (800211c <HAL_DMA_Init+0x430>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01d      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a38      	ldr	r2, [pc, #224]	; (8002120 <HAL_DMA_Init+0x434>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d018      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a36      	ldr	r2, [pc, #216]	; (8002124 <HAL_DMA_Init+0x438>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a35      	ldr	r2, [pc, #212]	; (8002128 <HAL_DMA_Init+0x43c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00e      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a33      	ldr	r2, [pc, #204]	; (800212c <HAL_DMA_Init+0x440>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d009      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a32      	ldr	r2, [pc, #200]	; (8002130 <HAL_DMA_Init+0x444>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a30      	ldr	r2, [pc, #192]	; (8002134 <HAL_DMA_Init+0x448>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_DMA_Init+0x38e>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_DMA_Init+0x390>
 800207a:	2300      	movs	r3, #0
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8097 	beq.w	80021b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a24      	ldr	r2, [pc, #144]	; (8002118 <HAL_DMA_Init+0x42c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d021      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a22      	ldr	r2, [pc, #136]	; (800211c <HAL_DMA_Init+0x430>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01c      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_DMA_Init+0x434>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d017      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_DMA_Init+0x438>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d012      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <HAL_DMA_Init+0x43c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00d      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1c      	ldr	r2, [pc, #112]	; (800212c <HAL_DMA_Init+0x440>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d008      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <HAL_DMA_Init+0x444>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d003      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_DMA_Init+0x448>)
 80020ce:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_DMA_Init+0x44c>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	d021      	beq.n	800213c <HAL_DMA_Init+0x450>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d102      	bne.n	8002106 <HAL_DMA_Init+0x41a>
 8002100:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002104:	e01b      	b.n	800213e <HAL_DMA_Init+0x452>
 8002106:	2300      	movs	r3, #0
 8002108:	e019      	b.n	800213e <HAL_DMA_Init+0x452>
 800210a:	bf00      	nop
 800210c:	fe10803f 	.word	0xfe10803f
 8002110:	5c001000 	.word	0x5c001000
 8002114:	ffff0000 	.word	0xffff0000
 8002118:	58025408 	.word	0x58025408
 800211c:	5802541c 	.word	0x5802541c
 8002120:	58025430 	.word	0x58025430
 8002124:	58025444 	.word	0x58025444
 8002128:	58025458 	.word	0x58025458
 800212c:	5802546c 	.word	0x5802546c
 8002130:	58025480 	.word	0x58025480
 8002134:	58025494 	.word	0x58025494
 8002138:	fffe000f 	.word	0xfffe000f
 800213c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68d2      	ldr	r2, [r2, #12]
 8002142:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800214c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800215c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002164:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800216c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b6e      	ldr	r3, [pc, #440]	; (800233c <HAL_DMA_Init+0x650>)
 8002184:	4413      	add	r3, r2
 8002186:	4a6e      	ldr	r2, [pc, #440]	; (8002340 <HAL_DMA_Init+0x654>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f002 f9a9 	bl	80044ec <DMA_CalcBaseAndBitshift>
 800219a:	4603      	mov	r3, r0
 800219c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	2201      	movs	r2, #1
 80021a8:	409a      	lsls	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	e008      	b.n	80021c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0b7      	b.n	8002332 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a5f      	ldr	r2, [pc, #380]	; (8002344 <HAL_DMA_Init+0x658>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d072      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a5d      	ldr	r2, [pc, #372]	; (8002348 <HAL_DMA_Init+0x65c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d06d      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a5c      	ldr	r2, [pc, #368]	; (800234c <HAL_DMA_Init+0x660>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d068      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a5a      	ldr	r2, [pc, #360]	; (8002350 <HAL_DMA_Init+0x664>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d063      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a59      	ldr	r2, [pc, #356]	; (8002354 <HAL_DMA_Init+0x668>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d05e      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a57      	ldr	r2, [pc, #348]	; (8002358 <HAL_DMA_Init+0x66c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d059      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a56      	ldr	r2, [pc, #344]	; (800235c <HAL_DMA_Init+0x670>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d054      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a54      	ldr	r2, [pc, #336]	; (8002360 <HAL_DMA_Init+0x674>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d04f      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a53      	ldr	r2, [pc, #332]	; (8002364 <HAL_DMA_Init+0x678>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d04a      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a51      	ldr	r2, [pc, #324]	; (8002368 <HAL_DMA_Init+0x67c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d045      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a50      	ldr	r2, [pc, #320]	; (800236c <HAL_DMA_Init+0x680>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d040      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a4e      	ldr	r2, [pc, #312]	; (8002370 <HAL_DMA_Init+0x684>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d03b      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a4d      	ldr	r2, [pc, #308]	; (8002374 <HAL_DMA_Init+0x688>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d036      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a4b      	ldr	r2, [pc, #300]	; (8002378 <HAL_DMA_Init+0x68c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d031      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a4a      	ldr	r2, [pc, #296]	; (800237c <HAL_DMA_Init+0x690>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d02c      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a48      	ldr	r2, [pc, #288]	; (8002380 <HAL_DMA_Init+0x694>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d027      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a47      	ldr	r2, [pc, #284]	; (8002384 <HAL_DMA_Init+0x698>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d022      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a45      	ldr	r2, [pc, #276]	; (8002388 <HAL_DMA_Init+0x69c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01d      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a44      	ldr	r2, [pc, #272]	; (800238c <HAL_DMA_Init+0x6a0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d018      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a42      	ldr	r2, [pc, #264]	; (8002390 <HAL_DMA_Init+0x6a4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a41      	ldr	r2, [pc, #260]	; (8002394 <HAL_DMA_Init+0x6a8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00e      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a3f      	ldr	r2, [pc, #252]	; (8002398 <HAL_DMA_Init+0x6ac>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d009      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a3e      	ldr	r2, [pc, #248]	; (800239c <HAL_DMA_Init+0x6b0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d004      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a3c      	ldr	r2, [pc, #240]	; (80023a0 <HAL_DMA_Init+0x6b4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_DMA_Init+0x5ca>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_DMA_Init+0x5cc>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d032      	beq.n	8002322 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f002 fa43 	bl	8004748 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b80      	cmp	r3, #128	; 0x80
 80022c8:	d102      	bne.n	80022d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_DMA_Init+0x624>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d80c      	bhi.n	8002310 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f002 fac0 	bl	800487c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	e008      	b.n	8002322 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	a7fdabf8 	.word	0xa7fdabf8
 8002340:	cccccccd 	.word	0xcccccccd
 8002344:	40020010 	.word	0x40020010
 8002348:	40020028 	.word	0x40020028
 800234c:	40020040 	.word	0x40020040
 8002350:	40020058 	.word	0x40020058
 8002354:	40020070 	.word	0x40020070
 8002358:	40020088 	.word	0x40020088
 800235c:	400200a0 	.word	0x400200a0
 8002360:	400200b8 	.word	0x400200b8
 8002364:	40020410 	.word	0x40020410
 8002368:	40020428 	.word	0x40020428
 800236c:	40020440 	.word	0x40020440
 8002370:	40020458 	.word	0x40020458
 8002374:	40020470 	.word	0x40020470
 8002378:	40020488 	.word	0x40020488
 800237c:	400204a0 	.word	0x400204a0
 8002380:	400204b8 	.word	0x400204b8
 8002384:	58025408 	.word	0x58025408
 8002388:	5802541c 	.word	0x5802541c
 800238c:	58025430 	.word	0x58025430
 8002390:	58025444 	.word	0x58025444
 8002394:	58025458 	.word	0x58025458
 8002398:	5802546c 	.word	0x5802546c
 800239c:	58025480 	.word	0x58025480
 80023a0:	58025494 	.word	0x58025494

080023a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e226      	b.n	800280e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_DMA_Start_IT+0x2a>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e21f      	b.n	800280e <HAL_DMA_Start_IT+0x46a>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	f040 820a 	bne.w	80027f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a68      	ldr	r2, [pc, #416]	; (8002598 <HAL_DMA_Start_IT+0x1f4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d04a      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a66      	ldr	r2, [pc, #408]	; (800259c <HAL_DMA_Start_IT+0x1f8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d045      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a65      	ldr	r2, [pc, #404]	; (80025a0 <HAL_DMA_Start_IT+0x1fc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d040      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_DMA_Start_IT+0x200>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d03b      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a62      	ldr	r2, [pc, #392]	; (80025a8 <HAL_DMA_Start_IT+0x204>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d036      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a60      	ldr	r2, [pc, #384]	; (80025ac <HAL_DMA_Start_IT+0x208>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d031      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5f      	ldr	r2, [pc, #380]	; (80025b0 <HAL_DMA_Start_IT+0x20c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d02c      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a5d      	ldr	r2, [pc, #372]	; (80025b4 <HAL_DMA_Start_IT+0x210>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d027      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a5c      	ldr	r2, [pc, #368]	; (80025b8 <HAL_DMA_Start_IT+0x214>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a5a      	ldr	r2, [pc, #360]	; (80025bc <HAL_DMA_Start_IT+0x218>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01d      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a59      	ldr	r2, [pc, #356]	; (80025c0 <HAL_DMA_Start_IT+0x21c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d018      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <HAL_DMA_Start_IT+0x220>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a56      	ldr	r2, [pc, #344]	; (80025c8 <HAL_DMA_Start_IT+0x224>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00e      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a54      	ldr	r2, [pc, #336]	; (80025cc <HAL_DMA_Start_IT+0x228>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a53      	ldr	r2, [pc, #332]	; (80025d0 <HAL_DMA_Start_IT+0x22c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_DMA_Start_IT+0xee>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a51      	ldr	r2, [pc, #324]	; (80025d4 <HAL_DMA_Start_IT+0x230>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d108      	bne.n	80024a4 <HAL_DMA_Start_IT+0x100>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e007      	b.n	80024b4 <HAL_DMA_Start_IT+0x110>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f001 fe6a 	bl	8004194 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a34      	ldr	r2, [pc, #208]	; (8002598 <HAL_DMA_Start_IT+0x1f4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d04a      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a33      	ldr	r2, [pc, #204]	; (800259c <HAL_DMA_Start_IT+0x1f8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d045      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <HAL_DMA_Start_IT+0x1fc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d040      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a30      	ldr	r2, [pc, #192]	; (80025a4 <HAL_DMA_Start_IT+0x200>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d03b      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2e      	ldr	r2, [pc, #184]	; (80025a8 <HAL_DMA_Start_IT+0x204>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d036      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <HAL_DMA_Start_IT+0x208>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d031      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <HAL_DMA_Start_IT+0x20c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02c      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2a      	ldr	r2, [pc, #168]	; (80025b4 <HAL_DMA_Start_IT+0x210>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d027      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a28      	ldr	r2, [pc, #160]	; (80025b8 <HAL_DMA_Start_IT+0x214>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d022      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a27      	ldr	r2, [pc, #156]	; (80025bc <HAL_DMA_Start_IT+0x218>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d01d      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <HAL_DMA_Start_IT+0x21c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d018      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_DMA_Start_IT+0x220>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <HAL_DMA_Start_IT+0x224>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00e      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	; (80025cc <HAL_DMA_Start_IT+0x228>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d009      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_DMA_Start_IT+0x22c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_DMA_Start_IT+0x1bc>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	; (80025d4 <HAL_DMA_Start_IT+0x230>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_DMA_Start_IT+0x1c0>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_DMA_Start_IT+0x1c2>
 8002564:	2300      	movs	r3, #0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d036      	beq.n	80025d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 021e 	bic.w	r2, r3, #30
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0216 	orr.w	r2, r2, #22
 800257c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d03e      	beq.n	8002604 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0208 	orr.w	r2, r2, #8
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e035      	b.n	8002604 <HAL_DMA_Start_IT+0x260>
 8002598:	40020010 	.word	0x40020010
 800259c:	40020028 	.word	0x40020028
 80025a0:	40020040 	.word	0x40020040
 80025a4:	40020058 	.word	0x40020058
 80025a8:	40020070 	.word	0x40020070
 80025ac:	40020088 	.word	0x40020088
 80025b0:	400200a0 	.word	0x400200a0
 80025b4:	400200b8 	.word	0x400200b8
 80025b8:	40020410 	.word	0x40020410
 80025bc:	40020428 	.word	0x40020428
 80025c0:	40020440 	.word	0x40020440
 80025c4:	40020458 	.word	0x40020458
 80025c8:	40020470 	.word	0x40020470
 80025cc:	40020488 	.word	0x40020488
 80025d0:	400204a0 	.word	0x400204a0
 80025d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 020e 	bic.w	r2, r3, #14
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 020a 	orr.w	r2, r2, #10
 80025ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0204 	orr.w	r2, r2, #4
 8002602:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a83      	ldr	r2, [pc, #524]	; (8002818 <HAL_DMA_Start_IT+0x474>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d072      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a82      	ldr	r2, [pc, #520]	; (800281c <HAL_DMA_Start_IT+0x478>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d06d      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a80      	ldr	r2, [pc, #512]	; (8002820 <HAL_DMA_Start_IT+0x47c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d068      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7f      	ldr	r2, [pc, #508]	; (8002824 <HAL_DMA_Start_IT+0x480>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d063      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a7d      	ldr	r2, [pc, #500]	; (8002828 <HAL_DMA_Start_IT+0x484>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d05e      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7c      	ldr	r2, [pc, #496]	; (800282c <HAL_DMA_Start_IT+0x488>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d059      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a7a      	ldr	r2, [pc, #488]	; (8002830 <HAL_DMA_Start_IT+0x48c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d054      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a79      	ldr	r2, [pc, #484]	; (8002834 <HAL_DMA_Start_IT+0x490>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d04f      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a77      	ldr	r2, [pc, #476]	; (8002838 <HAL_DMA_Start_IT+0x494>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d04a      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a76      	ldr	r2, [pc, #472]	; (800283c <HAL_DMA_Start_IT+0x498>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d045      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a74      	ldr	r2, [pc, #464]	; (8002840 <HAL_DMA_Start_IT+0x49c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d040      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a73      	ldr	r2, [pc, #460]	; (8002844 <HAL_DMA_Start_IT+0x4a0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d03b      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a71      	ldr	r2, [pc, #452]	; (8002848 <HAL_DMA_Start_IT+0x4a4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d036      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a70      	ldr	r2, [pc, #448]	; (800284c <HAL_DMA_Start_IT+0x4a8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d031      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_DMA_Start_IT+0x4ac>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02c      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6d      	ldr	r2, [pc, #436]	; (8002854 <HAL_DMA_Start_IT+0x4b0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d027      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6b      	ldr	r2, [pc, #428]	; (8002858 <HAL_DMA_Start_IT+0x4b4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d022      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6a      	ldr	r2, [pc, #424]	; (800285c <HAL_DMA_Start_IT+0x4b8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d01d      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a68      	ldr	r2, [pc, #416]	; (8002860 <HAL_DMA_Start_IT+0x4bc>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d018      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a67      	ldr	r2, [pc, #412]	; (8002864 <HAL_DMA_Start_IT+0x4c0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d013      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_DMA_Start_IT+0x4c4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00e      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a64      	ldr	r2, [pc, #400]	; (800286c <HAL_DMA_Start_IT+0x4c8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d009      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a62      	ldr	r2, [pc, #392]	; (8002870 <HAL_DMA_Start_IT+0x4cc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_DMA_Start_IT+0x350>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a61      	ldr	r2, [pc, #388]	; (8002874 <HAL_DMA_Start_IT+0x4d0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_DMA_Start_IT+0x354>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_DMA_Start_IT+0x356>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01a      	beq.n	8002734 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002732:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a37      	ldr	r2, [pc, #220]	; (8002818 <HAL_DMA_Start_IT+0x474>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d04a      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a36      	ldr	r2, [pc, #216]	; (800281c <HAL_DMA_Start_IT+0x478>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d045      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a34      	ldr	r2, [pc, #208]	; (8002820 <HAL_DMA_Start_IT+0x47c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d040      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a33      	ldr	r2, [pc, #204]	; (8002824 <HAL_DMA_Start_IT+0x480>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d03b      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a31      	ldr	r2, [pc, #196]	; (8002828 <HAL_DMA_Start_IT+0x484>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d036      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a30      	ldr	r2, [pc, #192]	; (800282c <HAL_DMA_Start_IT+0x488>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d031      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2e      	ldr	r2, [pc, #184]	; (8002830 <HAL_DMA_Start_IT+0x48c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d02c      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2d      	ldr	r2, [pc, #180]	; (8002834 <HAL_DMA_Start_IT+0x490>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d027      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2b      	ldr	r2, [pc, #172]	; (8002838 <HAL_DMA_Start_IT+0x494>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d022      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2a      	ldr	r2, [pc, #168]	; (800283c <HAL_DMA_Start_IT+0x498>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d01d      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a28      	ldr	r2, [pc, #160]	; (8002840 <HAL_DMA_Start_IT+0x49c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d018      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a27      	ldr	r2, [pc, #156]	; (8002844 <HAL_DMA_Start_IT+0x4a0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a25      	ldr	r2, [pc, #148]	; (8002848 <HAL_DMA_Start_IT+0x4a4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00e      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a24      	ldr	r2, [pc, #144]	; (800284c <HAL_DMA_Start_IT+0x4a8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a22      	ldr	r2, [pc, #136]	; (8002850 <HAL_DMA_Start_IT+0x4ac>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d004      	beq.n	80027d4 <HAL_DMA_Start_IT+0x430>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a21      	ldr	r2, [pc, #132]	; (8002854 <HAL_DMA_Start_IT+0x4b0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d108      	bne.n	80027e6 <HAL_DMA_Start_IT+0x442>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e012      	b.n	800280c <HAL_DMA_Start_IT+0x468>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e009      	b.n	800280c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800280c:	7dfb      	ldrb	r3, [r7, #23]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40020010 	.word	0x40020010
 800281c:	40020028 	.word	0x40020028
 8002820:	40020040 	.word	0x40020040
 8002824:	40020058 	.word	0x40020058
 8002828:	40020070 	.word	0x40020070
 800282c:	40020088 	.word	0x40020088
 8002830:	400200a0 	.word	0x400200a0
 8002834:	400200b8 	.word	0x400200b8
 8002838:	40020410 	.word	0x40020410
 800283c:	40020428 	.word	0x40020428
 8002840:	40020440 	.word	0x40020440
 8002844:	40020458 	.word	0x40020458
 8002848:	40020470 	.word	0x40020470
 800284c:	40020488 	.word	0x40020488
 8002850:	400204a0 	.word	0x400204a0
 8002854:	400204b8 	.word	0x400204b8
 8002858:	58025408 	.word	0x58025408
 800285c:	5802541c 	.word	0x5802541c
 8002860:	58025430 	.word	0x58025430
 8002864:	58025444 	.word	0x58025444
 8002868:	58025458 	.word	0x58025458
 800286c:	5802546c 	.word	0x5802546c
 8002870:	58025480 	.word	0x58025480
 8002874:	58025494 	.word	0x58025494

08002878 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002880:	f7fe fda4 	bl	80013cc <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e2dc      	b.n	8002e4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d008      	beq.n	80028ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e2cd      	b.n	8002e4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a76      	ldr	r2, [pc, #472]	; (8002a8c <HAL_DMA_Abort+0x214>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d04a      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a74      	ldr	r2, [pc, #464]	; (8002a90 <HAL_DMA_Abort+0x218>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d045      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a73      	ldr	r2, [pc, #460]	; (8002a94 <HAL_DMA_Abort+0x21c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d040      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a71      	ldr	r2, [pc, #452]	; (8002a98 <HAL_DMA_Abort+0x220>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d03b      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a70      	ldr	r2, [pc, #448]	; (8002a9c <HAL_DMA_Abort+0x224>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d036      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a6e      	ldr	r2, [pc, #440]	; (8002aa0 <HAL_DMA_Abort+0x228>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d031      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6d      	ldr	r2, [pc, #436]	; (8002aa4 <HAL_DMA_Abort+0x22c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d02c      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6b      	ldr	r2, [pc, #428]	; (8002aa8 <HAL_DMA_Abort+0x230>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d027      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6a      	ldr	r2, [pc, #424]	; (8002aac <HAL_DMA_Abort+0x234>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a68      	ldr	r2, [pc, #416]	; (8002ab0 <HAL_DMA_Abort+0x238>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01d      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a67      	ldr	r2, [pc, #412]	; (8002ab4 <HAL_DMA_Abort+0x23c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d018      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a65      	ldr	r2, [pc, #404]	; (8002ab8 <HAL_DMA_Abort+0x240>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a64      	ldr	r2, [pc, #400]	; (8002abc <HAL_DMA_Abort+0x244>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00e      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a62      	ldr	r2, [pc, #392]	; (8002ac0 <HAL_DMA_Abort+0x248>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a61      	ldr	r2, [pc, #388]	; (8002ac4 <HAL_DMA_Abort+0x24c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_DMA_Abort+0xd6>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5f      	ldr	r2, [pc, #380]	; (8002ac8 <HAL_DMA_Abort+0x250>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_DMA_Abort+0xda>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_DMA_Abort+0xdc>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 021e 	bic.w	r2, r2, #30
 8002966:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002976:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	e00a      	b.n	8002996 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 020e 	bic.w	r2, r2, #14
 800298e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a3c      	ldr	r2, [pc, #240]	; (8002a8c <HAL_DMA_Abort+0x214>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d072      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a3a      	ldr	r2, [pc, #232]	; (8002a90 <HAL_DMA_Abort+0x218>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d06d      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a39      	ldr	r2, [pc, #228]	; (8002a94 <HAL_DMA_Abort+0x21c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d068      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a37      	ldr	r2, [pc, #220]	; (8002a98 <HAL_DMA_Abort+0x220>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d063      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a36      	ldr	r2, [pc, #216]	; (8002a9c <HAL_DMA_Abort+0x224>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d05e      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a34      	ldr	r2, [pc, #208]	; (8002aa0 <HAL_DMA_Abort+0x228>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d059      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a33      	ldr	r2, [pc, #204]	; (8002aa4 <HAL_DMA_Abort+0x22c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d054      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a31      	ldr	r2, [pc, #196]	; (8002aa8 <HAL_DMA_Abort+0x230>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d04f      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a30      	ldr	r2, [pc, #192]	; (8002aac <HAL_DMA_Abort+0x234>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d04a      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2e      	ldr	r2, [pc, #184]	; (8002ab0 <HAL_DMA_Abort+0x238>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d045      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2d      	ldr	r2, [pc, #180]	; (8002ab4 <HAL_DMA_Abort+0x23c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d040      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2b      	ldr	r2, [pc, #172]	; (8002ab8 <HAL_DMA_Abort+0x240>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d03b      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <HAL_DMA_Abort+0x244>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d036      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a28      	ldr	r2, [pc, #160]	; (8002ac0 <HAL_DMA_Abort+0x248>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d031      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <HAL_DMA_Abort+0x24c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d02c      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a25      	ldr	r2, [pc, #148]	; (8002ac8 <HAL_DMA_Abort+0x250>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d027      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a24      	ldr	r2, [pc, #144]	; (8002acc <HAL_DMA_Abort+0x254>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d022      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <HAL_DMA_Abort+0x258>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01d      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a21      	ldr	r2, [pc, #132]	; (8002ad4 <HAL_DMA_Abort+0x25c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d018      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_DMA_Abort+0x260>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <HAL_DMA_Abort+0x264>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <HAL_DMA_Abort+0x268>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d009      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_DMA_Abort+0x26c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_DMA_Abort+0x20e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_DMA_Abort+0x270>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d132      	bne.n	8002aec <HAL_DMA_Abort+0x274>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e031      	b.n	8002aee <HAL_DMA_Abort+0x276>
 8002a8a:	bf00      	nop
 8002a8c:	40020010 	.word	0x40020010
 8002a90:	40020028 	.word	0x40020028
 8002a94:	40020040 	.word	0x40020040
 8002a98:	40020058 	.word	0x40020058
 8002a9c:	40020070 	.word	0x40020070
 8002aa0:	40020088 	.word	0x40020088
 8002aa4:	400200a0 	.word	0x400200a0
 8002aa8:	400200b8 	.word	0x400200b8
 8002aac:	40020410 	.word	0x40020410
 8002ab0:	40020428 	.word	0x40020428
 8002ab4:	40020440 	.word	0x40020440
 8002ab8:	40020458 	.word	0x40020458
 8002abc:	40020470 	.word	0x40020470
 8002ac0:	40020488 	.word	0x40020488
 8002ac4:	400204a0 	.word	0x400204a0
 8002ac8:	400204b8 	.word	0x400204b8
 8002acc:	58025408 	.word	0x58025408
 8002ad0:	5802541c 	.word	0x5802541c
 8002ad4:	58025430 	.word	0x58025430
 8002ad8:	58025444 	.word	0x58025444
 8002adc:	58025458 	.word	0x58025458
 8002ae0:	5802546c 	.word	0x5802546c
 8002ae4:	58025480 	.word	0x58025480
 8002ae8:	58025494 	.word	0x58025494
 8002aec:	2300      	movs	r3, #0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a6d      	ldr	r2, [pc, #436]	; (8002cbc <HAL_DMA_Abort+0x444>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d04a      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6b      	ldr	r2, [pc, #428]	; (8002cc0 <HAL_DMA_Abort+0x448>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d045      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a6a      	ldr	r2, [pc, #424]	; (8002cc4 <HAL_DMA_Abort+0x44c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d040      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a68      	ldr	r2, [pc, #416]	; (8002cc8 <HAL_DMA_Abort+0x450>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d03b      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a67      	ldr	r2, [pc, #412]	; (8002ccc <HAL_DMA_Abort+0x454>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d036      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <HAL_DMA_Abort+0x458>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d031      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a64      	ldr	r2, [pc, #400]	; (8002cd4 <HAL_DMA_Abort+0x45c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d02c      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a62      	ldr	r2, [pc, #392]	; (8002cd8 <HAL_DMA_Abort+0x460>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d027      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a61      	ldr	r2, [pc, #388]	; (8002cdc <HAL_DMA_Abort+0x464>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d022      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5f      	ldr	r2, [pc, #380]	; (8002ce0 <HAL_DMA_Abort+0x468>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01d      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5e      	ldr	r2, [pc, #376]	; (8002ce4 <HAL_DMA_Abort+0x46c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d018      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a5c      	ldr	r2, [pc, #368]	; (8002ce8 <HAL_DMA_Abort+0x470>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a5b      	ldr	r2, [pc, #364]	; (8002cec <HAL_DMA_Abort+0x474>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a59      	ldr	r2, [pc, #356]	; (8002cf0 <HAL_DMA_Abort+0x478>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_DMA_Abort+0x47c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_DMA_Abort+0x32a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a56      	ldr	r2, [pc, #344]	; (8002cf8 <HAL_DMA_Abort+0x480>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <HAL_DMA_Abort+0x33c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e007      	b.n	8002bc4 <HAL_DMA_Abort+0x34c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002bc4:	e013      	b.n	8002bee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc6:	f7fe fc01 	bl	80013cc <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d90c      	bls.n	8002bee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e12d      	b.n	8002e4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e5      	bne.n	8002bc6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <HAL_DMA_Abort+0x444>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d04a      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <HAL_DMA_Abort+0x448>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d045      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a2c      	ldr	r2, [pc, #176]	; (8002cc4 <HAL_DMA_Abort+0x44c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d040      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_DMA_Abort+0x450>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d03b      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <HAL_DMA_Abort+0x454>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d036      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_DMA_Abort+0x458>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d031      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <HAL_DMA_Abort+0x45c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d02c      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <HAL_DMA_Abort+0x460>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d027      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <HAL_DMA_Abort+0x464>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d022      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <HAL_DMA_Abort+0x468>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01d      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <HAL_DMA_Abort+0x46c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d018      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_DMA_Abort+0x470>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_DMA_Abort+0x474>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00e      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_DMA_Abort+0x478>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d009      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <HAL_DMA_Abort+0x47c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <HAL_DMA_Abort+0x422>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_DMA_Abort+0x480>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_DMA_Abort+0x426>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_DMA_Abort+0x428>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d02b      	beq.n	8002cfc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	223f      	movs	r2, #63	; 0x3f
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	e02a      	b.n	8002d12 <HAL_DMA_Abort+0x49a>
 8002cbc:	40020010 	.word	0x40020010
 8002cc0:	40020028 	.word	0x40020028
 8002cc4:	40020040 	.word	0x40020040
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	40020070 	.word	0x40020070
 8002cd0:	40020088 	.word	0x40020088
 8002cd4:	400200a0 	.word	0x400200a0
 8002cd8:	400200b8 	.word	0x400200b8
 8002cdc:	40020410 	.word	0x40020410
 8002ce0:	40020428 	.word	0x40020428
 8002ce4:	40020440 	.word	0x40020440
 8002ce8:	40020458 	.word	0x40020458
 8002cec:	40020470 	.word	0x40020470
 8002cf0:	40020488 	.word	0x40020488
 8002cf4:	400204a0 	.word	0x400204a0
 8002cf8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a4f      	ldr	r2, [pc, #316]	; (8002e54 <HAL_DMA_Abort+0x5dc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d072      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a4d      	ldr	r2, [pc, #308]	; (8002e58 <HAL_DMA_Abort+0x5e0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d06d      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a4c      	ldr	r2, [pc, #304]	; (8002e5c <HAL_DMA_Abort+0x5e4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d068      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a4a      	ldr	r2, [pc, #296]	; (8002e60 <HAL_DMA_Abort+0x5e8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d063      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a49      	ldr	r2, [pc, #292]	; (8002e64 <HAL_DMA_Abort+0x5ec>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d05e      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a47      	ldr	r2, [pc, #284]	; (8002e68 <HAL_DMA_Abort+0x5f0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d059      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a46      	ldr	r2, [pc, #280]	; (8002e6c <HAL_DMA_Abort+0x5f4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d054      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a44      	ldr	r2, [pc, #272]	; (8002e70 <HAL_DMA_Abort+0x5f8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d04f      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a43      	ldr	r2, [pc, #268]	; (8002e74 <HAL_DMA_Abort+0x5fc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d04a      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a41      	ldr	r2, [pc, #260]	; (8002e78 <HAL_DMA_Abort+0x600>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d045      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a40      	ldr	r2, [pc, #256]	; (8002e7c <HAL_DMA_Abort+0x604>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d040      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a3e      	ldr	r2, [pc, #248]	; (8002e80 <HAL_DMA_Abort+0x608>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d03b      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a3d      	ldr	r2, [pc, #244]	; (8002e84 <HAL_DMA_Abort+0x60c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d036      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3b      	ldr	r2, [pc, #236]	; (8002e88 <HAL_DMA_Abort+0x610>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d031      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a3a      	ldr	r2, [pc, #232]	; (8002e8c <HAL_DMA_Abort+0x614>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d02c      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a38      	ldr	r2, [pc, #224]	; (8002e90 <HAL_DMA_Abort+0x618>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d027      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a37      	ldr	r2, [pc, #220]	; (8002e94 <HAL_DMA_Abort+0x61c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d022      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <HAL_DMA_Abort+0x620>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01d      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <HAL_DMA_Abort+0x624>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d018      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a32      	ldr	r2, [pc, #200]	; (8002ea0 <HAL_DMA_Abort+0x628>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a31      	ldr	r2, [pc, #196]	; (8002ea4 <HAL_DMA_Abort+0x62c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00e      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2f      	ldr	r2, [pc, #188]	; (8002ea8 <HAL_DMA_Abort+0x630>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d009      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <HAL_DMA_Abort+0x634>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d004      	beq.n	8002e02 <HAL_DMA_Abort+0x58a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a2c      	ldr	r2, [pc, #176]	; (8002eb0 <HAL_DMA_Abort+0x638>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_DMA_Abort+0x58e>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_DMA_Abort+0x590>
 8002e06:	2300      	movs	r3, #0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d015      	beq.n	8002e38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00c      	beq.n	8002e38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40020010 	.word	0x40020010
 8002e58:	40020028 	.word	0x40020028
 8002e5c:	40020040 	.word	0x40020040
 8002e60:	40020058 	.word	0x40020058
 8002e64:	40020070 	.word	0x40020070
 8002e68:	40020088 	.word	0x40020088
 8002e6c:	400200a0 	.word	0x400200a0
 8002e70:	400200b8 	.word	0x400200b8
 8002e74:	40020410 	.word	0x40020410
 8002e78:	40020428 	.word	0x40020428
 8002e7c:	40020440 	.word	0x40020440
 8002e80:	40020458 	.word	0x40020458
 8002e84:	40020470 	.word	0x40020470
 8002e88:	40020488 	.word	0x40020488
 8002e8c:	400204a0 	.word	0x400204a0
 8002e90:	400204b8 	.word	0x400204b8
 8002e94:	58025408 	.word	0x58025408
 8002e98:	5802541c 	.word	0x5802541c
 8002e9c:	58025430 	.word	0x58025430
 8002ea0:	58025444 	.word	0x58025444
 8002ea4:	58025458 	.word	0x58025458
 8002ea8:	5802546c 	.word	0x5802546c
 8002eac:	58025480 	.word	0x58025480
 8002eb0:	58025494 	.word	0x58025494

08002eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e237      	b.n	8003336 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d004      	beq.n	8002edc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e22c      	b.n	8003336 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5c      	ldr	r2, [pc, #368]	; (8003054 <HAL_DMA_Abort_IT+0x1a0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d04a      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a5b      	ldr	r2, [pc, #364]	; (8003058 <HAL_DMA_Abort_IT+0x1a4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d045      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a59      	ldr	r2, [pc, #356]	; (800305c <HAL_DMA_Abort_IT+0x1a8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d040      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a58      	ldr	r2, [pc, #352]	; (8003060 <HAL_DMA_Abort_IT+0x1ac>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d03b      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a56      	ldr	r2, [pc, #344]	; (8003064 <HAL_DMA_Abort_IT+0x1b0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d036      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a55      	ldr	r2, [pc, #340]	; (8003068 <HAL_DMA_Abort_IT+0x1b4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d031      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a53      	ldr	r2, [pc, #332]	; (800306c <HAL_DMA_Abort_IT+0x1b8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02c      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_DMA_Abort_IT+0x1bc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d027      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a50      	ldr	r2, [pc, #320]	; (8003074 <HAL_DMA_Abort_IT+0x1c0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d022      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a4f      	ldr	r2, [pc, #316]	; (8003078 <HAL_DMA_Abort_IT+0x1c4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d01d      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a4d      	ldr	r2, [pc, #308]	; (800307c <HAL_DMA_Abort_IT+0x1c8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d018      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a4c      	ldr	r2, [pc, #304]	; (8003080 <HAL_DMA_Abort_IT+0x1cc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a4a      	ldr	r2, [pc, #296]	; (8003084 <HAL_DMA_Abort_IT+0x1d0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00e      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a49      	ldr	r2, [pc, #292]	; (8003088 <HAL_DMA_Abort_IT+0x1d4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a47      	ldr	r2, [pc, #284]	; (800308c <HAL_DMA_Abort_IT+0x1d8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a46      	ldr	r2, [pc, #280]	; (8003090 <HAL_DMA_Abort_IT+0x1dc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <HAL_DMA_Abort_IT+0xcc>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_DMA_Abort_IT+0xce>
 8002f80:	2300      	movs	r3, #0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8086 	beq.w	8003094 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2f      	ldr	r2, [pc, #188]	; (8003054 <HAL_DMA_Abort_IT+0x1a0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d04a      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2e      	ldr	r2, [pc, #184]	; (8003058 <HAL_DMA_Abort_IT+0x1a4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d045      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2c      	ldr	r2, [pc, #176]	; (800305c <HAL_DMA_Abort_IT+0x1a8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d040      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2b      	ldr	r2, [pc, #172]	; (8003060 <HAL_DMA_Abort_IT+0x1ac>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d03b      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a29      	ldr	r2, [pc, #164]	; (8003064 <HAL_DMA_Abort_IT+0x1b0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d036      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a28      	ldr	r2, [pc, #160]	; (8003068 <HAL_DMA_Abort_IT+0x1b4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d031      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a26      	ldr	r2, [pc, #152]	; (800306c <HAL_DMA_Abort_IT+0x1b8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02c      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a25      	ldr	r2, [pc, #148]	; (8003070 <HAL_DMA_Abort_IT+0x1bc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d027      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_DMA_Abort_IT+0x1c0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d022      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a22      	ldr	r2, [pc, #136]	; (8003078 <HAL_DMA_Abort_IT+0x1c4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d01d      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a20      	ldr	r2, [pc, #128]	; (800307c <HAL_DMA_Abort_IT+0x1c8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d018      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <HAL_DMA_Abort_IT+0x1cc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <HAL_DMA_Abort_IT+0x1d0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00e      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <HAL_DMA_Abort_IT+0x1d4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d009      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1a      	ldr	r2, [pc, #104]	; (800308c <HAL_DMA_Abort_IT+0x1d8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_DMA_Abort_IT+0x17c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_DMA_Abort_IT+0x1dc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d108      	bne.n	8003042 <HAL_DMA_Abort_IT+0x18e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e178      	b.n	8003334 <HAL_DMA_Abort_IT+0x480>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e16f      	b.n	8003334 <HAL_DMA_Abort_IT+0x480>
 8003054:	40020010 	.word	0x40020010
 8003058:	40020028 	.word	0x40020028
 800305c:	40020040 	.word	0x40020040
 8003060:	40020058 	.word	0x40020058
 8003064:	40020070 	.word	0x40020070
 8003068:	40020088 	.word	0x40020088
 800306c:	400200a0 	.word	0x400200a0
 8003070:	400200b8 	.word	0x400200b8
 8003074:	40020410 	.word	0x40020410
 8003078:	40020428 	.word	0x40020428
 800307c:	40020440 	.word	0x40020440
 8003080:	40020458 	.word	0x40020458
 8003084:	40020470 	.word	0x40020470
 8003088:	40020488 	.word	0x40020488
 800308c:	400204a0 	.word	0x400204a0
 8003090:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 020e 	bic.w	r2, r2, #14
 80030a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a6c      	ldr	r2, [pc, #432]	; (800325c <HAL_DMA_Abort_IT+0x3a8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d04a      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6b      	ldr	r2, [pc, #428]	; (8003260 <HAL_DMA_Abort_IT+0x3ac>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d045      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a69      	ldr	r2, [pc, #420]	; (8003264 <HAL_DMA_Abort_IT+0x3b0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d040      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a68      	ldr	r2, [pc, #416]	; (8003268 <HAL_DMA_Abort_IT+0x3b4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d03b      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a66      	ldr	r2, [pc, #408]	; (800326c <HAL_DMA_Abort_IT+0x3b8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d036      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a65      	ldr	r2, [pc, #404]	; (8003270 <HAL_DMA_Abort_IT+0x3bc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d031      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a63      	ldr	r2, [pc, #396]	; (8003274 <HAL_DMA_Abort_IT+0x3c0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d02c      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a62      	ldr	r2, [pc, #392]	; (8003278 <HAL_DMA_Abort_IT+0x3c4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d027      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a60      	ldr	r2, [pc, #384]	; (800327c <HAL_DMA_Abort_IT+0x3c8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d022      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a5f      	ldr	r2, [pc, #380]	; (8003280 <HAL_DMA_Abort_IT+0x3cc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d01d      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a5d      	ldr	r2, [pc, #372]	; (8003284 <HAL_DMA_Abort_IT+0x3d0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d018      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a5c      	ldr	r2, [pc, #368]	; (8003288 <HAL_DMA_Abort_IT+0x3d4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5a      	ldr	r2, [pc, #360]	; (800328c <HAL_DMA_Abort_IT+0x3d8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a59      	ldr	r2, [pc, #356]	; (8003290 <HAL_DMA_Abort_IT+0x3dc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d009      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a57      	ldr	r2, [pc, #348]	; (8003294 <HAL_DMA_Abort_IT+0x3e0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_DMA_Abort_IT+0x290>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a56      	ldr	r2, [pc, #344]	; (8003298 <HAL_DMA_Abort_IT+0x3e4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <HAL_DMA_Abort_IT+0x2a2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e007      	b.n	8003166 <HAL_DMA_Abort_IT+0x2b2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a3c      	ldr	r2, [pc, #240]	; (800325c <HAL_DMA_Abort_IT+0x3a8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d072      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a3a      	ldr	r2, [pc, #232]	; (8003260 <HAL_DMA_Abort_IT+0x3ac>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d06d      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a39      	ldr	r2, [pc, #228]	; (8003264 <HAL_DMA_Abort_IT+0x3b0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d068      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a37      	ldr	r2, [pc, #220]	; (8003268 <HAL_DMA_Abort_IT+0x3b4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d063      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a36      	ldr	r2, [pc, #216]	; (800326c <HAL_DMA_Abort_IT+0x3b8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d05e      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a34      	ldr	r2, [pc, #208]	; (8003270 <HAL_DMA_Abort_IT+0x3bc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d059      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a33      	ldr	r2, [pc, #204]	; (8003274 <HAL_DMA_Abort_IT+0x3c0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d054      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a31      	ldr	r2, [pc, #196]	; (8003278 <HAL_DMA_Abort_IT+0x3c4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d04f      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a30      	ldr	r2, [pc, #192]	; (800327c <HAL_DMA_Abort_IT+0x3c8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d04a      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2e      	ldr	r2, [pc, #184]	; (8003280 <HAL_DMA_Abort_IT+0x3cc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d045      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <HAL_DMA_Abort_IT+0x3d0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d040      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2b      	ldr	r2, [pc, #172]	; (8003288 <HAL_DMA_Abort_IT+0x3d4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d03b      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2a      	ldr	r2, [pc, #168]	; (800328c <HAL_DMA_Abort_IT+0x3d8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d036      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a28      	ldr	r2, [pc, #160]	; (8003290 <HAL_DMA_Abort_IT+0x3dc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d031      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a27      	ldr	r2, [pc, #156]	; (8003294 <HAL_DMA_Abort_IT+0x3e0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d02c      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a25      	ldr	r2, [pc, #148]	; (8003298 <HAL_DMA_Abort_IT+0x3e4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d027      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a24      	ldr	r2, [pc, #144]	; (800329c <HAL_DMA_Abort_IT+0x3e8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d022      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <HAL_DMA_Abort_IT+0x3ec>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01d      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <HAL_DMA_Abort_IT+0x3f0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d018      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <HAL_DMA_Abort_IT+0x3f4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_DMA_Abort_IT+0x3f8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <HAL_DMA_Abort_IT+0x3fc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <HAL_DMA_Abort_IT+0x400>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_DMA_Abort_IT+0x3a2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <HAL_DMA_Abort_IT+0x404>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d132      	bne.n	80032bc <HAL_DMA_Abort_IT+0x408>
 8003256:	2301      	movs	r3, #1
 8003258:	e031      	b.n	80032be <HAL_DMA_Abort_IT+0x40a>
 800325a:	bf00      	nop
 800325c:	40020010 	.word	0x40020010
 8003260:	40020028 	.word	0x40020028
 8003264:	40020040 	.word	0x40020040
 8003268:	40020058 	.word	0x40020058
 800326c:	40020070 	.word	0x40020070
 8003270:	40020088 	.word	0x40020088
 8003274:	400200a0 	.word	0x400200a0
 8003278:	400200b8 	.word	0x400200b8
 800327c:	40020410 	.word	0x40020410
 8003280:	40020428 	.word	0x40020428
 8003284:	40020440 	.word	0x40020440
 8003288:	40020458 	.word	0x40020458
 800328c:	40020470 	.word	0x40020470
 8003290:	40020488 	.word	0x40020488
 8003294:	400204a0 	.word	0x400204a0
 8003298:	400204b8 	.word	0x400204b8
 800329c:	58025408 	.word	0x58025408
 80032a0:	5802541c 	.word	0x5802541c
 80032a4:	58025430 	.word	0x58025430
 80032a8:	58025444 	.word	0x58025444
 80032ac:	58025458 	.word	0x58025458
 80032b0:	5802546c 	.word	0x5802546c
 80032b4:	58025480 	.word	0x58025480
 80032b8:	58025494 	.word	0x58025494
 80032bc:	2300      	movs	r3, #0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d028      	beq.n	8003314 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00c      	beq.n	8003314 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003308:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003312:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop

08003340 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800334c:	4b67      	ldr	r3, [pc, #412]	; (80034ec <HAL_DMA_IRQHandler+0x1ac>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a67      	ldr	r2, [pc, #412]	; (80034f0 <HAL_DMA_IRQHandler+0x1b0>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0a9b      	lsrs	r3, r3, #10
 8003358:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a5f      	ldr	r2, [pc, #380]	; (80034f4 <HAL_DMA_IRQHandler+0x1b4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5d      	ldr	r2, [pc, #372]	; (80034f8 <HAL_DMA_IRQHandler+0x1b8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5c      	ldr	r2, [pc, #368]	; (80034fc <HAL_DMA_IRQHandler+0x1bc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5a      	ldr	r2, [pc, #360]	; (8003500 <HAL_DMA_IRQHandler+0x1c0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a59      	ldr	r2, [pc, #356]	; (8003504 <HAL_DMA_IRQHandler+0x1c4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_DMA_IRQHandler+0x1c8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_DMA_IRQHandler+0x1cc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a54      	ldr	r2, [pc, #336]	; (8003510 <HAL_DMA_IRQHandler+0x1d0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a53      	ldr	r2, [pc, #332]	; (8003514 <HAL_DMA_IRQHandler+0x1d4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a51      	ldr	r2, [pc, #324]	; (8003518 <HAL_DMA_IRQHandler+0x1d8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a50      	ldr	r2, [pc, #320]	; (800351c <HAL_DMA_IRQHandler+0x1dc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a4e      	ldr	r2, [pc, #312]	; (8003520 <HAL_DMA_IRQHandler+0x1e0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4d      	ldr	r2, [pc, #308]	; (8003524 <HAL_DMA_IRQHandler+0x1e4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a4b      	ldr	r2, [pc, #300]	; (8003528 <HAL_DMA_IRQHandler+0x1e8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a4a      	ldr	r2, [pc, #296]	; (800352c <HAL_DMA_IRQHandler+0x1ec>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a48      	ldr	r2, [pc, #288]	; (8003530 <HAL_DMA_IRQHandler+0x1f0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_DMA_IRQHandler+0xd6>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_DMA_IRQHandler+0xd8>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 842b 	beq.w	8003c74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2208      	movs	r2, #8
 8003428:	409a      	lsls	r2, r3
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80a2 	beq.w	8003578 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2e      	ldr	r2, [pc, #184]	; (80034f4 <HAL_DMA_IRQHandler+0x1b4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04a      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <HAL_DMA_IRQHandler+0x1b8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d045      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <HAL_DMA_IRQHandler+0x1bc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d040      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2a      	ldr	r2, [pc, #168]	; (8003500 <HAL_DMA_IRQHandler+0x1c0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d03b      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_DMA_IRQHandler+0x1c4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d036      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a27      	ldr	r2, [pc, #156]	; (8003508 <HAL_DMA_IRQHandler+0x1c8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d031      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <HAL_DMA_IRQHandler+0x1cc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d02c      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a24      	ldr	r2, [pc, #144]	; (8003510 <HAL_DMA_IRQHandler+0x1d0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d027      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a22      	ldr	r2, [pc, #136]	; (8003514 <HAL_DMA_IRQHandler+0x1d4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a21      	ldr	r2, [pc, #132]	; (8003518 <HAL_DMA_IRQHandler+0x1d8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d01d      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <HAL_DMA_IRQHandler+0x1dc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_DMA_IRQHandler+0x1e0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <HAL_DMA_IRQHandler+0x1e4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <HAL_DMA_IRQHandler+0x1e8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_DMA_IRQHandler+0x1ec>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a18      	ldr	r2, [pc, #96]	; (8003530 <HAL_DMA_IRQHandler+0x1f0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d12f      	bne.n	8003534 <HAL_DMA_IRQHandler+0x1f4>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e02e      	b.n	8003548 <HAL_DMA_IRQHandler+0x208>
 80034ea:	bf00      	nop
 80034ec:	24000000 	.word	0x24000000
 80034f0:	1b4e81b5 	.word	0x1b4e81b5
 80034f4:	40020010 	.word	0x40020010
 80034f8:	40020028 	.word	0x40020028
 80034fc:	40020040 	.word	0x40020040
 8003500:	40020058 	.word	0x40020058
 8003504:	40020070 	.word	0x40020070
 8003508:	40020088 	.word	0x40020088
 800350c:	400200a0 	.word	0x400200a0
 8003510:	400200b8 	.word	0x400200b8
 8003514:	40020410 	.word	0x40020410
 8003518:	40020428 	.word	0x40020428
 800351c:	40020440 	.word	0x40020440
 8003520:	40020458 	.word	0x40020458
 8003524:	40020470 	.word	0x40020470
 8003528:	40020488 	.word	0x40020488
 800352c:	400204a0 	.word	0x400204a0
 8003530:	400204b8 	.word	0x400204b8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d015      	beq.n	8003578 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0204 	bic.w	r2, r2, #4
 800355a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2208      	movs	r2, #8
 8003566:	409a      	lsls	r2, r3
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	fa22 f303 	lsr.w	r3, r2, r3
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d06e      	beq.n	800366c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a69      	ldr	r2, [pc, #420]	; (8003738 <HAL_DMA_IRQHandler+0x3f8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d04a      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a67      	ldr	r2, [pc, #412]	; (800373c <HAL_DMA_IRQHandler+0x3fc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d045      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a66      	ldr	r2, [pc, #408]	; (8003740 <HAL_DMA_IRQHandler+0x400>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d040      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a64      	ldr	r2, [pc, #400]	; (8003744 <HAL_DMA_IRQHandler+0x404>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d03b      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a63      	ldr	r2, [pc, #396]	; (8003748 <HAL_DMA_IRQHandler+0x408>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d036      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a61      	ldr	r2, [pc, #388]	; (800374c <HAL_DMA_IRQHandler+0x40c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a60      	ldr	r2, [pc, #384]	; (8003750 <HAL_DMA_IRQHandler+0x410>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d02c      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a5e      	ldr	r2, [pc, #376]	; (8003754 <HAL_DMA_IRQHandler+0x414>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d027      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5d      	ldr	r2, [pc, #372]	; (8003758 <HAL_DMA_IRQHandler+0x418>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5b      	ldr	r2, [pc, #364]	; (800375c <HAL_DMA_IRQHandler+0x41c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01d      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5a      	ldr	r2, [pc, #360]	; (8003760 <HAL_DMA_IRQHandler+0x420>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d018      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_DMA_IRQHandler+0x424>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a57      	ldr	r2, [pc, #348]	; (8003768 <HAL_DMA_IRQHandler+0x428>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a55      	ldr	r2, [pc, #340]	; (800376c <HAL_DMA_IRQHandler+0x42c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a54      	ldr	r2, [pc, #336]	; (8003770 <HAL_DMA_IRQHandler+0x430>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_DMA_IRQHandler+0x434>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10a      	bne.n	8003644 <HAL_DMA_IRQHandler+0x304>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e003      	b.n	800364c <HAL_DMA_IRQHandler+0x30c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2201      	movs	r2, #1
 800365a:	409a      	lsls	r2, r3
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f043 0202 	orr.w	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	2204      	movs	r2, #4
 8003676:	409a      	lsls	r2, r3
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 808f 	beq.w	80037a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2c      	ldr	r2, [pc, #176]	; (8003738 <HAL_DMA_IRQHandler+0x3f8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d04a      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2a      	ldr	r2, [pc, #168]	; (800373c <HAL_DMA_IRQHandler+0x3fc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d045      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a29      	ldr	r2, [pc, #164]	; (8003740 <HAL_DMA_IRQHandler+0x400>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d040      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a27      	ldr	r2, [pc, #156]	; (8003744 <HAL_DMA_IRQHandler+0x404>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d03b      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a26      	ldr	r2, [pc, #152]	; (8003748 <HAL_DMA_IRQHandler+0x408>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d036      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a24      	ldr	r2, [pc, #144]	; (800374c <HAL_DMA_IRQHandler+0x40c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d031      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <HAL_DMA_IRQHandler+0x410>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d02c      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a21      	ldr	r2, [pc, #132]	; (8003754 <HAL_DMA_IRQHandler+0x414>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d027      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a20      	ldr	r2, [pc, #128]	; (8003758 <HAL_DMA_IRQHandler+0x418>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d022      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_DMA_IRQHandler+0x41c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01d      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <HAL_DMA_IRQHandler+0x420>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_DMA_IRQHandler+0x424>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <HAL_DMA_IRQHandler+0x428>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a18      	ldr	r2, [pc, #96]	; (800376c <HAL_DMA_IRQHandler+0x42c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_DMA_IRQHandler+0x430>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a15      	ldr	r2, [pc, #84]	; (8003774 <HAL_DMA_IRQHandler+0x434>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d12a      	bne.n	8003778 <HAL_DMA_IRQHandler+0x438>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e023      	b.n	8003780 <HAL_DMA_IRQHandler+0x440>
 8003738:	40020010 	.word	0x40020010
 800373c:	40020028 	.word	0x40020028
 8003740:	40020040 	.word	0x40020040
 8003744:	40020058 	.word	0x40020058
 8003748:	40020070 	.word	0x40020070
 800374c:	40020088 	.word	0x40020088
 8003750:	400200a0 	.word	0x400200a0
 8003754:	400200b8 	.word	0x400200b8
 8003758:	40020410 	.word	0x40020410
 800375c:	40020428 	.word	0x40020428
 8003760:	40020440 	.word	0x40020440
 8003764:	40020458 	.word	0x40020458
 8003768:	40020470 	.word	0x40020470
 800376c:	40020488 	.word	0x40020488
 8003770:	400204a0 	.word	0x400204a0
 8003774:	400204b8 	.word	0x400204b8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2204      	movs	r2, #4
 800378e:	409a      	lsls	r2, r3
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003798:	f043 0204 	orr.w	r2, r3, #4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2210      	movs	r2, #16
 80037aa:	409a      	lsls	r2, r3
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a6 	beq.w	8003902 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a85      	ldr	r2, [pc, #532]	; (80039d0 <HAL_DMA_IRQHandler+0x690>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d04a      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a83      	ldr	r2, [pc, #524]	; (80039d4 <HAL_DMA_IRQHandler+0x694>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d045      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a82      	ldr	r2, [pc, #520]	; (80039d8 <HAL_DMA_IRQHandler+0x698>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d040      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a80      	ldr	r2, [pc, #512]	; (80039dc <HAL_DMA_IRQHandler+0x69c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d03b      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7f      	ldr	r2, [pc, #508]	; (80039e0 <HAL_DMA_IRQHandler+0x6a0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d036      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a7d      	ldr	r2, [pc, #500]	; (80039e4 <HAL_DMA_IRQHandler+0x6a4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d031      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a7c      	ldr	r2, [pc, #496]	; (80039e8 <HAL_DMA_IRQHandler+0x6a8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d02c      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a7a      	ldr	r2, [pc, #488]	; (80039ec <HAL_DMA_IRQHandler+0x6ac>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d027      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a79      	ldr	r2, [pc, #484]	; (80039f0 <HAL_DMA_IRQHandler+0x6b0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d022      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a77      	ldr	r2, [pc, #476]	; (80039f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01d      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a76      	ldr	r2, [pc, #472]	; (80039f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d018      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a74      	ldr	r2, [pc, #464]	; (80039fc <HAL_DMA_IRQHandler+0x6bc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a73      	ldr	r2, [pc, #460]	; (8003a00 <HAL_DMA_IRQHandler+0x6c0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00e      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a71      	ldr	r2, [pc, #452]	; (8003a04 <HAL_DMA_IRQHandler+0x6c4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a70      	ldr	r2, [pc, #448]	; (8003a08 <HAL_DMA_IRQHandler+0x6c8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a6e      	ldr	r2, [pc, #440]	; (8003a0c <HAL_DMA_IRQHandler+0x6cc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10a      	bne.n	800386c <HAL_DMA_IRQHandler+0x52c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e009      	b.n	8003880 <HAL_DMA_IRQHandler+0x540>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d03e      	beq.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2210      	movs	r2, #16
 800388e:	409a      	lsls	r2, r3
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d018      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d024      	beq.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
 80038c0:	e01f      	b.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01b      	beq.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
 80038d2:	e016      	b.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0208 	bic.w	r2, r2, #8
 80038f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2220      	movs	r2, #32
 800390c:	409a      	lsls	r2, r3
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8110 	beq.w	8003b38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <HAL_DMA_IRQHandler+0x690>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d04a      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <HAL_DMA_IRQHandler+0x694>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d045      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <HAL_DMA_IRQHandler+0x698>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d040      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a28      	ldr	r2, [pc, #160]	; (80039dc <HAL_DMA_IRQHandler+0x69c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d03b      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <HAL_DMA_IRQHandler+0x6a0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d036      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <HAL_DMA_IRQHandler+0x6a4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d031      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a23      	ldr	r2, [pc, #140]	; (80039e8 <HAL_DMA_IRQHandler+0x6a8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d02c      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_DMA_IRQHandler+0x6ac>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d027      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <HAL_DMA_IRQHandler+0x6b0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d022      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d01d      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d018      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_DMA_IRQHandler+0x6bc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1a      	ldr	r2, [pc, #104]	; (8003a00 <HAL_DMA_IRQHandler+0x6c0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00e      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a19      	ldr	r2, [pc, #100]	; (8003a04 <HAL_DMA_IRQHandler+0x6c4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_DMA_IRQHandler+0x6c8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <HAL_DMA_IRQHandler+0x6cc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d12b      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x6d0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	e02a      	b.n	8003a24 <HAL_DMA_IRQHandler+0x6e4>
 80039ce:	bf00      	nop
 80039d0:	40020010 	.word	0x40020010
 80039d4:	40020028 	.word	0x40020028
 80039d8:	40020040 	.word	0x40020040
 80039dc:	40020058 	.word	0x40020058
 80039e0:	40020070 	.word	0x40020070
 80039e4:	40020088 	.word	0x40020088
 80039e8:	400200a0 	.word	0x400200a0
 80039ec:	400200b8 	.word	0x400200b8
 80039f0:	40020410 	.word	0x40020410
 80039f4:	40020428 	.word	0x40020428
 80039f8:	40020440 	.word	0x40020440
 80039fc:	40020458 	.word	0x40020458
 8003a00:	40020470 	.word	0x40020470
 8003a04:	40020488 	.word	0x40020488
 8003a08:	400204a0 	.word	0x400204a0
 8003a0c:	400204b8 	.word	0x400204b8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8087 	beq.w	8003b38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2220      	movs	r2, #32
 8003a34:	409a      	lsls	r2, r3
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d139      	bne.n	8003aba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0216 	bic.w	r2, r2, #22
 8003a54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_DMA_IRQHandler+0x736>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0208 	bic.w	r2, r2, #8
 8003a84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	223f      	movs	r2, #63	; 0x3f
 8003a90:	409a      	lsls	r2, r3
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 834a 	beq.w	8004144 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
          }
          return;
 8003ab8:	e344      	b.n	8004144 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d018      	beq.n	8003afa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02c      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
 8003ae6:	e027      	b.n	8003b38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d023      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
 8003af8:	e01e      	b.n	8003b38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10f      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0210 	bic.w	r2, r2, #16
 8003b16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8306 	beq.w	800414e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8088 	beq.w	8003c60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2204      	movs	r2, #4
 8003b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a7a      	ldr	r2, [pc, #488]	; (8003d48 <HAL_DMA_IRQHandler+0xa08>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d04a      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a79      	ldr	r2, [pc, #484]	; (8003d4c <HAL_DMA_IRQHandler+0xa0c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d045      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a77      	ldr	r2, [pc, #476]	; (8003d50 <HAL_DMA_IRQHandler+0xa10>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d040      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a76      	ldr	r2, [pc, #472]	; (8003d54 <HAL_DMA_IRQHandler+0xa14>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d03b      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a74      	ldr	r2, [pc, #464]	; (8003d58 <HAL_DMA_IRQHandler+0xa18>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d036      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a73      	ldr	r2, [pc, #460]	; (8003d5c <HAL_DMA_IRQHandler+0xa1c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d031      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a71      	ldr	r2, [pc, #452]	; (8003d60 <HAL_DMA_IRQHandler+0xa20>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02c      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a70      	ldr	r2, [pc, #448]	; (8003d64 <HAL_DMA_IRQHandler+0xa24>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d027      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a6e      	ldr	r2, [pc, #440]	; (8003d68 <HAL_DMA_IRQHandler+0xa28>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d022      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6d      	ldr	r2, [pc, #436]	; (8003d6c <HAL_DMA_IRQHandler+0xa2c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d01d      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a6b      	ldr	r2, [pc, #428]	; (8003d70 <HAL_DMA_IRQHandler+0xa30>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d018      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6a      	ldr	r2, [pc, #424]	; (8003d74 <HAL_DMA_IRQHandler+0xa34>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a68      	ldr	r2, [pc, #416]	; (8003d78 <HAL_DMA_IRQHandler+0xa38>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a67      	ldr	r2, [pc, #412]	; (8003d7c <HAL_DMA_IRQHandler+0xa3c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d009      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a65      	ldr	r2, [pc, #404]	; (8003d80 <HAL_DMA_IRQHandler+0xa40>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a64      	ldr	r2, [pc, #400]	; (8003d84 <HAL_DMA_IRQHandler+0xa44>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d108      	bne.n	8003c0a <HAL_DMA_IRQHandler+0x8ca>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e007      	b.n	8003c1a <HAL_DMA_IRQHandler+0x8da>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d307      	bcc.n	8003c36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f2      	bne.n	8003c1a <HAL_DMA_IRQHandler+0x8da>
 8003c34:	e000      	b.n	8003c38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003c4e:	e003      	b.n	8003c58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8272 	beq.w	800414e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
 8003c72:	e26c      	b.n	800414e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a43      	ldr	r2, [pc, #268]	; (8003d88 <HAL_DMA_IRQHandler+0xa48>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d022      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a42      	ldr	r2, [pc, #264]	; (8003d8c <HAL_DMA_IRQHandler+0xa4c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d01d      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_DMA_IRQHandler+0xa50>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d018      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a3f      	ldr	r2, [pc, #252]	; (8003d94 <HAL_DMA_IRQHandler+0xa54>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d013      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a3d      	ldr	r2, [pc, #244]	; (8003d98 <HAL_DMA_IRQHandler+0xa58>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a3c      	ldr	r2, [pc, #240]	; (8003d9c <HAL_DMA_IRQHandler+0xa5c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a3a      	ldr	r2, [pc, #232]	; (8003da0 <HAL_DMA_IRQHandler+0xa60>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a39      	ldr	r2, [pc, #228]	; (8003da4 <HAL_DMA_IRQHandler+0xa64>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d101      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x988>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <HAL_DMA_IRQHandler+0x98a>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 823f 	beq.w	800414e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80cd 	beq.w	8003e88 <HAL_DMA_IRQHandler+0xb48>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80c7 	beq.w	8003e88 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2204      	movs	r2, #4
 8003d04:	409a      	lsls	r2, r3
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d049      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8210 	beq.w	8004148 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d30:	e20a      	b.n	8004148 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8206 	beq.w	8004148 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d44:	e200      	b.n	8004148 <HAL_DMA_IRQHandler+0xe08>
 8003d46:	bf00      	nop
 8003d48:	40020010 	.word	0x40020010
 8003d4c:	40020028 	.word	0x40020028
 8003d50:	40020040 	.word	0x40020040
 8003d54:	40020058 	.word	0x40020058
 8003d58:	40020070 	.word	0x40020070
 8003d5c:	40020088 	.word	0x40020088
 8003d60:	400200a0 	.word	0x400200a0
 8003d64:	400200b8 	.word	0x400200b8
 8003d68:	40020410 	.word	0x40020410
 8003d6c:	40020428 	.word	0x40020428
 8003d70:	40020440 	.word	0x40020440
 8003d74:	40020458 	.word	0x40020458
 8003d78:	40020470 	.word	0x40020470
 8003d7c:	40020488 	.word	0x40020488
 8003d80:	400204a0 	.word	0x400204a0
 8003d84:	400204b8 	.word	0x400204b8
 8003d88:	58025408 	.word	0x58025408
 8003d8c:	5802541c 	.word	0x5802541c
 8003d90:	58025430 	.word	0x58025430
 8003d94:	58025444 	.word	0x58025444
 8003d98:	58025458 	.word	0x58025458
 8003d9c:	5802546c 	.word	0x5802546c
 8003da0:	58025480 	.word	0x58025480
 8003da4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d160      	bne.n	8003e74 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7f      	ldr	r2, [pc, #508]	; (8003fb4 <HAL_DMA_IRQHandler+0xc74>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d04a      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a7d      	ldr	r2, [pc, #500]	; (8003fb8 <HAL_DMA_IRQHandler+0xc78>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d045      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a7c      	ldr	r2, [pc, #496]	; (8003fbc <HAL_DMA_IRQHandler+0xc7c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d040      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a7a      	ldr	r2, [pc, #488]	; (8003fc0 <HAL_DMA_IRQHandler+0xc80>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d03b      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a79      	ldr	r2, [pc, #484]	; (8003fc4 <HAL_DMA_IRQHandler+0xc84>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d036      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a77      	ldr	r2, [pc, #476]	; (8003fc8 <HAL_DMA_IRQHandler+0xc88>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d031      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a76      	ldr	r2, [pc, #472]	; (8003fcc <HAL_DMA_IRQHandler+0xc8c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d02c      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a74      	ldr	r2, [pc, #464]	; (8003fd0 <HAL_DMA_IRQHandler+0xc90>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d027      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a73      	ldr	r2, [pc, #460]	; (8003fd4 <HAL_DMA_IRQHandler+0xc94>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d022      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a71      	ldr	r2, [pc, #452]	; (8003fd8 <HAL_DMA_IRQHandler+0xc98>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d01d      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a70      	ldr	r2, [pc, #448]	; (8003fdc <HAL_DMA_IRQHandler+0xc9c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d018      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6e      	ldr	r2, [pc, #440]	; (8003fe0 <HAL_DMA_IRQHandler+0xca0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6d      	ldr	r2, [pc, #436]	; (8003fe4 <HAL_DMA_IRQHandler+0xca4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6b      	ldr	r2, [pc, #428]	; (8003fe8 <HAL_DMA_IRQHandler+0xca8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d009      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6a      	ldr	r2, [pc, #424]	; (8003fec <HAL_DMA_IRQHandler+0xcac>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a68      	ldr	r2, [pc, #416]	; (8003ff0 <HAL_DMA_IRQHandler+0xcb0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d108      	bne.n	8003e64 <HAL_DMA_IRQHandler+0xb24>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0208 	bic.w	r2, r2, #8
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e007      	b.n	8003e74 <HAL_DMA_IRQHandler+0xb34>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0204 	bic.w	r2, r2, #4
 8003e72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8165 	beq.w	8004148 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e86:	e15f      	b.n	8004148 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2202      	movs	r2, #2
 8003e92:	409a      	lsls	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80c5 	beq.w	8004028 <HAL_DMA_IRQHandler+0xce8>
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80bf 	beq.w	8004028 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d018      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 813a 	beq.w	800414c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee0:	e134      	b.n	800414c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8130 	beq.w	800414c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ef4:	e12a      	b.n	800414c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f040 8089 	bne.w	8004014 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2b      	ldr	r2, [pc, #172]	; (8003fb4 <HAL_DMA_IRQHandler+0xc74>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d04a      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <HAL_DMA_IRQHandler+0xc78>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d045      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <HAL_DMA_IRQHandler+0xc7c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d040      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <HAL_DMA_IRQHandler+0xc80>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d03b      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <HAL_DMA_IRQHandler+0xc84>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d036      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <HAL_DMA_IRQHandler+0xc88>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d031      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <HAL_DMA_IRQHandler+0xc8c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d02c      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_DMA_IRQHandler+0xc90>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d027      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_DMA_IRQHandler+0xc94>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d022      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <HAL_DMA_IRQHandler+0xc98>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01d      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_DMA_IRQHandler+0xc9c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <HAL_DMA_IRQHandler+0xca0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <HAL_DMA_IRQHandler+0xca4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <HAL_DMA_IRQHandler+0xca8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a16      	ldr	r2, [pc, #88]	; (8003fec <HAL_DMA_IRQHandler+0xcac>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <HAL_DMA_IRQHandler+0xcb0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d128      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0xcb4>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0214 	bic.w	r2, r2, #20
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e027      	b.n	8004004 <HAL_DMA_IRQHandler+0xcc4>
 8003fb4:	40020010 	.word	0x40020010
 8003fb8:	40020028 	.word	0x40020028
 8003fbc:	40020040 	.word	0x40020040
 8003fc0:	40020058 	.word	0x40020058
 8003fc4:	40020070 	.word	0x40020070
 8003fc8:	40020088 	.word	0x40020088
 8003fcc:	400200a0 	.word	0x400200a0
 8003fd0:	400200b8 	.word	0x400200b8
 8003fd4:	40020410 	.word	0x40020410
 8003fd8:	40020428 	.word	0x40020428
 8003fdc:	40020440 	.word	0x40020440
 8003fe0:	40020458 	.word	0x40020458
 8003fe4:	40020470 	.word	0x40020470
 8003fe8:	40020488 	.word	0x40020488
 8003fec:	400204a0 	.word	0x400204a0
 8003ff0:	400204b8 	.word	0x400204b8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 020a 	bic.w	r2, r2, #10
 8004002:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8097 	beq.w	800414c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004026:	e091      	b.n	800414c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2208      	movs	r2, #8
 8004032:	409a      	lsls	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8088 	beq.w	800414e <HAL_DMA_IRQHandler+0xe0e>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8082 	beq.w	800414e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a41      	ldr	r2, [pc, #260]	; (8004154 <HAL_DMA_IRQHandler+0xe14>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d04a      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3f      	ldr	r2, [pc, #252]	; (8004158 <HAL_DMA_IRQHandler+0xe18>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d045      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a3e      	ldr	r2, [pc, #248]	; (800415c <HAL_DMA_IRQHandler+0xe1c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d040      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3c      	ldr	r2, [pc, #240]	; (8004160 <HAL_DMA_IRQHandler+0xe20>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d03b      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <HAL_DMA_IRQHandler+0xe24>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d036      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a39      	ldr	r2, [pc, #228]	; (8004168 <HAL_DMA_IRQHandler+0xe28>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d031      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a38      	ldr	r2, [pc, #224]	; (800416c <HAL_DMA_IRQHandler+0xe2c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d02c      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a36      	ldr	r2, [pc, #216]	; (8004170 <HAL_DMA_IRQHandler+0xe30>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d027      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a35      	ldr	r2, [pc, #212]	; (8004174 <HAL_DMA_IRQHandler+0xe34>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d022      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a33      	ldr	r2, [pc, #204]	; (8004178 <HAL_DMA_IRQHandler+0xe38>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01d      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a32      	ldr	r2, [pc, #200]	; (800417c <HAL_DMA_IRQHandler+0xe3c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d018      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a30      	ldr	r2, [pc, #192]	; (8004180 <HAL_DMA_IRQHandler+0xe40>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2f      	ldr	r2, [pc, #188]	; (8004184 <HAL_DMA_IRQHandler+0xe44>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a2d      	ldr	r2, [pc, #180]	; (8004188 <HAL_DMA_IRQHandler+0xe48>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a2c      	ldr	r2, [pc, #176]	; (800418c <HAL_DMA_IRQHandler+0xe4c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2a      	ldr	r2, [pc, #168]	; (8004190 <HAL_DMA_IRQHandler+0xe50>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d108      	bne.n	80040fc <HAL_DMA_IRQHandler+0xdbc>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 021c 	bic.w	r2, r2, #28
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e007      	b.n	800410c <HAL_DMA_IRQHandler+0xdcc>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 020e 	bic.w	r2, r2, #14
 800410a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2201      	movs	r2, #1
 8004116:	409a      	lsls	r2, r3
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
 8004142:	e004      	b.n	800414e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004144:	bf00      	nop
 8004146:	e002      	b.n	800414e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800414c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800414e:	3728      	adds	r7, #40	; 0x28
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40020010 	.word	0x40020010
 8004158:	40020028 	.word	0x40020028
 800415c:	40020040 	.word	0x40020040
 8004160:	40020058 	.word	0x40020058
 8004164:	40020070 	.word	0x40020070
 8004168:	40020088 	.word	0x40020088
 800416c:	400200a0 	.word	0x400200a0
 8004170:	400200b8 	.word	0x400200b8
 8004174:	40020410 	.word	0x40020410
 8004178:	40020428 	.word	0x40020428
 800417c:	40020440 	.word	0x40020440
 8004180:	40020458 	.word	0x40020458
 8004184:	40020470 	.word	0x40020470
 8004188:	40020488 	.word	0x40020488
 800418c:	400204a0 	.word	0x400204a0
 8004190:	400204b8 	.word	0x400204b8

08004194 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7f      	ldr	r2, [pc, #508]	; (80043b0 <DMA_SetConfig+0x21c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d072      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a7d      	ldr	r2, [pc, #500]	; (80043b4 <DMA_SetConfig+0x220>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d06d      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7c      	ldr	r2, [pc, #496]	; (80043b8 <DMA_SetConfig+0x224>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d068      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a7a      	ldr	r2, [pc, #488]	; (80043bc <DMA_SetConfig+0x228>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d063      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a79      	ldr	r2, [pc, #484]	; (80043c0 <DMA_SetConfig+0x22c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d05e      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a77      	ldr	r2, [pc, #476]	; (80043c4 <DMA_SetConfig+0x230>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d059      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a76      	ldr	r2, [pc, #472]	; (80043c8 <DMA_SetConfig+0x234>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d054      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a74      	ldr	r2, [pc, #464]	; (80043cc <DMA_SetConfig+0x238>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d04f      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a73      	ldr	r2, [pc, #460]	; (80043d0 <DMA_SetConfig+0x23c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04a      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a71      	ldr	r2, [pc, #452]	; (80043d4 <DMA_SetConfig+0x240>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d045      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a70      	ldr	r2, [pc, #448]	; (80043d8 <DMA_SetConfig+0x244>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d040      	beq.n	800429e <DMA_SetConfig+0x10a>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6e      	ldr	r2, [pc, #440]	; (80043dc <DMA_SetConfig+0x248>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d03b      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6d      	ldr	r2, [pc, #436]	; (80043e0 <DMA_SetConfig+0x24c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d036      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a6b      	ldr	r2, [pc, #428]	; (80043e4 <DMA_SetConfig+0x250>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <DMA_SetConfig+0x10a>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a6a      	ldr	r2, [pc, #424]	; (80043e8 <DMA_SetConfig+0x254>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a68      	ldr	r2, [pc, #416]	; (80043ec <DMA_SetConfig+0x258>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d027      	beq.n	800429e <DMA_SetConfig+0x10a>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a67      	ldr	r2, [pc, #412]	; (80043f0 <DMA_SetConfig+0x25c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a65      	ldr	r2, [pc, #404]	; (80043f4 <DMA_SetConfig+0x260>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a64      	ldr	r2, [pc, #400]	; (80043f8 <DMA_SetConfig+0x264>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <DMA_SetConfig+0x10a>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a62      	ldr	r2, [pc, #392]	; (80043fc <DMA_SetConfig+0x268>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a61      	ldr	r2, [pc, #388]	; (8004400 <DMA_SetConfig+0x26c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a5f      	ldr	r2, [pc, #380]	; (8004404 <DMA_SetConfig+0x270>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <DMA_SetConfig+0x10a>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a5e      	ldr	r2, [pc, #376]	; (8004408 <DMA_SetConfig+0x274>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a5c      	ldr	r2, [pc, #368]	; (800440c <DMA_SetConfig+0x278>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <DMA_SetConfig+0x10e>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <DMA_SetConfig+0x110>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00d      	beq.n	80042c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a39      	ldr	r2, [pc, #228]	; (80043b0 <DMA_SetConfig+0x21c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d04a      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <DMA_SetConfig+0x220>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d045      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a36      	ldr	r2, [pc, #216]	; (80043b8 <DMA_SetConfig+0x224>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d040      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a35      	ldr	r2, [pc, #212]	; (80043bc <DMA_SetConfig+0x228>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d03b      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a33      	ldr	r2, [pc, #204]	; (80043c0 <DMA_SetConfig+0x22c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d036      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a32      	ldr	r2, [pc, #200]	; (80043c4 <DMA_SetConfig+0x230>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d031      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a30      	ldr	r2, [pc, #192]	; (80043c8 <DMA_SetConfig+0x234>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d02c      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <DMA_SetConfig+0x238>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d027      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <DMA_SetConfig+0x23c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d022      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a2c      	ldr	r2, [pc, #176]	; (80043d4 <DMA_SetConfig+0x240>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d01d      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2a      	ldr	r2, [pc, #168]	; (80043d8 <DMA_SetConfig+0x244>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d018      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a29      	ldr	r2, [pc, #164]	; (80043dc <DMA_SetConfig+0x248>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d013      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a27      	ldr	r2, [pc, #156]	; (80043e0 <DMA_SetConfig+0x24c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00e      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <DMA_SetConfig+0x250>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d009      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <DMA_SetConfig+0x254>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d004      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a23      	ldr	r2, [pc, #140]	; (80043ec <DMA_SetConfig+0x258>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <DMA_SetConfig+0x1d4>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <DMA_SetConfig+0x1d6>
 8004368:	2300      	movs	r3, #0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d059      	beq.n	8004422 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	223f      	movs	r2, #63	; 0x3f
 8004378:	409a      	lsls	r2, r3
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800438c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d138      	bne.n	8004410 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043ae:	e086      	b.n	80044be <DMA_SetConfig+0x32a>
 80043b0:	40020010 	.word	0x40020010
 80043b4:	40020028 	.word	0x40020028
 80043b8:	40020040 	.word	0x40020040
 80043bc:	40020058 	.word	0x40020058
 80043c0:	40020070 	.word	0x40020070
 80043c4:	40020088 	.word	0x40020088
 80043c8:	400200a0 	.word	0x400200a0
 80043cc:	400200b8 	.word	0x400200b8
 80043d0:	40020410 	.word	0x40020410
 80043d4:	40020428 	.word	0x40020428
 80043d8:	40020440 	.word	0x40020440
 80043dc:	40020458 	.word	0x40020458
 80043e0:	40020470 	.word	0x40020470
 80043e4:	40020488 	.word	0x40020488
 80043e8:	400204a0 	.word	0x400204a0
 80043ec:	400204b8 	.word	0x400204b8
 80043f0:	58025408 	.word	0x58025408
 80043f4:	5802541c 	.word	0x5802541c
 80043f8:	58025430 	.word	0x58025430
 80043fc:	58025444 	.word	0x58025444
 8004400:	58025458 	.word	0x58025458
 8004404:	5802546c 	.word	0x5802546c
 8004408:	58025480 	.word	0x58025480
 800440c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]
}
 8004420:	e04d      	b.n	80044be <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a29      	ldr	r2, [pc, #164]	; (80044cc <DMA_SetConfig+0x338>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d022      	beq.n	8004472 <DMA_SetConfig+0x2de>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <DMA_SetConfig+0x33c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01d      	beq.n	8004472 <DMA_SetConfig+0x2de>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a26      	ldr	r2, [pc, #152]	; (80044d4 <DMA_SetConfig+0x340>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d018      	beq.n	8004472 <DMA_SetConfig+0x2de>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a24      	ldr	r2, [pc, #144]	; (80044d8 <DMA_SetConfig+0x344>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <DMA_SetConfig+0x2de>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a23      	ldr	r2, [pc, #140]	; (80044dc <DMA_SetConfig+0x348>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00e      	beq.n	8004472 <DMA_SetConfig+0x2de>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <DMA_SetConfig+0x34c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d009      	beq.n	8004472 <DMA_SetConfig+0x2de>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a20      	ldr	r2, [pc, #128]	; (80044e4 <DMA_SetConfig+0x350>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <DMA_SetConfig+0x2de>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <DMA_SetConfig+0x354>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d101      	bne.n	8004476 <DMA_SetConfig+0x2e2>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <DMA_SetConfig+0x2e4>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2201      	movs	r2, #1
 8004486:	409a      	lsls	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d108      	bne.n	80044ae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	60da      	str	r2, [r3, #12]
}
 80044ac:	e007      	b.n	80044be <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	60da      	str	r2, [r3, #12]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	58025408 	.word	0x58025408
 80044d0:	5802541c 	.word	0x5802541c
 80044d4:	58025430 	.word	0x58025430
 80044d8:	58025444 	.word	0x58025444
 80044dc:	58025458 	.word	0x58025458
 80044e0:	5802546c 	.word	0x5802546c
 80044e4:	58025480 	.word	0x58025480
 80044e8:	58025494 	.word	0x58025494

080044ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a42      	ldr	r2, [pc, #264]	; (8004604 <DMA_CalcBaseAndBitshift+0x118>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d04a      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a41      	ldr	r2, [pc, #260]	; (8004608 <DMA_CalcBaseAndBitshift+0x11c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d045      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a3f      	ldr	r2, [pc, #252]	; (800460c <DMA_CalcBaseAndBitshift+0x120>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d040      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a3e      	ldr	r2, [pc, #248]	; (8004610 <DMA_CalcBaseAndBitshift+0x124>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d03b      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a3c      	ldr	r2, [pc, #240]	; (8004614 <DMA_CalcBaseAndBitshift+0x128>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d036      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3b      	ldr	r2, [pc, #236]	; (8004618 <DMA_CalcBaseAndBitshift+0x12c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d031      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a39      	ldr	r2, [pc, #228]	; (800461c <DMA_CalcBaseAndBitshift+0x130>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02c      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a38      	ldr	r2, [pc, #224]	; (8004620 <DMA_CalcBaseAndBitshift+0x134>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d027      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a36      	ldr	r2, [pc, #216]	; (8004624 <DMA_CalcBaseAndBitshift+0x138>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d022      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a35      	ldr	r2, [pc, #212]	; (8004628 <DMA_CalcBaseAndBitshift+0x13c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d01d      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a33      	ldr	r2, [pc, #204]	; (800462c <DMA_CalcBaseAndBitshift+0x140>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d018      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a32      	ldr	r2, [pc, #200]	; (8004630 <DMA_CalcBaseAndBitshift+0x144>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a30      	ldr	r2, [pc, #192]	; (8004634 <DMA_CalcBaseAndBitshift+0x148>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00e      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2f      	ldr	r2, [pc, #188]	; (8004638 <DMA_CalcBaseAndBitshift+0x14c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d009      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2d      	ldr	r2, [pc, #180]	; (800463c <DMA_CalcBaseAndBitshift+0x150>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <DMA_CalcBaseAndBitshift+0x154>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <DMA_CalcBaseAndBitshift+0xac>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <DMA_CalcBaseAndBitshift+0xae>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d024      	beq.n	80045e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	3b10      	subs	r3, #16
 80045a6:	4a27      	ldr	r2, [pc, #156]	; (8004644 <DMA_CalcBaseAndBitshift+0x158>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	4a24      	ldr	r2, [pc, #144]	; (8004648 <DMA_CalcBaseAndBitshift+0x15c>)
 80045b8:	5cd3      	ldrb	r3, [r2, r3]
 80045ba:	461a      	mov	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d908      	bls.n	80045d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <DMA_CalcBaseAndBitshift+0x160>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	1d1a      	adds	r2, r3, #4
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	659a      	str	r2, [r3, #88]	; 0x58
 80045d6:	e00d      	b.n	80045f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	4b1b      	ldr	r3, [pc, #108]	; (800464c <DMA_CalcBaseAndBitshift+0x160>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6593      	str	r3, [r2, #88]	; 0x58
 80045e6:	e005      	b.n	80045f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40020010 	.word	0x40020010
 8004608:	40020028 	.word	0x40020028
 800460c:	40020040 	.word	0x40020040
 8004610:	40020058 	.word	0x40020058
 8004614:	40020070 	.word	0x40020070
 8004618:	40020088 	.word	0x40020088
 800461c:	400200a0 	.word	0x400200a0
 8004620:	400200b8 	.word	0x400200b8
 8004624:	40020410 	.word	0x40020410
 8004628:	40020428 	.word	0x40020428
 800462c:	40020440 	.word	0x40020440
 8004630:	40020458 	.word	0x40020458
 8004634:	40020470 	.word	0x40020470
 8004638:	40020488 	.word	0x40020488
 800463c:	400204a0 	.word	0x400204a0
 8004640:	400204b8 	.word	0x400204b8
 8004644:	aaaaaaab 	.word	0xaaaaaaab
 8004648:	0801bce8 	.word	0x0801bce8
 800464c:	fffffc00 	.word	0xfffffc00

08004650 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d120      	bne.n	80046a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	2b03      	cmp	r3, #3
 800466a:	d858      	bhi.n	800471e <DMA_CheckFifoParam+0xce>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <DMA_CheckFifoParam+0x24>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004685 	.word	0x08004685
 8004678:	08004697 	.word	0x08004697
 800467c:	08004685 	.word	0x08004685
 8004680:	0800471f 	.word	0x0800471f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d048      	beq.n	8004722 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004694:	e045      	b.n	8004722 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800469e:	d142      	bne.n	8004726 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046a4:	e03f      	b.n	8004726 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ae:	d123      	bne.n	80046f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d838      	bhi.n	800472a <DMA_CheckFifoParam+0xda>
 80046b8:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <DMA_CheckFifoParam+0x70>)
 80046ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046be:	bf00      	nop
 80046c0:	080046d1 	.word	0x080046d1
 80046c4:	080046d7 	.word	0x080046d7
 80046c8:	080046d1 	.word	0x080046d1
 80046cc:	080046e9 	.word	0x080046e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
        break;
 80046d4:	e030      	b.n	8004738 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d025      	beq.n	800472e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046e6:	e022      	b.n	800472e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046f0:	d11f      	bne.n	8004732 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046f6:	e01c      	b.n	8004732 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d902      	bls.n	8004706 <DMA_CheckFifoParam+0xb6>
 8004700:	2b03      	cmp	r3, #3
 8004702:	d003      	beq.n	800470c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004704:	e018      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
        break;
 800470a:	e015      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
    break;
 800471c:	e00b      	b.n	8004736 <DMA_CheckFifoParam+0xe6>
        break;
 800471e:	bf00      	nop
 8004720:	e00a      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        break;
 8004722:	bf00      	nop
 8004724:	e008      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        break;
 8004726:	bf00      	nop
 8004728:	e006      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        break;
 800472a:	bf00      	nop
 800472c:	e004      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        break;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
    break;
 8004736:	bf00      	nop
    }
  }

  return status;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop

08004748 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a38      	ldr	r2, [pc, #224]	; (800483c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d022      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a36      	ldr	r2, [pc, #216]	; (8004840 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01d      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a35      	ldr	r2, [pc, #212]	; (8004844 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d018      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a33      	ldr	r2, [pc, #204]	; (8004848 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a32      	ldr	r2, [pc, #200]	; (800484c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00e      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a30      	ldr	r2, [pc, #192]	; (8004850 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d009      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2d      	ldr	r2, [pc, #180]	; (8004858 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01a      	beq.n	80047e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	3b08      	subs	r3, #8
 80047b8:	4a28      	ldr	r2, [pc, #160]	; (800485c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4b26      	ldr	r3, [pc, #152]	; (8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	461a      	mov	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a24      	ldr	r2, [pc, #144]	; (8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80047d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	2201      	movs	r2, #1
 80047de:	409a      	lsls	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80047e4:	e024      	b.n	8004830 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3b10      	subs	r3, #16
 80047ee:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4a1c      	ldr	r2, [pc, #112]	; (800486c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d806      	bhi.n	800480e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d902      	bls.n	800480e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3308      	adds	r3, #8
 800480c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4b18      	ldr	r3, [pc, #96]	; (8004874 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a16      	ldr	r2, [pc, #88]	; (8004878 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004820:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2201      	movs	r2, #1
 800482a:	409a      	lsls	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	58025408 	.word	0x58025408
 8004840:	5802541c 	.word	0x5802541c
 8004844:	58025430 	.word	0x58025430
 8004848:	58025444 	.word	0x58025444
 800484c:	58025458 	.word	0x58025458
 8004850:	5802546c 	.word	0x5802546c
 8004854:	58025480 	.word	0x58025480
 8004858:	58025494 	.word	0x58025494
 800485c:	cccccccd 	.word	0xcccccccd
 8004860:	16009600 	.word	0x16009600
 8004864:	58025880 	.word	0x58025880
 8004868:	aaaaaaab 	.word	0xaaaaaaab
 800486c:	400204b8 	.word	0x400204b8
 8004870:	4002040f 	.word	0x4002040f
 8004874:	10008200 	.word	0x10008200
 8004878:	40020880 	.word	0x40020880

0800487c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d04a      	beq.n	8004928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d847      	bhi.n	8004928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a25      	ldr	r2, [pc, #148]	; (8004934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d022      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a24      	ldr	r2, [pc, #144]	; (8004938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d01d      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a22      	ldr	r2, [pc, #136]	; (800493c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d018      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a21      	ldr	r2, [pc, #132]	; (8004940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1f      	ldr	r2, [pc, #124]	; (8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00e      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d009      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1c      	ldr	r2, [pc, #112]	; (800494c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4b17      	ldr	r3, [pc, #92]	; (8004954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	461a      	mov	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a15      	ldr	r2, [pc, #84]	; (8004958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004904:	671a      	str	r2, [r3, #112]	; 0x70
 8004906:	e009      	b.n	800491c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4b14      	ldr	r3, [pc, #80]	; (800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	461a      	mov	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a11      	ldr	r2, [pc, #68]	; (8004960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800491a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3b01      	subs	r3, #1
 8004920:	2201      	movs	r2, #1
 8004922:	409a      	lsls	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	58025408 	.word	0x58025408
 8004938:	5802541c 	.word	0x5802541c
 800493c:	58025430 	.word	0x58025430
 8004940:	58025444 	.word	0x58025444
 8004944:	58025458 	.word	0x58025458
 8004948:	5802546c 	.word	0x5802546c
 800494c:	58025480 	.word	0x58025480
 8004950:	58025494 	.word	0x58025494
 8004954:	1600963f 	.word	0x1600963f
 8004958:	58025940 	.word	0x58025940
 800495c:	1000823f 	.word	0x1000823f
 8004960:	40020940 	.word	0x40020940

08004964 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d105      	bne.n	800498a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004984:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e315      	b.n	8004fb6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004994:	2302      	movs	r3, #2
 8004996:	e30e      	b.n	8004fb6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	f040 82fd 	bne.w	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a82      	ldr	r2, [pc, #520]	; (8004bcc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d04a      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a81      	ldr	r2, [pc, #516]	; (8004bd0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d045      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a7f      	ldr	r2, [pc, #508]	; (8004bd4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d040      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7e      	ldr	r2, [pc, #504]	; (8004bd8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d03b      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a7c      	ldr	r2, [pc, #496]	; (8004bdc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d036      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a7b      	ldr	r2, [pc, #492]	; (8004be0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d031      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a79      	ldr	r2, [pc, #484]	; (8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d02c      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a78      	ldr	r2, [pc, #480]	; (8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d027      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a76      	ldr	r2, [pc, #472]	; (8004bec <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d022      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a75      	ldr	r2, [pc, #468]	; (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d01d      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a73      	ldr	r2, [pc, #460]	; (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d018      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a72      	ldr	r2, [pc, #456]	; (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d013      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a70      	ldr	r2, [pc, #448]	; (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00e      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a6f      	ldr	r2, [pc, #444]	; (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d009      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a6d      	ldr	r2, [pc, #436]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6c      	ldr	r2, [pc, #432]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d101      	bne.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004a60:	2300      	movs	r3, #0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d018      	beq.n	8004a98 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004a74:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a82:	3308      	adds	r3, #8
 8004a84:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	223f      	movs	r2, #63	; 0x3f
 8004a90:	409a      	lsls	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e018      	b.n	8004aca <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6819      	ldr	r1, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	f248 0320 	movw	r3, #32800	; 0x8020
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fb41 	bl	8005158 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a3c      	ldr	r2, [pc, #240]	; (8004bcc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d072      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a3a      	ldr	r2, [pc, #232]	; (8004bd0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d06d      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a39      	ldr	r2, [pc, #228]	; (8004bd4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d068      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a37      	ldr	r2, [pc, #220]	; (8004bd8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d063      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a36      	ldr	r2, [pc, #216]	; (8004bdc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d05e      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a34      	ldr	r2, [pc, #208]	; (8004be0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d059      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a33      	ldr	r2, [pc, #204]	; (8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d054      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a31      	ldr	r2, [pc, #196]	; (8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d04f      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a30      	ldr	r2, [pc, #192]	; (8004bec <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d04a      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a2e      	ldr	r2, [pc, #184]	; (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d045      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a2d      	ldr	r2, [pc, #180]	; (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d040      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a2b      	ldr	r2, [pc, #172]	; (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d03b      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d036      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a28      	ldr	r2, [pc, #160]	; (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d031      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d02c      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a25      	ldr	r2, [pc, #148]	; (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d027      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a24      	ldr	r2, [pc, #144]	; (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d022      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a22      	ldr	r2, [pc, #136]	; (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d01d      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	; (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d018      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d009      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d132      	bne.n	8004c2c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e031      	b.n	8004c2e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8004bca:	bf00      	nop
 8004bcc:	40020010 	.word	0x40020010
 8004bd0:	40020028 	.word	0x40020028
 8004bd4:	40020040 	.word	0x40020040
 8004bd8:	40020058 	.word	0x40020058
 8004bdc:	40020070 	.word	0x40020070
 8004be0:	40020088 	.word	0x40020088
 8004be4:	400200a0 	.word	0x400200a0
 8004be8:	400200b8 	.word	0x400200b8
 8004bec:	40020410 	.word	0x40020410
 8004bf0:	40020428 	.word	0x40020428
 8004bf4:	40020440 	.word	0x40020440
 8004bf8:	40020458 	.word	0x40020458
 8004bfc:	40020470 	.word	0x40020470
 8004c00:	40020488 	.word	0x40020488
 8004c04:	400204a0 	.word	0x400204a0
 8004c08:	400204b8 	.word	0x400204b8
 8004c0c:	58025408 	.word	0x58025408
 8004c10:	5802541c 	.word	0x5802541c
 8004c14:	58025430 	.word	0x58025430
 8004c18:	58025444 	.word	0x58025444
 8004c1c:	58025458 	.word	0x58025458
 8004c20:	5802546c 	.word	0x5802546c
 8004c24:	58025480 	.word	0x58025480
 8004c28:	58025494 	.word	0x58025494
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c3a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c4c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d04a      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a39      	ldr	r2, [pc, #228]	; (8004d44 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d045      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a38      	ldr	r2, [pc, #224]	; (8004d48 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d040      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a36      	ldr	r2, [pc, #216]	; (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d03b      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a35      	ldr	r2, [pc, #212]	; (8004d50 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d036      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a33      	ldr	r2, [pc, #204]	; (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d031      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a32      	ldr	r2, [pc, #200]	; (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d02c      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a30      	ldr	r2, [pc, #192]	; (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d027      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d022      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d01d      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2c      	ldr	r2, [pc, #176]	; (8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d018      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a29      	ldr	r2, [pc, #164]	; (8004d70 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00e      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a27      	ldr	r2, [pc, #156]	; (8004d74 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d009      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a26      	ldr	r2, [pc, #152]	; (8004d78 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d004      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a24      	ldr	r2, [pc, #144]	; (8004d7c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d101      	bne.n	8004cf2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d043      	beq.n	8004d80 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 021e 	bic.w	r2, r3, #30
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0216 	orr.w	r2, r2, #22
 8004d0a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d1a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d103      	bne.n	8004d2c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d043      	beq.n	8004db4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0208 	orr.w	r2, r2, #8
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e03a      	b.n	8004db4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8004d3e:	bf00      	nop
 8004d40:	40020010 	.word	0x40020010
 8004d44:	40020028 	.word	0x40020028
 8004d48:	40020040 	.word	0x40020040
 8004d4c:	40020058 	.word	0x40020058
 8004d50:	40020070 	.word	0x40020070
 8004d54:	40020088 	.word	0x40020088
 8004d58:	400200a0 	.word	0x400200a0
 8004d5c:	400200b8 	.word	0x400200b8
 8004d60:	40020410 	.word	0x40020410
 8004d64:	40020428 	.word	0x40020428
 8004d68:	40020440 	.word	0x40020440
 8004d6c:	40020458 	.word	0x40020458
 8004d70:	40020470 	.word	0x40020470
 8004d74:	40020488 	.word	0x40020488
 8004d78:	400204a0 	.word	0x400204a0
 8004d7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f023 020e 	bic.w	r2, r3, #14
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 020a 	orr.w	r2, r2, #10
 8004d92:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0204 	orr.w	r2, r2, #4
 8004db2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a81      	ldr	r2, [pc, #516]	; (8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d072      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a80      	ldr	r2, [pc, #512]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d06d      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a7e      	ldr	r2, [pc, #504]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d068      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a7d      	ldr	r2, [pc, #500]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d063      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a7b      	ldr	r2, [pc, #492]	; (8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d05e      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a7a      	ldr	r2, [pc, #488]	; (8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d059      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a78      	ldr	r2, [pc, #480]	; (8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d054      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a77      	ldr	r2, [pc, #476]	; (8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d04f      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a75      	ldr	r2, [pc, #468]	; (8004fe0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d04a      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a74      	ldr	r2, [pc, #464]	; (8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d045      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a72      	ldr	r2, [pc, #456]	; (8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d040      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a71      	ldr	r2, [pc, #452]	; (8004fec <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d03b      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a6f      	ldr	r2, [pc, #444]	; (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d036      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a6e      	ldr	r2, [pc, #440]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d031      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a6c      	ldr	r2, [pc, #432]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02c      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6b      	ldr	r2, [pc, #428]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d027      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a69      	ldr	r2, [pc, #420]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d022      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a68      	ldr	r2, [pc, #416]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d01d      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a66      	ldr	r2, [pc, #408]	; (8005008 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d018      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a65      	ldr	r2, [pc, #404]	; (800500c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a63      	ldr	r2, [pc, #396]	; (8005010 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00e      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a62      	ldr	r2, [pc, #392]	; (8005014 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d009      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a60      	ldr	r2, [pc, #384]	; (8005018 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a5f      	ldr	r2, [pc, #380]	; (800501c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01a      	beq.n	8004ee4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a35      	ldr	r2, [pc, #212]	; (8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d04a      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d045      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a32      	ldr	r2, [pc, #200]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d040      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a31      	ldr	r2, [pc, #196]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d03b      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d036      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2e      	ldr	r2, [pc, #184]	; (8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d031      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a2c      	ldr	r2, [pc, #176]	; (8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d02c      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2b      	ldr	r2, [pc, #172]	; (8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d027      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a29      	ldr	r2, [pc, #164]	; (8004fe0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d022      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d01d      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d018      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a25      	ldr	r2, [pc, #148]	; (8004fec <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a23      	ldr	r2, [pc, #140]	; (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00e      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a22      	ldr	r2, [pc, #136]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a20      	ldr	r2, [pc, #128]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e00e      	b.n	8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0201 	orr.w	r2, r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e005      	b.n	8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40020010 	.word	0x40020010
 8004fc4:	40020028 	.word	0x40020028
 8004fc8:	40020040 	.word	0x40020040
 8004fcc:	40020058 	.word	0x40020058
 8004fd0:	40020070 	.word	0x40020070
 8004fd4:	40020088 	.word	0x40020088
 8004fd8:	400200a0 	.word	0x400200a0
 8004fdc:	400200b8 	.word	0x400200b8
 8004fe0:	40020410 	.word	0x40020410
 8004fe4:	40020428 	.word	0x40020428
 8004fe8:	40020440 	.word	0x40020440
 8004fec:	40020458 	.word	0x40020458
 8004ff0:	40020470 	.word	0x40020470
 8004ff4:	40020488 	.word	0x40020488
 8004ff8:	400204a0 	.word	0x400204a0
 8004ffc:	400204b8 	.word	0x400204b8
 8005000:	58025408 	.word	0x58025408
 8005004:	5802541c 	.word	0x5802541c
 8005008:	58025430 	.word	0x58025430
 800500c:	58025444 	.word	0x58025444
 8005010:	58025458 	.word	0x58025458
 8005014:	5802546c 	.word	0x5802546c
 8005018:	58025480 	.word	0x58025480
 800501c:	58025494 	.word	0x58025494

08005020 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a39      	ldr	r2, [pc, #228]	; (8005118 <HAL_DMAEx_ChangeMemory+0xf8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d04a      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a37      	ldr	r2, [pc, #220]	; (800511c <HAL_DMAEx_ChangeMemory+0xfc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d045      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a36      	ldr	r2, [pc, #216]	; (8005120 <HAL_DMAEx_ChangeMemory+0x100>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d040      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a34      	ldr	r2, [pc, #208]	; (8005124 <HAL_DMAEx_ChangeMemory+0x104>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d03b      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a33      	ldr	r2, [pc, #204]	; (8005128 <HAL_DMAEx_ChangeMemory+0x108>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d036      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a31      	ldr	r2, [pc, #196]	; (800512c <HAL_DMAEx_ChangeMemory+0x10c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d031      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a30      	ldr	r2, [pc, #192]	; (8005130 <HAL_DMAEx_ChangeMemory+0x110>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d02c      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2e      	ldr	r2, [pc, #184]	; (8005134 <HAL_DMAEx_ChangeMemory+0x114>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d027      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2d      	ldr	r2, [pc, #180]	; (8005138 <HAL_DMAEx_ChangeMemory+0x118>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d022      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2b      	ldr	r2, [pc, #172]	; (800513c <HAL_DMAEx_ChangeMemory+0x11c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01d      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <HAL_DMAEx_ChangeMemory+0x120>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d018      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a28      	ldr	r2, [pc, #160]	; (8005144 <HAL_DMAEx_ChangeMemory+0x124>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d013      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a27      	ldr	r2, [pc, #156]	; (8005148 <HAL_DMAEx_ChangeMemory+0x128>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00e      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a25      	ldr	r2, [pc, #148]	; (800514c <HAL_DMAEx_ChangeMemory+0x12c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a24      	ldr	r2, [pc, #144]	; (8005150 <HAL_DMAEx_ChangeMemory+0x130>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_DMAEx_ChangeMemory+0xae>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a22      	ldr	r2, [pc, #136]	; (8005154 <HAL_DMAEx_ChangeMemory+0x134>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <HAL_DMAEx_ChangeMemory+0xb2>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <HAL_DMAEx_ChangeMemory+0xb4>
 80050d2:	2300      	movs	r3, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	60da      	str	r2, [r3, #12]
 80050e6:	e010      	b.n	800510a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	611a      	str	r2, [r3, #16]
 80050f0:	e00b      	b.n	800510a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	60da      	str	r2, [r3, #12]
 8005100:	e003      	b.n	800510a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	40020010 	.word	0x40020010
 800511c:	40020028 	.word	0x40020028
 8005120:	40020040 	.word	0x40020040
 8005124:	40020058 	.word	0x40020058
 8005128:	40020070 	.word	0x40020070
 800512c:	40020088 	.word	0x40020088
 8005130:	400200a0 	.word	0x400200a0
 8005134:	400200b8 	.word	0x400200b8
 8005138:	40020410 	.word	0x40020410
 800513c:	40020428 	.word	0x40020428
 8005140:	40020440 	.word	0x40020440
 8005144:	40020458 	.word	0x40020458
 8005148:	40020470 	.word	0x40020470
 800514c:	40020488 	.word	0x40020488
 8005150:	400204a0 	.word	0x400204a0
 8005154:	400204b8 	.word	0x400204b8

08005158 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a46      	ldr	r2, [pc, #280]	; (8005284 <DMA_MultiBufferSetConfig+0x12c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d04a      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a44      	ldr	r2, [pc, #272]	; (8005288 <DMA_MultiBufferSetConfig+0x130>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d045      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a43      	ldr	r2, [pc, #268]	; (800528c <DMA_MultiBufferSetConfig+0x134>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d040      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a41      	ldr	r2, [pc, #260]	; (8005290 <DMA_MultiBufferSetConfig+0x138>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d03b      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a40      	ldr	r2, [pc, #256]	; (8005294 <DMA_MultiBufferSetConfig+0x13c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d036      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a3e      	ldr	r2, [pc, #248]	; (8005298 <DMA_MultiBufferSetConfig+0x140>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d031      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a3d      	ldr	r2, [pc, #244]	; (800529c <DMA_MultiBufferSetConfig+0x144>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d02c      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3b      	ldr	r2, [pc, #236]	; (80052a0 <DMA_MultiBufferSetConfig+0x148>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d027      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a3a      	ldr	r2, [pc, #232]	; (80052a4 <DMA_MultiBufferSetConfig+0x14c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d022      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a38      	ldr	r2, [pc, #224]	; (80052a8 <DMA_MultiBufferSetConfig+0x150>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d01d      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a37      	ldr	r2, [pc, #220]	; (80052ac <DMA_MultiBufferSetConfig+0x154>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d018      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a35      	ldr	r2, [pc, #212]	; (80052b0 <DMA_MultiBufferSetConfig+0x158>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <DMA_MultiBufferSetConfig+0x15c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00e      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a32      	ldr	r2, [pc, #200]	; (80052b8 <DMA_MultiBufferSetConfig+0x160>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d009      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a31      	ldr	r2, [pc, #196]	; (80052bc <DMA_MultiBufferSetConfig+0x164>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d004      	beq.n	8005206 <DMA_MultiBufferSetConfig+0xae>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2f      	ldr	r2, [pc, #188]	; (80052c0 <DMA_MultiBufferSetConfig+0x168>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <DMA_MultiBufferSetConfig+0xb2>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <DMA_MultiBufferSetConfig+0xb4>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d019      	beq.n	8005244 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d108      	bne.n	8005232 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005230:	e021      	b.n	8005276 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	60da      	str	r2, [r3, #12]
}
 8005242:	e018      	b.n	8005276 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d108      	bne.n	8005266 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	60da      	str	r2, [r3, #12]
}
 8005264:	e007      	b.n	8005276 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	60da      	str	r2, [r3, #12]
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40020010 	.word	0x40020010
 8005288:	40020028 	.word	0x40020028
 800528c:	40020040 	.word	0x40020040
 8005290:	40020058 	.word	0x40020058
 8005294:	40020070 	.word	0x40020070
 8005298:	40020088 	.word	0x40020088
 800529c:	400200a0 	.word	0x400200a0
 80052a0:	400200b8 	.word	0x400200b8
 80052a4:	40020410 	.word	0x40020410
 80052a8:	40020428 	.word	0x40020428
 80052ac:	40020440 	.word	0x40020440
 80052b0:	40020458 	.word	0x40020458
 80052b4:	40020470 	.word	0x40020470
 80052b8:	40020488 	.word	0x40020488
 80052bc:	400204a0 	.word	0x400204a0
 80052c0:	400204b8 	.word	0x400204b8

080052c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b089      	sub	sp, #36	; 0x24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052d2:	4b89      	ldr	r3, [pc, #548]	; (80054f8 <HAL_GPIO_Init+0x234>)
 80052d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052d6:	e194      	b.n	8005602 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	2101      	movs	r1, #1
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	4013      	ands	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 8186 	beq.w	80055fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d005      	beq.n	8005308 <HAL_GPIO_Init+0x44>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d130      	bne.n	800536a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	2203      	movs	r2, #3
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4313      	orrs	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800533e:	2201      	movs	r2, #1
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	f003 0201 	and.w	r2, r3, #1
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4313      	orrs	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b03      	cmp	r3, #3
 8005374:	d017      	beq.n	80053a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	2203      	movs	r2, #3
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43db      	mvns	r3, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4013      	ands	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d123      	bne.n	80053fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	08da      	lsrs	r2, r3, #3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3208      	adds	r2, #8
 80053ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	220f      	movs	r2, #15
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	08da      	lsrs	r2, r3, #3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3208      	adds	r2, #8
 80053f4:	69b9      	ldr	r1, [r7, #24]
 80053f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	2203      	movs	r2, #3
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	43db      	mvns	r3, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 0203 	and.w	r2, r3, #3
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4313      	orrs	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 80e0 	beq.w	80055fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800543c:	4b2f      	ldr	r3, [pc, #188]	; (80054fc <HAL_GPIO_Init+0x238>)
 800543e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005442:	4a2e      	ldr	r2, [pc, #184]	; (80054fc <HAL_GPIO_Init+0x238>)
 8005444:	f043 0302 	orr.w	r3, r3, #2
 8005448:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800544c:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <HAL_GPIO_Init+0x238>)
 800544e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800545a:	4a29      	ldr	r2, [pc, #164]	; (8005500 <HAL_GPIO_Init+0x23c>)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	089b      	lsrs	r3, r3, #2
 8005460:	3302      	adds	r3, #2
 8005462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	220f      	movs	r2, #15
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4013      	ands	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a20      	ldr	r2, [pc, #128]	; (8005504 <HAL_GPIO_Init+0x240>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d052      	beq.n	800552c <HAL_GPIO_Init+0x268>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1f      	ldr	r2, [pc, #124]	; (8005508 <HAL_GPIO_Init+0x244>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d031      	beq.n	80054f2 <HAL_GPIO_Init+0x22e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1e      	ldr	r2, [pc, #120]	; (800550c <HAL_GPIO_Init+0x248>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d02b      	beq.n	80054ee <HAL_GPIO_Init+0x22a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1d      	ldr	r2, [pc, #116]	; (8005510 <HAL_GPIO_Init+0x24c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d025      	beq.n	80054ea <HAL_GPIO_Init+0x226>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <HAL_GPIO_Init+0x250>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01f      	beq.n	80054e6 <HAL_GPIO_Init+0x222>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a1b      	ldr	r2, [pc, #108]	; (8005518 <HAL_GPIO_Init+0x254>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d019      	beq.n	80054e2 <HAL_GPIO_Init+0x21e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a1a      	ldr	r2, [pc, #104]	; (800551c <HAL_GPIO_Init+0x258>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_GPIO_Init+0x21a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a19      	ldr	r2, [pc, #100]	; (8005520 <HAL_GPIO_Init+0x25c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00d      	beq.n	80054da <HAL_GPIO_Init+0x216>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_GPIO_Init+0x260>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <HAL_GPIO_Init+0x212>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a17      	ldr	r2, [pc, #92]	; (8005528 <HAL_GPIO_Init+0x264>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <HAL_GPIO_Init+0x20e>
 80054ce:	2309      	movs	r3, #9
 80054d0:	e02d      	b.n	800552e <HAL_GPIO_Init+0x26a>
 80054d2:	230a      	movs	r3, #10
 80054d4:	e02b      	b.n	800552e <HAL_GPIO_Init+0x26a>
 80054d6:	2308      	movs	r3, #8
 80054d8:	e029      	b.n	800552e <HAL_GPIO_Init+0x26a>
 80054da:	2307      	movs	r3, #7
 80054dc:	e027      	b.n	800552e <HAL_GPIO_Init+0x26a>
 80054de:	2306      	movs	r3, #6
 80054e0:	e025      	b.n	800552e <HAL_GPIO_Init+0x26a>
 80054e2:	2305      	movs	r3, #5
 80054e4:	e023      	b.n	800552e <HAL_GPIO_Init+0x26a>
 80054e6:	2304      	movs	r3, #4
 80054e8:	e021      	b.n	800552e <HAL_GPIO_Init+0x26a>
 80054ea:	2303      	movs	r3, #3
 80054ec:	e01f      	b.n	800552e <HAL_GPIO_Init+0x26a>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e01d      	b.n	800552e <HAL_GPIO_Init+0x26a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e01b      	b.n	800552e <HAL_GPIO_Init+0x26a>
 80054f6:	bf00      	nop
 80054f8:	58000080 	.word	0x58000080
 80054fc:	58024400 	.word	0x58024400
 8005500:	58000400 	.word	0x58000400
 8005504:	58020000 	.word	0x58020000
 8005508:	58020400 	.word	0x58020400
 800550c:	58020800 	.word	0x58020800
 8005510:	58020c00 	.word	0x58020c00
 8005514:	58021000 	.word	0x58021000
 8005518:	58021400 	.word	0x58021400
 800551c:	58021800 	.word	0x58021800
 8005520:	58021c00 	.word	0x58021c00
 8005524:	58022000 	.word	0x58022000
 8005528:	58022400 	.word	0x58022400
 800552c:	2300      	movs	r3, #0
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	f002 0203 	and.w	r2, r2, #3
 8005534:	0092      	lsls	r2, r2, #2
 8005536:	4093      	lsls	r3, r2
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800553e:	4938      	ldr	r1, [pc, #224]	; (8005620 <HAL_GPIO_Init+0x35c>)
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	3302      	adds	r3, #2
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800554c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	43db      	mvns	r3, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4013      	ands	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800557a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	43db      	mvns	r3, r3
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4013      	ands	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80055a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	43db      	mvns	r3, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4013      	ands	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	43db      	mvns	r3, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4013      	ands	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	3301      	adds	r3, #1
 8005600:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	fa22 f303 	lsr.w	r3, r2, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	f47f ae63 	bne.w	80052d8 <HAL_GPIO_Init+0x14>
  }
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	3724      	adds	r7, #36	; 0x24
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	58000400 	.word	0x58000400

08005624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	807b      	strh	r3, [r7, #2]
 8005630:	4613      	mov	r3, r2
 8005632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005634:	787b      	ldrb	r3, [r7, #1]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800563a:	887a      	ldrh	r2, [r7, #2]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005640:	e003      	b.n	800564a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005642:	887b      	ldrh	r3, [r7, #2]
 8005644:	041a      	lsls	r2, r3, #16
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	619a      	str	r2, [r3, #24]
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800565e:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <HAL_HSEM_IRQHandler+0x30>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <HAL_HSEM_IRQHandler+0x30>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	43db      	mvns	r3, r3
 800566c:	4906      	ldr	r1, [pc, #24]	; (8005688 <HAL_HSEM_IRQHandler+0x30>)
 800566e:	4013      	ands	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005672:	4a05      	ldr	r2, [pc, #20]	; (8005688 <HAL_HSEM_IRQHandler+0x30>)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f807 	bl	800568c <HAL_HSEM_FreeCallback>
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	58026500 	.word	0x58026500

0800568c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e07f      	b.n	80057b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fb f916 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	; 0x24
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005700:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d107      	bne.n	800571a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005716:	609a      	str	r2, [r3, #8]
 8005718:	e006      	b.n	8005728 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005726:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d104      	bne.n	800573a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005738:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6859      	ldr	r1, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <HAL_I2C_Init+0x11c>)
 8005746:	430b      	orrs	r3, r1
 8005748:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005758:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69d9      	ldr	r1, [r3, #28]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	02008000 	.word	0x02008000

080057c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	817b      	strh	r3, [r7, #10]
 80057d2:	460b      	mov	r3, r1
 80057d4:	813b      	strh	r3, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	f040 80f9 	bne.w	80059da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_I2C_Mem_Write+0x34>
 80057ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d105      	bne.n	8005800 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0ed      	b.n	80059dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_I2C_Mem_Write+0x4e>
 800580a:	2302      	movs	r3, #2
 800580c:	e0e6      	b.n	80059dc <HAL_I2C_Mem_Write+0x21c>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005816:	f7fb fdd9 	bl	80013cc <HAL_GetTick>
 800581a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	2319      	movs	r3, #25
 8005822:	2201      	movs	r2, #1
 8005824:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 fac3 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0d1      	b.n	80059dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2221      	movs	r2, #33	; 0x21
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2240      	movs	r2, #64	; 0x40
 8005844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a3a      	ldr	r2, [r7, #32]
 8005852:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005858:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005860:	88f8      	ldrh	r0, [r7, #6]
 8005862:	893a      	ldrh	r2, [r7, #8]
 8005864:	8979      	ldrh	r1, [r7, #10]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	4603      	mov	r3, r0
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f9d3 	bl	8005c1c <I2C_RequestMemoryWrite>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e0a9      	b.n	80059dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	2bff      	cmp	r3, #255	; 0xff
 8005890:	d90e      	bls.n	80058b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	22ff      	movs	r2, #255	; 0xff
 8005896:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	b2da      	uxtb	r2, r3
 800589e:	8979      	ldrh	r1, [r7, #10]
 80058a0:	2300      	movs	r3, #0
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fc3d 	bl	8006128 <I2C_TransferConfig>
 80058ae:	e00f      	b.n	80058d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	8979      	ldrh	r1, [r7, #10]
 80058c2:	2300      	movs	r3, #0
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fc2c 	bl	8006128 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fabc 	bl	8005e52 <I2C_WaitOnTXISFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e07b      	b.n	80059dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	781a      	ldrb	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d034      	beq.n	8005988 <HAL_I2C_Mem_Write+0x1c8>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d130      	bne.n	8005988 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	2200      	movs	r2, #0
 800592e:	2180      	movs	r1, #128	; 0x80
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fa3f 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e04d      	b.n	80059dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	2bff      	cmp	r3, #255	; 0xff
 8005948:	d90e      	bls.n	8005968 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005954:	b2da      	uxtb	r2, r3
 8005956:	8979      	ldrh	r1, [r7, #10]
 8005958:	2300      	movs	r3, #0
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fbe1 	bl	8006128 <I2C_TransferConfig>
 8005966:	e00f      	b.n	8005988 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005976:	b2da      	uxtb	r2, r3
 8005978:	8979      	ldrh	r1, [r7, #10]
 800597a:	2300      	movs	r3, #0
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fbd0 	bl	8006128 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d19e      	bne.n	80058d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 faa2 	bl	8005ee0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e01a      	b.n	80059dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2220      	movs	r2, #32
 80059ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6859      	ldr	r1, [r3, #4]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <HAL_I2C_Mem_Write+0x224>)
 80059ba:	400b      	ands	r3, r1
 80059bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e000      	b.n	80059dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
  }
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	fe00e800 	.word	0xfe00e800

080059e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	4608      	mov	r0, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	461a      	mov	r2, r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	817b      	strh	r3, [r7, #10]
 80059fa:	460b      	mov	r3, r1
 80059fc:	813b      	strh	r3, [r7, #8]
 80059fe:	4613      	mov	r3, r2
 8005a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	f040 80fd 	bne.w	8005c0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_I2C_Mem_Read+0x34>
 8005a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0f1      	b.n	8005c0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_I2C_Mem_Read+0x4e>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e0ea      	b.n	8005c0c <HAL_I2C_Mem_Read+0x224>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a3e:	f7fb fcc5 	bl	80013cc <HAL_GetTick>
 8005a42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	2319      	movs	r3, #25
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f9af 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0d5      	b.n	8005c0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2222      	movs	r2, #34	; 0x22
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2240      	movs	r2, #64	; 0x40
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a88:	88f8      	ldrh	r0, [r7, #6]
 8005a8a:	893a      	ldrh	r2, [r7, #8]
 8005a8c:	8979      	ldrh	r1, [r7, #10]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	4603      	mov	r3, r0
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f913 	bl	8005cc4 <I2C_RequestMemoryRead>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0ad      	b.n	8005c0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2bff      	cmp	r3, #255	; 0xff
 8005ab8:	d90e      	bls.n	8005ad8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	22ff      	movs	r2, #255	; 0xff
 8005abe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	8979      	ldrh	r1, [r7, #10]
 8005ac8:	4b52      	ldr	r3, [pc, #328]	; (8005c14 <HAL_I2C_Mem_Read+0x22c>)
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fb29 	bl	8006128 <I2C_TransferConfig>
 8005ad6:	e00f      	b.n	8005af8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	8979      	ldrh	r1, [r7, #10]
 8005aea:	4b4a      	ldr	r3, [pc, #296]	; (8005c14 <HAL_I2C_Mem_Read+0x22c>)
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fb18 	bl	8006128 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	2200      	movs	r2, #0
 8005b00:	2104      	movs	r1, #4
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 f956 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e07c      	b.n	8005c0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d034      	beq.n	8005bb8 <HAL_I2C_Mem_Read+0x1d0>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d130      	bne.n	8005bb8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2180      	movs	r1, #128	; 0x80
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f927 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e04d      	b.n	8005c0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2bff      	cmp	r3, #255	; 0xff
 8005b78:	d90e      	bls.n	8005b98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	22ff      	movs	r2, #255	; 0xff
 8005b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	8979      	ldrh	r1, [r7, #10]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fac9 	bl	8006128 <I2C_TransferConfig>
 8005b96:	e00f      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	8979      	ldrh	r1, [r7, #10]
 8005baa:	2300      	movs	r3, #0
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fab8 	bl	8006128 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d19a      	bne.n	8005af8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f98a 	bl	8005ee0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e01a      	b.n	8005c0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6859      	ldr	r1, [r3, #4]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_I2C_Mem_Read+0x230>)
 8005bea:	400b      	ands	r3, r1
 8005bec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e000      	b.n	8005c0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c0a:	2302      	movs	r3, #2
  }
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	80002400 	.word	0x80002400
 8005c18:	fe00e800 	.word	0xfe00e800

08005c1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	4608      	mov	r0, r1
 8005c26:	4611      	mov	r1, r2
 8005c28:	461a      	mov	r2, r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	817b      	strh	r3, [r7, #10]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	813b      	strh	r3, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	8979      	ldrh	r1, [r7, #10]
 8005c3c:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <I2C_RequestMemoryWrite+0xa4>)
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fa6f 	bl	8006128 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	69b9      	ldr	r1, [r7, #24]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f8ff 	bl	8005e52 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e02c      	b.n	8005cb8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d105      	bne.n	8005c70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c64:	893b      	ldrh	r3, [r7, #8]
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8005c6e:	e015      	b.n	8005c9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c70:	893b      	ldrh	r3, [r7, #8]
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	69b9      	ldr	r1, [r7, #24]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f8e5 	bl	8005e52 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e012      	b.n	8005cb8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c92:	893b      	ldrh	r3, [r7, #8]
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2180      	movs	r1, #128	; 0x80
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f884 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	80002000 	.word	0x80002000

08005cc4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	4608      	mov	r0, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	817b      	strh	r3, [r7, #10]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	813b      	strh	r3, [r7, #8]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	8979      	ldrh	r1, [r7, #10]
 8005ce4:	4b20      	ldr	r3, [pc, #128]	; (8005d68 <I2C_RequestMemoryRead+0xa4>)
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fa1c 	bl	8006128 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	69b9      	ldr	r1, [r7, #24]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f8ac 	bl	8005e52 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e02c      	b.n	8005d5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d04:	88fb      	ldrh	r3, [r7, #6]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d105      	bne.n	8005d16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d0a:	893b      	ldrh	r3, [r7, #8]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28
 8005d14:	e015      	b.n	8005d42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d16:	893b      	ldrh	r3, [r7, #8]
 8005d18:	0a1b      	lsrs	r3, r3, #8
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	69b9      	ldr	r1, [r7, #24]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f892 	bl	8005e52 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e012      	b.n	8005d5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d38:	893b      	ldrh	r3, [r7, #8]
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2140      	movs	r1, #64	; 0x40
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f831 	bl	8005db4 <I2C_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	80002000 	.word	0x80002000

08005d6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d103      	bne.n	8005d8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d007      	beq.n	8005da8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	619a      	str	r2, [r3, #24]
  }
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dc4:	e031      	b.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d02d      	beq.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dce:	f7fb fafd 	bl	80013cc <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d122      	bne.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	bf0c      	ite	eq
 8005df4:	2301      	moveq	r3, #1
 8005df6:	2300      	movne	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d113      	bne.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	f043 0220 	orr.w	r2, r3, #32
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e00f      	b.n	8005e4a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4013      	ands	r3, r2
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d0be      	beq.n	8005dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e5e:	e033      	b.n	8005ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f87f 	bl	8005f68 <I2C_IsErrorOccurred>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e031      	b.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d025      	beq.n	8005ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7c:	f7fb faa6 	bl	80013cc <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d302      	bcc.n	8005e92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d11a      	bne.n	8005ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d013      	beq.n	8005ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea4:	f043 0220 	orr.w	r2, r3, #32
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e007      	b.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d1c4      	bne.n	8005e60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eec:	e02f      	b.n	8005f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f838 	bl	8005f68 <I2C_IsErrorOccurred>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e02d      	b.n	8005f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f02:	f7fb fa63 	bl	80013cc <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d302      	bcc.n	8005f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d11a      	bne.n	8005f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d013      	beq.n	8005f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e007      	b.n	8005f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d1c8      	bne.n	8005eee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d068      	beq.n	8006066 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2210      	movs	r2, #16
 8005f9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f9c:	e049      	b.n	8006032 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d045      	beq.n	8006032 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fa6:	f7fb fa11 	bl	80013cc <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d302      	bcc.n	8005fbc <I2C_IsErrorOccurred+0x54>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d13a      	bne.n	8006032 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fde:	d121      	bne.n	8006024 <I2C_IsErrorOccurred+0xbc>
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fe6:	d01d      	beq.n	8006024 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005fe8:	7cfb      	ldrb	r3, [r7, #19]
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d01a      	beq.n	8006024 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ffc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ffe:	f7fb f9e5 	bl	80013cc <HAL_GetTick>
 8006002:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006004:	e00e      	b.n	8006024 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006006:	f7fb f9e1 	bl	80013cc <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b19      	cmp	r3, #25
 8006012:	d907      	bls.n	8006024 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	f043 0320 	orr.w	r3, r3, #32
 800601a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006022:	e006      	b.n	8006032 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b20      	cmp	r3, #32
 8006030:	d1e9      	bne.n	8006006 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b20      	cmp	r3, #32
 800603e:	d003      	beq.n	8006048 <I2C_IsErrorOccurred+0xe0>
 8006040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0aa      	beq.n	8005f9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800604c:	2b00      	cmp	r3, #0
 800604e:	d103      	bne.n	8006058 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2220      	movs	r2, #32
 8006056:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	f043 0304 	orr.w	r3, r3, #4
 800605e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006088:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00b      	beq.n	80060b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	f043 0308 	orr.w	r3, r3, #8
 80060a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	f043 0302 	orr.w	r3, r3, #2
 80060c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80060d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01c      	beq.n	8006116 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff fe45 	bl	8005d6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6859      	ldr	r1, [r3, #4]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <I2C_IsErrorOccurred+0x1bc>)
 80060ee:	400b      	ands	r3, r1
 80060f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	431a      	orrs	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800611a:	4618      	mov	r0, r3
 800611c:	3728      	adds	r7, #40	; 0x28
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	fe00e800 	.word	0xfe00e800

08006128 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	460b      	mov	r3, r1
 8006134:	817b      	strh	r3, [r7, #10]
 8006136:	4613      	mov	r3, r2
 8006138:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800613a:	897b      	ldrh	r3, [r7, #10]
 800613c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006140:	7a7b      	ldrb	r3, [r7, #9]
 8006142:	041b      	lsls	r3, r3, #16
 8006144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006148:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	4313      	orrs	r3, r2
 8006152:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006156:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	0d5b      	lsrs	r3, r3, #21
 8006162:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006166:	4b08      	ldr	r3, [pc, #32]	; (8006188 <I2C_TransferConfig+0x60>)
 8006168:	430b      	orrs	r3, r1
 800616a:	43db      	mvns	r3, r3
 800616c:	ea02 0103 	and.w	r1, r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	03ff63ff 	.word	0x03ff63ff

0800618c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d138      	bne.n	8006214 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e032      	b.n	8006216 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2224      	movs	r2, #36	; 0x24
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6819      	ldr	r1, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	e000      	b.n	8006216 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006214:	2302      	movs	r3, #2
  }
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b20      	cmp	r3, #32
 8006236:	d139      	bne.n	80062ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006242:	2302      	movs	r3, #2
 8006244:	e033      	b.n	80062ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2224      	movs	r2, #36	; 0x24
 8006252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006274:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e000      	b.n	80062ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062ac:	2302      	movs	r3, #2
  }
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80062ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062bc:	b08f      	sub	sp, #60	; 0x3c
 80062be:	af0a      	add	r7, sp, #40	; 0x28
 80062c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e116      	b.n	80064fa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f012 fcb6 	bl	8018c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2203      	movs	r2, #3
 80062f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f008 f8ff 	bl	800e50e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	603b      	str	r3, [r7, #0]
 8006316:	687e      	ldr	r6, [r7, #4]
 8006318:	466d      	mov	r5, sp
 800631a:	f106 0410 	add.w	r4, r6, #16
 800631e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006326:	e894 0003 	ldmia.w	r4, {r0, r1}
 800632a:	e885 0003 	stmia.w	r5, {r0, r1}
 800632e:	1d33      	adds	r3, r6, #4
 8006330:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006332:	6838      	ldr	r0, [r7, #0]
 8006334:	f007 ffca 	bl	800e2cc <USB_CoreInit>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2202      	movs	r2, #2
 8006342:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e0d7      	b.n	80064fa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f008 f8ed 	bl	800e530 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006356:	2300      	movs	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]
 800635a:	e04a      	b.n	80063f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800635c:	7bfa      	ldrb	r2, [r7, #15]
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	4613      	mov	r3, r2
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	333d      	adds	r3, #61	; 0x3d
 800636c:	2201      	movs	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006370:	7bfa      	ldrb	r2, [r7, #15]
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4613      	mov	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	333c      	adds	r3, #60	; 0x3c
 8006380:	7bfa      	ldrb	r2, [r7, #15]
 8006382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006384:	7bfa      	ldrb	r2, [r7, #15]
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	b298      	uxth	r0, r3
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4613      	mov	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	3356      	adds	r3, #86	; 0x56
 8006398:	4602      	mov	r2, r0
 800639a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800639c:	7bfa      	ldrb	r2, [r7, #15]
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	3340      	adds	r3, #64	; 0x40
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	3344      	adds	r3, #68	; 0x44
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063c4:	7bfa      	ldrb	r2, [r7, #15]
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	4613      	mov	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	3348      	adds	r3, #72	; 0x48
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80063d8:	7bfa      	ldrb	r2, [r7, #15]
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	4613      	mov	r3, r2
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	440b      	add	r3, r1
 80063e6:	334c      	adds	r3, #76	; 0x4c
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	3301      	adds	r3, #1
 80063f0:	73fb      	strb	r3, [r7, #15]
 80063f2:	7bfa      	ldrb	r2, [r7, #15]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d3af      	bcc.n	800635c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063fc:	2300      	movs	r3, #0
 80063fe:	73fb      	strb	r3, [r7, #15]
 8006400:	e044      	b.n	800648c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006402:	7bfa      	ldrb	r2, [r7, #15]
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006418:	7bfa      	ldrb	r2, [r7, #15]
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	4613      	mov	r3, r2
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	4413      	add	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800642a:	7bfa      	ldrb	r2, [r7, #15]
 800642c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800642e:	7bfa      	ldrb	r2, [r7, #15]
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	440b      	add	r3, r1
 800643c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006444:	7bfa      	ldrb	r2, [r7, #15]
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800645a:	7bfa      	ldrb	r2, [r7, #15]
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006470:	7bfa      	ldrb	r2, [r7, #15]
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	440b      	add	r3, r1
 800647e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	3301      	adds	r3, #1
 800648a:	73fb      	strb	r3, [r7, #15]
 800648c:	7bfa      	ldrb	r2, [r7, #15]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	429a      	cmp	r2, r3
 8006494:	d3b5      	bcc.n	8006402 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	687e      	ldr	r6, [r7, #4]
 800649e:	466d      	mov	r5, sp
 80064a0:	f106 0410 	add.w	r4, r6, #16
 80064a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80064b4:	1d33      	adds	r3, r6, #4
 80064b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064b8:	6838      	ldr	r0, [r7, #0]
 80064ba:	f008 f885 	bl	800e5c8 <USB_DevInit>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e014      	b.n	80064fa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d102      	bne.n	80064ee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f001 f99d 	bl	8007828 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f009 f8c7 	bl	800f686 <USB_DevDisconnect>

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006502 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_PCD_Start+0x1c>
 800651a:	2302      	movs	r3, #2
 800651c:	e022      	b.n	8006564 <HAL_PCD_Start+0x62>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006536:	2b01      	cmp	r3, #1
 8006538:	d105      	bne.n	8006546 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4618      	mov	r0, r3
 800654c:	f007 ffce 	bl	800e4ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4618      	mov	r0, r3
 8006556:	f009 f875 	bl	800f644 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800656c:	b590      	push	{r4, r7, lr}
 800656e:	b08d      	sub	sp, #52	; 0x34
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f009 f933 	bl	800f7ee <USB_GetMode>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	f040 84b7 	bne.w	8006efe <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f009 f897 	bl	800f6c8 <USB_ReadInterrupts>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 84ad 	beq.w	8006efc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	0a1b      	lsrs	r3, r3, #8
 80065ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f009 f884 	bl	800f6c8 <USB_ReadInterrupts>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d107      	bne.n	80065da <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695a      	ldr	r2, [r3, #20]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f002 0202 	and.w	r2, r2, #2
 80065d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f009 f872 	bl	800f6c8 <USB_ReadInterrupts>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d161      	bne.n	80066b2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0210 	bic.w	r2, r2, #16
 80065fc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f003 020f 	and.w	r2, r3, #15
 800660a:	4613      	mov	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4413      	add	r3, r2
 800661a:	3304      	adds	r3, #4
 800661c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	0c5b      	lsrs	r3, r3, #17
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	2b02      	cmp	r3, #2
 8006628:	d124      	bne.n	8006674 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d035      	beq.n	80066a2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	091b      	lsrs	r3, r3, #4
 800663e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006644:	b29b      	uxth	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	6a38      	ldr	r0, [r7, #32]
 800664a:	f008 fea9 	bl	800f3a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	091b      	lsrs	r3, r3, #4
 8006656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800665a:	441a      	add	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	695a      	ldr	r2, [r3, #20]
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	091b      	lsrs	r3, r3, #4
 8006668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800666c:	441a      	add	r2, r3
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	615a      	str	r2, [r3, #20]
 8006672:	e016      	b.n	80066a2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	0c5b      	lsrs	r3, r3, #17
 8006678:	f003 030f 	and.w	r3, r3, #15
 800667c:	2b06      	cmp	r3, #6
 800667e:	d110      	bne.n	80066a2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006686:	2208      	movs	r2, #8
 8006688:	4619      	mov	r1, r3
 800668a:	6a38      	ldr	r0, [r7, #32]
 800668c:	f008 fe88 	bl	800f3a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	091b      	lsrs	r3, r3, #4
 8006698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800669c:	441a      	add	r2, r3
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	699a      	ldr	r2, [r3, #24]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0210 	orr.w	r2, r2, #16
 80066b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f009 f806 	bl	800f6c8 <USB_ReadInterrupts>
 80066bc:	4603      	mov	r3, r0
 80066be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066c6:	f040 80a7 	bne.w	8006818 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f009 f80b 	bl	800f6ee <USB_ReadDevAllOutEpInterrupt>
 80066d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80066da:	e099      	b.n	8006810 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 808e 	beq.w	8006804 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	4611      	mov	r1, r2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f009 f82f 	bl	800f756 <USB_ReadDevOutEPInterrupt>
 80066f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00c      	beq.n	800671e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006710:	461a      	mov	r2, r3
 8006712:	2301      	movs	r3, #1
 8006714:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 feff 	bl	800751c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00c      	beq.n	8006742 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006734:	461a      	mov	r2, r3
 8006736:	2308      	movs	r3, #8
 8006738:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800673a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 ffd5 	bl	80076ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	d008      	beq.n	800675e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	461a      	mov	r2, r3
 800675a:	2310      	movs	r3, #16
 800675c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d030      	beq.n	80067ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006770:	2b80      	cmp	r3, #128	; 0x80
 8006772:	d109      	bne.n	8006788 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006786:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678a:	4613      	mov	r3, r2
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	4413      	add	r3, r2
 800679a:	3304      	adds	r3, #4
 800679c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	78db      	ldrb	r3, [r3, #3]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d108      	bne.n	80067b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2200      	movs	r2, #0
 80067aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f012 fb76 	bl	8018ea4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	461a      	mov	r2, r3
 80067c6:	2302      	movs	r3, #2
 80067c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e0:	461a      	mov	r2, r3
 80067e2:	2320      	movs	r3, #32
 80067e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d009      	beq.n	8006804 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fc:	461a      	mov	r2, r3
 80067fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006802:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	3301      	adds	r3, #1
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006812:	2b00      	cmp	r3, #0
 8006814:	f47f af62 	bne.w	80066dc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f008 ff53 	bl	800f6c8 <USB_ReadInterrupts>
 8006822:	4603      	mov	r3, r0
 8006824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800682c:	f040 80db 	bne.w	80069e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f008 ff74 	bl	800f722 <USB_ReadDevAllInEpInterrupt>
 800683a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006840:	e0cd      	b.n	80069de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80c2 	beq.w	80069d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	4611      	mov	r1, r2
 8006858:	4618      	mov	r0, r3
 800685a:	f008 ff9a 	bl	800f792 <USB_ReadDevInEPInterrupt>
 800685e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d057      	beq.n	800691a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	2201      	movs	r2, #1
 8006872:	fa02 f303 	lsl.w	r3, r2, r3
 8006876:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	43db      	mvns	r3, r3
 8006884:	69f9      	ldr	r1, [r7, #28]
 8006886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800688a:	4013      	ands	r3, r2
 800688c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689a:	461a      	mov	r2, r3
 800689c:	2301      	movs	r3, #1
 800689e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d132      	bne.n	800690e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	3348      	adds	r3, #72	; 0x48
 80068b8:	6819      	ldr	r1, [r3, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068be:	4613      	mov	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4403      	add	r3, r0
 80068c8:	3344      	adds	r3, #68	; 0x44
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4419      	add	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d2:	4613      	mov	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4403      	add	r3, r0
 80068dc:	3348      	adds	r3, #72	; 0x48
 80068de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d113      	bne.n	800690e <HAL_PCD_IRQHandler+0x3a2>
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ea:	4613      	mov	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	334c      	adds	r3, #76	; 0x4c
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d108      	bne.n	800690e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006906:	461a      	mov	r2, r3
 8006908:	2101      	movs	r1, #1
 800690a:	f008 ffa3 	bl	800f854 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	b2db      	uxtb	r3, r3
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f012 fa40 	bl	8018d9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	461a      	mov	r2, r3
 8006932:	2308      	movs	r3, #8
 8006934:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2b00      	cmp	r3, #0
 800693e:	d008      	beq.n	8006952 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694c:	461a      	mov	r2, r3
 800694e:	2310      	movs	r3, #16
 8006950:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d008      	beq.n	800696e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	461a      	mov	r2, r3
 800696a:	2340      	movs	r3, #64	; 0x40
 800696c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d023      	beq.n	80069c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800697a:	6a38      	ldr	r0, [r7, #32]
 800697c:	f007 ff82 	bl	800e884 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	4613      	mov	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	3338      	adds	r3, #56	; 0x38
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	4413      	add	r3, r2
 8006990:	3304      	adds	r3, #4
 8006992:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	78db      	ldrb	r3, [r3, #3]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d108      	bne.n	80069ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2200      	movs	r2, #0
 80069a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f012 fa8d 	bl	8018ec8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ba:	461a      	mov	r2, r3
 80069bc:	2302      	movs	r3, #2
 80069be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80069ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fd17 	bl	8007400 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	3301      	adds	r3, #1
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	085b      	lsrs	r3, r3, #1
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f47f af2e 	bne.w	8006842 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f008 fe6c 	bl	800f6c8 <USB_ReadInterrupts>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fa:	d122      	bne.n	8006a42 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a0a:	f023 0301 	bic.w	r3, r3, #1
 8006a0e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d108      	bne.n	8006a2c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006a22:	2100      	movs	r1, #0
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 ff23 	bl	8007870 <HAL_PCDEx_LPM_Callback>
 8006a2a:	e002      	b.n	8006a32 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f012 fa2b 	bl	8018e88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695a      	ldr	r2, [r3, #20]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f008 fe3e 	bl	800f6c8 <USB_ReadInterrupts>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a56:	d112      	bne.n	8006a7e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d102      	bne.n	8006a6e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f012 f9e7 	bl	8018e3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695a      	ldr	r2, [r3, #20]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f008 fe20 	bl	800f6c8 <USB_ReadInterrupts>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a92:	d121      	bne.n	8006ad8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006aa2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d111      	bne.n	8006ad2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abc:	089b      	lsrs	r3, r3, #2
 8006abe:	f003 020f 	and.w	r2, r3, #15
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006ac8:	2101      	movs	r1, #1
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fed0 	bl	8007870 <HAL_PCDEx_LPM_Callback>
 8006ad0:	e002      	b.n	8006ad8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f012 f9b2 	bl	8018e3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f008 fdf3 	bl	800f6c8 <USB_ReadInterrupts>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aec:	f040 80b7 	bne.w	8006c5e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	69fa      	ldr	r2, [r7, #28]
 8006afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2110      	movs	r1, #16
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f007 feba 	bl	800e884 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b10:	2300      	movs	r3, #0
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b14:	e046      	b.n	8006ba4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b22:	461a      	mov	r2, r3
 8006b24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b56:	461a      	mov	r2, r3
 8006b58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b5c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	69fa      	ldr	r2, [r7, #28]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b9c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d3b3      	bcc.n	8006b16 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bbc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006bc0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bda:	f043 030b 	orr.w	r3, r3, #11
 8006bde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bf0:	f043 030b 	orr.w	r3, r3, #11
 8006bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8006bf6:	e015      	b.n	8006c24 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfe:	695a      	ldr	r2, [r3, #20]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c06:	4619      	mov	r1, r3
 8006c08:	f242 032b 	movw	r3, #8235	; 0x202b
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c1e:	f043 030b 	orr.w	r3, r3, #11
 8006c22:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c36:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f008 fe03 	bl	800f854 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f008 fd30 	bl	800f6c8 <USB_ReadInterrupts>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c72:	d124      	bne.n	8006cbe <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f008 fdc7 	bl	800f80c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f007 fe7b 	bl	800e97e <USB_GetDevSpeed>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681c      	ldr	r4, [r3, #0]
 8006c94:	f001 fe36 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 8006c98:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f007 fb80 	bl	800e3a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f012 f89e 	bl	8018dea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695a      	ldr	r2, [r3, #20]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f008 fd00 	bl	800f6c8 <USB_ReadInterrupts>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b08      	cmp	r3, #8
 8006cd0:	d10a      	bne.n	8006ce8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f012 f87b 	bl	8018dce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695a      	ldr	r2, [r3, #20]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f002 0208 	and.w	r2, r2, #8
 8006ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f008 fceb 	bl	800f6c8 <USB_ReadInterrupts>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf8:	2b80      	cmp	r3, #128	; 0x80
 8006cfa:	d122      	bne.n	8006d42 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d08:	2301      	movs	r3, #1
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0c:	e014      	b.n	8006d38 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d12:	4613      	mov	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d105      	bne.n	8006d32 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fb09 	bl	8007344 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	3301      	adds	r3, #1
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d3e5      	bcc.n	8006d0e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f008 fcbe 	bl	800f6c8 <USB_ReadInterrupts>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d56:	d13b      	bne.n	8006dd0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d58:	2301      	movs	r3, #1
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5c:	e02b      	b.n	8006db6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d72:	4613      	mov	r3, r2
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3340      	adds	r3, #64	; 0x40
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d115      	bne.n	8006db0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006d84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	da12      	bge.n	8006db0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8e:	4613      	mov	r3, r2
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	333f      	adds	r3, #63	; 0x3f
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 faca 	bl	8007344 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	3301      	adds	r3, #1
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d3ce      	bcc.n	8006d5e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695a      	ldr	r2, [r3, #20]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f008 fc77 	bl	800f6c8 <USB_ReadInterrupts>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006de4:	d155      	bne.n	8006e92 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006de6:	2301      	movs	r3, #1
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dea:	e045      	b.n	8006e78 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e00:	4613      	mov	r3, r2
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	440b      	add	r3, r1
 8006e0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d12e      	bne.n	8006e72 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006e14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	da2b      	bge.n	8006e72 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006e26:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d121      	bne.n	8006e72 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e32:	4613      	mov	r3, r2
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	440b      	add	r3, r1
 8006e3c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10a      	bne.n	8006e72 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e6e:	6053      	str	r3, [r2, #4]
            break;
 8006e70:	e007      	b.n	8006e82 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	3301      	adds	r3, #1
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d3b4      	bcc.n	8006dec <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695a      	ldr	r2, [r3, #20]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f008 fc16 	bl	800f6c8 <USB_ReadInterrupts>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea6:	d10a      	bne.n	8006ebe <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f012 f81f 	bl	8018eec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695a      	ldr	r2, [r3, #20]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f008 fc00 	bl	800f6c8 <USB_ReadInterrupts>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d115      	bne.n	8006efe <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f012 f80f 	bl	8018f08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6859      	ldr	r1, [r3, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
 8006efa:	e000      	b.n	8006efe <HAL_PCD_IRQHandler+0x992>
      return;
 8006efc:	bf00      	nop
    }
  }
}
 8006efe:	3734      	adds	r7, #52	; 0x34
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd90      	pop	{r4, r7, pc}

08006f04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d101      	bne.n	8006f1e <HAL_PCD_SetAddress+0x1a>
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	e013      	b.n	8006f46 <HAL_PCD_SetAddress+0x42>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	78fa      	ldrb	r2, [r7, #3]
 8006f34:	4611      	mov	r1, r2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f008 fb5e 	bl	800f5f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	4608      	mov	r0, r1
 8006f58:	4611      	mov	r1, r2
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	70fb      	strb	r3, [r7, #3]
 8006f60:	460b      	mov	r3, r1
 8006f62:	803b      	strh	r3, [r7, #0]
 8006f64:	4613      	mov	r3, r2
 8006f66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	da0f      	bge.n	8006f94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	f003 020f 	and.w	r2, r3, #15
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	3338      	adds	r3, #56	; 0x38
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4413      	add	r3, r2
 8006f88:	3304      	adds	r3, #4
 8006f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	705a      	strb	r2, [r3, #1]
 8006f92:	e00f      	b.n	8006fb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	f003 020f 	and.w	r2, r3, #15
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	3304      	adds	r3, #4
 8006fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006fc0:	883a      	ldrh	r2, [r7, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	78ba      	ldrb	r2, [r7, #2]
 8006fca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006fde:	78bb      	ldrb	r3, [r7, #2]
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d102      	bne.n	8006fea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_PCD_EP_Open+0xaa>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e00e      	b.n	8007016 <HAL_PCD_EP_Open+0xc8>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68f9      	ldr	r1, [r7, #12]
 8007006:	4618      	mov	r0, r3
 8007008:	f007 fcde 	bl	800e9c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007014:	7afb      	ldrb	r3, [r7, #11]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800702a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800702e:	2b00      	cmp	r3, #0
 8007030:	da0f      	bge.n	8007052 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	4613      	mov	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	3338      	adds	r3, #56	; 0x38
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	4413      	add	r3, r2
 8007046:	3304      	adds	r3, #4
 8007048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	705a      	strb	r2, [r3, #1]
 8007050:	e00f      	b.n	8007072 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	f003 020f 	and.w	r2, r3, #15
 8007058:	4613      	mov	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4413      	add	r3, r2
 8007068:	3304      	adds	r3, #4
 800706a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	b2da      	uxtb	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_PCD_EP_Close+0x6e>
 8007088:	2302      	movs	r3, #2
 800708a:	e00e      	b.n	80070aa <HAL_PCD_EP_Close+0x8c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68f9      	ldr	r1, [r7, #12]
 800709a:	4618      	mov	r0, r3
 800709c:	f007 fd1c 	bl	800ead8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b086      	sub	sp, #24
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
 80070be:	460b      	mov	r3, r1
 80070c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070c2:	7afb      	ldrb	r3, [r7, #11]
 80070c4:	f003 020f 	and.w	r2, r3, #15
 80070c8:	4613      	mov	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	3304      	adds	r3, #4
 80070da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2200      	movs	r2, #0
 80070ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2200      	movs	r2, #0
 80070f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d102      	bne.n	800710e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	6979      	ldr	r1, [r7, #20]
 800711c:	f007 fdb8 	bl	800ec90 <USB_EPStartXfer>

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	f003 020f 	and.w	r2, r3, #15
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800714c:	681b      	ldr	r3, [r3, #0]
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b086      	sub	sp, #24
 800715e:	af00      	add	r7, sp, #0
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	460b      	mov	r3, r1
 8007168:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800716a:	7afb      	ldrb	r3, [r7, #11]
 800716c:	f003 020f 	and.w	r2, r3, #15
 8007170:	4613      	mov	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	3338      	adds	r3, #56	; 0x38
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	3304      	adds	r3, #4
 8007180:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2201      	movs	r2, #1
 8007198:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800719a:	7afb      	ldrb	r3, [r7, #11]
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d102      	bne.n	80071b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6979      	ldr	r1, [r7, #20]
 80071c2:	f007 fd65 	bl	800ec90 <USB_EPStartXfer>

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	f003 020f 	and.w	r2, r3, #15
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d901      	bls.n	80071ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e050      	b.n	8007290 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80071ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	da0f      	bge.n	8007216 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071f6:	78fb      	ldrb	r3, [r7, #3]
 80071f8:	f003 020f 	and.w	r2, r3, #15
 80071fc:	4613      	mov	r3, r2
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	3338      	adds	r3, #56	; 0x38
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	4413      	add	r3, r2
 800720a:	3304      	adds	r3, #4
 800720c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	705a      	strb	r2, [r3, #1]
 8007214:	e00d      	b.n	8007232 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	4413      	add	r3, r2
 8007228:	3304      	adds	r3, #4
 800722a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007238:	78fb      	ldrb	r3, [r7, #3]
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	b2da      	uxtb	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_PCD_EP_SetStall+0x82>
 800724e:	2302      	movs	r3, #2
 8007250:	e01e      	b.n	8007290 <HAL_PCD_EP_SetStall+0xc0>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	4618      	mov	r0, r3
 8007262:	f008 f8f5 	bl	800f450 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	b2d9      	uxtb	r1, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007280:	461a      	mov	r2, r3
 8007282:	f008 fae7 	bl	800f854 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	f003 020f 	and.w	r2, r3, #15
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d901      	bls.n	80072b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e042      	b.n	800733c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	da0f      	bge.n	80072de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	f003 020f 	and.w	r2, r3, #15
 80072c4:	4613      	mov	r3, r2
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	3338      	adds	r3, #56	; 0x38
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	4413      	add	r3, r2
 80072d2:	3304      	adds	r3, #4
 80072d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	705a      	strb	r2, [r3, #1]
 80072dc:	e00f      	b.n	80072fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	f003 020f 	and.w	r2, r3, #15
 80072e4:	4613      	mov	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	4413      	add	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	4413      	add	r3, r2
 80072f4:	3304      	adds	r3, #4
 80072f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	b2da      	uxtb	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_PCD_EP_ClrStall+0x86>
 800731a:	2302      	movs	r3, #2
 800731c:	e00e      	b.n	800733c <HAL_PCD_EP_ClrStall+0xa4>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68f9      	ldr	r1, [r7, #12]
 800732c:	4618      	mov	r0, r3
 800732e:	f008 f8fd 	bl	800f52c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007354:	2b00      	cmp	r3, #0
 8007356:	da0c      	bge.n	8007372 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	f003 020f 	and.w	r2, r3, #15
 800735e:	4613      	mov	r3, r2
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	3338      	adds	r3, #56	; 0x38
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	3304      	adds	r3, #4
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e00c      	b.n	800738c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	f003 020f 	and.w	r2, r3, #15
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	3304      	adds	r3, #4
 800738a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68f9      	ldr	r1, [r7, #12]
 8007392:	4618      	mov	r0, r3
 8007394:	f007 ff1c 	bl	800f1d0 <USB_EPStopXfer>
 8007398:	4603      	mov	r3, r0
 800739a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800739c:	7afb      	ldrb	r3, [r7, #11]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_PCD_EP_Flush+0x1a>
 80073bc:	2302      	movs	r3, #2
 80073be:	e01b      	b.n	80073f8 <HAL_PCD_EP_Flush+0x52>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 80073c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da09      	bge.n	80073e4 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f007 fa51 	bl	800e884 <USB_FlushTxFifo>
 80073e2:	e004      	b.n	80073ee <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f007 fa7f 	bl	800e8ec <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	; 0x28
 8007404:	af02      	add	r7, sp, #8
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	4613      	mov	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	3338      	adds	r3, #56	; 0x38
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	4413      	add	r3, r2
 8007424:	3304      	adds	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	695a      	ldr	r2, [r3, #20]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	429a      	cmp	r2, r3
 8007432:	d901      	bls.n	8007438 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e06c      	b.n	8007512 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	69fa      	ldr	r2, [r7, #28]
 800744a:	429a      	cmp	r2, r3
 800744c:	d902      	bls.n	8007454 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	3303      	adds	r3, #3
 8007458:	089b      	lsrs	r3, r3, #2
 800745a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800745c:	e02b      	b.n	80074b6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	691a      	ldr	r2, [r3, #16]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	429a      	cmp	r2, r3
 8007472:	d902      	bls.n	800747a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	3303      	adds	r3, #3
 800747e:	089b      	lsrs	r3, r3, #2
 8007480:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	68d9      	ldr	r1, [r3, #12]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	b2da      	uxtb	r2, r3
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007492:	b2db      	uxtb	r3, r3
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	4603      	mov	r3, r0
 8007498:	6978      	ldr	r0, [r7, #20]
 800749a:	f007 ff43 	bl	800f324 <USB_WritePacket>

    ep->xfer_buff  += len;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	441a      	add	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	695a      	ldr	r2, [r3, #20]
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	441a      	add	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d809      	bhi.n	80074e0 <PCD_WriteEmptyTxFifo+0xe0>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	695a      	ldr	r2, [r3, #20]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d203      	bcs.n	80074e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1be      	bne.n	800745e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d811      	bhi.n	8007510 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	2201      	movs	r2, #1
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	43db      	mvns	r3, r3
 8007506:	6939      	ldr	r1, [r7, #16]
 8007508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800750c:	4013      	ands	r3, r2
 800750e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3720      	adds	r7, #32
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	333c      	adds	r3, #60	; 0x3c
 8007534:	3304      	adds	r3, #4
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d17b      	bne.n	800764a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d015      	beq.n	8007588 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	4a61      	ldr	r2, [pc, #388]	; (80076e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	f240 80b9 	bls.w	80076d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80b3 	beq.w	80076d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757e:	461a      	mov	r2, r3
 8007580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007584:	6093      	str	r3, [r2, #8]
 8007586:	e0a7      	b.n	80076d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d009      	beq.n	80075a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759e:	461a      	mov	r2, r3
 80075a0:	2320      	movs	r3, #32
 80075a2:	6093      	str	r3, [r2, #8]
 80075a4:	e098      	b.n	80076d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f040 8093 	bne.w	80076d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	4a4b      	ldr	r2, [pc, #300]	; (80076e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d90f      	bls.n	80075da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d0:	461a      	mov	r2, r3
 80075d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075d6:	6093      	str	r3, [r2, #8]
 80075d8:	e07e      	b.n	80076d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	4413      	add	r3, r2
 80075ec:	3304      	adds	r3, #4
 80075ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a1a      	ldr	r2, [r3, #32]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	0159      	lsls	r1, r3, #5
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	440b      	add	r3, r1
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007606:	1ad2      	subs	r2, r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d114      	bne.n	800763c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007624:	461a      	mov	r2, r3
 8007626:	2101      	movs	r1, #1
 8007628:	f008 f914 	bl	800f854 <USB_EP0_OutStart>
 800762c:	e006      	b.n	800763c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	441a      	add	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	b2db      	uxtb	r3, r3
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f011 fb8e 	bl	8018d64 <HAL_PCD_DataOutStageCallback>
 8007648:	e046      	b.n	80076d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	4a26      	ldr	r2, [pc, #152]	; (80076e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d124      	bne.n	800769c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007668:	461a      	mov	r2, r3
 800766a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766e:	6093      	str	r3, [r2, #8]
 8007670:	e032      	b.n	80076d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b00      	cmp	r3, #0
 800767a:	d008      	beq.n	800768e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007688:	461a      	mov	r2, r3
 800768a:	2320      	movs	r3, #32
 800768c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f011 fb65 	bl	8018d64 <HAL_PCD_DataOutStageCallback>
 800769a:	e01d      	b.n	80076d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d114      	bne.n	80076cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	4613      	mov	r3, r2
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d108      	bne.n	80076cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076c4:	461a      	mov	r2, r3
 80076c6:	2100      	movs	r1, #0
 80076c8:	f008 f8c4 	bl	800f854 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f011 fb46 	bl	8018d64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3720      	adds	r7, #32
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	4f54300a 	.word	0x4f54300a
 80076e8:	4f54310a 	.word	0x4f54310a

080076ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	333c      	adds	r3, #60	; 0x3c
 8007704:	3304      	adds	r3, #4
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4a15      	ldr	r2, [pc, #84]	; (8007774 <PCD_EP_OutSetupPacket_int+0x88>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d90e      	bls.n	8007740 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007728:	2b00      	cmp	r3, #0
 800772a:	d009      	beq.n	8007740 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007738:	461a      	mov	r2, r3
 800773a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800773e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f011 fafd 	bl	8018d40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4a0a      	ldr	r2, [pc, #40]	; (8007774 <PCD_EP_OutSetupPacket_int+0x88>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d90c      	bls.n	8007768 <PCD_EP_OutSetupPacket_int+0x7c>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d108      	bne.n	8007768 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007760:	461a      	mov	r2, r3
 8007762:	2101      	movs	r1, #1
 8007764:	f008 f876 	bl	800f854 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	4f54300a 	.word	0x4f54300a

08007778 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	70fb      	strb	r3, [r7, #3]
 8007784:	4613      	mov	r3, r2
 8007786:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d107      	bne.n	80077a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007796:	883b      	ldrh	r3, [r7, #0]
 8007798:	0419      	lsls	r1, r3, #16
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	629a      	str	r2, [r3, #40]	; 0x28
 80077a4:	e028      	b.n	80077f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ac:	0c1b      	lsrs	r3, r3, #16
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80077b4:	2300      	movs	r3, #0
 80077b6:	73fb      	strb	r3, [r7, #15]
 80077b8:	e00d      	b.n	80077d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	3340      	adds	r3, #64	; 0x40
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	0c1b      	lsrs	r3, r3, #16
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	4413      	add	r3, r2
 80077ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	3301      	adds	r3, #1
 80077d4:	73fb      	strb	r3, [r7, #15]
 80077d6:	7bfa      	ldrb	r2, [r7, #15]
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	3b01      	subs	r3, #1
 80077dc:	429a      	cmp	r2, r3
 80077de:	d3ec      	bcc.n	80077ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80077e0:	883b      	ldrh	r3, [r7, #0]
 80077e2:	0418      	lsls	r0, r3, #16
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6819      	ldr	r1, [r3, #0]
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	4302      	orrs	r2, r0
 80077f0:	3340      	adds	r3, #64	; 0x40
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	460b      	mov	r3, r1
 8007810:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	887a      	ldrh	r2, [r7, #2]
 8007818:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <HAL_PCDEx_ActivateLPM+0x44>)
 8007858:	4313      	orrs	r3, r2
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	10000003 	.word	0x10000003

08007870 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007890:	4b19      	ldr	r3, [pc, #100]	; (80078f8 <HAL_PWREx_ConfigSupply+0x70>)
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b04      	cmp	r3, #4
 800789a:	d00a      	beq.n	80078b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800789c:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <HAL_PWREx_ConfigSupply+0x70>)
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0307 	and.w	r3, r3, #7
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d001      	beq.n	80078ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e01f      	b.n	80078ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e01d      	b.n	80078ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80078b2:	4b11      	ldr	r3, [pc, #68]	; (80078f8 <HAL_PWREx_ConfigSupply+0x70>)
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f023 0207 	bic.w	r2, r3, #7
 80078ba:	490f      	ldr	r1, [pc, #60]	; (80078f8 <HAL_PWREx_ConfigSupply+0x70>)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80078c2:	f7f9 fd83 	bl	80013cc <HAL_GetTick>
 80078c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078c8:	e009      	b.n	80078de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078ca:	f7f9 fd7f 	bl	80013cc <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078d8:	d901      	bls.n	80078de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e007      	b.n	80078ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078de:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <HAL_PWREx_ConfigSupply+0x70>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ea:	d1ee      	bne.n	80078ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	58024800 	.word	0x58024800

080078fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4a04      	ldr	r2, [pc, #16]	; (8007918 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800790a:	60d3      	str	r3, [r2, #12]
}
 800790c:	bf00      	nop
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	58024800 	.word	0x58024800

0800791c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08c      	sub	sp, #48	; 0x30
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d102      	bne.n	8007930 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	f000 bc48 	b.w	80081c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 8088 	beq.w	8007a4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800793e:	4b99      	ldr	r3, [pc, #612]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007948:	4b96      	ldr	r3, [pc, #600]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	2b10      	cmp	r3, #16
 8007952:	d007      	beq.n	8007964 <HAL_RCC_OscConfig+0x48>
 8007954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007956:	2b18      	cmp	r3, #24
 8007958:	d111      	bne.n	800797e <HAL_RCC_OscConfig+0x62>
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	f003 0303 	and.w	r3, r3, #3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d10c      	bne.n	800797e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007964:	4b8f      	ldr	r3, [pc, #572]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d06d      	beq.n	8007a4c <HAL_RCC_OscConfig+0x130>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d169      	bne.n	8007a4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f000 bc21 	b.w	80081c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007986:	d106      	bne.n	8007996 <HAL_RCC_OscConfig+0x7a>
 8007988:	4b86      	ldr	r3, [pc, #536]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a85      	ldr	r2, [pc, #532]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 800798e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	e02e      	b.n	80079f4 <HAL_RCC_OscConfig+0xd8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10c      	bne.n	80079b8 <HAL_RCC_OscConfig+0x9c>
 800799e:	4b81      	ldr	r3, [pc, #516]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a80      	ldr	r2, [pc, #512]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	4b7e      	ldr	r3, [pc, #504]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a7d      	ldr	r2, [pc, #500]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	e01d      	b.n	80079f4 <HAL_RCC_OscConfig+0xd8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079c0:	d10c      	bne.n	80079dc <HAL_RCC_OscConfig+0xc0>
 80079c2:	4b78      	ldr	r3, [pc, #480]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a77      	ldr	r2, [pc, #476]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	4b75      	ldr	r3, [pc, #468]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a74      	ldr	r2, [pc, #464]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	e00b      	b.n	80079f4 <HAL_RCC_OscConfig+0xd8>
 80079dc:	4b71      	ldr	r3, [pc, #452]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a70      	ldr	r2, [pc, #448]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	4b6e      	ldr	r3, [pc, #440]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a6d      	ldr	r2, [pc, #436]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 80079ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d013      	beq.n	8007a24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fc:	f7f9 fce6 	bl	80013cc <HAL_GetTick>
 8007a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a04:	f7f9 fce2 	bl	80013cc <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b64      	cmp	r3, #100	; 0x64
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e3d4      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a16:	4b63      	ldr	r3, [pc, #396]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0f0      	beq.n	8007a04 <HAL_RCC_OscConfig+0xe8>
 8007a22:	e014      	b.n	8007a4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a24:	f7f9 fcd2 	bl	80013cc <HAL_GetTick>
 8007a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a2c:	f7f9 fcce 	bl	80013cc <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b64      	cmp	r3, #100	; 0x64
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e3c0      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a3e:	4b59      	ldr	r3, [pc, #356]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1f0      	bne.n	8007a2c <HAL_RCC_OscConfig+0x110>
 8007a4a:	e000      	b.n	8007a4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 80ca 	beq.w	8007bf0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a5c:	4b51      	ldr	r3, [pc, #324]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a66:	4b4f      	ldr	r3, [pc, #316]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <HAL_RCC_OscConfig+0x166>
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	2b18      	cmp	r3, #24
 8007a76:	d156      	bne.n	8007b26 <HAL_RCC_OscConfig+0x20a>
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d151      	bne.n	8007b26 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a82:	4b48      	ldr	r3, [pc, #288]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <HAL_RCC_OscConfig+0x17e>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e392      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a9a:	4b42      	ldr	r3, [pc, #264]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f023 0219 	bic.w	r2, r3, #25
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	493f      	ldr	r1, [pc, #252]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aac:	f7f9 fc8e 	bl	80013cc <HAL_GetTick>
 8007ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ab2:	e008      	b.n	8007ac6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ab4:	f7f9 fc8a 	bl	80013cc <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e37c      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ac6:	4b37      	ldr	r3, [pc, #220]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0f0      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ad2:	f7f9 fcab 	bl	800142c <HAL_GetREVID>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f241 0203 	movw	r2, #4099	; 0x1003
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d817      	bhi.n	8007b10 <HAL_RCC_OscConfig+0x1f4>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b40      	cmp	r3, #64	; 0x40
 8007ae6:	d108      	bne.n	8007afa <HAL_RCC_OscConfig+0x1de>
 8007ae8:	4b2e      	ldr	r3, [pc, #184]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007af0:	4a2c      	ldr	r2, [pc, #176]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007af8:	e07a      	b.n	8007bf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afa:	4b2a      	ldr	r3, [pc, #168]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	031b      	lsls	r3, r3, #12
 8007b08:	4926      	ldr	r1, [pc, #152]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b0e:	e06f      	b.n	8007bf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b10:	4b24      	ldr	r3, [pc, #144]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	061b      	lsls	r3, r3, #24
 8007b1e:	4921      	ldr	r1, [pc, #132]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b24:	e064      	b.n	8007bf0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d047      	beq.n	8007bbe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f023 0219 	bic.w	r2, r3, #25
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	491a      	ldr	r1, [pc, #104]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b40:	f7f9 fc44 	bl	80013cc <HAL_GetTick>
 8007b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b46:	e008      	b.n	8007b5a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b48:	f7f9 fc40 	bl	80013cc <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d901      	bls.n	8007b5a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e332      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b5a:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0304 	and.w	r3, r3, #4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0f0      	beq.n	8007b48 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b66:	f7f9 fc61 	bl	800142c <HAL_GetREVID>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d819      	bhi.n	8007ba8 <HAL_RCC_OscConfig+0x28c>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	2b40      	cmp	r3, #64	; 0x40
 8007b7a:	d108      	bne.n	8007b8e <HAL_RCC_OscConfig+0x272>
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b84:	4a07      	ldr	r2, [pc, #28]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b8a:	6053      	str	r3, [r2, #4]
 8007b8c:	e030      	b.n	8007bf0 <HAL_RCC_OscConfig+0x2d4>
 8007b8e:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	031b      	lsls	r3, r3, #12
 8007b9c:	4901      	ldr	r1, [pc, #4]	; (8007ba4 <HAL_RCC_OscConfig+0x288>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	604b      	str	r3, [r1, #4]
 8007ba2:	e025      	b.n	8007bf0 <HAL_RCC_OscConfig+0x2d4>
 8007ba4:	58024400 	.word	0x58024400
 8007ba8:	4b9a      	ldr	r3, [pc, #616]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	061b      	lsls	r3, r3, #24
 8007bb6:	4997      	ldr	r1, [pc, #604]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	604b      	str	r3, [r1, #4]
 8007bbc:	e018      	b.n	8007bf0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bbe:	4b95      	ldr	r3, [pc, #596]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a94      	ldr	r2, [pc, #592]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bca:	f7f9 fbff 	bl	80013cc <HAL_GetTick>
 8007bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bd0:	e008      	b.n	8007be4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bd2:	f7f9 fbfb 	bl	80013cc <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d901      	bls.n	8007be4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e2ed      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007be4:	4b8b      	ldr	r3, [pc, #556]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1f0      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 80a9 	beq.w	8007d50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bfe:	4b85      	ldr	r3, [pc, #532]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c08:	4b82      	ldr	r3, [pc, #520]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d007      	beq.n	8007c24 <HAL_RCC_OscConfig+0x308>
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	2b18      	cmp	r3, #24
 8007c18:	d13a      	bne.n	8007c90 <HAL_RCC_OscConfig+0x374>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d135      	bne.n	8007c90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c24:	4b7b      	ldr	r3, [pc, #492]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <HAL_RCC_OscConfig+0x320>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	2b80      	cmp	r3, #128	; 0x80
 8007c36:	d001      	beq.n	8007c3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e2c1      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c3c:	f7f9 fbf6 	bl	800142c <HAL_GetREVID>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d817      	bhi.n	8007c7a <HAL_RCC_OscConfig+0x35e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d108      	bne.n	8007c64 <HAL_RCC_OscConfig+0x348>
 8007c52:	4b70      	ldr	r3, [pc, #448]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007c5a:	4a6e      	ldr	r2, [pc, #440]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c60:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c62:	e075      	b.n	8007d50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c64:	4b6b      	ldr	r3, [pc, #428]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	069b      	lsls	r3, r3, #26
 8007c72:	4968      	ldr	r1, [pc, #416]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c78:	e06a      	b.n	8007d50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c7a:	4b66      	ldr	r3, [pc, #408]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	061b      	lsls	r3, r3, #24
 8007c88:	4962      	ldr	r1, [pc, #392]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c8e:	e05f      	b.n	8007d50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d042      	beq.n	8007d1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c98:	4b5e      	ldr	r3, [pc, #376]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a5d      	ldr	r2, [pc, #372]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca4:	f7f9 fb92 	bl	80013cc <HAL_GetTick>
 8007ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007caa:	e008      	b.n	8007cbe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007cac:	f7f9 fb8e 	bl	80013cc <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e280      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cbe:	4b55      	ldr	r3, [pc, #340]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0f0      	beq.n	8007cac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cca:	f7f9 fbaf 	bl	800142c <HAL_GetREVID>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d817      	bhi.n	8007d08 <HAL_RCC_OscConfig+0x3ec>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d108      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x3d6>
 8007ce0:	4b4c      	ldr	r3, [pc, #304]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ce8:	4a4a      	ldr	r2, [pc, #296]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007cea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cee:	6053      	str	r3, [r2, #4]
 8007cf0:	e02e      	b.n	8007d50 <HAL_RCC_OscConfig+0x434>
 8007cf2:	4b48      	ldr	r3, [pc, #288]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	069b      	lsls	r3, r3, #26
 8007d00:	4944      	ldr	r1, [pc, #272]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	604b      	str	r3, [r1, #4]
 8007d06:	e023      	b.n	8007d50 <HAL_RCC_OscConfig+0x434>
 8007d08:	4b42      	ldr	r3, [pc, #264]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	061b      	lsls	r3, r3, #24
 8007d16:	493f      	ldr	r1, [pc, #252]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60cb      	str	r3, [r1, #12]
 8007d1c:	e018      	b.n	8007d50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007d1e:	4b3d      	ldr	r3, [pc, #244]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a3c      	ldr	r2, [pc, #240]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2a:	f7f9 fb4f 	bl	80013cc <HAL_GetTick>
 8007d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d30:	e008      	b.n	8007d44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d32:	f7f9 fb4b 	bl	80013cc <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d901      	bls.n	8007d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e23d      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d44:	4b33      	ldr	r3, [pc, #204]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1f0      	bne.n	8007d32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d036      	beq.n	8007dca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d019      	beq.n	8007d98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d64:	4b2b      	ldr	r3, [pc, #172]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d68:	4a2a      	ldr	r2, [pc, #168]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d6a:	f043 0301 	orr.w	r3, r3, #1
 8007d6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d70:	f7f9 fb2c 	bl	80013cc <HAL_GetTick>
 8007d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d78:	f7f9 fb28 	bl	80013cc <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e21a      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d8a:	4b22      	ldr	r3, [pc, #136]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f0      	beq.n	8007d78 <HAL_RCC_OscConfig+0x45c>
 8007d96:	e018      	b.n	8007dca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d98:	4b1e      	ldr	r3, [pc, #120]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9c:	4a1d      	ldr	r2, [pc, #116]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007d9e:	f023 0301 	bic.w	r3, r3, #1
 8007da2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da4:	f7f9 fb12 	bl	80013cc <HAL_GetTick>
 8007da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dac:	f7f9 fb0e 	bl	80013cc <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e200      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007dbe:	4b15      	ldr	r3, [pc, #84]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1f0      	bne.n	8007dac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d039      	beq.n	8007e4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01c      	beq.n	8007e18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007dde:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a0c      	ldr	r2, [pc, #48]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007de8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007dea:	f7f9 faef 	bl	80013cc <HAL_GetTick>
 8007dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007df0:	e008      	b.n	8007e04 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007df2:	f7f9 faeb 	bl	80013cc <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d901      	bls.n	8007e04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e1dd      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e04:	4b03      	ldr	r3, [pc, #12]	; (8007e14 <HAL_RCC_OscConfig+0x4f8>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0f0      	beq.n	8007df2 <HAL_RCC_OscConfig+0x4d6>
 8007e10:	e01b      	b.n	8007e4a <HAL_RCC_OscConfig+0x52e>
 8007e12:	bf00      	nop
 8007e14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e18:	4b9b      	ldr	r3, [pc, #620]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a9a      	ldr	r2, [pc, #616]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e24:	f7f9 fad2 	bl	80013cc <HAL_GetTick>
 8007e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e2a:	e008      	b.n	8007e3e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e2c:	f7f9 face 	bl	80013cc <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e1c0      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e3e:	4b92      	ldr	r3, [pc, #584]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1f0      	bne.n	8007e2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 8081 	beq.w	8007f5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007e58:	4b8c      	ldr	r3, [pc, #560]	; (800808c <HAL_RCC_OscConfig+0x770>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a8b      	ldr	r2, [pc, #556]	; (800808c <HAL_RCC_OscConfig+0x770>)
 8007e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e64:	f7f9 fab2 	bl	80013cc <HAL_GetTick>
 8007e68:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e6c:	f7f9 faae 	bl	80013cc <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b64      	cmp	r3, #100	; 0x64
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e1a0      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e7e:	4b83      	ldr	r3, [pc, #524]	; (800808c <HAL_RCC_OscConfig+0x770>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0f0      	beq.n	8007e6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d106      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x584>
 8007e92:	4b7d      	ldr	r3, [pc, #500]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e96:	4a7c      	ldr	r2, [pc, #496]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007e98:	f043 0301 	orr.w	r3, r3, #1
 8007e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e9e:	e02d      	b.n	8007efc <HAL_RCC_OscConfig+0x5e0>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10c      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x5a6>
 8007ea8:	4b77      	ldr	r3, [pc, #476]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eac:	4a76      	ldr	r2, [pc, #472]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007eae:	f023 0301 	bic.w	r3, r3, #1
 8007eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb4:	4b74      	ldr	r3, [pc, #464]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb8:	4a73      	ldr	r2, [pc, #460]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007eba:	f023 0304 	bic.w	r3, r3, #4
 8007ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8007ec0:	e01c      	b.n	8007efc <HAL_RCC_OscConfig+0x5e0>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	2b05      	cmp	r3, #5
 8007ec8:	d10c      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x5c8>
 8007eca:	4b6f      	ldr	r3, [pc, #444]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ece:	4a6e      	ldr	r2, [pc, #440]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007ed0:	f043 0304 	orr.w	r3, r3, #4
 8007ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ed6:	4b6c      	ldr	r3, [pc, #432]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eda:	4a6b      	ldr	r2, [pc, #428]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007edc:	f043 0301 	orr.w	r3, r3, #1
 8007ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ee2:	e00b      	b.n	8007efc <HAL_RCC_OscConfig+0x5e0>
 8007ee4:	4b68      	ldr	r3, [pc, #416]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee8:	4a67      	ldr	r2, [pc, #412]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007eea:	f023 0301 	bic.w	r3, r3, #1
 8007eee:	6713      	str	r3, [r2, #112]	; 0x70
 8007ef0:	4b65      	ldr	r3, [pc, #404]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef4:	4a64      	ldr	r2, [pc, #400]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007ef6:	f023 0304 	bic.w	r3, r3, #4
 8007efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d015      	beq.n	8007f30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f04:	f7f9 fa62 	bl	80013cc <HAL_GetTick>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f0a:	e00a      	b.n	8007f22 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f0c:	f7f9 fa5e 	bl	80013cc <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e14e      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f22:	4b59      	ldr	r3, [pc, #356]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0ee      	beq.n	8007f0c <HAL_RCC_OscConfig+0x5f0>
 8007f2e:	e014      	b.n	8007f5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f30:	f7f9 fa4c 	bl	80013cc <HAL_GetTick>
 8007f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f36:	e00a      	b.n	8007f4e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f38:	f7f9 fa48 	bl	80013cc <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e138      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f4e:	4b4e      	ldr	r3, [pc, #312]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1ee      	bne.n	8007f38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 812d 	beq.w	80081be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f64:	4b48      	ldr	r3, [pc, #288]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f6c:	2b18      	cmp	r3, #24
 8007f6e:	f000 80bd 	beq.w	80080ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	f040 809e 	bne.w	80080b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f7c:	4b42      	ldr	r3, [pc, #264]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a41      	ldr	r2, [pc, #260]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f88:	f7f9 fa20 	bl	80013cc <HAL_GetTick>
 8007f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f90:	f7f9 fa1c 	bl	80013cc <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e10e      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fa2:	4b39      	ldr	r3, [pc, #228]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f0      	bne.n	8007f90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fae:	4b36      	ldr	r3, [pc, #216]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fb2:	4b37      	ldr	r3, [pc, #220]	; (8008090 <HAL_RCC_OscConfig+0x774>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007fbe:	0112      	lsls	r2, r2, #4
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	4931      	ldr	r1, [pc, #196]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	628b      	str	r3, [r1, #40]	; 0x28
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	025b      	lsls	r3, r3, #9
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	041b      	lsls	r3, r3, #16
 8007fe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fea:	431a      	orrs	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	061b      	lsls	r3, r3, #24
 8007ff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ff8:	4923      	ldr	r1, [pc, #140]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007ffe:	4b22      	ldr	r3, [pc, #136]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	4a21      	ldr	r2, [pc, #132]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008004:	f023 0301 	bic.w	r3, r3, #1
 8008008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800800a:	4b1f      	ldr	r3, [pc, #124]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 800800c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800800e:	4b21      	ldr	r3, [pc, #132]	; (8008094 <HAL_RCC_OscConfig+0x778>)
 8008010:	4013      	ands	r3, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008016:	00d2      	lsls	r2, r2, #3
 8008018:	491b      	ldr	r1, [pc, #108]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 800801a:	4313      	orrs	r3, r2
 800801c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800801e:	4b1a      	ldr	r3, [pc, #104]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	f023 020c 	bic.w	r2, r3, #12
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	4917      	ldr	r1, [pc, #92]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 800802c:	4313      	orrs	r3, r2
 800802e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008030:	4b15      	ldr	r3, [pc, #84]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	f023 0202 	bic.w	r2, r3, #2
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803c:	4912      	ldr	r1, [pc, #72]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 800803e:	4313      	orrs	r3, r2
 8008040:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008042:	4b11      	ldr	r3, [pc, #68]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008046:	4a10      	ldr	r2, [pc, #64]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800804c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804e:	4b0e      	ldr	r3, [pc, #56]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008052:	4a0d      	ldr	r2, [pc, #52]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008058:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800805a:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 800805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805e:	4a0a      	ldr	r2, [pc, #40]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008066:	4b08      	ldr	r3, [pc, #32]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806a:	4a07      	ldr	r2, [pc, #28]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 800806c:	f043 0301 	orr.w	r3, r3, #1
 8008070:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a04      	ldr	r2, [pc, #16]	; (8008088 <HAL_RCC_OscConfig+0x76c>)
 8008078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800807c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807e:	f7f9 f9a5 	bl	80013cc <HAL_GetTick>
 8008082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008084:	e011      	b.n	80080aa <HAL_RCC_OscConfig+0x78e>
 8008086:	bf00      	nop
 8008088:	58024400 	.word	0x58024400
 800808c:	58024800 	.word	0x58024800
 8008090:	fffffc0c 	.word	0xfffffc0c
 8008094:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008098:	f7f9 f998 	bl	80013cc <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e08a      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080aa:	4b47      	ldr	r3, [pc, #284]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0f0      	beq.n	8008098 <HAL_RCC_OscConfig+0x77c>
 80080b6:	e082      	b.n	80081be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080b8:	4b43      	ldr	r3, [pc, #268]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a42      	ldr	r2, [pc, #264]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 80080be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c4:	f7f9 f982 	bl	80013cc <HAL_GetTick>
 80080c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080ca:	e008      	b.n	80080de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080cc:	f7f9 f97e 	bl	80013cc <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d901      	bls.n	80080de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e070      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080de:	4b3a      	ldr	r3, [pc, #232]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1f0      	bne.n	80080cc <HAL_RCC_OscConfig+0x7b0>
 80080ea:	e068      	b.n	80081be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80080ec:	4b36      	ldr	r3, [pc, #216]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 80080ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80080f2:	4b35      	ldr	r3, [pc, #212]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 80080f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d031      	beq.n	8008164 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f003 0203 	and.w	r2, r3, #3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800810a:	429a      	cmp	r2, r3
 800810c:	d12a      	bne.n	8008164 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	091b      	lsrs	r3, r3, #4
 8008112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800811a:	429a      	cmp	r2, r3
 800811c:	d122      	bne.n	8008164 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800812a:	429a      	cmp	r2, r3
 800812c:	d11a      	bne.n	8008164 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	0a5b      	lsrs	r3, r3, #9
 8008132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800813c:	429a      	cmp	r2, r3
 800813e:	d111      	bne.n	8008164 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	0c1b      	lsrs	r3, r3, #16
 8008144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800814e:	429a      	cmp	r2, r3
 8008150:	d108      	bne.n	8008164 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	0e1b      	lsrs	r3, r3, #24
 8008156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008160:	429a      	cmp	r2, r3
 8008162:	d001      	beq.n	8008168 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e02b      	b.n	80081c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008168:	4b17      	ldr	r3, [pc, #92]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 800816a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816c:	08db      	lsrs	r3, r3, #3
 800816e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008172:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	429a      	cmp	r2, r3
 800817c:	d01f      	beq.n	80081be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800817e:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	4a11      	ldr	r2, [pc, #68]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800818a:	f7f9 f91f 	bl	80013cc <HAL_GetTick>
 800818e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008190:	bf00      	nop
 8008192:	f7f9 f91b 	bl	80013cc <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	4293      	cmp	r3, r2
 800819c:	d0f9      	beq.n	8008192 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800819e:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 80081a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081a2:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <HAL_RCC_OscConfig+0x8b0>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081aa:	00d2      	lsls	r2, r2, #3
 80081ac:	4906      	ldr	r1, [pc, #24]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80081b2:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	4a04      	ldr	r2, [pc, #16]	; (80081c8 <HAL_RCC_OscConfig+0x8ac>)
 80081b8:	f043 0301 	orr.w	r3, r3, #1
 80081bc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3730      	adds	r7, #48	; 0x30
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	58024400 	.word	0x58024400
 80081cc:	ffff0007 	.word	0xffff0007

080081d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e19c      	b.n	800851e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081e4:	4b8a      	ldr	r3, [pc, #552]	; (8008410 <HAL_RCC_ClockConfig+0x240>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 030f 	and.w	r3, r3, #15
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d910      	bls.n	8008214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081f2:	4b87      	ldr	r3, [pc, #540]	; (8008410 <HAL_RCC_ClockConfig+0x240>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f023 020f 	bic.w	r2, r3, #15
 80081fa:	4985      	ldr	r1, [pc, #532]	; (8008410 <HAL_RCC_ClockConfig+0x240>)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	4313      	orrs	r3, r2
 8008200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008202:	4b83      	ldr	r3, [pc, #524]	; (8008410 <HAL_RCC_ClockConfig+0x240>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d001      	beq.n	8008214 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e184      	b.n	800851e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d010      	beq.n	8008242 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691a      	ldr	r2, [r3, #16]
 8008224:	4b7b      	ldr	r3, [pc, #492]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800822c:	429a      	cmp	r2, r3
 800822e:	d908      	bls.n	8008242 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008230:	4b78      	ldr	r3, [pc, #480]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	4975      	ldr	r1, [pc, #468]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 800823e:	4313      	orrs	r3, r2
 8008240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0308 	and.w	r3, r3, #8
 800824a:	2b00      	cmp	r3, #0
 800824c:	d010      	beq.n	8008270 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	695a      	ldr	r2, [r3, #20]
 8008252:	4b70      	ldr	r3, [pc, #448]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800825a:	429a      	cmp	r2, r3
 800825c:	d908      	bls.n	8008270 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800825e:	4b6d      	ldr	r3, [pc, #436]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	496a      	ldr	r1, [pc, #424]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 800826c:	4313      	orrs	r3, r2
 800826e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	2b00      	cmp	r3, #0
 800827a:	d010      	beq.n	800829e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699a      	ldr	r2, [r3, #24]
 8008280:	4b64      	ldr	r3, [pc, #400]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008288:	429a      	cmp	r2, r3
 800828a:	d908      	bls.n	800829e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800828c:	4b61      	ldr	r3, [pc, #388]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	495e      	ldr	r1, [pc, #376]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 800829a:	4313      	orrs	r3, r2
 800829c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d010      	beq.n	80082cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	69da      	ldr	r2, [r3, #28]
 80082ae:	4b59      	ldr	r3, [pc, #356]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d908      	bls.n	80082cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80082ba:	4b56      	ldr	r3, [pc, #344]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	4953      	ldr	r1, [pc, #332]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d010      	beq.n	80082fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	4b4d      	ldr	r3, [pc, #308]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	f003 030f 	and.w	r3, r3, #15
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d908      	bls.n	80082fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082e8:	4b4a      	ldr	r3, [pc, #296]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	f023 020f 	bic.w	r2, r3, #15
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	4947      	ldr	r1, [pc, #284]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d055      	beq.n	80083b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008306:	4b43      	ldr	r3, [pc, #268]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	4940      	ldr	r1, [pc, #256]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008314:	4313      	orrs	r3, r2
 8008316:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d107      	bne.n	8008330 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008320:	4b3c      	ldr	r3, [pc, #240]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d121      	bne.n	8008370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e0f6      	b.n	800851e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	2b03      	cmp	r3, #3
 8008336:	d107      	bne.n	8008348 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008338:	4b36      	ldr	r3, [pc, #216]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d115      	bne.n	8008370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e0ea      	b.n	800851e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d107      	bne.n	8008360 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008350:	4b30      	ldr	r3, [pc, #192]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d109      	bne.n	8008370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e0de      	b.n	800851e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008360:	4b2c      	ldr	r3, [pc, #176]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e0d6      	b.n	800851e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008370:	4b28      	ldr	r3, [pc, #160]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	f023 0207 	bic.w	r2, r3, #7
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	4925      	ldr	r1, [pc, #148]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 800837e:	4313      	orrs	r3, r2
 8008380:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008382:	f7f9 f823 	bl	80013cc <HAL_GetTick>
 8008386:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008388:	e00a      	b.n	80083a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800838a:	f7f9 f81f 	bl	80013cc <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	f241 3288 	movw	r2, #5000	; 0x1388
 8008398:	4293      	cmp	r3, r2
 800839a:	d901      	bls.n	80083a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e0be      	b.n	800851e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083a0:	4b1c      	ldr	r3, [pc, #112]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d1eb      	bne.n	800838a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d010      	beq.n	80083e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68da      	ldr	r2, [r3, #12]
 80083c2:	4b14      	ldr	r3, [pc, #80]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d208      	bcs.n	80083e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083ce:	4b11      	ldr	r3, [pc, #68]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	f023 020f 	bic.w	r2, r3, #15
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	490e      	ldr	r1, [pc, #56]	; (8008414 <HAL_RCC_ClockConfig+0x244>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083e0:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <HAL_RCC_ClockConfig+0x240>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 030f 	and.w	r3, r3, #15
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d214      	bcs.n	8008418 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ee:	4b08      	ldr	r3, [pc, #32]	; (8008410 <HAL_RCC_ClockConfig+0x240>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f023 020f 	bic.w	r2, r3, #15
 80083f6:	4906      	ldr	r1, [pc, #24]	; (8008410 <HAL_RCC_ClockConfig+0x240>)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083fe:	4b04      	ldr	r3, [pc, #16]	; (8008410 <HAL_RCC_ClockConfig+0x240>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d005      	beq.n	8008418 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e086      	b.n	800851e <HAL_RCC_ClockConfig+0x34e>
 8008410:	52002000 	.word	0x52002000
 8008414:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d010      	beq.n	8008446 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691a      	ldr	r2, [r3, #16]
 8008428:	4b3f      	ldr	r3, [pc, #252]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008430:	429a      	cmp	r2, r3
 8008432:	d208      	bcs.n	8008446 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008434:	4b3c      	ldr	r3, [pc, #240]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	4939      	ldr	r1, [pc, #228]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 8008442:	4313      	orrs	r3, r2
 8008444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0308 	and.w	r3, r3, #8
 800844e:	2b00      	cmp	r3, #0
 8008450:	d010      	beq.n	8008474 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	695a      	ldr	r2, [r3, #20]
 8008456:	4b34      	ldr	r3, [pc, #208]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800845e:	429a      	cmp	r2, r3
 8008460:	d208      	bcs.n	8008474 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008462:	4b31      	ldr	r3, [pc, #196]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	492e      	ldr	r1, [pc, #184]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 8008470:	4313      	orrs	r3, r2
 8008472:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b00      	cmp	r3, #0
 800847e:	d010      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	4b28      	ldr	r3, [pc, #160]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800848c:	429a      	cmp	r2, r3
 800848e:	d208      	bcs.n	80084a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008490:	4b25      	ldr	r3, [pc, #148]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	4922      	ldr	r1, [pc, #136]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d010      	beq.n	80084d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	69da      	ldr	r2, [r3, #28]
 80084b2:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d208      	bcs.n	80084d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80084be:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	4917      	ldr	r1, [pc, #92]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80084d0:	f000 f89e 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 80084d4:	4602      	mov	r2, r0
 80084d6:	4b14      	ldr	r3, [pc, #80]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	0a1b      	lsrs	r3, r3, #8
 80084dc:	f003 030f 	and.w	r3, r3, #15
 80084e0:	4912      	ldr	r1, [pc, #72]	; (800852c <HAL_RCC_ClockConfig+0x35c>)
 80084e2:	5ccb      	ldrb	r3, [r1, r3]
 80084e4:	f003 031f 	and.w	r3, r3, #31
 80084e8:	fa22 f303 	lsr.w	r3, r2, r3
 80084ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80084ee:	4b0e      	ldr	r3, [pc, #56]	; (8008528 <HAL_RCC_ClockConfig+0x358>)
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	4a0d      	ldr	r2, [pc, #52]	; (800852c <HAL_RCC_ClockConfig+0x35c>)
 80084f8:	5cd3      	ldrb	r3, [r2, r3]
 80084fa:	f003 031f 	and.w	r3, r3, #31
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	fa22 f303 	lsr.w	r3, r2, r3
 8008504:	4a0a      	ldr	r2, [pc, #40]	; (8008530 <HAL_RCC_ClockConfig+0x360>)
 8008506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008508:	4a0a      	ldr	r2, [pc, #40]	; (8008534 <HAL_RCC_ClockConfig+0x364>)
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <HAL_RCC_ClockConfig+0x368>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4618      	mov	r0, r3
 8008514:	f7f8 ff10 	bl	8001338 <HAL_InitTick>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	58024400 	.word	0x58024400
 800852c:	0801bcd8 	.word	0x0801bcd8
 8008530:	24000004 	.word	0x24000004
 8008534:	24000000 	.word	0x24000000
 8008538:	24000008 	.word	0x24000008

0800853c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08c      	sub	sp, #48	; 0x30
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d12a      	bne.n	80085a4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800854e:	4b2d      	ldr	r3, [pc, #180]	; (8008604 <HAL_RCC_MCOConfig+0xc8>)
 8008550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008554:	4a2b      	ldr	r2, [pc, #172]	; (8008604 <HAL_RCC_MCOConfig+0xc8>)
 8008556:	f043 0301 	orr.w	r3, r3, #1
 800855a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800855e:	4b29      	ldr	r3, [pc, #164]	; (8008604 <HAL_RCC_MCOConfig+0xc8>)
 8008560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800856c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008572:	2302      	movs	r3, #2
 8008574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008576:	2303      	movs	r3, #3
 8008578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800857a:	2300      	movs	r3, #0
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800857e:	2300      	movs	r3, #0
 8008580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008582:	f107 031c 	add.w	r3, r7, #28
 8008586:	4619      	mov	r1, r3
 8008588:	481f      	ldr	r0, [pc, #124]	; (8008608 <HAL_RCC_MCOConfig+0xcc>)
 800858a:	f7fc fe9b 	bl	80052c4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800858e:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <HAL_RCC_MCOConfig+0xc8>)
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8008596:	68b9      	ldr	r1, [r7, #8]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	430b      	orrs	r3, r1
 800859c:	4919      	ldr	r1, [pc, #100]	; (8008604 <HAL_RCC_MCOConfig+0xc8>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80085a2:	e02a      	b.n	80085fa <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80085a4:	4b17      	ldr	r3, [pc, #92]	; (8008604 <HAL_RCC_MCOConfig+0xc8>)
 80085a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085aa:	4a16      	ldr	r2, [pc, #88]	; (8008604 <HAL_RCC_MCOConfig+0xc8>)
 80085ac:	f043 0304 	orr.w	r3, r3, #4
 80085b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085b4:	4b13      	ldr	r3, [pc, #76]	; (8008604 <HAL_RCC_MCOConfig+0xc8>)
 80085b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80085c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c8:	2302      	movs	r3, #2
 80085ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085cc:	2303      	movs	r3, #3
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80085d4:	2300      	movs	r3, #0
 80085d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80085d8:	f107 031c 	add.w	r3, r7, #28
 80085dc:	4619      	mov	r1, r3
 80085de:	480b      	ldr	r0, [pc, #44]	; (800860c <HAL_RCC_MCOConfig+0xd0>)
 80085e0:	f7fc fe70 	bl	80052c4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80085e4:	4b07      	ldr	r3, [pc, #28]	; (8008604 <HAL_RCC_MCOConfig+0xc8>)
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	01d9      	lsls	r1, r3, #7
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	430b      	orrs	r3, r1
 80085f4:	4903      	ldr	r1, [pc, #12]	; (8008604 <HAL_RCC_MCOConfig+0xc8>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	610b      	str	r3, [r1, #16]
}
 80085fa:	bf00      	nop
 80085fc:	3730      	adds	r7, #48	; 0x30
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	58024400 	.word	0x58024400
 8008608:	58020000 	.word	0x58020000
 800860c:	58020800 	.word	0x58020800

08008610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008610:	b480      	push	{r7}
 8008612:	b089      	sub	sp, #36	; 0x24
 8008614:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008616:	4bb3      	ldr	r3, [pc, #716]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800861e:	2b18      	cmp	r3, #24
 8008620:	f200 8155 	bhi.w	80088ce <HAL_RCC_GetSysClockFreq+0x2be>
 8008624:	a201      	add	r2, pc, #4	; (adr r2, 800862c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862a:	bf00      	nop
 800862c:	08008691 	.word	0x08008691
 8008630:	080088cf 	.word	0x080088cf
 8008634:	080088cf 	.word	0x080088cf
 8008638:	080088cf 	.word	0x080088cf
 800863c:	080088cf 	.word	0x080088cf
 8008640:	080088cf 	.word	0x080088cf
 8008644:	080088cf 	.word	0x080088cf
 8008648:	080088cf 	.word	0x080088cf
 800864c:	080086b7 	.word	0x080086b7
 8008650:	080088cf 	.word	0x080088cf
 8008654:	080088cf 	.word	0x080088cf
 8008658:	080088cf 	.word	0x080088cf
 800865c:	080088cf 	.word	0x080088cf
 8008660:	080088cf 	.word	0x080088cf
 8008664:	080088cf 	.word	0x080088cf
 8008668:	080088cf 	.word	0x080088cf
 800866c:	080086bd 	.word	0x080086bd
 8008670:	080088cf 	.word	0x080088cf
 8008674:	080088cf 	.word	0x080088cf
 8008678:	080088cf 	.word	0x080088cf
 800867c:	080088cf 	.word	0x080088cf
 8008680:	080088cf 	.word	0x080088cf
 8008684:	080088cf 	.word	0x080088cf
 8008688:	080088cf 	.word	0x080088cf
 800868c:	080086c3 	.word	0x080086c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008690:	4b94      	ldr	r3, [pc, #592]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b00      	cmp	r3, #0
 800869a:	d009      	beq.n	80086b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800869c:	4b91      	ldr	r3, [pc, #580]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	08db      	lsrs	r3, r3, #3
 80086a2:	f003 0303 	and.w	r3, r3, #3
 80086a6:	4a90      	ldr	r2, [pc, #576]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086a8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80086ae:	e111      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80086b0:	4b8d      	ldr	r3, [pc, #564]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086b2:	61bb      	str	r3, [r7, #24]
      break;
 80086b4:	e10e      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80086b6:	4b8d      	ldr	r3, [pc, #564]	; (80088ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80086b8:	61bb      	str	r3, [r7, #24]
      break;
 80086ba:	e10b      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80086bc:	4b8c      	ldr	r3, [pc, #560]	; (80088f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80086be:	61bb      	str	r3, [r7, #24]
      break;
 80086c0:	e108      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086c2:	4b88      	ldr	r3, [pc, #544]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80086cc:	4b85      	ldr	r3, [pc, #532]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	091b      	lsrs	r3, r3, #4
 80086d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80086d8:	4b82      	ldr	r3, [pc, #520]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80086e2:	4b80      	ldr	r3, [pc, #512]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e6:	08db      	lsrs	r3, r3, #3
 80086e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	fb02 f303 	mul.w	r3, r2, r3
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 80e1 	beq.w	80088c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b02      	cmp	r3, #2
 800870a:	f000 8083 	beq.w	8008814 <HAL_RCC_GetSysClockFreq+0x204>
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b02      	cmp	r3, #2
 8008712:	f200 80a1 	bhi.w	8008858 <HAL_RCC_GetSysClockFreq+0x248>
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_RCC_GetSysClockFreq+0x114>
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d056      	beq.n	80087d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008722:	e099      	b.n	8008858 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008724:	4b6f      	ldr	r3, [pc, #444]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0320 	and.w	r3, r3, #32
 800872c:	2b00      	cmp	r3, #0
 800872e:	d02d      	beq.n	800878c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008730:	4b6c      	ldr	r3, [pc, #432]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	08db      	lsrs	r3, r3, #3
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	4a6b      	ldr	r2, [pc, #428]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800873c:	fa22 f303 	lsr.w	r3, r2, r3
 8008740:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875a:	4b62      	ldr	r3, [pc, #392]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876a:	ed97 6a02 	vldr	s12, [r7, #8]
 800876e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800877e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008786:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800878a:	e087      	b.n	800889c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	eddf 6a58 	vldr	s13, [pc, #352]	; 80088f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800879a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879e:	4b51      	ldr	r3, [pc, #324]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80087b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80087ce:	e065      	b.n	800889c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80088fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80087de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e2:	4b40      	ldr	r3, [pc, #256]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80087f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008812:	e043      	b.n	800889c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008900 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008826:	4b2f      	ldr	r3, [pc, #188]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008836:	ed97 6a02 	vldr	s12, [r7, #8]
 800883a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800883e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008852:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008856:	e021      	b.n	800889c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	eddf 6a26 	vldr	s13, [pc, #152]	; 80088fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886a:	4b1e      	ldr	r3, [pc, #120]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	ed97 6a02 	vldr	s12, [r7, #8]
 800887e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800889a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800889c:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800889e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a0:	0a5b      	lsrs	r3, r3, #9
 80088a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a6:	3301      	adds	r3, #1
 80088a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	ee07 3a90 	vmov	s15, r3
 80088b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80088b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c0:	ee17 3a90 	vmov	r3, s15
 80088c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80088c6:	e005      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61bb      	str	r3, [r7, #24]
      break;
 80088cc:	e002      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80088ce:	4b07      	ldr	r3, [pc, #28]	; (80088ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088d0:	61bb      	str	r3, [r7, #24]
      break;
 80088d2:	bf00      	nop
  }

  return sysclockfreq;
 80088d4:	69bb      	ldr	r3, [r7, #24]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3724      	adds	r7, #36	; 0x24
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	58024400 	.word	0x58024400
 80088e8:	03d09000 	.word	0x03d09000
 80088ec:	003d0900 	.word	0x003d0900
 80088f0:	00b71b00 	.word	0x00b71b00
 80088f4:	46000000 	.word	0x46000000
 80088f8:	4c742400 	.word	0x4c742400
 80088fc:	4a742400 	.word	0x4a742400
 8008900:	4b371b00 	.word	0x4b371b00

08008904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800890a:	f7ff fe81 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 800890e:	4602      	mov	r2, r0
 8008910:	4b10      	ldr	r3, [pc, #64]	; (8008954 <HAL_RCC_GetHCLKFreq+0x50>)
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	0a1b      	lsrs	r3, r3, #8
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	490f      	ldr	r1, [pc, #60]	; (8008958 <HAL_RCC_GetHCLKFreq+0x54>)
 800891c:	5ccb      	ldrb	r3, [r1, r3]
 800891e:	f003 031f 	and.w	r3, r3, #31
 8008922:	fa22 f303 	lsr.w	r3, r2, r3
 8008926:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <HAL_RCC_GetHCLKFreq+0x50>)
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	4a09      	ldr	r2, [pc, #36]	; (8008958 <HAL_RCC_GetHCLKFreq+0x54>)
 8008932:	5cd3      	ldrb	r3, [r2, r3]
 8008934:	f003 031f 	and.w	r3, r3, #31
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	fa22 f303 	lsr.w	r3, r2, r3
 800893e:	4a07      	ldr	r2, [pc, #28]	; (800895c <HAL_RCC_GetHCLKFreq+0x58>)
 8008940:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008942:	4a07      	ldr	r2, [pc, #28]	; (8008960 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008948:	4b04      	ldr	r3, [pc, #16]	; (800895c <HAL_RCC_GetHCLKFreq+0x58>)
 800894a:	681b      	ldr	r3, [r3, #0]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	58024400 	.word	0x58024400
 8008958:	0801bcd8 	.word	0x0801bcd8
 800895c:	24000004 	.word	0x24000004
 8008960:	24000000 	.word	0x24000000

08008964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008968:	f7ff ffcc 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 800896c:	4602      	mov	r2, r0
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	091b      	lsrs	r3, r3, #4
 8008974:	f003 0307 	and.w	r3, r3, #7
 8008978:	4904      	ldr	r1, [pc, #16]	; (800898c <HAL_RCC_GetPCLK1Freq+0x28>)
 800897a:	5ccb      	ldrb	r3, [r1, r3]
 800897c:	f003 031f 	and.w	r3, r3, #31
 8008980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008984:	4618      	mov	r0, r3
 8008986:	bd80      	pop	{r7, pc}
 8008988:	58024400 	.word	0x58024400
 800898c:	0801bcd8 	.word	0x0801bcd8

08008990 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008994:	b0ca      	sub	sp, #296	; 0x128
 8008996:	af00      	add	r7, sp, #0
 8008998:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800899c:	2300      	movs	r3, #0
 800899e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80089a2:	2300      	movs	r3, #0
 80089a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80089a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80089b4:	2500      	movs	r5, #0
 80089b6:	ea54 0305 	orrs.w	r3, r4, r5
 80089ba:	d049      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80089bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089c6:	d02f      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80089c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089cc:	d828      	bhi.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80089ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089d2:	d01a      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80089d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089d8:	d822      	bhi.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80089de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e2:	d007      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80089e4:	e01c      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e6:	4bb8      	ldr	r3, [pc, #736]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ea:	4ab7      	ldr	r2, [pc, #732]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089f2:	e01a      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f8:	3308      	adds	r3, #8
 80089fa:	2102      	movs	r1, #2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f002 fb61 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a08:	e00f      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0e:	3328      	adds	r3, #40	; 0x28
 8008a10:	2102      	movs	r1, #2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f002 fc08 	bl	800b228 <RCCEx_PLL3_Config>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a1e:	e004      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a26:	e000      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008a32:	4ba5      	ldr	r3, [pc, #660]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a36:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a40:	4aa1      	ldr	r2, [pc, #644]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a42:	430b      	orrs	r3, r1
 8008a44:	6513      	str	r3, [r2, #80]	; 0x50
 8008a46:	e003      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008a5c:	f04f 0900 	mov.w	r9, #0
 8008a60:	ea58 0309 	orrs.w	r3, r8, r9
 8008a64:	d047      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d82a      	bhi.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a70:	a201      	add	r2, pc, #4	; (adr r2, 8008a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a76:	bf00      	nop
 8008a78:	08008a8d 	.word	0x08008a8d
 8008a7c:	08008a9b 	.word	0x08008a9b
 8008a80:	08008ab1 	.word	0x08008ab1
 8008a84:	08008acf 	.word	0x08008acf
 8008a88:	08008acf 	.word	0x08008acf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a8c:	4b8e      	ldr	r3, [pc, #568]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a90:	4a8d      	ldr	r2, [pc, #564]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a98:	e01a      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f002 fb0e 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008aae:	e00f      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab4:	3328      	adds	r3, #40	; 0x28
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f002 fbb5 	bl	800b228 <RCCEx_PLL3_Config>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ac4:	e004      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008acc:	e000      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ad8:	4b7b      	ldr	r3, [pc, #492]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008adc:	f023 0107 	bic.w	r1, r3, #7
 8008ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae6:	4a78      	ldr	r2, [pc, #480]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ae8:	430b      	orrs	r3, r1
 8008aea:	6513      	str	r3, [r2, #80]	; 0x50
 8008aec:	e003      	b.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008b02:	f04f 0b00 	mov.w	fp, #0
 8008b06:	ea5a 030b 	orrs.w	r3, sl, fp
 8008b0a:	d04c      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b16:	d030      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b1c:	d829      	bhi.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8008b20:	d02d      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008b22:	2bc0      	cmp	r3, #192	; 0xc0
 8008b24:	d825      	bhi.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008b26:	2b80      	cmp	r3, #128	; 0x80
 8008b28:	d018      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008b2a:	2b80      	cmp	r3, #128	; 0x80
 8008b2c:	d821      	bhi.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008b32:	2b40      	cmp	r3, #64	; 0x40
 8008b34:	d007      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008b36:	e01c      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b38:	4b63      	ldr	r3, [pc, #396]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3c:	4a62      	ldr	r2, [pc, #392]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b44:	e01c      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f002 fab8 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b5a:	e011      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b60:	3328      	adds	r3, #40	; 0x28
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f002 fb5f 	bl	800b228 <RCCEx_PLL3_Config>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b70:	e006      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b78:	e002      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b7a:	bf00      	nop
 8008b7c:	e000      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10a      	bne.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b88:	4b4f      	ldr	r3, [pc, #316]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b96:	4a4c      	ldr	r2, [pc, #304]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b98:	430b      	orrs	r3, r1
 8008b9a:	6513      	str	r3, [r2, #80]	; 0x50
 8008b9c:	e003      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008bb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008bbc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	d053      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bd2:	d035      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008bd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bd8:	d82e      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008bda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bde:	d031      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008be0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008be4:	d828      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008be6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bea:	d01a      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bf0:	d822      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bfa:	d007      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008bfc:	e01c      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bfe:	4b32      	ldr	r3, [pc, #200]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	4a31      	ldr	r2, [pc, #196]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c0a:	e01c      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c10:	3308      	adds	r3, #8
 8008c12:	2100      	movs	r1, #0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f002 fa55 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008c20:	e011      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c26:	3328      	adds	r3, #40	; 0x28
 8008c28:	2100      	movs	r1, #0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f002 fafc 	bl	800b228 <RCCEx_PLL3_Config>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c36:	e006      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c3e:	e002      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008c40:	bf00      	nop
 8008c42:	e000      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10b      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c4e:	4b1e      	ldr	r3, [pc, #120]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c52:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c5e:	4a1a      	ldr	r2, [pc, #104]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6593      	str	r3, [r2, #88]	; 0x58
 8008c64:	e003      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008c7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008c84:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	d056      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c9a:	d038      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008c9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ca0:	d831      	bhi.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008ca2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ca6:	d034      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008ca8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008cac:	d82b      	bhi.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008cae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cb2:	d01d      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cb8:	d825      	bhi.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d006      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cc2:	d00a      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008cc4:	e01f      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008cc6:	bf00      	nop
 8008cc8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ccc:	4ba2      	ldr	r3, [pc, #648]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd0:	4aa1      	ldr	r2, [pc, #644]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cd8:	e01c      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cde:	3308      	adds	r3, #8
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f002 f9ee 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008cee:	e011      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf4:	3328      	adds	r3, #40	; 0x28
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f002 fa95 	bl	800b228 <RCCEx_PLL3_Config>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d04:	e006      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d0c:	e002      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008d0e:	bf00      	nop
 8008d10:	e000      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10b      	bne.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d1c:	4b8e      	ldr	r3, [pc, #568]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d20:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d2c:	4a8a      	ldr	r2, [pc, #552]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d2e:	430b      	orrs	r3, r1
 8008d30:	6593      	str	r3, [r2, #88]	; 0x58
 8008d32:	e003      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d52:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008d56:	460b      	mov	r3, r1
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	d03a      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d62:	2b30      	cmp	r3, #48	; 0x30
 8008d64:	d01f      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008d66:	2b30      	cmp	r3, #48	; 0x30
 8008d68:	d819      	bhi.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	d00c      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008d6e:	2b20      	cmp	r3, #32
 8008d70:	d815      	bhi.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d019      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d111      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d7a:	4b77      	ldr	r3, [pc, #476]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4a76      	ldr	r2, [pc, #472]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d86:	e011      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	2102      	movs	r1, #2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f002 f997 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d9c:	e006      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008da4:	e002      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008da6:	bf00      	nop
 8008da8:	e000      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008db4:	4b68      	ldr	r3, [pc, #416]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc2:	4a65      	ldr	r2, [pc, #404]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dc8:	e003      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008dde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008de2:	2300      	movs	r3, #0
 8008de4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008de8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4313      	orrs	r3, r2
 8008df0:	d051      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dfc:	d035      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e02:	d82e      	bhi.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e08:	d031      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008e0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e0e:	d828      	bhi.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e14:	d01a      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e1a:	d822      	bhi.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e24:	d007      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008e26:	e01c      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e28:	4b4b      	ldr	r3, [pc, #300]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	4a4a      	ldr	r2, [pc, #296]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e34:	e01c      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f002 f940 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e4a:	e011      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e50:	3328      	adds	r3, #40	; 0x28
 8008e52:	2100      	movs	r1, #0
 8008e54:	4618      	mov	r0, r3
 8008e56:	f002 f9e7 	bl	800b228 <RCCEx_PLL3_Config>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e60:	e006      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e68:	e002      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e6a:	bf00      	nop
 8008e6c:	e000      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e78:	4b37      	ldr	r3, [pc, #220]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e7c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e86:	4a34      	ldr	r2, [pc, #208]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	6513      	str	r3, [r2, #80]	; 0x50
 8008e8c:	e003      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008eac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	d056      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ec0:	d033      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ec6:	d82c      	bhi.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ec8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ecc:	d02f      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008ece:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ed2:	d826      	bhi.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ed4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ed8:	d02b      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008eda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ede:	d820      	bhi.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ee4:	d012      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eea:	d81a      	bhi.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d022      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef4:	d115      	bne.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008efa:	3308      	adds	r3, #8
 8008efc:	2101      	movs	r1, #1
 8008efe:	4618      	mov	r0, r3
 8008f00:	f002 f8e0 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f0a:	e015      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f10:	3328      	adds	r3, #40	; 0x28
 8008f12:	2101      	movs	r1, #1
 8008f14:	4618      	mov	r0, r3
 8008f16:	f002 f987 	bl	800b228 <RCCEx_PLL3_Config>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f20:	e00a      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f28:	e006      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f2a:	bf00      	nop
 8008f2c:	e004      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f2e:	bf00      	nop
 8008f30:	e002      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f32:	bf00      	nop
 8008f34:	e000      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10d      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008f40:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f44:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f4e:	4a02      	ldr	r2, [pc, #8]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f50:	430b      	orrs	r3, r1
 8008f52:	6513      	str	r3, [r2, #80]	; 0x50
 8008f54:	e006      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008f56:	bf00      	nop
 8008f58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f74:	2300      	movs	r3, #0
 8008f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4313      	orrs	r3, r2
 8008f82:	d055      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f90:	d033      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f96:	d82c      	bhi.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f9c:	d02f      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fa2:	d826      	bhi.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008fa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fa8:	d02b      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008faa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fae:	d820      	bhi.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fb4:	d012      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fba:	d81a      	bhi.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d022      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008fc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fc4:	d115      	bne.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fca:	3308      	adds	r3, #8
 8008fcc:	2101      	movs	r1, #1
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f002 f878 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008fda:	e015      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe0:	3328      	adds	r3, #40	; 0x28
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f002 f91f 	bl	800b228 <RCCEx_PLL3_Config>
 8008fea:	4603      	mov	r3, r0
 8008fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ff0:	e00a      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ff8:	e006      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008ffa:	bf00      	nop
 8008ffc:	e004      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008ffe:	bf00      	nop
 8009000:	e002      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009002:	bf00      	nop
 8009004:	e000      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10b      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009010:	4ba3      	ldr	r3, [pc, #652]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009014:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800901c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009020:	4a9f      	ldr	r2, [pc, #636]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009022:	430b      	orrs	r3, r1
 8009024:	6593      	str	r3, [r2, #88]	; 0x58
 8009026:	e003      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800902c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800903c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009040:	2300      	movs	r3, #0
 8009042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800904a:	460b      	mov	r3, r1
 800904c:	4313      	orrs	r3, r2
 800904e:	d037      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800905a:	d00e      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800905c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009060:	d816      	bhi.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009062:	2b00      	cmp	r3, #0
 8009064:	d018      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800906a:	d111      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800906c:	4b8c      	ldr	r3, [pc, #560]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	4a8b      	ldr	r2, [pc, #556]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009078:	e00f      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800907a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800907e:	3308      	adds	r3, #8
 8009080:	2101      	movs	r1, #1
 8009082:	4618      	mov	r0, r3
 8009084:	f002 f81e 	bl	800b0c4 <RCCEx_PLL2_Config>
 8009088:	4603      	mov	r3, r0
 800908a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800908e:	e004      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009096:	e000      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800909a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80090a2:	4b7f      	ldr	r3, [pc, #508]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80090aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b0:	4a7b      	ldr	r2, [pc, #492]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090b2:	430b      	orrs	r3, r1
 80090b4:	6513      	str	r3, [r2, #80]	; 0x50
 80090b6:	e003      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80090c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80090cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090d0:	2300      	movs	r3, #0
 80090d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80090da:	460b      	mov	r3, r1
 80090dc:	4313      	orrs	r3, r2
 80090de:	d039      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80090e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d81c      	bhi.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80090ea:	a201      	add	r2, pc, #4	; (adr r2, 80090f0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80090ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f0:	0800912d 	.word	0x0800912d
 80090f4:	08009101 	.word	0x08009101
 80090f8:	0800910f 	.word	0x0800910f
 80090fc:	0800912d 	.word	0x0800912d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009100:	4b67      	ldr	r3, [pc, #412]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	4a66      	ldr	r2, [pc, #408]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800910a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800910c:	e00f      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800910e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009112:	3308      	adds	r3, #8
 8009114:	2102      	movs	r1, #2
 8009116:	4618      	mov	r0, r3
 8009118:	f001 ffd4 	bl	800b0c4 <RCCEx_PLL2_Config>
 800911c:	4603      	mov	r3, r0
 800911e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009122:	e004      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800912a:	e000      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800912c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800912e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10a      	bne.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009136:	4b5a      	ldr	r3, [pc, #360]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800913a:	f023 0103 	bic.w	r1, r3, #3
 800913e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009144:	4a56      	ldr	r2, [pc, #344]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009146:	430b      	orrs	r3, r1
 8009148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800914a:	e003      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009164:	2300      	movs	r3, #0
 8009166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800916a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800916e:	460b      	mov	r3, r1
 8009170:	4313      	orrs	r3, r2
 8009172:	f000 809f 	beq.w	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009176:	4b4b      	ldr	r3, [pc, #300]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a4a      	ldr	r2, [pc, #296]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800917c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009180:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009182:	f7f8 f923 	bl	80013cc <HAL_GetTick>
 8009186:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800918a:	e00b      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800918c:	f7f8 f91e 	bl	80013cc <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	2b64      	cmp	r3, #100	; 0x64
 800919a:	d903      	bls.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091a2:	e005      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091a4:	4b3f      	ldr	r3, [pc, #252]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d0ed      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80091b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d179      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80091b8:	4b39      	ldr	r3, [pc, #228]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091c4:	4053      	eors	r3, r2
 80091c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d015      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091ce:	4b34      	ldr	r3, [pc, #208]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091da:	4b31      	ldr	r3, [pc, #196]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091de:	4a30      	ldr	r2, [pc, #192]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091e6:	4b2e      	ldr	r3, [pc, #184]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ea:	4a2d      	ldr	r2, [pc, #180]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80091f2:	4a2b      	ldr	r2, [pc, #172]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009206:	d118      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009208:	f7f8 f8e0 	bl	80013cc <HAL_GetTick>
 800920c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009210:	e00d      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009212:	f7f8 f8db 	bl	80013cc <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800921c:	1ad2      	subs	r2, r2, r3
 800921e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009222:	429a      	cmp	r2, r3
 8009224:	d903      	bls.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009226:	2303      	movs	r3, #3
 8009228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800922c:	e005      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800922e:	4b1c      	ldr	r3, [pc, #112]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0eb      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800923a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800923e:	2b00      	cmp	r3, #0
 8009240:	d129      	bne.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800924a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800924e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009252:	d10e      	bne.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009254:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800925c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009264:	091a      	lsrs	r2, r3, #4
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009268:	4013      	ands	r3, r2
 800926a:	4a0d      	ldr	r2, [pc, #52]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800926c:	430b      	orrs	r3, r1
 800926e:	6113      	str	r3, [r2, #16]
 8009270:	e005      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009272:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	4a0a      	ldr	r2, [pc, #40]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009278:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800927c:	6113      	str	r3, [r2, #16]
 800927e:	4b08      	ldr	r3, [pc, #32]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009280:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009286:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800928a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800928e:	4a04      	ldr	r2, [pc, #16]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009290:	430b      	orrs	r3, r1
 8009292:	6713      	str	r3, [r2, #112]	; 0x70
 8009294:	e00e      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800929a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800929e:	e009      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80092a0:	58024400 	.word	0x58024400
 80092a4:	58024800 	.word	0x58024800
 80092a8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80092b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f002 0301 	and.w	r3, r2, #1
 80092c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092c4:	2300      	movs	r3, #0
 80092c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4313      	orrs	r3, r2
 80092d2:	f000 8089 	beq.w	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80092d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092dc:	2b28      	cmp	r3, #40	; 0x28
 80092de:	d86b      	bhi.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80092e0:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	080093c1 	.word	0x080093c1
 80092ec:	080093b9 	.word	0x080093b9
 80092f0:	080093b9 	.word	0x080093b9
 80092f4:	080093b9 	.word	0x080093b9
 80092f8:	080093b9 	.word	0x080093b9
 80092fc:	080093b9 	.word	0x080093b9
 8009300:	080093b9 	.word	0x080093b9
 8009304:	080093b9 	.word	0x080093b9
 8009308:	0800938d 	.word	0x0800938d
 800930c:	080093b9 	.word	0x080093b9
 8009310:	080093b9 	.word	0x080093b9
 8009314:	080093b9 	.word	0x080093b9
 8009318:	080093b9 	.word	0x080093b9
 800931c:	080093b9 	.word	0x080093b9
 8009320:	080093b9 	.word	0x080093b9
 8009324:	080093b9 	.word	0x080093b9
 8009328:	080093a3 	.word	0x080093a3
 800932c:	080093b9 	.word	0x080093b9
 8009330:	080093b9 	.word	0x080093b9
 8009334:	080093b9 	.word	0x080093b9
 8009338:	080093b9 	.word	0x080093b9
 800933c:	080093b9 	.word	0x080093b9
 8009340:	080093b9 	.word	0x080093b9
 8009344:	080093b9 	.word	0x080093b9
 8009348:	080093c1 	.word	0x080093c1
 800934c:	080093b9 	.word	0x080093b9
 8009350:	080093b9 	.word	0x080093b9
 8009354:	080093b9 	.word	0x080093b9
 8009358:	080093b9 	.word	0x080093b9
 800935c:	080093b9 	.word	0x080093b9
 8009360:	080093b9 	.word	0x080093b9
 8009364:	080093b9 	.word	0x080093b9
 8009368:	080093c1 	.word	0x080093c1
 800936c:	080093b9 	.word	0x080093b9
 8009370:	080093b9 	.word	0x080093b9
 8009374:	080093b9 	.word	0x080093b9
 8009378:	080093b9 	.word	0x080093b9
 800937c:	080093b9 	.word	0x080093b9
 8009380:	080093b9 	.word	0x080093b9
 8009384:	080093b9 	.word	0x080093b9
 8009388:	080093c1 	.word	0x080093c1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800938c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009390:	3308      	adds	r3, #8
 8009392:	2101      	movs	r1, #1
 8009394:	4618      	mov	r0, r3
 8009396:	f001 fe95 	bl	800b0c4 <RCCEx_PLL2_Config>
 800939a:	4603      	mov	r3, r0
 800939c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80093a0:	e00f      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a6:	3328      	adds	r3, #40	; 0x28
 80093a8:	2101      	movs	r1, #1
 80093aa:	4618      	mov	r0, r3
 80093ac:	f001 ff3c 	bl	800b228 <RCCEx_PLL3_Config>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80093b6:	e004      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093be:	e000      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80093c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80093ca:	4bbf      	ldr	r3, [pc, #764]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093d8:	4abb      	ldr	r2, [pc, #748]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093da:	430b      	orrs	r3, r1
 80093dc:	6553      	str	r3, [r2, #84]	; 0x54
 80093de:	e003      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80093e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f002 0302 	and.w	r3, r2, #2
 80093f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093f8:	2300      	movs	r3, #0
 80093fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009402:	460b      	mov	r3, r1
 8009404:	4313      	orrs	r3, r2
 8009406:	d041      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800940c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800940e:	2b05      	cmp	r3, #5
 8009410:	d824      	bhi.n	800945c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009412:	a201      	add	r2, pc, #4	; (adr r2, 8009418 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009418:	08009465 	.word	0x08009465
 800941c:	08009431 	.word	0x08009431
 8009420:	08009447 	.word	0x08009447
 8009424:	08009465 	.word	0x08009465
 8009428:	08009465 	.word	0x08009465
 800942c:	08009465 	.word	0x08009465
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009434:	3308      	adds	r3, #8
 8009436:	2101      	movs	r1, #1
 8009438:	4618      	mov	r0, r3
 800943a:	f001 fe43 	bl	800b0c4 <RCCEx_PLL2_Config>
 800943e:	4603      	mov	r3, r0
 8009440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009444:	e00f      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800944a:	3328      	adds	r3, #40	; 0x28
 800944c:	2101      	movs	r1, #1
 800944e:	4618      	mov	r0, r3
 8009450:	f001 feea 	bl	800b228 <RCCEx_PLL3_Config>
 8009454:	4603      	mov	r3, r0
 8009456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800945a:	e004      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009462:	e000      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10a      	bne.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800946e:	4b96      	ldr	r3, [pc, #600]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009472:	f023 0107 	bic.w	r1, r3, #7
 8009476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800947a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800947c:	4a92      	ldr	r2, [pc, #584]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800947e:	430b      	orrs	r3, r1
 8009480:	6553      	str	r3, [r2, #84]	; 0x54
 8009482:	e003      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009488:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800948c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	f002 0304 	and.w	r3, r2, #4
 8009498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800949c:	2300      	movs	r3, #0
 800949e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4313      	orrs	r3, r2
 80094aa:	d044      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80094ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094b4:	2b05      	cmp	r3, #5
 80094b6:	d825      	bhi.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80094b8:	a201      	add	r2, pc, #4	; (adr r2, 80094c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80094ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094be:	bf00      	nop
 80094c0:	0800950d 	.word	0x0800950d
 80094c4:	080094d9 	.word	0x080094d9
 80094c8:	080094ef 	.word	0x080094ef
 80094cc:	0800950d 	.word	0x0800950d
 80094d0:	0800950d 	.word	0x0800950d
 80094d4:	0800950d 	.word	0x0800950d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094dc:	3308      	adds	r3, #8
 80094de:	2101      	movs	r1, #1
 80094e0:	4618      	mov	r0, r3
 80094e2:	f001 fdef 	bl	800b0c4 <RCCEx_PLL2_Config>
 80094e6:	4603      	mov	r3, r0
 80094e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80094ec:	e00f      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094f2:	3328      	adds	r3, #40	; 0x28
 80094f4:	2101      	movs	r1, #1
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 fe96 	bl	800b228 <RCCEx_PLL3_Config>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009502:	e004      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800950a:	e000      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800950c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800950e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10b      	bne.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009516:	4b6c      	ldr	r3, [pc, #432]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951a:	f023 0107 	bic.w	r1, r3, #7
 800951e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009526:	4a68      	ldr	r2, [pc, #416]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009528:	430b      	orrs	r3, r1
 800952a:	6593      	str	r3, [r2, #88]	; 0x58
 800952c:	e003      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f002 0320 	and.w	r3, r2, #32
 8009542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009546:	2300      	movs	r3, #0
 8009548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800954c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009550:	460b      	mov	r3, r1
 8009552:	4313      	orrs	r3, r2
 8009554:	d055      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800955e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009562:	d033      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009568:	d82c      	bhi.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800956a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800956e:	d02f      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009574:	d826      	bhi.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800957a:	d02b      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800957c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009580:	d820      	bhi.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009586:	d012      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800958c:	d81a      	bhi.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800958e:	2b00      	cmp	r3, #0
 8009590:	d022      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009596:	d115      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959c:	3308      	adds	r3, #8
 800959e:	2100      	movs	r1, #0
 80095a0:	4618      	mov	r0, r3
 80095a2:	f001 fd8f 	bl	800b0c4 <RCCEx_PLL2_Config>
 80095a6:	4603      	mov	r3, r0
 80095a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80095ac:	e015      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b2:	3328      	adds	r3, #40	; 0x28
 80095b4:	2102      	movs	r1, #2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 fe36 	bl	800b228 <RCCEx_PLL3_Config>
 80095bc:	4603      	mov	r3, r0
 80095be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80095c2:	e00a      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095ca:	e006      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80095cc:	bf00      	nop
 80095ce:	e004      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80095d0:	bf00      	nop
 80095d2:	e002      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80095d4:	bf00      	nop
 80095d6:	e000      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80095d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10b      	bne.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095e2:	4b39      	ldr	r3, [pc, #228]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80095ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f2:	4a35      	ldr	r2, [pc, #212]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095f4:	430b      	orrs	r3, r1
 80095f6:	6553      	str	r3, [r2, #84]	; 0x54
 80095f8:	e003      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800960e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009612:	2300      	movs	r3, #0
 8009614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009618:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800961c:	460b      	mov	r3, r1
 800961e:	4313      	orrs	r3, r2
 8009620:	d058      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800962a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800962e:	d033      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009630:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009634:	d82c      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800963a:	d02f      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800963c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009640:	d826      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009646:	d02b      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800964c:	d820      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800964e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009652:	d012      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009658:	d81a      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d022      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800965e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009662:	d115      	bne.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009668:	3308      	adds	r3, #8
 800966a:	2100      	movs	r1, #0
 800966c:	4618      	mov	r0, r3
 800966e:	f001 fd29 	bl	800b0c4 <RCCEx_PLL2_Config>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009678:	e015      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800967a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967e:	3328      	adds	r3, #40	; 0x28
 8009680:	2102      	movs	r1, #2
 8009682:	4618      	mov	r0, r3
 8009684:	f001 fdd0 	bl	800b228 <RCCEx_PLL3_Config>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800968e:	e00a      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009696:	e006      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009698:	bf00      	nop
 800969a:	e004      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800969c:	bf00      	nop
 800969e:	e002      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80096a0:	bf00      	nop
 80096a2:	e000      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80096a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10e      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80096ae:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80096b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096be:	4a02      	ldr	r2, [pc, #8]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096c0:	430b      	orrs	r3, r1
 80096c2:	6593      	str	r3, [r2, #88]	; 0x58
 80096c4:	e006      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80096c6:	bf00      	nop
 80096c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096dc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80096e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096e4:	2300      	movs	r3, #0
 80096e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80096ee:	460b      	mov	r3, r1
 80096f0:	4313      	orrs	r3, r2
 80096f2:	d055      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80096f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009700:	d033      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009702:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009706:	d82c      	bhi.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800970c:	d02f      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800970e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009712:	d826      	bhi.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009714:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009718:	d02b      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800971a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800971e:	d820      	bhi.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009724:	d012      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800972a:	d81a      	bhi.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800972c:	2b00      	cmp	r3, #0
 800972e:	d022      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009734:	d115      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800973a:	3308      	adds	r3, #8
 800973c:	2100      	movs	r1, #0
 800973e:	4618      	mov	r0, r3
 8009740:	f001 fcc0 	bl	800b0c4 <RCCEx_PLL2_Config>
 8009744:	4603      	mov	r3, r0
 8009746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800974a:	e015      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800974c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009750:	3328      	adds	r3, #40	; 0x28
 8009752:	2102      	movs	r1, #2
 8009754:	4618      	mov	r0, r3
 8009756:	f001 fd67 	bl	800b228 <RCCEx_PLL3_Config>
 800975a:	4603      	mov	r3, r0
 800975c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009760:	e00a      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009768:	e006      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800976a:	bf00      	nop
 800976c:	e004      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800976e:	bf00      	nop
 8009770:	e002      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009772:	bf00      	nop
 8009774:	e000      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10b      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009780:	4ba1      	ldr	r3, [pc, #644]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009784:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009790:	4a9d      	ldr	r2, [pc, #628]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009792:	430b      	orrs	r3, r1
 8009794:	6593      	str	r3, [r2, #88]	; 0x58
 8009796:	e003      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800979c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80097a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f002 0308 	and.w	r3, r2, #8
 80097ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097b0:	2300      	movs	r3, #0
 80097b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80097b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80097ba:	460b      	mov	r3, r1
 80097bc:	4313      	orrs	r3, r2
 80097be:	d01e      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80097c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097cc:	d10c      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80097ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d2:	3328      	adds	r3, #40	; 0x28
 80097d4:	2102      	movs	r1, #2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f001 fd26 	bl	800b228 <RCCEx_PLL3_Config>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80097e8:	4b87      	ldr	r3, [pc, #540]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097f8:	4a83      	ldr	r2, [pc, #524]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097fa:	430b      	orrs	r3, r1
 80097fc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	f002 0310 	and.w	r3, r2, #16
 800980a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800980e:	2300      	movs	r3, #0
 8009810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009814:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009818:	460b      	mov	r3, r1
 800981a:	4313      	orrs	r3, r2
 800981c:	d01e      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800981e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800982a:	d10c      	bne.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800982c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009830:	3328      	adds	r3, #40	; 0x28
 8009832:	2102      	movs	r1, #2
 8009834:	4618      	mov	r0, r3
 8009836:	f001 fcf7 	bl	800b228 <RCCEx_PLL3_Config>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009846:	4b70      	ldr	r3, [pc, #448]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800984e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009856:	4a6c      	ldr	r2, [pc, #432]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009858:	430b      	orrs	r3, r1
 800985a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800985c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800986c:	2300      	movs	r3, #0
 800986e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009872:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009876:	460b      	mov	r3, r1
 8009878:	4313      	orrs	r3, r2
 800987a:	d03e      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800987c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009888:	d022      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800988a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800988e:	d81b      	bhi.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009890:	2b00      	cmp	r3, #0
 8009892:	d003      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009898:	d00b      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800989a:	e015      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800989c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a0:	3308      	adds	r3, #8
 80098a2:	2100      	movs	r1, #0
 80098a4:	4618      	mov	r0, r3
 80098a6:	f001 fc0d 	bl	800b0c4 <RCCEx_PLL2_Config>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80098b0:	e00f      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b6:	3328      	adds	r3, #40	; 0x28
 80098b8:	2102      	movs	r1, #2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 fcb4 	bl	800b228 <RCCEx_PLL3_Config>
 80098c0:	4603      	mov	r3, r0
 80098c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80098c6:	e004      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098ce:	e000      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80098d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10b      	bne.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098da:	4b4b      	ldr	r3, [pc, #300]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80098e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098ea:	4a47      	ldr	r2, [pc, #284]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098ec:	430b      	orrs	r3, r1
 80098ee:	6593      	str	r3, [r2, #88]	; 0x58
 80098f0:	e003      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80098fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009906:	67bb      	str	r3, [r7, #120]	; 0x78
 8009908:	2300      	movs	r3, #0
 800990a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800990c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009910:	460b      	mov	r3, r1
 8009912:	4313      	orrs	r3, r2
 8009914:	d03b      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800991a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009922:	d01f      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009924:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009928:	d818      	bhi.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800992a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800992e:	d003      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009934:	d007      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009936:	e011      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009938:	4b33      	ldr	r3, [pc, #204]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800993a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993c:	4a32      	ldr	r2, [pc, #200]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800993e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009944:	e00f      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800994a:	3328      	adds	r3, #40	; 0x28
 800994c:	2101      	movs	r1, #1
 800994e:	4618      	mov	r0, r3
 8009950:	f001 fc6a 	bl	800b228 <RCCEx_PLL3_Config>
 8009954:	4603      	mov	r3, r0
 8009956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800995a:	e004      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009962:	e000      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10b      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800996e:	4b26      	ldr	r3, [pc, #152]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009972:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997e:	4a22      	ldr	r2, [pc, #136]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009980:	430b      	orrs	r3, r1
 8009982:	6553      	str	r3, [r2, #84]	; 0x54
 8009984:	e003      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800998a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800998e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800999a:	673b      	str	r3, [r7, #112]	; 0x70
 800999c:	2300      	movs	r3, #0
 800999e:	677b      	str	r3, [r7, #116]	; 0x74
 80099a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80099a4:	460b      	mov	r3, r1
 80099a6:	4313      	orrs	r3, r2
 80099a8:	d034      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80099aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80099b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099b8:	d007      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80099ba:	e011      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099bc:	4b12      	ldr	r3, [pc, #72]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	4a11      	ldr	r2, [pc, #68]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80099c8:	e00e      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ce:	3308      	adds	r3, #8
 80099d0:	2102      	movs	r1, #2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f001 fb76 	bl	800b0c4 <RCCEx_PLL2_Config>
 80099d8:	4603      	mov	r3, r0
 80099da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80099de:	e003      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10d      	bne.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80099f0:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fe:	4a02      	ldr	r2, [pc, #8]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a00:	430b      	orrs	r3, r1
 8009a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a04:	e006      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009a06:	bf00      	nop
 8009a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a22:	2300      	movs	r3, #0
 8009a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	d00c      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a34:	3328      	adds	r3, #40	; 0x28
 8009a36:	2102      	movs	r1, #2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f001 fbf5 	bl	800b228 <RCCEx_PLL3_Config>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009a56:	663b      	str	r3, [r7, #96]	; 0x60
 8009a58:	2300      	movs	r3, #0
 8009a5a:	667b      	str	r3, [r7, #100]	; 0x64
 8009a5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009a60:	460b      	mov	r3, r1
 8009a62:	4313      	orrs	r3, r2
 8009a64:	d038      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a72:	d018      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a78:	d811      	bhi.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a7e:	d014      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a84:	d80b      	bhi.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d011      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a8e:	d106      	bne.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a90:	4bc3      	ldr	r3, [pc, #780]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a94:	4ac2      	ldr	r2, [pc, #776]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009a9c:	e008      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aa4:	e004      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009aa6:	bf00      	nop
 8009aa8:	e002      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009aaa:	bf00      	nop
 8009aac:	e000      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10b      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ab8:	4bb9      	ldr	r3, [pc, #740]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009abc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ac8:	4ab5      	ldr	r2, [pc, #724]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009aca:	430b      	orrs	r3, r1
 8009acc:	6553      	str	r3, [r2, #84]	; 0x54
 8009ace:	e003      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ad4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009aee:	460b      	mov	r3, r1
 8009af0:	4313      	orrs	r3, r2
 8009af2:	d009      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009af4:	4baa      	ldr	r3, [pc, #680]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b02:	4aa7      	ldr	r2, [pc, #668]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b04:	430b      	orrs	r3, r1
 8009b06:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009b14:	653b      	str	r3, [r7, #80]	; 0x50
 8009b16:	2300      	movs	r3, #0
 8009b18:	657b      	str	r3, [r7, #84]	; 0x54
 8009b1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4313      	orrs	r3, r2
 8009b22:	d00a      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009b24:	4b9e      	ldr	r3, [pc, #632]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009b34:	4a9a      	ldr	r2, [pc, #616]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b36:	430b      	orrs	r3, r1
 8009b38:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b48:	2300      	movs	r3, #0
 8009b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b4c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009b50:	460b      	mov	r3, r1
 8009b52:	4313      	orrs	r3, r2
 8009b54:	d009      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009b56:	4b92      	ldr	r3, [pc, #584]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b5a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b64:	4a8e      	ldr	r2, [pc, #568]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b66:	430b      	orrs	r3, r1
 8009b68:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009b76:	643b      	str	r3, [r7, #64]	; 0x40
 8009b78:	2300      	movs	r3, #0
 8009b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b7c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009b80:	460b      	mov	r3, r1
 8009b82:	4313      	orrs	r3, r2
 8009b84:	d00e      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b86:	4b86      	ldr	r3, [pc, #536]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	4a85      	ldr	r2, [pc, #532]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b90:	6113      	str	r3, [r2, #16]
 8009b92:	4b83      	ldr	r3, [pc, #524]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b94:	6919      	ldr	r1, [r3, #16]
 8009b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009b9e:	4a80      	ldr	r2, [pc, #512]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bb6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	d009      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009bc0:	4b77      	ldr	r3, [pc, #476]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bce:	4a74      	ldr	r2, [pc, #464]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009be0:	633b      	str	r3, [r7, #48]	; 0x30
 8009be2:	2300      	movs	r3, #0
 8009be4:	637b      	str	r3, [r7, #52]	; 0x34
 8009be6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009bea:	460b      	mov	r3, r1
 8009bec:	4313      	orrs	r3, r2
 8009bee:	d00a      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009bf0:	4b6b      	ldr	r3, [pc, #428]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c00:	4a67      	ldr	r2, [pc, #412]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c02:	430b      	orrs	r3, r1
 8009c04:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0e:	2100      	movs	r1, #0
 8009c10:	62b9      	str	r1, [r7, #40]	; 0x28
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	d011      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c26:	3308      	adds	r3, #8
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f001 fa4a 	bl	800b0c4 <RCCEx_PLL2_Config>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	2100      	movs	r1, #0
 8009c50:	6239      	str	r1, [r7, #32]
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	627b      	str	r3, [r7, #36]	; 0x24
 8009c58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	d011      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c66:	3308      	adds	r3, #8
 8009c68:	2101      	movs	r1, #1
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f001 fa2a 	bl	800b0c4 <RCCEx_PLL2_Config>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	2100      	movs	r1, #0
 8009c90:	61b9      	str	r1, [r7, #24]
 8009c92:	f003 0304 	and.w	r3, r3, #4
 8009c96:	61fb      	str	r3, [r7, #28]
 8009c98:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	d011      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	2102      	movs	r1, #2
 8009caa:	4618      	mov	r0, r3
 8009cac:	f001 fa0a 	bl	800b0c4 <RCCEx_PLL2_Config>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	2100      	movs	r1, #0
 8009cd0:	6139      	str	r1, [r7, #16]
 8009cd2:	f003 0308 	and.w	r3, r3, #8
 8009cd6:	617b      	str	r3, [r7, #20]
 8009cd8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	d011      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce6:	3328      	adds	r3, #40	; 0x28
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f001 fa9c 	bl	800b228 <RCCEx_PLL3_Config>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	2100      	movs	r1, #0
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	f003 0310 	and.w	r3, r3, #16
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	d011      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d26:	3328      	adds	r3, #40	; 0x28
 8009d28:	2101      	movs	r1, #1
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f001 fa7c 	bl	800b228 <RCCEx_PLL3_Config>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4e:	2100      	movs	r1, #0
 8009d50:	6039      	str	r1, [r7, #0]
 8009d52:	f003 0320 	and.w	r3, r3, #32
 8009d56:	607b      	str	r3, [r7, #4]
 8009d58:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	d011      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d66:	3328      	adds	r3, #40	; 0x28
 8009d68:	2102      	movs	r1, #2
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 fa5c 	bl	800b228 <RCCEx_PLL3_Config>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009d86:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e000      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009da0:	58024400 	.word	0x58024400

08009da4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b090      	sub	sp, #64	; 0x40
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009db2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009db6:	430b      	orrs	r3, r1
 8009db8:	f040 8094 	bne.w	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009dbc:	4b9e      	ldr	r3, [pc, #632]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	f200 8087 	bhi.w	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009dce:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009de9 	.word	0x08009de9
 8009dd8:	08009e11 	.word	0x08009e11
 8009ddc:	08009e39 	.word	0x08009e39
 8009de0:	08009ed5 	.word	0x08009ed5
 8009de4:	08009e61 	.word	0x08009e61
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009de8:	4b93      	ldr	r3, [pc, #588]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009df4:	d108      	bne.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 f810 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e04:	f000 bd45 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e0c:	f000 bd41 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e10:	4b89      	ldr	r3, [pc, #548]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e1c:	d108      	bne.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e1e:	f107 0318 	add.w	r3, r7, #24
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fd54 	bl	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e2c:	f000 bd31 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e34:	f000 bd2d 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e38:	4b7f      	ldr	r3, [pc, #508]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e44:	d108      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e46:	f107 030c 	add.w	r3, r7, #12
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 fe94 	bl	800ab78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e54:	f000 bd1d 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e5c:	f000 bd19 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e60:	4b75      	ldr	r3, [pc, #468]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e68:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e6a:	4b73      	ldr	r3, [pc, #460]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0304 	and.w	r3, r3, #4
 8009e72:	2b04      	cmp	r3, #4
 8009e74:	d10c      	bne.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d109      	bne.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e7c:	4b6e      	ldr	r3, [pc, #440]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	08db      	lsrs	r3, r3, #3
 8009e82:	f003 0303 	and.w	r3, r3, #3
 8009e86:	4a6d      	ldr	r2, [pc, #436]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e88:	fa22 f303 	lsr.w	r3, r2, r3
 8009e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e8e:	e01f      	b.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e90:	4b69      	ldr	r3, [pc, #420]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e9c:	d106      	bne.n	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ea4:	d102      	bne.n	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ea6:	4b66      	ldr	r3, [pc, #408]	; (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eaa:	e011      	b.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009eac:	4b62      	ldr	r3, [pc, #392]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eb8:	d106      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ec0:	d102      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ec2:	4b60      	ldr	r3, [pc, #384]	; (800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ec6:	e003      	b.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009ecc:	f000 bce1 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ed0:	f000 bcdf 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ed4:	4b5c      	ldr	r3, [pc, #368]	; (800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ed8:	f000 bcdb 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ee0:	f000 bcd7 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ee8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009eec:	430b      	orrs	r3, r1
 8009eee:	f040 80ad 	bne.w	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009ef2:	4b51      	ldr	r3, [pc, #324]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009efa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f02:	d056      	beq.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f0a:	f200 8090 	bhi.w	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f10:	2bc0      	cmp	r3, #192	; 0xc0
 8009f12:	f000 8088 	beq.w	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	2bc0      	cmp	r3, #192	; 0xc0
 8009f1a:	f200 8088 	bhi.w	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	2b80      	cmp	r3, #128	; 0x80
 8009f22:	d032      	beq.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	2b80      	cmp	r3, #128	; 0x80
 8009f28:	f200 8081 	bhi.w	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	2b40      	cmp	r3, #64	; 0x40
 8009f36:	d014      	beq.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009f38:	e079      	b.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f3a:	4b3f      	ldr	r3, [pc, #252]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f46:	d108      	bne.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 ff67 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f56:	f000 bc9c 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f5e:	f000 bc98 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f62:	4b35      	ldr	r3, [pc, #212]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f6e:	d108      	bne.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f70:	f107 0318 	add.w	r3, r7, #24
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 fcab 	bl	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f7e:	f000 bc88 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f86:	f000 bc84 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f8a:	4b2b      	ldr	r3, [pc, #172]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f96:	d108      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f98:	f107 030c 	add.w	r3, r7, #12
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fdeb 	bl	800ab78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fa6:	f000 bc74 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fae:	f000 bc70 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fb2:	4b21      	ldr	r3, [pc, #132]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fbc:	4b1e      	ldr	r3, [pc, #120]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0304 	and.w	r3, r3, #4
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	d10c      	bne.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d109      	bne.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fce:	4b1a      	ldr	r3, [pc, #104]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	08db      	lsrs	r3, r3, #3
 8009fd4:	f003 0303 	and.w	r3, r3, #3
 8009fd8:	4a18      	ldr	r2, [pc, #96]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009fda:	fa22 f303 	lsr.w	r3, r2, r3
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fe0:	e01f      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fe2:	4b15      	ldr	r3, [pc, #84]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fee:	d106      	bne.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ff6:	d102      	bne.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ff8:	4b11      	ldr	r3, [pc, #68]	; (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ffc:	e011      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a00a:	d106      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a012:	d102      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a014:	4b0b      	ldr	r3, [pc, #44]	; (800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a018:	e003      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a01e:	f000 bc38 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a022:	f000 bc36 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a026:	4b08      	ldr	r3, [pc, #32]	; (800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a02a:	f000 bc32 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a02e:	2300      	movs	r3, #0
 800a030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a032:	f000 bc2e 	b.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a036:	bf00      	nop
 800a038:	58024400 	.word	0x58024400
 800a03c:	03d09000 	.word	0x03d09000
 800a040:	003d0900 	.word	0x003d0900
 800a044:	00b71b00 	.word	0x00b71b00
 800a048:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a04c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a050:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a054:	430b      	orrs	r3, r1
 800a056:	f040 809c 	bne.w	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a05a:	4b9e      	ldr	r3, [pc, #632]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a05e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a062:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a06a:	d054      	beq.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a072:	f200 808b 	bhi.w	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a07c:	f000 8083 	beq.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a086:	f200 8081 	bhi.w	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a090:	d02f      	beq.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a098:	d878      	bhi.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d004      	beq.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0a6:	d012      	beq.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a0a8:	e070      	b.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0aa:	4b8a      	ldr	r3, [pc, #552]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0b6:	d107      	bne.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 feaf 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c6:	e3e4      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0cc:	e3e1      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0ce:	4b81      	ldr	r3, [pc, #516]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0da:	d107      	bne.n	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0dc:	f107 0318 	add.w	r3, r7, #24
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 fbf5 	bl	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ea:	e3d2      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0f0:	e3cf      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0f2:	4b78      	ldr	r3, [pc, #480]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0fe:	d107      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a100:	f107 030c 	add.w	r3, r7, #12
 800a104:	4618      	mov	r0, r3
 800a106:	f000 fd37 	bl	800ab78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a10e:	e3c0      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a114:	e3bd      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a116:	4b6f      	ldr	r3, [pc, #444]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a11a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a11e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a120:	4b6c      	ldr	r3, [pc, #432]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d10c      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a132:	4b68      	ldr	r3, [pc, #416]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	08db      	lsrs	r3, r3, #3
 800a138:	f003 0303 	and.w	r3, r3, #3
 800a13c:	4a66      	ldr	r2, [pc, #408]	; (800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a13e:	fa22 f303 	lsr.w	r3, r2, r3
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a144:	e01e      	b.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a146:	4b63      	ldr	r3, [pc, #396]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a14e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a152:	d106      	bne.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a15a:	d102      	bne.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a15c:	4b5f      	ldr	r3, [pc, #380]	; (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a15e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a160:	e010      	b.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a162:	4b5c      	ldr	r3, [pc, #368]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a16a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a16e:	d106      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a176:	d102      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a178:	4b59      	ldr	r3, [pc, #356]	; (800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a17a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a17c:	e002      	b.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a182:	e386      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a184:	e385      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a186:	4b57      	ldr	r3, [pc, #348]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a18a:	e382      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a190:	e37f      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a192:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a196:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a19a:	430b      	orrs	r3, r1
 800a19c:	f040 80a7 	bne.w	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a1a0:	4b4c      	ldr	r3, [pc, #304]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1a4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a1a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1b0:	d055      	beq.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1b8:	f200 8096 	bhi.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a1c2:	f000 8084 	beq.w	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a1cc:	f200 808c 	bhi.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1d6:	d030      	beq.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1de:	f200 8083 	bhi.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d004      	beq.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1ee:	d012      	beq.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a1f0:	e07a      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1f2:	4b38      	ldr	r3, [pc, #224]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1fe:	d107      	bne.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fe0b 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a20e:	e340      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a214:	e33d      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a216:	4b2f      	ldr	r3, [pc, #188]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a21e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a222:	d107      	bne.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a224:	f107 0318 	add.w	r3, r7, #24
 800a228:	4618      	mov	r0, r3
 800a22a:	f000 fb51 	bl	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a232:	e32e      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a238:	e32b      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a23a:	4b26      	ldr	r3, [pc, #152]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a246:	d107      	bne.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a248:	f107 030c 	add.w	r3, r7, #12
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 fc93 	bl	800ab78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a256:	e31c      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a25c:	e319      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a25e:	4b1d      	ldr	r3, [pc, #116]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a262:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a266:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a268:	4b1a      	ldr	r3, [pc, #104]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b04      	cmp	r3, #4
 800a272:	d10c      	bne.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a276:	2b00      	cmp	r3, #0
 800a278:	d109      	bne.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a27a:	4b16      	ldr	r3, [pc, #88]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	08db      	lsrs	r3, r3, #3
 800a280:	f003 0303 	and.w	r3, r3, #3
 800a284:	4a14      	ldr	r2, [pc, #80]	; (800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a286:	fa22 f303 	lsr.w	r3, r2, r3
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a28c:	e01e      	b.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a28e:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a29a:	d106      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2a2:	d102      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2a4:	4b0d      	ldr	r3, [pc, #52]	; (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2a8:	e010      	b.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2aa:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2b6:	d106      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2be:	d102      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2c0:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2c4:	e002      	b.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a2ca:	e2e2      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2cc:	e2e1      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2ce:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d2:	e2de      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2d4:	58024400 	.word	0x58024400
 800a2d8:	03d09000 	.word	0x03d09000
 800a2dc:	003d0900 	.word	0x003d0900
 800a2e0:	00b71b00 	.word	0x00b71b00
 800a2e4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ec:	e2d1      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a2ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a2f6:	430b      	orrs	r3, r1
 800a2f8:	f040 809c 	bne.w	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a2fc:	4b93      	ldr	r3, [pc, #588]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a300:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a304:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a30c:	d054      	beq.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a314:	f200 808b 	bhi.w	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a31e:	f000 8083 	beq.w	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a328:	f200 8081 	bhi.w	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a332:	d02f      	beq.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a33a:	d878      	bhi.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d004      	beq.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a348:	d012      	beq.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a34a:	e070      	b.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a34c:	4b7f      	ldr	r3, [pc, #508]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a358:	d107      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a35a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fd5e 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a368:	e293      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a36e:	e290      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a370:	4b76      	ldr	r3, [pc, #472]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a37c:	d107      	bne.n	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a37e:	f107 0318 	add.w	r3, r7, #24
 800a382:	4618      	mov	r0, r3
 800a384:	f000 faa4 	bl	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38c:	e281      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a392:	e27e      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a394:	4b6d      	ldr	r3, [pc, #436]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a39c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3a0:	d107      	bne.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3a2:	f107 030c 	add.w	r3, r7, #12
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 fbe6 	bl	800ab78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3b0:	e26f      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3b6:	e26c      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3b8:	4b64      	ldr	r3, [pc, #400]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3c0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3c2:	4b62      	ldr	r3, [pc, #392]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0304 	and.w	r3, r3, #4
 800a3ca:	2b04      	cmp	r3, #4
 800a3cc:	d10c      	bne.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d109      	bne.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3d4:	4b5d      	ldr	r3, [pc, #372]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	08db      	lsrs	r3, r3, #3
 800a3da:	f003 0303 	and.w	r3, r3, #3
 800a3de:	4a5c      	ldr	r2, [pc, #368]	; (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a3e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e6:	e01e      	b.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3e8:	4b58      	ldr	r3, [pc, #352]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3f4:	d106      	bne.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3fc:	d102      	bne.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3fe:	4b55      	ldr	r3, [pc, #340]	; (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a400:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a402:	e010      	b.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a404:	4b51      	ldr	r3, [pc, #324]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a40c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a410:	d106      	bne.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a418:	d102      	bne.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a41a:	4b4f      	ldr	r3, [pc, #316]	; (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a41c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a41e:	e002      	b.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a424:	e235      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a426:	e234      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a428:	4b4c      	ldr	r3, [pc, #304]	; (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a42c:	e231      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a432:	e22e      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a434:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a438:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a43c:	430b      	orrs	r3, r1
 800a43e:	f040 808f 	bne.w	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a442:	4b42      	ldr	r3, [pc, #264]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a446:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a44a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a452:	d06b      	beq.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a45a:	d874      	bhi.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a462:	d056      	beq.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a466:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a46a:	d86c      	bhi.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a472:	d03b      	beq.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a47a:	d864      	bhi.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a482:	d021      	beq.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a48a:	d85c      	bhi.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d004      	beq.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a498:	d004      	beq.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a49a:	e054      	b.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a49c:	f7fe fa62 	bl	8008964 <HAL_RCC_GetPCLK1Freq>
 800a4a0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4a2:	e1f6      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4a4:	4b29      	ldr	r3, [pc, #164]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4b0:	d107      	bne.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4b2:	f107 0318 	add.w	r3, r7, #24
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fa0a 	bl	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4c0:	e1e7      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4c6:	e1e4      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4c8:	4b20      	ldr	r3, [pc, #128]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4d4:	d107      	bne.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4d6:	f107 030c 	add.w	r3, r7, #12
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fb4c 	bl	800ab78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e4:	e1d5      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ea:	e1d2      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4ec:	4b17      	ldr	r3, [pc, #92]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0304 	and.w	r3, r3, #4
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d109      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4f8:	4b14      	ldr	r3, [pc, #80]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	08db      	lsrs	r3, r3, #3
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	4a13      	ldr	r2, [pc, #76]	; (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a504:	fa22 f303 	lsr.w	r3, r2, r3
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a50a:	e1c2      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a510:	e1bf      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a512:	4b0e      	ldr	r3, [pc, #56]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a51a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a51e:	d102      	bne.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a520:	4b0c      	ldr	r3, [pc, #48]	; (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a524:	e1b5      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a526:	2300      	movs	r3, #0
 800a528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a52a:	e1b2      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a52c:	4b07      	ldr	r3, [pc, #28]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a538:	d102      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a53a:	4b07      	ldr	r3, [pc, #28]	; (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a53e:	e1a8      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a540:	2300      	movs	r3, #0
 800a542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a544:	e1a5      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a54a:	e1a2      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a54c:	58024400 	.word	0x58024400
 800a550:	03d09000 	.word	0x03d09000
 800a554:	003d0900 	.word	0x003d0900
 800a558:	00b71b00 	.word	0x00b71b00
 800a55c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a560:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a564:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a568:	430b      	orrs	r3, r1
 800a56a:	d173      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a56c:	4b9c      	ldr	r3, [pc, #624]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a56e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a574:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a57c:	d02f      	beq.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a584:	d863      	bhi.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d004      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a592:	d012      	beq.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a594:	e05b      	b.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a596:	4b92      	ldr	r3, [pc, #584]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a59e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5a2:	d107      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a4:	f107 0318 	add.w	r3, r7, #24
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 f991 	bl	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b2:	e16e      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5b8:	e16b      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ba:	4b89      	ldr	r3, [pc, #548]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c6:	d107      	bne.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5c8:	f107 030c 	add.w	r3, r7, #12
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 fad3 	bl	800ab78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d6:	e15c      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5dc:	e159      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5de:	4b80      	ldr	r3, [pc, #512]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5e8:	4b7d      	ldr	r3, [pc, #500]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0304 	and.w	r3, r3, #4
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	d10c      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d109      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5fa:	4b79      	ldr	r3, [pc, #484]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	08db      	lsrs	r3, r3, #3
 800a600:	f003 0303 	and.w	r3, r3, #3
 800a604:	4a77      	ldr	r2, [pc, #476]	; (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a606:	fa22 f303 	lsr.w	r3, r2, r3
 800a60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a60c:	e01e      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a60e:	4b74      	ldr	r3, [pc, #464]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a61a:	d106      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a622:	d102      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a624:	4b70      	ldr	r3, [pc, #448]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a626:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a628:	e010      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a62a:	4b6d      	ldr	r3, [pc, #436]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a636:	d106      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a63e:	d102      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a640:	4b6a      	ldr	r3, [pc, #424]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a642:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a644:	e002      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a64a:	e122      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a64c:	e121      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a652:	e11e      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a654:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a658:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a65c:	430b      	orrs	r3, r1
 800a65e:	d133      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a660:	4b5f      	ldr	r3, [pc, #380]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a668:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d004      	beq.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a676:	d012      	beq.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a678:	e023      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a67a:	4b59      	ldr	r3, [pc, #356]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a686:	d107      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 fbc7 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a696:	e0fc      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a698:	2300      	movs	r3, #0
 800a69a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a69c:	e0f9      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a69e:	4b50      	ldr	r3, [pc, #320]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6aa:	d107      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ac:	f107 0318 	add.w	r3, r7, #24
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 f90d 	bl	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ba:	e0ea      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c0:	e0e7      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c6:	e0e4      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6cc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	f040 808d 	bne.w	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a6d6:	4b42      	ldr	r3, [pc, #264]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6da:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a6de:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6e6:	d06b      	beq.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6ee:	d874      	bhi.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f6:	d056      	beq.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6fe:	d86c      	bhi.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a706:	d03b      	beq.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a70e:	d864      	bhi.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a716:	d021      	beq.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a71e:	d85c      	bhi.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a722:	2b00      	cmp	r3, #0
 800a724:	d004      	beq.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a72c:	d004      	beq.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a72e:	e054      	b.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a730:	f000 f8b8 	bl	800a8a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a734:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a736:	e0ac      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a738:	4b29      	ldr	r3, [pc, #164]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a744:	d107      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a746:	f107 0318 	add.w	r3, r7, #24
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 f8c0 	bl	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a754:	e09d      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a75a:	e09a      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a75c:	4b20      	ldr	r3, [pc, #128]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a768:	d107      	bne.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a76a:	f107 030c 	add.w	r3, r7, #12
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 fa02 	bl	800ab78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a778:	e08b      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a77e:	e088      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a780:	4b17      	ldr	r3, [pc, #92]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	2b04      	cmp	r3, #4
 800a78a:	d109      	bne.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a78c:	4b14      	ldr	r3, [pc, #80]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	08db      	lsrs	r3, r3, #3
 800a792:	f003 0303 	and.w	r3, r3, #3
 800a796:	4a13      	ldr	r2, [pc, #76]	; (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a798:	fa22 f303 	lsr.w	r3, r2, r3
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a79e:	e078      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a4:	e075      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a7a6:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7b2:	d102      	bne.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b8:	e06b      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7be:	e068      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7c0:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7cc:	d102      	bne.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a7ce:	4b07      	ldr	r3, [pc, #28]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d2:	e05e      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7d8:	e05b      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7de:	e058      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7e0:	58024400 	.word	0x58024400
 800a7e4:	03d09000 	.word	0x03d09000
 800a7e8:	003d0900 	.word	0x003d0900
 800a7ec:	00b71b00 	.word	0x00b71b00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a7f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7f4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a7f8:	430b      	orrs	r3, r1
 800a7fa:	d148      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a7fc:	4b27      	ldr	r3, [pc, #156]	; (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a800:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a804:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a80c:	d02a      	beq.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a814:	d838      	bhi.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d004      	beq.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a822:	d00d      	beq.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a824:	e030      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a826:	4b1d      	ldr	r3, [pc, #116]	; (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a82e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a832:	d102      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a834:	4b1a      	ldr	r3, [pc, #104]	; (800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a838:	e02b      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a83e:	e028      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a840:	4b16      	ldr	r3, [pc, #88]	; (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a84c:	d107      	bne.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a84e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a852:	4618      	mov	r0, r3
 800a854:	f000 fae4 	bl	800ae20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a85c:	e019      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a862:	e016      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a864:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a86c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a870:	d107      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a872:	f107 0318 	add.w	r3, r7, #24
 800a876:	4618      	mov	r0, r3
 800a878:	f000 f82a 	bl	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a880:	e007      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a886:	e004      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a88c:	e001      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a894:	4618      	mov	r0, r3
 800a896:	3740      	adds	r7, #64	; 0x40
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	58024400 	.word	0x58024400
 800a8a0:	00b71b00 	.word	0x00b71b00

0800a8a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a8a8:	f7fe f82c 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	4b06      	ldr	r3, [pc, #24]	; (800a8c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	091b      	lsrs	r3, r3, #4
 800a8b4:	f003 0307 	and.w	r3, r3, #7
 800a8b8:	4904      	ldr	r1, [pc, #16]	; (800a8cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a8ba:	5ccb      	ldrb	r3, [r1, r3]
 800a8bc:	f003 031f 	and.w	r3, r3, #31
 800a8c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	58024400 	.word	0x58024400
 800a8cc:	0801bcd8 	.word	0x0801bcd8

0800a8d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b089      	sub	sp, #36	; 0x24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8d8:	4ba1      	ldr	r3, [pc, #644]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8dc:	f003 0303 	and.w	r3, r3, #3
 800a8e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a8e2:	4b9f      	ldr	r3, [pc, #636]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e6:	0b1b      	lsrs	r3, r3, #12
 800a8e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a8ee:	4b9c      	ldr	r3, [pc, #624]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f2:	091b      	lsrs	r3, r3, #4
 800a8f4:	f003 0301 	and.w	r3, r3, #1
 800a8f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a8fa:	4b99      	ldr	r3, [pc, #612]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fe:	08db      	lsrs	r3, r3, #3
 800a900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	fb02 f303 	mul.w	r3, r2, r3
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f000 8111 	beq.w	800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	2b02      	cmp	r3, #2
 800a922:	f000 8083 	beq.w	800aa2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	f200 80a1 	bhi.w	800aa70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d003      	beq.n	800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d056      	beq.n	800a9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a93a:	e099      	b.n	800aa70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a93c:	4b88      	ldr	r3, [pc, #544]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 0320 	and.w	r3, r3, #32
 800a944:	2b00      	cmp	r3, #0
 800a946:	d02d      	beq.n	800a9a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a948:	4b85      	ldr	r3, [pc, #532]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	08db      	lsrs	r3, r3, #3
 800a94e:	f003 0303 	and.w	r3, r3, #3
 800a952:	4a84      	ldr	r2, [pc, #528]	; (800ab64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a954:	fa22 f303 	lsr.w	r3, r2, r3
 800a958:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	ee07 3a90 	vmov	s15, r3
 800a960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a972:	4b7b      	ldr	r3, [pc, #492]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97a:	ee07 3a90 	vmov	s15, r3
 800a97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a982:	ed97 6a03 	vldr	s12, [r7, #12]
 800a986:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a99e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9a2:	e087      	b.n	800aab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9b6:	4b6a      	ldr	r3, [pc, #424]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9be:	ee07 3a90 	vmov	s15, r3
 800a9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9e6:	e065      	b.n	800aab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	ee07 3a90 	vmov	s15, r3
 800a9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fa:	4b59      	ldr	r3, [pc, #356]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa2a:	e043      	b.n	800aab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ab74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3e:	4b48      	ldr	r3, [pc, #288]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa52:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa6e:	e021      	b.n	800aab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	ee07 3a90 	vmov	s15, r3
 800aa76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ab70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa82:	4b37      	ldr	r3, [pc, #220]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa92:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa96:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aab2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aab4:	4b2a      	ldr	r3, [pc, #168]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab8:	0a5b      	lsrs	r3, r3, #9
 800aaba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aabe:	ee07 3a90 	vmov	s15, r3
 800aac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aace:	edd7 6a07 	vldr	s13, [r7, #28]
 800aad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aada:	ee17 2a90 	vmov	r2, s15
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aae2:	4b1f      	ldr	r3, [pc, #124]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae6:	0c1b      	lsrs	r3, r3, #16
 800aae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaec:	ee07 3a90 	vmov	s15, r3
 800aaf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aafc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab08:	ee17 2a90 	vmov	r2, s15
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ab10:	4b13      	ldr	r3, [pc, #76]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab14:	0e1b      	lsrs	r3, r3, #24
 800ab16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab36:	ee17 2a90 	vmov	r2, s15
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab3e:	e008      	b.n	800ab52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	609a      	str	r2, [r3, #8]
}
 800ab52:	bf00      	nop
 800ab54:	3724      	adds	r7, #36	; 0x24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	58024400 	.word	0x58024400
 800ab64:	03d09000 	.word	0x03d09000
 800ab68:	46000000 	.word	0x46000000
 800ab6c:	4c742400 	.word	0x4c742400
 800ab70:	4a742400 	.word	0x4a742400
 800ab74:	4b371b00 	.word	0x4b371b00

0800ab78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b089      	sub	sp, #36	; 0x24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab80:	4ba1      	ldr	r3, [pc, #644]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab84:	f003 0303 	and.w	r3, r3, #3
 800ab88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ab8a:	4b9f      	ldr	r3, [pc, #636]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab8e:	0d1b      	lsrs	r3, r3, #20
 800ab90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab96:	4b9c      	ldr	r3, [pc, #624]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aba2:	4b99      	ldr	r3, [pc, #612]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba6:	08db      	lsrs	r3, r3, #3
 800aba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	fb02 f303 	mul.w	r3, r2, r3
 800abb2:	ee07 3a90 	vmov	s15, r3
 800abb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 8111 	beq.w	800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	2b02      	cmp	r3, #2
 800abca:	f000 8083 	beq.w	800acd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	f200 80a1 	bhi.w	800ad18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d056      	beq.n	800ac90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800abe2:	e099      	b.n	800ad18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abe4:	4b88      	ldr	r3, [pc, #544]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0320 	and.w	r3, r3, #32
 800abec:	2b00      	cmp	r3, #0
 800abee:	d02d      	beq.n	800ac4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abf0:	4b85      	ldr	r3, [pc, #532]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	08db      	lsrs	r3, r3, #3
 800abf6:	f003 0303 	and.w	r3, r3, #3
 800abfa:	4a84      	ldr	r2, [pc, #528]	; (800ae0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800abfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ac00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	ee07 3a90 	vmov	s15, r3
 800ac08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac1a:	4b7b      	ldr	r3, [pc, #492]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac22:	ee07 3a90 	vmov	s15, r3
 800ac26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac4a:	e087      	b.n	800ad5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac5e:	4b6a      	ldr	r3, [pc, #424]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac72:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac8e:	e065      	b.n	800ad5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca2:	4b59      	ldr	r3, [pc, #356]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acaa:	ee07 3a90 	vmov	s15, r3
 800acae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acd2:	e043      	b.n	800ad5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	ee07 3a90 	vmov	s15, r3
 800acda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ace2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace6:	4b48      	ldr	r3, [pc, #288]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad16:	e021      	b.n	800ad5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	ee07 3a90 	vmov	s15, r3
 800ad1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad2a:	4b37      	ldr	r3, [pc, #220]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad5c:	4b2a      	ldr	r3, [pc, #168]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad60:	0a5b      	lsrs	r3, r3, #9
 800ad62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad66:	ee07 3a90 	vmov	s15, r3
 800ad6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad82:	ee17 2a90 	vmov	r2, s15
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ad8a:	4b1f      	ldr	r3, [pc, #124]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8e:	0c1b      	lsrs	r3, r3, #16
 800ad90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad94:	ee07 3a90 	vmov	s15, r3
 800ad98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ada0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ada4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ada8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb0:	ee17 2a90 	vmov	r2, s15
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800adb8:	4b13      	ldr	r3, [pc, #76]	; (800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbc:	0e1b      	lsrs	r3, r3, #24
 800adbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800add2:	edd7 6a07 	vldr	s13, [r7, #28]
 800add6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adde:	ee17 2a90 	vmov	r2, s15
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ade6:	e008      	b.n	800adfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	609a      	str	r2, [r3, #8]
}
 800adfa:	bf00      	nop
 800adfc:	3724      	adds	r7, #36	; 0x24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	58024400 	.word	0x58024400
 800ae0c:	03d09000 	.word	0x03d09000
 800ae10:	46000000 	.word	0x46000000
 800ae14:	4c742400 	.word	0x4c742400
 800ae18:	4a742400 	.word	0x4a742400
 800ae1c:	4b371b00 	.word	0x4b371b00

0800ae20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b089      	sub	sp, #36	; 0x24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae28:	4ba0      	ldr	r3, [pc, #640]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2c:	f003 0303 	and.w	r3, r3, #3
 800ae30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ae32:	4b9e      	ldr	r3, [pc, #632]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae36:	091b      	lsrs	r3, r3, #4
 800ae38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ae3e:	4b9b      	ldr	r3, [pc, #620]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae42:	f003 0301 	and.w	r3, r3, #1
 800ae46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae48:	4b98      	ldr	r3, [pc, #608]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae4c:	08db      	lsrs	r3, r3, #3
 800ae4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	fb02 f303 	mul.w	r3, r2, r3
 800ae58:	ee07 3a90 	vmov	s15, r3
 800ae5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f000 8111 	beq.w	800b08e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	f000 8083 	beq.w	800af7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	f200 80a1 	bhi.w	800afbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d056      	beq.n	800af36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ae88:	e099      	b.n	800afbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae8a:	4b88      	ldr	r3, [pc, #544]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0320 	and.w	r3, r3, #32
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d02d      	beq.n	800aef2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae96:	4b85      	ldr	r3, [pc, #532]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	08db      	lsrs	r3, r3, #3
 800ae9c:	f003 0303 	and.w	r3, r3, #3
 800aea0:	4a83      	ldr	r2, [pc, #524]	; (800b0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800aea2:	fa22 f303 	lsr.w	r3, r2, r3
 800aea6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	ee07 3a90 	vmov	s15, r3
 800aeb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aec0:	4b7a      	ldr	r3, [pc, #488]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec8:	ee07 3a90 	vmov	s15, r3
 800aecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aed0:	ed97 6a03 	vldr	s12, [r7, #12]
 800aed4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aedc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aef0:	e087      	b.n	800b002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	ee07 3a90 	vmov	s15, r3
 800aef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af04:	4b69      	ldr	r3, [pc, #420]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af0c:	ee07 3a90 	vmov	s15, r3
 800af10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af14:	ed97 6a03 	vldr	s12, [r7, #12]
 800af18:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af34:	e065      	b.n	800b002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	ee07 3a90 	vmov	s15, r3
 800af3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b0bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800af44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af48:	4b58      	ldr	r3, [pc, #352]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af50:	ee07 3a90 	vmov	s15, r3
 800af54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af58:	ed97 6a03 	vldr	s12, [r7, #12]
 800af5c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af78:	e043      	b.n	800b002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	ee07 3a90 	vmov	s15, r3
 800af80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800af88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8c:	4b47      	ldr	r3, [pc, #284]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af94:	ee07 3a90 	vmov	s15, r3
 800af98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800afa0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afbc:	e021      	b.n	800b002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	ee07 3a90 	vmov	s15, r3
 800afc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800afcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd0:	4b36      	ldr	r3, [pc, #216]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe0:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b000:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b002:	4b2a      	ldr	r3, [pc, #168]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b006:	0a5b      	lsrs	r3, r3, #9
 800b008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00c:	ee07 3a90 	vmov	s15, r3
 800b010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b01c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b028:	ee17 2a90 	vmov	r2, s15
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b030:	4b1e      	ldr	r3, [pc, #120]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b034:	0c1b      	lsrs	r3, r3, #16
 800b036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b04a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b04e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b056:	ee17 2a90 	vmov	r2, s15
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b05e:	4b13      	ldr	r3, [pc, #76]	; (800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b062:	0e1b      	lsrs	r3, r3, #24
 800b064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b068:	ee07 3a90 	vmov	s15, r3
 800b06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b074:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b078:	edd7 6a07 	vldr	s13, [r7, #28]
 800b07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b084:	ee17 2a90 	vmov	r2, s15
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b08c:	e008      	b.n	800b0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	609a      	str	r2, [r3, #8]
}
 800b0a0:	bf00      	nop
 800b0a2:	3724      	adds	r7, #36	; 0x24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	58024400 	.word	0x58024400
 800b0b0:	03d09000 	.word	0x03d09000
 800b0b4:	46000000 	.word	0x46000000
 800b0b8:	4c742400 	.word	0x4c742400
 800b0bc:	4a742400 	.word	0x4a742400
 800b0c0:	4b371b00 	.word	0x4b371b00

0800b0c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b0d2:	4b53      	ldr	r3, [pc, #332]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	2b03      	cmp	r3, #3
 800b0dc:	d101      	bne.n	800b0e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e099      	b.n	800b216 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b0e2:	4b4f      	ldr	r3, [pc, #316]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a4e      	ldr	r2, [pc, #312]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b0e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b0ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0ee:	f7f6 f96d 	bl	80013cc <HAL_GetTick>
 800b0f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0f4:	e008      	b.n	800b108 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0f6:	f7f6 f969 	bl	80013cc <HAL_GetTick>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	2b02      	cmp	r3, #2
 800b102:	d901      	bls.n	800b108 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e086      	b.n	800b216 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b108:	4b45      	ldr	r3, [pc, #276]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1f0      	bne.n	800b0f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b114:	4b42      	ldr	r3, [pc, #264]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b118:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	031b      	lsls	r3, r3, #12
 800b122:	493f      	ldr	r1, [pc, #252]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b124:	4313      	orrs	r3, r2
 800b126:	628b      	str	r3, [r1, #40]	; 0x28
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	3b01      	subs	r3, #1
 800b138:	025b      	lsls	r3, r3, #9
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	431a      	orrs	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	3b01      	subs	r3, #1
 800b144:	041b      	lsls	r3, r3, #16
 800b146:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b14a:	431a      	orrs	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	3b01      	subs	r3, #1
 800b152:	061b      	lsls	r3, r3, #24
 800b154:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b158:	4931      	ldr	r1, [pc, #196]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b15a:	4313      	orrs	r3, r2
 800b15c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b15e:	4b30      	ldr	r3, [pc, #192]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b162:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	492d      	ldr	r1, [pc, #180]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b170:	4b2b      	ldr	r3, [pc, #172]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	f023 0220 	bic.w	r2, r3, #32
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	4928      	ldr	r1, [pc, #160]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b17e:	4313      	orrs	r3, r2
 800b180:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b182:	4b27      	ldr	r3, [pc, #156]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b186:	4a26      	ldr	r2, [pc, #152]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b188:	f023 0310 	bic.w	r3, r3, #16
 800b18c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b18e:	4b24      	ldr	r3, [pc, #144]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b192:	4b24      	ldr	r3, [pc, #144]	; (800b224 <RCCEx_PLL2_Config+0x160>)
 800b194:	4013      	ands	r3, r2
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	69d2      	ldr	r2, [r2, #28]
 800b19a:	00d2      	lsls	r2, r2, #3
 800b19c:	4920      	ldr	r1, [pc, #128]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b1a2:	4b1f      	ldr	r3, [pc, #124]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a6:	4a1e      	ldr	r2, [pc, #120]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b1a8:	f043 0310 	orr.w	r3, r3, #16
 800b1ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d106      	bne.n	800b1c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b1b4:	4b1a      	ldr	r3, [pc, #104]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b8:	4a19      	ldr	r2, [pc, #100]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b1ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1c0:	e00f      	b.n	800b1e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d106      	bne.n	800b1d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b1c8:	4b15      	ldr	r3, [pc, #84]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1cc:	4a14      	ldr	r2, [pc, #80]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b1ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1d4:	e005      	b.n	800b1e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b1d6:	4b12      	ldr	r3, [pc, #72]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1da:	4a11      	ldr	r2, [pc, #68]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b1dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b1e2:	4b0f      	ldr	r3, [pc, #60]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a0e      	ldr	r2, [pc, #56]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b1e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1ee:	f7f6 f8ed 	bl	80013cc <HAL_GetTick>
 800b1f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1f4:	e008      	b.n	800b208 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1f6:	f7f6 f8e9 	bl	80013cc <HAL_GetTick>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	2b02      	cmp	r3, #2
 800b202:	d901      	bls.n	800b208 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b204:	2303      	movs	r3, #3
 800b206:	e006      	b.n	800b216 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b208:	4b05      	ldr	r3, [pc, #20]	; (800b220 <RCCEx_PLL2_Config+0x15c>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b210:	2b00      	cmp	r3, #0
 800b212:	d0f0      	beq.n	800b1f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b214:	7bfb      	ldrb	r3, [r7, #15]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	58024400 	.word	0x58024400
 800b224:	ffff0007 	.word	0xffff0007

0800b228 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b236:	4b53      	ldr	r3, [pc, #332]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23a:	f003 0303 	and.w	r3, r3, #3
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d101      	bne.n	800b246 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	e099      	b.n	800b37a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b246:	4b4f      	ldr	r3, [pc, #316]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a4e      	ldr	r2, [pc, #312]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b24c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b252:	f7f6 f8bb 	bl	80013cc <HAL_GetTick>
 800b256:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b258:	e008      	b.n	800b26c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b25a:	f7f6 f8b7 	bl	80013cc <HAL_GetTick>
 800b25e:	4602      	mov	r2, r0
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	2b02      	cmp	r3, #2
 800b266:	d901      	bls.n	800b26c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	e086      	b.n	800b37a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b26c:	4b45      	ldr	r3, [pc, #276]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1f0      	bne.n	800b25a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b278:	4b42      	ldr	r3, [pc, #264]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	051b      	lsls	r3, r3, #20
 800b286:	493f      	ldr	r1, [pc, #252]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b288:	4313      	orrs	r3, r2
 800b28a:	628b      	str	r3, [r1, #40]	; 0x28
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	3b01      	subs	r3, #1
 800b292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	3b01      	subs	r3, #1
 800b29c:	025b      	lsls	r3, r3, #9
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	041b      	lsls	r3, r3, #16
 800b2aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b2ae:	431a      	orrs	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	061b      	lsls	r3, r3, #24
 800b2b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b2bc:	4931      	ldr	r1, [pc, #196]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b2c2:	4b30      	ldr	r3, [pc, #192]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	492d      	ldr	r1, [pc, #180]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b2d4:	4b2b      	ldr	r3, [pc, #172]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	4928      	ldr	r1, [pc, #160]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b2e6:	4b27      	ldr	r3, [pc, #156]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ea:	4a26      	ldr	r2, [pc, #152]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b2ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b2f2:	4b24      	ldr	r3, [pc, #144]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b2f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2f6:	4b24      	ldr	r3, [pc, #144]	; (800b388 <RCCEx_PLL3_Config+0x160>)
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	69d2      	ldr	r2, [r2, #28]
 800b2fe:	00d2      	lsls	r2, r2, #3
 800b300:	4920      	ldr	r1, [pc, #128]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b302:	4313      	orrs	r3, r2
 800b304:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b306:	4b1f      	ldr	r3, [pc, #124]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30a:	4a1e      	ldr	r2, [pc, #120]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b30c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d106      	bne.n	800b326 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b318:	4b1a      	ldr	r3, [pc, #104]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31c:	4a19      	ldr	r2, [pc, #100]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b31e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b322:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b324:	e00f      	b.n	800b346 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d106      	bne.n	800b33a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b32c:	4b15      	ldr	r3, [pc, #84]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	4a14      	ldr	r2, [pc, #80]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b336:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b338:	e005      	b.n	800b346 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b33a:	4b12      	ldr	r3, [pc, #72]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33e:	4a11      	ldr	r2, [pc, #68]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b344:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b346:	4b0f      	ldr	r3, [pc, #60]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a0e      	ldr	r2, [pc, #56]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b34c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b352:	f7f6 f83b 	bl	80013cc <HAL_GetTick>
 800b356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b358:	e008      	b.n	800b36c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b35a:	f7f6 f837 	bl	80013cc <HAL_GetTick>
 800b35e:	4602      	mov	r2, r0
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	2b02      	cmp	r3, #2
 800b366:	d901      	bls.n	800b36c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b368:	2303      	movs	r3, #3
 800b36a:	e006      	b.n	800b37a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b36c:	4b05      	ldr	r3, [pc, #20]	; (800b384 <RCCEx_PLL3_Config+0x15c>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b374:	2b00      	cmp	r3, #0
 800b376:	d0f0      	beq.n	800b35a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b378:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	58024400 	.word	0x58024400
 800b388:	ffff0007 	.word	0xffff0007

0800b38c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08a      	sub	sp, #40	; 0x28
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d101      	bne.n	800b39e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	e075      	b.n	800b48a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d105      	bne.n	800b3b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7f5 fc23 	bl	8000bfc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2204      	movs	r2, #4
 800b3ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f868 	bl	800b494 <HAL_SD_InitCard>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e05d      	b.n	800b48a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b3ce:	f107 0308 	add.w	r3, r7, #8
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fdb5 	bl	800bf44 <HAL_SD_GetCardStatus>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e052      	b.n	800b48a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b3e4:	7e3b      	ldrb	r3, [r7, #24]
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b3ea:	7e7b      	ldrb	r3, [r7, #25]
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d10a      	bne.n	800b40e <HAL_SD_Init+0x82>
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d102      	bne.n	800b404 <HAL_SD_Init+0x78>
 800b3fe:	6a3b      	ldr	r3, [r7, #32]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d004      	beq.n	800b40e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b40a:	659a      	str	r2, [r3, #88]	; 0x58
 800b40c:	e00b      	b.n	800b426 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b412:	2b01      	cmp	r3, #1
 800b414:	d104      	bne.n	800b420 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b41c:	659a      	str	r2, [r3, #88]	; 0x58
 800b41e:	e002      	b.n	800b426 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fe73 	bl	800c118 <HAL_SD_ConfigWideBusOperation>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	e026      	b.n	800b48a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b43c:	f7f5 ffc6 	bl	80013cc <HAL_GetTick>
 800b440:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b442:	e011      	b.n	800b468 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b444:	f7f5 ffc2 	bl	80013cc <HAL_GetTick>
 800b448:	4602      	mov	r2, r0
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b452:	d109      	bne.n	800b468 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b45a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800b464:	2303      	movs	r3, #3
 800b466:	e010      	b.n	800b48a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 ff67 	bl	800c33c <HAL_SD_GetCardState>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b04      	cmp	r3, #4
 800b472:	d1e7      	bne.n	800b444 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3728      	adds	r7, #40	; 0x28
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
	...

0800b494 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b494:	b590      	push	{r4, r7, lr}
 800b496:	b08d      	sub	sp, #52	; 0x34
 800b498:	af02      	add	r7, sp, #8
 800b49a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b49c:	2300      	movs	r3, #0
 800b49e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b4ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b4b0:	f04f 0100 	mov.w	r1, #0
 800b4b4:	f7fe fc76 	bl	8009da4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b4b8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d109      	bne.n	800b4d4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b4ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e070      	b.n	800b5b6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	0a1b      	lsrs	r3, r3, #8
 800b4d8:	4a39      	ldr	r2, [pc, #228]	; (800b5c0 <HAL_SD_InitCard+0x12c>)
 800b4da:	fba2 2303 	umull	r2, r3, r2, r3
 800b4de:	091b      	lsrs	r3, r3, #4
 800b4e0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681c      	ldr	r4, [r3, #0]
 800b4e6:	466a      	mov	r2, sp
 800b4e8:	f107 0318 	add.w	r3, r7, #24
 800b4ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b4f0:	e882 0003 	stmia.w	r2, {r0, r1}
 800b4f4:	f107 030c 	add.w	r3, r7, #12
 800b4f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f002 f91c 	bl	800d738 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4618      	mov	r0, r3
 800b506:	f002 f95f 	bl	800d7c8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d005      	beq.n	800b51c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b516:	fbb2 f3f3 	udiv	r3, r2, r3
 800b51a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d007      	beq.n	800b532 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800b522:	4a28      	ldr	r2, [pc, #160]	; (800b5c4 <HAL_SD_InitCard+0x130>)
 800b524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b526:	fbb2 f3f3 	udiv	r3, r2, r3
 800b52a:	3301      	adds	r3, #1
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7f5 ff59 	bl	80013e4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fff0 	bl	800c518 <SD_PowerON>
 800b538:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b53a:	6a3b      	ldr	r3, [r7, #32]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	431a      	orrs	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	e02e      	b.n	800b5b6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 ff0f 	bl	800c37c <SD_InitCard>
 800b55e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b560:	6a3b      	ldr	r3, [r7, #32]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00b      	beq.n	800b57e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b572:	6a3b      	ldr	r3, [r7, #32]
 800b574:	431a      	orrs	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e01b      	b.n	800b5b6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b586:	4618      	mov	r0, r3
 800b588:	f002 f9b4 	bl	800d8f4 <SDMMC_CmdBlockLength>
 800b58c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b58e:	6a3b      	ldr	r3, [r7, #32]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00f      	beq.n	800b5b4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a0b      	ldr	r2, [pc, #44]	; (800b5c8 <HAL_SD_InitCard+0x134>)
 800b59a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e000      	b.n	800b5b6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	372c      	adds	r7, #44	; 0x2c
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd90      	pop	{r4, r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	014f8b59 	.word	0x014f8b59
 800b5c4:	00012110 	.word	0x00012110
 800b5c8:	1fe00fff 	.word	0x1fe00fff

0800b5cc <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b092      	sub	sp, #72	; 0x48
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
 800b5d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b5da:	f7f5 fef7 	bl	80013cc <HAL_GetTick>
 800b5de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d107      	bne.n	800b5fe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e167      	b.n	800b8ce <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b01      	cmp	r3, #1
 800b608:	f040 815a 	bne.w	800b8c0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	441a      	add	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d907      	bls.n	800b630 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b624:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	e14e      	b.n	800b8ce <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2203      	movs	r2, #3
 800b634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2200      	movs	r2, #0
 800b63e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b644:	2b01      	cmp	r3, #1
 800b646:	d002      	beq.n	800b64e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	025b      	lsls	r3, r3, #9
 800b64c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b64e:	f04f 33ff 	mov.w	r3, #4294967295
 800b652:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	025b      	lsls	r3, r3, #9
 800b658:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b65a:	2390      	movs	r3, #144	; 0x90
 800b65c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b65e:	2302      	movs	r3, #2
 800b660:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b662:	2300      	movs	r3, #0
 800b664:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b666:	2300      	movs	r3, #0
 800b668:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f107 0214 	add.w	r2, r7, #20
 800b672:	4611      	mov	r1, r2
 800b674:	4618      	mov	r0, r3
 800b676:	f002 f911 	bl	800d89c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68da      	ldr	r2, [r3, #12]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b688:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d90a      	bls.n	800b6a6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2202      	movs	r2, #2
 800b694:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b69c:	4618      	mov	r0, r3
 800b69e:	f002 f96f 	bl	800d980 <SDMMC_CmdReadMultiBlock>
 800b6a2:	6478      	str	r0, [r7, #68]	; 0x44
 800b6a4:	e009      	b.n	800b6ba <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f002 f941 	bl	800d93a <SDMMC_CmdReadSingleBlock>
 800b6b8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b6ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d012      	beq.n	800b6e6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a84      	ldr	r2, [pc, #528]	; (800b8d8 <HAL_SD_ReadBlocks+0x30c>)
 800b6c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ce:	431a      	orrs	r2, r3
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e0f3      	b.n	800b8ce <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b6ea:	e058      	b.n	800b79e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d033      	beq.n	800b762 <HAL_SD_ReadBlocks+0x196>
 800b6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6fc:	2b1f      	cmp	r3, #31
 800b6fe:	d930      	bls.n	800b762 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800b700:	2300      	movs	r3, #0
 800b702:	643b      	str	r3, [r7, #64]	; 0x40
 800b704:	e027      	b.n	800b756 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f002 f83e 	bl	800d78c <SDMMC_ReadFIFO>
 800b710:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b714:	b2da      	uxtb	r2, r3
 800b716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b718:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71c:	3301      	adds	r3, #1
 800b71e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	0a1b      	lsrs	r3, r3, #8
 800b724:	b2da      	uxtb	r2, r3
 800b726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b728:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72c:	3301      	adds	r3, #1
 800b72e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	0c1b      	lsrs	r3, r3, #16
 800b734:	b2da      	uxtb	r2, r3
 800b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b738:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	3301      	adds	r3, #1
 800b73e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b742:	0e1b      	lsrs	r3, r3, #24
 800b744:	b2da      	uxtb	r2, r3
 800b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b748:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74c:	3301      	adds	r3, #1
 800b74e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 800b750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b752:	3301      	adds	r3, #1
 800b754:	643b      	str	r3, [r7, #64]	; 0x40
 800b756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b758:	2b07      	cmp	r3, #7
 800b75a:	d9d4      	bls.n	800b706 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800b75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b75e:	3b20      	subs	r3, #32
 800b760:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b762:	f7f5 fe33 	bl	80013cc <HAL_GetTick>
 800b766:	4602      	mov	r2, r0
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b76e:	429a      	cmp	r2, r3
 800b770:	d902      	bls.n	800b778 <HAL_SD_ReadBlocks+0x1ac>
 800b772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b774:	2b00      	cmp	r3, #0
 800b776:	d112      	bne.n	800b79e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a56      	ldr	r2, [pc, #344]	; (800b8d8 <HAL_SD_ReadBlocks+0x30c>)
 800b77e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b784:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800b79a:	2303      	movs	r3, #3
 800b79c:	e097      	b.n	800b8ce <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d09f      	beq.n	800b6ec <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68da      	ldr	r2, [r3, #12]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7ba:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d022      	beq.n	800b810 <HAL_SD_ReadBlocks+0x244>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d91f      	bls.n	800b810 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	d01b      	beq.n	800b810 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f002 f939 	bl	800da54 <SDMMC_CmdStopTransfer>
 800b7e2:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800b7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d012      	beq.n	800b810 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a3a      	ldr	r2, [pc, #232]	; (800b8d8 <HAL_SD_ReadBlocks+0x30c>)
 800b7f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7f8:	431a      	orrs	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2201      	movs	r2, #1
 800b802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e05e      	b.n	800b8ce <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b816:	f003 0308 	and.w	r3, r3, #8
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d012      	beq.n	800b844 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a2d      	ldr	r2, [pc, #180]	; (800b8d8 <HAL_SD_ReadBlocks+0x30c>)
 800b824:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b82a:	f043 0208 	orr.w	r2, r3, #8
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2200      	movs	r2, #0
 800b83e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	e044      	b.n	800b8ce <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84a:	f003 0302 	and.w	r3, r3, #2
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d012      	beq.n	800b878 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a20      	ldr	r2, [pc, #128]	; (800b8d8 <HAL_SD_ReadBlocks+0x30c>)
 800b858:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85e:	f043 0202 	orr.w	r2, r3, #2
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	e02a      	b.n	800b8ce <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87e:	f003 0320 	and.w	r3, r3, #32
 800b882:	2b00      	cmp	r3, #0
 800b884:	d012      	beq.n	800b8ac <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a13      	ldr	r2, [pc, #76]	; (800b8d8 <HAL_SD_ReadBlocks+0x30c>)
 800b88c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b892:	f043 0220 	orr.w	r2, r3, #32
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e010      	b.n	800b8ce <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a0a      	ldr	r2, [pc, #40]	; (800b8dc <HAL_SD_ReadBlocks+0x310>)
 800b8b2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e006      	b.n	800b8ce <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
  }
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3748      	adds	r7, #72	; 0x48
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	1fe00fff 	.word	0x1fe00fff
 800b8dc:	18000f3a 	.word	0x18000f3a

0800b8e0 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b092      	sub	sp, #72	; 0x48
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b8ee:	f7f5 fd6d 	bl	80013cc <HAL_GetTick>
 800b8f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d107      	bne.n	800b912 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b906:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e16b      	b.n	800bbea <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	f040 815e 	bne.w	800bbdc <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	441a      	add	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b930:	429a      	cmp	r2, r3
 800b932:	d907      	bls.n	800b944 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b938:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e152      	b.n	800bbea <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2203      	movs	r2, #3
 800b948:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2200      	movs	r2, #0
 800b952:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d002      	beq.n	800b962 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95e:	025b      	lsls	r3, r3, #9
 800b960:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b962:	f04f 33ff 	mov.w	r3, #4294967295
 800b966:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	025b      	lsls	r3, r3, #9
 800b96c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b96e:	2390      	movs	r3, #144	; 0x90
 800b970:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b972:	2300      	movs	r3, #0
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b976:	2300      	movs	r3, #0
 800b978:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b97a:	2300      	movs	r3, #0
 800b97c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f107 0218 	add.w	r2, r7, #24
 800b986:	4611      	mov	r1, r2
 800b988:	4618      	mov	r0, r3
 800b98a:	f001 ff87 	bl	800d89c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68da      	ldr	r2, [r3, #12]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b99c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d90a      	bls.n	800b9ba <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f002 f82b 	bl	800da0c <SDMMC_CmdWriteMultiBlock>
 800b9b6:	6478      	str	r0, [r7, #68]	; 0x44
 800b9b8:	e009      	b.n	800b9ce <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2210      	movs	r2, #16
 800b9be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f001 fffd 	bl	800d9c6 <SDMMC_CmdWriteSingleBlock>
 800b9cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b9ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d012      	beq.n	800b9fa <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a86      	ldr	r2, [pc, #536]	; (800bbf4 <HAL_SD_WriteBlocks+0x314>)
 800b9da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e0f7      	b.n	800bbea <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800b9fe:	e05c      	b.n	800baba <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d037      	beq.n	800ba7e <HAL_SD_WriteBlocks+0x19e>
 800ba0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba10:	2b1f      	cmp	r3, #31
 800ba12:	d934      	bls.n	800ba7e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800ba14:	2300      	movs	r3, #0
 800ba16:	643b      	str	r3, [r7, #64]	; 0x40
 800ba18:	e02b      	b.n	800ba72 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800ba1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba22:	3301      	adds	r3, #1
 800ba24:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800ba26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	021a      	lsls	r2, r3, #8
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba34:	3301      	adds	r3, #1
 800ba36:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800ba38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	041a      	lsls	r2, r3, #16
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba46:	3301      	adds	r3, #1
 800ba48:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800ba4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	061a      	lsls	r2, r3, #24
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba58:	3301      	adds	r3, #1
 800ba5a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f107 0214 	add.w	r2, r7, #20
 800ba64:	4611      	mov	r1, r2
 800ba66:	4618      	mov	r0, r3
 800ba68:	f001 fe9d 	bl	800d7a6 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800ba6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba6e:	3301      	adds	r3, #1
 800ba70:	643b      	str	r3, [r7, #64]	; 0x40
 800ba72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba74:	2b07      	cmp	r3, #7
 800ba76:	d9d0      	bls.n	800ba1a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ba78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba7a:	3b20      	subs	r3, #32
 800ba7c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800ba7e:	f7f5 fca5 	bl	80013cc <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d902      	bls.n	800ba94 <HAL_SD_WriteBlocks+0x1b4>
 800ba8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d112      	bne.n	800baba <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a56      	ldr	r2, [pc, #344]	; (800bbf4 <HAL_SD_WriteBlocks+0x314>)
 800ba9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa2:	431a      	orrs	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800bab6:	2303      	movs	r3, #3
 800bab8:	e097      	b.n	800bbea <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d09b      	beq.n	800ba00 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68da      	ldr	r2, [r3, #12]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bad6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d022      	beq.n	800bb2c <HAL_SD_WriteBlocks+0x24c>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d91f      	bls.n	800bb2c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d01b      	beq.n	800bb2c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f001 ffab 	bl	800da54 <SDMMC_CmdStopTransfer>
 800bafe:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800bb00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d012      	beq.n	800bb2c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a3a      	ldr	r2, [pc, #232]	; (800bbf4 <HAL_SD_WriteBlocks+0x314>)
 800bb0c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb14:	431a      	orrs	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e05e      	b.n	800bbea <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb32:	f003 0308 	and.w	r3, r3, #8
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d012      	beq.n	800bb60 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a2d      	ldr	r2, [pc, #180]	; (800bbf4 <HAL_SD_WriteBlocks+0x314>)
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb46:	f043 0208 	orr.w	r2, r3, #8
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2201      	movs	r2, #1
 800bb52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e044      	b.n	800bbea <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb66:	f003 0302 	and.w	r3, r3, #2
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d012      	beq.n	800bb94 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a20      	ldr	r2, [pc, #128]	; (800bbf4 <HAL_SD_WriteBlocks+0x314>)
 800bb74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7a:	f043 0202 	orr.w	r2, r3, #2
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e02a      	b.n	800bbea <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9a:	f003 0310 	and.w	r3, r3, #16
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d012      	beq.n	800bbc8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a13      	ldr	r2, [pc, #76]	; (800bbf4 <HAL_SD_WriteBlocks+0x314>)
 800bba8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbae:	f043 0210 	orr.w	r2, r3, #16
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e010      	b.n	800bbea <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a0a      	ldr	r2, [pc, #40]	; (800bbf8 <HAL_SD_WriteBlocks+0x318>)
 800bbce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	e006      	b.n	800bbea <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
  }
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3748      	adds	r7, #72	; 0x48
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	1fe00fff 	.word	0x1fe00fff
 800bbf8:	18000f3a 	.word	0x18000f3a

0800bbfc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc0a:	0f9b      	lsrs	r3, r3, #30
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc16:	0e9b      	lsrs	r3, r3, #26
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	f003 030f 	and.w	r3, r3, #15
 800bc1e:	b2da      	uxtb	r2, r3
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc28:	0e1b      	lsrs	r3, r3, #24
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	f003 0303 	and.w	r3, r3, #3
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc3a:	0c1b      	lsrs	r3, r3, #16
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc46:	0a1b      	lsrs	r3, r3, #8
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc5c:	0d1b      	lsrs	r3, r3, #20
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc68:	0c1b      	lsrs	r3, r3, #16
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	f003 030f 	and.w	r3, r3, #15
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc7a:	0bdb      	lsrs	r3, r3, #15
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	f003 0301 	and.w	r3, r3, #1
 800bc82:	b2da      	uxtb	r2, r3
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc8c:	0b9b      	lsrs	r3, r3, #14
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc9e:	0b5b      	lsrs	r3, r3, #13
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	f003 0301 	and.w	r3, r3, #1
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcb0:	0b1b      	lsrs	r3, r3, #12
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d163      	bne.n	800bd94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcd0:	009a      	lsls	r2, r3, #2
 800bcd2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800bcdc:	0f92      	lsrs	r2, r2, #30
 800bcde:	431a      	orrs	r2, r3
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bce8:	0edb      	lsrs	r3, r3, #27
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	f003 0307 	and.w	r3, r3, #7
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcfa:	0e1b      	lsrs	r3, r3, #24
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	f003 0307 	and.w	r3, r3, #7
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd0c:	0d5b      	lsrs	r3, r3, #21
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	f003 0307 	and.w	r3, r3, #7
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd1e:	0c9b      	lsrs	r3, r3, #18
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	f003 0307 	and.w	r3, r3, #7
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd30:	0bdb      	lsrs	r3, r3, #15
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	f003 0307 	and.w	r3, r3, #7
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	7e1b      	ldrb	r3, [r3, #24]
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f003 0307 	and.w	r3, r3, #7
 800bd52:	3302      	adds	r3, #2
 800bd54:	2201      	movs	r2, #1
 800bd56:	fa02 f303 	lsl.w	r3, r2, r3
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bd5e:	fb03 f202 	mul.w	r2, r3, r2
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	7a1b      	ldrb	r3, [r3, #8]
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	f003 030f 	and.w	r3, r3, #15
 800bd70:	2201      	movs	r2, #1
 800bd72:	409a      	lsls	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800bd80:	0a52      	lsrs	r2, r2, #9
 800bd82:	fb03 f202 	mul.w	r2, r3, r2
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd90:	655a      	str	r2, [r3, #84]	; 0x54
 800bd92:	e031      	b.n	800bdf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d11d      	bne.n	800bdd8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bda0:	041b      	lsls	r3, r3, #16
 800bda2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdaa:	0c1b      	lsrs	r3, r3, #16
 800bdac:	431a      	orrs	r2, r3
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	029a      	lsls	r2, r3, #10
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdcc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	655a      	str	r2, [r3, #84]	; 0x54
 800bdd6:	e00f      	b.n	800bdf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a58      	ldr	r2, [pc, #352]	; (800bf40 <HAL_SD_GetCardCSD+0x344>)
 800bdde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e09d      	b.n	800bf34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdfc:	0b9b      	lsrs	r3, r3, #14
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	b2da      	uxtb	r2, r3
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be0e:	09db      	lsrs	r3, r3, #7
 800be10:	b2db      	uxtb	r3, r3
 800be12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be16:	b2da      	uxtb	r2, r3
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be20:	b2db      	uxtb	r3, r3
 800be22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be26:	b2da      	uxtb	r2, r3
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be30:	0fdb      	lsrs	r3, r3, #31
 800be32:	b2da      	uxtb	r2, r3
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be3c:	0f5b      	lsrs	r3, r3, #29
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	f003 0303 	and.w	r3, r3, #3
 800be44:	b2da      	uxtb	r2, r3
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be4e:	0e9b      	lsrs	r3, r3, #26
 800be50:	b2db      	uxtb	r3, r3
 800be52:	f003 0307 	and.w	r3, r3, #7
 800be56:	b2da      	uxtb	r2, r3
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be60:	0d9b      	lsrs	r3, r3, #22
 800be62:	b2db      	uxtb	r3, r3
 800be64:	f003 030f 	and.w	r3, r3, #15
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be72:	0d5b      	lsrs	r3, r3, #21
 800be74:	b2db      	uxtb	r3, r3
 800be76:	f003 0301 	and.w	r3, r3, #1
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be8e:	0c1b      	lsrs	r3, r3, #16
 800be90:	b2db      	uxtb	r3, r3
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	b2da      	uxtb	r2, r3
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bea2:	0bdb      	lsrs	r3, r3, #15
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	b2da      	uxtb	r2, r3
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800beb6:	0b9b      	lsrs	r3, r3, #14
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800beca:	0b5b      	lsrs	r3, r3, #13
 800becc:	b2db      	uxtb	r3, r3
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bede:	0b1b      	lsrs	r3, r3, #12
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bef2:	0a9b      	lsrs	r3, r3, #10
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	f003 0303 	and.w	r3, r3, #3
 800befa:	b2da      	uxtb	r2, r3
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf06:	0a1b      	lsrs	r3, r3, #8
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	f003 0303 	and.w	r3, r3, #3
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf1a:	085b      	lsrs	r3, r3, #1
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	1fe00fff 	.word	0x1fe00fff

0800bf44 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b094      	sub	sp, #80	; 0x50
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	2b03      	cmp	r3, #3
 800bf5e:	d101      	bne.n	800bf64 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	e0a7      	b.n	800c0b4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800bf64:	f107 0308 	add.w	r3, r7, #8
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fb62 	bl	800c634 <SD_SendSDStatus>
 800bf70:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d011      	beq.n	800bf9c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a4f      	ldr	r2, [pc, #316]	; (800c0bc <HAL_SD_GetCardStatus+0x178>)
 800bf7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf86:	431a      	orrs	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bf9a:	e070      	b.n	800c07e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	099b      	lsrs	r3, r3, #6
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	f003 0303 	and.w	r3, r3, #3
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	095b      	lsrs	r3, r3, #5
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	f003 0301 	and.w	r3, r3, #1
 800bfb6:	b2da      	uxtb	r2, r3
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	0a1b      	lsrs	r3, r3, #8
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	0e1b      	lsrs	r3, r3, #24
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	061a      	lsls	r2, r3, #24
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	021b      	lsls	r3, r3, #8
 800bfde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfe2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	0a1b      	lsrs	r3, r3, #8
 800bfe8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bfec:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	0e1b      	lsrs	r3, r3, #24
 800bff2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	0a1b      	lsrs	r3, r3, #8
 800c004:	b2da      	uxtb	r2, r3
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	0d1b      	lsrs	r3, r3, #20
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	f003 030f 	and.w	r3, r3, #15
 800c014:	b2da      	uxtb	r2, r3
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	0c1b      	lsrs	r3, r3, #16
 800c01e:	b29b      	uxth	r3, r3
 800c020:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c024:	b29a      	uxth	r2, r3
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	4313      	orrs	r3, r2
 800c030:	b29a      	uxth	r2, r3
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	0a9b      	lsrs	r3, r3, #10
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c040:	b2da      	uxtb	r2, r3
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	0a1b      	lsrs	r3, r3, #8
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	f003 0303 	and.w	r3, r3, #3
 800c050:	b2da      	uxtb	r2, r3
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	091b      	lsrs	r3, r3, #4
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	f003 030f 	and.w	r3, r3, #15
 800c060:	b2da      	uxtb	r2, r3
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	f003 030f 	and.w	r3, r3, #15
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	0e1b      	lsrs	r3, r3, #24
 800c078:	b2da      	uxtb	r2, r3
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c086:	4618      	mov	r0, r3
 800c088:	f001 fc34 	bl	800d8f4 <SDMMC_CmdBlockLength>
 800c08c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c08e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00d      	beq.n	800c0b0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a08      	ldr	r2, [pc, #32]	; (800c0bc <HAL_SD_GetCardStatus+0x178>)
 800c09a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0a0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800c0b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3750      	adds	r7, #80	; 0x50
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	1fe00fff 	.word	0x1fe00fff

0800c0c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c118:	b590      	push	{r4, r7, lr}
 800c11a:	b08d      	sub	sp, #52	; 0x34
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2203      	movs	r2, #3
 800c12c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c134:	2b03      	cmp	r3, #3
 800c136:	d02e      	beq.n	800c196 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c13e:	d106      	bne.n	800c14e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c144:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	635a      	str	r2, [r3, #52]	; 0x34
 800c14c:	e029      	b.n	800c1a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c154:	d10a      	bne.n	800c16c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fb64 	bl	800c824 <SD_WideBus_Enable>
 800c15c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	431a      	orrs	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	635a      	str	r2, [r3, #52]	; 0x34
 800c16a:	e01a      	b.n	800c1a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fba1 	bl	800c8ba <SD_WideBus_Disable>
 800c178:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c17e:	6a3b      	ldr	r3, [r7, #32]
 800c180:	431a      	orrs	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	635a      	str	r2, [r3, #52]	; 0x34
 800c186:	e00c      	b.n	800c1a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c18c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	635a      	str	r2, [r3, #52]	; 0x34
 800c194:	e005      	b.n	800c1a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c19a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d007      	beq.n	800c1ba <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a5f      	ldr	r2, [pc, #380]	; (800c32c <HAL_SD_ConfigWideBusOperation+0x214>)
 800c1b0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1b8:	e096      	b.n	800c2e8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c1ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c1be:	f04f 0100 	mov.w	r1, #0
 800c1c2:	f7fd fdef 	bl	8009da4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c1c6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f000 8083 	beq.w	800c2d6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	691b      	ldr	r3, [r3, #16]
 800c1e4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	695a      	ldr	r2, [r3, #20]
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	4950      	ldr	r1, [pc, #320]	; (800c330 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c1ee:	fba1 1303 	umull	r1, r3, r1, r3
 800c1f2:	0e1b      	lsrs	r3, r3, #24
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d303      	bcc.n	800c200 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	695b      	ldr	r3, [r3, #20]
 800c1fc:	61bb      	str	r3, [r7, #24]
 800c1fe:	e05a      	b.n	800c2b6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c208:	d103      	bne.n	800c212 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	61bb      	str	r3, [r7, #24]
 800c210:	e051      	b.n	800c2b6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c21a:	d126      	bne.n	800c26a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10e      	bne.n	800c242 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	4a43      	ldr	r2, [pc, #268]	; (800c334 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d906      	bls.n	800c23a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	4a40      	ldr	r2, [pc, #256]	; (800c330 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c230:	fba2 2303 	umull	r2, r3, r2, r3
 800c234:	0e5b      	lsrs	r3, r3, #25
 800c236:	61bb      	str	r3, [r7, #24]
 800c238:	e03d      	b.n	800c2b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	61bb      	str	r3, [r7, #24]
 800c240:	e039      	b.n	800c2b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	695b      	ldr	r3, [r3, #20]
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	69fa      	ldr	r2, [r7, #28]
 800c24a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c24e:	4a39      	ldr	r2, [pc, #228]	; (800c334 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d906      	bls.n	800c262 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	4a36      	ldr	r2, [pc, #216]	; (800c330 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c258:	fba2 2303 	umull	r2, r3, r2, r3
 800c25c:	0e5b      	lsrs	r3, r3, #25
 800c25e:	61bb      	str	r3, [r7, #24]
 800c260:	e029      	b.n	800c2b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	61bb      	str	r3, [r7, #24]
 800c268:	e025      	b.n	800c2b6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	695b      	ldr	r3, [r3, #20]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d10e      	bne.n	800c290 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	4a30      	ldr	r2, [pc, #192]	; (800c338 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d906      	bls.n	800c288 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	4a2c      	ldr	r2, [pc, #176]	; (800c330 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c27e:	fba2 2303 	umull	r2, r3, r2, r3
 800c282:	0e1b      	lsrs	r3, r3, #24
 800c284:	61bb      	str	r3, [r7, #24]
 800c286:	e016      	b.n	800c2b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	61bb      	str	r3, [r7, #24]
 800c28e:	e012      	b.n	800c2b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	005b      	lsls	r3, r3, #1
 800c296:	69fa      	ldr	r2, [r7, #28]
 800c298:	fbb2 f3f3 	udiv	r3, r2, r3
 800c29c:	4a26      	ldr	r2, [pc, #152]	; (800c338 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d906      	bls.n	800c2b0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	4a22      	ldr	r2, [pc, #136]	; (800c330 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2aa:	0e1b      	lsrs	r3, r3, #24
 800c2ac:	61bb      	str	r3, [r7, #24]
 800c2ae:	e002      	b.n	800c2b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	695b      	ldr	r3, [r3, #20]
 800c2b4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681c      	ldr	r4, [r3, #0]
 800c2ba:	466a      	mov	r2, sp
 800c2bc:	f107 0314 	add.w	r3, r7, #20
 800c2c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c2c4:	e882 0003 	stmia.w	r2, {r0, r1}
 800c2c8:	f107 0308 	add.w	r3, r7, #8
 800c2cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f001 fa32 	bl	800d738 <SDMMC_Init>
 800c2d4:	e008      	b.n	800c2e8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f001 faff 	bl	800d8f4 <SDMMC_CmdBlockLength>
 800c2f6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00c      	beq.n	800c318 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a0a      	ldr	r2, [pc, #40]	; (800c32c <HAL_SD_ConfigWideBusOperation+0x214>)
 800c304:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c30a:	6a3b      	ldr	r3, [r7, #32]
 800c30c:	431a      	orrs	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800c320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c324:	4618      	mov	r0, r3
 800c326:	372c      	adds	r7, #44	; 0x2c
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd90      	pop	{r4, r7, pc}
 800c32c:	1fe00fff 	.word	0x1fe00fff
 800c330:	55e63b89 	.word	0x55e63b89
 800c334:	02faf080 	.word	0x02faf080
 800c338:	017d7840 	.word	0x017d7840

0800c33c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c344:	2300      	movs	r3, #0
 800c346:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c348:	f107 030c 	add.w	r3, r7, #12
 800c34c:	4619      	mov	r1, r3
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fa40 	bl	800c7d4 <SD_SendStatus>
 800c354:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d005      	beq.n	800c368 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	431a      	orrs	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	0a5b      	lsrs	r3, r3, #9
 800c36c:	f003 030f 	and.w	r3, r3, #15
 800c370:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c372:	693b      	ldr	r3, [r7, #16]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b090      	sub	sp, #64	; 0x40
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c384:	2300      	movs	r3, #0
 800c386:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c388:	f7f5 f820 	bl	80013cc <HAL_GetTick>
 800c38c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4618      	mov	r0, r3
 800c394:	f001 fa29 	bl	800d7ea <SDMMC_GetPowerState>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d102      	bne.n	800c3a4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c39e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c3a2:	e0b5      	b.n	800c510 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a8:	2b03      	cmp	r3, #3
 800c3aa:	d02e      	beq.n	800c40a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f001 fc74 	bl	800dc9e <SDMMC_CmdSendCID>
 800c3b6:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d001      	beq.n	800c3c2 <SD_InitCard+0x46>
    {
      return errorstate;
 800c3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c0:	e0a6      	b.n	800c510 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f001 fa54 	bl	800d876 <SDMMC_GetResponse>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2104      	movs	r1, #4
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f001 fa4b 	bl	800d876 <SDMMC_GetResponse>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2108      	movs	r1, #8
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f001 fa42 	bl	800d876 <SDMMC_GetResponse>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	210c      	movs	r1, #12
 800c3fe:	4618      	mov	r0, r3
 800c400:	f001 fa39 	bl	800d876 <SDMMC_GetResponse>
 800c404:	4602      	mov	r2, r0
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d01d      	beq.n	800c44e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c412:	e019      	b.n	800c448 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f107 020a 	add.w	r2, r7, #10
 800c41c:	4611      	mov	r1, r2
 800c41e:	4618      	mov	r0, r3
 800c420:	f001 fc7c 	bl	800dd1c <SDMMC_CmdSetRelAdd>
 800c424:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d001      	beq.n	800c430 <SD_InitCard+0xb4>
      {
        return errorstate;
 800c42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42e:	e06f      	b.n	800c510 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c430:	f7f4 ffcc 	bl	80013cc <HAL_GetTick>
 800c434:	4602      	mov	r2, r0
 800c436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	f241 3287 	movw	r2, #4999	; 0x1387
 800c43e:	4293      	cmp	r3, r2
 800c440:	d902      	bls.n	800c448 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c442:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c446:	e063      	b.n	800c510 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c448:	897b      	ldrh	r3, [r7, #10]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d0e2      	beq.n	800c414 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c452:	2b03      	cmp	r3, #3
 800c454:	d036      	beq.n	800c4c4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c456:	897b      	ldrh	r3, [r7, #10]
 800c458:	461a      	mov	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c466:	041b      	lsls	r3, r3, #16
 800c468:	4619      	mov	r1, r3
 800c46a:	4610      	mov	r0, r2
 800c46c:	f001 fc36 	bl	800dcdc <SDMMC_CmdSendCSD>
 800c470:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <SD_InitCard+0x100>
    {
      return errorstate;
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	e049      	b.n	800c510 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2100      	movs	r1, #0
 800c482:	4618      	mov	r0, r3
 800c484:	f001 f9f7 	bl	800d876 <SDMMC_GetResponse>
 800c488:	4602      	mov	r2, r0
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2104      	movs	r1, #4
 800c494:	4618      	mov	r0, r3
 800c496:	f001 f9ee 	bl	800d876 <SDMMC_GetResponse>
 800c49a:	4602      	mov	r2, r0
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2108      	movs	r1, #8
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f001 f9e5 	bl	800d876 <SDMMC_GetResponse>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	210c      	movs	r1, #12
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f001 f9dc 	bl	800d876 <SDMMC_GetResponse>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2104      	movs	r1, #4
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f001 f9d3 	bl	800d876 <SDMMC_GetResponse>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	0d1a      	lsrs	r2, r3, #20
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c4d8:	f107 030c 	add.w	r3, r7, #12
 800c4dc:	4619      	mov	r1, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7ff fb8c 	bl	800bbfc <HAL_SD_GetCardCSD>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d002      	beq.n	800c4f0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c4ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c4ee:	e00f      	b.n	800c510 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4f8:	041b      	lsls	r3, r3, #16
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	f001 fae5 	bl	800dacc <SDMMC_CmdSelDesel>
 800c502:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	2b00      	cmp	r3, #0
 800c508:	d001      	beq.n	800c50e <SD_InitCard+0x192>
  {
    return errorstate;
 800c50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50c:	e000      	b.n	800c510 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3740      	adds	r7, #64	; 0x40
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c520:	2300      	movs	r3, #0
 800c522:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800c524:	2300      	movs	r3, #0
 800c526:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800c528:	2300      	movs	r3, #0
 800c52a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4618      	mov	r0, r3
 800c532:	f001 faee 	bl	800db12 <SDMMC_CmdGoIdleState>
 800c536:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	e072      	b.n	800c628 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4618      	mov	r0, r3
 800c548:	f001 fb01 	bl	800db4e <SDMMC_CmdOperCond>
 800c54c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c554:	d10d      	bne.n	800c572 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4618      	mov	r0, r3
 800c562:	f001 fad6 	bl	800db12 <SDMMC_CmdGoIdleState>
 800c566:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d004      	beq.n	800c578 <SD_PowerON+0x60>
    {
      return errorstate;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	e05a      	b.n	800c628 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2201      	movs	r2, #1
 800c576:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d137      	bne.n	800c5f0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2100      	movs	r1, #0
 800c586:	4618      	mov	r0, r3
 800c588:	f001 fb01 	bl	800db8e <SDMMC_CmdAppCommand>
 800c58c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d02d      	beq.n	800c5f0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c594:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c598:	e046      	b.n	800c628 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2100      	movs	r1, #0
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f001 faf4 	bl	800db8e <SDMMC_CmdAppCommand>
 800c5a6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <SD_PowerON+0x9a>
    {
      return errorstate;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	e03a      	b.n	800c628 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	491e      	ldr	r1, [pc, #120]	; (800c630 <SD_PowerON+0x118>)
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f001 fb0b 	bl	800dbd4 <SDMMC_CmdAppOperCommand>
 800c5be:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d002      	beq.n	800c5cc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c5ca:	e02d      	b.n	800c628 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f001 f94f 	bl	800d876 <SDMMC_GetResponse>
 800c5d8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	0fdb      	lsrs	r3, r3, #31
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d101      	bne.n	800c5e6 <SD_PowerON+0xce>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e000      	b.n	800c5e8 <SD_PowerON+0xd0>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	613b      	str	r3, [r7, #16]

    count++;
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d802      	bhi.n	800c600 <SD_PowerON+0xe8>
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d0cc      	beq.n	800c59a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c606:	4293      	cmp	r3, r2
 800c608:	d902      	bls.n	800c610 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c60a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c60e:	e00b      	b.n	800c628 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3718      	adds	r7, #24
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	c1100000 	.word	0xc1100000

0800c634 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b08c      	sub	sp, #48	; 0x30
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c63e:	f7f4 fec5 	bl	80013cc <HAL_GetTick>
 800c642:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2100      	movs	r1, #0
 800c64e:	4618      	mov	r0, r3
 800c650:	f001 f911 	bl	800d876 <SDMMC_GetResponse>
 800c654:	4603      	mov	r3, r0
 800c656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c65a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c65e:	d102      	bne.n	800c666 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c660:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c664:	e0b0      	b.n	800c7c8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2140      	movs	r1, #64	; 0x40
 800c66c:	4618      	mov	r0, r3
 800c66e:	f001 f941 	bl	800d8f4 <SDMMC_CmdBlockLength>
 800c672:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d005      	beq.n	800c686 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	e0a0      	b.n	800c7c8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c68e:	041b      	lsls	r3, r3, #16
 800c690:	4619      	mov	r1, r3
 800c692:	4610      	mov	r0, r2
 800c694:	f001 fa7b 	bl	800db8e <SDMMC_CmdAppCommand>
 800c698:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d005      	beq.n	800c6ac <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	e08d      	b.n	800c7c8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c6b2:	2340      	movs	r3, #64	; 0x40
 800c6b4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c6b6:	2360      	movs	r3, #96	; 0x60
 800c6b8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f107 0208 	add.w	r2, r7, #8
 800c6ce:	4611      	mov	r1, r2
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f001 f8e3 	bl	800d89c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f001 fb63 	bl	800dda6 <SDMMC_CmdStatusRegister>
 800c6e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d02b      	beq.n	800c740 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	e069      	b.n	800c7c8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d013      	beq.n	800c72a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800c702:	2300      	movs	r3, #0
 800c704:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c706:	e00d      	b.n	800c724 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f001 f83d 	bl	800d78c <SDMMC_ReadFIFO>
 800c712:	4602      	mov	r2, r0
 800c714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c716:	601a      	str	r2, [r3, #0]
        pData++;
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	3304      	adds	r3, #4
 800c71c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800c71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c720:	3301      	adds	r3, #1
 800c722:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	2b07      	cmp	r3, #7
 800c728:	d9ee      	bls.n	800c708 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c72a:	f7f4 fe4f 	bl	80013cc <HAL_GetTick>
 800c72e:	4602      	mov	r2, r0
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c738:	d102      	bne.n	800c740 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c73a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c73e:	e043      	b.n	800c7c8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c746:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d0d2      	beq.n	800c6f4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c754:	f003 0308 	and.w	r3, r3, #8
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c75c:	2308      	movs	r3, #8
 800c75e:	e033      	b.n	800c7c8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c766:	f003 0302 	and.w	r3, r3, #2
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c76e:	2302      	movs	r3, #2
 800c770:	e02a      	b.n	800c7c8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c778:	f003 0320 	and.w	r3, r3, #32
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d017      	beq.n	800c7b0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800c780:	2320      	movs	r3, #32
 800c782:	e021      	b.n	800c7c8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4618      	mov	r0, r3
 800c78a:	f000 ffff 	bl	800d78c <SDMMC_ReadFIFO>
 800c78e:	4602      	mov	r2, r0
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	601a      	str	r2, [r3, #0]
    pData++;
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	3304      	adds	r3, #4
 800c798:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c79a:	f7f4 fe17 	bl	80013cc <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a8:	d102      	bne.n	800c7b0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c7aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7ae:	e00b      	b.n	800c7c8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1e2      	bne.n	800c784 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a03      	ldr	r2, [pc, #12]	; (800c7d0 <SD_SendSDStatus+0x19c>)
 800c7c4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3730      	adds	r7, #48	; 0x30
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	18000f3a 	.word	0x18000f3a

0800c7d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d102      	bne.n	800c7ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c7e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c7e8:	e018      	b.n	800c81c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7f2:	041b      	lsls	r3, r3, #16
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	f001 fab2 	bl	800dd60 <SDMMC_CmdSendStatus>
 800c7fc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d001      	beq.n	800c808 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	e009      	b.n	800c81c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2100      	movs	r1, #0
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 f831 	bl	800d876 <SDMMC_GetResponse>
 800c814:	4602      	mov	r2, r0
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c82c:	2300      	movs	r3, #0
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	2300      	movs	r3, #0
 800c832:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2100      	movs	r1, #0
 800c83a:	4618      	mov	r0, r3
 800c83c:	f001 f81b 	bl	800d876 <SDMMC_GetResponse>
 800c840:	4603      	mov	r3, r0
 800c842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c84a:	d102      	bne.n	800c852 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c84c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c850:	e02f      	b.n	800c8b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c852:	f107 030c 	add.w	r3, r7, #12
 800c856:	4619      	mov	r1, r3
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 f879 	bl	800c950 <SD_FindSCR>
 800c85e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d001      	beq.n	800c86a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	e023      	b.n	800c8b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01c      	beq.n	800c8ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c87c:	041b      	lsls	r3, r3, #16
 800c87e:	4619      	mov	r1, r3
 800c880:	4610      	mov	r0, r2
 800c882:	f001 f984 	bl	800db8e <SDMMC_CmdAppCommand>
 800c886:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d001      	beq.n	800c892 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	e00f      	b.n	800c8b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2102      	movs	r1, #2
 800c898:	4618      	mov	r0, r3
 800c89a:	f001 f9bb 	bl	800dc14 <SDMMC_CmdBusWidth>
 800c89e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	e003      	b.n	800c8b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e001      	b.n	800c8b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c8ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3718      	adds	r7, #24
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b086      	sub	sp, #24
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 ffd0 	bl	800d876 <SDMMC_GetResponse>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8e0:	d102      	bne.n	800c8e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c8e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8e6:	e02f      	b.n	800c948 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c8e8:	f107 030c 	add.w	r3, r7, #12
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f82e 	bl	800c950 <SD_FindSCR>
 800c8f4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	e023      	b.n	800c948 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c906:	2b00      	cmp	r3, #0
 800c908:	d01c      	beq.n	800c944 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c912:	041b      	lsls	r3, r3, #16
 800c914:	4619      	mov	r1, r3
 800c916:	4610      	mov	r0, r2
 800c918:	f001 f939 	bl	800db8e <SDMMC_CmdAppCommand>
 800c91c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d001      	beq.n	800c928 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	e00f      	b.n	800c948 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2100      	movs	r1, #0
 800c92e:	4618      	mov	r0, r3
 800c930:	f001 f970 	bl	800dc14 <SDMMC_CmdBusWidth>
 800c934:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d001      	beq.n	800c940 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	e003      	b.n	800c948 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c940:	2300      	movs	r3, #0
 800c942:	e001      	b.n	800c948 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c944:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3718      	adds	r7, #24
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b08e      	sub	sp, #56	; 0x38
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c95a:	f7f4 fd37 	bl	80013cc <HAL_GetTick>
 800c95e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c960:	2300      	movs	r3, #0
 800c962:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800c964:	2300      	movs	r3, #0
 800c966:	60bb      	str	r3, [r7, #8]
 800c968:	2300      	movs	r3, #0
 800c96a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2108      	movs	r1, #8
 800c976:	4618      	mov	r0, r3
 800c978:	f000 ffbc 	bl	800d8f4 <SDMMC_CmdBlockLength>
 800c97c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c980:	2b00      	cmp	r3, #0
 800c982:	d001      	beq.n	800c988 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c986:	e0ad      	b.n	800cae4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c990:	041b      	lsls	r3, r3, #16
 800c992:	4619      	mov	r1, r3
 800c994:	4610      	mov	r0, r2
 800c996:	f001 f8fa 	bl	800db8e <SDMMC_CmdAppCommand>
 800c99a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d001      	beq.n	800c9a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	e09e      	b.n	800cae4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c9ac:	2308      	movs	r3, #8
 800c9ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c9b0:	2330      	movs	r3, #48	; 0x30
 800c9b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f107 0210 	add.w	r2, r7, #16
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 ff66 	bl	800d89c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f001 f940 	bl	800dc5a <SDMMC_CmdSendSCR>
 800c9da:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d027      	beq.n	800ca32 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e4:	e07e      	b.n	800cae4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d113      	bne.n	800ca1c <SD_FindSCR+0xcc>
 800c9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d110      	bne.n	800ca1c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f000 fec4 	bl	800d78c <SDMMC_ReadFIFO>
 800ca04:	4603      	mov	r3, r0
 800ca06:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f000 febd 	bl	800d78c <SDMMC_ReadFIFO>
 800ca12:	4603      	mov	r3, r0
 800ca14:	60fb      	str	r3, [r7, #12]
      index++;
 800ca16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca18:	3301      	adds	r3, #1
 800ca1a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ca1c:	f7f4 fcd6 	bl	80013cc <HAL_GetTick>
 800ca20:	4602      	mov	r2, r0
 800ca22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca24:	1ad3      	subs	r3, r2, r3
 800ca26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2a:	d102      	bne.n	800ca32 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ca2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca30:	e058      	b.n	800cae4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca38:	f240 532a 	movw	r3, #1322	; 0x52a
 800ca3c:	4013      	ands	r3, r2
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d0d1      	beq.n	800c9e6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca48:	f003 0308 	and.w	r3, r3, #8
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d005      	beq.n	800ca5c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2208      	movs	r2, #8
 800ca56:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ca58:	2308      	movs	r3, #8
 800ca5a:	e043      	b.n	800cae4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca62:	f003 0302 	and.w	r3, r3, #2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d005      	beq.n	800ca76 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2202      	movs	r2, #2
 800ca70:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ca72:	2302      	movs	r3, #2
 800ca74:	e036      	b.n	800cae4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca7c:	f003 0320 	and.w	r3, r3, #32
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d005      	beq.n	800ca90 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2220      	movs	r2, #32
 800ca8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ca8c:	2320      	movs	r3, #32
 800ca8e:	e029      	b.n	800cae4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a15      	ldr	r2, [pc, #84]	; (800caec <SD_FindSCR+0x19c>)
 800ca96:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	061a      	lsls	r2, r3, #24
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	021b      	lsls	r3, r3, #8
 800caa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800caa4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	0a1b      	lsrs	r3, r3, #8
 800caaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800caae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	0e1b      	lsrs	r3, r3, #24
 800cab4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	601a      	str	r2, [r3, #0]
    scr++;
 800caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabc:	3304      	adds	r3, #4
 800cabe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	061a      	lsls	r2, r3, #24
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	021b      	lsls	r3, r3, #8
 800cac8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cacc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	0a1b      	lsrs	r3, r3, #8
 800cad2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800cad6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	0e1b      	lsrs	r3, r3, #24
 800cadc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3738      	adds	r7, #56	; 0x38
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	18000f3a 	.word	0x18000f3a

0800caf0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e10f      	b.n	800cd22 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a87      	ldr	r2, [pc, #540]	; (800cd2c <HAL_SPI_Init+0x23c>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d00f      	beq.n	800cb32 <HAL_SPI_Init+0x42>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a86      	ldr	r2, [pc, #536]	; (800cd30 <HAL_SPI_Init+0x240>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d00a      	beq.n	800cb32 <HAL_SPI_Init+0x42>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a84      	ldr	r2, [pc, #528]	; (800cd34 <HAL_SPI_Init+0x244>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d005      	beq.n	800cb32 <HAL_SPI_Init+0x42>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	2b0f      	cmp	r3, #15
 800cb2c:	d901      	bls.n	800cb32 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e0f7      	b.n	800cd22 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fde4 	bl	800d700 <SPI_GetPacketSize>
 800cb38:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a7b      	ldr	r2, [pc, #492]	; (800cd2c <HAL_SPI_Init+0x23c>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d00c      	beq.n	800cb5e <HAL_SPI_Init+0x6e>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a79      	ldr	r2, [pc, #484]	; (800cd30 <HAL_SPI_Init+0x240>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d007      	beq.n	800cb5e <HAL_SPI_Init+0x6e>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a78      	ldr	r2, [pc, #480]	; (800cd34 <HAL_SPI_Init+0x244>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d002      	beq.n	800cb5e <HAL_SPI_Init+0x6e>
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b08      	cmp	r3, #8
 800cb5c:	d811      	bhi.n	800cb82 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cb62:	4a72      	ldr	r2, [pc, #456]	; (800cd2c <HAL_SPI_Init+0x23c>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d009      	beq.n	800cb7c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a70      	ldr	r2, [pc, #448]	; (800cd30 <HAL_SPI_Init+0x240>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d004      	beq.n	800cb7c <HAL_SPI_Init+0x8c>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a6f      	ldr	r2, [pc, #444]	; (800cd34 <HAL_SPI_Init+0x244>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d104      	bne.n	800cb86 <HAL_SPI_Init+0x96>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b10      	cmp	r3, #16
 800cb80:	d901      	bls.n	800cb86 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cb82:	2301      	movs	r3, #1
 800cb84:	e0cd      	b.n	800cd22 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d106      	bne.n	800cba0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7f4 f914 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f022 0201 	bic.w	r2, r2, #1
 800cbb6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cbc2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cbcc:	d119      	bne.n	800cc02 <HAL_SPI_Init+0x112>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbd6:	d103      	bne.n	800cbe0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d008      	beq.n	800cbf2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10c      	bne.n	800cc02 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cbec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbf0:	d107      	bne.n	800cc02 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cc00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00f      	beq.n	800cc2e <HAL_SPI_Init+0x13e>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	2b06      	cmp	r3, #6
 800cc14:	d90b      	bls.n	800cc2e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	601a      	str	r2, [r3, #0]
 800cc2c:	e007      	b.n	800cc3e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	69da      	ldr	r2, [r3, #28]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc46:	431a      	orrs	r2, r3
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	431a      	orrs	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc50:	ea42 0103 	orr.w	r1, r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	68da      	ldr	r2, [r3, #12]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	430a      	orrs	r2, r1
 800cc5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc68:	431a      	orrs	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc6e:	431a      	orrs	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	431a      	orrs	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	431a      	orrs	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	695b      	ldr	r3, [r3, #20]
 800cc80:	431a      	orrs	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a1b      	ldr	r3, [r3, #32]
 800cc86:	431a      	orrs	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	431a      	orrs	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc92:	431a      	orrs	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	431a      	orrs	r2, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc9e:	ea42 0103 	orr.w	r1, r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	430a      	orrs	r2, r1
 800ccac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d113      	bne.n	800ccde <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccc8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ccdc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f022 0201 	bic.w	r2, r2, #1
 800ccec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	430a      	orrs	r2, r1
 800cd0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	40013000 	.word	0x40013000
 800cd30:	40003800 	.word	0x40003800
 800cd34:	40003c00 	.word	0x40003c00

0800cd38 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b08a      	sub	sp, #40	; 0x28
 800cd3c:	af02      	add	r7, sp, #8
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	603b      	str	r3, [r7, #0]
 800cd44:	4613      	mov	r3, r2
 800cd46:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	3320      	adds	r3, #32
 800cd4e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d101      	bne.n	800cd62 <HAL_SPI_Transmit+0x2a>
 800cd5e:	2302      	movs	r3, #2
 800cd60:	e1e1      	b.n	800d126 <HAL_SPI_Transmit+0x3ee>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2201      	movs	r2, #1
 800cd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd6a:	f7f4 fb2f 	bl	80013cc <HAL_GetTick>
 800cd6e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d007      	beq.n	800cd8c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cd88:	7efb      	ldrb	r3, [r7, #27]
 800cd8a:	e1cc      	b.n	800d126 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <HAL_SPI_Transmit+0x60>
 800cd92:	88fb      	ldrh	r3, [r7, #6]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d107      	bne.n	800cda8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cda4:	7efb      	ldrb	r3, [r7, #27]
 800cda6:	e1be      	b.n	800d126 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2203      	movs	r2, #3
 800cdac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	88fa      	ldrh	r2, [r7, #6]
 800cdc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	88fa      	ldrh	r2, [r7, #6]
 800cdca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2200      	movs	r2, #0
 800cde8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cdf8:	d108      	bne.n	800ce0c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	e009      	b.n	800ce20 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ce1e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	685a      	ldr	r2, [r3, #4]
 800ce26:	4b96      	ldr	r3, [pc, #600]	; (800d080 <HAL_SPI_Transmit+0x348>)
 800ce28:	4013      	ands	r3, r2
 800ce2a:	88f9      	ldrh	r1, [r7, #6]
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	6812      	ldr	r2, [r2, #0]
 800ce30:	430b      	orrs	r3, r1
 800ce32:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f042 0201 	orr.w	r2, r2, #1
 800ce42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce4c:	d107      	bne.n	800ce5e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	2b0f      	cmp	r3, #15
 800ce64:	d947      	bls.n	800cef6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ce66:	e03f      	b.n	800cee8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	f003 0302 	and.w	r3, r3, #2
 800ce72:	2b02      	cmp	r3, #2
 800ce74:	d114      	bne.n	800cea0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	6812      	ldr	r2, [r2, #0]
 800ce80:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce86:	1d1a      	adds	r2, r3, #4
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	3b01      	subs	r3, #1
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ce9e:	e023      	b.n	800cee8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cea0:	f7f4 fa94 	bl	80013cc <HAL_GetTick>
 800cea4:	4602      	mov	r2, r0
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d803      	bhi.n	800ceb8 <HAL_SPI_Transmit+0x180>
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb6:	d102      	bne.n	800cebe <HAL_SPI_Transmit+0x186>
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d114      	bne.n	800cee8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f000 fb50 	bl	800d564 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ced2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cee4:	2303      	movs	r3, #3
 800cee6:	e11e      	b.n	800d126 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1b9      	bne.n	800ce68 <HAL_SPI_Transmit+0x130>
 800cef4:	e0f1      	b.n	800d0da <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	2b07      	cmp	r3, #7
 800cefc:	f240 80e6 	bls.w	800d0cc <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cf00:	e05d      	b.n	800cfbe <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	695b      	ldr	r3, [r3, #20]
 800cf08:	f003 0302 	and.w	r3, r3, #2
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d132      	bne.n	800cf76 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d918      	bls.n	800cf4e <HAL_SPI_Transmit+0x216>
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d014      	beq.n	800cf4e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6812      	ldr	r2, [r2, #0]
 800cf2e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf34:	1d1a      	adds	r2, r3, #4
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	3b02      	subs	r3, #2
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cf4c:	e037      	b.n	800cfbe <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf52:	881a      	ldrh	r2, [r3, #0]
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf5c:	1c9a      	adds	r2, r3, #2
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cf74:	e023      	b.n	800cfbe <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf76:	f7f4 fa29 	bl	80013cc <HAL_GetTick>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	683a      	ldr	r2, [r7, #0]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d803      	bhi.n	800cf8e <HAL_SPI_Transmit+0x256>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8c:	d102      	bne.n	800cf94 <HAL_SPI_Transmit+0x25c>
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d114      	bne.n	800cfbe <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f000 fae5 	bl	800d564 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	e0b3      	b.n	800d126 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d19b      	bne.n	800cf02 <HAL_SPI_Transmit+0x1ca>
 800cfca:	e086      	b.n	800d0da <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	d154      	bne.n	800d084 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d918      	bls.n	800d018 <HAL_SPI_Transmit+0x2e0>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfea:	2b40      	cmp	r3, #64	; 0x40
 800cfec:	d914      	bls.n	800d018 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6812      	ldr	r2, [r2, #0]
 800cff8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cffe:	1d1a      	adds	r2, r3, #4
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	3b04      	subs	r3, #4
 800d00e:	b29a      	uxth	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d016:	e059      	b.n	800d0cc <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d01e:	b29b      	uxth	r3, r3
 800d020:	2b01      	cmp	r3, #1
 800d022:	d917      	bls.n	800d054 <HAL_SPI_Transmit+0x31c>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d013      	beq.n	800d054 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d030:	881a      	ldrh	r2, [r3, #0]
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d03a:	1c9a      	adds	r2, r3, #2
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d046:	b29b      	uxth	r3, r3
 800d048:	3b02      	subs	r3, #2
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d052:	e03b      	b.n	800d0cc <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	3320      	adds	r3, #32
 800d05e:	7812      	ldrb	r2, [r2, #0]
 800d060:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d066:	1c5a      	adds	r2, r3, #1
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d072:	b29b      	uxth	r3, r3
 800d074:	3b01      	subs	r3, #1
 800d076:	b29a      	uxth	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d07e:	e025      	b.n	800d0cc <HAL_SPI_Transmit+0x394>
 800d080:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d084:	f7f4 f9a2 	bl	80013cc <HAL_GetTick>
 800d088:	4602      	mov	r2, r0
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	1ad3      	subs	r3, r2, r3
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	429a      	cmp	r2, r3
 800d092:	d803      	bhi.n	800d09c <HAL_SPI_Transmit+0x364>
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09a:	d102      	bne.n	800d0a2 <HAL_SPI_Transmit+0x36a>
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d114      	bne.n	800d0cc <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f000 fa5e 	bl	800d564 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	e02c      	b.n	800d126 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f47f af79 	bne.w	800cfcc <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	9300      	str	r3, [sp, #0]
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2108      	movs	r1, #8
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f000 fadd 	bl	800d6a4 <SPI_WaitOnFlagUntilTimeout>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d007      	beq.n	800d100 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0f6:	f043 0220 	orr.w	r2, r3, #32
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 fa2f 	bl	800d564 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d001      	beq.n	800d124 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e000      	b.n	800d126 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800d124:	7efb      	ldrb	r3, [r7, #27]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3720      	adds	r7, #32
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop

0800d130 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08a      	sub	sp, #40	; 0x28
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d148:	6a3a      	ldr	r2, [r7, #32]
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	4013      	ands	r3, r2
 800d14e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d158:	2300      	movs	r3, #0
 800d15a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d162:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	3330      	adds	r3, #48	; 0x30
 800d16a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d172:	2b00      	cmp	r3, #0
 800d174:	d010      	beq.n	800d198 <HAL_SPI_IRQHandler+0x68>
 800d176:	6a3b      	ldr	r3, [r7, #32]
 800d178:	f003 0308 	and.w	r3, r3, #8
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00b      	beq.n	800d198 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	699a      	ldr	r2, [r3, #24]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d18e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f9c3 	bl	800d51c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800d196:	e192      	b.n	800d4be <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d113      	bne.n	800d1ca <HAL_SPI_IRQHandler+0x9a>
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	f003 0320 	and.w	r3, r3, #32
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d10e      	bne.n	800d1ca <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d009      	beq.n	800d1ca <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	4798      	blx	r3
    handled = 1UL;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10f      	bne.n	800d1f4 <HAL_SPI_IRQHandler+0xc4>
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	f003 0301 	and.w	r3, r3, #1
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00a      	beq.n	800d1f4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d105      	bne.n	800d1f4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	4798      	blx	r3
    handled = 1UL;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	f003 0320 	and.w	r3, r3, #32
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d10f      	bne.n	800d21e <HAL_SPI_IRQHandler+0xee>
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	f003 0302 	and.w	r3, r3, #2
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00a      	beq.n	800d21e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d105      	bne.n	800d21e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	4798      	blx	r3
    handled = 1UL;
 800d21a:	2301      	movs	r3, #1
 800d21c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800d21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d220:	2b00      	cmp	r3, #0
 800d222:	f040 8147 	bne.w	800d4b4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	f003 0308 	and.w	r3, r3, #8
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f000 808b 	beq.w	800d348 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	699a      	ldr	r2, [r3, #24]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f042 0208 	orr.w	r2, r2, #8
 800d240:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	699a      	ldr	r2, [r3, #24]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f042 0210 	orr.w	r2, r2, #16
 800d250:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	699a      	ldr	r2, [r3, #24]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d260:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	691a      	ldr	r2, [r3, #16]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f022 0208 	bic.w	r2, r2, #8
 800d270:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d13d      	bne.n	800d2fc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800d280:	e036      	b.n	800d2f0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	2b0f      	cmp	r3, #15
 800d288:	d90b      	bls.n	800d2a2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d292:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d294:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d29a:	1d1a      	adds	r2, r3, #4
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	665a      	str	r2, [r3, #100]	; 0x64
 800d2a0:	e01d      	b.n	800d2de <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	2b07      	cmp	r3, #7
 800d2a8:	d90b      	bls.n	800d2c2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	8812      	ldrh	r2, [r2, #0]
 800d2b2:	b292      	uxth	r2, r2
 800d2b4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2ba:	1c9a      	adds	r2, r3, #2
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	665a      	str	r2, [r3, #100]	; 0x64
 800d2c0:	e00d      	b.n	800d2de <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2ce:	7812      	ldrb	r2, [r2, #0]
 800d2d0:	b2d2      	uxtb	r2, r2
 800d2d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2d8:	1c5a      	adds	r2, r3, #1
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1c2      	bne.n	800d282 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f931 	bl	800d564 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2201      	movs	r2, #1
 800d306:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d310:	2b00      	cmp	r3, #0
 800d312:	d003      	beq.n	800d31c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f8f7 	bl	800d508 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d31a:	e0d0      	b.n	800d4be <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d31c:	7cfb      	ldrb	r3, [r7, #19]
 800d31e:	2b05      	cmp	r3, #5
 800d320:	d103      	bne.n	800d32a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 f8e6 	bl	800d4f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d328:	e0c6      	b.n	800d4b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d32a:	7cfb      	ldrb	r3, [r7, #19]
 800d32c:	2b04      	cmp	r3, #4
 800d32e:	d103      	bne.n	800d338 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 f8d5 	bl	800d4e0 <HAL_SPI_RxCpltCallback>
    return;
 800d336:	e0bf      	b.n	800d4b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d338:	7cfb      	ldrb	r3, [r7, #19]
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	f040 80bc 	bne.w	800d4b8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f8c3 	bl	800d4cc <HAL_SPI_TxCpltCallback>
    return;
 800d346:	e0b7      	b.n	800d4b8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 80b5 	beq.w	800d4be <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00f      	beq.n	800d37e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d364:	f043 0204 	orr.w	r2, r3, #4
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	699a      	ldr	r2, [r3, #24]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d37c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00f      	beq.n	800d3a8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d38e:	f043 0201 	orr.w	r2, r3, #1
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	699a      	ldr	r2, [r3, #24]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3a6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00f      	beq.n	800d3d2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3b8:	f043 0208 	orr.w	r2, r3, #8
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	699a      	ldr	r2, [r3, #24]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3d0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	f003 0320 	and.w	r3, r3, #32
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00f      	beq.n	800d3fc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	699a      	ldr	r2, [r3, #24]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f042 0220 	orr.w	r2, r2, #32
 800d3fa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d402:	2b00      	cmp	r3, #0
 800d404:	d05a      	beq.n	800d4bc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f022 0201 	bic.w	r2, r2, #1
 800d414:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	6919      	ldr	r1, [r3, #16]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	4b28      	ldr	r3, [pc, #160]	; (800d4c4 <HAL_SPI_IRQHandler+0x394>)
 800d422:	400b      	ands	r3, r1
 800d424:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d42c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d430:	d138      	bne.n	800d4a4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	689a      	ldr	r2, [r3, #8]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d440:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d446:	2b00      	cmp	r3, #0
 800d448:	d013      	beq.n	800d472 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d44e:	4a1e      	ldr	r2, [pc, #120]	; (800d4c8 <HAL_SPI_IRQHandler+0x398>)
 800d450:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d456:	4618      	mov	r0, r3
 800d458:	f7f5 fd2c 	bl	8002eb4 <HAL_DMA_Abort_IT>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d007      	beq.n	800d472 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d468:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d476:	2b00      	cmp	r3, #0
 800d478:	d020      	beq.n	800d4bc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d47e:	4a12      	ldr	r2, [pc, #72]	; (800d4c8 <HAL_SPI_IRQHandler+0x398>)
 800d480:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d486:	4618      	mov	r0, r3
 800d488:	f7f5 fd14 	bl	8002eb4 <HAL_DMA_Abort_IT>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d014      	beq.n	800d4bc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d498:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d4a2:	e00b      	b.n	800d4bc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 f82b 	bl	800d508 <HAL_SPI_ErrorCallback>
    return;
 800d4b2:	e003      	b.n	800d4bc <HAL_SPI_IRQHandler+0x38c>
    return;
 800d4b4:	bf00      	nop
 800d4b6:	e002      	b.n	800d4be <HAL_SPI_IRQHandler+0x38e>
    return;
 800d4b8:	bf00      	nop
 800d4ba:	e000      	b.n	800d4be <HAL_SPI_IRQHandler+0x38e>
    return;
 800d4bc:	bf00      	nop
  }
}
 800d4be:	3728      	adds	r7, #40	; 0x28
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	fffffc94 	.word	0xfffffc94
 800d4c8:	0800d531 	.word	0x0800d531

0800d4cc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d510:	bf00      	nop
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2200      	movs	r2, #0
 800d542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2201      	movs	r2, #1
 800d552:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f7ff ffd6 	bl	800d508 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d55c:	bf00      	nop
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	699a      	ldr	r2, [r3, #24]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f042 0208 	orr.w	r2, r2, #8
 800d582:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	699a      	ldr	r2, [r3, #24]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f042 0210 	orr.w	r2, r2, #16
 800d592:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f022 0201 	bic.w	r2, r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	6919      	ldr	r1, [r3, #16]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	4b3c      	ldr	r3, [pc, #240]	; (800d6a0 <SPI_CloseTransfer+0x13c>)
 800d5b0:	400b      	ands	r3, r1
 800d5b2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	689a      	ldr	r2, [r3, #8]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d5c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	2b04      	cmp	r3, #4
 800d5ce:	d014      	beq.n	800d5fa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f003 0320 	and.w	r3, r3, #32
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00f      	beq.n	800d5fa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	699a      	ldr	r2, [r3, #24]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f042 0220 	orr.w	r2, r2, #32
 800d5f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d600:	b2db      	uxtb	r3, r3
 800d602:	2b03      	cmp	r3, #3
 800d604:	d014      	beq.n	800d630 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00f      	beq.n	800d630 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d616:	f043 0204 	orr.w	r2, r3, #4
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	699a      	ldr	r2, [r3, #24]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d62e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00f      	beq.n	800d65a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d640:	f043 0201 	orr.w	r2, r3, #1
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	699a      	ldr	r2, [r3, #24]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d658:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00f      	beq.n	800d684 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d66a:	f043 0208 	orr.w	r2, r3, #8
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	699a      	ldr	r2, [r3, #24]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d682:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d694:	bf00      	nop
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr
 800d6a0:	fffffc90 	.word	0xfffffc90

0800d6a4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	603b      	str	r3, [r7, #0]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d6b4:	e010      	b.n	800d6d8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6b6:	f7f3 fe89 	bl	80013cc <HAL_GetTick>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	1ad3      	subs	r3, r2, r3
 800d6c0:	683a      	ldr	r2, [r7, #0]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d803      	bhi.n	800d6ce <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6cc:	d102      	bne.n	800d6d4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d101      	bne.n	800d6d8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	e00f      	b.n	800d6f8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	695a      	ldr	r2, [r3, #20]
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	bf0c      	ite	eq
 800d6e8:	2301      	moveq	r3, #1
 800d6ea:	2300      	movne	r3, #0
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	79fb      	ldrb	r3, [r7, #7]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d0df      	beq.n	800d6b6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d70c:	095b      	lsrs	r3, r3, #5
 800d70e:	3301      	adds	r3, #1
 800d710:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	3301      	adds	r3, #1
 800d718:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	3307      	adds	r3, #7
 800d71e:	08db      	lsrs	r3, r3, #3
 800d720:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	fb02 f303 	mul.w	r3, r2, r3
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3714      	adds	r7, #20
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr
	...

0800d738 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d738:	b084      	sub	sp, #16
 800d73a:	b480      	push	{r7}
 800d73c:	b085      	sub	sp, #20
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	f107 001c 	add.w	r0, r7, #28
 800d746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d74a:	2300      	movs	r3, #0
 800d74c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d74e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d750:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d752:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800d756:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800d75a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800d75e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d760:	68fa      	ldr	r2, [r7, #12]
 800d762:	4313      	orrs	r3, r2
 800d764:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	685a      	ldr	r2, [r3, #4]
 800d76a:	4b07      	ldr	r3, [pc, #28]	; (800d788 <SDMMC_Init+0x50>)
 800d76c:	4013      	ands	r3, r2
 800d76e:	68fa      	ldr	r2, [r7, #12]
 800d770:	431a      	orrs	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3714      	adds	r7, #20
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	b004      	add	sp, #16
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	ffc02c00 	.word	0xffc02c00

0800d78c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	370c      	adds	r7, #12
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr

0800d7a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d7a6:	b480      	push	{r7}
 800d7a8:	b083      	sub	sp, #12
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
 800d7ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7ba:	2300      	movs	r3, #0
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f043 0203 	orr.w	r2, r3, #3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b083      	sub	sp, #12
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f003 0303 	and.w	r3, r3, #3
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
	...

0800d808 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d812:	2300      	movs	r3, #0
 800d814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d826:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d82c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d832:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	4313      	orrs	r3, r2
 800d838:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	68da      	ldr	r2, [r3, #12]
 800d83e:	4b06      	ldr	r3, [pc, #24]	; (800d858 <SDMMC_SendCommand+0x50>)
 800d840:	4013      	ands	r3, r2
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	431a      	orrs	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3714      	adds	r7, #20
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr
 800d858:	fffee0c0 	.word	0xfffee0c0

0800d85c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	b2db      	uxtb	r3, r3
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	370c      	adds	r7, #12
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr

0800d876 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d876:	b480      	push	{r7}
 800d878:	b085      	sub	sp, #20
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3314      	adds	r3, #20
 800d884:	461a      	mov	r2, r3
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	4413      	add	r3, r2
 800d88a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3714      	adds	r7, #20
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d8c2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d8c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d8ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d8d0:	68fa      	ldr	r2, [r7, #12]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	431a      	orrs	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d8e6:	2300      	movs	r3, #0

}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3714      	adds	r7, #20
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d902:	2310      	movs	r3, #16
 800d904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d90a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d90c:	2300      	movs	r3, #0
 800d90e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d914:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d916:	f107 0308 	add.w	r3, r7, #8
 800d91a:	4619      	mov	r1, r3
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff ff73 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d922:	f241 3288 	movw	r2, #5000	; 0x1388
 800d926:	2110      	movs	r1, #16
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fa5f 	bl	800ddec <SDMMC_GetCmdResp1>
 800d92e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d930:	69fb      	ldr	r3, [r7, #28]
}
 800d932:	4618      	mov	r0, r3
 800d934:	3720      	adds	r7, #32
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b088      	sub	sp, #32
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d948:	2311      	movs	r3, #17
 800d94a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d94c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d950:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d952:	2300      	movs	r3, #0
 800d954:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d95a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d95c:	f107 0308 	add.w	r3, r7, #8
 800d960:	4619      	mov	r1, r3
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7ff ff50 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d968:	f241 3288 	movw	r2, #5000	; 0x1388
 800d96c:	2111      	movs	r1, #17
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 fa3c 	bl	800ddec <SDMMC_GetCmdResp1>
 800d974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d976:	69fb      	ldr	r3, [r7, #28]
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3720      	adds	r7, #32
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b088      	sub	sp, #32
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d98e:	2312      	movs	r3, #18
 800d990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d992:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d998:	2300      	movs	r3, #0
 800d99a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d99c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d9a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9a2:	f107 0308 	add.w	r3, r7, #8
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff ff2d 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d9ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9b2:	2112      	movs	r1, #18
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 fa19 	bl	800ddec <SDMMC_GetCmdResp1>
 800d9ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9bc:	69fb      	ldr	r3, [r7, #28]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3720      	adds	r7, #32
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b088      	sub	sp, #32
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
 800d9ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d9d4:	2318      	movs	r3, #24
 800d9d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d9e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9e8:	f107 0308 	add.w	r3, r7, #8
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff ff0a 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d9f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9f8:	2118      	movs	r1, #24
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f9f6 	bl	800ddec <SDMMC_GetCmdResp1>
 800da00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da02:	69fb      	ldr	r3, [r7, #28]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3720      	adds	r7, #32
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b088      	sub	sp, #32
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800da1a:	2319      	movs	r3, #25
 800da1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da24:	2300      	movs	r3, #0
 800da26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da2e:	f107 0308 	add.w	r3, r7, #8
 800da32:	4619      	mov	r1, r3
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f7ff fee7 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800da3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800da3e:	2119      	movs	r1, #25
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 f9d3 	bl	800ddec <SDMMC_GetCmdResp1>
 800da46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da48:	69fb      	ldr	r3, [r7, #28]
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3720      	adds	r7, #32
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
	...

0800da54 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b088      	sub	sp, #32
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800da5c:	2300      	movs	r3, #0
 800da5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800da60:	230c      	movs	r3, #12
 800da62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da6a:	2300      	movs	r3, #0
 800da6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da72:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da8c:	f107 0308 	add.w	r3, r7, #8
 800da90:	4619      	mov	r1, r3
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff feb8 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800da98:	4a0b      	ldr	r2, [pc, #44]	; (800dac8 <SDMMC_CmdStopTransfer+0x74>)
 800da9a:	210c      	movs	r1, #12
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 f9a5 	bl	800ddec <SDMMC_GetCmdResp1>
 800daa2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dab6:	d101      	bne.n	800dabc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800dab8:	2300      	movs	r3, #0
 800daba:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800dabc:	69fb      	ldr	r3, [r7, #28]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3720      	adds	r7, #32
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	05f5e100 	.word	0x05f5e100

0800dacc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b088      	sub	sp, #32
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dada:	2307      	movs	r3, #7
 800dadc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dade:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dae4:	2300      	movs	r3, #0
 800dae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800daec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800daee:	f107 0308 	add.w	r3, r7, #8
 800daf2:	4619      	mov	r1, r3
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7ff fe87 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dafa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dafe:	2107      	movs	r1, #7
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f973 	bl	800ddec <SDMMC_GetCmdResp1>
 800db06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db08:	69fb      	ldr	r3, [r7, #28]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3720      	adds	r7, #32
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b088      	sub	sp, #32
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800db1a:	2300      	movs	r3, #0
 800db1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800db1e:	2300      	movs	r3, #0
 800db20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800db22:	2300      	movs	r3, #0
 800db24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db26:	2300      	movs	r3, #0
 800db28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db30:	f107 0308 	add.w	r3, r7, #8
 800db34:	4619      	mov	r1, r3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7ff fe66 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fb97 	bl	800e270 <SDMMC_GetCmdError>
 800db42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db44:	69fb      	ldr	r3, [r7, #28]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3720      	adds	r7, #32
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b088      	sub	sp, #32
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800db56:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800db5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800db5c:	2308      	movs	r3, #8
 800db5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db66:	2300      	movs	r3, #0
 800db68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db70:	f107 0308 	add.w	r3, r7, #8
 800db74:	4619      	mov	r1, r3
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff fe46 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 fb29 	bl	800e1d4 <SDMMC_GetCmdResp7>
 800db82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db84:	69fb      	ldr	r3, [r7, #28]
}
 800db86:	4618      	mov	r0, r3
 800db88:	3720      	adds	r7, #32
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}

0800db8e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800db8e:	b580      	push	{r7, lr}
 800db90:	b088      	sub	sp, #32
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
 800db96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800db9c:	2337      	movs	r3, #55	; 0x37
 800db9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dba6:	2300      	movs	r3, #0
 800dba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbb0:	f107 0308 	add.w	r3, r7, #8
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff fe26 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dbbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbc0:	2137      	movs	r1, #55	; 0x37
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f912 	bl	800ddec <SDMMC_GetCmdResp1>
 800dbc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbca:	69fb      	ldr	r3, [r7, #28]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3720      	adds	r7, #32
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b088      	sub	sp, #32
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dbe2:	2329      	movs	r3, #41	; 0x29
 800dbe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbec:	2300      	movs	r3, #0
 800dbee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbf6:	f107 0308 	add.w	r3, r7, #8
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f7ff fe03 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fa2e 	bl	800e064 <SDMMC_GetCmdResp3>
 800dc08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc0a:	69fb      	ldr	r3, [r7, #28]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3720      	adds	r7, #32
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b088      	sub	sp, #32
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dc22:	2306      	movs	r3, #6
 800dc24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc36:	f107 0308 	add.w	r3, r7, #8
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7ff fde3 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dc42:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc46:	2106      	movs	r1, #6
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 f8cf 	bl	800ddec <SDMMC_GetCmdResp1>
 800dc4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc50:	69fb      	ldr	r3, [r7, #28]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3720      	adds	r7, #32
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b088      	sub	sp, #32
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc62:	2300      	movs	r3, #0
 800dc64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dc66:	2333      	movs	r3, #51	; 0x33
 800dc68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc70:	2300      	movs	r3, #0
 800dc72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc7a:	f107 0308 	add.w	r3, r7, #8
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff fdc1 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dc86:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc8a:	2133      	movs	r1, #51	; 0x33
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 f8ad 	bl	800ddec <SDMMC_GetCmdResp1>
 800dc92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc94:	69fb      	ldr	r3, [r7, #28]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3720      	adds	r7, #32
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b088      	sub	sp, #32
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dca6:	2300      	movs	r3, #0
 800dca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dcaa:	2302      	movs	r3, #2
 800dcac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dcae:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dcb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcbe:	f107 0308 	add.w	r3, r7, #8
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7ff fd9f 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 f980 	bl	800dfd0 <SDMMC_GetCmdResp2>
 800dcd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcd2:	69fb      	ldr	r3, [r7, #28]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3720      	adds	r7, #32
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b088      	sub	sp, #32
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dcea:	2309      	movs	r3, #9
 800dcec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dcee:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dcf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcfe:	f107 0308 	add.w	r3, r7, #8
 800dd02:	4619      	mov	r1, r3
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f7ff fd7f 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f960 	bl	800dfd0 <SDMMC_GetCmdResp2>
 800dd10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd12:	69fb      	ldr	r3, [r7, #28]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3720      	adds	r7, #32
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b088      	sub	sp, #32
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd26:	2300      	movs	r3, #0
 800dd28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dd2a:	2303      	movs	r3, #3
 800dd2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd34:	2300      	movs	r3, #0
 800dd36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd3e:	f107 0308 	add.w	r3, r7, #8
 800dd42:	4619      	mov	r1, r3
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7ff fd5f 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	2103      	movs	r1, #3
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 f9c8 	bl	800e0e4 <SDMMC_GetCmdResp6>
 800dd54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd56:	69fb      	ldr	r3, [r7, #28]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3720      	adds	r7, #32
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b088      	sub	sp, #32
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dd6e:	230d      	movs	r3, #13
 800dd70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd82:	f107 0308 	add.w	r3, r7, #8
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7ff fd3d 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dd8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd92:	210d      	movs	r1, #13
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f829 	bl	800ddec <SDMMC_GetCmdResp1>
 800dd9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3720      	adds	r7, #32
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b088      	sub	sp, #32
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ddb2:	230d      	movs	r3, #13
 800ddb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddc6:	f107 0308 	add.w	r3, r7, #8
 800ddca:	4619      	mov	r1, r3
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7ff fd1b 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ddd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddd6:	210d      	movs	r1, #13
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 f807 	bl	800ddec <SDMMC_GetCmdResp1>
 800ddde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dde0:	69fb      	ldr	r3, [r7, #28]
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3720      	adds	r7, #32
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
	...

0800ddec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b088      	sub	sp, #32
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	607a      	str	r2, [r7, #4]
 800ddf8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ddfa:	4b70      	ldr	r3, [pc, #448]	; (800dfbc <SDMMC_GetCmdResp1+0x1d0>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a70      	ldr	r2, [pc, #448]	; (800dfc0 <SDMMC_GetCmdResp1+0x1d4>)
 800de00:	fba2 2303 	umull	r2, r3, r2, r3
 800de04:	0a5a      	lsrs	r2, r3, #9
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	fb02 f303 	mul.w	r3, r2, r3
 800de0c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	1e5a      	subs	r2, r3, #1
 800de12:	61fa      	str	r2, [r7, #28]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d102      	bne.n	800de1e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de1c:	e0c9      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de22:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800de24:	69ba      	ldr	r2, [r7, #24]
 800de26:	4b67      	ldr	r3, [pc, #412]	; (800dfc4 <SDMMC_GetCmdResp1+0x1d8>)
 800de28:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d0ef      	beq.n	800de0e <SDMMC_GetCmdResp1+0x22>
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1ea      	bne.n	800de0e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de3c:	f003 0304 	and.w	r3, r3, #4
 800de40:	2b00      	cmp	r3, #0
 800de42:	d004      	beq.n	800de4e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2204      	movs	r2, #4
 800de48:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de4a:	2304      	movs	r3, #4
 800de4c:	e0b1      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de52:	f003 0301 	and.w	r3, r3, #1
 800de56:	2b00      	cmp	r3, #0
 800de58:	d004      	beq.n	800de64 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2201      	movs	r2, #1
 800de5e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de60:	2301      	movs	r3, #1
 800de62:	e0a6      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	4a58      	ldr	r2, [pc, #352]	; (800dfc8 <SDMMC_GetCmdResp1+0x1dc>)
 800de68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f7ff fcf6 	bl	800d85c <SDMMC_GetCommandResponse>
 800de70:	4603      	mov	r3, r0
 800de72:	461a      	mov	r2, r3
 800de74:	7afb      	ldrb	r3, [r7, #11]
 800de76:	4293      	cmp	r3, r2
 800de78:	d001      	beq.n	800de7e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de7a:	2301      	movs	r3, #1
 800de7c:	e099      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800de7e:	2100      	movs	r1, #0
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f7ff fcf8 	bl	800d876 <SDMMC_GetResponse>
 800de86:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800de88:	697a      	ldr	r2, [r7, #20]
 800de8a:	4b50      	ldr	r3, [pc, #320]	; (800dfcc <SDMMC_GetCmdResp1+0x1e0>)
 800de8c:	4013      	ands	r3, r2
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d101      	bne.n	800de96 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800de92:	2300      	movs	r3, #0
 800de94:	e08d      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	da02      	bge.n	800dea2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800de9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dea0:	e087      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d001      	beq.n	800deb0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800deac:	2340      	movs	r3, #64	; 0x40
 800deae:	e080      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800deba:	2380      	movs	r3, #128	; 0x80
 800debc:	e079      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800decc:	e071      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ded8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dedc:	e069      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d002      	beq.n	800deee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800deec:	e061      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800def8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800defc:	e059      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800df08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df0c:	e051      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df14:	2b00      	cmp	r3, #0
 800df16:	d002      	beq.n	800df1e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800df18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df1c:	e049      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d002      	beq.n	800df2e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800df28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800df2c:	e041      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df34:	2b00      	cmp	r3, #0
 800df36:	d002      	beq.n	800df3e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800df38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df3c:	e039      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df44:	2b00      	cmp	r3, #0
 800df46:	d002      	beq.n	800df4e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800df48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800df4c:	e031      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df54:	2b00      	cmp	r3, #0
 800df56:	d002      	beq.n	800df5e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800df58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800df5c:	e029      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df64:	2b00      	cmp	r3, #0
 800df66:	d002      	beq.n	800df6e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800df68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800df6c:	e021      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df74:	2b00      	cmp	r3, #0
 800df76:	d002      	beq.n	800df7e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800df78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800df7c:	e019      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df84:	2b00      	cmp	r3, #0
 800df86:	d002      	beq.n	800df8e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800df88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800df8c:	e011      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df94:	2b00      	cmp	r3, #0
 800df96:	d002      	beq.n	800df9e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800df98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800df9c:	e009      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f003 0308 	and.w	r3, r3, #8
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d002      	beq.n	800dfae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dfa8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dfac:	e001      	b.n	800dfb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dfae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3720      	adds	r7, #32
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	24000000 	.word	0x24000000
 800dfc0:	10624dd3 	.word	0x10624dd3
 800dfc4:	00200045 	.word	0x00200045
 800dfc8:	002000c5 	.word	0x002000c5
 800dfcc:	fdffe008 	.word	0xfdffe008

0800dfd0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dfd8:	4b1f      	ldr	r3, [pc, #124]	; (800e058 <SDMMC_GetCmdResp2+0x88>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a1f      	ldr	r2, [pc, #124]	; (800e05c <SDMMC_GetCmdResp2+0x8c>)
 800dfde:	fba2 2303 	umull	r2, r3, r2, r3
 800dfe2:	0a5b      	lsrs	r3, r3, #9
 800dfe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfe8:	fb02 f303 	mul.w	r3, r2, r3
 800dfec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	1e5a      	subs	r2, r3, #1
 800dff2:	60fa      	str	r2, [r7, #12]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d102      	bne.n	800dffe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dffc:	e026      	b.n	800e04c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e002:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d0ef      	beq.n	800dfee <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1ea      	bne.n	800dfee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e01c:	f003 0304 	and.w	r3, r3, #4
 800e020:	2b00      	cmp	r3, #0
 800e022:	d004      	beq.n	800e02e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2204      	movs	r2, #4
 800e028:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e02a:	2304      	movs	r3, #4
 800e02c:	e00e      	b.n	800e04c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e032:	f003 0301 	and.w	r3, r3, #1
 800e036:	2b00      	cmp	r3, #0
 800e038:	d004      	beq.n	800e044 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2201      	movs	r2, #1
 800e03e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e040:	2301      	movs	r3, #1
 800e042:	e003      	b.n	800e04c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	4a06      	ldr	r2, [pc, #24]	; (800e060 <SDMMC_GetCmdResp2+0x90>)
 800e048:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e04a:	2300      	movs	r3, #0
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3714      	adds	r7, #20
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr
 800e058:	24000000 	.word	0x24000000
 800e05c:	10624dd3 	.word	0x10624dd3
 800e060:	002000c5 	.word	0x002000c5

0800e064 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e06c:	4b1a      	ldr	r3, [pc, #104]	; (800e0d8 <SDMMC_GetCmdResp3+0x74>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a1a      	ldr	r2, [pc, #104]	; (800e0dc <SDMMC_GetCmdResp3+0x78>)
 800e072:	fba2 2303 	umull	r2, r3, r2, r3
 800e076:	0a5b      	lsrs	r3, r3, #9
 800e078:	f241 3288 	movw	r2, #5000	; 0x1388
 800e07c:	fb02 f303 	mul.w	r3, r2, r3
 800e080:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	1e5a      	subs	r2, r3, #1
 800e086:	60fa      	str	r2, [r7, #12]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d102      	bne.n	800e092 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e08c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e090:	e01b      	b.n	800e0ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e096:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d0ef      	beq.n	800e082 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1ea      	bne.n	800e082 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b0:	f003 0304 	and.w	r3, r3, #4
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d004      	beq.n	800e0c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2204      	movs	r2, #4
 800e0bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0be:	2304      	movs	r3, #4
 800e0c0:	e003      	b.n	800e0ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	4a06      	ldr	r2, [pc, #24]	; (800e0e0 <SDMMC_GetCmdResp3+0x7c>)
 800e0c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e0c8:	2300      	movs	r3, #0
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3714      	adds	r7, #20
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr
 800e0d6:	bf00      	nop
 800e0d8:	24000000 	.word	0x24000000
 800e0dc:	10624dd3 	.word	0x10624dd3
 800e0e0:	002000c5 	.word	0x002000c5

0800e0e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b088      	sub	sp, #32
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	607a      	str	r2, [r7, #4]
 800e0f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e0f2:	4b35      	ldr	r3, [pc, #212]	; (800e1c8 <SDMMC_GetCmdResp6+0xe4>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a35      	ldr	r2, [pc, #212]	; (800e1cc <SDMMC_GetCmdResp6+0xe8>)
 800e0f8:	fba2 2303 	umull	r2, r3, r2, r3
 800e0fc:	0a5b      	lsrs	r3, r3, #9
 800e0fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800e102:	fb02 f303 	mul.w	r3, r2, r3
 800e106:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	1e5a      	subs	r2, r3, #1
 800e10c:	61fa      	str	r2, [r7, #28]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d102      	bne.n	800e118 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e112:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e116:	e052      	b.n	800e1be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e11c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e124:	2b00      	cmp	r3, #0
 800e126:	d0ef      	beq.n	800e108 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d1ea      	bne.n	800e108 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e136:	f003 0304 	and.w	r3, r3, #4
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d004      	beq.n	800e148 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2204      	movs	r2, #4
 800e142:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e144:	2304      	movs	r3, #4
 800e146:	e03a      	b.n	800e1be <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e14c:	f003 0301 	and.w	r3, r3, #1
 800e150:	2b00      	cmp	r3, #0
 800e152:	d004      	beq.n	800e15e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2201      	movs	r2, #1
 800e158:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e15a:	2301      	movs	r3, #1
 800e15c:	e02f      	b.n	800e1be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f7ff fb7c 	bl	800d85c <SDMMC_GetCommandResponse>
 800e164:	4603      	mov	r3, r0
 800e166:	461a      	mov	r2, r3
 800e168:	7afb      	ldrb	r3, [r7, #11]
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d001      	beq.n	800e172 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e16e:	2301      	movs	r3, #1
 800e170:	e025      	b.n	800e1be <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	4a16      	ldr	r2, [pc, #88]	; (800e1d0 <SDMMC_GetCmdResp6+0xec>)
 800e176:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e178:	2100      	movs	r1, #0
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f7ff fb7b 	bl	800d876 <SDMMC_GetResponse>
 800e180:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d106      	bne.n	800e19a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	0c1b      	lsrs	r3, r3, #16
 800e190:	b29a      	uxth	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e196:	2300      	movs	r3, #0
 800e198:	e011      	b.n	800e1be <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e1a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e1a8:	e009      	b.n	800e1be <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e1b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1b8:	e001      	b.n	800e1be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e1ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3720      	adds	r7, #32
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	24000000 	.word	0x24000000
 800e1cc:	10624dd3 	.word	0x10624dd3
 800e1d0:	002000c5 	.word	0x002000c5

0800e1d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e1dc:	4b22      	ldr	r3, [pc, #136]	; (800e268 <SDMMC_GetCmdResp7+0x94>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a22      	ldr	r2, [pc, #136]	; (800e26c <SDMMC_GetCmdResp7+0x98>)
 800e1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1e6:	0a5b      	lsrs	r3, r3, #9
 800e1e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1ec:	fb02 f303 	mul.w	r3, r2, r3
 800e1f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	1e5a      	subs	r2, r3, #1
 800e1f6:	60fa      	str	r2, [r7, #12]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d102      	bne.n	800e202 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e200:	e02c      	b.n	800e25c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e206:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d0ef      	beq.n	800e1f2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d1ea      	bne.n	800e1f2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e220:	f003 0304 	and.w	r3, r3, #4
 800e224:	2b00      	cmp	r3, #0
 800e226:	d004      	beq.n	800e232 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2204      	movs	r2, #4
 800e22c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e22e:	2304      	movs	r3, #4
 800e230:	e014      	b.n	800e25c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e236:	f003 0301 	and.w	r3, r3, #1
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d004      	beq.n	800e248 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e244:	2301      	movs	r3, #1
 800e246:	e009      	b.n	800e25c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2240      	movs	r2, #64	; 0x40
 800e258:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e25a:	2300      	movs	r3, #0

}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3714      	adds	r7, #20
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr
 800e268:	24000000 	.word	0x24000000
 800e26c:	10624dd3 	.word	0x10624dd3

0800e270 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e278:	4b11      	ldr	r3, [pc, #68]	; (800e2c0 <SDMMC_GetCmdError+0x50>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a11      	ldr	r2, [pc, #68]	; (800e2c4 <SDMMC_GetCmdError+0x54>)
 800e27e:	fba2 2303 	umull	r2, r3, r2, r3
 800e282:	0a5b      	lsrs	r3, r3, #9
 800e284:	f241 3288 	movw	r2, #5000	; 0x1388
 800e288:	fb02 f303 	mul.w	r3, r2, r3
 800e28c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	1e5a      	subs	r2, r3, #1
 800e292:	60fa      	str	r2, [r7, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d102      	bne.n	800e29e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e29c:	e009      	b.n	800e2b2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d0f1      	beq.n	800e28e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4a06      	ldr	r2, [pc, #24]	; (800e2c8 <SDMMC_GetCmdError+0x58>)
 800e2ae:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3714      	adds	r7, #20
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	24000000 	.word	0x24000000
 800e2c4:	10624dd3 	.word	0x10624dd3
 800e2c8:	002000c5 	.word	0x002000c5

0800e2cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e2cc:	b084      	sub	sp, #16
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b084      	sub	sp, #16
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	f107 001c 	add.w	r0, r7, #28
 800e2da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d120      	bne.n	800e326 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	68da      	ldr	r2, [r3, #12]
 800e2f4:	4b2a      	ldr	r3, [pc, #168]	; (800e3a0 <USB_CoreInit+0xd4>)
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d105      	bne.n	800e31a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f001 faf8 	bl	800f910 <USB_CoreReset>
 800e320:	4603      	mov	r3, r0
 800e322:	73fb      	strb	r3, [r7, #15]
 800e324:	e01a      	b.n	800e35c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f001 faec 	bl	800f910 <USB_CoreReset>
 800e338:	4603      	mov	r3, r0
 800e33a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d106      	bne.n	800e350 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e346:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	639a      	str	r2, [r3, #56]	; 0x38
 800e34e:	e005      	b.n	800e35c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e354:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d116      	bne.n	800e390 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e366:	b29a      	uxth	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e370:	4b0c      	ldr	r3, [pc, #48]	; (800e3a4 <USB_CoreInit+0xd8>)
 800e372:	4313      	orrs	r3, r2
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	f043 0206 	orr.w	r2, r3, #6
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	f043 0220 	orr.w	r2, r3, #32
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e390:	7bfb      	ldrb	r3, [r7, #15]
}
 800e392:	4618      	mov	r0, r3
 800e394:	3710      	adds	r7, #16
 800e396:	46bd      	mov	sp, r7
 800e398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e39c:	b004      	add	sp, #16
 800e39e:	4770      	bx	lr
 800e3a0:	ffbdffbf 	.word	0xffbdffbf
 800e3a4:	03ee0000 	.word	0x03ee0000

0800e3a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b087      	sub	sp, #28
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e3b6:	79fb      	ldrb	r3, [r7, #7]
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d165      	bne.n	800e488 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	4a41      	ldr	r2, [pc, #260]	; (800e4c4 <USB_SetTurnaroundTime+0x11c>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d906      	bls.n	800e3d2 <USB_SetTurnaroundTime+0x2a>
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	4a40      	ldr	r2, [pc, #256]	; (800e4c8 <USB_SetTurnaroundTime+0x120>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d202      	bcs.n	800e3d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e3cc:	230f      	movs	r3, #15
 800e3ce:	617b      	str	r3, [r7, #20]
 800e3d0:	e062      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	4a3c      	ldr	r2, [pc, #240]	; (800e4c8 <USB_SetTurnaroundTime+0x120>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d306      	bcc.n	800e3e8 <USB_SetTurnaroundTime+0x40>
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	4a3b      	ldr	r2, [pc, #236]	; (800e4cc <USB_SetTurnaroundTime+0x124>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d202      	bcs.n	800e3e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e3e2:	230e      	movs	r3, #14
 800e3e4:	617b      	str	r3, [r7, #20]
 800e3e6:	e057      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	4a38      	ldr	r2, [pc, #224]	; (800e4cc <USB_SetTurnaroundTime+0x124>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d306      	bcc.n	800e3fe <USB_SetTurnaroundTime+0x56>
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	4a37      	ldr	r2, [pc, #220]	; (800e4d0 <USB_SetTurnaroundTime+0x128>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d202      	bcs.n	800e3fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e3f8:	230d      	movs	r3, #13
 800e3fa:	617b      	str	r3, [r7, #20]
 800e3fc:	e04c      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	4a33      	ldr	r2, [pc, #204]	; (800e4d0 <USB_SetTurnaroundTime+0x128>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d306      	bcc.n	800e414 <USB_SetTurnaroundTime+0x6c>
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	4a32      	ldr	r2, [pc, #200]	; (800e4d4 <USB_SetTurnaroundTime+0x12c>)
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d802      	bhi.n	800e414 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e40e:	230c      	movs	r3, #12
 800e410:	617b      	str	r3, [r7, #20]
 800e412:	e041      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	4a2f      	ldr	r2, [pc, #188]	; (800e4d4 <USB_SetTurnaroundTime+0x12c>)
 800e418:	4293      	cmp	r3, r2
 800e41a:	d906      	bls.n	800e42a <USB_SetTurnaroundTime+0x82>
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	4a2e      	ldr	r2, [pc, #184]	; (800e4d8 <USB_SetTurnaroundTime+0x130>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d802      	bhi.n	800e42a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e424:	230b      	movs	r3, #11
 800e426:	617b      	str	r3, [r7, #20]
 800e428:	e036      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	4a2a      	ldr	r2, [pc, #168]	; (800e4d8 <USB_SetTurnaroundTime+0x130>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d906      	bls.n	800e440 <USB_SetTurnaroundTime+0x98>
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	4a29      	ldr	r2, [pc, #164]	; (800e4dc <USB_SetTurnaroundTime+0x134>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d802      	bhi.n	800e440 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e43a:	230a      	movs	r3, #10
 800e43c:	617b      	str	r3, [r7, #20]
 800e43e:	e02b      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	4a26      	ldr	r2, [pc, #152]	; (800e4dc <USB_SetTurnaroundTime+0x134>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d906      	bls.n	800e456 <USB_SetTurnaroundTime+0xae>
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	4a25      	ldr	r2, [pc, #148]	; (800e4e0 <USB_SetTurnaroundTime+0x138>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d202      	bcs.n	800e456 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e450:	2309      	movs	r3, #9
 800e452:	617b      	str	r3, [r7, #20]
 800e454:	e020      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	4a21      	ldr	r2, [pc, #132]	; (800e4e0 <USB_SetTurnaroundTime+0x138>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d306      	bcc.n	800e46c <USB_SetTurnaroundTime+0xc4>
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	4a20      	ldr	r2, [pc, #128]	; (800e4e4 <USB_SetTurnaroundTime+0x13c>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d802      	bhi.n	800e46c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e466:	2308      	movs	r3, #8
 800e468:	617b      	str	r3, [r7, #20]
 800e46a:	e015      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	4a1d      	ldr	r2, [pc, #116]	; (800e4e4 <USB_SetTurnaroundTime+0x13c>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d906      	bls.n	800e482 <USB_SetTurnaroundTime+0xda>
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	4a1c      	ldr	r2, [pc, #112]	; (800e4e8 <USB_SetTurnaroundTime+0x140>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d202      	bcs.n	800e482 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e47c:	2307      	movs	r3, #7
 800e47e:	617b      	str	r3, [r7, #20]
 800e480:	e00a      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e482:	2306      	movs	r3, #6
 800e484:	617b      	str	r3, [r7, #20]
 800e486:	e007      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e488:	79fb      	ldrb	r3, [r7, #7]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d102      	bne.n	800e494 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e48e:	2309      	movs	r3, #9
 800e490:	617b      	str	r3, [r7, #20]
 800e492:	e001      	b.n	800e498 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e494:	2309      	movs	r3, #9
 800e496:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	68da      	ldr	r2, [r3, #12]
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	029b      	lsls	r3, r3, #10
 800e4ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e4b0:	431a      	orrs	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e4b6:	2300      	movs	r3, #0
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	371c      	adds	r7, #28
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr
 800e4c4:	00d8acbf 	.word	0x00d8acbf
 800e4c8:	00e4e1c0 	.word	0x00e4e1c0
 800e4cc:	00f42400 	.word	0x00f42400
 800e4d0:	01067380 	.word	0x01067380
 800e4d4:	011a499f 	.word	0x011a499f
 800e4d8:	01312cff 	.word	0x01312cff
 800e4dc:	014ca43f 	.word	0x014ca43f
 800e4e0:	016e3600 	.word	0x016e3600
 800e4e4:	01a6ab1f 	.word	0x01a6ab1f
 800e4e8:	01e84800 	.word	0x01e84800

0800e4ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	f043 0201 	orr.w	r2, r3, #1
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr

0800e50e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e50e:	b480      	push	{r7}
 800e510:	b083      	sub	sp, #12
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	689b      	ldr	r3, [r3, #8]
 800e51a:	f023 0201 	bic.w	r2, r3, #1
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	460b      	mov	r3, r1
 800e53a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e53c:	2300      	movs	r3, #0
 800e53e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e54c:	78fb      	ldrb	r3, [r7, #3]
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d115      	bne.n	800e57e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e55e:	2001      	movs	r0, #1
 800e560:	f7f2 ff40 	bl	80013e4 <HAL_Delay>
      ms++;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	3301      	adds	r3, #1
 800e568:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f001 f93f 	bl	800f7ee <USB_GetMode>
 800e570:	4603      	mov	r3, r0
 800e572:	2b01      	cmp	r3, #1
 800e574:	d01e      	beq.n	800e5b4 <USB_SetCurrentMode+0x84>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2b31      	cmp	r3, #49	; 0x31
 800e57a:	d9f0      	bls.n	800e55e <USB_SetCurrentMode+0x2e>
 800e57c:	e01a      	b.n	800e5b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e57e:	78fb      	ldrb	r3, [r7, #3]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d115      	bne.n	800e5b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e590:	2001      	movs	r0, #1
 800e592:	f7f2 ff27 	bl	80013e4 <HAL_Delay>
      ms++;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	3301      	adds	r3, #1
 800e59a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f001 f926 	bl	800f7ee <USB_GetMode>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d005      	beq.n	800e5b4 <USB_SetCurrentMode+0x84>
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2b31      	cmp	r3, #49	; 0x31
 800e5ac:	d9f0      	bls.n	800e590 <USB_SetCurrentMode+0x60>
 800e5ae:	e001      	b.n	800e5b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e005      	b.n	800e5c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2b32      	cmp	r3, #50	; 0x32
 800e5b8:	d101      	bne.n	800e5be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e000      	b.n	800e5c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e5c8:	b084      	sub	sp, #16
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b086      	sub	sp, #24
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e5d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	613b      	str	r3, [r7, #16]
 800e5e6:	e009      	b.n	800e5fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	3340      	adds	r3, #64	; 0x40
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	4413      	add	r3, r2
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	613b      	str	r3, [r7, #16]
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	2b0e      	cmp	r3, #14
 800e600:	d9f2      	bls.n	800e5e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e604:	2b00      	cmp	r3, #0
 800e606:	d11c      	bne.n	800e642 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e616:	f043 0302 	orr.w	r3, r3, #2
 800e61a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e620:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	601a      	str	r2, [r3, #0]
 800e640:	e005      	b.n	800e64e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e646:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e654:	461a      	mov	r2, r3
 800e656:	2300      	movs	r3, #0
 800e658:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e660:	4619      	mov	r1, r3
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e668:	461a      	mov	r2, r3
 800e66a:	680b      	ldr	r3, [r1, #0]
 800e66c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e670:	2b01      	cmp	r3, #1
 800e672:	d10c      	bne.n	800e68e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e676:	2b00      	cmp	r3, #0
 800e678:	d104      	bne.n	800e684 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e67a:	2100      	movs	r1, #0
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 f965 	bl	800e94c <USB_SetDevSpeed>
 800e682:	e008      	b.n	800e696 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e684:	2101      	movs	r1, #1
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 f960 	bl	800e94c <USB_SetDevSpeed>
 800e68c:	e003      	b.n	800e696 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e68e:	2103      	movs	r1, #3
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f000 f95b 	bl	800e94c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e696:	2110      	movs	r1, #16
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f8f3 	bl	800e884 <USB_FlushTxFifo>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d001      	beq.n	800e6a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 f91f 	bl	800e8ec <USB_FlushRxFifo>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d001      	beq.n	800e6b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6be:	461a      	mov	r2, r3
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	2300      	movs	r3, #0
 800e6da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6dc:	2300      	movs	r3, #0
 800e6de:	613b      	str	r3, [r7, #16]
 800e6e0:	e043      	b.n	800e76a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	015a      	lsls	r2, r3, #5
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6f8:	d118      	bne.n	800e72c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d10a      	bne.n	800e716 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	015a      	lsls	r2, r3, #5
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	4413      	add	r3, r2
 800e708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e70c:	461a      	mov	r2, r3
 800e70e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e712:	6013      	str	r3, [r2, #0]
 800e714:	e013      	b.n	800e73e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	015a      	lsls	r2, r3, #5
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	4413      	add	r3, r2
 800e71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e722:	461a      	mov	r2, r3
 800e724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e728:	6013      	str	r3, [r2, #0]
 800e72a:	e008      	b.n	800e73e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	015a      	lsls	r2, r3, #5
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	4413      	add	r3, r2
 800e734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e738:	461a      	mov	r2, r3
 800e73a:	2300      	movs	r3, #0
 800e73c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	015a      	lsls	r2, r3, #5
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	4413      	add	r3, r2
 800e746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e74a:	461a      	mov	r2, r3
 800e74c:	2300      	movs	r3, #0
 800e74e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	015a      	lsls	r2, r3, #5
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	4413      	add	r3, r2
 800e758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e75c:	461a      	mov	r2, r3
 800e75e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	3301      	adds	r3, #1
 800e768:	613b      	str	r3, [r7, #16]
 800e76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76c:	693a      	ldr	r2, [r7, #16]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d3b7      	bcc.n	800e6e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e772:	2300      	movs	r3, #0
 800e774:	613b      	str	r3, [r7, #16]
 800e776:	e043      	b.n	800e800 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	015a      	lsls	r2, r3, #5
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	4413      	add	r3, r2
 800e780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e78a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e78e:	d118      	bne.n	800e7c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d10a      	bne.n	800e7ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	015a      	lsls	r2, r3, #5
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	4413      	add	r3, r2
 800e79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e7a8:	6013      	str	r3, [r2, #0]
 800e7aa:	e013      	b.n	800e7d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e7be:	6013      	str	r3, [r2, #0]
 800e7c0:	e008      	b.n	800e7d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	015a      	lsls	r2, r3, #5
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	4413      	add	r3, r2
 800e7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	015a      	lsls	r2, r3, #5
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	4413      	add	r3, r2
 800e7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	015a      	lsls	r2, r3, #5
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e7f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	613b      	str	r3, [r7, #16]
 800e800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e802:	693a      	ldr	r2, [r7, #16]
 800e804:	429a      	cmp	r2, r3
 800e806:	d3b7      	bcc.n	800e778 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e80e:	691b      	ldr	r3, [r3, #16]
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e81a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e828:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d105      	bne.n	800e83c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	699b      	ldr	r3, [r3, #24]
 800e834:	f043 0210 	orr.w	r2, r3, #16
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	699a      	ldr	r2, [r3, #24]
 800e840:	4b0e      	ldr	r3, [pc, #56]	; (800e87c <USB_DevInit+0x2b4>)
 800e842:	4313      	orrs	r3, r2
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d005      	beq.n	800e85a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	699b      	ldr	r3, [r3, #24]
 800e852:	f043 0208 	orr.w	r2, r3, #8
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	d105      	bne.n	800e86c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	699a      	ldr	r2, [r3, #24]
 800e864:	4b06      	ldr	r3, [pc, #24]	; (800e880 <USB_DevInit+0x2b8>)
 800e866:	4313      	orrs	r3, r2
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3718      	adds	r7, #24
 800e872:	46bd      	mov	sp, r7
 800e874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e878:	b004      	add	sp, #16
 800e87a:	4770      	bx	lr
 800e87c:	803c3800 	.word	0x803c3800
 800e880:	40000004 	.word	0x40000004

0800e884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e88e:	2300      	movs	r3, #0
 800e890:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	3301      	adds	r3, #1
 800e896:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	4a13      	ldr	r2, [pc, #76]	; (800e8e8 <USB_FlushTxFifo+0x64>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d901      	bls.n	800e8a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e8a0:	2303      	movs	r3, #3
 800e8a2:	e01b      	b.n	800e8dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	691b      	ldr	r3, [r3, #16]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	daf2      	bge.n	800e892 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	019b      	lsls	r3, r3, #6
 800e8b4:	f043 0220 	orr.w	r2, r3, #32
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	4a08      	ldr	r2, [pc, #32]	; (800e8e8 <USB_FlushTxFifo+0x64>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d901      	bls.n	800e8ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e8ca:	2303      	movs	r3, #3
 800e8cc:	e006      	b.n	800e8dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	f003 0320 	and.w	r3, r3, #32
 800e8d6:	2b20      	cmp	r3, #32
 800e8d8:	d0f0      	beq.n	800e8bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3714      	adds	r7, #20
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr
 800e8e8:	00030d40 	.word	0x00030d40

0800e8ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b085      	sub	sp, #20
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	4a11      	ldr	r2, [pc, #68]	; (800e948 <USB_FlushRxFifo+0x5c>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d901      	bls.n	800e90a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e906:	2303      	movs	r3, #3
 800e908:	e018      	b.n	800e93c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	691b      	ldr	r3, [r3, #16]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	daf2      	bge.n	800e8f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e912:	2300      	movs	r3, #0
 800e914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2210      	movs	r2, #16
 800e91a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	3301      	adds	r3, #1
 800e920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	4a08      	ldr	r2, [pc, #32]	; (800e948 <USB_FlushRxFifo+0x5c>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d901      	bls.n	800e92e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e92a:	2303      	movs	r3, #3
 800e92c:	e006      	b.n	800e93c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	691b      	ldr	r3, [r3, #16]
 800e932:	f003 0310 	and.w	r3, r3, #16
 800e936:	2b10      	cmp	r3, #16
 800e938:	d0f0      	beq.n	800e91c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3714      	adds	r7, #20
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	00030d40 	.word	0x00030d40

0800e94c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	460b      	mov	r3, r1
 800e956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	78fb      	ldrb	r3, [r7, #3]
 800e966:	68f9      	ldr	r1, [r7, #12]
 800e968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e96c:	4313      	orrs	r3, r2
 800e96e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e970:	2300      	movs	r3, #0
}
 800e972:	4618      	mov	r0, r3
 800e974:	3714      	adds	r7, #20
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr

0800e97e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e97e:	b480      	push	{r7}
 800e980:	b087      	sub	sp, #28
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e990:	689b      	ldr	r3, [r3, #8]
 800e992:	f003 0306 	and.w	r3, r3, #6
 800e996:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d102      	bne.n	800e9a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	75fb      	strb	r3, [r7, #23]
 800e9a2:	e00a      	b.n	800e9ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2b02      	cmp	r3, #2
 800e9a8:	d002      	beq.n	800e9b0 <USB_GetDevSpeed+0x32>
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2b06      	cmp	r3, #6
 800e9ae:	d102      	bne.n	800e9b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	75fb      	strb	r3, [r7, #23]
 800e9b4:	e001      	b.n	800e9ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e9b6:	230f      	movs	r3, #15
 800e9b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	371c      	adds	r7, #28
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	785b      	ldrb	r3, [r3, #1]
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d139      	bne.n	800ea58 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9ea:	69da      	ldr	r2, [r3, #28]
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	f003 030f 	and.w	r3, r3, #15
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	fa01 f303 	lsl.w	r3, r1, r3
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	68f9      	ldr	r1, [r7, #12]
 800e9fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea02:	4313      	orrs	r3, r2
 800ea04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	015a      	lsls	r2, r3, #5
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d153      	bne.n	800eac4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	015a      	lsls	r2, r3, #5
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	4413      	add	r3, r2
 800ea24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	791b      	ldrb	r3, [r3, #4]
 800ea36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	059b      	lsls	r3, r3, #22
 800ea3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea40:	431a      	orrs	r2, r3
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	0159      	lsls	r1, r3, #5
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	440b      	add	r3, r1
 800ea4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea4e:	4619      	mov	r1, r3
 800ea50:	4b20      	ldr	r3, [pc, #128]	; (800ead4 <USB_ActivateEndpoint+0x10c>)
 800ea52:	4313      	orrs	r3, r2
 800ea54:	600b      	str	r3, [r1, #0]
 800ea56:	e035      	b.n	800eac4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea5e:	69da      	ldr	r2, [r3, #28]
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	f003 030f 	and.w	r3, r3, #15
 800ea68:	2101      	movs	r1, #1
 800ea6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ea6e:	041b      	lsls	r3, r3, #16
 800ea70:	68f9      	ldr	r1, [r7, #12]
 800ea72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea76:	4313      	orrs	r3, r2
 800ea78:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	015a      	lsls	r2, r3, #5
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	4413      	add	r3, r2
 800ea82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d119      	bne.n	800eac4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	015a      	lsls	r2, r3, #5
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	4413      	add	r3, r2
 800ea98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	689b      	ldr	r3, [r3, #8]
 800eaa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	791b      	ldrb	r3, [r3, #4]
 800eaaa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eaac:	430b      	orrs	r3, r1
 800eaae:	431a      	orrs	r2, r3
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	0159      	lsls	r1, r3, #5
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	440b      	add	r3, r1
 800eab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eabc:	4619      	mov	r1, r3
 800eabe:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <USB_ActivateEndpoint+0x10c>)
 800eac0:	4313      	orrs	r3, r2
 800eac2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3714      	adds	r7, #20
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr
 800ead2:	bf00      	nop
 800ead4:	10008000 	.word	0x10008000

0800ead8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ead8:	b480      	push	{r7}
 800eada:	b085      	sub	sp, #20
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	785b      	ldrb	r3, [r3, #1]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d161      	bne.n	800ebb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	015a      	lsls	r2, r3, #5
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	4413      	add	r3, r2
 800eafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb0a:	d11f      	bne.n	800eb4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	015a      	lsls	r2, r3, #5
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	4413      	add	r3, r2
 800eb14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	68ba      	ldr	r2, [r7, #8]
 800eb1c:	0151      	lsls	r1, r2, #5
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	440a      	add	r2, r1
 800eb22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eb2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	015a      	lsls	r2, r3, #5
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	4413      	add	r3, r2
 800eb34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	68ba      	ldr	r2, [r7, #8]
 800eb3c:	0151      	lsls	r1, r2, #5
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	440a      	add	r2, r1
 800eb42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eb4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	f003 030f 	and.w	r3, r3, #15
 800eb5c:	2101      	movs	r1, #1
 800eb5e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	43db      	mvns	r3, r3
 800eb66:	68f9      	ldr	r1, [r7, #12]
 800eb68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb6c:	4013      	ands	r3, r2
 800eb6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb76:	69da      	ldr	r2, [r3, #28]
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	f003 030f 	and.w	r3, r3, #15
 800eb80:	2101      	movs	r1, #1
 800eb82:	fa01 f303 	lsl.w	r3, r1, r3
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	43db      	mvns	r3, r3
 800eb8a:	68f9      	ldr	r1, [r7, #12]
 800eb8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb90:	4013      	ands	r3, r2
 800eb92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	015a      	lsls	r2, r3, #5
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	0159      	lsls	r1, r3, #5
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	440b      	add	r3, r1
 800ebaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebae:	4619      	mov	r1, r3
 800ebb0:	4b35      	ldr	r3, [pc, #212]	; (800ec88 <USB_DeactivateEndpoint+0x1b0>)
 800ebb2:	4013      	ands	r3, r2
 800ebb4:	600b      	str	r3, [r1, #0]
 800ebb6:	e060      	b.n	800ec7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	015a      	lsls	r2, r3, #5
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebce:	d11f      	bne.n	800ec10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	015a      	lsls	r2, r3, #5
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	0151      	lsls	r1, r2, #5
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	440a      	add	r2, r1
 800ebe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ebee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	015a      	lsls	r2, r3, #5
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	4413      	add	r3, r2
 800ebf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	68ba      	ldr	r2, [r7, #8]
 800ec00:	0151      	lsls	r1, r2, #5
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	440a      	add	r2, r1
 800ec06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ec0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	f003 030f 	and.w	r3, r3, #15
 800ec20:	2101      	movs	r1, #1
 800ec22:	fa01 f303 	lsl.w	r3, r1, r3
 800ec26:	041b      	lsls	r3, r3, #16
 800ec28:	43db      	mvns	r3, r3
 800ec2a:	68f9      	ldr	r1, [r7, #12]
 800ec2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec30:	4013      	ands	r3, r2
 800ec32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec3a:	69da      	ldr	r2, [r3, #28]
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	f003 030f 	and.w	r3, r3, #15
 800ec44:	2101      	movs	r1, #1
 800ec46:	fa01 f303 	lsl.w	r3, r1, r3
 800ec4a:	041b      	lsls	r3, r3, #16
 800ec4c:	43db      	mvns	r3, r3
 800ec4e:	68f9      	ldr	r1, [r7, #12]
 800ec50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec54:	4013      	ands	r3, r2
 800ec56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	015a      	lsls	r2, r3, #5
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	4413      	add	r3, r2
 800ec60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	0159      	lsls	r1, r3, #5
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	440b      	add	r3, r1
 800ec6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec72:	4619      	mov	r1, r3
 800ec74:	4b05      	ldr	r3, [pc, #20]	; (800ec8c <USB_DeactivateEndpoint+0x1b4>)
 800ec76:	4013      	ands	r3, r2
 800ec78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	ec337800 	.word	0xec337800
 800ec8c:	eff37800 	.word	0xeff37800

0800ec90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b08a      	sub	sp, #40	; 0x28
 800ec94:	af02      	add	r7, sp, #8
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	785b      	ldrb	r3, [r3, #1]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	f040 8181 	bne.w	800efb4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	691b      	ldr	r3, [r3, #16]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d132      	bne.n	800ed20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	015a      	lsls	r2, r3, #5
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecc6:	691a      	ldr	r2, [r3, #16]
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	0159      	lsls	r1, r3, #5
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	440b      	add	r3, r1
 800ecd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	4ba5      	ldr	r3, [pc, #660]	; (800ef6c <USB_EPStartXfer+0x2dc>)
 800ecd8:	4013      	ands	r3, r2
 800ecda:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	015a      	lsls	r2, r3, #5
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	4413      	add	r3, r2
 800ece4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	69ba      	ldr	r2, [r7, #24]
 800ecec:	0151      	lsls	r1, r2, #5
 800ecee:	69fa      	ldr	r2, [r7, #28]
 800ecf0:	440a      	add	r2, r1
 800ecf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ecfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	015a      	lsls	r2, r3, #5
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	4413      	add	r3, r2
 800ed04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed08:	691a      	ldr	r2, [r3, #16]
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	0159      	lsls	r1, r3, #5
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	440b      	add	r3, r1
 800ed12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed16:	4619      	mov	r1, r3
 800ed18:	4b95      	ldr	r3, [pc, #596]	; (800ef70 <USB_EPStartXfer+0x2e0>)
 800ed1a:	4013      	ands	r3, r2
 800ed1c:	610b      	str	r3, [r1, #16]
 800ed1e:	e092      	b.n	800ee46 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	015a      	lsls	r2, r3, #5
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	4413      	add	r3, r2
 800ed28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed2c:	691a      	ldr	r2, [r3, #16]
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	0159      	lsls	r1, r3, #5
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	440b      	add	r3, r1
 800ed36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	4b8c      	ldr	r3, [pc, #560]	; (800ef70 <USB_EPStartXfer+0x2e0>)
 800ed3e:	4013      	ands	r3, r2
 800ed40:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed42:	69bb      	ldr	r3, [r7, #24]
 800ed44:	015a      	lsls	r2, r3, #5
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	4413      	add	r3, r2
 800ed4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed4e:	691a      	ldr	r2, [r3, #16]
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	0159      	lsls	r1, r3, #5
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	440b      	add	r3, r1
 800ed58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	4b83      	ldr	r3, [pc, #524]	; (800ef6c <USB_EPStartXfer+0x2dc>)
 800ed60:	4013      	ands	r3, r2
 800ed62:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d11a      	bne.n	800eda0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	691a      	ldr	r2, [r3, #16]
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	689b      	ldr	r3, [r3, #8]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d903      	bls.n	800ed7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	689a      	ldr	r2, [r3, #8]
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	015a      	lsls	r2, r3, #5
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	4413      	add	r3, r2
 800ed86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed8a:	691b      	ldr	r3, [r3, #16]
 800ed8c:	69ba      	ldr	r2, [r7, #24]
 800ed8e:	0151      	lsls	r1, r2, #5
 800ed90:	69fa      	ldr	r2, [r7, #28]
 800ed92:	440a      	add	r2, r1
 800ed94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed9c:	6113      	str	r3, [r2, #16]
 800ed9e:	e01b      	b.n	800edd8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	015a      	lsls	r2, r3, #5
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	4413      	add	r3, r2
 800eda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edac:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	6919      	ldr	r1, [r3, #16]
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	440b      	add	r3, r1
 800edb8:	1e59      	subs	r1, r3, #1
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	689b      	ldr	r3, [r3, #8]
 800edbe:	fbb1 f3f3 	udiv	r3, r1, r3
 800edc2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800edc4:	4b6b      	ldr	r3, [pc, #428]	; (800ef74 <USB_EPStartXfer+0x2e4>)
 800edc6:	400b      	ands	r3, r1
 800edc8:	69b9      	ldr	r1, [r7, #24]
 800edca:	0148      	lsls	r0, r1, #5
 800edcc:	69f9      	ldr	r1, [r7, #28]
 800edce:	4401      	add	r1, r0
 800edd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800edd4:	4313      	orrs	r3, r2
 800edd6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	015a      	lsls	r2, r3, #5
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	4413      	add	r3, r2
 800ede0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ede4:	691a      	ldr	r2, [r3, #16]
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	691b      	ldr	r3, [r3, #16]
 800edea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800edee:	69b9      	ldr	r1, [r7, #24]
 800edf0:	0148      	lsls	r0, r1, #5
 800edf2:	69f9      	ldr	r1, [r7, #28]
 800edf4:	4401      	add	r1, r0
 800edf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800edfa:	4313      	orrs	r3, r2
 800edfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	791b      	ldrb	r3, [r3, #4]
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d11f      	bne.n	800ee46 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	015a      	lsls	r2, r3, #5
 800ee0a:	69fb      	ldr	r3, [r7, #28]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee12:	691b      	ldr	r3, [r3, #16]
 800ee14:	69ba      	ldr	r2, [r7, #24]
 800ee16:	0151      	lsls	r1, r2, #5
 800ee18:	69fa      	ldr	r2, [r7, #28]
 800ee1a:	440a      	add	r2, r1
 800ee1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ee24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	015a      	lsls	r2, r3, #5
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee32:	691b      	ldr	r3, [r3, #16]
 800ee34:	69ba      	ldr	r2, [r7, #24]
 800ee36:	0151      	lsls	r1, r2, #5
 800ee38:	69fa      	ldr	r2, [r7, #28]
 800ee3a:	440a      	add	r2, r1
 800ee3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ee46:	79fb      	ldrb	r3, [r7, #7]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d14b      	bne.n	800eee4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	69db      	ldr	r3, [r3, #28]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d009      	beq.n	800ee68 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	015a      	lsls	r2, r3, #5
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee60:	461a      	mov	r2, r3
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	69db      	ldr	r3, [r3, #28]
 800ee66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	791b      	ldrb	r3, [r3, #4]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d128      	bne.n	800eec2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee76:	689b      	ldr	r3, [r3, #8]
 800ee78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d110      	bne.n	800eea2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	015a      	lsls	r2, r3, #5
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	4413      	add	r3, r2
 800ee88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	69ba      	ldr	r2, [r7, #24]
 800ee90:	0151      	lsls	r1, r2, #5
 800ee92:	69fa      	ldr	r2, [r7, #28]
 800ee94:	440a      	add	r2, r1
 800ee96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee9e:	6013      	str	r3, [r2, #0]
 800eea0:	e00f      	b.n	800eec2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	015a      	lsls	r2, r3, #5
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	4413      	add	r3, r2
 800eeaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	69ba      	ldr	r2, [r7, #24]
 800eeb2:	0151      	lsls	r1, r2, #5
 800eeb4:	69fa      	ldr	r2, [r7, #28]
 800eeb6:	440a      	add	r2, r1
 800eeb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eec0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	015a      	lsls	r2, r3, #5
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	4413      	add	r3, r2
 800eeca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	69ba      	ldr	r2, [r7, #24]
 800eed2:	0151      	lsls	r1, r2, #5
 800eed4:	69fa      	ldr	r2, [r7, #28]
 800eed6:	440a      	add	r2, r1
 800eed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eedc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eee0:	6013      	str	r3, [r2, #0]
 800eee2:	e16a      	b.n	800f1ba <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	015a      	lsls	r2, r3, #5
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	4413      	add	r3, r2
 800eeec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	69ba      	ldr	r2, [r7, #24]
 800eef4:	0151      	lsls	r1, r2, #5
 800eef6:	69fa      	ldr	r2, [r7, #28]
 800eef8:	440a      	add	r2, r1
 800eefa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eefe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	791b      	ldrb	r3, [r3, #4]
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d015      	beq.n	800ef38 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	691b      	ldr	r3, [r3, #16]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f000 8152 	beq.w	800f1ba <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	f003 030f 	and.w	r3, r3, #15
 800ef26:	2101      	movs	r1, #1
 800ef28:	fa01 f303 	lsl.w	r3, r1, r3
 800ef2c:	69f9      	ldr	r1, [r7, #28]
 800ef2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef32:	4313      	orrs	r3, r2
 800ef34:	634b      	str	r3, [r1, #52]	; 0x34
 800ef36:	e140      	b.n	800f1ba <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d117      	bne.n	800ef78 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	015a      	lsls	r2, r3, #5
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	4413      	add	r3, r2
 800ef50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	69ba      	ldr	r2, [r7, #24]
 800ef58:	0151      	lsls	r1, r2, #5
 800ef5a:	69fa      	ldr	r2, [r7, #28]
 800ef5c:	440a      	add	r2, r1
 800ef5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef66:	6013      	str	r3, [r2, #0]
 800ef68:	e016      	b.n	800ef98 <USB_EPStartXfer+0x308>
 800ef6a:	bf00      	nop
 800ef6c:	e007ffff 	.word	0xe007ffff
 800ef70:	fff80000 	.word	0xfff80000
 800ef74:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	015a      	lsls	r2, r3, #5
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	4413      	add	r3, r2
 800ef80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	69ba      	ldr	r2, [r7, #24]
 800ef88:	0151      	lsls	r1, r2, #5
 800ef8a:	69fa      	ldr	r2, [r7, #28]
 800ef8c:	440a      	add	r2, r1
 800ef8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef96:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	68d9      	ldr	r1, [r3, #12]
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	781a      	ldrb	r2, [r3, #0]
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	b298      	uxth	r0, r3
 800efa6:	79fb      	ldrb	r3, [r7, #7]
 800efa8:	9300      	str	r3, [sp, #0]
 800efaa:	4603      	mov	r3, r0
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f000 f9b9 	bl	800f324 <USB_WritePacket>
 800efb2:	e102      	b.n	800f1ba <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	015a      	lsls	r2, r3, #5
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	4413      	add	r3, r2
 800efbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efc0:	691a      	ldr	r2, [r3, #16]
 800efc2:	69bb      	ldr	r3, [r7, #24]
 800efc4:	0159      	lsls	r1, r3, #5
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	440b      	add	r3, r1
 800efca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efce:	4619      	mov	r1, r3
 800efd0:	4b7c      	ldr	r3, [pc, #496]	; (800f1c4 <USB_EPStartXfer+0x534>)
 800efd2:	4013      	ands	r3, r2
 800efd4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	015a      	lsls	r2, r3, #5
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	4413      	add	r3, r2
 800efde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe2:	691a      	ldr	r2, [r3, #16]
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	0159      	lsls	r1, r3, #5
 800efe8:	69fb      	ldr	r3, [r7, #28]
 800efea:	440b      	add	r3, r1
 800efec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eff0:	4619      	mov	r1, r3
 800eff2:	4b75      	ldr	r3, [pc, #468]	; (800f1c8 <USB_EPStartXfer+0x538>)
 800eff4:	4013      	ands	r3, r2
 800eff6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d12f      	bne.n	800f05e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	691b      	ldr	r3, [r3, #16]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d003      	beq.n	800f00e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	689a      	ldr	r2, [r3, #8]
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	689a      	ldr	r2, [r3, #8]
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	015a      	lsls	r2, r3, #5
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	4413      	add	r3, r2
 800f01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f022:	691a      	ldr	r2, [r3, #16]
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	6a1b      	ldr	r3, [r3, #32]
 800f028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f02c:	69b9      	ldr	r1, [r7, #24]
 800f02e:	0148      	lsls	r0, r1, #5
 800f030:	69f9      	ldr	r1, [r7, #28]
 800f032:	4401      	add	r1, r0
 800f034:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f038:	4313      	orrs	r3, r2
 800f03a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	015a      	lsls	r2, r3, #5
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	4413      	add	r3, r2
 800f044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f048:	691b      	ldr	r3, [r3, #16]
 800f04a:	69ba      	ldr	r2, [r7, #24]
 800f04c:	0151      	lsls	r1, r2, #5
 800f04e:	69fa      	ldr	r2, [r7, #28]
 800f050:	440a      	add	r2, r1
 800f052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f05a:	6113      	str	r3, [r2, #16]
 800f05c:	e05f      	b.n	800f11e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d123      	bne.n	800f0ae <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	015a      	lsls	r2, r3, #5
 800f06a:	69fb      	ldr	r3, [r7, #28]
 800f06c:	4413      	add	r3, r2
 800f06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f072:	691a      	ldr	r2, [r3, #16]
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f07c:	69b9      	ldr	r1, [r7, #24]
 800f07e:	0148      	lsls	r0, r1, #5
 800f080:	69f9      	ldr	r1, [r7, #28]
 800f082:	4401      	add	r1, r0
 800f084:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f088:	4313      	orrs	r3, r2
 800f08a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	015a      	lsls	r2, r3, #5
 800f090:	69fb      	ldr	r3, [r7, #28]
 800f092:	4413      	add	r3, r2
 800f094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	69ba      	ldr	r2, [r7, #24]
 800f09c:	0151      	lsls	r1, r2, #5
 800f09e:	69fa      	ldr	r2, [r7, #28]
 800f0a0:	440a      	add	r2, r1
 800f0a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0aa:	6113      	str	r3, [r2, #16]
 800f0ac:	e037      	b.n	800f11e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	691a      	ldr	r2, [r3, #16]
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	1e5a      	subs	r2, r3, #1
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0c2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	8afa      	ldrh	r2, [r7, #22]
 800f0ca:	fb03 f202 	mul.w	r2, r3, r2
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	015a      	lsls	r2, r3, #5
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	4413      	add	r3, r2
 800f0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0de:	691a      	ldr	r2, [r3, #16]
 800f0e0:	8afb      	ldrh	r3, [r7, #22]
 800f0e2:	04d9      	lsls	r1, r3, #19
 800f0e4:	4b39      	ldr	r3, [pc, #228]	; (800f1cc <USB_EPStartXfer+0x53c>)
 800f0e6:	400b      	ands	r3, r1
 800f0e8:	69b9      	ldr	r1, [r7, #24]
 800f0ea:	0148      	lsls	r0, r1, #5
 800f0ec:	69f9      	ldr	r1, [r7, #28]
 800f0ee:	4401      	add	r1, r0
 800f0f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	015a      	lsls	r2, r3, #5
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	4413      	add	r3, r2
 800f100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f104:	691a      	ldr	r2, [r3, #16]
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	6a1b      	ldr	r3, [r3, #32]
 800f10a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f10e:	69b9      	ldr	r1, [r7, #24]
 800f110:	0148      	lsls	r0, r1, #5
 800f112:	69f9      	ldr	r1, [r7, #28]
 800f114:	4401      	add	r1, r0
 800f116:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f11a:	4313      	orrs	r3, r2
 800f11c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	2b01      	cmp	r3, #1
 800f122:	d10d      	bne.n	800f140 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d009      	beq.n	800f140 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	68d9      	ldr	r1, [r3, #12]
 800f130:	69bb      	ldr	r3, [r7, #24]
 800f132:	015a      	lsls	r2, r3, #5
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	4413      	add	r3, r2
 800f138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f13c:	460a      	mov	r2, r1
 800f13e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	791b      	ldrb	r3, [r3, #4]
 800f144:	2b01      	cmp	r3, #1
 800f146:	d128      	bne.n	800f19a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f154:	2b00      	cmp	r3, #0
 800f156:	d110      	bne.n	800f17a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	015a      	lsls	r2, r3, #5
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	4413      	add	r3, r2
 800f160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	69ba      	ldr	r2, [r7, #24]
 800f168:	0151      	lsls	r1, r2, #5
 800f16a:	69fa      	ldr	r2, [r7, #28]
 800f16c:	440a      	add	r2, r1
 800f16e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	e00f      	b.n	800f19a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	015a      	lsls	r2, r3, #5
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	4413      	add	r3, r2
 800f182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	69ba      	ldr	r2, [r7, #24]
 800f18a:	0151      	lsls	r1, r2, #5
 800f18c:	69fa      	ldr	r2, [r7, #28]
 800f18e:	440a      	add	r2, r1
 800f190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f198:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f19a:	69bb      	ldr	r3, [r7, #24]
 800f19c:	015a      	lsls	r2, r3, #5
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	69ba      	ldr	r2, [r7, #24]
 800f1aa:	0151      	lsls	r1, r2, #5
 800f1ac:	69fa      	ldr	r2, [r7, #28]
 800f1ae:	440a      	add	r2, r1
 800f1b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f1ba:	2300      	movs	r3, #0
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3720      	adds	r7, #32
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	fff80000 	.word	0xfff80000
 800f1c8:	e007ffff 	.word	0xe007ffff
 800f1cc:	1ff80000 	.word	0x1ff80000

0800f1d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b087      	sub	sp, #28
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	785b      	ldrb	r3, [r3, #1]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d14a      	bne.n	800f284 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	015a      	lsls	r2, r3, #5
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f206:	f040 8086 	bne.w	800f316 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	015a      	lsls	r2, r3, #5
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	4413      	add	r3, r2
 800f214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	683a      	ldr	r2, [r7, #0]
 800f21c:	7812      	ldrb	r2, [r2, #0]
 800f21e:	0151      	lsls	r1, r2, #5
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	440a      	add	r2, r1
 800f224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f228:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f22c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	015a      	lsls	r2, r3, #5
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	4413      	add	r3, r2
 800f238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	7812      	ldrb	r2, [r2, #0]
 800f242:	0151      	lsls	r1, r2, #5
 800f244:	693a      	ldr	r2, [r7, #16]
 800f246:	440a      	add	r2, r1
 800f248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f24c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f250:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	3301      	adds	r3, #1
 800f256:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f242 7210 	movw	r2, #10000	; 0x2710
 800f25e:	4293      	cmp	r3, r2
 800f260:	d902      	bls.n	800f268 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f262:	2301      	movs	r3, #1
 800f264:	75fb      	strb	r3, [r7, #23]
          break;
 800f266:	e056      	b.n	800f316 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	015a      	lsls	r2, r3, #5
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	4413      	add	r3, r2
 800f272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f27c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f280:	d0e7      	beq.n	800f252 <USB_EPStopXfer+0x82>
 800f282:	e048      	b.n	800f316 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	015a      	lsls	r2, r3, #5
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	4413      	add	r3, r2
 800f28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f29c:	d13b      	bne.n	800f316 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	015a      	lsls	r2, r3, #5
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	683a      	ldr	r2, [r7, #0]
 800f2b0:	7812      	ldrb	r2, [r2, #0]
 800f2b2:	0151      	lsls	r1, r2, #5
 800f2b4:	693a      	ldr	r2, [r7, #16]
 800f2b6:	440a      	add	r2, r1
 800f2b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f2c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	015a      	lsls	r2, r3, #5
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	4413      	add	r3, r2
 800f2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	7812      	ldrb	r2, [r2, #0]
 800f2d6:	0151      	lsls	r1, r2, #5
 800f2d8:	693a      	ldr	r2, [r7, #16]
 800f2da:	440a      	add	r2, r1
 800f2dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f2e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f242 7210 	movw	r2, #10000	; 0x2710
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d902      	bls.n	800f2fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	75fb      	strb	r3, [r7, #23]
          break;
 800f2fa:	e00c      	b.n	800f316 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	015a      	lsls	r2, r3, #5
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	4413      	add	r3, r2
 800f306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f314:	d0e7      	beq.n	800f2e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f316:	7dfb      	ldrb	r3, [r7, #23]
}
 800f318:	4618      	mov	r0, r3
 800f31a:	371c      	adds	r7, #28
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f324:	b480      	push	{r7}
 800f326:	b089      	sub	sp, #36	; 0x24
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	4611      	mov	r1, r2
 800f330:	461a      	mov	r2, r3
 800f332:	460b      	mov	r3, r1
 800f334:	71fb      	strb	r3, [r7, #7]
 800f336:	4613      	mov	r3, r2
 800f338:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f342:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f346:	2b00      	cmp	r3, #0
 800f348:	d123      	bne.n	800f392 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f34a:	88bb      	ldrh	r3, [r7, #4]
 800f34c:	3303      	adds	r3, #3
 800f34e:	089b      	lsrs	r3, r3, #2
 800f350:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f352:	2300      	movs	r3, #0
 800f354:	61bb      	str	r3, [r7, #24]
 800f356:	e018      	b.n	800f38a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f358:	79fb      	ldrb	r3, [r7, #7]
 800f35a:	031a      	lsls	r2, r3, #12
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	4413      	add	r3, r2
 800f360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f364:	461a      	mov	r2, r3
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	3301      	adds	r3, #1
 800f370:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	3301      	adds	r3, #1
 800f376:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	3301      	adds	r3, #1
 800f37c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	3301      	adds	r3, #1
 800f382:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	3301      	adds	r3, #1
 800f388:	61bb      	str	r3, [r7, #24]
 800f38a:	69ba      	ldr	r2, [r7, #24]
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d3e2      	bcc.n	800f358 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f392:	2300      	movs	r3, #0
}
 800f394:	4618      	mov	r0, r3
 800f396:	3724      	adds	r7, #36	; 0x24
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b08b      	sub	sp, #44	; 0x2c
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f3b6:	88fb      	ldrh	r3, [r7, #6]
 800f3b8:	089b      	lsrs	r3, r3, #2
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f3be:	88fb      	ldrh	r3, [r7, #6]
 800f3c0:	f003 0303 	and.w	r3, r3, #3
 800f3c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	623b      	str	r3, [r7, #32]
 800f3ca:	e014      	b.n	800f3f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f3cc:	69bb      	ldr	r3, [r7, #24]
 800f3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3da:	3301      	adds	r3, #1
 800f3dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f3f0:	6a3b      	ldr	r3, [r7, #32]
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	623b      	str	r3, [r7, #32]
 800f3f6:	6a3a      	ldr	r2, [r7, #32]
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d3e6      	bcc.n	800f3cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f3fe:	8bfb      	ldrh	r3, [r7, #30]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d01e      	beq.n	800f442 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f404:	2300      	movs	r3, #0
 800f406:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f40e:	461a      	mov	r2, r3
 800f410:	f107 0310 	add.w	r3, r7, #16
 800f414:	6812      	ldr	r2, [r2, #0]
 800f416:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f418:	693a      	ldr	r2, [r7, #16]
 800f41a:	6a3b      	ldr	r3, [r7, #32]
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	00db      	lsls	r3, r3, #3
 800f420:	fa22 f303 	lsr.w	r3, r2, r3
 800f424:	b2da      	uxtb	r2, r3
 800f426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f428:	701a      	strb	r2, [r3, #0]
      i++;
 800f42a:	6a3b      	ldr	r3, [r7, #32]
 800f42c:	3301      	adds	r3, #1
 800f42e:	623b      	str	r3, [r7, #32]
      pDest++;
 800f430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f432:	3301      	adds	r3, #1
 800f434:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f436:	8bfb      	ldrh	r3, [r7, #30]
 800f438:	3b01      	subs	r3, #1
 800f43a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f43c:	8bfb      	ldrh	r3, [r7, #30]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1ea      	bne.n	800f418 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f444:	4618      	mov	r0, r3
 800f446:	372c      	adds	r7, #44	; 0x2c
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f450:	b480      	push	{r7}
 800f452:	b085      	sub	sp, #20
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	785b      	ldrb	r3, [r3, #1]
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d12c      	bne.n	800f4c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	015a      	lsls	r2, r3, #5
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	4413      	add	r3, r2
 800f474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	db12      	blt.n	800f4a4 <USB_EPSetStall+0x54>
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00f      	beq.n	800f4a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	015a      	lsls	r2, r3, #5
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	4413      	add	r3, r2
 800f48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	68ba      	ldr	r2, [r7, #8]
 800f494:	0151      	lsls	r1, r2, #5
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	440a      	add	r2, r1
 800f49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f49e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f4a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	015a      	lsls	r2, r3, #5
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	0151      	lsls	r1, r2, #5
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	440a      	add	r2, r1
 800f4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f4c2:	6013      	str	r3, [r2, #0]
 800f4c4:	e02b      	b.n	800f51e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	015a      	lsls	r2, r3, #5
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	db12      	blt.n	800f4fe <USB_EPSetStall+0xae>
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00f      	beq.n	800f4fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	015a      	lsls	r2, r3, #5
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	68ba      	ldr	r2, [r7, #8]
 800f4ee:	0151      	lsls	r1, r2, #5
 800f4f0:	68fa      	ldr	r2, [r7, #12]
 800f4f2:	440a      	add	r2, r1
 800f4f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f4fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	015a      	lsls	r2, r3, #5
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	4413      	add	r3, r2
 800f506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	0151      	lsls	r1, r2, #5
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	440a      	add	r2, r1
 800f514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f518:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f51c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f51e:	2300      	movs	r3, #0
}
 800f520:	4618      	mov	r0, r3
 800f522:	3714      	adds	r7, #20
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	785b      	ldrb	r3, [r3, #1]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d128      	bne.n	800f59a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	015a      	lsls	r2, r3, #5
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	4413      	add	r3, r2
 800f550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	68ba      	ldr	r2, [r7, #8]
 800f558:	0151      	lsls	r1, r2, #5
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	440a      	add	r2, r1
 800f55e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f566:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	791b      	ldrb	r3, [r3, #4]
 800f56c:	2b03      	cmp	r3, #3
 800f56e:	d003      	beq.n	800f578 <USB_EPClearStall+0x4c>
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	791b      	ldrb	r3, [r3, #4]
 800f574:	2b02      	cmp	r3, #2
 800f576:	d138      	bne.n	800f5ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	015a      	lsls	r2, r3, #5
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	4413      	add	r3, r2
 800f580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	68ba      	ldr	r2, [r7, #8]
 800f588:	0151      	lsls	r1, r2, #5
 800f58a:	68fa      	ldr	r2, [r7, #12]
 800f58c:	440a      	add	r2, r1
 800f58e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f596:	6013      	str	r3, [r2, #0]
 800f598:	e027      	b.n	800f5ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	015a      	lsls	r2, r3, #5
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	68ba      	ldr	r2, [r7, #8]
 800f5aa:	0151      	lsls	r1, r2, #5
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	440a      	add	r2, r1
 800f5b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f5b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	791b      	ldrb	r3, [r3, #4]
 800f5be:	2b03      	cmp	r3, #3
 800f5c0:	d003      	beq.n	800f5ca <USB_EPClearStall+0x9e>
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	791b      	ldrb	r3, [r3, #4]
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	d10f      	bne.n	800f5ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	015a      	lsls	r2, r3, #5
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	0151      	lsls	r1, r2, #5
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	440a      	add	r2, r1
 800f5e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f5ea:	2300      	movs	r3, #0
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3714      	adds	r7, #20
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr

0800f5f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	460b      	mov	r3, r1
 800f602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f616:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f61a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	78fb      	ldrb	r3, [r7, #3]
 800f626:	011b      	lsls	r3, r3, #4
 800f628:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f62c:	68f9      	ldr	r1, [r7, #12]
 800f62e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f632:	4313      	orrs	r3, r2
 800f634:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3714      	adds	r7, #20
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f65e:	f023 0303 	bic.w	r3, r3, #3
 800f662:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f672:	f023 0302 	bic.w	r3, r3, #2
 800f676:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f678:	2300      	movs	r3, #0
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3714      	adds	r7, #20
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr

0800f686 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f686:	b480      	push	{r7}
 800f688:	b085      	sub	sp, #20
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	68fa      	ldr	r2, [r7, #12]
 800f69c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f6a0:	f023 0303 	bic.w	r3, r3, #3
 800f6a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6b4:	f043 0302 	orr.w	r3, r3, #2
 800f6b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	699b      	ldr	r3, [r3, #24]
 800f6da:	68fa      	ldr	r2, [r7, #12]
 800f6dc:	4013      	ands	r3, r2
 800f6de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3714      	adds	r7, #20
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f6ee:	b480      	push	{r7}
 800f6f0:	b085      	sub	sp, #20
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f700:	699b      	ldr	r3, [r3, #24]
 800f702:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	68ba      	ldr	r2, [r7, #8]
 800f70e:	4013      	ands	r3, r2
 800f710:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	0c1b      	lsrs	r3, r3, #16
}
 800f716:	4618      	mov	r0, r3
 800f718:	3714      	adds	r7, #20
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f722:	b480      	push	{r7}
 800f724:	b085      	sub	sp, #20
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f734:	699b      	ldr	r3, [r3, #24]
 800f736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f73e:	69db      	ldr	r3, [r3, #28]
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	4013      	ands	r3, r2
 800f744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	b29b      	uxth	r3, r3
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3714      	adds	r7, #20
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr

0800f756 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f756:	b480      	push	{r7}
 800f758:	b085      	sub	sp, #20
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
 800f75e:	460b      	mov	r3, r1
 800f760:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f766:	78fb      	ldrb	r3, [r7, #3]
 800f768:	015a      	lsls	r2, r3, #5
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	4413      	add	r3, r2
 800f76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f77c:	695b      	ldr	r3, [r3, #20]
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	4013      	ands	r3, r2
 800f782:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f784:	68bb      	ldr	r3, [r7, #8]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3714      	adds	r7, #20
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr

0800f792 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f792:	b480      	push	{r7}
 800f794:	b087      	sub	sp, #28
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
 800f79a:	460b      	mov	r3, r1
 800f79c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7a8:	691b      	ldr	r3, [r3, #16]
 800f7aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f7b6:	78fb      	ldrb	r3, [r7, #3]
 800f7b8:	f003 030f 	and.w	r3, r3, #15
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	fa22 f303 	lsr.w	r3, r2, r3
 800f7c2:	01db      	lsls	r3, r3, #7
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	693a      	ldr	r2, [r7, #16]
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f7cc:	78fb      	ldrb	r3, [r7, #3]
 800f7ce:	015a      	lsls	r2, r3, #5
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7d8:	689b      	ldr	r3, [r3, #8]
 800f7da:	693a      	ldr	r2, [r7, #16]
 800f7dc:	4013      	ands	r3, r2
 800f7de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f7e0:	68bb      	ldr	r3, [r7, #8]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	371c      	adds	r7, #28
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr

0800f7ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f7ee:	b480      	push	{r7}
 800f7f0:	b083      	sub	sp, #12
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	695b      	ldr	r3, [r3, #20]
 800f7fa:	f003 0301 	and.w	r3, r3, #1
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	370c      	adds	r7, #12
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
	...

0800f80c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b085      	sub	sp, #20
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f826:	4619      	mov	r1, r3
 800f828:	4b09      	ldr	r3, [pc, #36]	; (800f850 <USB_ActivateSetup+0x44>)
 800f82a:	4013      	ands	r3, r2
 800f82c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f83c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f840:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3714      	adds	r7, #20
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr
 800f850:	fffff800 	.word	0xfffff800

0800f854 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f854:	b480      	push	{r7}
 800f856:	b087      	sub	sp, #28
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	460b      	mov	r3, r1
 800f85e:	607a      	str	r2, [r7, #4]
 800f860:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	333c      	adds	r3, #60	; 0x3c
 800f86a:	3304      	adds	r3, #4
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	4a26      	ldr	r2, [pc, #152]	; (800f90c <USB_EP0_OutStart+0xb8>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d90a      	bls.n	800f88e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f888:	d101      	bne.n	800f88e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f88a:	2300      	movs	r3, #0
 800f88c:	e037      	b.n	800f8fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f894:	461a      	mov	r2, r3
 800f896:	2300      	movs	r3, #0
 800f898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a0:	691b      	ldr	r3, [r3, #16]
 800f8a2:	697a      	ldr	r2, [r7, #20]
 800f8a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f8ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	697a      	ldr	r2, [r7, #20]
 800f8b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8bc:	f043 0318 	orr.w	r3, r3, #24
 800f8c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8c8:	691b      	ldr	r3, [r3, #16]
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f8d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f8d6:	7afb      	ldrb	r3, [r7, #11]
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d10f      	bne.n	800f8fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	697a      	ldr	r2, [r7, #20]
 800f8f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f8fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	371c      	adds	r7, #28
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop
 800f90c:	4f54300a 	.word	0x4f54300a

0800f910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f910:	b480      	push	{r7}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f918:	2300      	movs	r3, #0
 800f91a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	3301      	adds	r3, #1
 800f920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	4a13      	ldr	r2, [pc, #76]	; (800f974 <USB_CoreReset+0x64>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d901      	bls.n	800f92e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f92a:	2303      	movs	r3, #3
 800f92c:	e01b      	b.n	800f966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	691b      	ldr	r3, [r3, #16]
 800f932:	2b00      	cmp	r3, #0
 800f934:	daf2      	bge.n	800f91c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f936:	2300      	movs	r3, #0
 800f938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	691b      	ldr	r3, [r3, #16]
 800f93e:	f043 0201 	orr.w	r2, r3, #1
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	3301      	adds	r3, #1
 800f94a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	4a09      	ldr	r2, [pc, #36]	; (800f974 <USB_CoreReset+0x64>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d901      	bls.n	800f958 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f954:	2303      	movs	r3, #3
 800f956:	e006      	b.n	800f966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	691b      	ldr	r3, [r3, #16]
 800f95c:	f003 0301 	and.w	r3, r3, #1
 800f960:	2b01      	cmp	r3, #1
 800f962:	d0f0      	beq.n	800f946 <USB_CoreReset+0x36>

  return HAL_OK;
 800f964:	2300      	movs	r3, #0
}
 800f966:	4618      	mov	r0, r3
 800f968:	3714      	adds	r7, #20
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	00030d40 	.word	0x00030d40

0800f978 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f97c:	4904      	ldr	r1, [pc, #16]	; (800f990 <MX_FATFS_Init+0x18>)
 800f97e:	4805      	ldr	r0, [pc, #20]	; (800f994 <MX_FATFS_Init+0x1c>)
 800f980:	f007 ffb8 	bl	80178f4 <FATFS_LinkDriver>
 800f984:	4603      	mov	r3, r0
 800f986:	461a      	mov	r2, r3
 800f988:	4b03      	ldr	r3, [pc, #12]	; (800f998 <MX_FATFS_Init+0x20>)
 800f98a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f98c:	bf00      	nop
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	24000b58 	.word	0x24000b58
 800f994:	24000010 	.word	0x24000010
 800f998:	24000b54 	.word	0x24000b54

0800f99c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f99c:	b480      	push	{r7}
 800f99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f9a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr

0800f9ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return RES_OK;
 800f9b6:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return RES_OK;
 800f9ce:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60b9      	str	r1, [r7, #8]
 800f9e4:	607a      	str	r2, [r7, #4]
 800f9e6:	603b      	str	r3, [r7, #0]
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SD_ReadDisk(buff,sector,count);
 800f9ec:	683a      	ldr	r2, [r7, #0]
 800f9ee:	6879      	ldr	r1, [r7, #4]
 800f9f0:	68b8      	ldr	r0, [r7, #8]
 800f9f2:	f008 f961 	bl	8017cb8 <SD_ReadDisk>
    return RES_OK;
 800f9f6:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60b9      	str	r1, [r7, #8]
 800fa08:	607a      	str	r2, [r7, #4]
 800fa0a:	603b      	str	r3, [r7, #0]
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SD_WriteDisk((uint8_t*)buff,sector,count);
 800fa10:	683a      	ldr	r2, [r7, #0]
 800fa12:	6879      	ldr	r1, [r7, #4]
 800fa14:	68b8      	ldr	r0, [r7, #8]
 800fa16:	f008 f985 	bl	8017d24 <SD_WriteDisk>
    return RES_OK;
 800fa1a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3710      	adds	r7, #16
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	603a      	str	r2, [r7, #0]
 800fa2e:	71fb      	strb	r3, [r7, #7]
 800fa30:	460b      	mov	r3, r1
 800fa32:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
	DRESULT res;
	switch(cmd)
 800fa34:	79bb      	ldrb	r3, [r7, #6]
 800fa36:	2b03      	cmp	r3, #3
 800fa38:	d823      	bhi.n	800fa82 <USER_ioctl+0x5e>
 800fa3a:	a201      	add	r2, pc, #4	; (adr r2, 800fa40 <USER_ioctl+0x1c>)
 800fa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa40:	0800fa51 	.word	0x0800fa51
 800fa44:	0800fa75 	.word	0x0800fa75
 800fa48:	0800fa57 	.word	0x0800fa57
 800fa4c:	0800fa65 	.word	0x0800fa65
	{
		case CTRL_SYNC:
			res = RES_OK;
 800fa50:	2300      	movs	r3, #0
 800fa52:	73fb      	strb	r3, [r7, #15]
			break;
 800fa54:	e018      	b.n	800fa88 <USER_ioctl+0x64>
		case GET_SECTOR_SIZE:
			*(DWORD*)buff = 512;
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa5c:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	73fb      	strb	r3, [r7, #15]
			break;
 800fa62:	e011      	b.n	800fa88 <USER_ioctl+0x64>
		case GET_BLOCK_SIZE:
			*(WORD*)buff = SDCardInfo.LogBlockSize;
 800fa64:	4b0c      	ldr	r3, [pc, #48]	; (800fa98 <USER_ioctl+0x74>)
 800fa66:	69db      	ldr	r3, [r3, #28]
 800fa68:	b29a      	uxth	r2, r3
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	73fb      	strb	r3, [r7, #15]
			break;
 800fa72:	e009      	b.n	800fa88 <USER_ioctl+0x64>
		case GET_SECTOR_COUNT:
			*(DWORD*)buff = SDCardInfo.LogBlockNbr;
 800fa74:	4b08      	ldr	r3, [pc, #32]	; (800fa98 <USER_ioctl+0x74>)
 800fa76:	699a      	ldr	r2, [r3, #24]
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	73fb      	strb	r3, [r7, #15]
			break;
 800fa80:	e002      	b.n	800fa88 <USER_ioctl+0x64>
		default:
			res = RES_PARERR;
 800fa82:	2304      	movs	r3, #4
 800fa84:	73fb      	strb	r3, [r7, #15]
			break;
 800fa86:	bf00      	nop
	}

    return res;
 800fa88:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3714      	adds	r7, #20
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	24001064 	.word	0x24001064

0800fa9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	460b      	mov	r3, r1
 800faa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800faa8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800faac:	f00b f842 	bl	801ab34 <malloc>
 800fab0:	4603      	mov	r3, r0
 800fab2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10a      	bne.n	800fad0 <USBD_CDC_Init+0x34>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	33b2      	adds	r3, #178	; 0xb2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4413      	add	r3, r2
 800fac8:	2200      	movs	r2, #0
 800faca:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 800facc:	2302      	movs	r3, #2
 800face:	e0fd      	b.n	800fccc <USBD_CDC_Init+0x230>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fad0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800fad4:	2100      	movs	r1, #0
 800fad6:	68f8      	ldr	r0, [r7, #12]
 800fad8:	f00b fb18 	bl	801b10c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	33b2      	adds	r3, #178	; 0xb2
 800fae6:	009b      	lsls	r3, r3, #2
 800fae8:	4413      	add	r3, r2
 800faea:	68fa      	ldr	r2, [r7, #12]
 800faec:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	33b2      	adds	r3, #178	; 0xb2
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	4413      	add	r3, r2
 800fafc:	685a      	ldr	r2, [r3, #4]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	2202      	movs	r2, #2
 800fb0e:	2180      	movs	r1, #128	; 0x80
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f003 fcee 	bl	80134f2 <USBD_CoreGetEPAdd>
 800fb16:	4603      	mov	r3, r0
 800fb18:	461a      	mov	r2, r3
 800fb1a:	4b6e      	ldr	r3, [pc, #440]	; (800fcd4 <USBD_CDC_Init+0x238>)
 800fb1c:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	2202      	movs	r2, #2
 800fb28:	2100      	movs	r1, #0
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f003 fce1 	bl	80134f2 <USBD_CoreGetEPAdd>
 800fb30:	4603      	mov	r3, r0
 800fb32:	461a      	mov	r2, r3
 800fb34:	4b68      	ldr	r3, [pc, #416]	; (800fcd8 <USBD_CDC_Init+0x23c>)
 800fb36:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	2203      	movs	r2, #3
 800fb42:	2180      	movs	r1, #128	; 0x80
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f003 fcd4 	bl	80134f2 <USBD_CoreGetEPAdd>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	4b63      	ldr	r3, [pc, #396]	; (800fcdc <USBD_CDC_Init+0x240>)
 800fb50:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	7c1b      	ldrb	r3, [r3, #16]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d138      	bne.n	800fbcc <USBD_CDC_Init+0x130>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fb5a:	4b5e      	ldr	r3, [pc, #376]	; (800fcd4 <USBD_CDC_Init+0x238>)
 800fb5c:	7819      	ldrb	r1, [r3, #0]
 800fb5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb62:	2202      	movs	r2, #2
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f009 fa4a 	bl	8018ffe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fb6a:	4b5a      	ldr	r3, [pc, #360]	; (800fcd4 <USBD_CDC_Init+0x238>)
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	f003 020f 	and.w	r2, r3, #15
 800fb72:	6879      	ldr	r1, [r7, #4]
 800fb74:	4613      	mov	r3, r2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4413      	add	r3, r2
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	440b      	add	r3, r1
 800fb7e:	3324      	adds	r3, #36	; 0x24
 800fb80:	2201      	movs	r2, #1
 800fb82:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fb84:	4b54      	ldr	r3, [pc, #336]	; (800fcd8 <USBD_CDC_Init+0x23c>)
 800fb86:	7819      	ldrb	r1, [r3, #0]
 800fb88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb8c:	2202      	movs	r2, #2
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f009 fa35 	bl	8018ffe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fb94:	4b50      	ldr	r3, [pc, #320]	; (800fcd8 <USBD_CDC_Init+0x23c>)
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	f003 020f 	and.w	r2, r3, #15
 800fb9c:	6879      	ldr	r1, [r7, #4]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	4413      	add	r3, r2
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	440b      	add	r3, r1
 800fba8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fbac:	2201      	movs	r2, #1
 800fbae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fbb0:	4b4a      	ldr	r3, [pc, #296]	; (800fcdc <USBD_CDC_Init+0x240>)
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	f003 020f 	and.w	r2, r3, #15
 800fbb8:	6879      	ldr	r1, [r7, #4]
 800fbba:	4613      	mov	r3, r2
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	4413      	add	r3, r2
 800fbc0:	009b      	lsls	r3, r3, #2
 800fbc2:	440b      	add	r3, r1
 800fbc4:	3326      	adds	r3, #38	; 0x26
 800fbc6:	2210      	movs	r2, #16
 800fbc8:	801a      	strh	r2, [r3, #0]
 800fbca:	e035      	b.n	800fc38 <USBD_CDC_Init+0x19c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fbcc:	4b41      	ldr	r3, [pc, #260]	; (800fcd4 <USBD_CDC_Init+0x238>)
 800fbce:	7819      	ldrb	r1, [r3, #0]
 800fbd0:	2340      	movs	r3, #64	; 0x40
 800fbd2:	2202      	movs	r2, #2
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f009 fa12 	bl	8018ffe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fbda:	4b3e      	ldr	r3, [pc, #248]	; (800fcd4 <USBD_CDC_Init+0x238>)
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	f003 020f 	and.w	r2, r3, #15
 800fbe2:	6879      	ldr	r1, [r7, #4]
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	4413      	add	r3, r2
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	440b      	add	r3, r1
 800fbee:	3324      	adds	r3, #36	; 0x24
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fbf4:	4b38      	ldr	r3, [pc, #224]	; (800fcd8 <USBD_CDC_Init+0x23c>)
 800fbf6:	7819      	ldrb	r1, [r3, #0]
 800fbf8:	2340      	movs	r3, #64	; 0x40
 800fbfa:	2202      	movs	r2, #2
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f009 f9fe 	bl	8018ffe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fc02:	4b35      	ldr	r3, [pc, #212]	; (800fcd8 <USBD_CDC_Init+0x23c>)
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	f003 020f 	and.w	r2, r3, #15
 800fc0a:	6879      	ldr	r1, [r7, #4]
 800fc0c:	4613      	mov	r3, r2
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	4413      	add	r3, r2
 800fc12:	009b      	lsls	r3, r3, #2
 800fc14:	440b      	add	r3, r1
 800fc16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fc1e:	4b2f      	ldr	r3, [pc, #188]	; (800fcdc <USBD_CDC_Init+0x240>)
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	f003 020f 	and.w	r2, r3, #15
 800fc26:	6879      	ldr	r1, [r7, #4]
 800fc28:	4613      	mov	r3, r2
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	4413      	add	r3, r2
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	440b      	add	r3, r1
 800fc32:	3326      	adds	r3, #38	; 0x26
 800fc34:	2210      	movs	r2, #16
 800fc36:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fc38:	4b28      	ldr	r3, [pc, #160]	; (800fcdc <USBD_CDC_Init+0x240>)
 800fc3a:	7819      	ldrb	r1, [r3, #0]
 800fc3c:	2308      	movs	r3, #8
 800fc3e:	2203      	movs	r2, #3
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f009 f9dc 	bl	8018ffe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fc46:	4b25      	ldr	r3, [pc, #148]	; (800fcdc <USBD_CDC_Init+0x240>)
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	f003 020f 	and.w	r2, r3, #15
 800fc4e:	6879      	ldr	r1, [r7, #4]
 800fc50:	4613      	mov	r3, r2
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	4413      	add	r3, r2
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	440b      	add	r3, r1
 800fc5a:	3324      	adds	r3, #36	; 0x24
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	33b6      	adds	r3, #182	; 0xb6
 800fc72:	009b      	lsls	r3, r3, #2
 800fc74:	4413      	add	r3, r2
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d101      	bne.n	800fc9a <USBD_CDC_Init+0x1fe>
  {
    return (uint8_t)USBD_EMEM;
 800fc96:	2302      	movs	r3, #2
 800fc98:	e018      	b.n	800fccc <USBD_CDC_Init+0x230>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	7c1b      	ldrb	r3, [r3, #16]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d10a      	bne.n	800fcb8 <USBD_CDC_Init+0x21c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fca2:	4b0d      	ldr	r3, [pc, #52]	; (800fcd8 <USBD_CDC_Init+0x23c>)
 800fca4:	7819      	ldrb	r1, [r3, #0]
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fcac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f009 fab2 	bl	801921a <USBD_LL_PrepareReceive>
 800fcb6:	e008      	b.n	800fcca <USBD_CDC_Init+0x22e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fcb8:	4b07      	ldr	r3, [pc, #28]	; (800fcd8 <USBD_CDC_Init+0x23c>)
 800fcba:	7819      	ldrb	r1, [r3, #0]
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fcc2:	2340      	movs	r3, #64	; 0x40
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f009 faa8 	bl	801921a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fcca:	2300      	movs	r3, #0
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3710      	adds	r7, #16
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	2400005c 	.word	0x2400005c
 800fcd8:	2400005d 	.word	0x2400005d
 800fcdc:	2400005e 	.word	0x2400005e

0800fce0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	460b      	mov	r3, r1
 800fcea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);


#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this CDC class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	2180      	movs	r1, #128	; 0x80
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f003 fbfa 	bl	80134f2 <USBD_CoreGetEPAdd>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	461a      	mov	r2, r3
 800fd02:	4b4a      	ldr	r3, [pc, #296]	; (800fe2c <USBD_CDC_DeInit+0x14c>)
 800fd04:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	2202      	movs	r2, #2
 800fd10:	2100      	movs	r1, #0
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f003 fbed 	bl	80134f2 <USBD_CoreGetEPAdd>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	4b44      	ldr	r3, [pc, #272]	; (800fe30 <USBD_CDC_DeInit+0x150>)
 800fd1e:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	2203      	movs	r2, #3
 800fd2a:	2180      	movs	r1, #128	; 0x80
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f003 fbe0 	bl	80134f2 <USBD_CoreGetEPAdd>
 800fd32:	4603      	mov	r3, r0
 800fd34:	461a      	mov	r2, r3
 800fd36:	4b3f      	ldr	r3, [pc, #252]	; (800fe34 <USBD_CDC_DeInit+0x154>)
 800fd38:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fd3a:	4b3c      	ldr	r3, [pc, #240]	; (800fe2c <USBD_CDC_DeInit+0x14c>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	4619      	mov	r1, r3
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f009 f982 	bl	801904a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fd46:	4b39      	ldr	r3, [pc, #228]	; (800fe2c <USBD_CDC_DeInit+0x14c>)
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	f003 020f 	and.w	r2, r3, #15
 800fd4e:	6879      	ldr	r1, [r7, #4]
 800fd50:	4613      	mov	r3, r2
 800fd52:	009b      	lsls	r3, r3, #2
 800fd54:	4413      	add	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	440b      	add	r3, r1
 800fd5a:	3324      	adds	r3, #36	; 0x24
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fd60:	4b33      	ldr	r3, [pc, #204]	; (800fe30 <USBD_CDC_DeInit+0x150>)
 800fd62:	781b      	ldrb	r3, [r3, #0]
 800fd64:	4619      	mov	r1, r3
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f009 f96f 	bl	801904a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fd6c:	4b30      	ldr	r3, [pc, #192]	; (800fe30 <USBD_CDC_DeInit+0x150>)
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	f003 020f 	and.w	r2, r3, #15
 800fd74:	6879      	ldr	r1, [r7, #4]
 800fd76:	4613      	mov	r3, r2
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	4413      	add	r3, r2
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	440b      	add	r3, r1
 800fd80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fd84:	2200      	movs	r2, #0
 800fd86:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fd88:	4b2a      	ldr	r3, [pc, #168]	; (800fe34 <USBD_CDC_DeInit+0x154>)
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f009 f95b 	bl	801904a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fd94:	4b27      	ldr	r3, [pc, #156]	; (800fe34 <USBD_CDC_DeInit+0x154>)
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	f003 020f 	and.w	r2, r3, #15
 800fd9c:	6879      	ldr	r1, [r7, #4]
 800fd9e:	4613      	mov	r3, r2
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	4413      	add	r3, r2
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	440b      	add	r3, r1
 800fda8:	3324      	adds	r3, #36	; 0x24
 800fdaa:	2200      	movs	r2, #0
 800fdac:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fdae:	4b21      	ldr	r3, [pc, #132]	; (800fe34 <USBD_CDC_DeInit+0x154>)
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	f003 020f 	and.w	r2, r3, #15
 800fdb6:	6879      	ldr	r1, [r7, #4]
 800fdb8:	4613      	mov	r3, r2
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	4413      	add	r3, r2
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	440b      	add	r3, r1
 800fdc2:	3326      	adds	r3, #38	; 0x26
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	33b2      	adds	r3, #178	; 0xb2
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	4413      	add	r3, r2
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d021      	beq.n	800fe20 <USBD_CDC_DeInit+0x140>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	33b6      	adds	r3, #182	; 0xb6
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4413      	add	r3, r2
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	33b2      	adds	r3, #178	; 0xb2
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	4413      	add	r3, r2
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	4618      	mov	r0, r3
 800fe02:	f00a fe9f 	bl	801ab44 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fe0c:	687a      	ldr	r2, [r7, #4]
 800fe0e:	33b2      	adds	r3, #178	; 0xb2
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	4413      	add	r3, r2
 800fe14:	2200      	movs	r2, #0
 800fe16:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  }

  return (uint8_t)USBD_OK;
 800fe20:	2300      	movs	r3, #0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	2400005c 	.word	0x2400005c
 800fe30:	2400005d 	.word	0x2400005d
 800fe34:	2400005e 	.word	0x2400005e

0800fe38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	33b2      	adds	r3, #178	; 0xb2
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	4413      	add	r3, r2
 800fe50:	685b      	ldr	r3, [r3, #4]
 800fe52:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fe54:	2300      	movs	r3, #0
 800fe56:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d101      	bne.n	800fe6a <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fe66:	2303      	movs	r3, #3
 800fe68:	e0c0      	b.n	800ffec <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d050      	beq.n	800ff18 <USBD_CDC_Setup+0xe0>
 800fe76:	2b20      	cmp	r3, #32
 800fe78:	f040 80b0 	bne.w	800ffdc <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	88db      	ldrh	r3, [r3, #6]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d03a      	beq.n	800fefa <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	b25b      	sxtb	r3, r3
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	da1b      	bge.n	800fec6 <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	33b6      	adds	r3, #182	; 0xb6
 800fe98:	009b      	lsls	r3, r3, #2
 800fe9a:	4413      	add	r3, r2
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	689b      	ldr	r3, [r3, #8]
 800fea0:	683a      	ldr	r2, [r7, #0]
 800fea2:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fea4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	88d2      	ldrh	r2, [r2, #6]
 800feaa:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	88db      	ldrh	r3, [r3, #6]
 800feb0:	2b07      	cmp	r3, #7
 800feb2:	bf28      	it	cs
 800feb4:	2307      	movcs	r3, #7
 800feb6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	89fa      	ldrh	r2, [r7, #14]
 800febc:	4619      	mov	r1, r3
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f004 fa2e 	bl	8014320 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fec4:	e091      	b.n	800ffea <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	785a      	ldrb	r2, [r3, #1]
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	88db      	ldrh	r3, [r3, #6]
 800fed4:	2b3f      	cmp	r3, #63	; 0x3f
 800fed6:	d803      	bhi.n	800fee0 <USBD_CDC_Setup+0xa8>
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	88db      	ldrh	r3, [r3, #6]
 800fedc:	b2da      	uxtb	r2, r3
 800fede:	e000      	b.n	800fee2 <USBD_CDC_Setup+0xaa>
 800fee0:	2240      	movs	r2, #64	; 0x40
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fee8:	6939      	ldr	r1, [r7, #16]
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800fef0:	461a      	mov	r2, r3
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f004 fa40 	bl	8014378 <USBD_CtlPrepareRx>
      break;
 800fef8:	e077      	b.n	800ffea <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	33b6      	adds	r3, #182	; 0xb6
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	4413      	add	r3, r2
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	683a      	ldr	r2, [r7, #0]
 800ff0e:	7850      	ldrb	r0, [r2, #1]
 800ff10:	2200      	movs	r2, #0
 800ff12:	6839      	ldr	r1, [r7, #0]
 800ff14:	4798      	blx	r3
      break;
 800ff16:	e068      	b.n	800ffea <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	785b      	ldrb	r3, [r3, #1]
 800ff1c:	2b0b      	cmp	r3, #11
 800ff1e:	d852      	bhi.n	800ffc6 <USBD_CDC_Setup+0x18e>
 800ff20:	a201      	add	r2, pc, #4	; (adr r2, 800ff28 <USBD_CDC_Setup+0xf0>)
 800ff22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff26:	bf00      	nop
 800ff28:	0800ff59 	.word	0x0800ff59
 800ff2c:	0800ffd5 	.word	0x0800ffd5
 800ff30:	0800ffc7 	.word	0x0800ffc7
 800ff34:	0800ffc7 	.word	0x0800ffc7
 800ff38:	0800ffc7 	.word	0x0800ffc7
 800ff3c:	0800ffc7 	.word	0x0800ffc7
 800ff40:	0800ffc7 	.word	0x0800ffc7
 800ff44:	0800ffc7 	.word	0x0800ffc7
 800ff48:	0800ffc7 	.word	0x0800ffc7
 800ff4c:	0800ffc7 	.word	0x0800ffc7
 800ff50:	0800ff83 	.word	0x0800ff83
 800ff54:	0800ffad 	.word	0x0800ffad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	2b03      	cmp	r3, #3
 800ff62:	d107      	bne.n	800ff74 <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ff64:	f107 030a 	add.w	r3, r7, #10
 800ff68:	2202      	movs	r2, #2
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f004 f9d7 	bl	8014320 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ff72:	e032      	b.n	800ffda <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 800ff74:	6839      	ldr	r1, [r7, #0]
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f004 f961 	bl	801423e <USBD_CtlError>
            ret = USBD_FAIL;
 800ff7c:	2303      	movs	r3, #3
 800ff7e:	75fb      	strb	r3, [r7, #23]
          break;
 800ff80:	e02b      	b.n	800ffda <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	2b03      	cmp	r3, #3
 800ff8c:	d107      	bne.n	800ff9e <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ff8e:	f107 030d 	add.w	r3, r7, #13
 800ff92:	2201      	movs	r2, #1
 800ff94:	4619      	mov	r1, r3
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f004 f9c2 	bl	8014320 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ff9c:	e01d      	b.n	800ffda <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 800ff9e:	6839      	ldr	r1, [r7, #0]
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f004 f94c 	bl	801423e <USBD_CtlError>
            ret = USBD_FAIL;
 800ffa6:	2303      	movs	r3, #3
 800ffa8:	75fb      	strb	r3, [r7, #23]
          break;
 800ffaa:	e016      	b.n	800ffda <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	2b03      	cmp	r3, #3
 800ffb6:	d00f      	beq.n	800ffd8 <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 800ffb8:	6839      	ldr	r1, [r7, #0]
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f004 f93f 	bl	801423e <USBD_CtlError>
            ret = USBD_FAIL;
 800ffc0:	2303      	movs	r3, #3
 800ffc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ffc4:	e008      	b.n	800ffd8 <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ffc6:	6839      	ldr	r1, [r7, #0]
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f004 f938 	bl	801423e <USBD_CtlError>
          ret = USBD_FAIL;
 800ffce:	2303      	movs	r3, #3
 800ffd0:	75fb      	strb	r3, [r7, #23]
          break;
 800ffd2:	e002      	b.n	800ffda <USBD_CDC_Setup+0x1a2>
          break;
 800ffd4:	bf00      	nop
 800ffd6:	e008      	b.n	800ffea <USBD_CDC_Setup+0x1b2>
          break;
 800ffd8:	bf00      	nop
      }
      break;
 800ffda:	e006      	b.n	800ffea <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 800ffdc:	6839      	ldr	r1, [r7, #0]
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f004 f92d 	bl	801423e <USBD_CtlError>
      ret = USBD_FAIL;
 800ffe4:	2303      	movs	r3, #3
 800ffe6:	75fb      	strb	r3, [r7, #23]
      break;
 800ffe8:	bf00      	nop
  }

  return (uint8_t)ret;
 800ffea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3718      	adds	r7, #24
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b084      	sub	sp, #16
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	460b      	mov	r3, r1
 800fffe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010006:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	33b2      	adds	r3, #178	; 0xb2
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	4413      	add	r3, r2
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d101      	bne.n	8010020 <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 801001c:	2303      	movs	r3, #3
 801001e:	e066      	b.n	80100ee <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	33b2      	adds	r3, #178	; 0xb2
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	4413      	add	r3, r2
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010032:	78fb      	ldrb	r3, [r7, #3]
 8010034:	f003 020f 	and.w	r2, r3, #15
 8010038:	6879      	ldr	r1, [r7, #4]
 801003a:	4613      	mov	r3, r2
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	4413      	add	r3, r2
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	440b      	add	r3, r1
 8010044:	3318      	adds	r3, #24
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d02f      	beq.n	80100ac <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801004c:	78fb      	ldrb	r3, [r7, #3]
 801004e:	f003 020f 	and.w	r2, r3, #15
 8010052:	6879      	ldr	r1, [r7, #4]
 8010054:	4613      	mov	r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	4413      	add	r3, r2
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	440b      	add	r3, r1
 801005e:	3318      	adds	r3, #24
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	78fb      	ldrb	r3, [r7, #3]
 8010064:	f003 010f 	and.w	r1, r3, #15
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	460b      	mov	r3, r1
 801006c:	00db      	lsls	r3, r3, #3
 801006e:	440b      	add	r3, r1
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	4403      	add	r3, r0
 8010074:	3344      	adds	r3, #68	; 0x44
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	fbb2 f1f3 	udiv	r1, r2, r3
 801007c:	fb01 f303 	mul.w	r3, r1, r3
 8010080:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010082:	2b00      	cmp	r3, #0
 8010084:	d112      	bne.n	80100ac <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010086:	78fb      	ldrb	r3, [r7, #3]
 8010088:	f003 020f 	and.w	r2, r3, #15
 801008c:	6879      	ldr	r1, [r7, #4]
 801008e:	4613      	mov	r3, r2
 8010090:	009b      	lsls	r3, r3, #2
 8010092:	4413      	add	r3, r2
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	440b      	add	r3, r1
 8010098:	3318      	adds	r3, #24
 801009a:	2200      	movs	r2, #0
 801009c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801009e:	78f9      	ldrb	r1, [r7, #3]
 80100a0:	2300      	movs	r3, #0
 80100a2:	2200      	movs	r2, #0
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f009 f897 	bl	80191d8 <USBD_LL_Transmit>
 80100aa:	e01f      	b.n	80100ec <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	2200      	movs	r2, #0
 80100b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	33b6      	adds	r3, #182	; 0xb6
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	4413      	add	r3, r2
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	691b      	ldr	r3, [r3, #16]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d010      	beq.n	80100ec <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	33b6      	adds	r3, #182	; 0xb6
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	4413      	add	r3, r2
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	691b      	ldr	r3, [r3, #16]
 80100dc:	68ba      	ldr	r2, [r7, #8]
 80100de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80100e2:	68ba      	ldr	r2, [r7, #8]
 80100e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80100e8:	78fa      	ldrb	r2, [r7, #3]
 80100ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80100ec:	2300      	movs	r3, #0
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100f6:	b580      	push	{r7, lr}
 80100f8:	b084      	sub	sp, #16
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	460b      	mov	r3, r1
 8010100:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	33b2      	adds	r3, #178	; 0xb2
 801010c:	009b      	lsls	r3, r3, #2
 801010e:	4413      	add	r3, r2
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	33b2      	adds	r3, #178	; 0xb2
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	4413      	add	r3, r2
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d101      	bne.n	801012c <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 8010128:	2303      	movs	r3, #3
 801012a:	e01a      	b.n	8010162 <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801012c:	78fb      	ldrb	r3, [r7, #3]
 801012e:	4619      	mov	r1, r3
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f009 f893 	bl	801925c <USBD_LL_GetRxDataSize>
 8010136:	4602      	mov	r2, r0
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	33b6      	adds	r3, #182	; 0xb6
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4413      	add	r3, r2
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	68db      	ldr	r3, [r3, #12]
 8010150:	68fa      	ldr	r2, [r7, #12]
 8010152:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010156:	68fa      	ldr	r2, [r7, #12]
 8010158:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801015c:	4611      	mov	r1, r2
 801015e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010160:	2300      	movs	r3, #0
}
 8010162:	4618      	mov	r0, r3
 8010164:	3710      	adds	r7, #16
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b084      	sub	sp, #16
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	33b2      	adds	r3, #178	; 0xb2
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	4413      	add	r3, r2
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d101      	bne.n	801018e <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801018a:	2303      	movs	r3, #3
 801018c:	e025      	b.n	80101da <USBD_CDC_EP0_RxReady+0x70>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	33b6      	adds	r3, #182	; 0xb6
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	4413      	add	r3, r2
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d01a      	beq.n	80101d8 <USBD_CDC_EP0_RxReady+0x6e>
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80101a8:	2bff      	cmp	r3, #255	; 0xff
 80101aa:	d015      	beq.n	80101d8 <USBD_CDC_EP0_RxReady+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	33b6      	adds	r3, #182	; 0xb6
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	4413      	add	r3, r2
 80101ba:	685b      	ldr	r3, [r3, #4]
 80101bc:	689b      	ldr	r3, [r3, #8]
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80101c4:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80101cc:	b292      	uxth	r2, r2
 80101ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	22ff      	movs	r2, #255	; 0xff
 80101d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80101d8:	2300      	movs	r3, #0
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3710      	adds	r7, #16
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80101e2:	b480      	push	{r7}
 80101e4:	b083      	sub	sp, #12
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
 80101ea:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d101      	bne.n	80101f6 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80101f2:	2303      	movs	r3, #3
 80101f4:	e009      	b.n	801020a <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	33b6      	adds	r3, #182	; 0xb6
 8010200:	009b      	lsls	r3, r3, #2
 8010202:	4413      	add	r3, r2
 8010204:	683a      	ldr	r2, [r7, #0]
 8010206:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010208:	2300      	movs	r3, #0
}
 801020a:	4618      	mov	r0, r3
 801020c:	370c      	adds	r7, #12
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr

08010216 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
 8010216:	b480      	push	{r7}
 8010218:	b087      	sub	sp, #28
 801021a:	af00      	add	r7, sp, #0
 801021c:	60f8      	str	r0, [r7, #12]
 801021e:	60b9      	str	r1, [r7, #8]
 8010220:	607a      	str	r2, [r7, #4]
 8010222:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8010224:	78fb      	ldrb	r3, [r7, #3]
 8010226:	68fa      	ldr	r2, [r7, #12]
 8010228:	33b2      	adds	r3, #178	; 0xb2
 801022a:	009b      	lsls	r3, r3, #2
 801022c:	4413      	add	r3, r2
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	617b      	str	r3, [r7, #20]
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d101      	bne.n	801023c <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010238:	2303      	movs	r3, #3
 801023a:	e008      	b.n	801024e <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	68ba      	ldr	r2, [r7, #8]
 8010240:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	371c      	adds	r7, #28
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801025a:	b480      	push	{r7}
 801025c:	b085      	sub	sp, #20
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
 8010262:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	33b2      	adds	r3, #178	; 0xb2
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	4413      	add	r3, r2
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d101      	bne.n	8010280 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801027c:	2303      	movs	r3, #3
 801027e:	e004      	b.n	801028a <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	683a      	ldr	r2, [r7, #0]
 8010284:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010288:	2300      	movs	r3, #0
}
 801028a:	4618      	mov	r0, r3
 801028c:	3714      	adds	r7, #20
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr
	...

08010298 <USBD_CDC_TransmitPacket>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b084      	sub	sp, #16
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	460b      	mov	r3, r1
 80102a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 80102a4:	78fb      	ldrb	r3, [r7, #3]
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	33b2      	adds	r3, #178	; 0xb2
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	4413      	add	r3, r2
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	60bb      	str	r3, [r7, #8]
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80102b2:	2301      	movs	r3, #1
 80102b4:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
 80102b6:	78fb      	ldrb	r3, [r7, #3]
 80102b8:	2202      	movs	r2, #2
 80102ba:	2180      	movs	r1, #128	; 0x80
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f003 f918 	bl	80134f2 <USBD_CoreGetEPAdd>
 80102c2:	4603      	mov	r3, r0
 80102c4:	461a      	mov	r2, r3
 80102c6:	4b18      	ldr	r3, [pc, #96]	; (8010328 <USBD_CDC_TransmitPacket+0x90>)
 80102c8:	701a      	strb	r2, [r3, #0]
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d101      	bne.n	80102d4 <USBD_CDC_TransmitPacket+0x3c>
  {
    return (uint8_t)USBD_FAIL;
 80102d0:	2303      	movs	r3, #3
 80102d2:	e025      	b.n	8010320 <USBD_CDC_TransmitPacket+0x88>
  }

  if (hcdc->TxState == 0U)
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d11f      	bne.n	801031e <USBD_CDC_TransmitPacket+0x86>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	2201      	movs	r2, #1
 80102e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80102e6:	4b10      	ldr	r3, [pc, #64]	; (8010328 <USBD_CDC_TransmitPacket+0x90>)
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	f003 020f 	and.w	r2, r3, #15
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	4613      	mov	r3, r2
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	4413      	add	r3, r2
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	4403      	add	r3, r0
 8010300:	3318      	adds	r3, #24
 8010302:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010304:	4b08      	ldr	r3, [pc, #32]	; (8010328 <USBD_CDC_TransmitPacket+0x90>)
 8010306:	7819      	ldrb	r1, [r3, #0]
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f008 ff5f 	bl	80191d8 <USBD_LL_Transmit>

    ret = USBD_OK;
 801031a:	2300      	movs	r3, #0
 801031c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801031e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010320:	4618      	mov	r0, r3
 8010322:	3710      	adds	r7, #16
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	2400005c 	.word	0x2400005c

0801032c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	33b2      	adds	r3, #178	; 0xb2
 801033e:	009b      	lsls	r3, r3, #2
 8010340:	4413      	add	r3, r2
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801034c:	b2db      	uxtb	r3, r3
 801034e:	2202      	movs	r2, #2
 8010350:	2100      	movs	r1, #0
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f003 f8cd 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010358:	4603      	mov	r3, r0
 801035a:	461a      	mov	r2, r3
 801035c:	4b15      	ldr	r3, [pc, #84]	; (80103b4 <USBD_CDC_ReceivePacket+0x88>)
 801035e:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	33b2      	adds	r3, #178	; 0xb2
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	4413      	add	r3, r2
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d101      	bne.n	8010378 <USBD_CDC_ReceivePacket+0x4c>
  {
    return (uint8_t)USBD_FAIL;
 8010374:	2303      	movs	r3, #3
 8010376:	e018      	b.n	80103aa <USBD_CDC_ReceivePacket+0x7e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	7c1b      	ldrb	r3, [r3, #16]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d10a      	bne.n	8010396 <USBD_CDC_ReceivePacket+0x6a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010380:	4b0c      	ldr	r3, [pc, #48]	; (80103b4 <USBD_CDC_ReceivePacket+0x88>)
 8010382:	7819      	ldrb	r1, [r3, #0]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801038a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f008 ff43 	bl	801921a <USBD_LL_PrepareReceive>
 8010394:	e008      	b.n	80103a8 <USBD_CDC_ReceivePacket+0x7c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010396:	4b07      	ldr	r3, [pc, #28]	; (80103b4 <USBD_CDC_ReceivePacket+0x88>)
 8010398:	7819      	ldrb	r1, [r3, #0]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103a0:	2340      	movs	r3, #64	; 0x40
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f008 ff39 	bl	801921a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80103a8:	2300      	movs	r3, #0
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3710      	adds	r7, #16
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	2400005d 	.word	0x2400005d

080103b8 <USBD_CMPSIT_AddClass>:
  */
uint8_t  USBD_CMPSIT_AddClass(USBD_HandleTypeDef *pdev,
                              USBD_ClassTypeDef *pclass,
                              USBD_CompositeClassTypeDef class,
                              uint8_t cfgidx)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b085      	sub	sp, #20
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	4611      	mov	r1, r2
 80103c4:	461a      	mov	r2, r3
 80103c6:	460b      	mov	r3, r1
 80103c8:	71fb      	strb	r3, [r7, #7]
 80103ca:	4613      	mov	r3, r2
 80103cc:	71bb      	strb	r3, [r7, #6]
	switch(class)
 80103ce:	79fb      	ldrb	r3, [r7, #7]
 80103d0:	2b02      	cmp	r3, #2
 80103d2:	d003      	beq.n	80103dc <USBD_CMPSIT_AddClass+0x24>
 80103d4:	2b03      	cmp	r3, #3
 80103d6:	f000 80ec 	beq.w	80105b2 <USBD_CMPSIT_AddClass+0x1fa>

			pdev->tclasslist[pdev->classId].NumIf = 1;
			pdev->tclasslist[pdev->classId].Ifs[0] = 2;

		}break;
		default:break;
 80103da:	e194      	b.n	8010706 <USBD_CMPSIT_AddClass+0x34e>
			pdev->tclasslist[pdev->classId].ClassType = CLASS_TYPE_CDC;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80103e2:	68f9      	ldr	r1, [r7, #12]
 80103e4:	4613      	mov	r3, r2
 80103e6:	00db      	lsls	r3, r3, #3
 80103e8:	1a9b      	subs	r3, r3, r2
 80103ea:	00db      	lsls	r3, r3, #3
 80103ec:	440b      	add	r3, r1
 80103ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80103f2:	2202      	movs	r2, #2
 80103f4:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Active = 1U;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80103fc:	68f9      	ldr	r1, [r7, #12]
 80103fe:	4613      	mov	r3, r2
 8010400:	00db      	lsls	r3, r3, #3
 8010402:	1a9b      	subs	r3, r3, r2
 8010404:	00db      	lsls	r3, r3, #3
 8010406:	440b      	add	r3, r1
 8010408:	f503 7342 	add.w	r3, r3, #776	; 0x308
 801040c:	2201      	movs	r2, #1
 801040e:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumEps = 3;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010416:	68f9      	ldr	r1, [r7, #12]
 8010418:	4613      	mov	r3, r2
 801041a:	00db      	lsls	r3, r3, #3
 801041c:	1a9b      	subs	r3, r3, r2
 801041e:	00db      	lsls	r3, r3, #3
 8010420:	440b      	add	r3, r1
 8010422:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8010426:	2203      	movs	r2, #3
 8010428:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].add = CDC_CMD_EP;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010430:	68f9      	ldr	r1, [r7, #12]
 8010432:	4613      	mov	r3, r2
 8010434:	00db      	lsls	r3, r3, #3
 8010436:	1a9b      	subs	r3, r3, r2
 8010438:	00db      	lsls	r3, r3, #3
 801043a:	440b      	add	r3, r1
 801043c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8010440:	2282      	movs	r2, #130	; 0x82
 8010442:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].type = USBD_EP_TYPE_INTR;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801044a:	68f9      	ldr	r1, [r7, #12]
 801044c:	4613      	mov	r3, r2
 801044e:	00db      	lsls	r3, r3, #3
 8010450:	1a9b      	subs	r3, r3, r2
 8010452:	00db      	lsls	r3, r3, #3
 8010454:	440b      	add	r3, r1
 8010456:	f203 3311 	addw	r3, r3, #785	; 0x311
 801045a:	2203      	movs	r2, #3
 801045c:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].size = CDC_CMD_PACKET_SIZE;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010464:	68f9      	ldr	r1, [r7, #12]
 8010466:	4613      	mov	r3, r2
 8010468:	00db      	lsls	r3, r3, #3
 801046a:	1a9b      	subs	r3, r3, r2
 801046c:	00db      	lsls	r3, r3, #3
 801046e:	440b      	add	r3, r1
 8010470:	f203 3312 	addw	r3, r3, #786	; 0x312
 8010474:	2208      	movs	r2, #8
 8010476:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].is_used = 1U;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801047e:	68f9      	ldr	r1, [r7, #12]
 8010480:	4613      	mov	r3, r2
 8010482:	00db      	lsls	r3, r3, #3
 8010484:	1a9b      	subs	r3, r3, r2
 8010486:	00db      	lsls	r3, r3, #3
 8010488:	440b      	add	r3, r1
 801048a:	f203 3313 	addw	r3, r3, #787	; 0x313
 801048e:	2201      	movs	r2, #1
 8010490:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].add = CDC_OUT_EP;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010498:	68f9      	ldr	r1, [r7, #12]
 801049a:	4613      	mov	r3, r2
 801049c:	00db      	lsls	r3, r3, #3
 801049e:	1a9b      	subs	r3, r3, r2
 80104a0:	00db      	lsls	r3, r3, #3
 80104a2:	440b      	add	r3, r1
 80104a4:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80104a8:	2201      	movs	r2, #1
 80104aa:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].type = USBD_EP_TYPE_BULK;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80104b2:	68f9      	ldr	r1, [r7, #12]
 80104b4:	4613      	mov	r3, r2
 80104b6:	00db      	lsls	r3, r3, #3
 80104b8:	1a9b      	subs	r3, r3, r2
 80104ba:	00db      	lsls	r3, r3, #3
 80104bc:	440b      	add	r3, r1
 80104be:	f203 3315 	addw	r3, r3, #789	; 0x315
 80104c2:	2202      	movs	r2, #2
 80104c4:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].size = CDC_DATA_FS_MAX_PACKET_SIZE;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80104cc:	68f9      	ldr	r1, [r7, #12]
 80104ce:	4613      	mov	r3, r2
 80104d0:	00db      	lsls	r3, r3, #3
 80104d2:	1a9b      	subs	r3, r3, r2
 80104d4:	00db      	lsls	r3, r3, #3
 80104d6:	440b      	add	r3, r1
 80104d8:	f203 3316 	addw	r3, r3, #790	; 0x316
 80104dc:	2240      	movs	r2, #64	; 0x40
 80104de:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].is_used = 1U;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80104e6:	68f9      	ldr	r1, [r7, #12]
 80104e8:	4613      	mov	r3, r2
 80104ea:	00db      	lsls	r3, r3, #3
 80104ec:	1a9b      	subs	r3, r3, r2
 80104ee:	00db      	lsls	r3, r3, #3
 80104f0:	440b      	add	r3, r1
 80104f2:	f203 3317 	addw	r3, r3, #791	; 0x317
 80104f6:	2201      	movs	r2, #1
 80104f8:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].add = CDC_IN_EP;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010500:	68f9      	ldr	r1, [r7, #12]
 8010502:	4613      	mov	r3, r2
 8010504:	00db      	lsls	r3, r3, #3
 8010506:	1a9b      	subs	r3, r3, r2
 8010508:	00db      	lsls	r3, r3, #3
 801050a:	440b      	add	r3, r1
 801050c:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8010510:	2281      	movs	r2, #129	; 0x81
 8010512:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].type = USBD_EP_TYPE_BULK;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801051a:	68f9      	ldr	r1, [r7, #12]
 801051c:	4613      	mov	r3, r2
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	1a9b      	subs	r3, r3, r2
 8010522:	00db      	lsls	r3, r3, #3
 8010524:	440b      	add	r3, r1
 8010526:	f203 3319 	addw	r3, r3, #793	; 0x319
 801052a:	2202      	movs	r2, #2
 801052c:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].size = CDC_DATA_FS_MAX_PACKET_SIZE;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010534:	68f9      	ldr	r1, [r7, #12]
 8010536:	4613      	mov	r3, r2
 8010538:	00db      	lsls	r3, r3, #3
 801053a:	1a9b      	subs	r3, r3, r2
 801053c:	00db      	lsls	r3, r3, #3
 801053e:	440b      	add	r3, r1
 8010540:	f203 331a 	addw	r3, r3, #794	; 0x31a
 8010544:	2240      	movs	r2, #64	; 0x40
 8010546:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[2].is_used = 1U;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801054e:	68f9      	ldr	r1, [r7, #12]
 8010550:	4613      	mov	r3, r2
 8010552:	00db      	lsls	r3, r3, #3
 8010554:	1a9b      	subs	r3, r3, r2
 8010556:	00db      	lsls	r3, r3, #3
 8010558:	440b      	add	r3, r1
 801055a:	f203 331b 	addw	r3, r3, #795	; 0x31b
 801055e:	2201      	movs	r2, #1
 8010560:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumIf = 2;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010568:	68f9      	ldr	r1, [r7, #12]
 801056a:	4613      	mov	r3, r2
 801056c:	00db      	lsls	r3, r3, #3
 801056e:	1a9b      	subs	r3, r3, r2
 8010570:	00db      	lsls	r3, r3, #3
 8010572:	440b      	add	r3, r1
 8010574:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8010578:	2202      	movs	r2, #2
 801057a:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[0] = 0;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010582:	68f9      	ldr	r1, [r7, #12]
 8010584:	4613      	mov	r3, r2
 8010586:	00db      	lsls	r3, r3, #3
 8010588:	1a9b      	subs	r3, r3, r2
 801058a:	00db      	lsls	r3, r3, #3
 801058c:	440b      	add	r3, r1
 801058e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010592:	2200      	movs	r2, #0
 8010594:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[1] = 1;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801059c:	68f9      	ldr	r1, [r7, #12]
 801059e:	4613      	mov	r3, r2
 80105a0:	00db      	lsls	r3, r3, #3
 80105a2:	1a9b      	subs	r3, r3, r2
 80105a4:	00db      	lsls	r3, r3, #3
 80105a6:	440b      	add	r3, r1
 80105a8:	f203 332d 	addw	r3, r3, #813	; 0x32d
 80105ac:	2201      	movs	r2, #1
 80105ae:	701a      	strb	r2, [r3, #0]
		}break;
 80105b0:	e0a9      	b.n	8010706 <USBD_CMPSIT_AddClass+0x34e>
			pdev->tclasslist[pdev->classId].ClassType = CLASS_TYPE_MSC;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80105b8:	68f9      	ldr	r1, [r7, #12]
 80105ba:	4613      	mov	r3, r2
 80105bc:	00db      	lsls	r3, r3, #3
 80105be:	1a9b      	subs	r3, r3, r2
 80105c0:	00db      	lsls	r3, r3, #3
 80105c2:	440b      	add	r3, r1
 80105c4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80105c8:	2203      	movs	r2, #3
 80105ca:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Active = 1U;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80105d2:	68f9      	ldr	r1, [r7, #12]
 80105d4:	4613      	mov	r3, r2
 80105d6:	00db      	lsls	r3, r3, #3
 80105d8:	1a9b      	subs	r3, r3, r2
 80105da:	00db      	lsls	r3, r3, #3
 80105dc:	440b      	add	r3, r1
 80105de:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80105e2:	2201      	movs	r2, #1
 80105e4:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumEps = 2;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80105ec:	68f9      	ldr	r1, [r7, #12]
 80105ee:	4613      	mov	r3, r2
 80105f0:	00db      	lsls	r3, r3, #3
 80105f2:	1a9b      	subs	r3, r3, r2
 80105f4:	00db      	lsls	r3, r3, #3
 80105f6:	440b      	add	r3, r1
 80105f8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80105fc:	2202      	movs	r2, #2
 80105fe:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].add = MSC_EPIN_ADDR;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010606:	68f9      	ldr	r1, [r7, #12]
 8010608:	4613      	mov	r3, r2
 801060a:	00db      	lsls	r3, r3, #3
 801060c:	1a9b      	subs	r3, r3, r2
 801060e:	00db      	lsls	r3, r3, #3
 8010610:	440b      	add	r3, r1
 8010612:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8010616:	2283      	movs	r2, #131	; 0x83
 8010618:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].type = USBD_EP_TYPE_BULK;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010620:	68f9      	ldr	r1, [r7, #12]
 8010622:	4613      	mov	r3, r2
 8010624:	00db      	lsls	r3, r3, #3
 8010626:	1a9b      	subs	r3, r3, r2
 8010628:	00db      	lsls	r3, r3, #3
 801062a:	440b      	add	r3, r1
 801062c:	f203 3311 	addw	r3, r3, #785	; 0x311
 8010630:	2202      	movs	r2, #2
 8010632:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].size = MSC_MAX_FS_PACKET;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801063a:	68f9      	ldr	r1, [r7, #12]
 801063c:	4613      	mov	r3, r2
 801063e:	00db      	lsls	r3, r3, #3
 8010640:	1a9b      	subs	r3, r3, r2
 8010642:	00db      	lsls	r3, r3, #3
 8010644:	440b      	add	r3, r1
 8010646:	f203 3312 	addw	r3, r3, #786	; 0x312
 801064a:	2240      	movs	r2, #64	; 0x40
 801064c:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[0].is_used = 1U;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010654:	68f9      	ldr	r1, [r7, #12]
 8010656:	4613      	mov	r3, r2
 8010658:	00db      	lsls	r3, r3, #3
 801065a:	1a9b      	subs	r3, r3, r2
 801065c:	00db      	lsls	r3, r3, #3
 801065e:	440b      	add	r3, r1
 8010660:	f203 3313 	addw	r3, r3, #787	; 0x313
 8010664:	2201      	movs	r2, #1
 8010666:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].add = MSC_EPOUT_ADDR;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801066e:	68f9      	ldr	r1, [r7, #12]
 8010670:	4613      	mov	r3, r2
 8010672:	00db      	lsls	r3, r3, #3
 8010674:	1a9b      	subs	r3, r3, r2
 8010676:	00db      	lsls	r3, r3, #3
 8010678:	440b      	add	r3, r1
 801067a:	f503 7345 	add.w	r3, r3, #788	; 0x314
 801067e:	2203      	movs	r2, #3
 8010680:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].type = USBD_EP_TYPE_BULK;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8010688:	68f9      	ldr	r1, [r7, #12]
 801068a:	4613      	mov	r3, r2
 801068c:	00db      	lsls	r3, r3, #3
 801068e:	1a9b      	subs	r3, r3, r2
 8010690:	00db      	lsls	r3, r3, #3
 8010692:	440b      	add	r3, r1
 8010694:	f203 3315 	addw	r3, r3, #789	; 0x315
 8010698:	2202      	movs	r2, #2
 801069a:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].size = MSC_MAX_FS_PACKET;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80106a2:	68f9      	ldr	r1, [r7, #12]
 80106a4:	4613      	mov	r3, r2
 80106a6:	00db      	lsls	r3, r3, #3
 80106a8:	1a9b      	subs	r3, r3, r2
 80106aa:	00db      	lsls	r3, r3, #3
 80106ac:	440b      	add	r3, r1
 80106ae:	f203 3316 	addw	r3, r3, #790	; 0x316
 80106b2:	2240      	movs	r2, #64	; 0x40
 80106b4:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Eps[1].is_used = 1U;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80106bc:	68f9      	ldr	r1, [r7, #12]
 80106be:	4613      	mov	r3, r2
 80106c0:	00db      	lsls	r3, r3, #3
 80106c2:	1a9b      	subs	r3, r3, r2
 80106c4:	00db      	lsls	r3, r3, #3
 80106c6:	440b      	add	r3, r1
 80106c8:	f203 3317 	addw	r3, r3, #791	; 0x317
 80106cc:	2201      	movs	r2, #1
 80106ce:	701a      	strb	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].NumIf = 1;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80106d6:	68f9      	ldr	r1, [r7, #12]
 80106d8:	4613      	mov	r3, r2
 80106da:	00db      	lsls	r3, r3, #3
 80106dc:	1a9b      	subs	r3, r3, r2
 80106de:	00db      	lsls	r3, r3, #3
 80106e0:	440b      	add	r3, r1
 80106e2:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80106e6:	2201      	movs	r2, #1
 80106e8:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[0] = 2;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80106f0:	68f9      	ldr	r1, [r7, #12]
 80106f2:	4613      	mov	r3, r2
 80106f4:	00db      	lsls	r3, r3, #3
 80106f6:	1a9b      	subs	r3, r3, r2
 80106f8:	00db      	lsls	r3, r3, #3
 80106fa:	440b      	add	r3, r1
 80106fc:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010700:	2202      	movs	r2, #2
 8010702:	701a      	strb	r2, [r3, #0]
		}break;
 8010704:	bf00      	nop
	}
	pdev->tclasslist[pdev->classId].CurrPcktSze = 0U;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801070c:	68f9      	ldr	r1, [r7, #12]
 801070e:	4613      	mov	r3, r2
 8010710:	00db      	lsls	r3, r3, #3
 8010712:	1a9b      	subs	r3, r3, r2
 8010714:	00db      	lsls	r3, r3, #3
 8010716:	440b      	add	r3, r1
 8010718:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801071c:	2200      	movs	r2, #0
 801071e:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 8010720:	2300      	movs	r3, #0
}
 8010722:	4618      	mov	r0, r3
 8010724:	3714      	adds	r7, #20
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr
	...

08010730 <USBD_CMPSIT_GetFSCfgDesc>:
  *         return configuration descriptor for both FS and HS modes
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetFSCfgDesc(uint16_t *length)
{
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8010738:	4b05      	ldr	r3, [pc, #20]	; (8010750 <USBD_CMPSIT_GetFSCfgDesc+0x20>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	b29a      	uxth	r2, r3
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_FSCfgDesc;
 8010742:	4b04      	ldr	r3, [pc, #16]	; (8010754 <USBD_CMPSIT_GetFSCfgDesc+0x24>)
}
 8010744:	4618      	mov	r0, r3
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr
 8010750:	24000104 	.word	0x24000104
 8010754:	24000098 	.word	0x24000098

08010758 <USBD_CMPSIT_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010758:	b480      	push	{r7}
 801075a:	b083      	sub	sp, #12
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8010760:	4b05      	ldr	r3, [pc, #20]	; (8010778 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x20>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	b29a      	uxth	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_FSCfgDesc;
 801076a:	4b04      	ldr	r3, [pc, #16]	; (801077c <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x24>)
}
 801076c:	4618      	mov	r0, r3
 801076e:	370c      	adds	r7, #12
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr
 8010778:	24000104 	.word	0x24000104
 801077c:	24000098 	.word	0x24000098

08010780 <USBD_CMPSIT_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)(sizeof(USBD_CMPSIT_DeviceQualifierDesc));
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	220a      	movs	r2, #10
 801078c:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_DeviceQualifierDesc;
 801078e:	4b03      	ldr	r3, [pc, #12]	; (801079c <USBD_CMPSIT_GetDeviceQualifierDescriptor+0x1c>)
}
 8010790:	4618      	mov	r0, r3
 8010792:	370c      	adds	r7, #12
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr
 801079c:	24000108 	.word	0x24000108

080107a0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	460b      	mov	r3, r1
 80107aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80107ac:	f248 0074 	movw	r0, #32884	; 0x8074
 80107b0:	f00a f9c0 	bl	801ab34 <malloc>
 80107b4:	4603      	mov	r3, r0
 80107b6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d10a      	bne.n	80107d4 <USBD_MSC_Init+0x34>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	33b2      	adds	r3, #178	; 0xb2
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	4413      	add	r3, r2
 80107cc:	2200      	movs	r2, #0
 80107ce:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 80107d0:	2302      	movs	r3, #2
 80107d2:	e08a      	b.n	80108ea <USBD_MSC_Init+0x14a>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80107da:	687a      	ldr	r2, [r7, #4]
 80107dc:	33b2      	adds	r3, #178	; 0xb2
 80107de:	009b      	lsls	r3, r3, #2
 80107e0:	4413      	add	r3, r2
 80107e2:	68fa      	ldr	r2, [r7, #12]
 80107e4:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	33b2      	adds	r3, #178	; 0xb2
 80107f0:	009b      	lsls	r3, r3, #2
 80107f2:	4413      	add	r3, r2
 80107f4:	685a      	ldr	r2, [r3, #4]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010802:	b2db      	uxtb	r3, r3
 8010804:	2202      	movs	r2, #2
 8010806:	2180      	movs	r1, #128	; 0x80
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f002 fe72 	bl	80134f2 <USBD_CoreGetEPAdd>
 801080e:	4603      	mov	r3, r0
 8010810:	461a      	mov	r2, r3
 8010812:	4b38      	ldr	r3, [pc, #224]	; (80108f4 <USBD_MSC_Init+0x154>)
 8010814:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801081c:	b2db      	uxtb	r3, r3
 801081e:	2202      	movs	r2, #2
 8010820:	2100      	movs	r1, #0
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f002 fe65 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010828:	4603      	mov	r3, r0
 801082a:	461a      	mov	r2, r3
 801082c:	4b32      	ldr	r3, [pc, #200]	; (80108f8 <USBD_MSC_Init+0x158>)
 801082e:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	7c1b      	ldrb	r3, [r3, #16]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d12b      	bne.n	8010890 <USBD_MSC_Init+0xf0>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8010838:	4b2f      	ldr	r3, [pc, #188]	; (80108f8 <USBD_MSC_Init+0x158>)
 801083a:	7819      	ldrb	r1, [r3, #0]
 801083c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010840:	2202      	movs	r2, #2
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f008 fbdb 	bl	8018ffe <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8010848:	4b2b      	ldr	r3, [pc, #172]	; (80108f8 <USBD_MSC_Init+0x158>)
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	f003 020f 	and.w	r2, r3, #15
 8010850:	6879      	ldr	r1, [r7, #4]
 8010852:	4613      	mov	r3, r2
 8010854:	009b      	lsls	r3, r3, #2
 8010856:	4413      	add	r3, r2
 8010858:	009b      	lsls	r3, r3, #2
 801085a:	440b      	add	r3, r1
 801085c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010860:	2201      	movs	r2, #1
 8010862:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8010864:	4b23      	ldr	r3, [pc, #140]	; (80108f4 <USBD_MSC_Init+0x154>)
 8010866:	7819      	ldrb	r1, [r3, #0]
 8010868:	f44f 7300 	mov.w	r3, #512	; 0x200
 801086c:	2202      	movs	r2, #2
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f008 fbc5 	bl	8018ffe <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8010874:	4b1f      	ldr	r3, [pc, #124]	; (80108f4 <USBD_MSC_Init+0x154>)
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	f003 020f 	and.w	r2, r3, #15
 801087c:	6879      	ldr	r1, [r7, #4]
 801087e:	4613      	mov	r3, r2
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	4413      	add	r3, r2
 8010884:	009b      	lsls	r3, r3, #2
 8010886:	440b      	add	r3, r1
 8010888:	3324      	adds	r3, #36	; 0x24
 801088a:	2201      	movs	r2, #1
 801088c:	801a      	strh	r2, [r3, #0]
 801088e:	e028      	b.n	80108e2 <USBD_MSC_Init+0x142>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010890:	4b19      	ldr	r3, [pc, #100]	; (80108f8 <USBD_MSC_Init+0x158>)
 8010892:	7819      	ldrb	r1, [r3, #0]
 8010894:	2340      	movs	r3, #64	; 0x40
 8010896:	2202      	movs	r2, #2
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f008 fbb0 	bl	8018ffe <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801089e:	4b16      	ldr	r3, [pc, #88]	; (80108f8 <USBD_MSC_Init+0x158>)
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	f003 020f 	and.w	r2, r3, #15
 80108a6:	6879      	ldr	r1, [r7, #4]
 80108a8:	4613      	mov	r3, r2
 80108aa:	009b      	lsls	r3, r3, #2
 80108ac:	4413      	add	r3, r2
 80108ae:	009b      	lsls	r3, r3, #2
 80108b0:	440b      	add	r3, r1
 80108b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80108b6:	2201      	movs	r2, #1
 80108b8:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80108ba:	4b0e      	ldr	r3, [pc, #56]	; (80108f4 <USBD_MSC_Init+0x154>)
 80108bc:	7819      	ldrb	r1, [r3, #0]
 80108be:	2340      	movs	r3, #64	; 0x40
 80108c0:	2202      	movs	r2, #2
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f008 fb9b 	bl	8018ffe <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80108c8:	4b0a      	ldr	r3, [pc, #40]	; (80108f4 <USBD_MSC_Init+0x154>)
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	f003 020f 	and.w	r2, r3, #15
 80108d0:	6879      	ldr	r1, [r7, #4]
 80108d2:	4613      	mov	r3, r2
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	4413      	add	r3, r2
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	440b      	add	r3, r1
 80108dc:	3324      	adds	r3, #36	; 0x24
 80108de:	2201      	movs	r2, #1
 80108e0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 f9d4 	bl	8010c90 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80108e8:	2300      	movs	r3, #0
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3710      	adds	r7, #16
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	2400014c 	.word	0x2400014c
 80108f8:	2400014d 	.word	0x2400014d

080108fc <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	460b      	mov	r3, r1
 8010906:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801090e:	b2db      	uxtb	r3, r3
 8010910:	2202      	movs	r2, #2
 8010912:	2180      	movs	r1, #128	; 0x80
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f002 fdec 	bl	80134f2 <USBD_CoreGetEPAdd>
 801091a:	4603      	mov	r3, r0
 801091c:	461a      	mov	r2, r3
 801091e:	4b30      	ldr	r3, [pc, #192]	; (80109e0 <USBD_MSC_DeInit+0xe4>)
 8010920:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010928:	b2db      	uxtb	r3, r3
 801092a:	2202      	movs	r2, #2
 801092c:	2100      	movs	r1, #0
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f002 fddf 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010934:	4603      	mov	r3, r0
 8010936:	461a      	mov	r2, r3
 8010938:	4b2a      	ldr	r3, [pc, #168]	; (80109e4 <USBD_MSC_DeInit+0xe8>)
 801093a:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 801093c:	4b29      	ldr	r3, [pc, #164]	; (80109e4 <USBD_MSC_DeInit+0xe8>)
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	4619      	mov	r1, r3
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f008 fb81 	bl	801904a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8010948:	4b26      	ldr	r3, [pc, #152]	; (80109e4 <USBD_MSC_DeInit+0xe8>)
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	f003 020f 	and.w	r2, r3, #15
 8010950:	6879      	ldr	r1, [r7, #4]
 8010952:	4613      	mov	r3, r2
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	4413      	add	r3, r2
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	440b      	add	r3, r1
 801095c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010960:	2200      	movs	r2, #0
 8010962:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8010964:	4b1e      	ldr	r3, [pc, #120]	; (80109e0 <USBD_MSC_DeInit+0xe4>)
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	4619      	mov	r1, r3
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f008 fb6d 	bl	801904a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8010970:	4b1b      	ldr	r3, [pc, #108]	; (80109e0 <USBD_MSC_DeInit+0xe4>)
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	f003 020f 	and.w	r2, r3, #15
 8010978:	6879      	ldr	r1, [r7, #4]
 801097a:	4613      	mov	r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	4413      	add	r3, r2
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	440b      	add	r3, r1
 8010984:	3324      	adds	r3, #36	; 0x24
 8010986:	2200      	movs	r2, #0
 8010988:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	33b2      	adds	r3, #178	; 0xb2
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4413      	add	r3, r2
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d01a      	beq.n	80109d4 <USBD_MSC_DeInit+0xd8>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f000 fa32 	bl	8010e08 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	33b2      	adds	r3, #178	; 0xb2
 80109ae:	009b      	lsls	r3, r3, #2
 80109b0:	4413      	add	r3, r2
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	4618      	mov	r0, r3
 80109b6:	f00a f8c5 	bl	801ab44 <free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	33b2      	adds	r3, #178	; 0xb2
 80109c4:	009b      	lsls	r3, r3, #2
 80109c6:	4413      	add	r3, r2
 80109c8:	2200      	movs	r2, #0
 80109ca:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2200      	movs	r2, #0
 80109d0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  }

  return (uint8_t)USBD_OK;
 80109d4:	2300      	movs	r3, #0
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3708      	adds	r7, #8
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
 80109de:	bf00      	nop
 80109e0:	2400014c 	.word	0x2400014c
 80109e4:	2400014d 	.word	0x2400014d

080109e8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b086      	sub	sp, #24
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	33b2      	adds	r3, #178	; 0xb2
 80109fc:	009b      	lsls	r3, r3, #2
 80109fe:	4413      	add	r3, r2
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a04:	2300      	movs	r3, #0
 8010a06:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	81fb      	strh	r3, [r7, #14]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	2202      	movs	r2, #2
 8010a16:	2180      	movs	r1, #128	; 0x80
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f002 fd6a 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	461a      	mov	r2, r3
 8010a22:	4b7c      	ldr	r3, [pc, #496]	; (8010c14 <USBD_MSC_Setup+0x22c>)
 8010a24:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	2202      	movs	r2, #2
 8010a30:	2100      	movs	r1, #0
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f002 fd5d 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	4b76      	ldr	r3, [pc, #472]	; (8010c18 <USBD_MSC_Setup+0x230>)
 8010a3e:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d101      	bne.n	8010a4a <USBD_MSC_Setup+0x62>
  {
    return (uint8_t)USBD_FAIL;
 8010a46:	2303      	movs	r3, #3
 8010a48:	e0e0      	b.n	8010c0c <USBD_MSC_Setup+0x224>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d053      	beq.n	8010afe <USBD_MSC_Setup+0x116>
 8010a56:	2b20      	cmp	r3, #32
 8010a58:	f040 80d0 	bne.w	8010bfc <USBD_MSC_Setup+0x214>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	785b      	ldrb	r3, [r3, #1]
 8010a60:	2bfe      	cmp	r3, #254	; 0xfe
 8010a62:	d002      	beq.n	8010a6a <USBD_MSC_Setup+0x82>
 8010a64:	2bff      	cmp	r3, #255	; 0xff
 8010a66:	d02a      	beq.n	8010abe <USBD_MSC_Setup+0xd6>
 8010a68:	e041      	b.n	8010aee <USBD_MSC_Setup+0x106>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	885b      	ldrh	r3, [r3, #2]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d11e      	bne.n	8010ab0 <USBD_MSC_Setup+0xc8>
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	88db      	ldrh	r3, [r3, #6]
 8010a76:	2b01      	cmp	r3, #1
 8010a78:	d11a      	bne.n	8010ab0 <USBD_MSC_Setup+0xc8>
              ((req->bmRequest & 0x80U) == 0x80U))
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	da15      	bge.n	8010ab0 <USBD_MSC_Setup+0xc8>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	33b6      	adds	r3, #182	; 0xb6
 8010a8e:	009b      	lsls	r3, r3, #2
 8010a90:	4413      	add	r3, r2
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	699b      	ldr	r3, [r3, #24]
 8010a96:	4798      	blx	r3
 8010a98:	4603      	mov	r3, r0
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f003 fc3a 	bl	8014320 <USBD_CtlSendData>
 8010aac:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010aae:	e025      	b.n	8010afc <USBD_MSC_Setup+0x114>
            USBD_CtlError(pdev, req);
 8010ab0:	6839      	ldr	r1, [r7, #0]
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f003 fbc3 	bl	801423e <USBD_CtlError>
            ret = USBD_FAIL;
 8010ab8:	2303      	movs	r3, #3
 8010aba:	75fb      	strb	r3, [r7, #23]
          break;
 8010abc:	e01e      	b.n	8010afc <USBD_MSC_Setup+0x114>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	885b      	ldrh	r3, [r3, #2]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d10c      	bne.n	8010ae0 <USBD_MSC_Setup+0xf8>
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	88db      	ldrh	r3, [r3, #6]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d108      	bne.n	8010ae0 <USBD_MSC_Setup+0xf8>
              ((req->bmRequest & 0x80U) != 0x80U))
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	db03      	blt.n	8010ae0 <USBD_MSC_Setup+0xf8>
          {
            MSC_BOT_Reset(pdev);
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f000 f945 	bl	8010d68 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010ade:	e00d      	b.n	8010afc <USBD_MSC_Setup+0x114>
            USBD_CtlError(pdev, req);
 8010ae0:	6839      	ldr	r1, [r7, #0]
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f003 fbab 	bl	801423e <USBD_CtlError>
            ret = USBD_FAIL;
 8010ae8:	2303      	movs	r3, #3
 8010aea:	75fb      	strb	r3, [r7, #23]
          break;
 8010aec:	e006      	b.n	8010afc <USBD_MSC_Setup+0x114>

        default:
          USBD_CtlError(pdev, req);
 8010aee:	6839      	ldr	r1, [r7, #0]
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f003 fba4 	bl	801423e <USBD_CtlError>
          ret = USBD_FAIL;
 8010af6:	2303      	movs	r3, #3
 8010af8:	75fb      	strb	r3, [r7, #23]
          break;
 8010afa:	bf00      	nop
      }
      break;
 8010afc:	e085      	b.n	8010c0a <USBD_MSC_Setup+0x222>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	785b      	ldrb	r3, [r3, #1]
 8010b02:	2b0b      	cmp	r3, #11
 8010b04:	d871      	bhi.n	8010bea <USBD_MSC_Setup+0x202>
 8010b06:	a201      	add	r2, pc, #4	; (adr r2, 8010b0c <USBD_MSC_Setup+0x124>)
 8010b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b0c:	08010b3d 	.word	0x08010b3d
 8010b10:	08010bb9 	.word	0x08010bb9
 8010b14:	08010beb 	.word	0x08010beb
 8010b18:	08010beb 	.word	0x08010beb
 8010b1c:	08010beb 	.word	0x08010beb
 8010b20:	08010beb 	.word	0x08010beb
 8010b24:	08010beb 	.word	0x08010beb
 8010b28:	08010beb 	.word	0x08010beb
 8010b2c:	08010beb 	.word	0x08010beb
 8010b30:	08010beb 	.word	0x08010beb
 8010b34:	08010b67 	.word	0x08010b67
 8010b38:	08010b91 	.word	0x08010b91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	2b03      	cmp	r3, #3
 8010b46:	d107      	bne.n	8010b58 <USBD_MSC_Setup+0x170>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010b48:	f107 030e 	add.w	r3, r7, #14
 8010b4c:	2202      	movs	r2, #2
 8010b4e:	4619      	mov	r1, r3
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f003 fbe5 	bl	8014320 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b56:	e050      	b.n	8010bfa <USBD_MSC_Setup+0x212>
            USBD_CtlError(pdev, req);
 8010b58:	6839      	ldr	r1, [r7, #0]
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f003 fb6f 	bl	801423e <USBD_CtlError>
            ret = USBD_FAIL;
 8010b60:	2303      	movs	r3, #3
 8010b62:	75fb      	strb	r3, [r7, #23]
          break;
 8010b64:	e049      	b.n	8010bfa <USBD_MSC_Setup+0x212>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	2b03      	cmp	r3, #3
 8010b70:	d107      	bne.n	8010b82 <USBD_MSC_Setup+0x19a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8010b72:	693b      	ldr	r3, [r7, #16]
 8010b74:	3304      	adds	r3, #4
 8010b76:	2201      	movs	r2, #1
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f003 fbd0 	bl	8014320 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b80:	e03b      	b.n	8010bfa <USBD_MSC_Setup+0x212>
            USBD_CtlError(pdev, req);
 8010b82:	6839      	ldr	r1, [r7, #0]
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f003 fb5a 	bl	801423e <USBD_CtlError>
            ret = USBD_FAIL;
 8010b8a:	2303      	movs	r3, #3
 8010b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8010b8e:	e034      	b.n	8010bfa <USBD_MSC_Setup+0x212>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b96:	b2db      	uxtb	r3, r3
 8010b98:	2b03      	cmp	r3, #3
 8010b9a:	d106      	bne.n	8010baa <USBD_MSC_Setup+0x1c2>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	885b      	ldrh	r3, [r3, #2]
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010ba8:	e027      	b.n	8010bfa <USBD_MSC_Setup+0x212>
            USBD_CtlError(pdev, req);
 8010baa:	6839      	ldr	r1, [r7, #0]
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f003 fb46 	bl	801423e <USBD_CtlError>
            ret = USBD_FAIL;
 8010bb2:	2303      	movs	r3, #3
 8010bb4:	75fb      	strb	r3, [r7, #23]
          break;
 8010bb6:	e020      	b.n	8010bfa <USBD_MSC_Setup+0x212>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	2b03      	cmp	r3, #3
 8010bc2:	d119      	bne.n	8010bf8 <USBD_MSC_Setup+0x210>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	885b      	ldrh	r3, [r3, #2]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d115      	bne.n	8010bf8 <USBD_MSC_Setup+0x210>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	889b      	ldrh	r3, [r3, #4]
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f008 fa57 	bl	8019088 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	889b      	ldrh	r3, [r3, #4]
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	4619      	mov	r1, r3
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 fb6e 	bl	80112c4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8010be8:	e006      	b.n	8010bf8 <USBD_MSC_Setup+0x210>

        default:
          USBD_CtlError(pdev, req);
 8010bea:	6839      	ldr	r1, [r7, #0]
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f003 fb26 	bl	801423e <USBD_CtlError>
          ret = USBD_FAIL;
 8010bf2:	2303      	movs	r3, #3
 8010bf4:	75fb      	strb	r3, [r7, #23]
          break;
 8010bf6:	e000      	b.n	8010bfa <USBD_MSC_Setup+0x212>
          break;
 8010bf8:	bf00      	nop
      }
      break;
 8010bfa:	e006      	b.n	8010c0a <USBD_MSC_Setup+0x222>

    default:
      USBD_CtlError(pdev, req);
 8010bfc:	6839      	ldr	r1, [r7, #0]
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f003 fb1d 	bl	801423e <USBD_CtlError>
      ret = USBD_FAIL;
 8010c04:	2303      	movs	r3, #3
 8010c06:	75fb      	strb	r3, [r7, #23]
      break;
 8010c08:	bf00      	nop
  }

  return (uint8_t)ret;
 8010c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3718      	adds	r7, #24
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}
 8010c14:	2400014c 	.word	0x2400014c
 8010c18:	2400014d 	.word	0x2400014d

08010c1c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	460b      	mov	r3, r1
 8010c26:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8010c28:	78fb      	ldrb	r3, [r7, #3]
 8010c2a:	4619      	mov	r1, r3
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f000 f904 	bl	8010e3a <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8010c32:	2300      	movs	r3, #0
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	460b      	mov	r3, r1
 8010c46:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8010c48:	78fb      	ldrb	r3, [r7, #3]
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 f931 	bl	8010eb4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d101      	bne.n	8010c70 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010c6c:	2303      	movs	r3, #3
 8010c6e:	e009      	b.n	8010c84 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	33b6      	adds	r3, #182	; 0xb6
 8010c7a:	009b      	lsls	r3, r3, #2
 8010c7c:	4413      	add	r3, r2
 8010c7e:	683a      	ldr	r2, [r7, #0]
 8010c80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010c82:	2300      	movs	r3, #0
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	370c      	adds	r7, #12
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr

08010c90 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	33b2      	adds	r3, #178	; 0xb2
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	4413      	add	r3, r2
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	2202      	movs	r2, #2
 8010cb4:	2180      	movs	r1, #128	; 0x80
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f002 fc1b 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	4b27      	ldr	r3, [pc, #156]	; (8010d60 <MSC_BOT_Init+0xd0>)
 8010cc2:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	2202      	movs	r2, #2
 8010cce:	2100      	movs	r1, #0
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f002 fc0e 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	461a      	mov	r2, r3
 8010cda:	4b22      	ldr	r3, [pc, #136]	; (8010d64 <MSC_BOT_Init+0xd4>)
 8010cdc:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d039      	beq.n	8010d58 <MSC_BOT_Init+0xc8>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	2200      	movs	r2, #0
 8010cee:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010d02:	2200      	movs	r2, #0
 8010d04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010d0e:	2200      	movs	r2, #0
 8010d10:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	33b6      	adds	r3, #182	; 0xb6
 8010d1e:	009b      	lsls	r3, r3, #2
 8010d20:	4413      	add	r3, r2
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2000      	movs	r0, #0
 8010d28:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8010d2a:	4b0e      	ldr	r3, [pc, #56]	; (8010d64 <MSC_BOT_Init+0xd4>)
 8010d2c:	781b      	ldrb	r3, [r3, #0]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f008 f9a9 	bl	8019088 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8010d36:	4b0a      	ldr	r3, [pc, #40]	; (8010d60 <MSC_BOT_Init+0xd0>)
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f008 f9a3 	bl	8019088 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8010d42:	4b08      	ldr	r3, [pc, #32]	; (8010d64 <MSC_BOT_Init+0xd4>)
 8010d44:	7819      	ldrb	r1, [r3, #0]
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f248 0210 	movw	r2, #32784	; 0x8010
 8010d4c:	441a      	add	r2, r3
 8010d4e:	231f      	movs	r3, #31
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f008 fa62 	bl	801921a <USBD_LL_PrepareReceive>
 8010d56:	e000      	b.n	8010d5a <MSC_BOT_Init+0xca>
    return;
 8010d58:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010d5a:	3710      	adds	r7, #16
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	2400014c 	.word	0x2400014c
 8010d64:	2400014d 	.word	0x2400014d

08010d68 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	33b2      	adds	r3, #178	; 0xb2
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	4413      	add	r3, r2
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	2202      	movs	r2, #2
 8010d8c:	2180      	movs	r1, #128	; 0x80
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f002 fbaf 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010d94:	4603      	mov	r3, r0
 8010d96:	461a      	mov	r2, r3
 8010d98:	4b19      	ldr	r3, [pc, #100]	; (8010e00 <MSC_BOT_Reset+0x98>)
 8010d9a:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	2202      	movs	r2, #2
 8010da6:	2100      	movs	r1, #0
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f002 fba2 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010dae:	4603      	mov	r3, r0
 8010db0:	461a      	mov	r2, r3
 8010db2:	4b14      	ldr	r3, [pc, #80]	; (8010e04 <MSC_BOT_Reset+0x9c>)
 8010db4:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d01c      	beq.n	8010df6 <MSC_BOT_Reset+0x8e>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8010dc8:	4b0d      	ldr	r3, [pc, #52]	; (8010e00 <MSC_BOT_Reset+0x98>)
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	4619      	mov	r1, r3
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f008 f998 	bl	8019104 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8010dd4:	4b0b      	ldr	r3, [pc, #44]	; (8010e04 <MSC_BOT_Reset+0x9c>)
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	4619      	mov	r1, r3
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f008 f992 	bl	8019104 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8010de0:	4b08      	ldr	r3, [pc, #32]	; (8010e04 <MSC_BOT_Reset+0x9c>)
 8010de2:	7819      	ldrb	r1, [r3, #0]
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f248 0210 	movw	r2, #32784	; 0x8010
 8010dea:	441a      	add	r2, r3
 8010dec:	231f      	movs	r3, #31
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f008 fa13 	bl	801921a <USBD_LL_PrepareReceive>
 8010df4:	e000      	b.n	8010df8 <MSC_BOT_Reset+0x90>
    return;
 8010df6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010df8:	3710      	adds	r7, #16
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	2400014c 	.word	0x2400014c
 8010e04:	2400014d 	.word	0x2400014d

08010e08 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b085      	sub	sp, #20
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	33b2      	adds	r3, #178	; 0xb2
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	4413      	add	r3, r2
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d002      	beq.n	8010e2e <MSC_BOT_DeInit+0x26>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	721a      	strb	r2, [r3, #8]
  }
}
 8010e2e:	bf00      	nop
 8010e30:	3714      	adds	r7, #20
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr

08010e3a <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b084      	sub	sp, #16
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
 8010e42:	460b      	mov	r3, r1
 8010e44:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	33b2      	adds	r3, #178	; 0xb2
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	4413      	add	r3, r2
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d022      	beq.n	8010ea4 <MSC_BOT_DataIn+0x6a>
  {
    return;
  }

  switch (hmsc->bot_state)
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	7a1b      	ldrb	r3, [r3, #8]
 8010e62:	2b02      	cmp	r3, #2
 8010e64:	d005      	beq.n	8010e72 <MSC_BOT_DataIn+0x38>
 8010e66:	2b02      	cmp	r3, #2
 8010e68:	db1e      	blt.n	8010ea8 <MSC_BOT_DataIn+0x6e>
 8010e6a:	3b03      	subs	r3, #3
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d81b      	bhi.n	8010ea8 <MSC_BOT_DataIn+0x6e>
 8010e70:	e013      	b.n	8010e9a <MSC_BOT_DataIn+0x60>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010e78:	7f59      	ldrb	r1, [r3, #29]
 8010e7a:	68fa      	ldr	r2, [r7, #12]
 8010e7c:	f248 031f 	movw	r3, #32799	; 0x801f
 8010e80:	4413      	add	r3, r2
 8010e82:	461a      	mov	r2, r3
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 fa71 	bl	801136c <SCSI_ProcessCmd>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	da0d      	bge.n	8010eac <MSC_BOT_DataIn+0x72>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010e90:	2101      	movs	r1, #1
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f000 f95a 	bl	801114c <MSC_BOT_SendCSW>
      }
      break;
 8010e98:	e008      	b.n	8010eac <MSC_BOT_DataIn+0x72>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010e9a:	2100      	movs	r1, #0
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f000 f955 	bl	801114c <MSC_BOT_SendCSW>
      break;
 8010ea2:	e004      	b.n	8010eae <MSC_BOT_DataIn+0x74>
    return;
 8010ea4:	bf00      	nop
 8010ea6:	e002      	b.n	8010eae <MSC_BOT_DataIn+0x74>

    default:
      break;
 8010ea8:	bf00      	nop
 8010eaa:	e000      	b.n	8010eae <MSC_BOT_DataIn+0x74>
      break;
 8010eac:	bf00      	nop
  }
}
 8010eae:	3710      	adds	r7, #16
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b084      	sub	sp, #16
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010ec6:	687a      	ldr	r2, [r7, #4]
 8010ec8:	33b2      	adds	r3, #178	; 0xb2
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4413      	add	r3, r2
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d01e      	beq.n	8010f16 <MSC_BOT_DataOut+0x62>
  {
    return;
  }

  switch (hmsc->bot_state)
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	7a1b      	ldrb	r3, [r3, #8]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d002      	beq.n	8010ee6 <MSC_BOT_DataOut+0x32>
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d004      	beq.n	8010eee <MSC_BOT_DataOut+0x3a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8010ee4:	e01a      	b.n	8010f1c <MSC_BOT_DataOut+0x68>
      MSC_BOT_CBW_Decode(pdev);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f000 f81c 	bl	8010f24 <MSC_BOT_CBW_Decode>
      break;
 8010eec:	e016      	b.n	8010f1c <MSC_BOT_DataOut+0x68>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010ef4:	7f59      	ldrb	r1, [r3, #29]
 8010ef6:	68fa      	ldr	r2, [r7, #12]
 8010ef8:	f248 031f 	movw	r3, #32799	; 0x801f
 8010efc:	4413      	add	r3, r2
 8010efe:	461a      	mov	r2, r3
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f000 fa33 	bl	801136c <SCSI_ProcessCmd>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	da06      	bge.n	8010f1a <MSC_BOT_DataOut+0x66>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f000 f91c 	bl	801114c <MSC_BOT_SendCSW>
      break;
 8010f14:	e001      	b.n	8010f1a <MSC_BOT_DataOut+0x66>
    return;
 8010f16:	bf00      	nop
 8010f18:	e000      	b.n	8010f1c <MSC_BOT_DataOut+0x68>
      break;
 8010f1a:	bf00      	nop
  }
}
 8010f1c:	3710      	adds	r7, #16
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
	...

08010f24 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b084      	sub	sp, #16
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010f32:	687a      	ldr	r2, [r7, #4]
 8010f34:	33b2      	adds	r3, #178	; 0xb2
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	4413      	add	r3, r2
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010f44:	b2db      	uxtb	r3, r3
 8010f46:	2202      	movs	r2, #2
 8010f48:	2180      	movs	r1, #128	; 0x80
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f002 fad1 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010f50:	4603      	mov	r3, r0
 8010f52:	461a      	mov	r2, r3
 8010f54:	4b4e      	ldr	r3, [pc, #312]	; (8011090 <MSC_BOT_CBW_Decode+0x16c>)
 8010f56:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	2202      	movs	r2, #2
 8010f62:	2100      	movs	r1, #0
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f002 fac4 	bl	80134f2 <USBD_CoreGetEPAdd>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	4b49      	ldr	r3, [pc, #292]	; (8011094 <MSC_BOT_CBW_Decode+0x170>)
 8010f70:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f000 8085 	beq.w	8011084 <MSC_BOT_CBW_Decode+0x160>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010f80:	695b      	ldr	r3, [r3, #20]
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010f88:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010f90:	699b      	ldr	r3, [r3, #24]
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010f98:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8010f9a:	4b3e      	ldr	r3, [pc, #248]	; (8011094 <MSC_BOT_CBW_Decode+0x170>)
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f008 f95b 	bl	801925c <USBD_LL_GetRxDataSize>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	2b1f      	cmp	r3, #31
 8010faa:	d118      	bne.n	8010fde <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010fb2:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8010fb4:	4a38      	ldr	r2, [pc, #224]	; (8011098 <MSC_BOT_CBW_Decode+0x174>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d111      	bne.n	8010fde <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010fc0:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d80b      	bhi.n	8010fde <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010fcc:	7f9b      	ldrb	r3, [r3, #30]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d005      	beq.n	8010fde <MSC_BOT_CBW_Decode+0xba>
      (hmsc->cbw.bCBLength > 16U))
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010fd8:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010fda:	2b10      	cmp	r3, #16
 8010fdc:	d90f      	bls.n	8010ffe <MSC_BOT_CBW_Decode+0xda>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010fe4:	7f59      	ldrb	r1, [r3, #29]
 8010fe6:	2320      	movs	r3, #32
 8010fe8:	2205      	movs	r2, #5
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f000 fef4 	bl	8011dd8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2202      	movs	r2, #2
 8010ff4:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 f904 	bl	8011204 <MSC_BOT_Abort>
 8010ffc:	e045      	b.n	801108a <MSC_BOT_CBW_Decode+0x166>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011004:	7f59      	ldrb	r1, [r3, #29]
 8011006:	68fa      	ldr	r2, [r7, #12]
 8011008:	f248 031f 	movw	r3, #32799	; 0x801f
 801100c:	4413      	add	r3, r2
 801100e:	461a      	mov	r2, r3
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f000 f9ab 	bl	801136c <SCSI_ProcessCmd>
 8011016:	4603      	mov	r3, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	da0c      	bge.n	8011036 <MSC_BOT_CBW_Decode+0x112>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	7a1b      	ldrb	r3, [r3, #8]
 8011020:	2b05      	cmp	r3, #5
 8011022:	d104      	bne.n	801102e <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011024:	2101      	movs	r1, #1
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 f890 	bl	801114c <MSC_BOT_SendCSW>
 801102c:	e02d      	b.n	801108a <MSC_BOT_CBW_Decode+0x166>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 f8e8 	bl	8011204 <MSC_BOT_Abort>
 8011034:	e029      	b.n	801108a <MSC_BOT_CBW_Decode+0x166>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	7a1b      	ldrb	r3, [r3, #8]
 801103a:	2b02      	cmp	r3, #2
 801103c:	d024      	beq.n	8011088 <MSC_BOT_CBW_Decode+0x164>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011042:	2b01      	cmp	r3, #1
 8011044:	d020      	beq.n	8011088 <MSC_BOT_CBW_Decode+0x164>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801104a:	2b03      	cmp	r3, #3
 801104c:	d01c      	beq.n	8011088 <MSC_BOT_CBW_Decode+0x164>
    {
      if (hmsc->bot_data_length > 0U)
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d009      	beq.n	801106a <MSC_BOT_CBW_Decode+0x146>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f103 0110 	add.w	r1, r3, #16
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	461a      	mov	r2, r3
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 f81a 	bl	801109c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8011068:	e00f      	b.n	801108a <MSC_BOT_CBW_Decode+0x166>
      }
      else if (hmsc->bot_data_length == 0U)
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d104      	bne.n	801107c <MSC_BOT_CBW_Decode+0x158>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011072:	2100      	movs	r1, #0
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 f869 	bl	801114c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801107a:	e006      	b.n	801108a <MSC_BOT_CBW_Decode+0x166>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f000 f8c1 	bl	8011204 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8011082:	e002      	b.n	801108a <MSC_BOT_CBW_Decode+0x166>
    return;
 8011084:	bf00      	nop
 8011086:	e000      	b.n	801108a <MSC_BOT_CBW_Decode+0x166>
      }
    }
    else
    {
      return;
 8011088:	bf00      	nop
    }
  }
}
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	2400014c 	.word	0x2400014c
 8011094:	2400014d 	.word	0x2400014d
 8011098:	43425355 	.word	0x43425355

0801109c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b086      	sub	sp, #24
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80110ae:	68fa      	ldr	r2, [r7, #12]
 80110b0:	33b2      	adds	r3, #178	; 0xb2
 80110b2:	009b      	lsls	r3, r3, #2
 80110b4:	4413      	add	r3, r2
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	617b      	str	r3, [r7, #20]

  uint32_t length;

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	2202      	movs	r2, #2
 80110c4:	2180      	movs	r1, #128	; 0x80
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f002 fa13 	bl	80134f2 <USBD_CoreGetEPAdd>
 80110cc:	4603      	mov	r3, r0
 80110ce:	461a      	mov	r2, r3
 80110d0:	4b1c      	ldr	r3, [pc, #112]	; (8011144 <MSC_BOT_SendData+0xa8>)
 80110d2:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80110da:	b2db      	uxtb	r3, r3
 80110dc:	2202      	movs	r2, #2
 80110de:	2100      	movs	r1, #0
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f002 fa06 	bl	80134f2 <USBD_CoreGetEPAdd>
 80110e6:	4603      	mov	r3, r0
 80110e8:	461a      	mov	r2, r3
 80110ea:	4b17      	ldr	r3, [pc, #92]	; (8011148 <MSC_BOT_SendData+0xac>)
 80110ec:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d023      	beq.n	801113c <MSC_BOT_SendData+0xa0>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80110fa:	699b      	ldr	r3, [r3, #24]
 80110fc:	687a      	ldr	r2, [r7, #4]
 80110fe:	4293      	cmp	r3, r2
 8011100:	bf28      	it	cs
 8011102:	4613      	movcs	r3, r2
 8011104:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801110c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	1ad3      	subs	r3, r2, r3
 8011112:	697a      	ldr	r2, [r7, #20]
 8011114:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011118:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011120:	2200      	movs	r2, #0
 8011122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	2204      	movs	r2, #4
 801112a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801112c:	4b05      	ldr	r3, [pc, #20]	; (8011144 <MSC_BOT_SendData+0xa8>)
 801112e:	7819      	ldrb	r1, [r3, #0]
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	68ba      	ldr	r2, [r7, #8]
 8011134:	68f8      	ldr	r0, [r7, #12]
 8011136:	f008 f84f 	bl	80191d8 <USBD_LL_Transmit>
 801113a:	e000      	b.n	801113e <MSC_BOT_SendData+0xa2>
    return;
 801113c:	bf00      	nop
}
 801113e:	3718      	adds	r7, #24
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	2400014c 	.word	0x2400014c
 8011148:	2400014d 	.word	0x2400014d

0801114c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	460b      	mov	r3, r1
 8011156:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	33b2      	adds	r3, #178	; 0xb2
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	4413      	add	r3, r2
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011170:	b2db      	uxtb	r3, r3
 8011172:	2202      	movs	r2, #2
 8011174:	2180      	movs	r1, #128	; 0x80
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f002 f9bb 	bl	80134f2 <USBD_CoreGetEPAdd>
 801117c:	4603      	mov	r3, r0
 801117e:	461a      	mov	r2, r3
 8011180:	4b1d      	ldr	r3, [pc, #116]	; (80111f8 <MSC_BOT_SendCSW+0xac>)
 8011182:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801118a:	b2db      	uxtb	r3, r3
 801118c:	2202      	movs	r2, #2
 801118e:	2100      	movs	r1, #0
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f002 f9ae 	bl	80134f2 <USBD_CoreGetEPAdd>
 8011196:	4603      	mov	r3, r0
 8011198:	461a      	mov	r2, r3
 801119a:	4b18      	ldr	r3, [pc, #96]	; (80111fc <MSC_BOT_SendCSW+0xb0>)
 801119c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d024      	beq.n	80111ee <MSC_BOT_SendCSW+0xa2>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80111aa:	461a      	mov	r2, r3
 80111ac:	4b14      	ldr	r3, [pc, #80]	; (8011200 <MSC_BOT_SendCSW+0xb4>)
 80111ae:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80111b6:	461a      	mov	r2, r3
 80111b8:	78fb      	ldrb	r3, [r7, #3]
 80111ba:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2200      	movs	r2, #0
 80111c2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80111c4:	4b0c      	ldr	r3, [pc, #48]	; (80111f8 <MSC_BOT_SendCSW+0xac>)
 80111c6:	7819      	ldrb	r1, [r3, #0]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f248 0230 	movw	r2, #32816	; 0x8030
 80111ce:	441a      	add	r2, r3
 80111d0:	230d      	movs	r3, #13
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f008 f800 	bl	80191d8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80111d8:	4b08      	ldr	r3, [pc, #32]	; (80111fc <MSC_BOT_SendCSW+0xb0>)
 80111da:	7819      	ldrb	r1, [r3, #0]
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f248 0210 	movw	r2, #32784	; 0x8010
 80111e2:	441a      	add	r2, r3
 80111e4:	231f      	movs	r3, #31
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f008 f817 	bl	801921a <USBD_LL_PrepareReceive>
 80111ec:	e000      	b.n	80111f0 <MSC_BOT_SendCSW+0xa4>
    return;
 80111ee:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80111f0:	3710      	adds	r7, #16
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	2400014c 	.word	0x2400014c
 80111fc:	2400014d 	.word	0x2400014d
 8011200:	53425355 	.word	0x53425355

08011204 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	33b2      	adds	r3, #178	; 0xb2
 8011216:	009b      	lsls	r3, r3, #2
 8011218:	4413      	add	r3, r2
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011224:	b2db      	uxtb	r3, r3
 8011226:	2202      	movs	r2, #2
 8011228:	2180      	movs	r1, #128	; 0x80
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f002 f961 	bl	80134f2 <USBD_CoreGetEPAdd>
 8011230:	4603      	mov	r3, r0
 8011232:	461a      	mov	r2, r3
 8011234:	4b21      	ldr	r3, [pc, #132]	; (80112bc <MSC_BOT_Abort+0xb8>)
 8011236:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801123e:	b2db      	uxtb	r3, r3
 8011240:	2202      	movs	r2, #2
 8011242:	2100      	movs	r1, #0
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f002 f954 	bl	80134f2 <USBD_CoreGetEPAdd>
 801124a:	4603      	mov	r3, r0
 801124c:	461a      	mov	r2, r3
 801124e:	4b1c      	ldr	r3, [pc, #112]	; (80112c0 <MSC_BOT_Abort+0xbc>)
 8011250:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d02c      	beq.n	80112b2 <MSC_BOT_Abort+0xae>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801125e:	7f1b      	ldrb	r3, [r3, #28]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d10f      	bne.n	8011284 <MSC_BOT_Abort+0x80>
      (hmsc->cbw.dDataLength != 0U) &&
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801126a:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 801126c:	2b00      	cmp	r3, #0
 801126e:	d009      	beq.n	8011284 <MSC_BOT_Abort+0x80>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8011274:	2b00      	cmp	r3, #0
 8011276:	d105      	bne.n	8011284 <MSC_BOT_Abort+0x80>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011278:	4b11      	ldr	r3, [pc, #68]	; (80112c0 <MSC_BOT_Abort+0xbc>)
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	4619      	mov	r1, r3
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f007 ff21 	bl	80190c6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011284:	4b0d      	ldr	r3, [pc, #52]	; (80112bc <MSC_BOT_Abort+0xb8>)
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	4619      	mov	r1, r3
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f007 ff1b 	bl	80190c6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	7a5b      	ldrb	r3, [r3, #9]
 8011294:	2b02      	cmp	r3, #2
 8011296:	d10d      	bne.n	80112b4 <MSC_BOT_Abort+0xb0>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011298:	4b08      	ldr	r3, [pc, #32]	; (80112bc <MSC_BOT_Abort+0xb8>)
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	4619      	mov	r1, r3
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f007 ff11 	bl	80190c6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80112a4:	4b06      	ldr	r3, [pc, #24]	; (80112c0 <MSC_BOT_Abort+0xbc>)
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	4619      	mov	r1, r3
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f007 ff0b 	bl	80190c6 <USBD_LL_StallEP>
 80112b0:	e000      	b.n	80112b4 <MSC_BOT_Abort+0xb0>
    return;
 80112b2:	bf00      	nop
  }
}
 80112b4:	3710      	adds	r7, #16
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	bf00      	nop
 80112bc:	2400014c 	.word	0x2400014c
 80112c0:	2400014d 	.word	0x2400014d

080112c4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b084      	sub	sp, #16
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	460b      	mov	r3, r1
 80112ce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	33b2      	adds	r3, #178	; 0xb2
 80112da:	009b      	lsls	r3, r3, #2
 80112dc:	4413      	add	r3, r2
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	2202      	movs	r2, #2
 80112ec:	2180      	movs	r1, #128	; 0x80
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f002 f8ff 	bl	80134f2 <USBD_CoreGetEPAdd>
 80112f4:	4603      	mov	r3, r0
 80112f6:	461a      	mov	r2, r3
 80112f8:	4b1a      	ldr	r3, [pc, #104]	; (8011364 <MSC_BOT_CplClrFeature+0xa0>)
 80112fa:	701a      	strb	r2, [r3, #0]
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011302:	b2db      	uxtb	r3, r3
 8011304:	2202      	movs	r2, #2
 8011306:	2100      	movs	r1, #0
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f002 f8f2 	bl	80134f2 <USBD_CoreGetEPAdd>
 801130e:	4603      	mov	r3, r0
 8011310:	461a      	mov	r2, r3
 8011312:	4b15      	ldr	r3, [pc, #84]	; (8011368 <MSC_BOT_CplClrFeature+0xa4>)
 8011314:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d01d      	beq.n	8011358 <MSC_BOT_CplClrFeature+0x94>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	7a5b      	ldrb	r3, [r3, #9]
 8011320:	2b02      	cmp	r3, #2
 8011322:	d10c      	bne.n	801133e <MSC_BOT_CplClrFeature+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011324:	4b0f      	ldr	r3, [pc, #60]	; (8011364 <MSC_BOT_CplClrFeature+0xa0>)
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	4619      	mov	r1, r3
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f007 fecb 	bl	80190c6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011330:	4b0d      	ldr	r3, [pc, #52]	; (8011368 <MSC_BOT_CplClrFeature+0xa4>)
 8011332:	781b      	ldrb	r3, [r3, #0]
 8011334:	4619      	mov	r1, r3
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f007 fec5 	bl	80190c6 <USBD_LL_StallEP>
 801133c:	e00f      	b.n	801135e <MSC_BOT_CplClrFeature+0x9a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801133e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011342:	2b00      	cmp	r3, #0
 8011344:	da0a      	bge.n	801135c <MSC_BOT_CplClrFeature+0x98>
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	7a5b      	ldrb	r3, [r3, #9]
 801134a:	2b01      	cmp	r3, #1
 801134c:	d006      	beq.n	801135c <MSC_BOT_CplClrFeature+0x98>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801134e:	2101      	movs	r1, #1
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f7ff fefb 	bl	801114c <MSC_BOT_SendCSW>
 8011356:	e002      	b.n	801135e <MSC_BOT_CplClrFeature+0x9a>
    return;
 8011358:	bf00      	nop
 801135a:	e000      	b.n	801135e <MSC_BOT_CplClrFeature+0x9a>
  }
  else
  {
    return;
 801135c:	bf00      	nop
  }
}
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	2400014c 	.word	0x2400014c
 8011368:	2400014d 	.word	0x2400014d

0801136c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b086      	sub	sp, #24
 8011370:	af00      	add	r7, sp, #0
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	460b      	mov	r3, r1
 8011376:	607a      	str	r2, [r7, #4]
 8011378:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011380:	68fa      	ldr	r2, [r7, #12]
 8011382:	33b2      	adds	r3, #178	; 0xb2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d102      	bne.n	8011398 <SCSI_ProcessCmd+0x2c>
  {
    return -1;
 8011392:	f04f 33ff 	mov.w	r3, #4294967295
 8011396:	e167      	b.n	8011668 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	2baa      	cmp	r3, #170	; 0xaa
 801139e:	f000 8143 	beq.w	8011628 <SCSI_ProcessCmd+0x2bc>
 80113a2:	2baa      	cmp	r3, #170	; 0xaa
 80113a4:	f300 8152 	bgt.w	801164c <SCSI_ProcessCmd+0x2e0>
 80113a8:	2ba8      	cmp	r3, #168	; 0xa8
 80113aa:	f000 812b 	beq.w	8011604 <SCSI_ProcessCmd+0x298>
 80113ae:	2ba8      	cmp	r3, #168	; 0xa8
 80113b0:	f300 814c 	bgt.w	801164c <SCSI_ProcessCmd+0x2e0>
 80113b4:	2b5a      	cmp	r3, #90	; 0x5a
 80113b6:	f300 80bf 	bgt.w	8011538 <SCSI_ProcessCmd+0x1cc>
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	f2c0 8146 	blt.w	801164c <SCSI_ProcessCmd+0x2e0>
 80113c0:	2b5a      	cmp	r3, #90	; 0x5a
 80113c2:	f200 8143 	bhi.w	801164c <SCSI_ProcessCmd+0x2e0>
 80113c6:	a201      	add	r2, pc, #4	; (adr r2, 80113cc <SCSI_ProcessCmd+0x60>)
 80113c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113cc:	0801153f 	.word	0x0801153f
 80113d0:	0801164d 	.word	0x0801164d
 80113d4:	0801164d 	.word	0x0801164d
 80113d8:	08011551 	.word	0x08011551
 80113dc:	0801164d 	.word	0x0801164d
 80113e0:	0801164d 	.word	0x0801164d
 80113e4:	0801164d 	.word	0x0801164d
 80113e8:	0801164d 	.word	0x0801164d
 80113ec:	0801164d 	.word	0x0801164d
 80113f0:	0801164d 	.word	0x0801164d
 80113f4:	0801164d 	.word	0x0801164d
 80113f8:	0801164d 	.word	0x0801164d
 80113fc:	0801164d 	.word	0x0801164d
 8011400:	0801164d 	.word	0x0801164d
 8011404:	0801164d 	.word	0x0801164d
 8011408:	0801164d 	.word	0x0801164d
 801140c:	0801164d 	.word	0x0801164d
 8011410:	0801164d 	.word	0x0801164d
 8011414:	08011563 	.word	0x08011563
 8011418:	0801164d 	.word	0x0801164d
 801141c:	0801164d 	.word	0x0801164d
 8011420:	0801164d 	.word	0x0801164d
 8011424:	0801164d 	.word	0x0801164d
 8011428:	0801164d 	.word	0x0801164d
 801142c:	0801164d 	.word	0x0801164d
 8011430:	0801164d 	.word	0x0801164d
 8011434:	08011599 	.word	0x08011599
 8011438:	08011575 	.word	0x08011575
 801143c:	0801164d 	.word	0x0801164d
 8011440:	0801164d 	.word	0x0801164d
 8011444:	08011587 	.word	0x08011587
 8011448:	0801164d 	.word	0x0801164d
 801144c:	0801164d 	.word	0x0801164d
 8011450:	0801164d 	.word	0x0801164d
 8011454:	0801164d 	.word	0x0801164d
 8011458:	080115bd 	.word	0x080115bd
 801145c:	0801164d 	.word	0x0801164d
 8011460:	080115cf 	.word	0x080115cf
 8011464:	0801164d 	.word	0x0801164d
 8011468:	0801164d 	.word	0x0801164d
 801146c:	080115f3 	.word	0x080115f3
 8011470:	0801164d 	.word	0x0801164d
 8011474:	08011617 	.word	0x08011617
 8011478:	0801164d 	.word	0x0801164d
 801147c:	0801164d 	.word	0x0801164d
 8011480:	0801164d 	.word	0x0801164d
 8011484:	0801164d 	.word	0x0801164d
 8011488:	0801163b 	.word	0x0801163b
 801148c:	0801164d 	.word	0x0801164d
 8011490:	0801164d 	.word	0x0801164d
 8011494:	0801164d 	.word	0x0801164d
 8011498:	0801164d 	.word	0x0801164d
 801149c:	0801164d 	.word	0x0801164d
 80114a0:	0801164d 	.word	0x0801164d
 80114a4:	0801164d 	.word	0x0801164d
 80114a8:	0801164d 	.word	0x0801164d
 80114ac:	0801164d 	.word	0x0801164d
 80114b0:	0801164d 	.word	0x0801164d
 80114b4:	0801164d 	.word	0x0801164d
 80114b8:	0801164d 	.word	0x0801164d
 80114bc:	0801164d 	.word	0x0801164d
 80114c0:	0801164d 	.word	0x0801164d
 80114c4:	0801164d 	.word	0x0801164d
 80114c8:	0801164d 	.word	0x0801164d
 80114cc:	0801164d 	.word	0x0801164d
 80114d0:	0801164d 	.word	0x0801164d
 80114d4:	0801164d 	.word	0x0801164d
 80114d8:	0801164d 	.word	0x0801164d
 80114dc:	0801164d 	.word	0x0801164d
 80114e0:	0801164d 	.word	0x0801164d
 80114e4:	0801164d 	.word	0x0801164d
 80114e8:	0801164d 	.word	0x0801164d
 80114ec:	0801164d 	.word	0x0801164d
 80114f0:	0801164d 	.word	0x0801164d
 80114f4:	0801164d 	.word	0x0801164d
 80114f8:	0801164d 	.word	0x0801164d
 80114fc:	0801164d 	.word	0x0801164d
 8011500:	0801164d 	.word	0x0801164d
 8011504:	0801164d 	.word	0x0801164d
 8011508:	0801164d 	.word	0x0801164d
 801150c:	0801164d 	.word	0x0801164d
 8011510:	0801164d 	.word	0x0801164d
 8011514:	0801164d 	.word	0x0801164d
 8011518:	0801164d 	.word	0x0801164d
 801151c:	0801164d 	.word	0x0801164d
 8011520:	0801164d 	.word	0x0801164d
 8011524:	0801164d 	.word	0x0801164d
 8011528:	0801164d 	.word	0x0801164d
 801152c:	0801164d 	.word	0x0801164d
 8011530:	0801164d 	.word	0x0801164d
 8011534:	080115ab 	.word	0x080115ab
 8011538:	2b9e      	cmp	r3, #158	; 0x9e
 801153a:	d051      	beq.n	80115e0 <SCSI_ProcessCmd+0x274>
 801153c:	e086      	b.n	801164c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801153e:	7afb      	ldrb	r3, [r7, #11]
 8011540:	687a      	ldr	r2, [r7, #4]
 8011542:	4619      	mov	r1, r3
 8011544:	68f8      	ldr	r0, [r7, #12]
 8011546:	f000 f893 	bl	8011670 <SCSI_TestUnitReady>
 801154a:	4603      	mov	r3, r0
 801154c:	75fb      	strb	r3, [r7, #23]
      break;
 801154e:	e089      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8011550:	7afb      	ldrb	r3, [r7, #11]
 8011552:	687a      	ldr	r2, [r7, #4]
 8011554:	4619      	mov	r1, r3
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f000 fb9e 	bl	8011c98 <SCSI_RequestSense>
 801155c:	4603      	mov	r3, r0
 801155e:	75fb      	strb	r3, [r7, #23]
      break;
 8011560:	e080      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8011562:	7afb      	ldrb	r3, [r7, #11]
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	4619      	mov	r1, r3
 8011568:	68f8      	ldr	r0, [r7, #12]
 801156a:	f000 f8df 	bl	801172c <SCSI_Inquiry>
 801156e:	4603      	mov	r3, r0
 8011570:	75fb      	strb	r3, [r7, #23]
      break;
 8011572:	e077      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8011574:	7afb      	ldrb	r3, [r7, #11]
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	4619      	mov	r1, r3
 801157a:	68f8      	ldr	r0, [r7, #12]
 801157c:	f000 fc8e 	bl	8011e9c <SCSI_StartStopUnit>
 8011580:	4603      	mov	r3, r0
 8011582:	75fb      	strb	r3, [r7, #23]
      break;
 8011584:	e06e      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8011586:	7afb      	ldrb	r3, [r7, #11]
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	4619      	mov	r1, r3
 801158c:	68f8      	ldr	r0, [r7, #12]
 801158e:	f000 fce3 	bl	8011f58 <SCSI_AllowPreventRemovable>
 8011592:	4603      	mov	r3, r0
 8011594:	75fb      	strb	r3, [r7, #23]
      break;
 8011596:	e065      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8011598:	7afb      	ldrb	r3, [r7, #11]
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	4619      	mov	r1, r3
 801159e:	68f8      	ldr	r0, [r7, #12]
 80115a0:	f000 fb1a 	bl	8011bd8 <SCSI_ModeSense6>
 80115a4:	4603      	mov	r3, r0
 80115a6:	75fb      	strb	r3, [r7, #23]
      break;
 80115a8:	e05c      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80115aa:	7afb      	ldrb	r3, [r7, #11]
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	4619      	mov	r1, r3
 80115b0:	68f8      	ldr	r0, [r7, #12]
 80115b2:	f000 fb41 	bl	8011c38 <SCSI_ModeSense10>
 80115b6:	4603      	mov	r3, r0
 80115b8:	75fb      	strb	r3, [r7, #23]
      break;
 80115ba:	e053      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80115bc:	7afb      	ldrb	r3, [r7, #11]
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	4619      	mov	r1, r3
 80115c2:	68f8      	ldr	r0, [r7, #12]
 80115c4:	f000 fa8a 	bl	8011adc <SCSI_ReadFormatCapacity>
 80115c8:	4603      	mov	r3, r0
 80115ca:	75fb      	strb	r3, [r7, #23]
      break;
 80115cc:	e04a      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80115ce:	7afb      	ldrb	r3, [r7, #11]
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	4619      	mov	r1, r3
 80115d4:	68f8      	ldr	r0, [r7, #12]
 80115d6:	f000 f92b 	bl	8011830 <SCSI_ReadCapacity10>
 80115da:	4603      	mov	r3, r0
 80115dc:	75fb      	strb	r3, [r7, #23]
      break;
 80115de:	e041      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80115e0:	7afb      	ldrb	r3, [r7, #11]
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	4619      	mov	r1, r3
 80115e6:	68f8      	ldr	r0, [r7, #12]
 80115e8:	f000 f9b2 	bl	8011950 <SCSI_ReadCapacity16>
 80115ec:	4603      	mov	r3, r0
 80115ee:	75fb      	strb	r3, [r7, #23]
      break;
 80115f0:	e038      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80115f2:	7afb      	ldrb	r3, [r7, #11]
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	4619      	mov	r1, r3
 80115f8:	68f8      	ldr	r0, [r7, #12]
 80115fa:	f000 fcdf 	bl	8011fbc <SCSI_Read10>
 80115fe:	4603      	mov	r3, r0
 8011600:	75fb      	strb	r3, [r7, #23]
      break;
 8011602:	e02f      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8011604:	7afb      	ldrb	r3, [r7, #11]
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	4619      	mov	r1, r3
 801160a:	68f8      	ldr	r0, [r7, #12]
 801160c:	f000 fd8e 	bl	801212c <SCSI_Read12>
 8011610:	4603      	mov	r3, r0
 8011612:	75fb      	strb	r3, [r7, #23]
      break;
 8011614:	e026      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8011616:	7afb      	ldrb	r3, [r7, #11]
 8011618:	687a      	ldr	r2, [r7, #4]
 801161a:	4619      	mov	r1, r3
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	f000 fe47 	bl	80122b0 <SCSI_Write10>
 8011622:	4603      	mov	r3, r0
 8011624:	75fb      	strb	r3, [r7, #23]
      break;
 8011626:	e01d      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8011628:	7afb      	ldrb	r3, [r7, #11]
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	4619      	mov	r1, r3
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f000 ff30 	bl	8012494 <SCSI_Write12>
 8011634:	4603      	mov	r3, r0
 8011636:	75fb      	strb	r3, [r7, #23]
      break;
 8011638:	e014      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801163a:	7afb      	ldrb	r3, [r7, #11]
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	4619      	mov	r1, r3
 8011640:	68f8      	ldr	r0, [r7, #12]
 8011642:	f001 f829 	bl	8012698 <SCSI_Verify10>
 8011646:	4603      	mov	r3, r0
 8011648:	75fb      	strb	r3, [r7, #23]
      break;
 801164a:	e00b      	b.n	8011664 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801164c:	7af9      	ldrb	r1, [r7, #11]
 801164e:	2320      	movs	r3, #32
 8011650:	2205      	movs	r2, #5
 8011652:	68f8      	ldr	r0, [r7, #12]
 8011654:	f000 fbc0 	bl	8011dd8 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	2202      	movs	r2, #2
 801165c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801165e:	23ff      	movs	r3, #255	; 0xff
 8011660:	75fb      	strb	r3, [r7, #23]
      break;
 8011662:	bf00      	nop
  }

  return ret;
 8011664:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011668:	4618      	mov	r0, r3
 801166a:	3718      	adds	r7, #24
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b086      	sub	sp, #24
 8011674:	af00      	add	r7, sp, #0
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	460b      	mov	r3, r1
 801167a:	607a      	str	r2, [r7, #4]
 801167c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011684:	68fa      	ldr	r2, [r7, #12]
 8011686:	33b2      	adds	r3, #178	; 0xb2
 8011688:	009b      	lsls	r3, r3, #2
 801168a:	4413      	add	r3, r2
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d102      	bne.n	801169c <SCSI_TestUnitReady+0x2c>
  {
    return -1;
 8011696:	f04f 33ff 	mov.w	r3, #4294967295
 801169a:	e043      	b.n	8011724 <SCSI_TestUnitReady+0xb4>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80116a2:	699b      	ldr	r3, [r3, #24]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d00b      	beq.n	80116c0 <SCSI_TestUnitReady+0x50>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80116ae:	7f59      	ldrb	r1, [r3, #29]
 80116b0:	2320      	movs	r3, #32
 80116b2:	2205      	movs	r2, #5
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f000 fb8f 	bl	8011dd8 <SCSI_SenseCode>

    return -1;
 80116ba:	f04f 33ff 	mov.w	r3, #4294967295
 80116be:	e031      	b.n	8011724 <SCSI_TestUnitReady+0xb4>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80116c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80116ca:	2b02      	cmp	r3, #2
 80116cc:	d10b      	bne.n	80116e6 <SCSI_TestUnitReady+0x76>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80116ce:	7af9      	ldrb	r1, [r7, #11]
 80116d0:	233a      	movs	r3, #58	; 0x3a
 80116d2:	2202      	movs	r2, #2
 80116d4:	68f8      	ldr	r0, [r7, #12]
 80116d6:	f000 fb7f 	bl	8011dd8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	2205      	movs	r2, #5
 80116de:	721a      	strb	r2, [r3, #8]
    return -1;
 80116e0:	f04f 33ff 	mov.w	r3, #4294967295
 80116e4:	e01e      	b.n	8011724 <SCSI_TestUnitReady+0xb4>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	33b6      	adds	r3, #182	; 0xb6
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	4413      	add	r3, r2
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	689b      	ldr	r3, [r3, #8]
 80116f8:	7afa      	ldrb	r2, [r7, #11]
 80116fa:	4610      	mov	r0, r2
 80116fc:	4798      	blx	r3
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d00b      	beq.n	801171c <SCSI_TestUnitReady+0xac>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011704:	7af9      	ldrb	r1, [r7, #11]
 8011706:	233a      	movs	r3, #58	; 0x3a
 8011708:	2202      	movs	r2, #2
 801170a:	68f8      	ldr	r0, [r7, #12]
 801170c:	f000 fb64 	bl	8011dd8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	2205      	movs	r2, #5
 8011714:	721a      	strb	r2, [r3, #8]

    return -1;
 8011716:	f04f 33ff 	mov.w	r3, #4294967295
 801171a:	e003      	b.n	8011724 <SCSI_TestUnitReady+0xb4>
  }
  hmsc->bot_data_length = 0U;
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	2200      	movs	r2, #0
 8011720:	60da      	str	r2, [r3, #12]

  return 0;
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	3718      	adds	r7, #24
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b088      	sub	sp, #32
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	460b      	mov	r3, r1
 8011736:	607a      	str	r2, [r7, #4]
 8011738:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011740:	68fa      	ldr	r2, [r7, #12]
 8011742:	33b2      	adds	r3, #178	; 0xb2
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	4413      	add	r3, r2
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801174c:	69bb      	ldr	r3, [r7, #24]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d102      	bne.n	8011758 <SCSI_Inquiry+0x2c>
  {
    return -1;
 8011752:	f04f 33ff 	mov.w	r3, #4294967295
 8011756:	e062      	b.n	801181e <SCSI_Inquiry+0xf2>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011758:	69bb      	ldr	r3, [r7, #24]
 801175a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801175e:	699b      	ldr	r3, [r3, #24]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d10b      	bne.n	801177c <SCSI_Inquiry+0x50>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011764:	69bb      	ldr	r3, [r7, #24]
 8011766:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801176a:	7f59      	ldrb	r1, [r3, #29]
 801176c:	2320      	movs	r3, #32
 801176e:	2205      	movs	r2, #5
 8011770:	68f8      	ldr	r0, [r7, #12]
 8011772:	f000 fb31 	bl	8011dd8 <SCSI_SenseCode>
    return -1;
 8011776:	f04f 33ff 	mov.w	r3, #4294967295
 801177a:	e050      	b.n	801181e <SCSI_Inquiry+0xf2>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	3301      	adds	r3, #1
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	f003 0301 	and.w	r3, r3, #1
 8011786:	2b00      	cmp	r3, #0
 8011788:	d021      	beq.n	80117ce <SCSI_Inquiry+0xa2>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	3302      	adds	r3, #2
 801178e:	781b      	ldrb	r3, [r3, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d105      	bne.n	80117a0 <SCSI_Inquiry+0x74>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8011794:	2206      	movs	r2, #6
 8011796:	4924      	ldr	r1, [pc, #144]	; (8011828 <SCSI_Inquiry+0xfc>)
 8011798:	69b8      	ldr	r0, [r7, #24]
 801179a:	f001 f947 	bl	8012a2c <SCSI_UpdateBotData>
 801179e:	e03d      	b.n	801181c <SCSI_Inquiry+0xf0>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3302      	adds	r3, #2
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	2b80      	cmp	r3, #128	; 0x80
 80117a8:	d105      	bne.n	80117b6 <SCSI_Inquiry+0x8a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80117aa:	2208      	movs	r2, #8
 80117ac:	491f      	ldr	r1, [pc, #124]	; (801182c <SCSI_Inquiry+0x100>)
 80117ae:	69b8      	ldr	r0, [r7, #24]
 80117b0:	f001 f93c 	bl	8012a2c <SCSI_UpdateBotData>
 80117b4:	e032      	b.n	801181c <SCSI_Inquiry+0xf0>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80117b6:	69bb      	ldr	r3, [r7, #24]
 80117b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80117bc:	7f59      	ldrb	r1, [r3, #29]
 80117be:	2324      	movs	r3, #36	; 0x24
 80117c0:	2205      	movs	r2, #5
 80117c2:	68f8      	ldr	r0, [r7, #12]
 80117c4:	f000 fb08 	bl	8011dd8 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80117c8:	f04f 33ff 	mov.w	r3, #4294967295
 80117cc:	e027      	b.n	801181e <SCSI_Inquiry+0xf2>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80117d4:	68fa      	ldr	r2, [r7, #12]
 80117d6:	33b6      	adds	r3, #182	; 0xb6
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	4413      	add	r3, r2
 80117dc:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80117de:	69d9      	ldr	r1, [r3, #28]
 80117e0:	7afa      	ldrb	r2, [r7, #11]
 80117e2:	4613      	mov	r3, r2
 80117e4:	00db      	lsls	r3, r3, #3
 80117e6:	4413      	add	r3, r2
 80117e8:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80117ea:	440b      	add	r3, r1
 80117ec:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	3304      	adds	r3, #4
 80117f2:	781b      	ldrb	r3, [r3, #0]
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	3305      	adds	r3, #5
 80117f8:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	3304      	adds	r3, #4
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	b29b      	uxth	r3, r3
 8011802:	8bfa      	ldrh	r2, [r7, #30]
 8011804:	429a      	cmp	r2, r3
 8011806:	d303      	bcc.n	8011810 <SCSI_Inquiry+0xe4>
    {
      len = params[4];
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	3304      	adds	r3, #4
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8011810:	8bfb      	ldrh	r3, [r7, #30]
 8011812:	461a      	mov	r2, r3
 8011814:	6979      	ldr	r1, [r7, #20]
 8011816:	69b8      	ldr	r0, [r7, #24]
 8011818:	f001 f908 	bl	8012a2c <SCSI_UpdateBotData>
  }

  return 0;
 801181c:	2300      	movs	r3, #0
}
 801181e:	4618      	mov	r0, r3
 8011820:	3720      	adds	r7, #32
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	24000150 	.word	0x24000150
 801182c:	24000158 	.word	0x24000158

08011830 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011830:	b590      	push	{r4, r7, lr}
 8011832:	b087      	sub	sp, #28
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	460b      	mov	r3, r1
 801183a:	607a      	str	r2, [r7, #4]
 801183c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011844:	68fa      	ldr	r2, [r7, #12]
 8011846:	33b2      	adds	r3, #178	; 0xb2
 8011848:	009b      	lsls	r3, r3, #2
 801184a:	4413      	add	r3, r2
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d102      	bne.n	801185c <SCSI_ReadCapacity10+0x2c>
  {
    return -1;
 8011856:	f04f 33ff 	mov.w	r3, #4294967295
 801185a:	e075      	b.n	8011948 <SCSI_ReadCapacity10+0x118>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011862:	68fa      	ldr	r2, [r7, #12]
 8011864:	33b6      	adds	r3, #182	; 0xb6
 8011866:	009b      	lsls	r3, r3, #2
 8011868:	4413      	add	r3, r2
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	685c      	ldr	r4, [r3, #4]
 801186e:	697a      	ldr	r2, [r7, #20]
 8011870:	f248 0368 	movw	r3, #32872	; 0x8068
 8011874:	4413      	add	r3, r2
 8011876:	6979      	ldr	r1, [r7, #20]
 8011878:	f248 0264 	movw	r2, #32868	; 0x8064
 801187c:	440a      	add	r2, r1
 801187e:	7af8      	ldrb	r0, [r7, #11]
 8011880:	4619      	mov	r1, r3
 8011882:	47a0      	blx	r4
 8011884:	4603      	mov	r3, r0
 8011886:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011888:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d106      	bne.n	801189e <SCSI_ReadCapacity10+0x6e>
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011896:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801189a:	2b02      	cmp	r3, #2
 801189c:	d108      	bne.n	80118b0 <SCSI_ReadCapacity10+0x80>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801189e:	7af9      	ldrb	r1, [r7, #11]
 80118a0:	233a      	movs	r3, #58	; 0x3a
 80118a2:	2202      	movs	r2, #2
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	f000 fa97 	bl	8011dd8 <SCSI_SenseCode>
    return -1;
 80118aa:	f04f 33ff 	mov.w	r3, #4294967295
 80118ae:	e04b      	b.n	8011948 <SCSI_ReadCapacity10+0x118>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80118b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118b8:	3b01      	subs	r3, #1
 80118ba:	0e1b      	lsrs	r3, r3, #24
 80118bc:	b2da      	uxtb	r2, r3
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80118c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118ca:	3b01      	subs	r3, #1
 80118cc:	0c1b      	lsrs	r3, r3, #16
 80118ce:	b2da      	uxtb	r2, r3
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80118da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118dc:	3b01      	subs	r3, #1
 80118de:	0a1b      	lsrs	r3, r3, #8
 80118e0:	b2da      	uxtb	r2, r3
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80118ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118ee:	b2db      	uxtb	r3, r3
 80118f0:	3b01      	subs	r3, #1
 80118f2:	b2da      	uxtb	r2, r3
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80118fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011902:	161b      	asrs	r3, r3, #24
 8011904:	b2da      	uxtb	r2, r3
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011910:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011914:	141b      	asrs	r3, r3, #16
 8011916:	b2da      	uxtb	r2, r3
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801191c:	697b      	ldr	r3, [r7, #20]
 801191e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011922:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011926:	0a1b      	lsrs	r3, r3, #8
 8011928:	b29b      	uxth	r3, r3
 801192a:	b2da      	uxtb	r2, r3
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011936:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801193a:	b2da      	uxtb	r2, r3
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	2208      	movs	r2, #8
 8011944:	60da      	str	r2, [r3, #12]

  return 0;
 8011946:	2300      	movs	r3, #0

}
 8011948:	4618      	mov	r0, r3
 801194a:	371c      	adds	r7, #28
 801194c:	46bd      	mov	sp, r7
 801194e:	bd90      	pop	{r4, r7, pc}

08011950 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011950:	b590      	push	{r4, r7, lr}
 8011952:	b089      	sub	sp, #36	; 0x24
 8011954:	af00      	add	r7, sp, #0
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	460b      	mov	r3, r1
 801195a:	607a      	str	r2, [r7, #4]
 801195c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011964:	68fa      	ldr	r2, [r7, #12]
 8011966:	33b2      	adds	r3, #178	; 0xb2
 8011968:	009b      	lsls	r3, r3, #2
 801196a:	4413      	add	r3, r2
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d102      	bne.n	801197c <SCSI_ReadCapacity16+0x2c>
  {
    return -1;
 8011976:	f04f 33ff 	mov.w	r3, #4294967295
 801197a:	e0ab      	b.n	8011ad4 <SCSI_ReadCapacity16+0x184>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011982:	68fa      	ldr	r2, [r7, #12]
 8011984:	33b6      	adds	r3, #182	; 0xb6
 8011986:	009b      	lsls	r3, r3, #2
 8011988:	4413      	add	r3, r2
 801198a:	685b      	ldr	r3, [r3, #4]
 801198c:	685c      	ldr	r4, [r3, #4]
 801198e:	69ba      	ldr	r2, [r7, #24]
 8011990:	f248 0368 	movw	r3, #32872	; 0x8068
 8011994:	4413      	add	r3, r2
 8011996:	69b9      	ldr	r1, [r7, #24]
 8011998:	f248 0264 	movw	r2, #32868	; 0x8064
 801199c:	440a      	add	r2, r1
 801199e:	7af8      	ldrb	r0, [r7, #11]
 80119a0:	4619      	mov	r1, r3
 80119a2:	47a0      	blx	r4
 80119a4:	4603      	mov	r3, r0
 80119a6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80119a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d106      	bne.n	80119be <SCSI_ReadCapacity16+0x6e>
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80119b6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80119ba:	2b02      	cmp	r3, #2
 80119bc:	d108      	bne.n	80119d0 <SCSI_ReadCapacity16+0x80>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80119be:	7af9      	ldrb	r1, [r7, #11]
 80119c0:	233a      	movs	r3, #58	; 0x3a
 80119c2:	2202      	movs	r2, #2
 80119c4:	68f8      	ldr	r0, [r7, #12]
 80119c6:	f000 fa07 	bl	8011dd8 <SCSI_SenseCode>
    return -1;
 80119ca:	f04f 33ff 	mov.w	r3, #4294967295
 80119ce:	e081      	b.n	8011ad4 <SCSI_ReadCapacity16+0x184>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	330a      	adds	r3, #10
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	330b      	adds	r3, #11
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80119e0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	330c      	adds	r3, #12
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80119ea:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80119ec:	687a      	ldr	r2, [r7, #4]
 80119ee:	320d      	adds	r2, #13
 80119f0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80119f2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80119f4:	69bb      	ldr	r3, [r7, #24]
 80119f6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80119f8:	2300      	movs	r3, #0
 80119fa:	61fb      	str	r3, [r7, #28]
 80119fc:	e008      	b.n	8011a10 <SCSI_ReadCapacity16+0xc0>
  {
    hmsc->bot_data[idx] = 0U;
 80119fe:	69ba      	ldr	r2, [r7, #24]
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	4413      	add	r3, r2
 8011a04:	3310      	adds	r3, #16
 8011a06:	2200      	movs	r2, #0
 8011a08:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011a0a:	69fb      	ldr	r3, [r7, #28]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	61fb      	str	r3, [r7, #28]
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	68db      	ldr	r3, [r3, #12]
 8011a14:	69fa      	ldr	r2, [r7, #28]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d3f1      	bcc.n	80119fe <SCSI_ReadCapacity16+0xae>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8011a1a:	69bb      	ldr	r3, [r7, #24]
 8011a1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a22:	3b01      	subs	r3, #1
 8011a24:	0e1b      	lsrs	r3, r3, #24
 8011a26:	b2da      	uxtb	r2, r3
 8011a28:	69bb      	ldr	r3, [r7, #24]
 8011a2a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011a2c:	69bb      	ldr	r3, [r7, #24]
 8011a2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a34:	3b01      	subs	r3, #1
 8011a36:	0c1b      	lsrs	r3, r3, #16
 8011a38:	b2da      	uxtb	r2, r3
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a46:	3b01      	subs	r3, #1
 8011a48:	0a1b      	lsrs	r3, r3, #8
 8011a4a:	b2da      	uxtb	r2, r3
 8011a4c:	69bb      	ldr	r3, [r7, #24]
 8011a4e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011a50:	69bb      	ldr	r3, [r7, #24]
 8011a52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a58:	b2db      	uxtb	r3, r3
 8011a5a:	3b01      	subs	r3, #1
 8011a5c:	b2da      	uxtb	r2, r3
 8011a5e:	69bb      	ldr	r3, [r7, #24]
 8011a60:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a6c:	161b      	asrs	r3, r3, #24
 8011a6e:	b2da      	uxtb	r2, r3
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8011a74:	69bb      	ldr	r3, [r7, #24]
 8011a76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a7e:	141b      	asrs	r3, r3, #16
 8011a80:	b2da      	uxtb	r2, r3
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8011a86:	69bb      	ldr	r3, [r7, #24]
 8011a88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011a8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a90:	0a1b      	lsrs	r3, r3, #8
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	b2da      	uxtb	r2, r3
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8011a9a:	69bb      	ldr	r3, [r7, #24]
 8011a9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011aa0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011aa4:	b2da      	uxtb	r2, r3
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	330a      	adds	r3, #10
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	330b      	adds	r3, #11
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011aba:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	330c      	adds	r3, #12
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8011ac4:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8011ac6:	687a      	ldr	r2, [r7, #4]
 8011ac8:	320d      	adds	r2, #13
 8011aca:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8011acc:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011ace:	69bb      	ldr	r3, [r7, #24]
 8011ad0:	60da      	str	r2, [r3, #12]

  return 0;
 8011ad2:	2300      	movs	r3, #0
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3724      	adds	r7, #36	; 0x24
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd90      	pop	{r4, r7, pc}

08011adc <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b088      	sub	sp, #32
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	607a      	str	r2, [r7, #4]
 8011ae8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011af0:	68fa      	ldr	r2, [r7, #12]
 8011af2:	33b2      	adds	r3, #178	; 0xb2
 8011af4:	009b      	lsls	r3, r3, #2
 8011af6:	4413      	add	r3, r2
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011afc:	69bb      	ldr	r3, [r7, #24]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d102      	bne.n	8011b08 <SCSI_ReadFormatCapacity+0x2c>
  {
    return -1;
 8011b02:	f04f 33ff 	mov.w	r3, #4294967295
 8011b06:	e063      	b.n	8011bd0 <SCSI_ReadFormatCapacity+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011b0e:	68fa      	ldr	r2, [r7, #12]
 8011b10:	33b6      	adds	r3, #182	; 0xb6
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	4413      	add	r3, r2
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	f107 0214 	add.w	r2, r7, #20
 8011b1e:	f107 0110 	add.w	r1, r7, #16
 8011b22:	7af8      	ldrb	r0, [r7, #11]
 8011b24:	4798      	blx	r3
 8011b26:	4603      	mov	r3, r0
 8011b28:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d106      	bne.n	8011b40 <SCSI_ReadFormatCapacity+0x64>
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011b38:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8011b3c:	2b02      	cmp	r3, #2
 8011b3e:	d108      	bne.n	8011b52 <SCSI_ReadFormatCapacity+0x76>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011b40:	7af9      	ldrb	r1, [r7, #11]
 8011b42:	233a      	movs	r3, #58	; 0x3a
 8011b44:	2202      	movs	r2, #2
 8011b46:	68f8      	ldr	r0, [r7, #12]
 8011b48:	f000 f946 	bl	8011dd8 <SCSI_SenseCode>
    return -1;
 8011b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b50:	e03e      	b.n	8011bd0 <SCSI_ReadFormatCapacity+0xf4>
  }

  for (i = 0U; i < 12U ; i++)
 8011b52:	2300      	movs	r3, #0
 8011b54:	83fb      	strh	r3, [r7, #30]
 8011b56:	e007      	b.n	8011b68 <SCSI_ReadFormatCapacity+0x8c>
  {
    hmsc->bot_data[i] = 0U;
 8011b58:	8bfb      	ldrh	r3, [r7, #30]
 8011b5a:	69ba      	ldr	r2, [r7, #24]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	2200      	movs	r2, #0
 8011b60:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8011b62:	8bfb      	ldrh	r3, [r7, #30]
 8011b64:	3301      	adds	r3, #1
 8011b66:	83fb      	strh	r3, [r7, #30]
 8011b68:	8bfb      	ldrh	r3, [r7, #30]
 8011b6a:	2b0b      	cmp	r3, #11
 8011b6c:	d9f4      	bls.n	8011b58 <SCSI_ReadFormatCapacity+0x7c>
  }

  hmsc->bot_data[3] = 0x08U;
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	2208      	movs	r2, #8
 8011b72:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	3b01      	subs	r3, #1
 8011b78:	0e1b      	lsrs	r3, r3, #24
 8011b7a:	b2da      	uxtb	r2, r3
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	3b01      	subs	r3, #1
 8011b84:	0c1b      	lsrs	r3, r3, #16
 8011b86:	b2da      	uxtb	r2, r3
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	3b01      	subs	r3, #1
 8011b90:	0a1b      	lsrs	r3, r3, #8
 8011b92:	b2da      	uxtb	r2, r3
 8011b94:	69bb      	ldr	r3, [r7, #24]
 8011b96:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	b2db      	uxtb	r3, r3
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	b2da      	uxtb	r2, r3
 8011ba0:	69bb      	ldr	r3, [r7, #24]
 8011ba2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8011ba4:	69bb      	ldr	r3, [r7, #24]
 8011ba6:	2202      	movs	r2, #2
 8011ba8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8011baa:	8abb      	ldrh	r3, [r7, #20]
 8011bac:	141b      	asrs	r3, r3, #16
 8011bae:	b2da      	uxtb	r2, r3
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8011bb4:	8abb      	ldrh	r3, [r7, #20]
 8011bb6:	0a1b      	lsrs	r3, r3, #8
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	b2da      	uxtb	r2, r3
 8011bbc:	69bb      	ldr	r3, [r7, #24]
 8011bbe:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8011bc0:	8abb      	ldrh	r3, [r7, #20]
 8011bc2:	b2da      	uxtb	r2, r3
 8011bc4:	69bb      	ldr	r3, [r7, #24]
 8011bc6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8011bc8:	69bb      	ldr	r3, [r7, #24]
 8011bca:	220c      	movs	r2, #12
 8011bcc:	60da      	str	r2, [r3, #12]

  return 0;
 8011bce:	2300      	movs	r3, #0
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3720      	adds	r7, #32
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b086      	sub	sp, #24
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	460b      	mov	r3, r1
 8011be2:	607a      	str	r2, [r7, #4]
 8011be4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	33b2      	adds	r3, #178	; 0xb2
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	4413      	add	r3, r2
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8011bf8:	2317      	movs	r3, #23
 8011bfa:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d102      	bne.n	8011c08 <SCSI_ModeSense6+0x30>
  {
    return -1;
 8011c02:	f04f 33ff 	mov.w	r3, #4294967295
 8011c06:	e011      	b.n	8011c2c <SCSI_ModeSense6+0x54>
  }

  if (params[4] <= len)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	3304      	adds	r3, #4
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	8afa      	ldrh	r2, [r7, #22]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d303      	bcc.n	8011c1e <SCSI_ModeSense6+0x46>
  {
    len = params[4];
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	3304      	adds	r3, #4
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8011c1e:	8afb      	ldrh	r3, [r7, #22]
 8011c20:	461a      	mov	r2, r3
 8011c22:	4904      	ldr	r1, [pc, #16]	; (8011c34 <SCSI_ModeSense6+0x5c>)
 8011c24:	6938      	ldr	r0, [r7, #16]
 8011c26:	f000 ff01 	bl	8012a2c <SCSI_UpdateBotData>

  return 0;
 8011c2a:	2300      	movs	r3, #0
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3718      	adds	r7, #24
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	24000160 	.word	0x24000160

08011c38 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b086      	sub	sp, #24
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	460b      	mov	r3, r1
 8011c42:	607a      	str	r2, [r7, #4]
 8011c44:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	33b2      	adds	r3, #178	; 0xb2
 8011c50:	009b      	lsls	r3, r3, #2
 8011c52:	4413      	add	r3, r2
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8011c58:	231b      	movs	r3, #27
 8011c5a:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d102      	bne.n	8011c68 <SCSI_ModeSense10+0x30>
  {
    return -1;
 8011c62:	f04f 33ff 	mov.w	r3, #4294967295
 8011c66:	e011      	b.n	8011c8c <SCSI_ModeSense10+0x54>
  }

  if (params[8] <= len)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	3308      	adds	r3, #8
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	b29b      	uxth	r3, r3
 8011c70:	8afa      	ldrh	r2, [r7, #22]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d303      	bcc.n	8011c7e <SCSI_ModeSense10+0x46>
  {
    len = params[8];
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	3308      	adds	r3, #8
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8011c7e:	8afb      	ldrh	r3, [r7, #22]
 8011c80:	461a      	mov	r2, r3
 8011c82:	4904      	ldr	r1, [pc, #16]	; (8011c94 <SCSI_ModeSense10+0x5c>)
 8011c84:	6938      	ldr	r0, [r7, #16]
 8011c86:	f000 fed1 	bl	8012a2c <SCSI_UpdateBotData>

  return 0;
 8011c8a:	2300      	movs	r3, #0
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3718      	adds	r7, #24
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	24000178 	.word	0x24000178

08011c98 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b086      	sub	sp, #24
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	607a      	str	r2, [r7, #4]
 8011ca4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011cac:	68fa      	ldr	r2, [r7, #12]
 8011cae:	33b2      	adds	r3, #178	; 0xb2
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	4413      	add	r3, r2
 8011cb4:	685b      	ldr	r3, [r3, #4]
 8011cb6:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d102      	bne.n	8011cc4 <SCSI_RequestSense+0x2c>
  {
    return -1;
 8011cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8011cc2:	e085      	b.n	8011dd0 <SCSI_RequestSense+0x138>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011cca:	699b      	ldr	r3, [r3, #24]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d10b      	bne.n	8011ce8 <SCSI_RequestSense+0x50>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011cd6:	7f59      	ldrb	r1, [r3, #29]
 8011cd8:	2320      	movs	r3, #32
 8011cda:	2205      	movs	r2, #5
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f000 f87b 	bl	8011dd8 <SCSI_SenseCode>
    return -1;
 8011ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ce6:	e073      	b.n	8011dd0 <SCSI_RequestSense+0x138>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8011ce8:	2300      	movs	r3, #0
 8011cea:	75fb      	strb	r3, [r7, #23]
 8011cec:	e007      	b.n	8011cfe <SCSI_RequestSense+0x66>
  {
    hmsc->bot_data[i] = 0U;
 8011cee:	7dfb      	ldrb	r3, [r7, #23]
 8011cf0:	693a      	ldr	r2, [r7, #16]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8011cf8:	7dfb      	ldrb	r3, [r7, #23]
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	75fb      	strb	r3, [r7, #23]
 8011cfe:	7dfb      	ldrb	r3, [r7, #23]
 8011d00:	2b11      	cmp	r3, #17
 8011d02:	d9f4      	bls.n	8011cee <SCSI_RequestSense+0x56>
  }

  hmsc->bot_data[0] = 0x70U;
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	2270      	movs	r2, #112	; 0x70
 8011d08:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	220c      	movs	r2, #12
 8011d0e:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d16:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d20:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d044      	beq.n	8011db2 <SCSI_RequestSense+0x11a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d2e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011d32:	4619      	mov	r1, r3
 8011d34:	693a      	ldr	r2, [r7, #16]
 8011d36:	f241 0308 	movw	r3, #4104	; 0x1008
 8011d3a:	440b      	add	r3, r1
 8011d3c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d4a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011d4e:	4619      	mov	r1, r3
 8011d50:	693a      	ldr	r2, [r7, #16]
 8011d52:	f241 0308 	movw	r3, #4104	; 0x1008
 8011d56:	440b      	add	r3, r1
 8011d58:	00db      	lsls	r3, r3, #3
 8011d5a:	4413      	add	r3, r2
 8011d5c:	791a      	ldrb	r2, [r3, #4]
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d68:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	693a      	ldr	r2, [r7, #16]
 8011d70:	f241 0308 	movw	r3, #4104	; 0x1008
 8011d74:	440b      	add	r3, r1
 8011d76:	00db      	lsls	r3, r3, #3
 8011d78:	4413      	add	r3, r2
 8011d7a:	795a      	ldrb	r2, [r3, #5]
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d86:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	b2da      	uxtb	r2, r3
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011d9e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011da2:	2b04      	cmp	r3, #4
 8011da4:	d105      	bne.n	8011db2 <SCSI_RequestSense+0x11a>
    {
      hmsc->scsi_sense_head = 0U;
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011dac:	2200      	movs	r2, #0
 8011dae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	2212      	movs	r2, #18
 8011db6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	3304      	adds	r3, #4
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	2b12      	cmp	r3, #18
 8011dc0:	d805      	bhi.n	8011dce <SCSI_RequestSense+0x136>
  {
    hmsc->bot_data_length = params[4];
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	3304      	adds	r3, #4
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	461a      	mov	r2, r3
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8011dce:	2300      	movs	r3, #0
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3718      	adds	r7, #24
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}

08011dd8 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b085      	sub	sp, #20
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	4608      	mov	r0, r1
 8011de2:	4611      	mov	r1, r2
 8011de4:	461a      	mov	r2, r3
 8011de6:	4603      	mov	r3, r0
 8011de8:	70fb      	strb	r3, [r7, #3]
 8011dea:	460b      	mov	r3, r1
 8011dec:	70bb      	strb	r3, [r7, #2]
 8011dee:	4613      	mov	r3, r2
 8011df0:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	33b2      	adds	r3, #178	; 0xb2
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	4413      	add	r3, r2
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d042      	beq.n	8011e90 <SCSI_SenseCode+0xb8>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e10:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011e14:	4619      	mov	r1, r3
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	f241 0308 	movw	r3, #4104	; 0x1008
 8011e1c:	440b      	add	r3, r1
 8011e1e:	78b9      	ldrb	r1, [r7, #2]
 8011e20:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e2a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011e2e:	4619      	mov	r1, r3
 8011e30:	68fa      	ldr	r2, [r7, #12]
 8011e32:	f241 0308 	movw	r3, #4104	; 0x1008
 8011e36:	440b      	add	r3, r1
 8011e38:	00db      	lsls	r3, r3, #3
 8011e3a:	4413      	add	r3, r2
 8011e3c:	787a      	ldrb	r2, [r7, #1]
 8011e3e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e46:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	68fa      	ldr	r2, [r7, #12]
 8011e4e:	f241 0308 	movw	r3, #4104	; 0x1008
 8011e52:	440b      	add	r3, r1
 8011e54:	00db      	lsls	r3, r3, #3
 8011e56:	4413      	add	r3, r2
 8011e58:	2200      	movs	r2, #0
 8011e5a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e62:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011e66:	3301      	adds	r3, #1
 8011e68:	b2da      	uxtb	r2, r3
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e70:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e7a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011e7e:	2b04      	cmp	r3, #4
 8011e80:	d107      	bne.n	8011e92 <SCSI_SenseCode+0xba>
  {
    hmsc->scsi_sense_tail = 0U;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e88:	2200      	movs	r2, #0
 8011e8a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8011e8e:	e000      	b.n	8011e92 <SCSI_SenseCode+0xba>
    return;
 8011e90:	bf00      	nop
  }
}
 8011e92:	3714      	adds	r7, #20
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr

08011e9c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b086      	sub	sp, #24
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	607a      	str	r2, [r7, #4]
 8011ea8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011eb0:	68fa      	ldr	r2, [r7, #12]
 8011eb2:	33b2      	adds	r3, #178	; 0xb2
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	4413      	add	r3, r2
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d102      	bne.n	8011ec8 <SCSI_StartStopUnit+0x2c>
  {
    return -1;
 8011ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ec6:	e043      	b.n	8011f50 <SCSI_StartStopUnit+0xb4>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011ece:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8011ed2:	2b01      	cmp	r3, #1
 8011ed4:	d10f      	bne.n	8011ef6 <SCSI_StartStopUnit+0x5a>
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	3304      	adds	r3, #4
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	f003 0303 	and.w	r3, r3, #3
 8011ee0:	2b02      	cmp	r3, #2
 8011ee2:	d108      	bne.n	8011ef6 <SCSI_StartStopUnit+0x5a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011ee4:	7af9      	ldrb	r1, [r7, #11]
 8011ee6:	2324      	movs	r3, #36	; 0x24
 8011ee8:	2205      	movs	r2, #5
 8011eea:	68f8      	ldr	r0, [r7, #12]
 8011eec:	f7ff ff74 	bl	8011dd8 <SCSI_SenseCode>

    return -1;
 8011ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ef4:	e02c      	b.n	8011f50 <SCSI_StartStopUnit+0xb4>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	3304      	adds	r3, #4
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	f003 0303 	and.w	r3, r3, #3
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d106      	bne.n	8011f12 <SCSI_StartStopUnit+0x76>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8011f10:	e01a      	b.n	8011f48 <SCSI_StartStopUnit+0xac>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	3304      	adds	r3, #4
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	f003 0303 	and.w	r3, r3, #3
 8011f1c:	2b02      	cmp	r3, #2
 8011f1e:	d106      	bne.n	8011f2e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011f26:	2202      	movs	r2, #2
 8011f28:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8011f2c:	e00c      	b.n	8011f48 <SCSI_StartStopUnit+0xac>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	3304      	adds	r3, #4
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	f003 0303 	and.w	r3, r3, #3
 8011f38:	2b03      	cmp	r3, #3
 8011f3a:	d105      	bne.n	8011f48 <SCSI_StartStopUnit+0xac>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011f42:	2200      	movs	r2, #0
 8011f44:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	60da      	str	r2, [r3, #12]

  return 0;
 8011f4e:	2300      	movs	r3, #0
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3718      	adds	r7, #24
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b087      	sub	sp, #28
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	460b      	mov	r3, r1
 8011f62:	607a      	str	r2, [r7, #4]
 8011f64:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011f6c:	68fa      	ldr	r2, [r7, #12]
 8011f6e:	33b2      	adds	r3, #178	; 0xb2
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	4413      	add	r3, r2
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d102      	bne.n	8011f84 <SCSI_AllowPreventRemovable+0x2c>
  {
    return -1;
 8011f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f82:	e015      	b.n	8011fb0 <SCSI_AllowPreventRemovable+0x58>
  }

  if (params[4] == 0U)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	3304      	adds	r3, #4
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d106      	bne.n	8011f9c <SCSI_AllowPreventRemovable+0x44>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011f94:	2200      	movs	r2, #0
 8011f96:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8011f9a:	e005      	b.n	8011fa8 <SCSI_AllowPreventRemovable+0x50>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	2200      	movs	r2, #0
 8011fac:	60da      	str	r2, [r3, #12]

  return 0;
 8011fae:	2300      	movs	r3, #0
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	371c      	adds	r7, #28
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b086      	sub	sp, #24
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	607a      	str	r2, [r7, #4]
 8011fc8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8011fd0:	68fa      	ldr	r2, [r7, #12]
 8011fd2:	33b2      	adds	r3, #178	; 0xb2
 8011fd4:	009b      	lsls	r3, r3, #2
 8011fd6:	4413      	add	r3, r2
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d102      	bne.n	8011fe8 <SCSI_Read10+0x2c>
  {
    return -1;
 8011fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fe6:	e09d      	b.n	8012124 <SCSI_Read10+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	7a1b      	ldrb	r3, [r3, #8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	f040 808f 	bne.w	8012110 <SCSI_Read10+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011ff8:	7f1b      	ldrb	r3, [r3, #28]
 8011ffa:	b25b      	sxtb	r3, r3
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	db0b      	blt.n	8012018 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012006:	7f59      	ldrb	r1, [r3, #29]
 8012008:	2320      	movs	r3, #32
 801200a:	2205      	movs	r2, #5
 801200c:	68f8      	ldr	r0, [r7, #12]
 801200e:	f7ff fee3 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 8012012:	f04f 33ff 	mov.w	r3, #4294967295
 8012016:	e085      	b.n	8012124 <SCSI_Read10+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801201e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8012022:	2b02      	cmp	r3, #2
 8012024:	d108      	bne.n	8012038 <SCSI_Read10+0x7c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012026:	7af9      	ldrb	r1, [r7, #11]
 8012028:	233a      	movs	r3, #58	; 0x3a
 801202a:	2202      	movs	r2, #2
 801202c:	68f8      	ldr	r0, [r7, #12]
 801202e:	f7ff fed3 	bl	8011dd8 <SCSI_SenseCode>

      return -1;
 8012032:	f04f 33ff 	mov.w	r3, #4294967295
 8012036:	e075      	b.n	8012124 <SCSI_Read10+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801203e:	68fa      	ldr	r2, [r7, #12]
 8012040:	33b6      	adds	r3, #182	; 0xb6
 8012042:	009b      	lsls	r3, r3, #2
 8012044:	4413      	add	r3, r2
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	689b      	ldr	r3, [r3, #8]
 801204a:	7afa      	ldrb	r2, [r7, #11]
 801204c:	4610      	mov	r0, r2
 801204e:	4798      	blx	r3
 8012050:	4603      	mov	r3, r0
 8012052:	2b00      	cmp	r3, #0
 8012054:	d008      	beq.n	8012068 <SCSI_Read10+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012056:	7af9      	ldrb	r1, [r7, #11]
 8012058:	233a      	movs	r3, #58	; 0x3a
 801205a:	2202      	movs	r2, #2
 801205c:	68f8      	ldr	r0, [r7, #12]
 801205e:	f7ff febb 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 8012062:	f04f 33ff 	mov.w	r3, #4294967295
 8012066:	e05d      	b.n	8012124 <SCSI_Read10+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	3302      	adds	r3, #2
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	3303      	adds	r3, #3
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012078:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	3304      	adds	r3, #4
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012082:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012084:	687a      	ldr	r2, [r7, #4]
 8012086:	3205      	adds	r2, #5
 8012088:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801208a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801208c:	697a      	ldr	r2, [r7, #20]
 801208e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012092:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	3307      	adds	r3, #7
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	021b      	lsls	r3, r3, #8
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	3208      	adds	r2, #8
 80120a0:	7812      	ldrb	r2, [r2, #0]
 80120a2:	4313      	orrs	r3, r2
 80120a4:	697a      	ldr	r2, [r7, #20]
 80120a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80120aa:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80120b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80120ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120bc:	7af9      	ldrb	r1, [r7, #11]
 80120be:	68f8      	ldr	r0, [r7, #12]
 80120c0:	f000 fb2a 	bl	8012718 <SCSI_CheckAddressRange>
 80120c4:	4603      	mov	r3, r0
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	da02      	bge.n	80120d0 <SCSI_Read10+0x114>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80120ca:	f04f 33ff 	mov.w	r3, #4294967295
 80120ce:	e029      	b.n	8012124 <SCSI_Read10+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80120d6:	699a      	ldr	r2, [r3, #24]
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80120de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120e0:	6979      	ldr	r1, [r7, #20]
 80120e2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80120e6:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 80120ea:	fb01 f303 	mul.w	r3, r1, r3
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d00b      	beq.n	801210a <SCSI_Read10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80120f8:	7f59      	ldrb	r1, [r3, #29]
 80120fa:	2320      	movs	r3, #32
 80120fc:	2205      	movs	r2, #5
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f7ff fe6a 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 8012104:	f04f 33ff 	mov.w	r3, #4294967295
 8012108:	e00c      	b.n	8012124 <SCSI_Read10+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	2202      	movs	r2, #2
 801210e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012116:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8012118:	7afb      	ldrb	r3, [r7, #11]
 801211a:	4619      	mov	r1, r3
 801211c:	68f8      	ldr	r0, [r7, #12]
 801211e:	f000 fb29 	bl	8012774 <SCSI_ProcessRead>
 8012122:	4603      	mov	r3, r0
}
 8012124:	4618      	mov	r0, r3
 8012126:	3718      	adds	r7, #24
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b086      	sub	sp, #24
 8012130:	af00      	add	r7, sp, #0
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	460b      	mov	r3, r1
 8012136:	607a      	str	r2, [r7, #4]
 8012138:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012140:	68fa      	ldr	r2, [r7, #12]
 8012142:	33b2      	adds	r3, #178	; 0xb2
 8012144:	009b      	lsls	r3, r3, #2
 8012146:	4413      	add	r3, r2
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d102      	bne.n	8012158 <SCSI_Read12+0x2c>
  {
    return -1;
 8012152:	f04f 33ff 	mov.w	r3, #4294967295
 8012156:	e0a7      	b.n	80122a8 <SCSI_Read12+0x17c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	7a1b      	ldrb	r3, [r3, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	f040 8099 	bne.w	8012294 <SCSI_Read12+0x168>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012168:	7f1b      	ldrb	r3, [r3, #28]
 801216a:	b25b      	sxtb	r3, r3
 801216c:	2b00      	cmp	r3, #0
 801216e:	db0b      	blt.n	8012188 <SCSI_Read12+0x5c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012176:	7f59      	ldrb	r1, [r3, #29]
 8012178:	2320      	movs	r3, #32
 801217a:	2205      	movs	r2, #5
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f7ff fe2b 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 8012182:	f04f 33ff 	mov.w	r3, #4294967295
 8012186:	e08f      	b.n	80122a8 <SCSI_Read12+0x17c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801218e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8012192:	2b02      	cmp	r3, #2
 8012194:	d108      	bne.n	80121a8 <SCSI_Read12+0x7c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012196:	7af9      	ldrb	r1, [r7, #11]
 8012198:	233a      	movs	r3, #58	; 0x3a
 801219a:	2202      	movs	r2, #2
 801219c:	68f8      	ldr	r0, [r7, #12]
 801219e:	f7ff fe1b 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 80121a2:	f04f 33ff 	mov.w	r3, #4294967295
 80121a6:	e07f      	b.n	80122a8 <SCSI_Read12+0x17c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80121ae:	68fa      	ldr	r2, [r7, #12]
 80121b0:	33b6      	adds	r3, #182	; 0xb6
 80121b2:	009b      	lsls	r3, r3, #2
 80121b4:	4413      	add	r3, r2
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	689b      	ldr	r3, [r3, #8]
 80121ba:	7afa      	ldrb	r2, [r7, #11]
 80121bc:	4610      	mov	r0, r2
 80121be:	4798      	blx	r3
 80121c0:	4603      	mov	r3, r0
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d008      	beq.n	80121d8 <SCSI_Read12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80121c6:	7af9      	ldrb	r1, [r7, #11]
 80121c8:	233a      	movs	r3, #58	; 0x3a
 80121ca:	2202      	movs	r2, #2
 80121cc:	68f8      	ldr	r0, [r7, #12]
 80121ce:	f7ff fe03 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 80121d2:	f04f 33ff 	mov.w	r3, #4294967295
 80121d6:	e067      	b.n	80122a8 <SCSI_Read12+0x17c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	3302      	adds	r3, #2
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	3303      	adds	r3, #3
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80121e8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	3304      	adds	r3, #4
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80121f2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	3205      	adds	r2, #5
 80121f8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80121fa:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80121fc:	697a      	ldr	r2, [r7, #20]
 80121fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012202:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	3306      	adds	r3, #6
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	3307      	adds	r3, #7
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012214:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	3308      	adds	r3, #8
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801221e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	3209      	adds	r2, #9
 8012224:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012226:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012228:	697a      	ldr	r2, [r7, #20]
 801222a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801222e:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012236:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012240:	7af9      	ldrb	r1, [r7, #11]
 8012242:	68f8      	ldr	r0, [r7, #12]
 8012244:	f000 fa68 	bl	8012718 <SCSI_CheckAddressRange>
 8012248:	4603      	mov	r3, r0
 801224a:	2b00      	cmp	r3, #0
 801224c:	da02      	bge.n	8012254 <SCSI_Read12+0x128>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801224e:	f04f 33ff 	mov.w	r3, #4294967295
 8012252:	e029      	b.n	80122a8 <SCSI_Read12+0x17c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801225a:	699a      	ldr	r2, [r3, #24]
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012264:	6979      	ldr	r1, [r7, #20]
 8012266:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801226a:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 801226e:	fb01 f303 	mul.w	r3, r1, r3
 8012272:	429a      	cmp	r2, r3
 8012274:	d00b      	beq.n	801228e <SCSI_Read12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801227c:	7f59      	ldrb	r1, [r3, #29]
 801227e:	2320      	movs	r3, #32
 8012280:	2205      	movs	r2, #5
 8012282:	68f8      	ldr	r0, [r7, #12]
 8012284:	f7ff fda8 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 8012288:	f04f 33ff 	mov.w	r3, #4294967295
 801228c:	e00c      	b.n	80122a8 <SCSI_Read12+0x17c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	2202      	movs	r2, #2
 8012292:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801229a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801229c:	7afb      	ldrb	r3, [r7, #11]
 801229e:	4619      	mov	r1, r3
 80122a0:	68f8      	ldr	r0, [r7, #12]
 80122a2:	f000 fa67 	bl	8012774 <SCSI_ProcessRead>
 80122a6:	4603      	mov	r3, r0
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3718      	adds	r7, #24
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b086      	sub	sp, #24
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	60f8      	str	r0, [r7, #12]
 80122b8:	460b      	mov	r3, r1
 80122ba:	607a      	str	r2, [r7, #4]
 80122bc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80122c4:	68fa      	ldr	r2, [r7, #12]
 80122c6:	33b2      	adds	r3, #178	; 0xb2
 80122c8:	009b      	lsls	r3, r3, #2
 80122ca:	4413      	add	r3, r2
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d102      	bne.n	80122dc <SCSI_Write10+0x2c>
  {
    return -1;
 80122d6:	f04f 33ff 	mov.w	r3, #4294967295
 80122da:	e0d4      	b.n	8012486 <SCSI_Write10+0x1d6>
  }

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	2202      	movs	r2, #2
 80122e6:	2100      	movs	r1, #0
 80122e8:	68f8      	ldr	r0, [r7, #12]
 80122ea:	f001 f902 	bl	80134f2 <USBD_CoreGetEPAdd>
 80122ee:	4603      	mov	r3, r0
 80122f0:	461a      	mov	r2, r3
 80122f2:	4b67      	ldr	r3, [pc, #412]	; (8012490 <SCSI_Write10+0x1e0>)
 80122f4:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	7a1b      	ldrb	r3, [r3, #8]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	f040 80bd 	bne.w	801247a <SCSI_Write10+0x1ca>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012306:	699b      	ldr	r3, [r3, #24]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d10b      	bne.n	8012324 <SCSI_Write10+0x74>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012312:	7f59      	ldrb	r1, [r3, #29]
 8012314:	2320      	movs	r3, #32
 8012316:	2205      	movs	r2, #5
 8012318:	68f8      	ldr	r0, [r7, #12]
 801231a:	f7ff fd5d 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 801231e:	f04f 33ff 	mov.w	r3, #4294967295
 8012322:	e0b0      	b.n	8012486 <SCSI_Write10+0x1d6>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801232a:	7f1b      	ldrb	r3, [r3, #28]
 801232c:	b25b      	sxtb	r3, r3
 801232e:	2b00      	cmp	r3, #0
 8012330:	da0b      	bge.n	801234a <SCSI_Write10+0x9a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012338:	7f59      	ldrb	r1, [r3, #29]
 801233a:	2320      	movs	r3, #32
 801233c:	2205      	movs	r2, #5
 801233e:	68f8      	ldr	r0, [r7, #12]
 8012340:	f7ff fd4a 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 8012344:	f04f 33ff 	mov.w	r3, #4294967295
 8012348:	e09d      	b.n	8012486 <SCSI_Write10+0x1d6>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012350:	68fa      	ldr	r2, [r7, #12]
 8012352:	33b6      	adds	r3, #182	; 0xb6
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	4413      	add	r3, r2
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	7afa      	ldrb	r2, [r7, #11]
 801235e:	4610      	mov	r0, r2
 8012360:	4798      	blx	r3
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d008      	beq.n	801237a <SCSI_Write10+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012368:	7af9      	ldrb	r1, [r7, #11]
 801236a:	233a      	movs	r3, #58	; 0x3a
 801236c:	2202      	movs	r2, #2
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f7ff fd32 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 8012374:	f04f 33ff 	mov.w	r3, #4294967295
 8012378:	e085      	b.n	8012486 <SCSI_Write10+0x1d6>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012380:	68fa      	ldr	r2, [r7, #12]
 8012382:	33b6      	adds	r3, #182	; 0xb6
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	4413      	add	r3, r2
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	68db      	ldr	r3, [r3, #12]
 801238c:	7afa      	ldrb	r2, [r7, #11]
 801238e:	4610      	mov	r0, r2
 8012390:	4798      	blx	r3
 8012392:	4603      	mov	r3, r0
 8012394:	2b00      	cmp	r3, #0
 8012396:	d008      	beq.n	80123aa <SCSI_Write10+0xfa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012398:	7af9      	ldrb	r1, [r7, #11]
 801239a:	2327      	movs	r3, #39	; 0x27
 801239c:	2202      	movs	r2, #2
 801239e:	68f8      	ldr	r0, [r7, #12]
 80123a0:	f7ff fd1a 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 80123a4:	f04f 33ff 	mov.w	r3, #4294967295
 80123a8:	e06d      	b.n	8012486 <SCSI_Write10+0x1d6>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	3302      	adds	r3, #2
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	3303      	adds	r3, #3
 80123b6:	781b      	ldrb	r3, [r3, #0]
 80123b8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80123ba:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	3304      	adds	r3, #4
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80123c4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	3205      	adds	r2, #5
 80123ca:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80123cc:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80123ce:	697a      	ldr	r2, [r7, #20]
 80123d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80123d4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	3307      	adds	r3, #7
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	3208      	adds	r2, #8
 80123e2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80123e4:	4313      	orrs	r3, r2
 80123e6:	697a      	ldr	r2, [r7, #20]
 80123e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80123ec:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80123f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80123fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123fe:	7af9      	ldrb	r1, [r7, #11]
 8012400:	68f8      	ldr	r0, [r7, #12]
 8012402:	f000 f989 	bl	8012718 <SCSI_CheckAddressRange>
 8012406:	4603      	mov	r3, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	da02      	bge.n	8012412 <SCSI_Write10+0x162>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801240c:	f04f 33ff 	mov.w	r3, #4294967295
 8012410:	e039      	b.n	8012486 <SCSI_Write10+0x1d6>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801241a:	697a      	ldr	r2, [r7, #20]
 801241c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012420:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8012424:	fb02 f303 	mul.w	r3, r2, r3
 8012428:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012430:	699b      	ldr	r3, [r3, #24]
 8012432:	693a      	ldr	r2, [r7, #16]
 8012434:	429a      	cmp	r2, r3
 8012436:	d00b      	beq.n	8012450 <SCSI_Write10+0x1a0>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801243e:	7f59      	ldrb	r1, [r3, #29]
 8012440:	2320      	movs	r3, #32
 8012442:	2205      	movs	r2, #5
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f7ff fcc7 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 801244a:	f04f 33ff 	mov.w	r3, #4294967295
 801244e:	e01a      	b.n	8012486 <SCSI_Write10+0x1d6>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012456:	bf28      	it	cs
 8012458:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801245c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	2201      	movs	r2, #1
 8012462:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012464:	4b0a      	ldr	r3, [pc, #40]	; (8012490 <SCSI_Write10+0x1e0>)
 8012466:	7819      	ldrb	r1, [r3, #0]
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	f103 0210 	add.w	r2, r3, #16
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	68f8      	ldr	r0, [r7, #12]
 8012472:	f006 fed2 	bl	801921a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012476:	2300      	movs	r3, #0
 8012478:	e005      	b.n	8012486 <SCSI_Write10+0x1d6>
    return SCSI_ProcessWrite(pdev, lun);
 801247a:	7afb      	ldrb	r3, [r7, #11]
 801247c:	4619      	mov	r1, r3
 801247e:	68f8      	ldr	r0, [r7, #12]
 8012480:	f000 fa1c 	bl	80128bc <SCSI_ProcessWrite>
 8012484:	4603      	mov	r3, r0
}
 8012486:	4618      	mov	r0, r3
 8012488:	3718      	adds	r7, #24
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
 801248e:	bf00      	nop
 8012490:	2400014d 	.word	0x2400014d

08012494 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b086      	sub	sp, #24
 8012498:	af00      	add	r7, sp, #0
 801249a:	60f8      	str	r0, [r7, #12]
 801249c:	460b      	mov	r3, r1
 801249e:	607a      	str	r2, [r7, #4]
 80124a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80124a8:	68fa      	ldr	r2, [r7, #12]
 80124aa:	33b2      	adds	r3, #178	; 0xb2
 80124ac:	009b      	lsls	r3, r3, #2
 80124ae:	4413      	add	r3, r2
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d102      	bne.n	80124c0 <SCSI_Write12+0x2c>
  {
    return -1;
 80124ba:	f04f 33ff 	mov.w	r3, #4294967295
 80124be:	e0e4      	b.n	801268a <SCSI_Write12+0x1f6>
  }
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	2202      	movs	r2, #2
 80124ca:	2100      	movs	r1, #0
 80124cc:	68f8      	ldr	r0, [r7, #12]
 80124ce:	f001 f810 	bl	80134f2 <USBD_CoreGetEPAdd>
 80124d2:	4603      	mov	r3, r0
 80124d4:	461a      	mov	r2, r3
 80124d6:	4b6f      	ldr	r3, [pc, #444]	; (8012694 <SCSI_Write12+0x200>)
 80124d8:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	7a1b      	ldrb	r3, [r3, #8]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	f040 80cd 	bne.w	801267e <SCSI_Write12+0x1ea>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80124ea:	699b      	ldr	r3, [r3, #24]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d10b      	bne.n	8012508 <SCSI_Write12+0x74>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80124f6:	7f59      	ldrb	r1, [r3, #29]
 80124f8:	2320      	movs	r3, #32
 80124fa:	2205      	movs	r2, #5
 80124fc:	68f8      	ldr	r0, [r7, #12]
 80124fe:	f7ff fc6b 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 8012502:	f04f 33ff 	mov.w	r3, #4294967295
 8012506:	e0c0      	b.n	801268a <SCSI_Write12+0x1f6>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801250e:	7f1b      	ldrb	r3, [r3, #28]
 8012510:	b25b      	sxtb	r3, r3
 8012512:	2b00      	cmp	r3, #0
 8012514:	da0b      	bge.n	801252e <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801251c:	7f59      	ldrb	r1, [r3, #29]
 801251e:	2320      	movs	r3, #32
 8012520:	2205      	movs	r2, #5
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f7ff fc58 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 8012528:	f04f 33ff 	mov.w	r3, #4294967295
 801252c:	e0ad      	b.n	801268a <SCSI_Write12+0x1f6>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012534:	68fa      	ldr	r2, [r7, #12]
 8012536:	33b6      	adds	r3, #182	; 0xb6
 8012538:	009b      	lsls	r3, r3, #2
 801253a:	4413      	add	r3, r2
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	689b      	ldr	r3, [r3, #8]
 8012540:	7afa      	ldrb	r2, [r7, #11]
 8012542:	4610      	mov	r0, r2
 8012544:	4798      	blx	r3
 8012546:	4603      	mov	r3, r0
 8012548:	2b00      	cmp	r3, #0
 801254a:	d00b      	beq.n	8012564 <SCSI_Write12+0xd0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801254c:	7af9      	ldrb	r1, [r7, #11]
 801254e:	233a      	movs	r3, #58	; 0x3a
 8012550:	2202      	movs	r2, #2
 8012552:	68f8      	ldr	r0, [r7, #12]
 8012554:	f7ff fc40 	bl	8011dd8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	2205      	movs	r2, #5
 801255c:	721a      	strb	r2, [r3, #8]
      return -1;
 801255e:	f04f 33ff 	mov.w	r3, #4294967295
 8012562:	e092      	b.n	801268a <SCSI_Write12+0x1f6>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801256a:	68fa      	ldr	r2, [r7, #12]
 801256c:	33b6      	adds	r3, #182	; 0xb6
 801256e:	009b      	lsls	r3, r3, #2
 8012570:	4413      	add	r3, r2
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	7afa      	ldrb	r2, [r7, #11]
 8012578:	4610      	mov	r0, r2
 801257a:	4798      	blx	r3
 801257c:	4603      	mov	r3, r0
 801257e:	2b00      	cmp	r3, #0
 8012580:	d00b      	beq.n	801259a <SCSI_Write12+0x106>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012582:	7af9      	ldrb	r1, [r7, #11]
 8012584:	2327      	movs	r3, #39	; 0x27
 8012586:	2202      	movs	r2, #2
 8012588:	68f8      	ldr	r0, [r7, #12]
 801258a:	f7ff fc25 	bl	8011dd8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	2205      	movs	r2, #5
 8012592:	721a      	strb	r2, [r3, #8]
      return -1;
 8012594:	f04f 33ff 	mov.w	r3, #4294967295
 8012598:	e077      	b.n	801268a <SCSI_Write12+0x1f6>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	3302      	adds	r3, #2
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	3303      	adds	r3, #3
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80125aa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	3304      	adds	r3, #4
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80125b4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	3205      	adds	r2, #5
 80125ba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80125bc:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80125be:	697a      	ldr	r2, [r7, #20]
 80125c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80125c4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	3306      	adds	r3, #6
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	3307      	adds	r3, #7
 80125d2:	781b      	ldrb	r3, [r3, #0]
 80125d4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80125d6:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	3308      	adds	r3, #8
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80125e0:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	3209      	adds	r2, #9
 80125e6:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80125e8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80125ea:	697a      	ldr	r2, [r7, #20]
 80125ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80125f0:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80125f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012602:	7af9      	ldrb	r1, [r7, #11]
 8012604:	68f8      	ldr	r0, [r7, #12]
 8012606:	f000 f887 	bl	8012718 <SCSI_CheckAddressRange>
 801260a:	4603      	mov	r3, r0
 801260c:	2b00      	cmp	r3, #0
 801260e:	da02      	bge.n	8012616 <SCSI_Write12+0x182>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012610:	f04f 33ff 	mov.w	r3, #4294967295
 8012614:	e039      	b.n	801268a <SCSI_Write12+0x1f6>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801261e:	697a      	ldr	r2, [r7, #20]
 8012620:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012624:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8012628:	fb02 f303 	mul.w	r3, r2, r3
 801262c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012634:	699b      	ldr	r3, [r3, #24]
 8012636:	693a      	ldr	r2, [r7, #16]
 8012638:	429a      	cmp	r2, r3
 801263a:	d00b      	beq.n	8012654 <SCSI_Write12+0x1c0>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012642:	7f59      	ldrb	r1, [r3, #29]
 8012644:	2320      	movs	r3, #32
 8012646:	2205      	movs	r2, #5
 8012648:	68f8      	ldr	r0, [r7, #12]
 801264a:	f7ff fbc5 	bl	8011dd8 <SCSI_SenseCode>
      return -1;
 801264e:	f04f 33ff 	mov.w	r3, #4294967295
 8012652:	e01a      	b.n	801268a <SCSI_Write12+0x1f6>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012654:	693b      	ldr	r3, [r7, #16]
 8012656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801265a:	bf28      	it	cs
 801265c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8012660:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	2201      	movs	r2, #1
 8012666:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012668:	4b0a      	ldr	r3, [pc, #40]	; (8012694 <SCSI_Write12+0x200>)
 801266a:	7819      	ldrb	r1, [r3, #0]
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	f103 0210 	add.w	r2, r3, #16
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	68f8      	ldr	r0, [r7, #12]
 8012676:	f006 fdd0 	bl	801921a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801267a:	2300      	movs	r3, #0
 801267c:	e005      	b.n	801268a <SCSI_Write12+0x1f6>
    return SCSI_ProcessWrite(pdev, lun);
 801267e:	7afb      	ldrb	r3, [r7, #11]
 8012680:	4619      	mov	r1, r3
 8012682:	68f8      	ldr	r0, [r7, #12]
 8012684:	f000 f91a 	bl	80128bc <SCSI_ProcessWrite>
 8012688:	4603      	mov	r3, r0
}
 801268a:	4618      	mov	r0, r3
 801268c:	3718      	adds	r7, #24
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	2400014d 	.word	0x2400014d

08012698 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b086      	sub	sp, #24
 801269c:	af00      	add	r7, sp, #0
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	460b      	mov	r3, r1
 80126a2:	607a      	str	r2, [r7, #4]
 80126a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80126ac:	68fa      	ldr	r2, [r7, #12]
 80126ae:	33b2      	adds	r3, #178	; 0xb2
 80126b0:	009b      	lsls	r3, r3, #2
 80126b2:	4413      	add	r3, r2
 80126b4:	685b      	ldr	r3, [r3, #4]
 80126b6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d102      	bne.n	80126c4 <SCSI_Verify10+0x2c>
  {
    return -1;
 80126be:	f04f 33ff 	mov.w	r3, #4294967295
 80126c2:	e025      	b.n	8012710 <SCSI_Verify10+0x78>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	3301      	adds	r3, #1
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	f003 0302 	and.w	r3, r3, #2
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d008      	beq.n	80126e4 <SCSI_Verify10+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80126d2:	7af9      	ldrb	r1, [r7, #11]
 80126d4:	2324      	movs	r3, #36	; 0x24
 80126d6:	2205      	movs	r2, #5
 80126d8:	68f8      	ldr	r0, [r7, #12]
 80126da:	f7ff fb7d 	bl	8011dd8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80126de:	f04f 33ff 	mov.w	r3, #4294967295
 80126e2:	e015      	b.n	8012710 <SCSI_Verify10+0x78>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80126ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80126f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126f4:	7af9      	ldrb	r1, [r7, #11]
 80126f6:	68f8      	ldr	r0, [r7, #12]
 80126f8:	f000 f80e 	bl	8012718 <SCSI_CheckAddressRange>
 80126fc:	4603      	mov	r3, r0
 80126fe:	2b00      	cmp	r3, #0
 8012700:	da02      	bge.n	8012708 <SCSI_Verify10+0x70>
  {
    return -1; /* error */
 8012702:	f04f 33ff 	mov.w	r3, #4294967295
 8012706:	e003      	b.n	8012710 <SCSI_Verify10+0x78>
  }

  hmsc->bot_data_length = 0U;
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	2200      	movs	r2, #0
 801270c:	60da      	str	r2, [r3, #12]

  return 0;
 801270e:	2300      	movs	r3, #0
}
 8012710:	4618      	mov	r0, r3
 8012712:	3718      	adds	r7, #24
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}

08012718 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b086      	sub	sp, #24
 801271c:	af00      	add	r7, sp, #0
 801271e:	60f8      	str	r0, [r7, #12]
 8012720:	607a      	str	r2, [r7, #4]
 8012722:	603b      	str	r3, [r7, #0]
 8012724:	460b      	mov	r3, r1
 8012726:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801272e:	68fa      	ldr	r2, [r7, #12]
 8012730:	33b2      	adds	r3, #178	; 0xb2
 8012732:	009b      	lsls	r3, r3, #2
 8012734:	4413      	add	r3, r2
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d102      	bne.n	8012746 <SCSI_CheckAddressRange+0x2e>
  {
    return -1;
 8012740:	f04f 33ff 	mov.w	r3, #4294967295
 8012744:	e012      	b.n	801276c <SCSI_CheckAddressRange+0x54>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	441a      	add	r2, r3
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012754:	429a      	cmp	r2, r3
 8012756:	d908      	bls.n	801276a <SCSI_CheckAddressRange+0x52>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8012758:	7af9      	ldrb	r1, [r7, #11]
 801275a:	2321      	movs	r3, #33	; 0x21
 801275c:	2205      	movs	r2, #5
 801275e:	68f8      	ldr	r0, [r7, #12]
 8012760:	f7ff fb3a 	bl	8011dd8 <SCSI_SenseCode>
    return -1;
 8012764:	f04f 33ff 	mov.w	r3, #4294967295
 8012768:	e000      	b.n	801276c <SCSI_CheckAddressRange+0x54>
  }

  return 0;
 801276a:	2300      	movs	r3, #0
}
 801276c:	4618      	mov	r0, r3
 801276e:	3718      	adds	r7, #24
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012774:	b590      	push	{r4, r7, lr}
 8012776:	b085      	sub	sp, #20
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	460b      	mov	r3, r1
 801277e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	33b2      	adds	r3, #178	; 0xb2
 801278a:	009b      	lsls	r3, r3, #2
 801278c:	4413      	add	r3, r2
 801278e:	685b      	ldr	r3, [r3, #4]
 8012790:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d102      	bne.n	801279e <SCSI_ProcessRead+0x2a>
  {
    return -1;
 8012798:	f04f 33ff 	mov.w	r3, #4294967295
 801279c:	e088      	b.n	80128b0 <SCSI_ProcessRead+0x13c>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80127a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127a6:	68fa      	ldr	r2, [r7, #12]
 80127a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80127ac:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80127b0:	fb02 f303 	mul.w	r3, r2, r3
 80127b4:	60bb      	str	r3, [r7, #8]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	2202      	movs	r2, #2
 80127c0:	2180      	movs	r1, #128	; 0x80
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f000 fe95 	bl	80134f2 <USBD_CoreGetEPAdd>
 80127c8:	4603      	mov	r3, r0
 80127ca:	461a      	mov	r2, r3
 80127cc:	4b3a      	ldr	r3, [pc, #232]	; (80128b8 <SCSI_ProcessRead+0x144>)
 80127ce:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127d6:	bf28      	it	cs
 80127d8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80127dc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80127e4:	687a      	ldr	r2, [r7, #4]
 80127e6:	33b6      	adds	r3, #182	; 0xb6
 80127e8:	009b      	lsls	r3, r3, #2
 80127ea:	4413      	add	r3, r2
 80127ec:	685b      	ldr	r3, [r3, #4]
 80127ee:	691c      	ldr	r4, [r3, #16]
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	f103 0110 	add.w	r1, r3, #16
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80127fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012804:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012808:	4618      	mov	r0, r3
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8012810:	b29b      	uxth	r3, r3
 8012812:	78f8      	ldrb	r0, [r7, #3]
 8012814:	47a0      	blx	r4
 8012816:	4603      	mov	r3, r0
 8012818:	2b00      	cmp	r3, #0
 801281a:	da08      	bge.n	801282e <SCSI_ProcessRead+0xba>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801281c:	78f9      	ldrb	r1, [r7, #3]
 801281e:	2311      	movs	r3, #17
 8012820:	2204      	movs	r2, #4
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7ff fad8 	bl	8011dd8 <SCSI_SenseCode>
    return -1;
 8012828:	f04f 33ff 	mov.w	r3, #4294967295
 801282c:	e040      	b.n	80128b0 <SCSI_ProcessRead+0x13c>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 801282e:	4b22      	ldr	r3, [pc, #136]	; (80128b8 <SCSI_ProcessRead+0x144>)
 8012830:	7819      	ldrb	r1, [r3, #0]
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	f103 0210 	add.w	r2, r3, #16
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f006 fccc 	bl	80191d8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012846:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801284e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012852:	4619      	mov	r1, r3
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	fbb3 f3f1 	udiv	r3, r3, r1
 801285a:	4413      	add	r3, r2
 801285c:	68fa      	ldr	r2, [r7, #12]
 801285e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012862:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801286a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012872:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012876:	4619      	mov	r1, r3
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	fbb3 f3f1 	udiv	r3, r3, r1
 801287e:	1ad3      	subs	r3, r2, r3
 8012880:	68fa      	ldr	r2, [r7, #12]
 8012882:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012886:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801288e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	1ad3      	subs	r3, r2, r3
 8012894:	68fa      	ldr	r2, [r7, #12]
 8012896:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801289a:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80128a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d102      	bne.n	80128ae <SCSI_ProcessRead+0x13a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	2203      	movs	r2, #3
 80128ac:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80128ae:	2300      	movs	r3, #0
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3714      	adds	r7, #20
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd90      	pop	{r4, r7, pc}
 80128b8:	2400014c 	.word	0x2400014c

080128bc <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80128bc:	b590      	push	{r4, r7, lr}
 80128be:	b085      	sub	sp, #20
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	460b      	mov	r3, r1
 80128c6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	33b2      	adds	r3, #178	; 0xb2
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	4413      	add	r3, r2
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d102      	bne.n	80128e6 <SCSI_ProcessWrite+0x2a>
  {
    return -1;
 80128e0:	f04f 33ff 	mov.w	r3, #4294967295
 80128e4:	e09b      	b.n	8012a1e <SCSI_ProcessWrite+0x162>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80128ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128ee:	68fa      	ldr	r2, [r7, #12]
 80128f0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80128f4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80128f8:	fb02 f303 	mul.w	r3, r2, r3
 80128fc:	60bb      	str	r3, [r7, #8]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012904:	b2db      	uxtb	r3, r3
 8012906:	2202      	movs	r2, #2
 8012908:	2100      	movs	r1, #0
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f000 fdf1 	bl	80134f2 <USBD_CoreGetEPAdd>
 8012910:	4603      	mov	r3, r0
 8012912:	461a      	mov	r2, r3
 8012914:	4b44      	ldr	r3, [pc, #272]	; (8012a28 <SCSI_ProcessWrite+0x16c>)
 8012916:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801291e:	bf28      	it	cs
 8012920:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8012924:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 801292c:	687a      	ldr	r2, [r7, #4]
 801292e:	33b6      	adds	r3, #182	; 0xb6
 8012930:	009b      	lsls	r3, r3, #2
 8012932:	4413      	add	r3, r2
 8012934:	685b      	ldr	r3, [r3, #4]
 8012936:	695c      	ldr	r4, [r3, #20]
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	f103 0110 	add.w	r1, r3, #16
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012944:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801294c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012950:	4618      	mov	r0, r3
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8012958:	b29b      	uxth	r3, r3
 801295a:	78f8      	ldrb	r0, [r7, #3]
 801295c:	47a0      	blx	r4
 801295e:	4603      	mov	r3, r0
 8012960:	2b00      	cmp	r3, #0
 8012962:	da08      	bge.n	8012976 <SCSI_ProcessWrite+0xba>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8012964:	78f9      	ldrb	r1, [r7, #3]
 8012966:	2303      	movs	r3, #3
 8012968:	2204      	movs	r2, #4
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f7ff fa34 	bl	8011dd8 <SCSI_SenseCode>
    return -1;
 8012970:	f04f 33ff 	mov.w	r3, #4294967295
 8012974:	e053      	b.n	8012a1e <SCSI_ProcessWrite+0x162>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801297c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012984:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012988:	4619      	mov	r1, r3
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012990:	4413      	add	r3, r2
 8012992:	68fa      	ldr	r2, [r7, #12]
 8012994:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012998:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80129a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80129a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80129ac:	4619      	mov	r1, r3
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80129b4:	1ad3      	subs	r3, r2, r3
 80129b6:	68fa      	ldr	r2, [r7, #12]
 80129b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80129bc:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80129c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	1ad3      	subs	r3, r2, r3
 80129ca:	68fa      	ldr	r2, [r7, #12]
 80129cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80129d0:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80129d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d104      	bne.n	80129e8 <SCSI_ProcessWrite+0x12c>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80129de:	2100      	movs	r1, #0
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f7fe fbb3 	bl	801114c <MSC_BOT_SendCSW>
 80129e6:	e019      	b.n	8012a1c <SCSI_ProcessWrite+0x160>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80129ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129f0:	68fa      	ldr	r2, [r7, #12]
 80129f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80129f6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80129fa:	fb02 f303 	mul.w	r3, r2, r3
 80129fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a02:	bf28      	it	cs
 8012a04:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8012a08:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012a0a:	4b07      	ldr	r3, [pc, #28]	; (8012a28 <SCSI_ProcessWrite+0x16c>)
 8012a0c:	7819      	ldrb	r1, [r3, #0]
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	f103 0210 	add.w	r2, r3, #16
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f006 fbff 	bl	801921a <USBD_LL_PrepareReceive>
  }

  return 0;
 8012a1c:	2300      	movs	r3, #0
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3714      	adds	r7, #20
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd90      	pop	{r4, r7, pc}
 8012a26:	bf00      	nop
 8012a28:	2400014d 	.word	0x2400014d

08012a2c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	b087      	sub	sp, #28
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	60f8      	str	r0, [r7, #12]
 8012a34:	60b9      	str	r1, [r7, #8]
 8012a36:	4613      	mov	r3, r2
 8012a38:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8012a3a:	88fb      	ldrh	r3, [r7, #6]
 8012a3c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d102      	bne.n	8012a4a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8012a44:	f04f 33ff 	mov.w	r3, #4294967295
 8012a48:	e013      	b.n	8012a72 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8012a4a:	8afa      	ldrh	r2, [r7, #22]
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8012a50:	e00b      	b.n	8012a6a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8012a52:	8afb      	ldrh	r3, [r7, #22]
 8012a54:	3b01      	subs	r3, #1
 8012a56:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8012a58:	8afb      	ldrh	r3, [r7, #22]
 8012a5a:	68ba      	ldr	r2, [r7, #8]
 8012a5c:	441a      	add	r2, r3
 8012a5e:	8afb      	ldrh	r3, [r7, #22]
 8012a60:	7811      	ldrb	r1, [r2, #0]
 8012a62:	68fa      	ldr	r2, [r7, #12]
 8012a64:	4413      	add	r3, r2
 8012a66:	460a      	mov	r2, r1
 8012a68:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8012a6a:	8afb      	ldrh	r3, [r7, #22]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d1f0      	bne.n	8012a52 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8012a70:	2300      	movs	r3, #0
}
 8012a72:	4618      	mov	r0, r3
 8012a74:	371c      	adds	r7, #28
 8012a76:	46bd      	mov	sp, r7
 8012a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7c:	4770      	bx	lr

08012a7e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012a7e:	b580      	push	{r7, lr}
 8012a80:	b086      	sub	sp, #24
 8012a82:	af00      	add	r7, sp, #0
 8012a84:	60f8      	str	r0, [r7, #12]
 8012a86:	60b9      	str	r1, [r7, #8]
 8012a88:	4613      	mov	r3, r2
 8012a8a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d101      	bne.n	8012a96 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012a92:	2303      	movs	r3, #3
 8012a94:	e040      	b.n	8012b18 <USBD_Init+0x9a>
  }

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012a96:	2300      	movs	r3, #0
 8012a98:	617b      	str	r3, [r7, #20]
 8012a9a:	e022      	b.n	8012ae2 <USBD_Init+0x64>
  {
    /* Unlink previous class*/
    pdev->pClass[i] = NULL;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	697a      	ldr	r2, [r7, #20]
 8012aa0:	32ae      	adds	r2, #174	; 0xae
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pUserData[i] = NULL;
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	33b6      	adds	r3, #182	; 0xb6
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	4413      	add	r3, r2
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	605a      	str	r2, [r3, #4]

    /* Set class as inactive */
    pdev->tclasslist[i].Active = 0;
 8012ab6:	68f9      	ldr	r1, [r7, #12]
 8012ab8:	697a      	ldr	r2, [r7, #20]
 8012aba:	4613      	mov	r3, r2
 8012abc:	00db      	lsls	r3, r3, #3
 8012abe:	1a9b      	subs	r3, r3, r2
 8012ac0:	00db      	lsls	r3, r3, #3
 8012ac2:	440b      	add	r3, r1
 8012ac4:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8012ac8:	2200      	movs	r2, #0
 8012aca:	601a      	str	r2, [r3, #0]
    pdev->NumClasses = 0;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
    pdev->classId = 0;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	3301      	adds	r3, #1
 8012ae0:	617b      	str	r3, [r7, #20]
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	2b03      	cmp	r3, #3
 8012ae6:	d9d9      	bls.n	8012a9c <USBD_Init+0x1e>
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
  pdev->pUserData[0] = NULL;
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2200      	movs	r2, #0
 8012aec:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d003      	beq.n	8012afe <USBD_Init+0x80>
  {
    pdev->pDesc = pdesc;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	68ba      	ldr	r2, [r7, #8]
 8012afa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	2201      	movs	r2, #1
 8012b02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	79fa      	ldrb	r2, [r7, #7]
 8012b0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	f006 fa09 	bl	8018f24 <USBD_LL_Init>
 8012b12:	4603      	mov	r3, r0
 8012b14:	74fb      	strb	r3, [r7, #19]

  return ret;
 8012b16:	7cfb      	ldrb	r3, [r7, #19]
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3718      	adds	r7, #24
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}

08012b20 <USBD_RegisterClassComposite>:
  * @param  EpAddr: Endpoint Address handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClassComposite(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass,
                                                USBD_CompositeClassTypeDef classtype, uint8_t *EpAddr)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b086      	sub	sp, #24
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	60b9      	str	r1, [r7, #8]
 8012b2a:	603b      	str	r3, [r7, #0]
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012b30:	2300      	movs	r3, #0
 8012b32:	75fb      	strb	r3, [r7, #23]
  uint16_t len = 0U;
 8012b34:	2300      	movs	r3, #0
 8012b36:	82bb      	strh	r3, [r7, #20]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012b3e:	2b03      	cmp	r3, #3
 8012b40:	d835      	bhi.n	8012bae <USBD_RegisterClassComposite+0x8e>
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8012b48:	2b03      	cmp	r3, #3
 8012b4a:	d830      	bhi.n	8012bae <USBD_RegisterClassComposite+0x8e>
  {
    if ((uint32_t)pclass != 0U)
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d02b      	beq.n	8012baa <USBD_RegisterClassComposite+0x8a>
    {
      /* Link the class to the USB Device handle */
      pdev->pClass[pdev->classId] = pclass;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	32ae      	adds	r2, #174	; 0xae
 8012b5c:	68b9      	ldr	r1, [r7, #8]
 8012b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      ret = USBD_OK;
 8012b62:	2300      	movs	r3, #0
 8012b64:	75fb      	strb	r3, [r7, #23]

      pdev->tclasslist[pdev->classId].EpAdd = EpAddr;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8012b6c:	68f9      	ldr	r1, [r7, #12]
 8012b6e:	4613      	mov	r3, r2
 8012b70:	00db      	lsls	r3, r3, #3
 8012b72:	1a9b      	subs	r3, r3, r2
 8012b74:	00db      	lsls	r3, r3, #3
 8012b76:	440b      	add	r3, r1
 8012b78:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8012b7c:	683a      	ldr	r2, [r7, #0]
 8012b7e:	601a      	str	r2, [r3, #0]

      /* Call the composite class builder */
      (void)USBD_CMPSIT_AddClass(pdev, pclass, classtype, 0);
 8012b80:	79fa      	ldrb	r2, [r7, #7]
 8012b82:	2300      	movs	r3, #0
 8012b84:	68b9      	ldr	r1, [r7, #8]
 8012b86:	68f8      	ldr	r0, [r7, #12]
 8012b88:	f7fd fc16 	bl	80103b8 <USBD_CMPSIT_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8012b92:	1c5a      	adds	r2, r3, #1
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
      pdev->NumClasses ++;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8012ba0:	1c5a      	adds	r2, r3, #1
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 8012ba8:	e001      	b.n	8012bae <USBD_RegisterClassComposite+0x8e>
    else
    {
#if (USBD_DEBUG_LEVEL > 1U)
      USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
      ret = USBD_FAIL;
 8012baa:	2303      	movs	r3, #3
 8012bac:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (ret == USBD_OK)
 8012bae:	7dfb      	ldrb	r3, [r7, #23]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d109      	bne.n	8012bc8 <USBD_RegisterClassComposite+0xa8>
  {
    /* Get Device Configuration Descriptor */
#ifdef USE_USB_HS
    pdev->pConfDesc = USBD_CMPSIT.GetHSConfigDescriptor(&len);
#else /* Default USE_USB_FS */
    pdev->pConfDesc = USBD_CMPSIT.GetFSConfigDescriptor(&len);
 8012bb4:	4b07      	ldr	r3, [pc, #28]	; (8012bd4 <USBD_RegisterClassComposite+0xb4>)
 8012bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bb8:	f107 0214 	add.w	r2, r7, #20
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	4798      	blx	r3
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
#endif /* USE_USB_FS */
  }

  return ret;
 8012bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3718      	adds	r7, #24
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bd80      	pop	{r7, pc}
 8012bd2:	bf00      	nop
 8012bd4:	24000060 	.word	0x24000060

08012bd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2200      	movs	r2, #0
 8012be4:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f006 f9ed 	bl	8018fc8 <USBD_LL_Start>
 8012bee:	4603      	mov	r3, r0
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3708      	adds	r7, #8
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}

08012bf8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	b083      	sub	sp, #12
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012c00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	370c      	adds	r7, #12
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr

08012c0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b084      	sub	sp, #16
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
 8012c16:	460b      	mov	r3, r1
 8012c18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012c1e:	2300      	movs	r3, #0
 8012c20:	60bb      	str	r3, [r7, #8]
 8012c22:	e028      	b.n	8012c76 <USBD_SetClassConfig+0x68>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8012c24:	6879      	ldr	r1, [r7, #4]
 8012c26:	68ba      	ldr	r2, [r7, #8]
 8012c28:	4613      	mov	r3, r2
 8012c2a:	00db      	lsls	r3, r3, #3
 8012c2c:	1a9b      	subs	r3, r3, r2
 8012c2e:	00db      	lsls	r3, r3, #3
 8012c30:	440b      	add	r3, r1
 8012c32:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	d119      	bne.n	8012c70 <USBD_SetClassConfig+0x62>
    {
      if (pdev->pClass[i] != NULL)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	68ba      	ldr	r2, [r7, #8]
 8012c40:	32ae      	adds	r2, #174	; 0xae
 8012c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d012      	beq.n	8012c70 <USBD_SetClassConfig+0x62>
      {
        pdev->classId = i;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	68ba      	ldr	r2, [r7, #8]
 8012c4e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Set configuration  and Start the Class*/
        if (pdev->pClass[i]->Init(pdev, cfgidx) != 0U)
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	68ba      	ldr	r2, [r7, #8]
 8012c56:	32ae      	adds	r2, #174	; 0xae
 8012c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	78fa      	ldrb	r2, [r7, #3]
 8012c60:	4611      	mov	r1, r2
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	4798      	blx	r3
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d001      	beq.n	8012c70 <USBD_SetClassConfig+0x62>
        {
          ret = USBD_FAIL;
 8012c6c:	2303      	movs	r3, #3
 8012c6e:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	3301      	adds	r3, #1
 8012c74:	60bb      	str	r3, [r7, #8]
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	2b03      	cmp	r3, #3
 8012c7a:	d9d3      	bls.n	8012c24 <USBD_SetClassConfig+0x16>
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3710      	adds	r7, #16
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}

08012c86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c86:	b580      	push	{r7, lr}
 8012c88:	b084      	sub	sp, #16
 8012c8a:	af00      	add	r7, sp, #0
 8012c8c:	6078      	str	r0, [r7, #4]
 8012c8e:	460b      	mov	r3, r1
 8012c90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c92:	2300      	movs	r3, #0
 8012c94:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012c96:	2300      	movs	r3, #0
 8012c98:	60bb      	str	r3, [r7, #8]
 8012c9a:	e028      	b.n	8012cee <USBD_ClrClassConfig+0x68>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8012c9c:	6879      	ldr	r1, [r7, #4]
 8012c9e:	68ba      	ldr	r2, [r7, #8]
 8012ca0:	4613      	mov	r3, r2
 8012ca2:	00db      	lsls	r3, r3, #3
 8012ca4:	1a9b      	subs	r3, r3, r2
 8012ca6:	00db      	lsls	r3, r3, #3
 8012ca8:	440b      	add	r3, r1
 8012caa:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d119      	bne.n	8012ce8 <USBD_ClrClassConfig+0x62>
    {
      if (pdev->pClass[i] != NULL)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	68ba      	ldr	r2, [r7, #8]
 8012cb8:	32ae      	adds	r2, #174	; 0xae
 8012cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d012      	beq.n	8012ce8 <USBD_ClrClassConfig+0x62>
      {
        pdev->classId = i;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	68ba      	ldr	r2, [r7, #8]
 8012cc6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process */
        if (pdev->pClass[i]->DeInit(pdev, cfgidx) != 0U)
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	68ba      	ldr	r2, [r7, #8]
 8012cce:	32ae      	adds	r2, #174	; 0xae
 8012cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	78fa      	ldrb	r2, [r7, #3]
 8012cd8:	4611      	mov	r1, r2
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	4798      	blx	r3
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d001      	beq.n	8012ce8 <USBD_ClrClassConfig+0x62>
        {
          ret = USBD_FAIL;
 8012ce4:	2303      	movs	r3, #3
 8012ce6:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	3301      	adds	r3, #1
 8012cec:	60bb      	str	r3, [r7, #8]
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	2b03      	cmp	r3, #3
 8012cf2:	d9d3      	bls.n	8012c9c <USBD_ClrClassConfig+0x16>
  {
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012cfe:	b580      	push	{r7, lr}
 8012d00:	b084      	sub	sp, #16
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
 8012d06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012d0e:	6839      	ldr	r1, [r7, #0]
 8012d10:	4618      	mov	r0, r3
 8012d12:	f001 fa5a 	bl	80141ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2201      	movs	r2, #1
 8012d1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8012d24:	461a      	mov	r2, r3
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012d32:	f003 031f 	and.w	r3, r3, #31
 8012d36:	2b02      	cmp	r3, #2
 8012d38:	d01a      	beq.n	8012d70 <USBD_LL_SetupStage+0x72>
 8012d3a:	2b02      	cmp	r3, #2
 8012d3c:	d822      	bhi.n	8012d84 <USBD_LL_SetupStage+0x86>
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d002      	beq.n	8012d48 <USBD_LL_SetupStage+0x4a>
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	d00a      	beq.n	8012d5c <USBD_LL_SetupStage+0x5e>
 8012d46:	e01d      	b.n	8012d84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012d4e:	4619      	mov	r1, r3
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f000 fc4d 	bl	80135f0 <USBD_StdDevReq>
 8012d56:	4603      	mov	r3, r0
 8012d58:	73fb      	strb	r3, [r7, #15]
      break;
 8012d5a:	e020      	b.n	8012d9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012d62:	4619      	mov	r1, r3
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f000 fcb5 	bl	80136d4 <USBD_StdItfReq>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8012d6e:	e016      	b.n	8012d9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012d76:	4619      	mov	r1, r3
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f000 fd17 	bl	80137ac <USBD_StdEPReq>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	73fb      	strb	r3, [r7, #15]
      break;
 8012d82:	e00c      	b.n	8012d9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012d8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	4619      	mov	r1, r3
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f006 f997 	bl	80190c6 <USBD_LL_StallEP>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8012d9c:	bf00      	nop
  }

  return ret;
 8012d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	3710      	adds	r7, #16
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b086      	sub	sp, #24
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	60f8      	str	r0, [r7, #12]
 8012db0:	460b      	mov	r3, r1
 8012db2:	607a      	str	r2, [r7, #4]
 8012db4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012db6:	2300      	movs	r3, #0
 8012db8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012dba:	7afb      	ldrb	r3, [r7, #11]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d16e      	bne.n	8012e9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012dc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012dce:	2b03      	cmp	r3, #3
 8012dd0:	f040 8098 	bne.w	8012f04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	689a      	ldr	r2, [r3, #8]
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	68db      	ldr	r3, [r3, #12]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d913      	bls.n	8012e08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	689a      	ldr	r2, [r3, #8]
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	68db      	ldr	r3, [r3, #12]
 8012de8:	1ad2      	subs	r2, r2, r3
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	68da      	ldr	r2, [r3, #12]
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	689b      	ldr	r3, [r3, #8]
 8012df6:	4293      	cmp	r3, r2
 8012df8:	bf28      	it	cs
 8012dfa:	4613      	movcs	r3, r2
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	6879      	ldr	r1, [r7, #4]
 8012e00:	68f8      	ldr	r0, [r7, #12]
 8012e02:	f001 fad6 	bl	80143b2 <USBD_CtlContinueRx>
 8012e06:	e07d      	b.n	8012f04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012e0e:	f003 031f 	and.w	r3, r3, #31
 8012e12:	2b02      	cmp	r3, #2
 8012e14:	d014      	beq.n	8012e40 <USBD_LL_DataOutStage+0x98>
 8012e16:	2b02      	cmp	r3, #2
 8012e18:	d81d      	bhi.n	8012e56 <USBD_LL_DataOutStage+0xae>
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d002      	beq.n	8012e24 <USBD_LL_DataOutStage+0x7c>
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d003      	beq.n	8012e2a <USBD_LL_DataOutStage+0x82>
 8012e22:	e018      	b.n	8012e56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012e24:	2300      	movs	r3, #0
 8012e26:	75bb      	strb	r3, [r7, #22]
            break;
 8012e28:	e018      	b.n	8012e5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012e30:	b2db      	uxtb	r3, r3
 8012e32:	4619      	mov	r1, r3
 8012e34:	68f8      	ldr	r0, [r7, #12]
 8012e36:	f000 fabf 	bl	80133b8 <USBD_CoreFindIF>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	75bb      	strb	r3, [r7, #22]
            break;
 8012e3e:	e00d      	b.n	8012e5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	4619      	mov	r1, r3
 8012e4a:	68f8      	ldr	r0, [r7, #12]
 8012e4c:	f000 fb03 	bl	8013456 <USBD_CoreFindEP>
 8012e50:	4603      	mov	r3, r0
 8012e52:	75bb      	strb	r3, [r7, #22]
            break;
 8012e54:	e002      	b.n	8012e5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012e56:	2300      	movs	r3, #0
 8012e58:	75bb      	strb	r3, [r7, #22]
            break;
 8012e5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012e5c:	7dbb      	ldrb	r3, [r7, #22]
 8012e5e:	2b03      	cmp	r3, #3
 8012e60:	d819      	bhi.n	8012e96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	2b03      	cmp	r3, #3
 8012e6c:	d113      	bne.n	8012e96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012e6e:	7dba      	ldrb	r2, [r7, #22]
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	32ae      	adds	r2, #174	; 0xae
 8012e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e78:	691b      	ldr	r3, [r3, #16]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d00b      	beq.n	8012e96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012e7e:	7dba      	ldrb	r2, [r7, #22]
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012e86:	7dba      	ldrb	r2, [r7, #22]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	32ae      	adds	r2, #174	; 0xae
 8012e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e90:	691b      	ldr	r3, [r3, #16]
 8012e92:	68f8      	ldr	r0, [r7, #12]
 8012e94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012e96:	68f8      	ldr	r0, [r7, #12]
 8012e98:	f001 fa9c 	bl	80143d4 <USBD_CtlSendStatus>
 8012e9c:	e032      	b.n	8012f04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012e9e:	7afb      	ldrb	r3, [r7, #11]
 8012ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	68f8      	ldr	r0, [r7, #12]
 8012eaa:	f000 fad4 	bl	8013456 <USBD_CoreFindEP>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012eb2:	7dbb      	ldrb	r3, [r7, #22]
 8012eb4:	2bff      	cmp	r3, #255	; 0xff
 8012eb6:	d025      	beq.n	8012f04 <USBD_LL_DataOutStage+0x15c>
 8012eb8:	7dbb      	ldrb	r3, [r7, #22]
 8012eba:	2b03      	cmp	r3, #3
 8012ebc:	d822      	bhi.n	8012f04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	2b03      	cmp	r3, #3
 8012ec8:	d117      	bne.n	8012efa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012eca:	7dba      	ldrb	r2, [r7, #22]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	32ae      	adds	r2, #174	; 0xae
 8012ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ed4:	699b      	ldr	r3, [r3, #24]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d00f      	beq.n	8012efa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012eda:	7dba      	ldrb	r2, [r7, #22]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012ee2:	7dba      	ldrb	r2, [r7, #22]
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	32ae      	adds	r2, #174	; 0xae
 8012ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eec:	699b      	ldr	r3, [r3, #24]
 8012eee:	7afa      	ldrb	r2, [r7, #11]
 8012ef0:	4611      	mov	r1, r2
 8012ef2:	68f8      	ldr	r0, [r7, #12]
 8012ef4:	4798      	blx	r3
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012efa:	7dfb      	ldrb	r3, [r7, #23]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d001      	beq.n	8012f04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012f00:	7dfb      	ldrb	r3, [r7, #23]
 8012f02:	e000      	b.n	8012f06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3718      	adds	r7, #24
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}

08012f0e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b086      	sub	sp, #24
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	60f8      	str	r0, [r7, #12]
 8012f16:	460b      	mov	r3, r1
 8012f18:	607a      	str	r2, [r7, #4]
 8012f1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012f1c:	7afb      	ldrb	r3, [r7, #11]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d16f      	bne.n	8013002 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	3314      	adds	r3, #20
 8012f26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012f2e:	2b02      	cmp	r3, #2
 8012f30:	d15a      	bne.n	8012fe8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	689a      	ldr	r2, [r3, #8]
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d914      	bls.n	8012f68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	689a      	ldr	r2, [r3, #8]
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	68db      	ldr	r3, [r3, #12]
 8012f46:	1ad2      	subs	r2, r2, r3
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	689b      	ldr	r3, [r3, #8]
 8012f50:	461a      	mov	r2, r3
 8012f52:	6879      	ldr	r1, [r7, #4]
 8012f54:	68f8      	ldr	r0, [r7, #12]
 8012f56:	f001 f9fe 	bl	8014356 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	2100      	movs	r1, #0
 8012f60:	68f8      	ldr	r0, [r7, #12]
 8012f62:	f006 f95a 	bl	801921a <USBD_LL_PrepareReceive>
 8012f66:	e03f      	b.n	8012fe8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	68da      	ldr	r2, [r3, #12]
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	689b      	ldr	r3, [r3, #8]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d11c      	bne.n	8012fae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012f74:	693b      	ldr	r3, [r7, #16]
 8012f76:	685a      	ldr	r2, [r3, #4]
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d316      	bcc.n	8012fae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	685a      	ldr	r2, [r3, #4]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d20f      	bcs.n	8012fae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012f8e:	2200      	movs	r2, #0
 8012f90:	2100      	movs	r1, #0
 8012f92:	68f8      	ldr	r0, [r7, #12]
 8012f94:	f001 f9df 	bl	8014356 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	2100      	movs	r1, #0
 8012fa6:	68f8      	ldr	r0, [r7, #12]
 8012fa8:	f006 f937 	bl	801921a <USBD_LL_PrepareReceive>
 8012fac:	e01c      	b.n	8012fe8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fb4:	b2db      	uxtb	r3, r3
 8012fb6:	2b03      	cmp	r3, #3
 8012fb8:	d10f      	bne.n	8012fda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fc0:	68db      	ldr	r3, [r3, #12]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d009      	beq.n	8012fda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fd4:	68db      	ldr	r3, [r3, #12]
 8012fd6:	68f8      	ldr	r0, [r7, #12]
 8012fd8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012fda:	2180      	movs	r1, #128	; 0x80
 8012fdc:	68f8      	ldr	r0, [r7, #12]
 8012fde:	f006 f872 	bl	80190c6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012fe2:	68f8      	ldr	r0, [r7, #12]
 8012fe4:	f001 fa09 	bl	80143fa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d03a      	beq.n	8013068 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012ff2:	68f8      	ldr	r0, [r7, #12]
 8012ff4:	f7ff fe00 	bl	8012bf8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013000:	e032      	b.n	8013068 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013002:	7afb      	ldrb	r3, [r7, #11]
 8013004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013008:	b2db      	uxtb	r3, r3
 801300a:	4619      	mov	r1, r3
 801300c:	68f8      	ldr	r0, [r7, #12]
 801300e:	f000 fa22 	bl	8013456 <USBD_CoreFindEP>
 8013012:	4603      	mov	r3, r0
 8013014:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013016:	7dfb      	ldrb	r3, [r7, #23]
 8013018:	2bff      	cmp	r3, #255	; 0xff
 801301a:	d025      	beq.n	8013068 <USBD_LL_DataInStage+0x15a>
 801301c:	7dfb      	ldrb	r3, [r7, #23]
 801301e:	2b03      	cmp	r3, #3
 8013020:	d822      	bhi.n	8013068 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013028:	b2db      	uxtb	r3, r3
 801302a:	2b03      	cmp	r3, #3
 801302c:	d11c      	bne.n	8013068 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801302e:	7dfa      	ldrb	r2, [r7, #23]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	32ae      	adds	r2, #174	; 0xae
 8013034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013038:	695b      	ldr	r3, [r3, #20]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d014      	beq.n	8013068 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801303e:	7dfa      	ldrb	r2, [r7, #23]
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013046:	7dfa      	ldrb	r2, [r7, #23]
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	32ae      	adds	r2, #174	; 0xae
 801304c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013050:	695b      	ldr	r3, [r3, #20]
 8013052:	7afa      	ldrb	r2, [r7, #11]
 8013054:	4611      	mov	r1, r2
 8013056:	68f8      	ldr	r0, [r7, #12]
 8013058:	4798      	blx	r3
 801305a:	4603      	mov	r3, r0
 801305c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801305e:	7dbb      	ldrb	r3, [r7, #22]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d001      	beq.n	8013068 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013064:	7dbb      	ldrb	r3, [r7, #22]
 8013066:	e000      	b.n	801306a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013068:	2300      	movs	r3, #0
}
 801306a:	4618      	mov	r0, r3
 801306c:	3718      	adds	r7, #24
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}

08013072 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013072:	b580      	push	{r7, lr}
 8013074:	b084      	sub	sp, #16
 8013076:	af00      	add	r7, sp, #0
 8013078:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801307a:	2300      	movs	r3, #0
 801307c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2201      	movs	r2, #1
 8013082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2200      	movs	r2, #0
 801308a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2200      	movs	r2, #0
 8013092:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2200      	movs	r2, #0
 8013098:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2200      	movs	r2, #0
 80130a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80130a4:	2300      	movs	r3, #0
 80130a6:	60bb      	str	r3, [r7, #8]
 80130a8:	e032      	b.n	8013110 <USBD_LL_Reset+0x9e>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 80130aa:	6879      	ldr	r1, [r7, #4]
 80130ac:	68ba      	ldr	r2, [r7, #8]
 80130ae:	4613      	mov	r3, r2
 80130b0:	00db      	lsls	r3, r3, #3
 80130b2:	1a9b      	subs	r3, r3, r2
 80130b4:	00db      	lsls	r3, r3, #3
 80130b6:	440b      	add	r3, r1
 80130b8:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	2b01      	cmp	r3, #1
 80130c0:	d123      	bne.n	801310a <USBD_LL_Reset+0x98>
    {
      if (pdev->pClass[i] != NULL)
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	68ba      	ldr	r2, [r7, #8]
 80130c6:	32ae      	adds	r2, #174	; 0xae
 80130c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d01c      	beq.n	801310a <USBD_LL_Reset+0x98>
      {
        pdev->classId = i;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	68ba      	ldr	r2, [r7, #8]
 80130d4:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process*/

        if (pdev->pClass[i]->DeInit != NULL)
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	68ba      	ldr	r2, [r7, #8]
 80130dc:	32ae      	adds	r2, #174	; 0xae
 80130de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d010      	beq.n	801310a <USBD_LL_Reset+0x98>
        {
          if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	68ba      	ldr	r2, [r7, #8]
 80130ec:	32ae      	adds	r2, #174	; 0xae
 80130ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130f2:	685b      	ldr	r3, [r3, #4]
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	6852      	ldr	r2, [r2, #4]
 80130f8:	b2d2      	uxtb	r2, r2
 80130fa:	4611      	mov	r1, r2
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	4798      	blx	r3
 8013100:	4603      	mov	r3, r0
 8013102:	2b00      	cmp	r3, #0
 8013104:	d001      	beq.n	801310a <USBD_LL_Reset+0x98>
          {
            ret = USBD_FAIL;
 8013106:	2303      	movs	r3, #3
 8013108:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	3301      	adds	r3, #1
 801310e:	60bb      	str	r3, [r7, #8]
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	2b03      	cmp	r3, #3
 8013114:	d9c9      	bls.n	80130aa <USBD_LL_Reset+0x38>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013116:	2340      	movs	r3, #64	; 0x40
 8013118:	2200      	movs	r2, #0
 801311a:	2100      	movs	r1, #0
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f005 ff6e 	bl	8018ffe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2201      	movs	r2, #1
 8013126:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2240      	movs	r2, #64	; 0x40
 801312e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013132:	2340      	movs	r3, #64	; 0x40
 8013134:	2200      	movs	r2, #0
 8013136:	2180      	movs	r1, #128	; 0x80
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f005 ff60 	bl	8018ffe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2201      	movs	r2, #1
 8013142:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2240      	movs	r2, #64	; 0x40
 8013148:	621a      	str	r2, [r3, #32]

  return ret;
 801314a:	7bfb      	ldrb	r3, [r7, #15]
}
 801314c:	4618      	mov	r0, r3
 801314e:	3710      	adds	r7, #16
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}

08013154 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013154:	b480      	push	{r7}
 8013156:	b083      	sub	sp, #12
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	460b      	mov	r3, r1
 801315e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	78fa      	ldrb	r2, [r7, #3]
 8013164:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013166:	2300      	movs	r3, #0
}
 8013168:	4618      	mov	r0, r3
 801316a:	370c      	adds	r7, #12
 801316c:	46bd      	mov	sp, r7
 801316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013172:	4770      	bx	lr

08013174 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013174:	b480      	push	{r7}
 8013176:	b083      	sub	sp, #12
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013182:	b2db      	uxtb	r3, r3
 8013184:	2b04      	cmp	r3, #4
 8013186:	d006      	beq.n	8013196 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801318e:	b2da      	uxtb	r2, r3
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2204      	movs	r2, #4
 801319a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801319e:	2300      	movs	r3, #0
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	370c      	adds	r7, #12
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr

080131ac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	2b04      	cmp	r3, #4
 80131be:	d106      	bne.n	80131ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80131c6:	b2da      	uxtb	r2, r3
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80131ce:	2300      	movs	r3, #0
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	370c      	adds	r7, #12
 80131d4:	46bd      	mov	sp, r7
 80131d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131da:	4770      	bx	lr

080131dc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b084      	sub	sp, #16
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	2b03      	cmp	r3, #3
 80131ee:	d12f      	bne.n	8013250 <USBD_LL_SOF+0x74>
  {
#ifdef USE_USBD_COMPOSITE
    /* Parse the table of classes in use */
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80131f0:	2300      	movs	r3, #0
 80131f2:	60fb      	str	r3, [r7, #12]
 80131f4:	e029      	b.n	801324a <USBD_LL_SOF+0x6e>
    {
      /* Check if current class is in use */
      if ((pdev->tclasslist[i].Active) == 1U)
 80131f6:	6879      	ldr	r1, [r7, #4]
 80131f8:	68fa      	ldr	r2, [r7, #12]
 80131fa:	4613      	mov	r3, r2
 80131fc:	00db      	lsls	r3, r3, #3
 80131fe:	1a9b      	subs	r3, r3, r2
 8013200:	00db      	lsls	r3, r3, #3
 8013202:	440b      	add	r3, r1
 8013204:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	2b01      	cmp	r3, #1
 801320c:	d11a      	bne.n	8013244 <USBD_LL_SOF+0x68>
      {
        if (pdev->pClass[i] != NULL)
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	68fa      	ldr	r2, [r7, #12]
 8013212:	32ae      	adds	r2, #174	; 0xae
 8013214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d013      	beq.n	8013244 <USBD_LL_SOF+0x68>
        {
          if (pdev->pClass[i]->SOF != NULL)
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	68fa      	ldr	r2, [r7, #12]
 8013220:	32ae      	adds	r2, #174	; 0xae
 8013222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013226:	69db      	ldr	r3, [r3, #28]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d00b      	beq.n	8013244 <USBD_LL_SOF+0x68>
          {
            pdev->classId = i;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	68fa      	ldr	r2, [r7, #12]
 8013230:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
            (void)pdev->pClass[i]->SOF(pdev);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	68fa      	ldr	r2, [r7, #12]
 8013238:	32ae      	adds	r2, #174	; 0xae
 801323a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801323e:	69db      	ldr	r3, [r3, #28]
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	4798      	blx	r3
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	3301      	adds	r3, #1
 8013248:	60fb      	str	r3, [r7, #12]
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	2b03      	cmp	r3, #3
 801324e:	d9d2      	bls.n	80131f6 <USBD_LL_SOF+0x1a>
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013250:	2300      	movs	r3, #0
}
 8013252:	4618      	mov	r0, r3
 8013254:	3710      	adds	r7, #16
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}

0801325a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801325a:	b580      	push	{r7, lr}
 801325c:	b082      	sub	sp, #8
 801325e:	af00      	add	r7, sp, #0
 8013260:	6078      	str	r0, [r7, #4]
 8013262:	460b      	mov	r3, r1
 8013264:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	32ae      	adds	r2, #174	; 0xae
 8013270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d101      	bne.n	801327c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013278:	2303      	movs	r3, #3
 801327a:	e01c      	b.n	80132b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013282:	b2db      	uxtb	r3, r3
 8013284:	2b03      	cmp	r3, #3
 8013286:	d115      	bne.n	80132b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	32ae      	adds	r2, #174	; 0xae
 8013292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013296:	6a1b      	ldr	r3, [r3, #32]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d00b      	beq.n	80132b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	32ae      	adds	r2, #174	; 0xae
 80132a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132aa:	6a1b      	ldr	r3, [r3, #32]
 80132ac:	78fa      	ldrb	r2, [r7, #3]
 80132ae:	4611      	mov	r1, r2
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80132b4:	2300      	movs	r3, #0
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3708      	adds	r7, #8
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}

080132be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80132be:	b580      	push	{r7, lr}
 80132c0:	b082      	sub	sp, #8
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
 80132c6:	460b      	mov	r3, r1
 80132c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	32ae      	adds	r2, #174	; 0xae
 80132d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d101      	bne.n	80132e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80132dc:	2303      	movs	r3, #3
 80132de:	e01c      	b.n	801331a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132e6:	b2db      	uxtb	r3, r3
 80132e8:	2b03      	cmp	r3, #3
 80132ea:	d115      	bne.n	8013318 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	32ae      	adds	r2, #174	; 0xae
 80132f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00b      	beq.n	8013318 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	32ae      	adds	r2, #174	; 0xae
 801330a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013310:	78fa      	ldrb	r2, [r7, #3]
 8013312:	4611      	mov	r1, r2
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013318:	2300      	movs	r3, #0
}
 801331a:	4618      	mov	r0, r3
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}

08013322 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013322:	b480      	push	{r7}
 8013324:	b083      	sub	sp, #12
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801332a:	2300      	movs	r3, #0
}
 801332c:	4618      	mov	r0, r3
 801332e:	370c      	adds	r7, #12
 8013330:	46bd      	mov	sp, r7
 8013332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013336:	4770      	bx	lr

08013338 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013340:	2300      	movs	r3, #0
 8013342:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2201      	movs	r2, #1
 8013348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 801334c:	2300      	movs	r3, #0
 801334e:	60bb      	str	r3, [r7, #8]
 8013350:	e02a      	b.n	80133a8 <USBD_LL_DevDisconnected+0x70>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8013352:	6879      	ldr	r1, [r7, #4]
 8013354:	68ba      	ldr	r2, [r7, #8]
 8013356:	4613      	mov	r3, r2
 8013358:	00db      	lsls	r3, r3, #3
 801335a:	1a9b      	subs	r3, r3, r2
 801335c:	00db      	lsls	r3, r3, #3
 801335e:	440b      	add	r3, r1
 8013360:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	2b01      	cmp	r3, #1
 8013368:	d11b      	bne.n	80133a2 <USBD_LL_DevDisconnected+0x6a>
    {
      if (pdev->pClass[i] != NULL)
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	68ba      	ldr	r2, [r7, #8]
 801336e:	32ae      	adds	r2, #174	; 0xae
 8013370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d014      	beq.n	80133a2 <USBD_LL_DevDisconnected+0x6a>
      {
        pdev->classId = i;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	68ba      	ldr	r2, [r7, #8]
 801337c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process*/
        if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	68ba      	ldr	r2, [r7, #8]
 8013384:	32ae      	adds	r2, #174	; 0xae
 8013386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801338a:	685b      	ldr	r3, [r3, #4]
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	6852      	ldr	r2, [r2, #4]
 8013390:	b2d2      	uxtb	r2, r2
 8013392:	4611      	mov	r1, r2
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	4798      	blx	r3
 8013398:	4603      	mov	r3, r0
 801339a:	2b00      	cmp	r3, #0
 801339c:	d001      	beq.n	80133a2 <USBD_LL_DevDisconnected+0x6a>
        {
          ret = USBD_FAIL;
 801339e:	2303      	movs	r3, #3
 80133a0:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	3301      	adds	r3, #1
 80133a6:	60bb      	str	r3, [r7, #8]
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	2b03      	cmp	r3, #3
 80133ac:	d9d1      	bls.n	8013352 <USBD_LL_DevDisconnected+0x1a>
      ret = USBD_FAIL;
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80133ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	3710      	adds	r7, #16
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80133b8:	b480      	push	{r7}
 80133ba:	b085      	sub	sp, #20
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	460b      	mov	r3, r1
 80133c2:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80133c4:	2300      	movs	r3, #0
 80133c6:	60fb      	str	r3, [r7, #12]
 80133c8:	e03b      	b.n	8013442 <USBD_CoreFindIF+0x8a>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 80133ca:	6879      	ldr	r1, [r7, #4]
 80133cc:	68fa      	ldr	r2, [r7, #12]
 80133ce:	4613      	mov	r3, r2
 80133d0:	00db      	lsls	r3, r3, #3
 80133d2:	1a9b      	subs	r3, r3, r2
 80133d4:	00db      	lsls	r3, r3, #3
 80133d6:	440b      	add	r3, r1
 80133d8:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	2b01      	cmp	r3, #1
 80133e0:	d12c      	bne.n	801343c <USBD_CoreFindIF+0x84>
    {
      /* Parse all interfaces listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80133e2:	2300      	movs	r3, #0
 80133e4:	60bb      	str	r3, [r7, #8]
 80133e6:	e01c      	b.n	8013422 <USBD_CoreFindIF+0x6a>
      {
        /* Check if requested Interface matches the current class interface */
        if (pdev->tclasslist[i].Ifs[j] == index)
 80133e8:	6879      	ldr	r1, [r7, #4]
 80133ea:	68fa      	ldr	r2, [r7, #12]
 80133ec:	4613      	mov	r3, r2
 80133ee:	00db      	lsls	r3, r3, #3
 80133f0:	1a9b      	subs	r3, r3, r2
 80133f2:	00db      	lsls	r3, r3, #3
 80133f4:	18ca      	adds	r2, r1, r3
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	4413      	add	r3, r2
 80133fa:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	78fa      	ldrb	r2, [r7, #3]
 8013402:	429a      	cmp	r2, r3
 8013404:	d10a      	bne.n	801341c <USBD_CoreFindIF+0x64>
        {
          if (pdev->pClass[i]->Setup != NULL)
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	68fa      	ldr	r2, [r7, #12]
 801340a:	32ae      	adds	r2, #174	; 0xae
 801340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013410:	689b      	ldr	r3, [r3, #8]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d002      	beq.n	801341c <USBD_CoreFindIF+0x64>
          {
            return (uint8_t)i;
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	b2db      	uxtb	r3, r3
 801341a:	e016      	b.n	801344a <USBD_CoreFindIF+0x92>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	3301      	adds	r3, #1
 8013420:	60bb      	str	r3, [r7, #8]
 8013422:	6879      	ldr	r1, [r7, #4]
 8013424:	68fa      	ldr	r2, [r7, #12]
 8013426:	4613      	mov	r3, r2
 8013428:	00db      	lsls	r3, r3, #3
 801342a:	1a9b      	subs	r3, r3, r2
 801342c:	00db      	lsls	r3, r3, #3
 801342e:	440b      	add	r3, r1
 8013430:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	68ba      	ldr	r2, [r7, #8]
 8013438:	429a      	cmp	r2, r3
 801343a:	d3d5      	bcc.n	80133e8 <USBD_CoreFindIF+0x30>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	3301      	adds	r3, #1
 8013440:	60fb      	str	r3, [r7, #12]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	2b03      	cmp	r3, #3
 8013446:	d9c0      	bls.n	80133ca <USBD_CoreFindIF+0x12>
        }
      }
    }
  }

  return 0xFFU;
 8013448:	23ff      	movs	r3, #255	; 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 801344a:	4618      	mov	r0, r3
 801344c:	3714      	adds	r7, #20
 801344e:	46bd      	mov	sp, r7
 8013450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013454:	4770      	bx	lr

08013456 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013456:	b480      	push	{r7}
 8013458:	b085      	sub	sp, #20
 801345a:	af00      	add	r7, sp, #0
 801345c:	6078      	str	r0, [r7, #4]
 801345e:	460b      	mov	r3, r1
 8013460:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8013462:	2300      	movs	r3, #0
 8013464:	60fb      	str	r3, [r7, #12]
 8013466:	e03a      	b.n	80134de <USBD_CoreFindEP+0x88>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8013468:	6879      	ldr	r1, [r7, #4]
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	4613      	mov	r3, r2
 801346e:	00db      	lsls	r3, r3, #3
 8013470:	1a9b      	subs	r3, r3, r2
 8013472:	00db      	lsls	r3, r3, #3
 8013474:	440b      	add	r3, r1
 8013476:	f503 7342 	add.w	r3, r3, #776	; 0x308
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	2b01      	cmp	r3, #1
 801347e:	d12b      	bne.n	80134d8 <USBD_CoreFindEP+0x82>
    {
      /* Parse all endpoints listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 8013480:	2300      	movs	r3, #0
 8013482:	60bb      	str	r3, [r7, #8]
 8013484:	e01b      	b.n	80134be <USBD_CoreFindEP+0x68>
      {
        /* Check if requested endpoint matches the current class endpoint */
        if (pdev->tclasslist[i].Eps[j].add == index)
 8013486:	6879      	ldr	r1, [r7, #4]
 8013488:	68fa      	ldr	r2, [r7, #12]
 801348a:	4613      	mov	r3, r2
 801348c:	00db      	lsls	r3, r3, #3
 801348e:	1a9b      	subs	r3, r3, r2
 8013490:	005b      	lsls	r3, r3, #1
 8013492:	68ba      	ldr	r2, [r7, #8]
 8013494:	4413      	add	r3, r2
 8013496:	33c4      	adds	r3, #196	; 0xc4
 8013498:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 801349c:	78fa      	ldrb	r2, [r7, #3]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d10a      	bne.n	80134b8 <USBD_CoreFindEP+0x62>
        {
          if (pdev->pClass[i]->Setup != NULL)
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	68fa      	ldr	r2, [r7, #12]
 80134a6:	32ae      	adds	r2, #174	; 0xae
 80134a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d002      	beq.n	80134b8 <USBD_CoreFindEP+0x62>
          {
            return (uint8_t)i;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	b2db      	uxtb	r3, r3
 80134b6:	e016      	b.n	80134e6 <USBD_CoreFindEP+0x90>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	3301      	adds	r3, #1
 80134bc:	60bb      	str	r3, [r7, #8]
 80134be:	6879      	ldr	r1, [r7, #4]
 80134c0:	68fa      	ldr	r2, [r7, #12]
 80134c2:	4613      	mov	r3, r2
 80134c4:	00db      	lsls	r3, r3, #3
 80134c6:	1a9b      	subs	r3, r3, r2
 80134c8:	00db      	lsls	r3, r3, #3
 80134ca:	440b      	add	r3, r1
 80134cc:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	68ba      	ldr	r2, [r7, #8]
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d3d6      	bcc.n	8013486 <USBD_CoreFindEP+0x30>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	3301      	adds	r3, #1
 80134dc:	60fb      	str	r3, [r7, #12]
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2b03      	cmp	r3, #3
 80134e2:	d9c1      	bls.n	8013468 <USBD_CoreFindEP+0x12>
        }
      }
    }
  }

  return 0xFFU;
 80134e4:	23ff      	movs	r3, #255	; 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3714      	adds	r7, #20
 80134ea:	46bd      	mov	sp, r7
 80134ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f0:	4770      	bx	lr

080134f2 <USBD_CoreGetEPAdd>:
  * @param  ep_type: USBD_EP_TYPE_CTRL, USBD_EP_TYPE_ISOC, USBD_EP_TYPE_BULK or USBD_EP_TYPE_INTR
  * @param  ClassId: The Class ID
  * @retval Address of the selected endpoint or 0xFFU if no endpoint found.
  */
uint8_t USBD_CoreGetEPAdd(USBD_HandleTypeDef *pdev, uint8_t ep_dir, uint8_t ep_type, uint8_t ClassId)
{
 80134f2:	b480      	push	{r7}
 80134f4:	b085      	sub	sp, #20
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	6078      	str	r0, [r7, #4]
 80134fa:	4608      	mov	r0, r1
 80134fc:	4611      	mov	r1, r2
 80134fe:	461a      	mov	r2, r3
 8013500:	4603      	mov	r3, r0
 8013502:	70fb      	strb	r3, [r7, #3]
 8013504:	460b      	mov	r3, r1
 8013506:	70bb      	strb	r3, [r7, #2]
 8013508:	4613      	mov	r3, r2
 801350a:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  /* Find the EP address in the selected class table */
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 801350c:	2300      	movs	r3, #0
 801350e:	73fb      	strb	r3, [r7, #15]
 8013510:	e03b      	b.n	801358a <USBD_CoreGetEPAdd+0x98>
  {
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 8013512:	787a      	ldrb	r2, [r7, #1]
 8013514:	7bf8      	ldrb	r0, [r7, #15]
 8013516:	6879      	ldr	r1, [r7, #4]
 8013518:	4613      	mov	r3, r2
 801351a:	00db      	lsls	r3, r3, #3
 801351c:	1a9b      	subs	r3, r3, r2
 801351e:	005b      	lsls	r3, r3, #1
 8013520:	4403      	add	r3, r0
 8013522:	33c4      	adds	r3, #196	; 0xc4
 8013524:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8013528:	f003 0280 	and.w	r2, r3, #128	; 0x80
 801352c:	78fb      	ldrb	r3, [r7, #3]
 801352e:	429a      	cmp	r2, r3
 8013530:	d128      	bne.n	8013584 <USBD_CoreGetEPAdd+0x92>
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 8013532:	787a      	ldrb	r2, [r7, #1]
 8013534:	7bf8      	ldrb	r0, [r7, #15]
 8013536:	6879      	ldr	r1, [r7, #4]
 8013538:	4613      	mov	r3, r2
 801353a:	00db      	lsls	r3, r3, #3
 801353c:	1a9b      	subs	r3, r3, r2
 801353e:	005b      	lsls	r3, r3, #1
 8013540:	4403      	add	r3, r0
 8013542:	33c4      	adds	r3, #196	; 0xc4
 8013544:	009b      	lsls	r3, r3, #2
 8013546:	440b      	add	r3, r1
 8013548:	785b      	ldrb	r3, [r3, #1]
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 801354a:	78ba      	ldrb	r2, [r7, #2]
 801354c:	429a      	cmp	r2, r3
 801354e:	d119      	bne.n	8013584 <USBD_CoreGetEPAdd+0x92>
        (pdev->tclasslist[ClassId].Eps[idx].is_used != 0U))
 8013550:	787a      	ldrb	r2, [r7, #1]
 8013552:	7bf8      	ldrb	r0, [r7, #15]
 8013554:	6879      	ldr	r1, [r7, #4]
 8013556:	4613      	mov	r3, r2
 8013558:	00db      	lsls	r3, r3, #3
 801355a:	1a9b      	subs	r3, r3, r2
 801355c:	005b      	lsls	r3, r3, #1
 801355e:	4403      	add	r3, r0
 8013560:	33c4      	adds	r3, #196	; 0xc4
 8013562:	009b      	lsls	r3, r3, #2
 8013564:	440b      	add	r3, r1
 8013566:	78db      	ldrb	r3, [r3, #3]
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 8013568:	2b00      	cmp	r3, #0
 801356a:	d00b      	beq.n	8013584 <USBD_CoreGetEPAdd+0x92>
    {
      return (pdev->tclasslist[ClassId].Eps[idx].add);
 801356c:	787a      	ldrb	r2, [r7, #1]
 801356e:	7bf8      	ldrb	r0, [r7, #15]
 8013570:	6879      	ldr	r1, [r7, #4]
 8013572:	4613      	mov	r3, r2
 8013574:	00db      	lsls	r3, r3, #3
 8013576:	1a9b      	subs	r3, r3, r2
 8013578:	005b      	lsls	r3, r3, #1
 801357a:	4403      	add	r3, r0
 801357c:	33c4      	adds	r3, #196	; 0xc4
 801357e:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8013582:	e010      	b.n	80135a6 <USBD_CoreGetEPAdd+0xb4>
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 8013584:	7bfb      	ldrb	r3, [r7, #15]
 8013586:	3301      	adds	r3, #1
 8013588:	73fb      	strb	r3, [r7, #15]
 801358a:	7bf9      	ldrb	r1, [r7, #15]
 801358c:	787a      	ldrb	r2, [r7, #1]
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	4613      	mov	r3, r2
 8013592:	00db      	lsls	r3, r3, #3
 8013594:	1a9b      	subs	r3, r3, r2
 8013596:	00db      	lsls	r3, r3, #3
 8013598:	4403      	add	r3, r0
 801359a:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	4299      	cmp	r1, r3
 80135a2:	d3b6      	bcc.n	8013512 <USBD_CoreGetEPAdd+0x20>
    }
  }

  /* If reaching this point, then no endpoint was found */
  return 0xFFU;
 80135a4:	23ff      	movs	r3, #255	; 0xff
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3714      	adds	r7, #20
 80135aa:	46bd      	mov	sp, r7
 80135ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b0:	4770      	bx	lr

080135b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80135b2:	b480      	push	{r7}
 80135b4:	b087      	sub	sp, #28
 80135b6:	af00      	add	r7, sp, #0
 80135b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	3301      	adds	r3, #1
 80135c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80135d0:	8a3b      	ldrh	r3, [r7, #16]
 80135d2:	021b      	lsls	r3, r3, #8
 80135d4:	b21a      	sxth	r2, r3
 80135d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80135da:	4313      	orrs	r3, r2
 80135dc:	b21b      	sxth	r3, r3
 80135de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80135e0:	89fb      	ldrh	r3, [r7, #14]
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	371c      	adds	r7, #28
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr
	...

080135f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80135fa:	2300      	movs	r3, #0
 80135fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	781b      	ldrb	r3, [r3, #0]
 8013602:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013606:	2b40      	cmp	r3, #64	; 0x40
 8013608:	d005      	beq.n	8013616 <USBD_StdDevReq+0x26>
 801360a:	2b40      	cmp	r3, #64	; 0x40
 801360c:	d857      	bhi.n	80136be <USBD_StdDevReq+0xce>
 801360e:	2b00      	cmp	r3, #0
 8013610:	d00f      	beq.n	8013632 <USBD_StdDevReq+0x42>
 8013612:	2b20      	cmp	r3, #32
 8013614:	d153      	bne.n	80136be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	32ae      	adds	r2, #174	; 0xae
 8013620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013624:	689b      	ldr	r3, [r3, #8]
 8013626:	6839      	ldr	r1, [r7, #0]
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	4798      	blx	r3
 801362c:	4603      	mov	r3, r0
 801362e:	73fb      	strb	r3, [r7, #15]
      break;
 8013630:	e04a      	b.n	80136c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	785b      	ldrb	r3, [r3, #1]
 8013636:	2b09      	cmp	r3, #9
 8013638:	d83b      	bhi.n	80136b2 <USBD_StdDevReq+0xc2>
 801363a:	a201      	add	r2, pc, #4	; (adr r2, 8013640 <USBD_StdDevReq+0x50>)
 801363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013640:	08013695 	.word	0x08013695
 8013644:	080136a9 	.word	0x080136a9
 8013648:	080136b3 	.word	0x080136b3
 801364c:	0801369f 	.word	0x0801369f
 8013650:	080136b3 	.word	0x080136b3
 8013654:	08013673 	.word	0x08013673
 8013658:	08013669 	.word	0x08013669
 801365c:	080136b3 	.word	0x080136b3
 8013660:	0801368b 	.word	0x0801368b
 8013664:	0801367d 	.word	0x0801367d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013668:	6839      	ldr	r1, [r7, #0]
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f000 fa3c 	bl	8013ae8 <USBD_GetDescriptor>
          break;
 8013670:	e024      	b.n	80136bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013672:	6839      	ldr	r1, [r7, #0]
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f000 fc05 	bl	8013e84 <USBD_SetAddress>
          break;
 801367a:	e01f      	b.n	80136bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801367c:	6839      	ldr	r1, [r7, #0]
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f000 fc44 	bl	8013f0c <USBD_SetConfig>
 8013684:	4603      	mov	r3, r0
 8013686:	73fb      	strb	r3, [r7, #15]
          break;
 8013688:	e018      	b.n	80136bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801368a:	6839      	ldr	r1, [r7, #0]
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f000 fce7 	bl	8014060 <USBD_GetConfig>
          break;
 8013692:	e013      	b.n	80136bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013694:	6839      	ldr	r1, [r7, #0]
 8013696:	6878      	ldr	r0, [r7, #4]
 8013698:	f000 fd18 	bl	80140cc <USBD_GetStatus>
          break;
 801369c:	e00e      	b.n	80136bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801369e:	6839      	ldr	r1, [r7, #0]
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f000 fd47 	bl	8014134 <USBD_SetFeature>
          break;
 80136a6:	e009      	b.n	80136bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80136a8:	6839      	ldr	r1, [r7, #0]
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f000 fd6b 	bl	8014186 <USBD_ClrFeature>
          break;
 80136b0:	e004      	b.n	80136bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80136b2:	6839      	ldr	r1, [r7, #0]
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f000 fdc2 	bl	801423e <USBD_CtlError>
          break;
 80136ba:	bf00      	nop
      }
      break;
 80136bc:	e004      	b.n	80136c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80136be:	6839      	ldr	r1, [r7, #0]
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f000 fdbc 	bl	801423e <USBD_CtlError>
      break;
 80136c6:	bf00      	nop
  }

  return ret;
 80136c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3710      	adds	r7, #16
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}
 80136d2:	bf00      	nop

080136d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80136de:	2300      	movs	r3, #0
 80136e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80136ea:	2b40      	cmp	r3, #64	; 0x40
 80136ec:	d005      	beq.n	80136fa <USBD_StdItfReq+0x26>
 80136ee:	2b40      	cmp	r3, #64	; 0x40
 80136f0:	d852      	bhi.n	8013798 <USBD_StdItfReq+0xc4>
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d001      	beq.n	80136fa <USBD_StdItfReq+0x26>
 80136f6:	2b20      	cmp	r3, #32
 80136f8:	d14e      	bne.n	8013798 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013700:	b2db      	uxtb	r3, r3
 8013702:	3b01      	subs	r3, #1
 8013704:	2b02      	cmp	r3, #2
 8013706:	d840      	bhi.n	801378a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	889b      	ldrh	r3, [r3, #4]
 801370c:	b2db      	uxtb	r3, r3
 801370e:	2b03      	cmp	r3, #3
 8013710:	d836      	bhi.n	8013780 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	889b      	ldrh	r3, [r3, #4]
 8013716:	b2db      	uxtb	r3, r3
 8013718:	4619      	mov	r1, r3
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f7ff fe4c 	bl	80133b8 <USBD_CoreFindIF>
 8013720:	4603      	mov	r3, r0
 8013722:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013724:	7bbb      	ldrb	r3, [r7, #14]
 8013726:	2bff      	cmp	r3, #255	; 0xff
 8013728:	d01d      	beq.n	8013766 <USBD_StdItfReq+0x92>
 801372a:	7bbb      	ldrb	r3, [r7, #14]
 801372c:	2b03      	cmp	r3, #3
 801372e:	d81a      	bhi.n	8013766 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013730:	7bba      	ldrb	r2, [r7, #14]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	32ae      	adds	r2, #174	; 0xae
 8013736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801373a:	689b      	ldr	r3, [r3, #8]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00f      	beq.n	8013760 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013740:	7bba      	ldrb	r2, [r7, #14]
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013748:	7bba      	ldrb	r2, [r7, #14]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	32ae      	adds	r2, #174	; 0xae
 801374e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013752:	689b      	ldr	r3, [r3, #8]
 8013754:	6839      	ldr	r1, [r7, #0]
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	4798      	blx	r3
 801375a:	4603      	mov	r3, r0
 801375c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801375e:	e004      	b.n	801376a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013760:	2303      	movs	r3, #3
 8013762:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013764:	e001      	b.n	801376a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013766:	2303      	movs	r3, #3
 8013768:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	88db      	ldrh	r3, [r3, #6]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d110      	bne.n	8013794 <USBD_StdItfReq+0xc0>
 8013772:	7bfb      	ldrb	r3, [r7, #15]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d10d      	bne.n	8013794 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f000 fe2b 	bl	80143d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801377e:	e009      	b.n	8013794 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013780:	6839      	ldr	r1, [r7, #0]
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f000 fd5b 	bl	801423e <USBD_CtlError>
          break;
 8013788:	e004      	b.n	8013794 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801378a:	6839      	ldr	r1, [r7, #0]
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f000 fd56 	bl	801423e <USBD_CtlError>
          break;
 8013792:	e000      	b.n	8013796 <USBD_StdItfReq+0xc2>
          break;
 8013794:	bf00      	nop
      }
      break;
 8013796:	e004      	b.n	80137a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013798:	6839      	ldr	r1, [r7, #0]
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f000 fd4f 	bl	801423e <USBD_CtlError>
      break;
 80137a0:	bf00      	nop
  }

  return ret;
 80137a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	3710      	adds	r7, #16
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}

080137ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b084      	sub	sp, #16
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80137b6:	2300      	movs	r3, #0
 80137b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	889b      	ldrh	r3, [r3, #4]
 80137be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80137c8:	2b40      	cmp	r3, #64	; 0x40
 80137ca:	d007      	beq.n	80137dc <USBD_StdEPReq+0x30>
 80137cc:	2b40      	cmp	r3, #64	; 0x40
 80137ce:	f200 817f 	bhi.w	8013ad0 <USBD_StdEPReq+0x324>
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d02a      	beq.n	801382c <USBD_StdEPReq+0x80>
 80137d6:	2b20      	cmp	r3, #32
 80137d8:	f040 817a 	bne.w	8013ad0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80137dc:	7bbb      	ldrb	r3, [r7, #14]
 80137de:	4619      	mov	r1, r3
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f7ff fe38 	bl	8013456 <USBD_CoreFindEP>
 80137e6:	4603      	mov	r3, r0
 80137e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80137ea:	7b7b      	ldrb	r3, [r7, #13]
 80137ec:	2bff      	cmp	r3, #255	; 0xff
 80137ee:	f000 8174 	beq.w	8013ada <USBD_StdEPReq+0x32e>
 80137f2:	7b7b      	ldrb	r3, [r7, #13]
 80137f4:	2b03      	cmp	r3, #3
 80137f6:	f200 8170 	bhi.w	8013ada <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80137fa:	7b7a      	ldrb	r2, [r7, #13]
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013802:	7b7a      	ldrb	r2, [r7, #13]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	32ae      	adds	r2, #174	; 0xae
 8013808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801380c:	689b      	ldr	r3, [r3, #8]
 801380e:	2b00      	cmp	r3, #0
 8013810:	f000 8163 	beq.w	8013ada <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013814:	7b7a      	ldrb	r2, [r7, #13]
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	32ae      	adds	r2, #174	; 0xae
 801381a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801381e:	689b      	ldr	r3, [r3, #8]
 8013820:	6839      	ldr	r1, [r7, #0]
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	4798      	blx	r3
 8013826:	4603      	mov	r3, r0
 8013828:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801382a:	e156      	b.n	8013ada <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	785b      	ldrb	r3, [r3, #1]
 8013830:	2b03      	cmp	r3, #3
 8013832:	d008      	beq.n	8013846 <USBD_StdEPReq+0x9a>
 8013834:	2b03      	cmp	r3, #3
 8013836:	f300 8145 	bgt.w	8013ac4 <USBD_StdEPReq+0x318>
 801383a:	2b00      	cmp	r3, #0
 801383c:	f000 809b 	beq.w	8013976 <USBD_StdEPReq+0x1ca>
 8013840:	2b01      	cmp	r3, #1
 8013842:	d03c      	beq.n	80138be <USBD_StdEPReq+0x112>
 8013844:	e13e      	b.n	8013ac4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801384c:	b2db      	uxtb	r3, r3
 801384e:	2b02      	cmp	r3, #2
 8013850:	d002      	beq.n	8013858 <USBD_StdEPReq+0xac>
 8013852:	2b03      	cmp	r3, #3
 8013854:	d016      	beq.n	8013884 <USBD_StdEPReq+0xd8>
 8013856:	e02c      	b.n	80138b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013858:	7bbb      	ldrb	r3, [r7, #14]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d00d      	beq.n	801387a <USBD_StdEPReq+0xce>
 801385e:	7bbb      	ldrb	r3, [r7, #14]
 8013860:	2b80      	cmp	r3, #128	; 0x80
 8013862:	d00a      	beq.n	801387a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013864:	7bbb      	ldrb	r3, [r7, #14]
 8013866:	4619      	mov	r1, r3
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f005 fc2c 	bl	80190c6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801386e:	2180      	movs	r1, #128	; 0x80
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f005 fc28 	bl	80190c6 <USBD_LL_StallEP>
 8013876:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013878:	e020      	b.n	80138bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801387a:	6839      	ldr	r1, [r7, #0]
 801387c:	6878      	ldr	r0, [r7, #4]
 801387e:	f000 fcde 	bl	801423e <USBD_CtlError>
              break;
 8013882:	e01b      	b.n	80138bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	885b      	ldrh	r3, [r3, #2]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d10e      	bne.n	80138aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801388c:	7bbb      	ldrb	r3, [r7, #14]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d00b      	beq.n	80138aa <USBD_StdEPReq+0xfe>
 8013892:	7bbb      	ldrb	r3, [r7, #14]
 8013894:	2b80      	cmp	r3, #128	; 0x80
 8013896:	d008      	beq.n	80138aa <USBD_StdEPReq+0xfe>
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	88db      	ldrh	r3, [r3, #6]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d104      	bne.n	80138aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80138a0:	7bbb      	ldrb	r3, [r7, #14]
 80138a2:	4619      	mov	r1, r3
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f005 fc0e 	bl	80190c6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f000 fd92 	bl	80143d4 <USBD_CtlSendStatus>

              break;
 80138b0:	e004      	b.n	80138bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80138b2:	6839      	ldr	r1, [r7, #0]
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f000 fcc2 	bl	801423e <USBD_CtlError>
              break;
 80138ba:	bf00      	nop
          }
          break;
 80138bc:	e107      	b.n	8013ace <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138c4:	b2db      	uxtb	r3, r3
 80138c6:	2b02      	cmp	r3, #2
 80138c8:	d002      	beq.n	80138d0 <USBD_StdEPReq+0x124>
 80138ca:	2b03      	cmp	r3, #3
 80138cc:	d016      	beq.n	80138fc <USBD_StdEPReq+0x150>
 80138ce:	e04b      	b.n	8013968 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80138d0:	7bbb      	ldrb	r3, [r7, #14]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d00d      	beq.n	80138f2 <USBD_StdEPReq+0x146>
 80138d6:	7bbb      	ldrb	r3, [r7, #14]
 80138d8:	2b80      	cmp	r3, #128	; 0x80
 80138da:	d00a      	beq.n	80138f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80138dc:	7bbb      	ldrb	r3, [r7, #14]
 80138de:	4619      	mov	r1, r3
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f005 fbf0 	bl	80190c6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80138e6:	2180      	movs	r1, #128	; 0x80
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f005 fbec 	bl	80190c6 <USBD_LL_StallEP>
 80138ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80138f0:	e040      	b.n	8013974 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80138f2:	6839      	ldr	r1, [r7, #0]
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f000 fca2 	bl	801423e <USBD_CtlError>
              break;
 80138fa:	e03b      	b.n	8013974 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	885b      	ldrh	r3, [r3, #2]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d136      	bne.n	8013972 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013904:	7bbb      	ldrb	r3, [r7, #14]
 8013906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801390a:	2b00      	cmp	r3, #0
 801390c:	d004      	beq.n	8013918 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801390e:	7bbb      	ldrb	r3, [r7, #14]
 8013910:	4619      	mov	r1, r3
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f005 fbf6 	bl	8019104 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f000 fd5b 	bl	80143d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801391e:	7bbb      	ldrb	r3, [r7, #14]
 8013920:	4619      	mov	r1, r3
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f7ff fd97 	bl	8013456 <USBD_CoreFindEP>
 8013928:	4603      	mov	r3, r0
 801392a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801392c:	7b7b      	ldrb	r3, [r7, #13]
 801392e:	2bff      	cmp	r3, #255	; 0xff
 8013930:	d01f      	beq.n	8013972 <USBD_StdEPReq+0x1c6>
 8013932:	7b7b      	ldrb	r3, [r7, #13]
 8013934:	2b03      	cmp	r3, #3
 8013936:	d81c      	bhi.n	8013972 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013938:	7b7a      	ldrb	r2, [r7, #13]
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013940:	7b7a      	ldrb	r2, [r7, #13]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	32ae      	adds	r2, #174	; 0xae
 8013946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801394a:	689b      	ldr	r3, [r3, #8]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d010      	beq.n	8013972 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013950:	7b7a      	ldrb	r2, [r7, #13]
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	32ae      	adds	r2, #174	; 0xae
 8013956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801395a:	689b      	ldr	r3, [r3, #8]
 801395c:	6839      	ldr	r1, [r7, #0]
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	4798      	blx	r3
 8013962:	4603      	mov	r3, r0
 8013964:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013966:	e004      	b.n	8013972 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013968:	6839      	ldr	r1, [r7, #0]
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f000 fc67 	bl	801423e <USBD_CtlError>
              break;
 8013970:	e000      	b.n	8013974 <USBD_StdEPReq+0x1c8>
              break;
 8013972:	bf00      	nop
          }
          break;
 8013974:	e0ab      	b.n	8013ace <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801397c:	b2db      	uxtb	r3, r3
 801397e:	2b02      	cmp	r3, #2
 8013980:	d002      	beq.n	8013988 <USBD_StdEPReq+0x1dc>
 8013982:	2b03      	cmp	r3, #3
 8013984:	d032      	beq.n	80139ec <USBD_StdEPReq+0x240>
 8013986:	e097      	b.n	8013ab8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013988:	7bbb      	ldrb	r3, [r7, #14]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d007      	beq.n	801399e <USBD_StdEPReq+0x1f2>
 801398e:	7bbb      	ldrb	r3, [r7, #14]
 8013990:	2b80      	cmp	r3, #128	; 0x80
 8013992:	d004      	beq.n	801399e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013994:	6839      	ldr	r1, [r7, #0]
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 fc51 	bl	801423e <USBD_CtlError>
                break;
 801399c:	e091      	b.n	8013ac2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801399e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	da0b      	bge.n	80139be <USBD_StdEPReq+0x212>
 80139a6:	7bbb      	ldrb	r3, [r7, #14]
 80139a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80139ac:	4613      	mov	r3, r2
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	4413      	add	r3, r2
 80139b2:	009b      	lsls	r3, r3, #2
 80139b4:	3310      	adds	r3, #16
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	4413      	add	r3, r2
 80139ba:	3304      	adds	r3, #4
 80139bc:	e00b      	b.n	80139d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80139be:	7bbb      	ldrb	r3, [r7, #14]
 80139c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80139c4:	4613      	mov	r3, r2
 80139c6:	009b      	lsls	r3, r3, #2
 80139c8:	4413      	add	r3, r2
 80139ca:	009b      	lsls	r3, r3, #2
 80139cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80139d0:	687a      	ldr	r2, [r7, #4]
 80139d2:	4413      	add	r3, r2
 80139d4:	3304      	adds	r3, #4
 80139d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	2200      	movs	r2, #0
 80139dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	2202      	movs	r2, #2
 80139e2:	4619      	mov	r1, r3
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f000 fc9b 	bl	8014320 <USBD_CtlSendData>
              break;
 80139ea:	e06a      	b.n	8013ac2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80139ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	da11      	bge.n	8013a18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80139f4:	7bbb      	ldrb	r3, [r7, #14]
 80139f6:	f003 020f 	and.w	r2, r3, #15
 80139fa:	6879      	ldr	r1, [r7, #4]
 80139fc:	4613      	mov	r3, r2
 80139fe:	009b      	lsls	r3, r3, #2
 8013a00:	4413      	add	r3, r2
 8013a02:	009b      	lsls	r3, r3, #2
 8013a04:	440b      	add	r3, r1
 8013a06:	3324      	adds	r3, #36	; 0x24
 8013a08:	881b      	ldrh	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d117      	bne.n	8013a3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013a0e:	6839      	ldr	r1, [r7, #0]
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f000 fc14 	bl	801423e <USBD_CtlError>
                  break;
 8013a16:	e054      	b.n	8013ac2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013a18:	7bbb      	ldrb	r3, [r7, #14]
 8013a1a:	f003 020f 	and.w	r2, r3, #15
 8013a1e:	6879      	ldr	r1, [r7, #4]
 8013a20:	4613      	mov	r3, r2
 8013a22:	009b      	lsls	r3, r3, #2
 8013a24:	4413      	add	r3, r2
 8013a26:	009b      	lsls	r3, r3, #2
 8013a28:	440b      	add	r3, r1
 8013a2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013a2e:	881b      	ldrh	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d104      	bne.n	8013a3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013a34:	6839      	ldr	r1, [r7, #0]
 8013a36:	6878      	ldr	r0, [r7, #4]
 8013a38:	f000 fc01 	bl	801423e <USBD_CtlError>
                  break;
 8013a3c:	e041      	b.n	8013ac2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	da0b      	bge.n	8013a5e <USBD_StdEPReq+0x2b2>
 8013a46:	7bbb      	ldrb	r3, [r7, #14]
 8013a48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013a4c:	4613      	mov	r3, r2
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	4413      	add	r3, r2
 8013a52:	009b      	lsls	r3, r3, #2
 8013a54:	3310      	adds	r3, #16
 8013a56:	687a      	ldr	r2, [r7, #4]
 8013a58:	4413      	add	r3, r2
 8013a5a:	3304      	adds	r3, #4
 8013a5c:	e00b      	b.n	8013a76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013a5e:	7bbb      	ldrb	r3, [r7, #14]
 8013a60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013a64:	4613      	mov	r3, r2
 8013a66:	009b      	lsls	r3, r3, #2
 8013a68:	4413      	add	r3, r2
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013a70:	687a      	ldr	r2, [r7, #4]
 8013a72:	4413      	add	r3, r2
 8013a74:	3304      	adds	r3, #4
 8013a76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013a78:	7bbb      	ldrb	r3, [r7, #14]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d002      	beq.n	8013a84 <USBD_StdEPReq+0x2d8>
 8013a7e:	7bbb      	ldrb	r3, [r7, #14]
 8013a80:	2b80      	cmp	r3, #128	; 0x80
 8013a82:	d103      	bne.n	8013a8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	2200      	movs	r2, #0
 8013a88:	601a      	str	r2, [r3, #0]
 8013a8a:	e00e      	b.n	8013aaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013a8c:	7bbb      	ldrb	r3, [r7, #14]
 8013a8e:	4619      	mov	r1, r3
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f005 fb56 	bl	8019142 <USBD_LL_IsStallEP>
 8013a96:	4603      	mov	r3, r0
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d003      	beq.n	8013aa4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	2201      	movs	r2, #1
 8013aa0:	601a      	str	r2, [r3, #0]
 8013aa2:	e002      	b.n	8013aaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	2202      	movs	r2, #2
 8013aae:	4619      	mov	r1, r3
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f000 fc35 	bl	8014320 <USBD_CtlSendData>
              break;
 8013ab6:	e004      	b.n	8013ac2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013ab8:	6839      	ldr	r1, [r7, #0]
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f000 fbbf 	bl	801423e <USBD_CtlError>
              break;
 8013ac0:	bf00      	nop
          }
          break;
 8013ac2:	e004      	b.n	8013ace <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013ac4:	6839      	ldr	r1, [r7, #0]
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f000 fbb9 	bl	801423e <USBD_CtlError>
          break;
 8013acc:	bf00      	nop
      }
      break;
 8013ace:	e005      	b.n	8013adc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013ad0:	6839      	ldr	r1, [r7, #0]
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f000 fbb3 	bl	801423e <USBD_CtlError>
      break;
 8013ad8:	e000      	b.n	8013adc <USBD_StdEPReq+0x330>
      break;
 8013ada:	bf00      	nop
  }

  return ret;
 8013adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3710      	adds	r7, #16
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}
	...

08013ae8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b084      	sub	sp, #16
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013af2:	2300      	movs	r3, #0
 8013af4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013af6:	2300      	movs	r3, #0
 8013af8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013afa:	2300      	movs	r3, #0
 8013afc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	885b      	ldrh	r3, [r3, #2]
 8013b02:	0a1b      	lsrs	r3, r3, #8
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	3b01      	subs	r3, #1
 8013b08:	2b0e      	cmp	r3, #14
 8013b0a:	f200 818d 	bhi.w	8013e28 <USBD_GetDescriptor+0x340>
 8013b0e:	a201      	add	r2, pc, #4	; (adr r2, 8013b14 <USBD_GetDescriptor+0x2c>)
 8013b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b14:	08013b85 	.word	0x08013b85
 8013b18:	08013b9d 	.word	0x08013b9d
 8013b1c:	08013c15 	.word	0x08013c15
 8013b20:	08013e29 	.word	0x08013e29
 8013b24:	08013e29 	.word	0x08013e29
 8013b28:	08013d8b 	.word	0x08013d8b
 8013b2c:	08013dd3 	.word	0x08013dd3
 8013b30:	08013e29 	.word	0x08013e29
 8013b34:	08013e29 	.word	0x08013e29
 8013b38:	08013e29 	.word	0x08013e29
 8013b3c:	08013e29 	.word	0x08013e29
 8013b40:	08013e29 	.word	0x08013e29
 8013b44:	08013e29 	.word	0x08013e29
 8013b48:	08013e29 	.word	0x08013e29
 8013b4c:	08013b51 	.word	0x08013b51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b56:	69db      	ldr	r3, [r3, #28]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d00b      	beq.n	8013b74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b62:	69db      	ldr	r3, [r3, #28]
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	7c12      	ldrb	r2, [r2, #16]
 8013b68:	f107 0108 	add.w	r1, r7, #8
 8013b6c:	4610      	mov	r0, r2
 8013b6e:	4798      	blx	r3
 8013b70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013b72:	e161      	b.n	8013e38 <USBD_GetDescriptor+0x350>
        USBD_CtlError(pdev, req);
 8013b74:	6839      	ldr	r1, [r7, #0]
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f000 fb61 	bl	801423e <USBD_CtlError>
        err++;
 8013b7c:	7afb      	ldrb	r3, [r7, #11]
 8013b7e:	3301      	adds	r3, #1
 8013b80:	72fb      	strb	r3, [r7, #11]
      break;
 8013b82:	e159      	b.n	8013e38 <USBD_GetDescriptor+0x350>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	7c12      	ldrb	r2, [r2, #16]
 8013b90:	f107 0108 	add.w	r1, r7, #8
 8013b94:	4610      	mov	r0, r2
 8013b96:	4798      	blx	r3
 8013b98:	60f8      	str	r0, [r7, #12]
      break;
 8013b9a:	e14d      	b.n	8013e38 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	7c1b      	ldrb	r3, [r3, #16]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d11b      	bne.n	8013bdc <USBD_GetDescriptor+0xf4>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8013baa:	b2db      	uxtb	r3, r3
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d007      	beq.n	8013bc0 <USBD_GetDescriptor+0xd8>
        {
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
 8013bb0:	4b9c      	ldr	r3, [pc, #624]	; (8013e24 <USBD_GetDescriptor+0x33c>)
 8013bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bb4:	f107 0208 	add.w	r2, r7, #8
 8013bb8:	4610      	mov	r0, r2
 8013bba:	4798      	blx	r3
 8013bbc:	60f8      	str	r0, [r7, #12]
 8013bbe:	e008      	b.n	8013bd2 <USBD_GetDescriptor+0xea>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bc8:	f107 0208 	add.w	r2, r7, #8
 8013bcc:	4610      	mov	r0, r2
 8013bce:	4798      	blx	r3
 8013bd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	2202      	movs	r2, #2
 8013bd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013bda:	e12d      	b.n	8013e38 <USBD_GetDescriptor+0x350>
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d007      	beq.n	8013bf8 <USBD_GetDescriptor+0x110>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
 8013be8:	4b8e      	ldr	r3, [pc, #568]	; (8013e24 <USBD_GetDescriptor+0x33c>)
 8013bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bec:	f107 0208 	add.w	r2, r7, #8
 8013bf0:	4610      	mov	r0, r2
 8013bf2:	4798      	blx	r3
 8013bf4:	60f8      	str	r0, [r7, #12]
 8013bf6:	e008      	b.n	8013c0a <USBD_GetDescriptor+0x122>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c00:	f107 0208 	add.w	r2, r7, #8
 8013c04:	4610      	mov	r0, r2
 8013c06:	4798      	blx	r3
 8013c08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	2202      	movs	r2, #2
 8013c10:	701a      	strb	r2, [r3, #0]
      break;
 8013c12:	e111      	b.n	8013e38 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	885b      	ldrh	r3, [r3, #2]
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	2b05      	cmp	r3, #5
 8013c1c:	f200 80ac 	bhi.w	8013d78 <USBD_GetDescriptor+0x290>
 8013c20:	a201      	add	r2, pc, #4	; (adr r2, 8013c28 <USBD_GetDescriptor+0x140>)
 8013c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c26:	bf00      	nop
 8013c28:	08013c41 	.word	0x08013c41
 8013c2c:	08013c75 	.word	0x08013c75
 8013c30:	08013ca9 	.word	0x08013ca9
 8013c34:	08013cdd 	.word	0x08013cdd
 8013c38:	08013d11 	.word	0x08013d11
 8013c3c:	08013d45 	.word	0x08013d45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d00b      	beq.n	8013c64 <USBD_GetDescriptor+0x17c>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	7c12      	ldrb	r2, [r2, #16]
 8013c58:	f107 0108 	add.w	r1, r7, #8
 8013c5c:	4610      	mov	r0, r2
 8013c5e:	4798      	blx	r3
 8013c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c62:	e091      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013c64:	6839      	ldr	r1, [r7, #0]
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 fae9 	bl	801423e <USBD_CtlError>
            err++;
 8013c6c:	7afb      	ldrb	r3, [r7, #11]
 8013c6e:	3301      	adds	r3, #1
 8013c70:	72fb      	strb	r3, [r7, #11]
          break;
 8013c72:	e089      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d00b      	beq.n	8013c98 <USBD_GetDescriptor+0x1b0>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c86:	689b      	ldr	r3, [r3, #8]
 8013c88:	687a      	ldr	r2, [r7, #4]
 8013c8a:	7c12      	ldrb	r2, [r2, #16]
 8013c8c:	f107 0108 	add.w	r1, r7, #8
 8013c90:	4610      	mov	r0, r2
 8013c92:	4798      	blx	r3
 8013c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c96:	e077      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013c98:	6839      	ldr	r1, [r7, #0]
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f000 facf 	bl	801423e <USBD_CtlError>
            err++;
 8013ca0:	7afb      	ldrb	r3, [r7, #11]
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8013ca6:	e06f      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d00b      	beq.n	8013ccc <USBD_GetDescriptor+0x1e4>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cba:	68db      	ldr	r3, [r3, #12]
 8013cbc:	687a      	ldr	r2, [r7, #4]
 8013cbe:	7c12      	ldrb	r2, [r2, #16]
 8013cc0:	f107 0108 	add.w	r1, r7, #8
 8013cc4:	4610      	mov	r0, r2
 8013cc6:	4798      	blx	r3
 8013cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013cca:	e05d      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013ccc:	6839      	ldr	r1, [r7, #0]
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f000 fab5 	bl	801423e <USBD_CtlError>
            err++;
 8013cd4:	7afb      	ldrb	r3, [r7, #11]
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8013cda:	e055      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ce2:	691b      	ldr	r3, [r3, #16]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d00b      	beq.n	8013d00 <USBD_GetDescriptor+0x218>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cee:	691b      	ldr	r3, [r3, #16]
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	7c12      	ldrb	r2, [r2, #16]
 8013cf4:	f107 0108 	add.w	r1, r7, #8
 8013cf8:	4610      	mov	r0, r2
 8013cfa:	4798      	blx	r3
 8013cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013cfe:	e043      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013d00:	6839      	ldr	r1, [r7, #0]
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f000 fa9b 	bl	801423e <USBD_CtlError>
            err++;
 8013d08:	7afb      	ldrb	r3, [r7, #11]
 8013d0a:	3301      	adds	r3, #1
 8013d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8013d0e:	e03b      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d16:	695b      	ldr	r3, [r3, #20]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d00b      	beq.n	8013d34 <USBD_GetDescriptor+0x24c>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d22:	695b      	ldr	r3, [r3, #20]
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	7c12      	ldrb	r2, [r2, #16]
 8013d28:	f107 0108 	add.w	r1, r7, #8
 8013d2c:	4610      	mov	r0, r2
 8013d2e:	4798      	blx	r3
 8013d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d32:	e029      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013d34:	6839      	ldr	r1, [r7, #0]
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f000 fa81 	bl	801423e <USBD_CtlError>
            err++;
 8013d3c:	7afb      	ldrb	r3, [r7, #11]
 8013d3e:	3301      	adds	r3, #1
 8013d40:	72fb      	strb	r3, [r7, #11]
          break;
 8013d42:	e021      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d4a:	699b      	ldr	r3, [r3, #24]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d00b      	beq.n	8013d68 <USBD_GetDescriptor+0x280>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d56:	699b      	ldr	r3, [r3, #24]
 8013d58:	687a      	ldr	r2, [r7, #4]
 8013d5a:	7c12      	ldrb	r2, [r2, #16]
 8013d5c:	f107 0108 	add.w	r1, r7, #8
 8013d60:	4610      	mov	r0, r2
 8013d62:	4798      	blx	r3
 8013d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d66:	e00f      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>
            USBD_CtlError(pdev, req);
 8013d68:	6839      	ldr	r1, [r7, #0]
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f000 fa67 	bl	801423e <USBD_CtlError>
            err++;
 8013d70:	7afb      	ldrb	r3, [r7, #11]
 8013d72:	3301      	adds	r3, #1
 8013d74:	72fb      	strb	r3, [r7, #11]
          break;
 8013d76:	e007      	b.n	8013d88 <USBD_GetDescriptor+0x2a0>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013d78:	6839      	ldr	r1, [r7, #0]
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f000 fa5f 	bl	801423e <USBD_CtlError>
          err++;
 8013d80:	7afb      	ldrb	r3, [r7, #11]
 8013d82:	3301      	adds	r3, #1
 8013d84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013d86:	bf00      	nop
      }
      break;
 8013d88:	e056      	b.n	8013e38 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	7c1b      	ldrb	r3, [r3, #16]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d117      	bne.n	8013dc2 <USBD_GetDescriptor+0x2da>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8013d98:	b2db      	uxtb	r3, r3
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d007      	beq.n	8013dae <USBD_GetDescriptor+0x2c6>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
 8013d9e:	4b21      	ldr	r3, [pc, #132]	; (8013e24 <USBD_GetDescriptor+0x33c>)
 8013da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013da2:	f107 0208 	add.w	r2, r7, #8
 8013da6:	4610      	mov	r0, r2
 8013da8:	4798      	blx	r3
 8013daa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013dac:	e044      	b.n	8013e38 <USBD_GetDescriptor+0x350>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013db6:	f107 0208 	add.w	r2, r7, #8
 8013dba:	4610      	mov	r0, r2
 8013dbc:	4798      	blx	r3
 8013dbe:	60f8      	str	r0, [r7, #12]
      break;
 8013dc0:	e03a      	b.n	8013e38 <USBD_GetDescriptor+0x350>
        USBD_CtlError(pdev, req);
 8013dc2:	6839      	ldr	r1, [r7, #0]
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f000 fa3a 	bl	801423e <USBD_CtlError>
        err++;
 8013dca:	7afb      	ldrb	r3, [r7, #11]
 8013dcc:	3301      	adds	r3, #1
 8013dce:	72fb      	strb	r3, [r7, #11]
      break;
 8013dd0:	e032      	b.n	8013e38 <USBD_GetDescriptor+0x350>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	7c1b      	ldrb	r3, [r3, #16]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d11b      	bne.n	8013e12 <USBD_GetDescriptor+0x32a>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d007      	beq.n	8013df6 <USBD_GetDescriptor+0x30e>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
 8013de6:	4b0f      	ldr	r3, [pc, #60]	; (8013e24 <USBD_GetDescriptor+0x33c>)
 8013de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dea:	f107 0208 	add.w	r2, r7, #8
 8013dee:	4610      	mov	r0, r2
 8013df0:	4798      	blx	r3
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	e008      	b.n	8013e08 <USBD_GetDescriptor+0x320>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dfe:	f107 0208 	add.w	r2, r7, #8
 8013e02:	4610      	mov	r0, r2
 8013e04:	4798      	blx	r3
 8013e06:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	2207      	movs	r2, #7
 8013e0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013e10:	e012      	b.n	8013e38 <USBD_GetDescriptor+0x350>
        USBD_CtlError(pdev, req);
 8013e12:	6839      	ldr	r1, [r7, #0]
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f000 fa12 	bl	801423e <USBD_CtlError>
        err++;
 8013e1a:	7afb      	ldrb	r3, [r7, #11]
 8013e1c:	3301      	adds	r3, #1
 8013e1e:	72fb      	strb	r3, [r7, #11]
      break;
 8013e20:	e00a      	b.n	8013e38 <USBD_GetDescriptor+0x350>
 8013e22:	bf00      	nop
 8013e24:	24000060 	.word	0x24000060

    default:
      USBD_CtlError(pdev, req);
 8013e28:	6839      	ldr	r1, [r7, #0]
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f000 fa07 	bl	801423e <USBD_CtlError>
      err++;
 8013e30:	7afb      	ldrb	r3, [r7, #11]
 8013e32:	3301      	adds	r3, #1
 8013e34:	72fb      	strb	r3, [r7, #11]
      break;
 8013e36:	bf00      	nop
  }

  if (err != 0U)
 8013e38:	7afb      	ldrb	r3, [r7, #11]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d11e      	bne.n	8013e7c <USBD_GetDescriptor+0x394>
  {
    return;
  }

  if (req->wLength != 0U)
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	88db      	ldrh	r3, [r3, #6]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d016      	beq.n	8013e74 <USBD_GetDescriptor+0x38c>
  {
    if (len != 0U)
 8013e46:	893b      	ldrh	r3, [r7, #8]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d00e      	beq.n	8013e6a <USBD_GetDescriptor+0x382>
    {
      len = MIN(len, req->wLength);
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	88da      	ldrh	r2, [r3, #6]
 8013e50:	893b      	ldrh	r3, [r7, #8]
 8013e52:	4293      	cmp	r3, r2
 8013e54:	bf28      	it	cs
 8013e56:	4613      	movcs	r3, r2
 8013e58:	b29b      	uxth	r3, r3
 8013e5a:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013e5c:	893b      	ldrh	r3, [r7, #8]
 8013e5e:	461a      	mov	r2, r3
 8013e60:	68f9      	ldr	r1, [r7, #12]
 8013e62:	6878      	ldr	r0, [r7, #4]
 8013e64:	f000 fa5c 	bl	8014320 <USBD_CtlSendData>
 8013e68:	e009      	b.n	8013e7e <USBD_GetDescriptor+0x396>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013e6a:	6839      	ldr	r1, [r7, #0]
 8013e6c:	6878      	ldr	r0, [r7, #4]
 8013e6e:	f000 f9e6 	bl	801423e <USBD_CtlError>
 8013e72:	e004      	b.n	8013e7e <USBD_GetDescriptor+0x396>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f000 faad 	bl	80143d4 <USBD_CtlSendStatus>
 8013e7a:	e000      	b.n	8013e7e <USBD_GetDescriptor+0x396>
    return;
 8013e7c:	bf00      	nop
  }
}
 8013e7e:	3710      	adds	r7, #16
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
 8013e8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	889b      	ldrh	r3, [r3, #4]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d131      	bne.n	8013efa <USBD_SetAddress+0x76>
 8013e96:	683b      	ldr	r3, [r7, #0]
 8013e98:	88db      	ldrh	r3, [r3, #6]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d12d      	bne.n	8013efa <USBD_SetAddress+0x76>
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	885b      	ldrh	r3, [r3, #2]
 8013ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8013ea4:	d829      	bhi.n	8013efa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	885b      	ldrh	r3, [r3, #2]
 8013eaa:	b2db      	uxtb	r3, r3
 8013eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013eb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013eb8:	b2db      	uxtb	r3, r3
 8013eba:	2b03      	cmp	r3, #3
 8013ebc:	d104      	bne.n	8013ec8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013ebe:	6839      	ldr	r1, [r7, #0]
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f000 f9bc 	bl	801423e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ec6:	e01d      	b.n	8013f04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	7bfa      	ldrb	r2, [r7, #15]
 8013ecc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013ed0:	7bfb      	ldrb	r3, [r7, #15]
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f005 f960 	bl	801919a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f000 fa7a 	bl	80143d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013ee0:	7bfb      	ldrb	r3, [r7, #15]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d004      	beq.n	8013ef0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2202      	movs	r2, #2
 8013eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013eee:	e009      	b.n	8013f04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ef8:	e004      	b.n	8013f04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013efa:	6839      	ldr	r1, [r7, #0]
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f000 f99e 	bl	801423e <USBD_CtlError>
  }
}
 8013f02:	bf00      	nop
 8013f04:	bf00      	nop
 8013f06:	3710      	adds	r7, #16
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b084      	sub	sp, #16
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f16:	2300      	movs	r3, #0
 8013f18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	885b      	ldrh	r3, [r3, #2]
 8013f1e:	b2da      	uxtb	r2, r3
 8013f20:	4b4e      	ldr	r3, [pc, #312]	; (801405c <USBD_SetConfig+0x150>)
 8013f22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013f24:	4b4d      	ldr	r3, [pc, #308]	; (801405c <USBD_SetConfig+0x150>)
 8013f26:	781b      	ldrb	r3, [r3, #0]
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	d905      	bls.n	8013f38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013f2c:	6839      	ldr	r1, [r7, #0]
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f000 f985 	bl	801423e <USBD_CtlError>
    return USBD_FAIL;
 8013f34:	2303      	movs	r3, #3
 8013f36:	e08c      	b.n	8014052 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f3e:	b2db      	uxtb	r3, r3
 8013f40:	2b02      	cmp	r3, #2
 8013f42:	d002      	beq.n	8013f4a <USBD_SetConfig+0x3e>
 8013f44:	2b03      	cmp	r3, #3
 8013f46:	d029      	beq.n	8013f9c <USBD_SetConfig+0x90>
 8013f48:	e075      	b.n	8014036 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013f4a:	4b44      	ldr	r3, [pc, #272]	; (801405c <USBD_SetConfig+0x150>)
 8013f4c:	781b      	ldrb	r3, [r3, #0]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d020      	beq.n	8013f94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013f52:	4b42      	ldr	r3, [pc, #264]	; (801405c <USBD_SetConfig+0x150>)
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	461a      	mov	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013f5c:	4b3f      	ldr	r3, [pc, #252]	; (801405c <USBD_SetConfig+0x150>)
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	4619      	mov	r1, r3
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f7fe fe53 	bl	8012c0e <USBD_SetClassConfig>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013f6c:	7bfb      	ldrb	r3, [r7, #15]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d008      	beq.n	8013f84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013f72:	6839      	ldr	r1, [r7, #0]
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f000 f962 	bl	801423e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	2202      	movs	r2, #2
 8013f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013f82:	e065      	b.n	8014050 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f000 fa25 	bl	80143d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2203      	movs	r2, #3
 8013f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013f92:	e05d      	b.n	8014050 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f000 fa1d 	bl	80143d4 <USBD_CtlSendStatus>
      break;
 8013f9a:	e059      	b.n	8014050 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013f9c:	4b2f      	ldr	r3, [pc, #188]	; (801405c <USBD_SetConfig+0x150>)
 8013f9e:	781b      	ldrb	r3, [r3, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d112      	bne.n	8013fca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2202      	movs	r2, #2
 8013fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013fac:	4b2b      	ldr	r3, [pc, #172]	; (801405c <USBD_SetConfig+0x150>)
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	461a      	mov	r2, r3
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013fb6:	4b29      	ldr	r3, [pc, #164]	; (801405c <USBD_SetConfig+0x150>)
 8013fb8:	781b      	ldrb	r3, [r3, #0]
 8013fba:	4619      	mov	r1, r3
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f7fe fe62 	bl	8012c86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f000 fa06 	bl	80143d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013fc8:	e042      	b.n	8014050 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013fca:	4b24      	ldr	r3, [pc, #144]	; (801405c <USBD_SetConfig+0x150>)
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d02a      	beq.n	801402e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	4619      	mov	r1, r3
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	f7fe fe50 	bl	8012c86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013fe6:	4b1d      	ldr	r3, [pc, #116]	; (801405c <USBD_SetConfig+0x150>)
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	461a      	mov	r2, r3
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013ff0:	4b1a      	ldr	r3, [pc, #104]	; (801405c <USBD_SetConfig+0x150>)
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	6878      	ldr	r0, [r7, #4]
 8013ff8:	f7fe fe09 	bl	8012c0e <USBD_SetClassConfig>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014000:	7bfb      	ldrb	r3, [r7, #15]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d00f      	beq.n	8014026 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014006:	6839      	ldr	r1, [r7, #0]
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 f918 	bl	801423e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	685b      	ldr	r3, [r3, #4]
 8014012:	b2db      	uxtb	r3, r3
 8014014:	4619      	mov	r1, r3
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f7fe fe35 	bl	8012c86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2202      	movs	r2, #2
 8014020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014024:	e014      	b.n	8014050 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f000 f9d4 	bl	80143d4 <USBD_CtlSendStatus>
      break;
 801402c:	e010      	b.n	8014050 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f000 f9d0 	bl	80143d4 <USBD_CtlSendStatus>
      break;
 8014034:	e00c      	b.n	8014050 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014036:	6839      	ldr	r1, [r7, #0]
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f000 f900 	bl	801423e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801403e:	4b07      	ldr	r3, [pc, #28]	; (801405c <USBD_SetConfig+0x150>)
 8014040:	781b      	ldrb	r3, [r3, #0]
 8014042:	4619      	mov	r1, r3
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f7fe fe1e 	bl	8012c86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801404a:	2303      	movs	r3, #3
 801404c:	73fb      	strb	r3, [r7, #15]
      break;
 801404e:	bf00      	nop
  }

  return ret;
 8014050:	7bfb      	ldrb	r3, [r7, #15]
}
 8014052:	4618      	mov	r0, r3
 8014054:	3710      	adds	r7, #16
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}
 801405a:	bf00      	nop
 801405c:	24000b5c 	.word	0x24000b5c

08014060 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	88db      	ldrh	r3, [r3, #6]
 801406e:	2b01      	cmp	r3, #1
 8014070:	d004      	beq.n	801407c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014072:	6839      	ldr	r1, [r7, #0]
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f000 f8e2 	bl	801423e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801407a:	e023      	b.n	80140c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014082:	b2db      	uxtb	r3, r3
 8014084:	2b02      	cmp	r3, #2
 8014086:	dc02      	bgt.n	801408e <USBD_GetConfig+0x2e>
 8014088:	2b00      	cmp	r3, #0
 801408a:	dc03      	bgt.n	8014094 <USBD_GetConfig+0x34>
 801408c:	e015      	b.n	80140ba <USBD_GetConfig+0x5a>
 801408e:	2b03      	cmp	r3, #3
 8014090:	d00b      	beq.n	80140aa <USBD_GetConfig+0x4a>
 8014092:	e012      	b.n	80140ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2200      	movs	r2, #0
 8014098:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	3308      	adds	r3, #8
 801409e:	2201      	movs	r2, #1
 80140a0:	4619      	mov	r1, r3
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f000 f93c 	bl	8014320 <USBD_CtlSendData>
        break;
 80140a8:	e00c      	b.n	80140c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	3304      	adds	r3, #4
 80140ae:	2201      	movs	r2, #1
 80140b0:	4619      	mov	r1, r3
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f000 f934 	bl	8014320 <USBD_CtlSendData>
        break;
 80140b8:	e004      	b.n	80140c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80140ba:	6839      	ldr	r1, [r7, #0]
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f000 f8be 	bl	801423e <USBD_CtlError>
        break;
 80140c2:	bf00      	nop
}
 80140c4:	bf00      	nop
 80140c6:	3708      	adds	r7, #8
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140dc:	b2db      	uxtb	r3, r3
 80140de:	3b01      	subs	r3, #1
 80140e0:	2b02      	cmp	r3, #2
 80140e2:	d81e      	bhi.n	8014122 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	88db      	ldrh	r3, [r3, #6]
 80140e8:	2b02      	cmp	r3, #2
 80140ea:	d004      	beq.n	80140f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80140ec:	6839      	ldr	r1, [r7, #0]
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f000 f8a5 	bl	801423e <USBD_CtlError>
        break;
 80140f4:	e01a      	b.n	801412c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2201      	movs	r2, #1
 80140fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014102:	2b00      	cmp	r3, #0
 8014104:	d005      	beq.n	8014112 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	68db      	ldr	r3, [r3, #12]
 801410a:	f043 0202 	orr.w	r2, r3, #2
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	330c      	adds	r3, #12
 8014116:	2202      	movs	r2, #2
 8014118:	4619      	mov	r1, r3
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 f900 	bl	8014320 <USBD_CtlSendData>
      break;
 8014120:	e004      	b.n	801412c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014122:	6839      	ldr	r1, [r7, #0]
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f000 f88a 	bl	801423e <USBD_CtlError>
      break;
 801412a:	bf00      	nop
  }
}
 801412c:	bf00      	nop
 801412e:	3708      	adds	r7, #8
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}

08014134 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b082      	sub	sp, #8
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	885b      	ldrh	r3, [r3, #2]
 8014142:	2b01      	cmp	r3, #1
 8014144:	d107      	bne.n	8014156 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2201      	movs	r2, #1
 801414a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f000 f940 	bl	80143d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014154:	e013      	b.n	801417e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	885b      	ldrh	r3, [r3, #2]
 801415a:	2b02      	cmp	r3, #2
 801415c:	d10b      	bne.n	8014176 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	889b      	ldrh	r3, [r3, #4]
 8014162:	0a1b      	lsrs	r3, r3, #8
 8014164:	b29b      	uxth	r3, r3
 8014166:	b2da      	uxtb	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f000 f930 	bl	80143d4 <USBD_CtlSendStatus>
}
 8014174:	e003      	b.n	801417e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014176:	6839      	ldr	r1, [r7, #0]
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f000 f860 	bl	801423e <USBD_CtlError>
}
 801417e:	bf00      	nop
 8014180:	3708      	adds	r7, #8
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}

08014186 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014186:	b580      	push	{r7, lr}
 8014188:	b082      	sub	sp, #8
 801418a:	af00      	add	r7, sp, #0
 801418c:	6078      	str	r0, [r7, #4]
 801418e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014196:	b2db      	uxtb	r3, r3
 8014198:	3b01      	subs	r3, #1
 801419a:	2b02      	cmp	r3, #2
 801419c:	d80b      	bhi.n	80141b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	885b      	ldrh	r3, [r3, #2]
 80141a2:	2b01      	cmp	r3, #1
 80141a4:	d10c      	bne.n	80141c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	2200      	movs	r2, #0
 80141aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f000 f910 	bl	80143d4 <USBD_CtlSendStatus>
      }
      break;
 80141b4:	e004      	b.n	80141c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80141b6:	6839      	ldr	r1, [r7, #0]
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f000 f840 	bl	801423e <USBD_CtlError>
      break;
 80141be:	e000      	b.n	80141c2 <USBD_ClrFeature+0x3c>
      break;
 80141c0:	bf00      	nop
  }
}
 80141c2:	bf00      	nop
 80141c4:	3708      	adds	r7, #8
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}

080141ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80141ca:	b580      	push	{r7, lr}
 80141cc:	b084      	sub	sp, #16
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	6078      	str	r0, [r7, #4]
 80141d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	781a      	ldrb	r2, [r3, #0]
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	3301      	adds	r3, #1
 80141e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	781a      	ldrb	r2, [r3, #0]
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	3301      	adds	r3, #1
 80141f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80141f4:	68f8      	ldr	r0, [r7, #12]
 80141f6:	f7ff f9dc 	bl	80135b2 <SWAPBYTE>
 80141fa:	4603      	mov	r3, r0
 80141fc:	461a      	mov	r2, r3
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	3301      	adds	r3, #1
 8014206:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	3301      	adds	r3, #1
 801420c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801420e:	68f8      	ldr	r0, [r7, #12]
 8014210:	f7ff f9cf 	bl	80135b2 <SWAPBYTE>
 8014214:	4603      	mov	r3, r0
 8014216:	461a      	mov	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	3301      	adds	r3, #1
 8014220:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	3301      	adds	r3, #1
 8014226:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014228:	68f8      	ldr	r0, [r7, #12]
 801422a:	f7ff f9c2 	bl	80135b2 <SWAPBYTE>
 801422e:	4603      	mov	r3, r0
 8014230:	461a      	mov	r2, r3
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	80da      	strh	r2, [r3, #6]
}
 8014236:	bf00      	nop
 8014238:	3710      	adds	r7, #16
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}

0801423e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801423e:	b580      	push	{r7, lr}
 8014240:	b082      	sub	sp, #8
 8014242:	af00      	add	r7, sp, #0
 8014244:	6078      	str	r0, [r7, #4]
 8014246:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014248:	2180      	movs	r1, #128	; 0x80
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f004 ff3b 	bl	80190c6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014250:	2100      	movs	r1, #0
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f004 ff37 	bl	80190c6 <USBD_LL_StallEP>
}
 8014258:	bf00      	nop
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b086      	sub	sp, #24
 8014264:	af00      	add	r7, sp, #0
 8014266:	60f8      	str	r0, [r7, #12]
 8014268:	60b9      	str	r1, [r7, #8]
 801426a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801426c:	2300      	movs	r3, #0
 801426e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d036      	beq.n	80142e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801427a:	6938      	ldr	r0, [r7, #16]
 801427c:	f000 f836 	bl	80142ec <USBD_GetLen>
 8014280:	4603      	mov	r3, r0
 8014282:	3301      	adds	r3, #1
 8014284:	b29b      	uxth	r3, r3
 8014286:	005b      	lsls	r3, r3, #1
 8014288:	b29a      	uxth	r2, r3
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801428e:	7dfb      	ldrb	r3, [r7, #23]
 8014290:	68ba      	ldr	r2, [r7, #8]
 8014292:	4413      	add	r3, r2
 8014294:	687a      	ldr	r2, [r7, #4]
 8014296:	7812      	ldrb	r2, [r2, #0]
 8014298:	701a      	strb	r2, [r3, #0]
  idx++;
 801429a:	7dfb      	ldrb	r3, [r7, #23]
 801429c:	3301      	adds	r3, #1
 801429e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80142a0:	7dfb      	ldrb	r3, [r7, #23]
 80142a2:	68ba      	ldr	r2, [r7, #8]
 80142a4:	4413      	add	r3, r2
 80142a6:	2203      	movs	r2, #3
 80142a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80142aa:	7dfb      	ldrb	r3, [r7, #23]
 80142ac:	3301      	adds	r3, #1
 80142ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80142b0:	e013      	b.n	80142da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80142b2:	7dfb      	ldrb	r3, [r7, #23]
 80142b4:	68ba      	ldr	r2, [r7, #8]
 80142b6:	4413      	add	r3, r2
 80142b8:	693a      	ldr	r2, [r7, #16]
 80142ba:	7812      	ldrb	r2, [r2, #0]
 80142bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	3301      	adds	r3, #1
 80142c2:	613b      	str	r3, [r7, #16]
    idx++;
 80142c4:	7dfb      	ldrb	r3, [r7, #23]
 80142c6:	3301      	adds	r3, #1
 80142c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80142ca:	7dfb      	ldrb	r3, [r7, #23]
 80142cc:	68ba      	ldr	r2, [r7, #8]
 80142ce:	4413      	add	r3, r2
 80142d0:	2200      	movs	r2, #0
 80142d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80142d4:	7dfb      	ldrb	r3, [r7, #23]
 80142d6:	3301      	adds	r3, #1
 80142d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d1e7      	bne.n	80142b2 <USBD_GetString+0x52>
 80142e2:	e000      	b.n	80142e6 <USBD_GetString+0x86>
    return;
 80142e4:	bf00      	nop
  }
}
 80142e6:	3718      	adds	r7, #24
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd80      	pop	{r7, pc}

080142ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80142ec:	b480      	push	{r7}
 80142ee:	b085      	sub	sp, #20
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80142f4:	2300      	movs	r3, #0
 80142f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80142fc:	e005      	b.n	801430a <USBD_GetLen+0x1e>
  {
    len++;
 80142fe:	7bfb      	ldrb	r3, [r7, #15]
 8014300:	3301      	adds	r3, #1
 8014302:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	3301      	adds	r3, #1
 8014308:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d1f5      	bne.n	80142fe <USBD_GetLen+0x12>
  }

  return len;
 8014312:	7bfb      	ldrb	r3, [r7, #15]
}
 8014314:	4618      	mov	r0, r3
 8014316:	3714      	adds	r7, #20
 8014318:	46bd      	mov	sp, r7
 801431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431e:	4770      	bx	lr

08014320 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b084      	sub	sp, #16
 8014324:	af00      	add	r7, sp, #0
 8014326:	60f8      	str	r0, [r7, #12]
 8014328:	60b9      	str	r1, [r7, #8]
 801432a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	2202      	movs	r2, #2
 8014330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	687a      	ldr	r2, [r7, #4]
 8014338:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	687a      	ldr	r2, [r7, #4]
 801433e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	68ba      	ldr	r2, [r7, #8]
 8014344:	2100      	movs	r1, #0
 8014346:	68f8      	ldr	r0, [r7, #12]
 8014348:	f004 ff46 	bl	80191d8 <USBD_LL_Transmit>

  return USBD_OK;
 801434c:	2300      	movs	r3, #0
}
 801434e:	4618      	mov	r0, r3
 8014350:	3710      	adds	r7, #16
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}

08014356 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014356:	b580      	push	{r7, lr}
 8014358:	b084      	sub	sp, #16
 801435a:	af00      	add	r7, sp, #0
 801435c:	60f8      	str	r0, [r7, #12]
 801435e:	60b9      	str	r1, [r7, #8]
 8014360:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	68ba      	ldr	r2, [r7, #8]
 8014366:	2100      	movs	r1, #0
 8014368:	68f8      	ldr	r0, [r7, #12]
 801436a:	f004 ff35 	bl	80191d8 <USBD_LL_Transmit>

  return USBD_OK;
 801436e:	2300      	movs	r3, #0
}
 8014370:	4618      	mov	r0, r3
 8014372:	3710      	adds	r7, #16
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	60f8      	str	r0, [r7, #12]
 8014380:	60b9      	str	r1, [r7, #8]
 8014382:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	2203      	movs	r2, #3
 8014388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	687a      	ldr	r2, [r7, #4]
 8014390:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	68ba      	ldr	r2, [r7, #8]
 80143a0:	2100      	movs	r1, #0
 80143a2:	68f8      	ldr	r0, [r7, #12]
 80143a4:	f004 ff39 	bl	801921a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80143a8:	2300      	movs	r3, #0
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3710      	adds	r7, #16
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}

080143b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80143b2:	b580      	push	{r7, lr}
 80143b4:	b084      	sub	sp, #16
 80143b6:	af00      	add	r7, sp, #0
 80143b8:	60f8      	str	r0, [r7, #12]
 80143ba:	60b9      	str	r1, [r7, #8]
 80143bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	68ba      	ldr	r2, [r7, #8]
 80143c2:	2100      	movs	r1, #0
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f004 ff28 	bl	801921a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80143ca:	2300      	movs	r3, #0
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3710      	adds	r7, #16
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}

080143d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2204      	movs	r2, #4
 80143e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80143e4:	2300      	movs	r3, #0
 80143e6:	2200      	movs	r2, #0
 80143e8:	2100      	movs	r1, #0
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f004 fef4 	bl	80191d8 <USBD_LL_Transmit>

  return USBD_OK;
 80143f0:	2300      	movs	r3, #0
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3708      	adds	r7, #8
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}

080143fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80143fa:	b580      	push	{r7, lr}
 80143fc:	b082      	sub	sp, #8
 80143fe:	af00      	add	r7, sp, #0
 8014400:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	2205      	movs	r2, #5
 8014406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801440a:	2300      	movs	r3, #0
 801440c:	2200      	movs	r2, #0
 801440e:	2100      	movs	r1, #0
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f004 ff02 	bl	801921a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014416:	2300      	movs	r3, #0
}
 8014418:	4618      	mov	r0, r3
 801441a:	3708      	adds	r7, #8
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b084      	sub	sp, #16
 8014424:	af00      	add	r7, sp, #0
 8014426:	4603      	mov	r3, r0
 8014428:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801442a:	79fb      	ldrb	r3, [r7, #7]
 801442c:	4a08      	ldr	r2, [pc, #32]	; (8014450 <disk_status+0x30>)
 801442e:	009b      	lsls	r3, r3, #2
 8014430:	4413      	add	r3, r2
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	685b      	ldr	r3, [r3, #4]
 8014436:	79fa      	ldrb	r2, [r7, #7]
 8014438:	4905      	ldr	r1, [pc, #20]	; (8014450 <disk_status+0x30>)
 801443a:	440a      	add	r2, r1
 801443c:	7a12      	ldrb	r2, [r2, #8]
 801443e:	4610      	mov	r0, r2
 8014440:	4798      	blx	r3
 8014442:	4603      	mov	r3, r0
 8014444:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014446:	7bfb      	ldrb	r3, [r7, #15]
}
 8014448:	4618      	mov	r0, r3
 801444a:	3710      	adds	r7, #16
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}
 8014450:	24000b88 	.word	0x24000b88

08014454 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b084      	sub	sp, #16
 8014458:	af00      	add	r7, sp, #0
 801445a:	4603      	mov	r3, r0
 801445c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801445e:	2300      	movs	r3, #0
 8014460:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014462:	79fb      	ldrb	r3, [r7, #7]
 8014464:	4a0d      	ldr	r2, [pc, #52]	; (801449c <disk_initialize+0x48>)
 8014466:	5cd3      	ldrb	r3, [r2, r3]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d111      	bne.n	8014490 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801446c:	79fb      	ldrb	r3, [r7, #7]
 801446e:	4a0b      	ldr	r2, [pc, #44]	; (801449c <disk_initialize+0x48>)
 8014470:	2101      	movs	r1, #1
 8014472:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014474:	79fb      	ldrb	r3, [r7, #7]
 8014476:	4a09      	ldr	r2, [pc, #36]	; (801449c <disk_initialize+0x48>)
 8014478:	009b      	lsls	r3, r3, #2
 801447a:	4413      	add	r3, r2
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	79fa      	ldrb	r2, [r7, #7]
 8014482:	4906      	ldr	r1, [pc, #24]	; (801449c <disk_initialize+0x48>)
 8014484:	440a      	add	r2, r1
 8014486:	7a12      	ldrb	r2, [r2, #8]
 8014488:	4610      	mov	r0, r2
 801448a:	4798      	blx	r3
 801448c:	4603      	mov	r3, r0
 801448e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014490:	7bfb      	ldrb	r3, [r7, #15]
}
 8014492:	4618      	mov	r0, r3
 8014494:	3710      	adds	r7, #16
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
 801449a:	bf00      	nop
 801449c:	24000b88 	.word	0x24000b88

080144a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80144a0:	b590      	push	{r4, r7, lr}
 80144a2:	b087      	sub	sp, #28
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	60b9      	str	r1, [r7, #8]
 80144a8:	607a      	str	r2, [r7, #4]
 80144aa:	603b      	str	r3, [r7, #0]
 80144ac:	4603      	mov	r3, r0
 80144ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80144b0:	7bfb      	ldrb	r3, [r7, #15]
 80144b2:	4a0a      	ldr	r2, [pc, #40]	; (80144dc <disk_read+0x3c>)
 80144b4:	009b      	lsls	r3, r3, #2
 80144b6:	4413      	add	r3, r2
 80144b8:	685b      	ldr	r3, [r3, #4]
 80144ba:	689c      	ldr	r4, [r3, #8]
 80144bc:	7bfb      	ldrb	r3, [r7, #15]
 80144be:	4a07      	ldr	r2, [pc, #28]	; (80144dc <disk_read+0x3c>)
 80144c0:	4413      	add	r3, r2
 80144c2:	7a18      	ldrb	r0, [r3, #8]
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	687a      	ldr	r2, [r7, #4]
 80144c8:	68b9      	ldr	r1, [r7, #8]
 80144ca:	47a0      	blx	r4
 80144cc:	4603      	mov	r3, r0
 80144ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80144d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	371c      	adds	r7, #28
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd90      	pop	{r4, r7, pc}
 80144da:	bf00      	nop
 80144dc:	24000b88 	.word	0x24000b88

080144e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80144e0:	b590      	push	{r4, r7, lr}
 80144e2:	b087      	sub	sp, #28
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	60b9      	str	r1, [r7, #8]
 80144e8:	607a      	str	r2, [r7, #4]
 80144ea:	603b      	str	r3, [r7, #0]
 80144ec:	4603      	mov	r3, r0
 80144ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80144f0:	7bfb      	ldrb	r3, [r7, #15]
 80144f2:	4a0a      	ldr	r2, [pc, #40]	; (801451c <disk_write+0x3c>)
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	4413      	add	r3, r2
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	68dc      	ldr	r4, [r3, #12]
 80144fc:	7bfb      	ldrb	r3, [r7, #15]
 80144fe:	4a07      	ldr	r2, [pc, #28]	; (801451c <disk_write+0x3c>)
 8014500:	4413      	add	r3, r2
 8014502:	7a18      	ldrb	r0, [r3, #8]
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	68b9      	ldr	r1, [r7, #8]
 801450a:	47a0      	blx	r4
 801450c:	4603      	mov	r3, r0
 801450e:	75fb      	strb	r3, [r7, #23]
  return res;
 8014510:	7dfb      	ldrb	r3, [r7, #23]
}
 8014512:	4618      	mov	r0, r3
 8014514:	371c      	adds	r7, #28
 8014516:	46bd      	mov	sp, r7
 8014518:	bd90      	pop	{r4, r7, pc}
 801451a:	bf00      	nop
 801451c:	24000b88 	.word	0x24000b88

08014520 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	4603      	mov	r3, r0
 8014528:	603a      	str	r2, [r7, #0]
 801452a:	71fb      	strb	r3, [r7, #7]
 801452c:	460b      	mov	r3, r1
 801452e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014530:	79fb      	ldrb	r3, [r7, #7]
 8014532:	4a09      	ldr	r2, [pc, #36]	; (8014558 <disk_ioctl+0x38>)
 8014534:	009b      	lsls	r3, r3, #2
 8014536:	4413      	add	r3, r2
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	691b      	ldr	r3, [r3, #16]
 801453c:	79fa      	ldrb	r2, [r7, #7]
 801453e:	4906      	ldr	r1, [pc, #24]	; (8014558 <disk_ioctl+0x38>)
 8014540:	440a      	add	r2, r1
 8014542:	7a10      	ldrb	r0, [r2, #8]
 8014544:	79b9      	ldrb	r1, [r7, #6]
 8014546:	683a      	ldr	r2, [r7, #0]
 8014548:	4798      	blx	r3
 801454a:	4603      	mov	r3, r0
 801454c:	73fb      	strb	r3, [r7, #15]
  return res;
 801454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014550:	4618      	mov	r0, r3
 8014552:	3710      	adds	r7, #16
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	24000b88 	.word	0x24000b88

0801455c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801455c:	b480      	push	{r7}
 801455e:	b085      	sub	sp, #20
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	3301      	adds	r3, #1
 8014568:	781b      	ldrb	r3, [r3, #0]
 801456a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801456c:	89fb      	ldrh	r3, [r7, #14]
 801456e:	021b      	lsls	r3, r3, #8
 8014570:	b21a      	sxth	r2, r3
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	b21b      	sxth	r3, r3
 8014578:	4313      	orrs	r3, r2
 801457a:	b21b      	sxth	r3, r3
 801457c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801457e:	89fb      	ldrh	r3, [r7, #14]
}
 8014580:	4618      	mov	r0, r3
 8014582:	3714      	adds	r7, #20
 8014584:	46bd      	mov	sp, r7
 8014586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458a:	4770      	bx	lr

0801458c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801458c:	b480      	push	{r7}
 801458e:	b085      	sub	sp, #20
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	3303      	adds	r3, #3
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	021b      	lsls	r3, r3, #8
 80145a0:	687a      	ldr	r2, [r7, #4]
 80145a2:	3202      	adds	r2, #2
 80145a4:	7812      	ldrb	r2, [r2, #0]
 80145a6:	4313      	orrs	r3, r2
 80145a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	021b      	lsls	r3, r3, #8
 80145ae:	687a      	ldr	r2, [r7, #4]
 80145b0:	3201      	adds	r2, #1
 80145b2:	7812      	ldrb	r2, [r2, #0]
 80145b4:	4313      	orrs	r3, r2
 80145b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	021b      	lsls	r3, r3, #8
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	7812      	ldrb	r2, [r2, #0]
 80145c0:	4313      	orrs	r3, r2
 80145c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80145c4:	68fb      	ldr	r3, [r7, #12]
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3714      	adds	r7, #20
 80145ca:	46bd      	mov	sp, r7
 80145cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d0:	4770      	bx	lr

080145d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80145d2:	b480      	push	{r7}
 80145d4:	b083      	sub	sp, #12
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
 80145da:	460b      	mov	r3, r1
 80145dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	1c5a      	adds	r2, r3, #1
 80145e2:	607a      	str	r2, [r7, #4]
 80145e4:	887a      	ldrh	r2, [r7, #2]
 80145e6:	b2d2      	uxtb	r2, r2
 80145e8:	701a      	strb	r2, [r3, #0]
 80145ea:	887b      	ldrh	r3, [r7, #2]
 80145ec:	0a1b      	lsrs	r3, r3, #8
 80145ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	1c5a      	adds	r2, r3, #1
 80145f4:	607a      	str	r2, [r7, #4]
 80145f6:	887a      	ldrh	r2, [r7, #2]
 80145f8:	b2d2      	uxtb	r2, r2
 80145fa:	701a      	strb	r2, [r3, #0]
}
 80145fc:	bf00      	nop
 80145fe:	370c      	adds	r7, #12
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr

08014608 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014608:	b480      	push	{r7}
 801460a:	b083      	sub	sp, #12
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	1c5a      	adds	r2, r3, #1
 8014616:	607a      	str	r2, [r7, #4]
 8014618:	683a      	ldr	r2, [r7, #0]
 801461a:	b2d2      	uxtb	r2, r2
 801461c:	701a      	strb	r2, [r3, #0]
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	0a1b      	lsrs	r3, r3, #8
 8014622:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	1c5a      	adds	r2, r3, #1
 8014628:	607a      	str	r2, [r7, #4]
 801462a:	683a      	ldr	r2, [r7, #0]
 801462c:	b2d2      	uxtb	r2, r2
 801462e:	701a      	strb	r2, [r3, #0]
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	0a1b      	lsrs	r3, r3, #8
 8014634:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	1c5a      	adds	r2, r3, #1
 801463a:	607a      	str	r2, [r7, #4]
 801463c:	683a      	ldr	r2, [r7, #0]
 801463e:	b2d2      	uxtb	r2, r2
 8014640:	701a      	strb	r2, [r3, #0]
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	0a1b      	lsrs	r3, r3, #8
 8014646:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	1c5a      	adds	r2, r3, #1
 801464c:	607a      	str	r2, [r7, #4]
 801464e:	683a      	ldr	r2, [r7, #0]
 8014650:	b2d2      	uxtb	r2, r2
 8014652:	701a      	strb	r2, [r3, #0]
}
 8014654:	bf00      	nop
 8014656:	370c      	adds	r7, #12
 8014658:	46bd      	mov	sp, r7
 801465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465e:	4770      	bx	lr

08014660 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014660:	b480      	push	{r7}
 8014662:	b087      	sub	sp, #28
 8014664:	af00      	add	r7, sp, #0
 8014666:	60f8      	str	r0, [r7, #12]
 8014668:	60b9      	str	r1, [r7, #8]
 801466a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d00d      	beq.n	8014696 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801467a:	693a      	ldr	r2, [r7, #16]
 801467c:	1c53      	adds	r3, r2, #1
 801467e:	613b      	str	r3, [r7, #16]
 8014680:	697b      	ldr	r3, [r7, #20]
 8014682:	1c59      	adds	r1, r3, #1
 8014684:	6179      	str	r1, [r7, #20]
 8014686:	7812      	ldrb	r2, [r2, #0]
 8014688:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	3b01      	subs	r3, #1
 801468e:	607b      	str	r3, [r7, #4]
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d1f1      	bne.n	801467a <mem_cpy+0x1a>
	}
}
 8014696:	bf00      	nop
 8014698:	371c      	adds	r7, #28
 801469a:	46bd      	mov	sp, r7
 801469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a0:	4770      	bx	lr

080146a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80146a2:	b480      	push	{r7}
 80146a4:	b087      	sub	sp, #28
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	60f8      	str	r0, [r7, #12]
 80146aa:	60b9      	str	r1, [r7, #8]
 80146ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	1c5a      	adds	r2, r3, #1
 80146b6:	617a      	str	r2, [r7, #20]
 80146b8:	68ba      	ldr	r2, [r7, #8]
 80146ba:	b2d2      	uxtb	r2, r2
 80146bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	3b01      	subs	r3, #1
 80146c2:	607b      	str	r3, [r7, #4]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d1f3      	bne.n	80146b2 <mem_set+0x10>
}
 80146ca:	bf00      	nop
 80146cc:	bf00      	nop
 80146ce:	371c      	adds	r7, #28
 80146d0:	46bd      	mov	sp, r7
 80146d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d6:	4770      	bx	lr

080146d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80146d8:	b480      	push	{r7}
 80146da:	b089      	sub	sp, #36	; 0x24
 80146dc:	af00      	add	r7, sp, #0
 80146de:	60f8      	str	r0, [r7, #12]
 80146e0:	60b9      	str	r1, [r7, #8]
 80146e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	61fb      	str	r3, [r7, #28]
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80146ec:	2300      	movs	r3, #0
 80146ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80146f0:	69fb      	ldr	r3, [r7, #28]
 80146f2:	1c5a      	adds	r2, r3, #1
 80146f4:	61fa      	str	r2, [r7, #28]
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	4619      	mov	r1, r3
 80146fa:	69bb      	ldr	r3, [r7, #24]
 80146fc:	1c5a      	adds	r2, r3, #1
 80146fe:	61ba      	str	r2, [r7, #24]
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	1acb      	subs	r3, r1, r3
 8014704:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	3b01      	subs	r3, #1
 801470a:	607b      	str	r3, [r7, #4]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d002      	beq.n	8014718 <mem_cmp+0x40>
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d0eb      	beq.n	80146f0 <mem_cmp+0x18>

	return r;
 8014718:	697b      	ldr	r3, [r7, #20]
}
 801471a:	4618      	mov	r0, r3
 801471c:	3724      	adds	r7, #36	; 0x24
 801471e:	46bd      	mov	sp, r7
 8014720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014724:	4770      	bx	lr

08014726 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014726:	b480      	push	{r7}
 8014728:	b083      	sub	sp, #12
 801472a:	af00      	add	r7, sp, #0
 801472c:	6078      	str	r0, [r7, #4]
 801472e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014730:	e002      	b.n	8014738 <chk_chr+0x12>
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	3301      	adds	r3, #1
 8014736:	607b      	str	r3, [r7, #4]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	781b      	ldrb	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d005      	beq.n	801474c <chk_chr+0x26>
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	781b      	ldrb	r3, [r3, #0]
 8014744:	461a      	mov	r2, r3
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	4293      	cmp	r3, r2
 801474a:	d1f2      	bne.n	8014732 <chk_chr+0xc>
	return *str;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	781b      	ldrb	r3, [r3, #0]
}
 8014750:	4618      	mov	r0, r3
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr

0801475c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801475c:	b480      	push	{r7}
 801475e:	b085      	sub	sp, #20
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014766:	2300      	movs	r3, #0
 8014768:	60bb      	str	r3, [r7, #8]
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	60fb      	str	r3, [r7, #12]
 801476e:	e029      	b.n	80147c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014770:	4a27      	ldr	r2, [pc, #156]	; (8014810 <chk_lock+0xb4>)
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	011b      	lsls	r3, r3, #4
 8014776:	4413      	add	r3, r2
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d01d      	beq.n	80147ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801477e:	4a24      	ldr	r2, [pc, #144]	; (8014810 <chk_lock+0xb4>)
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	011b      	lsls	r3, r3, #4
 8014784:	4413      	add	r3, r2
 8014786:	681a      	ldr	r2, [r3, #0]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	429a      	cmp	r2, r3
 801478e:	d116      	bne.n	80147be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014790:	4a1f      	ldr	r2, [pc, #124]	; (8014810 <chk_lock+0xb4>)
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	011b      	lsls	r3, r3, #4
 8014796:	4413      	add	r3, r2
 8014798:	3304      	adds	r3, #4
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d10c      	bne.n	80147be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80147a4:	4a1a      	ldr	r2, [pc, #104]	; (8014810 <chk_lock+0xb4>)
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	011b      	lsls	r3, r3, #4
 80147aa:	4413      	add	r3, r2
 80147ac:	3308      	adds	r3, #8
 80147ae:	681a      	ldr	r2, [r3, #0]
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d102      	bne.n	80147be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80147b8:	e007      	b.n	80147ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80147ba:	2301      	movs	r3, #1
 80147bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	3301      	adds	r3, #1
 80147c2:	60fb      	str	r3, [r7, #12]
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	2b01      	cmp	r3, #1
 80147c8:	d9d2      	bls.n	8014770 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2b02      	cmp	r3, #2
 80147ce:	d109      	bne.n	80147e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d102      	bne.n	80147dc <chk_lock+0x80>
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	2b02      	cmp	r3, #2
 80147da:	d101      	bne.n	80147e0 <chk_lock+0x84>
 80147dc:	2300      	movs	r3, #0
 80147de:	e010      	b.n	8014802 <chk_lock+0xa6>
 80147e0:	2312      	movs	r3, #18
 80147e2:	e00e      	b.n	8014802 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d108      	bne.n	80147fc <chk_lock+0xa0>
 80147ea:	4a09      	ldr	r2, [pc, #36]	; (8014810 <chk_lock+0xb4>)
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	011b      	lsls	r3, r3, #4
 80147f0:	4413      	add	r3, r2
 80147f2:	330c      	adds	r3, #12
 80147f4:	881b      	ldrh	r3, [r3, #0]
 80147f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147fa:	d101      	bne.n	8014800 <chk_lock+0xa4>
 80147fc:	2310      	movs	r3, #16
 80147fe:	e000      	b.n	8014802 <chk_lock+0xa6>
 8014800:	2300      	movs	r3, #0
}
 8014802:	4618      	mov	r0, r3
 8014804:	3714      	adds	r7, #20
 8014806:	46bd      	mov	sp, r7
 8014808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480c:	4770      	bx	lr
 801480e:	bf00      	nop
 8014810:	24000b68 	.word	0x24000b68

08014814 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8014814:	b480      	push	{r7}
 8014816:	b083      	sub	sp, #12
 8014818:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801481a:	2300      	movs	r3, #0
 801481c:	607b      	str	r3, [r7, #4]
 801481e:	e002      	b.n	8014826 <enq_lock+0x12>
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	3301      	adds	r3, #1
 8014824:	607b      	str	r3, [r7, #4]
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2b01      	cmp	r3, #1
 801482a:	d806      	bhi.n	801483a <enq_lock+0x26>
 801482c:	4a09      	ldr	r2, [pc, #36]	; (8014854 <enq_lock+0x40>)
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	011b      	lsls	r3, r3, #4
 8014832:	4413      	add	r3, r2
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d1f2      	bne.n	8014820 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2b02      	cmp	r3, #2
 801483e:	bf14      	ite	ne
 8014840:	2301      	movne	r3, #1
 8014842:	2300      	moveq	r3, #0
 8014844:	b2db      	uxtb	r3, r3
}
 8014846:	4618      	mov	r0, r3
 8014848:	370c      	adds	r7, #12
 801484a:	46bd      	mov	sp, r7
 801484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014850:	4770      	bx	lr
 8014852:	bf00      	nop
 8014854:	24000b68 	.word	0x24000b68

08014858 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014858:	b480      	push	{r7}
 801485a:	b085      	sub	sp, #20
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014862:	2300      	movs	r3, #0
 8014864:	60fb      	str	r3, [r7, #12]
 8014866:	e01f      	b.n	80148a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014868:	4a41      	ldr	r2, [pc, #260]	; (8014970 <inc_lock+0x118>)
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	011b      	lsls	r3, r3, #4
 801486e:	4413      	add	r3, r2
 8014870:	681a      	ldr	r2, [r3, #0]
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	429a      	cmp	r2, r3
 8014878:	d113      	bne.n	80148a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801487a:	4a3d      	ldr	r2, [pc, #244]	; (8014970 <inc_lock+0x118>)
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	011b      	lsls	r3, r3, #4
 8014880:	4413      	add	r3, r2
 8014882:	3304      	adds	r3, #4
 8014884:	681a      	ldr	r2, [r3, #0]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801488a:	429a      	cmp	r2, r3
 801488c:	d109      	bne.n	80148a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801488e:	4a38      	ldr	r2, [pc, #224]	; (8014970 <inc_lock+0x118>)
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	011b      	lsls	r3, r3, #4
 8014894:	4413      	add	r3, r2
 8014896:	3308      	adds	r3, #8
 8014898:	681a      	ldr	r2, [r3, #0]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801489e:	429a      	cmp	r2, r3
 80148a0:	d006      	beq.n	80148b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	3301      	adds	r3, #1
 80148a6:	60fb      	str	r3, [r7, #12]
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	2b01      	cmp	r3, #1
 80148ac:	d9dc      	bls.n	8014868 <inc_lock+0x10>
 80148ae:	e000      	b.n	80148b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80148b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	2b02      	cmp	r3, #2
 80148b6:	d132      	bne.n	801491e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80148b8:	2300      	movs	r3, #0
 80148ba:	60fb      	str	r3, [r7, #12]
 80148bc:	e002      	b.n	80148c4 <inc_lock+0x6c>
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	3301      	adds	r3, #1
 80148c2:	60fb      	str	r3, [r7, #12]
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	2b01      	cmp	r3, #1
 80148c8:	d806      	bhi.n	80148d8 <inc_lock+0x80>
 80148ca:	4a29      	ldr	r2, [pc, #164]	; (8014970 <inc_lock+0x118>)
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	011b      	lsls	r3, r3, #4
 80148d0:	4413      	add	r3, r2
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d1f2      	bne.n	80148be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2b02      	cmp	r3, #2
 80148dc:	d101      	bne.n	80148e2 <inc_lock+0x8a>
 80148de:	2300      	movs	r3, #0
 80148e0:	e040      	b.n	8014964 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	681a      	ldr	r2, [r3, #0]
 80148e6:	4922      	ldr	r1, [pc, #136]	; (8014970 <inc_lock+0x118>)
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	011b      	lsls	r3, r3, #4
 80148ec:	440b      	add	r3, r1
 80148ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	689a      	ldr	r2, [r3, #8]
 80148f4:	491e      	ldr	r1, [pc, #120]	; (8014970 <inc_lock+0x118>)
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	011b      	lsls	r3, r3, #4
 80148fa:	440b      	add	r3, r1
 80148fc:	3304      	adds	r3, #4
 80148fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	695a      	ldr	r2, [r3, #20]
 8014904:	491a      	ldr	r1, [pc, #104]	; (8014970 <inc_lock+0x118>)
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	011b      	lsls	r3, r3, #4
 801490a:	440b      	add	r3, r1
 801490c:	3308      	adds	r3, #8
 801490e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014910:	4a17      	ldr	r2, [pc, #92]	; (8014970 <inc_lock+0x118>)
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	011b      	lsls	r3, r3, #4
 8014916:	4413      	add	r3, r2
 8014918:	330c      	adds	r3, #12
 801491a:	2200      	movs	r2, #0
 801491c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d009      	beq.n	8014938 <inc_lock+0xe0>
 8014924:	4a12      	ldr	r2, [pc, #72]	; (8014970 <inc_lock+0x118>)
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	011b      	lsls	r3, r3, #4
 801492a:	4413      	add	r3, r2
 801492c:	330c      	adds	r3, #12
 801492e:	881b      	ldrh	r3, [r3, #0]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d001      	beq.n	8014938 <inc_lock+0xe0>
 8014934:	2300      	movs	r3, #0
 8014936:	e015      	b.n	8014964 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d108      	bne.n	8014950 <inc_lock+0xf8>
 801493e:	4a0c      	ldr	r2, [pc, #48]	; (8014970 <inc_lock+0x118>)
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	011b      	lsls	r3, r3, #4
 8014944:	4413      	add	r3, r2
 8014946:	330c      	adds	r3, #12
 8014948:	881b      	ldrh	r3, [r3, #0]
 801494a:	3301      	adds	r3, #1
 801494c:	b29a      	uxth	r2, r3
 801494e:	e001      	b.n	8014954 <inc_lock+0xfc>
 8014950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014954:	4906      	ldr	r1, [pc, #24]	; (8014970 <inc_lock+0x118>)
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	011b      	lsls	r3, r3, #4
 801495a:	440b      	add	r3, r1
 801495c:	330c      	adds	r3, #12
 801495e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	3301      	adds	r3, #1
}
 8014964:	4618      	mov	r0, r3
 8014966:	3714      	adds	r7, #20
 8014968:	46bd      	mov	sp, r7
 801496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496e:	4770      	bx	lr
 8014970:	24000b68 	.word	0x24000b68

08014974 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8014974:	b480      	push	{r7}
 8014976:	b085      	sub	sp, #20
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	3b01      	subs	r3, #1
 8014980:	607b      	str	r3, [r7, #4]
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	2b01      	cmp	r3, #1
 8014986:	d825      	bhi.n	80149d4 <dec_lock+0x60>
		n = Files[i].ctr;
 8014988:	4a17      	ldr	r2, [pc, #92]	; (80149e8 <dec_lock+0x74>)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	011b      	lsls	r3, r3, #4
 801498e:	4413      	add	r3, r2
 8014990:	330c      	adds	r3, #12
 8014992:	881b      	ldrh	r3, [r3, #0]
 8014994:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8014996:	89fb      	ldrh	r3, [r7, #14]
 8014998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801499c:	d101      	bne.n	80149a2 <dec_lock+0x2e>
 801499e:	2300      	movs	r3, #0
 80149a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80149a2:	89fb      	ldrh	r3, [r7, #14]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d002      	beq.n	80149ae <dec_lock+0x3a>
 80149a8:	89fb      	ldrh	r3, [r7, #14]
 80149aa:	3b01      	subs	r3, #1
 80149ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80149ae:	4a0e      	ldr	r2, [pc, #56]	; (80149e8 <dec_lock+0x74>)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	011b      	lsls	r3, r3, #4
 80149b4:	4413      	add	r3, r2
 80149b6:	330c      	adds	r3, #12
 80149b8:	89fa      	ldrh	r2, [r7, #14]
 80149ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80149bc:	89fb      	ldrh	r3, [r7, #14]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d105      	bne.n	80149ce <dec_lock+0x5a>
 80149c2:	4a09      	ldr	r2, [pc, #36]	; (80149e8 <dec_lock+0x74>)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	011b      	lsls	r3, r3, #4
 80149c8:	4413      	add	r3, r2
 80149ca:	2200      	movs	r2, #0
 80149cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80149ce:	2300      	movs	r3, #0
 80149d0:	737b      	strb	r3, [r7, #13]
 80149d2:	e001      	b.n	80149d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80149d4:	2302      	movs	r3, #2
 80149d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80149d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80149da:	4618      	mov	r0, r3
 80149dc:	3714      	adds	r7, #20
 80149de:	46bd      	mov	sp, r7
 80149e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e4:	4770      	bx	lr
 80149e6:	bf00      	nop
 80149e8:	24000b68 	.word	0x24000b68

080149ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80149ec:	b480      	push	{r7}
 80149ee:	b085      	sub	sp, #20
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80149f4:	2300      	movs	r3, #0
 80149f6:	60fb      	str	r3, [r7, #12]
 80149f8:	e010      	b.n	8014a1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80149fa:	4a0d      	ldr	r2, [pc, #52]	; (8014a30 <clear_lock+0x44>)
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	011b      	lsls	r3, r3, #4
 8014a00:	4413      	add	r3, r2
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	429a      	cmp	r2, r3
 8014a08:	d105      	bne.n	8014a16 <clear_lock+0x2a>
 8014a0a:	4a09      	ldr	r2, [pc, #36]	; (8014a30 <clear_lock+0x44>)
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	011b      	lsls	r3, r3, #4
 8014a10:	4413      	add	r3, r2
 8014a12:	2200      	movs	r2, #0
 8014a14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	3301      	adds	r3, #1
 8014a1a:	60fb      	str	r3, [r7, #12]
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d9eb      	bls.n	80149fa <clear_lock+0xe>
	}
}
 8014a22:	bf00      	nop
 8014a24:	bf00      	nop
 8014a26:	3714      	adds	r7, #20
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr
 8014a30:	24000b68 	.word	0x24000b68

08014a34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b086      	sub	sp, #24
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	78db      	ldrb	r3, [r3, #3]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d034      	beq.n	8014ab2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	7858      	ldrb	r0, [r3, #1]
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014a58:	2301      	movs	r3, #1
 8014a5a:	697a      	ldr	r2, [r7, #20]
 8014a5c:	f7ff fd40 	bl	80144e0 <disk_write>
 8014a60:	4603      	mov	r3, r0
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d002      	beq.n	8014a6c <sync_window+0x38>
			res = FR_DISK_ERR;
 8014a66:	2301      	movs	r3, #1
 8014a68:	73fb      	strb	r3, [r7, #15]
 8014a6a:	e022      	b.n	8014ab2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2200      	movs	r2, #0
 8014a70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a76:	697a      	ldr	r2, [r7, #20]
 8014a78:	1ad2      	subs	r2, r2, r3
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	69db      	ldr	r3, [r3, #28]
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	d217      	bcs.n	8014ab2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	789b      	ldrb	r3, [r3, #2]
 8014a86:	613b      	str	r3, [r7, #16]
 8014a88:	e010      	b.n	8014aac <sync_window+0x78>
					wsect += fs->fsize;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	69db      	ldr	r3, [r3, #28]
 8014a8e:	697a      	ldr	r2, [r7, #20]
 8014a90:	4413      	add	r3, r2
 8014a92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	7858      	ldrb	r0, [r3, #1]
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	697a      	ldr	r2, [r7, #20]
 8014aa2:	f7ff fd1d 	bl	80144e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014aa6:	693b      	ldr	r3, [r7, #16]
 8014aa8:	3b01      	subs	r3, #1
 8014aaa:	613b      	str	r3, [r7, #16]
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	2b01      	cmp	r3, #1
 8014ab0:	d8eb      	bhi.n	8014a8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3718      	adds	r7, #24
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}

08014abc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b084      	sub	sp, #16
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
 8014ac4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ace:	683a      	ldr	r2, [r7, #0]
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d01b      	beq.n	8014b0c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f7ff ffad 	bl	8014a34 <sync_window>
 8014ada:	4603      	mov	r3, r0
 8014adc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014ade:	7bfb      	ldrb	r3, [r7, #15]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d113      	bne.n	8014b0c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	7858      	ldrb	r0, [r3, #1]
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014aee:	2301      	movs	r3, #1
 8014af0:	683a      	ldr	r2, [r7, #0]
 8014af2:	f7ff fcd5 	bl	80144a0 <disk_read>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d004      	beq.n	8014b06 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014afc:	f04f 33ff 	mov.w	r3, #4294967295
 8014b00:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014b02:	2301      	movs	r3, #1
 8014b04:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	683a      	ldr	r2, [r7, #0]
 8014b0a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8014b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3710      	adds	r7, #16
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
	...

08014b18 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b084      	sub	sp, #16
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014b20:	6878      	ldr	r0, [r7, #4]
 8014b22:	f7ff ff87 	bl	8014a34 <sync_window>
 8014b26:	4603      	mov	r3, r0
 8014b28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014b2a:	7bfb      	ldrb	r3, [r7, #15]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d158      	bne.n	8014be2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	781b      	ldrb	r3, [r3, #0]
 8014b34:	2b03      	cmp	r3, #3
 8014b36:	d148      	bne.n	8014bca <sync_fs+0xb2>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	791b      	ldrb	r3, [r3, #4]
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	d144      	bne.n	8014bca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	3334      	adds	r3, #52	; 0x34
 8014b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014b48:	2100      	movs	r1, #0
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7ff fda9 	bl	80146a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	3334      	adds	r3, #52	; 0x34
 8014b54:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014b58:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7ff fd38 	bl	80145d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	3334      	adds	r3, #52	; 0x34
 8014b66:	4921      	ldr	r1, [pc, #132]	; (8014bec <sync_fs+0xd4>)
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7ff fd4d 	bl	8014608 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	3334      	adds	r3, #52	; 0x34
 8014b72:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014b76:	491e      	ldr	r1, [pc, #120]	; (8014bf0 <sync_fs+0xd8>)
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7ff fd45 	bl	8014608 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	3334      	adds	r3, #52	; 0x34
 8014b82:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	695b      	ldr	r3, [r3, #20]
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	4610      	mov	r0, r2
 8014b8e:	f7ff fd3b 	bl	8014608 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	3334      	adds	r3, #52	; 0x34
 8014b96:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	691b      	ldr	r3, [r3, #16]
 8014b9e:	4619      	mov	r1, r3
 8014ba0:	4610      	mov	r0, r2
 8014ba2:	f7ff fd31 	bl	8014608 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6a1b      	ldr	r3, [r3, #32]
 8014baa:	1c5a      	adds	r2, r3, #1
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	7858      	ldrb	r0, [r3, #1]
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	f7ff fc8e 	bl	80144e0 <disk_write>
			fs->fsi_flag = 0;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	785b      	ldrb	r3, [r3, #1]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	2100      	movs	r1, #0
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f7ff fca4 	bl	8014520 <disk_ioctl>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d001      	beq.n	8014be2 <sync_fs+0xca>
 8014bde:	2301      	movs	r3, #1
 8014be0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014be4:	4618      	mov	r0, r3
 8014be6:	3710      	adds	r7, #16
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}
 8014bec:	41615252 	.word	0x41615252
 8014bf0:	61417272 	.word	0x61417272

08014bf4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b083      	sub	sp, #12
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	3b02      	subs	r3, #2
 8014c02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	699b      	ldr	r3, [r3, #24]
 8014c08:	3b02      	subs	r3, #2
 8014c0a:	683a      	ldr	r2, [r7, #0]
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d301      	bcc.n	8014c14 <clust2sect+0x20>
 8014c10:	2300      	movs	r3, #0
 8014c12:	e008      	b.n	8014c26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	895b      	ldrh	r3, [r3, #10]
 8014c18:	461a      	mov	r2, r3
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	fb03 f202 	mul.w	r2, r3, r2
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c24:	4413      	add	r3, r2
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	370c      	adds	r7, #12
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr

08014c32 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014c32:	b580      	push	{r7, lr}
 8014c34:	b086      	sub	sp, #24
 8014c36:	af00      	add	r7, sp, #0
 8014c38:	6078      	str	r0, [r7, #4]
 8014c3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	d904      	bls.n	8014c52 <get_fat+0x20>
 8014c48:	693b      	ldr	r3, [r7, #16]
 8014c4a:	699b      	ldr	r3, [r3, #24]
 8014c4c:	683a      	ldr	r2, [r7, #0]
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d302      	bcc.n	8014c58 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014c52:	2301      	movs	r3, #1
 8014c54:	617b      	str	r3, [r7, #20]
 8014c56:	e08f      	b.n	8014d78 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014c58:	f04f 33ff 	mov.w	r3, #4294967295
 8014c5c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	781b      	ldrb	r3, [r3, #0]
 8014c62:	2b03      	cmp	r3, #3
 8014c64:	d062      	beq.n	8014d2c <get_fat+0xfa>
 8014c66:	2b03      	cmp	r3, #3
 8014c68:	dc7c      	bgt.n	8014d64 <get_fat+0x132>
 8014c6a:	2b01      	cmp	r3, #1
 8014c6c:	d002      	beq.n	8014c74 <get_fat+0x42>
 8014c6e:	2b02      	cmp	r3, #2
 8014c70:	d042      	beq.n	8014cf8 <get_fat+0xc6>
 8014c72:	e077      	b.n	8014d64 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	60fb      	str	r3, [r7, #12]
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	085b      	lsrs	r3, r3, #1
 8014c7c:	68fa      	ldr	r2, [r7, #12]
 8014c7e:	4413      	add	r3, r2
 8014c80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	0a5b      	lsrs	r3, r3, #9
 8014c8a:	4413      	add	r3, r2
 8014c8c:	4619      	mov	r1, r3
 8014c8e:	6938      	ldr	r0, [r7, #16]
 8014c90:	f7ff ff14 	bl	8014abc <move_window>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d167      	bne.n	8014d6a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	1c5a      	adds	r2, r3, #1
 8014c9e:	60fa      	str	r2, [r7, #12]
 8014ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ca4:	693a      	ldr	r2, [r7, #16]
 8014ca6:	4413      	add	r3, r2
 8014ca8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014cac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	0a5b      	lsrs	r3, r3, #9
 8014cb6:	4413      	add	r3, r2
 8014cb8:	4619      	mov	r1, r3
 8014cba:	6938      	ldr	r0, [r7, #16]
 8014cbc:	f7ff fefe 	bl	8014abc <move_window>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d153      	bne.n	8014d6e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ccc:	693a      	ldr	r2, [r7, #16]
 8014cce:	4413      	add	r3, r2
 8014cd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014cd4:	021b      	lsls	r3, r3, #8
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	4313      	orrs	r3, r2
 8014cdc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	f003 0301 	and.w	r3, r3, #1
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d002      	beq.n	8014cee <get_fat+0xbc>
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	091b      	lsrs	r3, r3, #4
 8014cec:	e002      	b.n	8014cf4 <get_fat+0xc2>
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014cf4:	617b      	str	r3, [r7, #20]
			break;
 8014cf6:	e03f      	b.n	8014d78 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	0a1b      	lsrs	r3, r3, #8
 8014d00:	4413      	add	r3, r2
 8014d02:	4619      	mov	r1, r3
 8014d04:	6938      	ldr	r0, [r7, #16]
 8014d06:	f7ff fed9 	bl	8014abc <move_window>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d130      	bne.n	8014d72 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	005b      	lsls	r3, r3, #1
 8014d1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014d1e:	4413      	add	r3, r2
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7ff fc1b 	bl	801455c <ld_word>
 8014d26:	4603      	mov	r3, r0
 8014d28:	617b      	str	r3, [r7, #20]
			break;
 8014d2a:	e025      	b.n	8014d78 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	09db      	lsrs	r3, r3, #7
 8014d34:	4413      	add	r3, r2
 8014d36:	4619      	mov	r1, r3
 8014d38:	6938      	ldr	r0, [r7, #16]
 8014d3a:	f7ff febf 	bl	8014abc <move_window>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d118      	bne.n	8014d76 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014d44:	693b      	ldr	r3, [r7, #16]
 8014d46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	009b      	lsls	r3, r3, #2
 8014d4e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014d52:	4413      	add	r3, r2
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7ff fc19 	bl	801458c <ld_dword>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014d60:	617b      	str	r3, [r7, #20]
			break;
 8014d62:	e009      	b.n	8014d78 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014d64:	2301      	movs	r3, #1
 8014d66:	617b      	str	r3, [r7, #20]
 8014d68:	e006      	b.n	8014d78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d6a:	bf00      	nop
 8014d6c:	e004      	b.n	8014d78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d6e:	bf00      	nop
 8014d70:	e002      	b.n	8014d78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014d72:	bf00      	nop
 8014d74:	e000      	b.n	8014d78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014d76:	bf00      	nop
		}
	}

	return val;
 8014d78:	697b      	ldr	r3, [r7, #20]
}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	3718      	adds	r7, #24
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd80      	pop	{r7, pc}

08014d82 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014d82:	b590      	push	{r4, r7, lr}
 8014d84:	b089      	sub	sp, #36	; 0x24
 8014d86:	af00      	add	r7, sp, #0
 8014d88:	60f8      	str	r0, [r7, #12]
 8014d8a:	60b9      	str	r1, [r7, #8]
 8014d8c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014d8e:	2302      	movs	r3, #2
 8014d90:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	2b01      	cmp	r3, #1
 8014d96:	f240 80d9 	bls.w	8014f4c <put_fat+0x1ca>
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	699b      	ldr	r3, [r3, #24]
 8014d9e:	68ba      	ldr	r2, [r7, #8]
 8014da0:	429a      	cmp	r2, r3
 8014da2:	f080 80d3 	bcs.w	8014f4c <put_fat+0x1ca>
		switch (fs->fs_type) {
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	781b      	ldrb	r3, [r3, #0]
 8014daa:	2b03      	cmp	r3, #3
 8014dac:	f000 8096 	beq.w	8014edc <put_fat+0x15a>
 8014db0:	2b03      	cmp	r3, #3
 8014db2:	f300 80cb 	bgt.w	8014f4c <put_fat+0x1ca>
 8014db6:	2b01      	cmp	r3, #1
 8014db8:	d002      	beq.n	8014dc0 <put_fat+0x3e>
 8014dba:	2b02      	cmp	r3, #2
 8014dbc:	d06e      	beq.n	8014e9c <put_fat+0x11a>
 8014dbe:	e0c5      	b.n	8014f4c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014dc0:	68bb      	ldr	r3, [r7, #8]
 8014dc2:	61bb      	str	r3, [r7, #24]
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	085b      	lsrs	r3, r3, #1
 8014dc8:	69ba      	ldr	r2, [r7, #24]
 8014dca:	4413      	add	r3, r2
 8014dcc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014dd2:	69bb      	ldr	r3, [r7, #24]
 8014dd4:	0a5b      	lsrs	r3, r3, #9
 8014dd6:	4413      	add	r3, r2
 8014dd8:	4619      	mov	r1, r3
 8014dda:	68f8      	ldr	r0, [r7, #12]
 8014ddc:	f7ff fe6e 	bl	8014abc <move_window>
 8014de0:	4603      	mov	r3, r0
 8014de2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014de4:	7ffb      	ldrb	r3, [r7, #31]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	f040 80a9 	bne.w	8014f3e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014df2:	69bb      	ldr	r3, [r7, #24]
 8014df4:	1c59      	adds	r1, r3, #1
 8014df6:	61b9      	str	r1, [r7, #24]
 8014df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014dfc:	4413      	add	r3, r2
 8014dfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	f003 0301 	and.w	r3, r3, #1
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d00d      	beq.n	8014e26 <put_fat+0xa4>
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	b25b      	sxtb	r3, r3
 8014e10:	f003 030f 	and.w	r3, r3, #15
 8014e14:	b25a      	sxtb	r2, r3
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	b2db      	uxtb	r3, r3
 8014e1a:	011b      	lsls	r3, r3, #4
 8014e1c:	b25b      	sxtb	r3, r3
 8014e1e:	4313      	orrs	r3, r2
 8014e20:	b25b      	sxtb	r3, r3
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	e001      	b.n	8014e2a <put_fat+0xa8>
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	b2db      	uxtb	r3, r3
 8014e2a:	697a      	ldr	r2, [r7, #20]
 8014e2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	2201      	movs	r2, #1
 8014e32:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e38:	69bb      	ldr	r3, [r7, #24]
 8014e3a:	0a5b      	lsrs	r3, r3, #9
 8014e3c:	4413      	add	r3, r2
 8014e3e:	4619      	mov	r1, r3
 8014e40:	68f8      	ldr	r0, [r7, #12]
 8014e42:	f7ff fe3b 	bl	8014abc <move_window>
 8014e46:	4603      	mov	r3, r0
 8014e48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014e4a:	7ffb      	ldrb	r3, [r7, #31]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d178      	bne.n	8014f42 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014e56:	69bb      	ldr	r3, [r7, #24]
 8014e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e5c:	4413      	add	r3, r2
 8014e5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	f003 0301 	and.w	r3, r3, #1
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d003      	beq.n	8014e72 <put_fat+0xf0>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	091b      	lsrs	r3, r3, #4
 8014e6e:	b2db      	uxtb	r3, r3
 8014e70:	e00e      	b.n	8014e90 <put_fat+0x10e>
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	781b      	ldrb	r3, [r3, #0]
 8014e76:	b25b      	sxtb	r3, r3
 8014e78:	f023 030f 	bic.w	r3, r3, #15
 8014e7c:	b25a      	sxtb	r2, r3
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	0a1b      	lsrs	r3, r3, #8
 8014e82:	b25b      	sxtb	r3, r3
 8014e84:	f003 030f 	and.w	r3, r3, #15
 8014e88:	b25b      	sxtb	r3, r3
 8014e8a:	4313      	orrs	r3, r2
 8014e8c:	b25b      	sxtb	r3, r3
 8014e8e:	b2db      	uxtb	r3, r3
 8014e90:	697a      	ldr	r2, [r7, #20]
 8014e92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	2201      	movs	r2, #1
 8014e98:	70da      	strb	r2, [r3, #3]
			break;
 8014e9a:	e057      	b.n	8014f4c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	0a1b      	lsrs	r3, r3, #8
 8014ea4:	4413      	add	r3, r2
 8014ea6:	4619      	mov	r1, r3
 8014ea8:	68f8      	ldr	r0, [r7, #12]
 8014eaa:	f7ff fe07 	bl	8014abc <move_window>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014eb2:	7ffb      	ldrb	r3, [r7, #31]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d146      	bne.n	8014f46 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014ebe:	68bb      	ldr	r3, [r7, #8]
 8014ec0:	005b      	lsls	r3, r3, #1
 8014ec2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014ec6:	4413      	add	r3, r2
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	b292      	uxth	r2, r2
 8014ecc:	4611      	mov	r1, r2
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7ff fb7f 	bl	80145d2 <st_word>
			fs->wflag = 1;
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	2201      	movs	r2, #1
 8014ed8:	70da      	strb	r2, [r3, #3]
			break;
 8014eda:	e037      	b.n	8014f4c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	09db      	lsrs	r3, r3, #7
 8014ee4:	4413      	add	r3, r2
 8014ee6:	4619      	mov	r1, r3
 8014ee8:	68f8      	ldr	r0, [r7, #12]
 8014eea:	f7ff fde7 	bl	8014abc <move_window>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014ef2:	7ffb      	ldrb	r3, [r7, #31]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d128      	bne.n	8014f4a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	009b      	lsls	r3, r3, #2
 8014f08:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014f0c:	4413      	add	r3, r2
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f7ff fb3c 	bl	801458c <ld_dword>
 8014f14:	4603      	mov	r3, r0
 8014f16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014f1a:	4323      	orrs	r3, r4
 8014f1c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	009b      	lsls	r3, r3, #2
 8014f28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014f2c:	4413      	add	r3, r2
 8014f2e:	6879      	ldr	r1, [r7, #4]
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7ff fb69 	bl	8014608 <st_dword>
			fs->wflag = 1;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	2201      	movs	r2, #1
 8014f3a:	70da      	strb	r2, [r3, #3]
			break;
 8014f3c:	e006      	b.n	8014f4c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014f3e:	bf00      	nop
 8014f40:	e004      	b.n	8014f4c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014f42:	bf00      	nop
 8014f44:	e002      	b.n	8014f4c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014f46:	bf00      	nop
 8014f48:	e000      	b.n	8014f4c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014f4a:	bf00      	nop
		}
	}
	return res;
 8014f4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8014f4e:	4618      	mov	r0, r3
 8014f50:	3724      	adds	r7, #36	; 0x24
 8014f52:	46bd      	mov	sp, r7
 8014f54:	bd90      	pop	{r4, r7, pc}

08014f56 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014f56:	b580      	push	{r7, lr}
 8014f58:	b088      	sub	sp, #32
 8014f5a:	af00      	add	r7, sp, #0
 8014f5c:	60f8      	str	r0, [r7, #12]
 8014f5e:	60b9      	str	r1, [r7, #8]
 8014f60:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014f62:	2300      	movs	r3, #0
 8014f64:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014f6c:	68bb      	ldr	r3, [r7, #8]
 8014f6e:	2b01      	cmp	r3, #1
 8014f70:	d904      	bls.n	8014f7c <remove_chain+0x26>
 8014f72:	69bb      	ldr	r3, [r7, #24]
 8014f74:	699b      	ldr	r3, [r3, #24]
 8014f76:	68ba      	ldr	r2, [r7, #8]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d301      	bcc.n	8014f80 <remove_chain+0x2a>
 8014f7c:	2302      	movs	r3, #2
 8014f7e:	e04b      	b.n	8015018 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d00c      	beq.n	8014fa0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014f86:	f04f 32ff 	mov.w	r2, #4294967295
 8014f8a:	6879      	ldr	r1, [r7, #4]
 8014f8c:	69b8      	ldr	r0, [r7, #24]
 8014f8e:	f7ff fef8 	bl	8014d82 <put_fat>
 8014f92:	4603      	mov	r3, r0
 8014f94:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014f96:	7ffb      	ldrb	r3, [r7, #31]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d001      	beq.n	8014fa0 <remove_chain+0x4a>
 8014f9c:	7ffb      	ldrb	r3, [r7, #31]
 8014f9e:	e03b      	b.n	8015018 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014fa0:	68b9      	ldr	r1, [r7, #8]
 8014fa2:	68f8      	ldr	r0, [r7, #12]
 8014fa4:	f7ff fe45 	bl	8014c32 <get_fat>
 8014fa8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d031      	beq.n	8015014 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	d101      	bne.n	8014fba <remove_chain+0x64>
 8014fb6:	2302      	movs	r3, #2
 8014fb8:	e02e      	b.n	8015018 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fc0:	d101      	bne.n	8014fc6 <remove_chain+0x70>
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	e028      	b.n	8015018 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	68b9      	ldr	r1, [r7, #8]
 8014fca:	69b8      	ldr	r0, [r7, #24]
 8014fcc:	f7ff fed9 	bl	8014d82 <put_fat>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014fd4:	7ffb      	ldrb	r3, [r7, #31]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d001      	beq.n	8014fde <remove_chain+0x88>
 8014fda:	7ffb      	ldrb	r3, [r7, #31]
 8014fdc:	e01c      	b.n	8015018 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	695a      	ldr	r2, [r3, #20]
 8014fe2:	69bb      	ldr	r3, [r7, #24]
 8014fe4:	699b      	ldr	r3, [r3, #24]
 8014fe6:	3b02      	subs	r3, #2
 8014fe8:	429a      	cmp	r2, r3
 8014fea:	d20b      	bcs.n	8015004 <remove_chain+0xae>
			fs->free_clst++;
 8014fec:	69bb      	ldr	r3, [r7, #24]
 8014fee:	695b      	ldr	r3, [r3, #20]
 8014ff0:	1c5a      	adds	r2, r3, #1
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8014ff6:	69bb      	ldr	r3, [r7, #24]
 8014ff8:	791b      	ldrb	r3, [r3, #4]
 8014ffa:	f043 0301 	orr.w	r3, r3, #1
 8014ffe:	b2da      	uxtb	r2, r3
 8015000:	69bb      	ldr	r3, [r7, #24]
 8015002:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015008:	69bb      	ldr	r3, [r7, #24]
 801500a:	699b      	ldr	r3, [r3, #24]
 801500c:	68ba      	ldr	r2, [r7, #8]
 801500e:	429a      	cmp	r2, r3
 8015010:	d3c6      	bcc.n	8014fa0 <remove_chain+0x4a>
 8015012:	e000      	b.n	8015016 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015014:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015016:	2300      	movs	r3, #0
}
 8015018:	4618      	mov	r0, r3
 801501a:	3720      	adds	r7, #32
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}

08015020 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b088      	sub	sp, #32
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
 8015028:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d10d      	bne.n	8015052 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	691b      	ldr	r3, [r3, #16]
 801503a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801503c:	69bb      	ldr	r3, [r7, #24]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d004      	beq.n	801504c <create_chain+0x2c>
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	699b      	ldr	r3, [r3, #24]
 8015046:	69ba      	ldr	r2, [r7, #24]
 8015048:	429a      	cmp	r2, r3
 801504a:	d31b      	bcc.n	8015084 <create_chain+0x64>
 801504c:	2301      	movs	r3, #1
 801504e:	61bb      	str	r3, [r7, #24]
 8015050:	e018      	b.n	8015084 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015052:	6839      	ldr	r1, [r7, #0]
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f7ff fdec 	bl	8014c32 <get_fat>
 801505a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	2b01      	cmp	r3, #1
 8015060:	d801      	bhi.n	8015066 <create_chain+0x46>
 8015062:	2301      	movs	r3, #1
 8015064:	e070      	b.n	8015148 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801506c:	d101      	bne.n	8015072 <create_chain+0x52>
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	e06a      	b.n	8015148 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	699b      	ldr	r3, [r3, #24]
 8015076:	68fa      	ldr	r2, [r7, #12]
 8015078:	429a      	cmp	r2, r3
 801507a:	d201      	bcs.n	8015080 <create_chain+0x60>
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	e063      	b.n	8015148 <create_chain+0x128>
		scl = clst;
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015084:	69bb      	ldr	r3, [r7, #24]
 8015086:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015088:	69fb      	ldr	r3, [r7, #28]
 801508a:	3301      	adds	r3, #1
 801508c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801508e:	693b      	ldr	r3, [r7, #16]
 8015090:	699b      	ldr	r3, [r3, #24]
 8015092:	69fa      	ldr	r2, [r7, #28]
 8015094:	429a      	cmp	r2, r3
 8015096:	d307      	bcc.n	80150a8 <create_chain+0x88>
				ncl = 2;
 8015098:	2302      	movs	r3, #2
 801509a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801509c:	69fa      	ldr	r2, [r7, #28]
 801509e:	69bb      	ldr	r3, [r7, #24]
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d901      	bls.n	80150a8 <create_chain+0x88>
 80150a4:	2300      	movs	r3, #0
 80150a6:	e04f      	b.n	8015148 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80150a8:	69f9      	ldr	r1, [r7, #28]
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f7ff fdc1 	bl	8014c32 <get_fat>
 80150b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d00e      	beq.n	80150d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	2b01      	cmp	r3, #1
 80150bc:	d003      	beq.n	80150c6 <create_chain+0xa6>
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150c4:	d101      	bne.n	80150ca <create_chain+0xaa>
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	e03e      	b.n	8015148 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80150ca:	69fa      	ldr	r2, [r7, #28]
 80150cc:	69bb      	ldr	r3, [r7, #24]
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d1da      	bne.n	8015088 <create_chain+0x68>
 80150d2:	2300      	movs	r3, #0
 80150d4:	e038      	b.n	8015148 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80150d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80150d8:	f04f 32ff 	mov.w	r2, #4294967295
 80150dc:	69f9      	ldr	r1, [r7, #28]
 80150de:	6938      	ldr	r0, [r7, #16]
 80150e0:	f7ff fe4f 	bl	8014d82 <put_fat>
 80150e4:	4603      	mov	r3, r0
 80150e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80150e8:	7dfb      	ldrb	r3, [r7, #23]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d109      	bne.n	8015102 <create_chain+0xe2>
 80150ee:	683b      	ldr	r3, [r7, #0]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d006      	beq.n	8015102 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80150f4:	69fa      	ldr	r2, [r7, #28]
 80150f6:	6839      	ldr	r1, [r7, #0]
 80150f8:	6938      	ldr	r0, [r7, #16]
 80150fa:	f7ff fe42 	bl	8014d82 <put_fat>
 80150fe:	4603      	mov	r3, r0
 8015100:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015102:	7dfb      	ldrb	r3, [r7, #23]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d116      	bne.n	8015136 <create_chain+0x116>
		fs->last_clst = ncl;
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	69fa      	ldr	r2, [r7, #28]
 801510c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	695a      	ldr	r2, [r3, #20]
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	699b      	ldr	r3, [r3, #24]
 8015116:	3b02      	subs	r3, #2
 8015118:	429a      	cmp	r2, r3
 801511a:	d804      	bhi.n	8015126 <create_chain+0x106>
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	695b      	ldr	r3, [r3, #20]
 8015120:	1e5a      	subs	r2, r3, #1
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	791b      	ldrb	r3, [r3, #4]
 801512a:	f043 0301 	orr.w	r3, r3, #1
 801512e:	b2da      	uxtb	r2, r3
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	711a      	strb	r2, [r3, #4]
 8015134:	e007      	b.n	8015146 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015136:	7dfb      	ldrb	r3, [r7, #23]
 8015138:	2b01      	cmp	r3, #1
 801513a:	d102      	bne.n	8015142 <create_chain+0x122>
 801513c:	f04f 33ff 	mov.w	r3, #4294967295
 8015140:	e000      	b.n	8015144 <create_chain+0x124>
 8015142:	2301      	movs	r3, #1
 8015144:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015146:	69fb      	ldr	r3, [r7, #28]
}
 8015148:	4618      	mov	r0, r3
 801514a:	3720      	adds	r7, #32
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}

08015150 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015150:	b480      	push	{r7}
 8015152:	b087      	sub	sp, #28
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015164:	3304      	adds	r3, #4
 8015166:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015168:	683b      	ldr	r3, [r7, #0]
 801516a:	0a5b      	lsrs	r3, r3, #9
 801516c:	68fa      	ldr	r2, [r7, #12]
 801516e:	8952      	ldrh	r2, [r2, #10]
 8015170:	fbb3 f3f2 	udiv	r3, r3, r2
 8015174:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	1d1a      	adds	r2, r3, #4
 801517a:	613a      	str	r2, [r7, #16]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d101      	bne.n	801518a <clmt_clust+0x3a>
 8015186:	2300      	movs	r3, #0
 8015188:	e010      	b.n	80151ac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801518a:	697a      	ldr	r2, [r7, #20]
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	429a      	cmp	r2, r3
 8015190:	d307      	bcc.n	80151a2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8015192:	697a      	ldr	r2, [r7, #20]
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	1ad3      	subs	r3, r2, r3
 8015198:	617b      	str	r3, [r7, #20]
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	3304      	adds	r3, #4
 801519e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80151a0:	e7e9      	b.n	8015176 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80151a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	681a      	ldr	r2, [r3, #0]
 80151a8:	697b      	ldr	r3, [r7, #20]
 80151aa:	4413      	add	r3, r2
}
 80151ac:	4618      	mov	r0, r3
 80151ae:	371c      	adds	r7, #28
 80151b0:	46bd      	mov	sp, r7
 80151b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b6:	4770      	bx	lr

080151b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b086      	sub	sp, #24
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
 80151c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80151ce:	d204      	bcs.n	80151da <dir_sdi+0x22>
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	f003 031f 	and.w	r3, r3, #31
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d001      	beq.n	80151de <dir_sdi+0x26>
		return FR_INT_ERR;
 80151da:	2302      	movs	r3, #2
 80151dc:	e063      	b.n	80152a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	683a      	ldr	r2, [r7, #0]
 80151e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	689b      	ldr	r3, [r3, #8]
 80151e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d106      	bne.n	80151fe <dir_sdi+0x46>
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	2b02      	cmp	r3, #2
 80151f6:	d902      	bls.n	80151fe <dir_sdi+0x46>
		clst = fs->dirbase;
 80151f8:	693b      	ldr	r3, [r7, #16]
 80151fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d10c      	bne.n	801521e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	095b      	lsrs	r3, r3, #5
 8015208:	693a      	ldr	r2, [r7, #16]
 801520a:	8912      	ldrh	r2, [r2, #8]
 801520c:	4293      	cmp	r3, r2
 801520e:	d301      	bcc.n	8015214 <dir_sdi+0x5c>
 8015210:	2302      	movs	r3, #2
 8015212:	e048      	b.n	80152a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	61da      	str	r2, [r3, #28]
 801521c:	e029      	b.n	8015272 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	895b      	ldrh	r3, [r3, #10]
 8015222:	025b      	lsls	r3, r3, #9
 8015224:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015226:	e019      	b.n	801525c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6979      	ldr	r1, [r7, #20]
 801522c:	4618      	mov	r0, r3
 801522e:	f7ff fd00 	bl	8014c32 <get_fat>
 8015232:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015234:	697b      	ldr	r3, [r7, #20]
 8015236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801523a:	d101      	bne.n	8015240 <dir_sdi+0x88>
 801523c:	2301      	movs	r3, #1
 801523e:	e032      	b.n	80152a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	2b01      	cmp	r3, #1
 8015244:	d904      	bls.n	8015250 <dir_sdi+0x98>
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	699b      	ldr	r3, [r3, #24]
 801524a:	697a      	ldr	r2, [r7, #20]
 801524c:	429a      	cmp	r2, r3
 801524e:	d301      	bcc.n	8015254 <dir_sdi+0x9c>
 8015250:	2302      	movs	r3, #2
 8015252:	e028      	b.n	80152a6 <dir_sdi+0xee>
			ofs -= csz;
 8015254:	683a      	ldr	r2, [r7, #0]
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	1ad3      	subs	r3, r2, r3
 801525a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801525c:	683a      	ldr	r2, [r7, #0]
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	429a      	cmp	r2, r3
 8015262:	d2e1      	bcs.n	8015228 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015264:	6979      	ldr	r1, [r7, #20]
 8015266:	6938      	ldr	r0, [r7, #16]
 8015268:	f7ff fcc4 	bl	8014bf4 <clust2sect>
 801526c:	4602      	mov	r2, r0
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	697a      	ldr	r2, [r7, #20]
 8015276:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	69db      	ldr	r3, [r3, #28]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d101      	bne.n	8015284 <dir_sdi+0xcc>
 8015280:	2302      	movs	r3, #2
 8015282:	e010      	b.n	80152a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	69da      	ldr	r2, [r3, #28]
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	0a5b      	lsrs	r3, r3, #9
 801528c:	441a      	add	r2, r3
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801529e:	441a      	add	r2, r3
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80152a4:	2300      	movs	r3, #0
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	3718      	adds	r7, #24
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80152ae:	b580      	push	{r7, lr}
 80152b0:	b086      	sub	sp, #24
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
 80152b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	695b      	ldr	r3, [r3, #20]
 80152c2:	3320      	adds	r3, #32
 80152c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	69db      	ldr	r3, [r3, #28]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d003      	beq.n	80152d6 <dir_next+0x28>
 80152ce:	68bb      	ldr	r3, [r7, #8]
 80152d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80152d4:	d301      	bcc.n	80152da <dir_next+0x2c>
 80152d6:	2304      	movs	r3, #4
 80152d8:	e0aa      	b.n	8015430 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	f040 8098 	bne.w	8015416 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	69db      	ldr	r3, [r3, #28]
 80152ea:	1c5a      	adds	r2, r3, #1
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	699b      	ldr	r3, [r3, #24]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d10b      	bne.n	8015310 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	095b      	lsrs	r3, r3, #5
 80152fc:	68fa      	ldr	r2, [r7, #12]
 80152fe:	8912      	ldrh	r2, [r2, #8]
 8015300:	4293      	cmp	r3, r2
 8015302:	f0c0 8088 	bcc.w	8015416 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	2200      	movs	r2, #0
 801530a:	61da      	str	r2, [r3, #28]
 801530c:	2304      	movs	r3, #4
 801530e:	e08f      	b.n	8015430 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	0a5b      	lsrs	r3, r3, #9
 8015314:	68fa      	ldr	r2, [r7, #12]
 8015316:	8952      	ldrh	r2, [r2, #10]
 8015318:	3a01      	subs	r2, #1
 801531a:	4013      	ands	r3, r2
 801531c:	2b00      	cmp	r3, #0
 801531e:	d17a      	bne.n	8015416 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015320:	687a      	ldr	r2, [r7, #4]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	699b      	ldr	r3, [r3, #24]
 8015326:	4619      	mov	r1, r3
 8015328:	4610      	mov	r0, r2
 801532a:	f7ff fc82 	bl	8014c32 <get_fat>
 801532e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015330:	697b      	ldr	r3, [r7, #20]
 8015332:	2b01      	cmp	r3, #1
 8015334:	d801      	bhi.n	801533a <dir_next+0x8c>
 8015336:	2302      	movs	r3, #2
 8015338:	e07a      	b.n	8015430 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801533a:	697b      	ldr	r3, [r7, #20]
 801533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015340:	d101      	bne.n	8015346 <dir_next+0x98>
 8015342:	2301      	movs	r3, #1
 8015344:	e074      	b.n	8015430 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	699b      	ldr	r3, [r3, #24]
 801534a:	697a      	ldr	r2, [r7, #20]
 801534c:	429a      	cmp	r2, r3
 801534e:	d358      	bcc.n	8015402 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d104      	bne.n	8015360 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2200      	movs	r2, #0
 801535a:	61da      	str	r2, [r3, #28]
 801535c:	2304      	movs	r3, #4
 801535e:	e067      	b.n	8015430 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015360:	687a      	ldr	r2, [r7, #4]
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	699b      	ldr	r3, [r3, #24]
 8015366:	4619      	mov	r1, r3
 8015368:	4610      	mov	r0, r2
 801536a:	f7ff fe59 	bl	8015020 <create_chain>
 801536e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d101      	bne.n	801537a <dir_next+0xcc>
 8015376:	2307      	movs	r3, #7
 8015378:	e05a      	b.n	8015430 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	2b01      	cmp	r3, #1
 801537e:	d101      	bne.n	8015384 <dir_next+0xd6>
 8015380:	2302      	movs	r3, #2
 8015382:	e055      	b.n	8015430 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801538a:	d101      	bne.n	8015390 <dir_next+0xe2>
 801538c:	2301      	movs	r3, #1
 801538e:	e04f      	b.n	8015430 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015390:	68f8      	ldr	r0, [r7, #12]
 8015392:	f7ff fb4f 	bl	8014a34 <sync_window>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	d001      	beq.n	80153a0 <dir_next+0xf2>
 801539c:	2301      	movs	r3, #1
 801539e:	e047      	b.n	8015430 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	3334      	adds	r3, #52	; 0x34
 80153a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80153a8:	2100      	movs	r1, #0
 80153aa:	4618      	mov	r0, r3
 80153ac:	f7ff f979 	bl	80146a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80153b0:	2300      	movs	r3, #0
 80153b2:	613b      	str	r3, [r7, #16]
 80153b4:	6979      	ldr	r1, [r7, #20]
 80153b6:	68f8      	ldr	r0, [r7, #12]
 80153b8:	f7ff fc1c 	bl	8014bf4 <clust2sect>
 80153bc:	4602      	mov	r2, r0
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	631a      	str	r2, [r3, #48]	; 0x30
 80153c2:	e012      	b.n	80153ea <dir_next+0x13c>
						fs->wflag = 1;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	2201      	movs	r2, #1
 80153c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	f7ff fb32 	bl	8014a34 <sync_window>
 80153d0:	4603      	mov	r3, r0
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d001      	beq.n	80153da <dir_next+0x12c>
 80153d6:	2301      	movs	r3, #1
 80153d8:	e02a      	b.n	8015430 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	3301      	adds	r3, #1
 80153de:	613b      	str	r3, [r7, #16]
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153e4:	1c5a      	adds	r2, r3, #1
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	631a      	str	r2, [r3, #48]	; 0x30
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	895b      	ldrh	r3, [r3, #10]
 80153ee:	461a      	mov	r2, r3
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	4293      	cmp	r3, r2
 80153f4:	d3e6      	bcc.n	80153c4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	1ad2      	subs	r2, r2, r3
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	697a      	ldr	r2, [r7, #20]
 8015406:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015408:	6979      	ldr	r1, [r7, #20]
 801540a:	68f8      	ldr	r0, [r7, #12]
 801540c:	f7ff fbf2 	bl	8014bf4 <clust2sect>
 8015410:	4602      	mov	r2, r0
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	68ba      	ldr	r2, [r7, #8]
 801541a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015428:	441a      	add	r2, r3
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801542e:	2300      	movs	r3, #0
}
 8015430:	4618      	mov	r0, r3
 8015432:	3718      	adds	r7, #24
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}

08015438 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b086      	sub	sp, #24
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015448:	2100      	movs	r1, #0
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f7ff feb4 	bl	80151b8 <dir_sdi>
 8015450:	4603      	mov	r3, r0
 8015452:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015454:	7dfb      	ldrb	r3, [r7, #23]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d12b      	bne.n	80154b2 <dir_alloc+0x7a>
		n = 0;
 801545a:	2300      	movs	r3, #0
 801545c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	69db      	ldr	r3, [r3, #28]
 8015462:	4619      	mov	r1, r3
 8015464:	68f8      	ldr	r0, [r7, #12]
 8015466:	f7ff fb29 	bl	8014abc <move_window>
 801546a:	4603      	mov	r3, r0
 801546c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801546e:	7dfb      	ldrb	r3, [r7, #23]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d11d      	bne.n	80154b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	6a1b      	ldr	r3, [r3, #32]
 8015478:	781b      	ldrb	r3, [r3, #0]
 801547a:	2be5      	cmp	r3, #229	; 0xe5
 801547c:	d004      	beq.n	8015488 <dir_alloc+0x50>
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	6a1b      	ldr	r3, [r3, #32]
 8015482:	781b      	ldrb	r3, [r3, #0]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d107      	bne.n	8015498 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015488:	693b      	ldr	r3, [r7, #16]
 801548a:	3301      	adds	r3, #1
 801548c:	613b      	str	r3, [r7, #16]
 801548e:	693a      	ldr	r2, [r7, #16]
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	429a      	cmp	r2, r3
 8015494:	d102      	bne.n	801549c <dir_alloc+0x64>
 8015496:	e00c      	b.n	80154b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015498:	2300      	movs	r3, #0
 801549a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801549c:	2101      	movs	r1, #1
 801549e:	6878      	ldr	r0, [r7, #4]
 80154a0:	f7ff ff05 	bl	80152ae <dir_next>
 80154a4:	4603      	mov	r3, r0
 80154a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80154a8:	7dfb      	ldrb	r3, [r7, #23]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d0d7      	beq.n	801545e <dir_alloc+0x26>
 80154ae:	e000      	b.n	80154b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80154b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80154b2:	7dfb      	ldrb	r3, [r7, #23]
 80154b4:	2b04      	cmp	r3, #4
 80154b6:	d101      	bne.n	80154bc <dir_alloc+0x84>
 80154b8:	2307      	movs	r3, #7
 80154ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80154bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3718      	adds	r7, #24
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}

080154c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80154c6:	b580      	push	{r7, lr}
 80154c8:	b084      	sub	sp, #16
 80154ca:	af00      	add	r7, sp, #0
 80154cc:	6078      	str	r0, [r7, #4]
 80154ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	331a      	adds	r3, #26
 80154d4:	4618      	mov	r0, r3
 80154d6:	f7ff f841 	bl	801455c <ld_word>
 80154da:	4603      	mov	r3, r0
 80154dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	2b03      	cmp	r3, #3
 80154e4:	d109      	bne.n	80154fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80154e6:	683b      	ldr	r3, [r7, #0]
 80154e8:	3314      	adds	r3, #20
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7ff f836 	bl	801455c <ld_word>
 80154f0:	4603      	mov	r3, r0
 80154f2:	041b      	lsls	r3, r3, #16
 80154f4:	68fa      	ldr	r2, [r7, #12]
 80154f6:	4313      	orrs	r3, r2
 80154f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80154fa:	68fb      	ldr	r3, [r7, #12]
}
 80154fc:	4618      	mov	r0, r3
 80154fe:	3710      	adds	r7, #16
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}

08015504 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b084      	sub	sp, #16
 8015508:	af00      	add	r7, sp, #0
 801550a:	60f8      	str	r0, [r7, #12]
 801550c:	60b9      	str	r1, [r7, #8]
 801550e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	331a      	adds	r3, #26
 8015514:	687a      	ldr	r2, [r7, #4]
 8015516:	b292      	uxth	r2, r2
 8015518:	4611      	mov	r1, r2
 801551a:	4618      	mov	r0, r3
 801551c:	f7ff f859 	bl	80145d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	781b      	ldrb	r3, [r3, #0]
 8015524:	2b03      	cmp	r3, #3
 8015526:	d109      	bne.n	801553c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	f103 0214 	add.w	r2, r3, #20
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	0c1b      	lsrs	r3, r3, #16
 8015532:	b29b      	uxth	r3, r3
 8015534:	4619      	mov	r1, r3
 8015536:	4610      	mov	r0, r2
 8015538:	f7ff f84b 	bl	80145d2 <st_word>
	}
}
 801553c:	bf00      	nop
 801553e:	3710      	adds	r7, #16
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}

08015544 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8015544:	b590      	push	{r4, r7, lr}
 8015546:	b087      	sub	sp, #28
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
 801554c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801554e:	683b      	ldr	r3, [r7, #0]
 8015550:	331a      	adds	r3, #26
 8015552:	4618      	mov	r0, r3
 8015554:	f7ff f802 	bl	801455c <ld_word>
 8015558:	4603      	mov	r3, r0
 801555a:	2b00      	cmp	r3, #0
 801555c:	d001      	beq.n	8015562 <cmp_lfn+0x1e>
 801555e:	2300      	movs	r3, #0
 8015560:	e059      	b.n	8015616 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	781b      	ldrb	r3, [r3, #0]
 8015566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801556a:	1e5a      	subs	r2, r3, #1
 801556c:	4613      	mov	r3, r2
 801556e:	005b      	lsls	r3, r3, #1
 8015570:	4413      	add	r3, r2
 8015572:	009b      	lsls	r3, r3, #2
 8015574:	4413      	add	r3, r2
 8015576:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015578:	2301      	movs	r3, #1
 801557a:	81fb      	strh	r3, [r7, #14]
 801557c:	2300      	movs	r3, #0
 801557e:	613b      	str	r3, [r7, #16]
 8015580:	e033      	b.n	80155ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015582:	4a27      	ldr	r2, [pc, #156]	; (8015620 <cmp_lfn+0xdc>)
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	4413      	add	r3, r2
 8015588:	781b      	ldrb	r3, [r3, #0]
 801558a:	461a      	mov	r2, r3
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	4413      	add	r3, r2
 8015590:	4618      	mov	r0, r3
 8015592:	f7fe ffe3 	bl	801455c <ld_word>
 8015596:	4603      	mov	r3, r0
 8015598:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801559a:	89fb      	ldrh	r3, [r7, #14]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d01a      	beq.n	80155d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	2bfe      	cmp	r3, #254	; 0xfe
 80155a4:	d812      	bhi.n	80155cc <cmp_lfn+0x88>
 80155a6:	89bb      	ldrh	r3, [r7, #12]
 80155a8:	4618      	mov	r0, r3
 80155aa:	f002 fa11 	bl	80179d0 <ff_wtoupper>
 80155ae:	4603      	mov	r3, r0
 80155b0:	461c      	mov	r4, r3
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	1c5a      	adds	r2, r3, #1
 80155b6:	617a      	str	r2, [r7, #20]
 80155b8:	005b      	lsls	r3, r3, #1
 80155ba:	687a      	ldr	r2, [r7, #4]
 80155bc:	4413      	add	r3, r2
 80155be:	881b      	ldrh	r3, [r3, #0]
 80155c0:	4618      	mov	r0, r3
 80155c2:	f002 fa05 	bl	80179d0 <ff_wtoupper>
 80155c6:	4603      	mov	r3, r0
 80155c8:	429c      	cmp	r4, r3
 80155ca:	d001      	beq.n	80155d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80155cc:	2300      	movs	r3, #0
 80155ce:	e022      	b.n	8015616 <cmp_lfn+0xd2>
			}
			wc = uc;
 80155d0:	89bb      	ldrh	r3, [r7, #12]
 80155d2:	81fb      	strh	r3, [r7, #14]
 80155d4:	e006      	b.n	80155e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80155d6:	89bb      	ldrh	r3, [r7, #12]
 80155d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80155dc:	4293      	cmp	r3, r2
 80155de:	d001      	beq.n	80155e4 <cmp_lfn+0xa0>
 80155e0:	2300      	movs	r3, #0
 80155e2:	e018      	b.n	8015616 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	3301      	adds	r3, #1
 80155e8:	613b      	str	r3, [r7, #16]
 80155ea:	693b      	ldr	r3, [r7, #16]
 80155ec:	2b0c      	cmp	r3, #12
 80155ee:	d9c8      	bls.n	8015582 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d00b      	beq.n	8015614 <cmp_lfn+0xd0>
 80155fc:	89fb      	ldrh	r3, [r7, #14]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d008      	beq.n	8015614 <cmp_lfn+0xd0>
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	005b      	lsls	r3, r3, #1
 8015606:	687a      	ldr	r2, [r7, #4]
 8015608:	4413      	add	r3, r2
 801560a:	881b      	ldrh	r3, [r3, #0]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d001      	beq.n	8015614 <cmp_lfn+0xd0>
 8015610:	2300      	movs	r3, #0
 8015612:	e000      	b.n	8015616 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8015614:	2301      	movs	r3, #1
}
 8015616:	4618      	mov	r0, r3
 8015618:	371c      	adds	r7, #28
 801561a:	46bd      	mov	sp, r7
 801561c:	bd90      	pop	{r4, r7, pc}
 801561e:	bf00      	nop
 8015620:	0801bcf0 	.word	0x0801bcf0

08015624 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b086      	sub	sp, #24
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
 801562c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	331a      	adds	r3, #26
 8015632:	4618      	mov	r0, r3
 8015634:	f7fe ff92 	bl	801455c <ld_word>
 8015638:	4603      	mov	r3, r0
 801563a:	2b00      	cmp	r3, #0
 801563c:	d001      	beq.n	8015642 <pick_lfn+0x1e>
 801563e:	2300      	movs	r3, #0
 8015640:	e04d      	b.n	80156de <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801564a:	1e5a      	subs	r2, r3, #1
 801564c:	4613      	mov	r3, r2
 801564e:	005b      	lsls	r3, r3, #1
 8015650:	4413      	add	r3, r2
 8015652:	009b      	lsls	r3, r3, #2
 8015654:	4413      	add	r3, r2
 8015656:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015658:	2301      	movs	r3, #1
 801565a:	81fb      	strh	r3, [r7, #14]
 801565c:	2300      	movs	r3, #0
 801565e:	613b      	str	r3, [r7, #16]
 8015660:	e028      	b.n	80156b4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015662:	4a21      	ldr	r2, [pc, #132]	; (80156e8 <pick_lfn+0xc4>)
 8015664:	693b      	ldr	r3, [r7, #16]
 8015666:	4413      	add	r3, r2
 8015668:	781b      	ldrb	r3, [r3, #0]
 801566a:	461a      	mov	r2, r3
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	4413      	add	r3, r2
 8015670:	4618      	mov	r0, r3
 8015672:	f7fe ff73 	bl	801455c <ld_word>
 8015676:	4603      	mov	r3, r0
 8015678:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801567a:	89fb      	ldrh	r3, [r7, #14]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d00f      	beq.n	80156a0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	2bfe      	cmp	r3, #254	; 0xfe
 8015684:	d901      	bls.n	801568a <pick_lfn+0x66>
 8015686:	2300      	movs	r3, #0
 8015688:	e029      	b.n	80156de <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801568a:	89bb      	ldrh	r3, [r7, #12]
 801568c:	81fb      	strh	r3, [r7, #14]
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	1c5a      	adds	r2, r3, #1
 8015692:	617a      	str	r2, [r7, #20]
 8015694:	005b      	lsls	r3, r3, #1
 8015696:	687a      	ldr	r2, [r7, #4]
 8015698:	4413      	add	r3, r2
 801569a:	89fa      	ldrh	r2, [r7, #14]
 801569c:	801a      	strh	r2, [r3, #0]
 801569e:	e006      	b.n	80156ae <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80156a0:	89bb      	ldrh	r3, [r7, #12]
 80156a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156a6:	4293      	cmp	r3, r2
 80156a8:	d001      	beq.n	80156ae <pick_lfn+0x8a>
 80156aa:	2300      	movs	r3, #0
 80156ac:	e017      	b.n	80156de <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	3301      	adds	r3, #1
 80156b2:	613b      	str	r3, [r7, #16]
 80156b4:	693b      	ldr	r3, [r7, #16]
 80156b6:	2b0c      	cmp	r3, #12
 80156b8:	d9d3      	bls.n	8015662 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	781b      	ldrb	r3, [r3, #0]
 80156be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d00a      	beq.n	80156dc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	2bfe      	cmp	r3, #254	; 0xfe
 80156ca:	d901      	bls.n	80156d0 <pick_lfn+0xac>
 80156cc:	2300      	movs	r3, #0
 80156ce:	e006      	b.n	80156de <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80156d0:	697b      	ldr	r3, [r7, #20]
 80156d2:	005b      	lsls	r3, r3, #1
 80156d4:	687a      	ldr	r2, [r7, #4]
 80156d6:	4413      	add	r3, r2
 80156d8:	2200      	movs	r2, #0
 80156da:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80156dc:	2301      	movs	r3, #1
}
 80156de:	4618      	mov	r0, r3
 80156e0:	3718      	adds	r7, #24
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}
 80156e6:	bf00      	nop
 80156e8:	0801bcf0 	.word	0x0801bcf0

080156ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b088      	sub	sp, #32
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	60f8      	str	r0, [r7, #12]
 80156f4:	60b9      	str	r1, [r7, #8]
 80156f6:	4611      	mov	r1, r2
 80156f8:	461a      	mov	r2, r3
 80156fa:	460b      	mov	r3, r1
 80156fc:	71fb      	strb	r3, [r7, #7]
 80156fe:	4613      	mov	r3, r2
 8015700:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015702:	68bb      	ldr	r3, [r7, #8]
 8015704:	330d      	adds	r3, #13
 8015706:	79ba      	ldrb	r2, [r7, #6]
 8015708:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	330b      	adds	r3, #11
 801570e:	220f      	movs	r2, #15
 8015710:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8015712:	68bb      	ldr	r3, [r7, #8]
 8015714:	330c      	adds	r3, #12
 8015716:	2200      	movs	r2, #0
 8015718:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	331a      	adds	r3, #26
 801571e:	2100      	movs	r1, #0
 8015720:	4618      	mov	r0, r3
 8015722:	f7fe ff56 	bl	80145d2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015726:	79fb      	ldrb	r3, [r7, #7]
 8015728:	1e5a      	subs	r2, r3, #1
 801572a:	4613      	mov	r3, r2
 801572c:	005b      	lsls	r3, r3, #1
 801572e:	4413      	add	r3, r2
 8015730:	009b      	lsls	r3, r3, #2
 8015732:	4413      	add	r3, r2
 8015734:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8015736:	2300      	movs	r3, #0
 8015738:	82fb      	strh	r3, [r7, #22]
 801573a:	2300      	movs	r3, #0
 801573c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801573e:	8afb      	ldrh	r3, [r7, #22]
 8015740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015744:	4293      	cmp	r3, r2
 8015746:	d007      	beq.n	8015758 <put_lfn+0x6c>
 8015748:	69fb      	ldr	r3, [r7, #28]
 801574a:	1c5a      	adds	r2, r3, #1
 801574c:	61fa      	str	r2, [r7, #28]
 801574e:	005b      	lsls	r3, r3, #1
 8015750:	68fa      	ldr	r2, [r7, #12]
 8015752:	4413      	add	r3, r2
 8015754:	881b      	ldrh	r3, [r3, #0]
 8015756:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015758:	4a17      	ldr	r2, [pc, #92]	; (80157b8 <put_lfn+0xcc>)
 801575a:	69bb      	ldr	r3, [r7, #24]
 801575c:	4413      	add	r3, r2
 801575e:	781b      	ldrb	r3, [r3, #0]
 8015760:	461a      	mov	r2, r3
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	4413      	add	r3, r2
 8015766:	8afa      	ldrh	r2, [r7, #22]
 8015768:	4611      	mov	r1, r2
 801576a:	4618      	mov	r0, r3
 801576c:	f7fe ff31 	bl	80145d2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015770:	8afb      	ldrh	r3, [r7, #22]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d102      	bne.n	801577c <put_lfn+0x90>
 8015776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801577a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801577c:	69bb      	ldr	r3, [r7, #24]
 801577e:	3301      	adds	r3, #1
 8015780:	61bb      	str	r3, [r7, #24]
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	2b0c      	cmp	r3, #12
 8015786:	d9da      	bls.n	801573e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015788:	8afb      	ldrh	r3, [r7, #22]
 801578a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801578e:	4293      	cmp	r3, r2
 8015790:	d006      	beq.n	80157a0 <put_lfn+0xb4>
 8015792:	69fb      	ldr	r3, [r7, #28]
 8015794:	005b      	lsls	r3, r3, #1
 8015796:	68fa      	ldr	r2, [r7, #12]
 8015798:	4413      	add	r3, r2
 801579a:	881b      	ldrh	r3, [r3, #0]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d103      	bne.n	80157a8 <put_lfn+0xbc>
 80157a0:	79fb      	ldrb	r3, [r7, #7]
 80157a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	79fa      	ldrb	r2, [r7, #7]
 80157ac:	701a      	strb	r2, [r3, #0]
}
 80157ae:	bf00      	nop
 80157b0:	3720      	adds	r7, #32
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}
 80157b6:	bf00      	nop
 80157b8:	0801bcf0 	.word	0x0801bcf0

080157bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b08c      	sub	sp, #48	; 0x30
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	60f8      	str	r0, [r7, #12]
 80157c4:	60b9      	str	r1, [r7, #8]
 80157c6:	607a      	str	r2, [r7, #4]
 80157c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80157ca:	220b      	movs	r2, #11
 80157cc:	68b9      	ldr	r1, [r7, #8]
 80157ce:	68f8      	ldr	r0, [r7, #12]
 80157d0:	f7fe ff46 	bl	8014660 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	2b05      	cmp	r3, #5
 80157d8:	d929      	bls.n	801582e <gen_numname+0x72>
		sr = seq;
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80157de:	e020      	b.n	8015822 <gen_numname+0x66>
			wc = *lfn++;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	1c9a      	adds	r2, r3, #2
 80157e4:	607a      	str	r2, [r7, #4]
 80157e6:	881b      	ldrh	r3, [r3, #0]
 80157e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80157ea:	2300      	movs	r3, #0
 80157ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80157ee:	e015      	b.n	801581c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80157f0:	69fb      	ldr	r3, [r7, #28]
 80157f2:	005a      	lsls	r2, r3, #1
 80157f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157f6:	f003 0301 	and.w	r3, r3, #1
 80157fa:	4413      	add	r3, r2
 80157fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80157fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015800:	085b      	lsrs	r3, r3, #1
 8015802:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8015804:	69fb      	ldr	r3, [r7, #28]
 8015806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801580a:	2b00      	cmp	r3, #0
 801580c:	d003      	beq.n	8015816 <gen_numname+0x5a>
 801580e:	69fa      	ldr	r2, [r7, #28]
 8015810:	4b3b      	ldr	r3, [pc, #236]	; (8015900 <gen_numname+0x144>)
 8015812:	4053      	eors	r3, r2
 8015814:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8015816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015818:	3301      	adds	r3, #1
 801581a:	62bb      	str	r3, [r7, #40]	; 0x28
 801581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801581e:	2b0f      	cmp	r3, #15
 8015820:	d9e6      	bls.n	80157f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d1da      	bne.n	80157e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801582a:	69fb      	ldr	r3, [r7, #28]
 801582c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801582e:	2307      	movs	r3, #7
 8015830:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	b2db      	uxtb	r3, r3
 8015836:	f003 030f 	and.w	r3, r3, #15
 801583a:	b2db      	uxtb	r3, r3
 801583c:	3330      	adds	r3, #48	; 0x30
 801583e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8015842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015846:	2b39      	cmp	r3, #57	; 0x39
 8015848:	d904      	bls.n	8015854 <gen_numname+0x98>
 801584a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801584e:	3307      	adds	r3, #7
 8015850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8015854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015856:	1e5a      	subs	r2, r3, #1
 8015858:	62ba      	str	r2, [r7, #40]	; 0x28
 801585a:	3330      	adds	r3, #48	; 0x30
 801585c:	443b      	add	r3, r7
 801585e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8015862:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	091b      	lsrs	r3, r3, #4
 801586a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d1df      	bne.n	8015832 <gen_numname+0x76>
	ns[i] = '~';
 8015872:	f107 0214 	add.w	r2, r7, #20
 8015876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015878:	4413      	add	r3, r2
 801587a:	227e      	movs	r2, #126	; 0x7e
 801587c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801587e:	2300      	movs	r3, #0
 8015880:	627b      	str	r3, [r7, #36]	; 0x24
 8015882:	e016      	b.n	80158b2 <gen_numname+0xf6>
		if (IsDBCS1(dst[j])) {
 8015884:	68fa      	ldr	r2, [r7, #12]
 8015886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015888:	4413      	add	r3, r2
 801588a:	781b      	ldrb	r3, [r3, #0]
 801588c:	2b80      	cmp	r3, #128	; 0x80
 801588e:	d90d      	bls.n	80158ac <gen_numname+0xf0>
 8015890:	68fa      	ldr	r2, [r7, #12]
 8015892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015894:	4413      	add	r3, r2
 8015896:	781b      	ldrb	r3, [r3, #0]
 8015898:	2bff      	cmp	r3, #255	; 0xff
 801589a:	d007      	beq.n	80158ac <gen_numname+0xf0>
			if (j == i - 1) break;
 801589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801589e:	3b01      	subs	r3, #1
 80158a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d010      	beq.n	80158c8 <gen_numname+0x10c>
			j++;
 80158a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a8:	3301      	adds	r3, #1
 80158aa:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80158ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ae:	3301      	adds	r3, #1
 80158b0:	627b      	str	r3, [r7, #36]	; 0x24
 80158b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b6:	429a      	cmp	r2, r3
 80158b8:	d207      	bcs.n	80158ca <gen_numname+0x10e>
 80158ba:	68fa      	ldr	r2, [r7, #12]
 80158bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158be:	4413      	add	r3, r2
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	2b20      	cmp	r3, #32
 80158c4:	d1de      	bne.n	8015884 <gen_numname+0xc8>
 80158c6:	e000      	b.n	80158ca <gen_numname+0x10e>
			if (j == i - 1) break;
 80158c8:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80158ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158cc:	2b07      	cmp	r3, #7
 80158ce:	d807      	bhi.n	80158e0 <gen_numname+0x124>
 80158d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d2:	1c5a      	adds	r2, r3, #1
 80158d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80158d6:	3330      	adds	r3, #48	; 0x30
 80158d8:	443b      	add	r3, r7
 80158da:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80158de:	e000      	b.n	80158e2 <gen_numname+0x126>
 80158e0:	2120      	movs	r1, #32
 80158e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e4:	1c5a      	adds	r2, r3, #1
 80158e6:	627a      	str	r2, [r7, #36]	; 0x24
 80158e8:	68fa      	ldr	r2, [r7, #12]
 80158ea:	4413      	add	r3, r2
 80158ec:	460a      	mov	r2, r1
 80158ee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80158f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f2:	2b07      	cmp	r3, #7
 80158f4:	d9e9      	bls.n	80158ca <gen_numname+0x10e>
}
 80158f6:	bf00      	nop
 80158f8:	bf00      	nop
 80158fa:	3730      	adds	r7, #48	; 0x30
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	00011021 	.word	0x00011021

08015904 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8015904:	b480      	push	{r7}
 8015906:	b085      	sub	sp, #20
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801590c:	2300      	movs	r3, #0
 801590e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8015910:	230b      	movs	r3, #11
 8015912:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015914:	7bfb      	ldrb	r3, [r7, #15]
 8015916:	b2da      	uxtb	r2, r3
 8015918:	0852      	lsrs	r2, r2, #1
 801591a:	01db      	lsls	r3, r3, #7
 801591c:	4313      	orrs	r3, r2
 801591e:	b2da      	uxtb	r2, r3
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	1c59      	adds	r1, r3, #1
 8015924:	6079      	str	r1, [r7, #4]
 8015926:	781b      	ldrb	r3, [r3, #0]
 8015928:	4413      	add	r3, r2
 801592a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801592c:	68bb      	ldr	r3, [r7, #8]
 801592e:	3b01      	subs	r3, #1
 8015930:	60bb      	str	r3, [r7, #8]
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d1ed      	bne.n	8015914 <sum_sfn+0x10>
	return sum;
 8015938:	7bfb      	ldrb	r3, [r7, #15]
}
 801593a:	4618      	mov	r0, r3
 801593c:	3714      	adds	r7, #20
 801593e:	46bd      	mov	sp, r7
 8015940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015944:	4770      	bx	lr

08015946 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8015946:	b580      	push	{r7, lr}
 8015948:	b086      	sub	sp, #24
 801594a:	af00      	add	r7, sp, #0
 801594c:	6078      	str	r0, [r7, #4]
 801594e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8015950:	2304      	movs	r3, #4
 8015952:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801595a:	23ff      	movs	r3, #255	; 0xff
 801595c:	757b      	strb	r3, [r7, #21]
 801595e:	23ff      	movs	r3, #255	; 0xff
 8015960:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8015962:	e081      	b.n	8015a68 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	69db      	ldr	r3, [r3, #28]
 8015968:	4619      	mov	r1, r3
 801596a:	6938      	ldr	r0, [r7, #16]
 801596c:	f7ff f8a6 	bl	8014abc <move_window>
 8015970:	4603      	mov	r3, r0
 8015972:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015974:	7dfb      	ldrb	r3, [r7, #23]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d17c      	bne.n	8015a74 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	6a1b      	ldr	r3, [r3, #32]
 801597e:	781b      	ldrb	r3, [r3, #0]
 8015980:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8015982:	7dbb      	ldrb	r3, [r7, #22]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d102      	bne.n	801598e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8015988:	2304      	movs	r3, #4
 801598a:	75fb      	strb	r3, [r7, #23]
 801598c:	e077      	b.n	8015a7e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	6a1b      	ldr	r3, [r3, #32]
 8015992:	330b      	adds	r3, #11
 8015994:	781b      	ldrb	r3, [r3, #0]
 8015996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801599a:	73fb      	strb	r3, [r7, #15]
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	7bfa      	ldrb	r2, [r7, #15]
 80159a0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80159a2:	7dbb      	ldrb	r3, [r7, #22]
 80159a4:	2be5      	cmp	r3, #229	; 0xe5
 80159a6:	d00e      	beq.n	80159c6 <dir_read+0x80>
 80159a8:	7dbb      	ldrb	r3, [r7, #22]
 80159aa:	2b2e      	cmp	r3, #46	; 0x2e
 80159ac:	d00b      	beq.n	80159c6 <dir_read+0x80>
 80159ae:	7bfb      	ldrb	r3, [r7, #15]
 80159b0:	f023 0320 	bic.w	r3, r3, #32
 80159b4:	2b08      	cmp	r3, #8
 80159b6:	bf0c      	ite	eq
 80159b8:	2301      	moveq	r3, #1
 80159ba:	2300      	movne	r3, #0
 80159bc:	b2db      	uxtb	r3, r3
 80159be:	461a      	mov	r2, r3
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	4293      	cmp	r3, r2
 80159c4:	d002      	beq.n	80159cc <dir_read+0x86>
				ord = 0xFF;
 80159c6:	23ff      	movs	r3, #255	; 0xff
 80159c8:	757b      	strb	r3, [r7, #21]
 80159ca:	e044      	b.n	8015a56 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80159cc:	7bfb      	ldrb	r3, [r7, #15]
 80159ce:	2b0f      	cmp	r3, #15
 80159d0:	d12f      	bne.n	8015a32 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80159d2:	7dbb      	ldrb	r3, [r7, #22]
 80159d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d00d      	beq.n	80159f8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	6a1b      	ldr	r3, [r3, #32]
 80159e0:	7b5b      	ldrb	r3, [r3, #13]
 80159e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80159e4:	7dbb      	ldrb	r3, [r7, #22]
 80159e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80159ea:	75bb      	strb	r3, [r7, #22]
 80159ec:	7dbb      	ldrb	r3, [r7, #22]
 80159ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	695a      	ldr	r2, [r3, #20]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80159f8:	7dba      	ldrb	r2, [r7, #22]
 80159fa:	7d7b      	ldrb	r3, [r7, #21]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d115      	bne.n	8015a2c <dir_read+0xe6>
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6a1b      	ldr	r3, [r3, #32]
 8015a04:	330d      	adds	r3, #13
 8015a06:	781b      	ldrb	r3, [r3, #0]
 8015a08:	7d3a      	ldrb	r2, [r7, #20]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d10e      	bne.n	8015a2c <dir_read+0xe6>
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	68da      	ldr	r2, [r3, #12]
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	6a1b      	ldr	r3, [r3, #32]
 8015a16:	4619      	mov	r1, r3
 8015a18:	4610      	mov	r0, r2
 8015a1a:	f7ff fe03 	bl	8015624 <pick_lfn>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d003      	beq.n	8015a2c <dir_read+0xe6>
 8015a24:	7d7b      	ldrb	r3, [r7, #21]
 8015a26:	3b01      	subs	r3, #1
 8015a28:	b2db      	uxtb	r3, r3
 8015a2a:	e000      	b.n	8015a2e <dir_read+0xe8>
 8015a2c:	23ff      	movs	r3, #255	; 0xff
 8015a2e:	757b      	strb	r3, [r7, #21]
 8015a30:	e011      	b.n	8015a56 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8015a32:	7d7b      	ldrb	r3, [r7, #21]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d109      	bne.n	8015a4c <dir_read+0x106>
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	6a1b      	ldr	r3, [r3, #32]
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f7ff ff61 	bl	8015904 <sum_sfn>
 8015a42:	4603      	mov	r3, r0
 8015a44:	461a      	mov	r2, r3
 8015a46:	7d3b      	ldrb	r3, [r7, #20]
 8015a48:	4293      	cmp	r3, r2
 8015a4a:	d015      	beq.n	8015a78 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8015a52:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8015a54:	e010      	b.n	8015a78 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8015a56:	2100      	movs	r1, #0
 8015a58:	6878      	ldr	r0, [r7, #4]
 8015a5a:	f7ff fc28 	bl	80152ae <dir_next>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015a62:	7dfb      	ldrb	r3, [r7, #23]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d109      	bne.n	8015a7c <dir_read+0x136>
	while (dp->sect) {
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	69db      	ldr	r3, [r3, #28]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	f47f af79 	bne.w	8015964 <dir_read+0x1e>
 8015a72:	e004      	b.n	8015a7e <dir_read+0x138>
		if (res != FR_OK) break;
 8015a74:	bf00      	nop
 8015a76:	e002      	b.n	8015a7e <dir_read+0x138>
					break;
 8015a78:	bf00      	nop
 8015a7a:	e000      	b.n	8015a7e <dir_read+0x138>
		if (res != FR_OK) break;
 8015a7c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8015a7e:	7dfb      	ldrb	r3, [r7, #23]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d002      	beq.n	8015a8a <dir_read+0x144>
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	2200      	movs	r2, #0
 8015a88:	61da      	str	r2, [r3, #28]
	return res;
 8015a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	3718      	adds	r7, #24
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}

08015a94 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b086      	sub	sp, #24
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f7ff fb87 	bl	80151b8 <dir_sdi>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015aae:	7dfb      	ldrb	r3, [r7, #23]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d001      	beq.n	8015ab8 <dir_find+0x24>
 8015ab4:	7dfb      	ldrb	r3, [r7, #23]
 8015ab6:	e0a9      	b.n	8015c0c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015ab8:	23ff      	movs	r3, #255	; 0xff
 8015aba:	753b      	strb	r3, [r7, #20]
 8015abc:	7d3b      	ldrb	r3, [r7, #20]
 8015abe:	757b      	strb	r3, [r7, #21]
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8015ac6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	69db      	ldr	r3, [r3, #28]
 8015acc:	4619      	mov	r1, r3
 8015ace:	6938      	ldr	r0, [r7, #16]
 8015ad0:	f7fe fff4 	bl	8014abc <move_window>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015ad8:	7dfb      	ldrb	r3, [r7, #23]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	f040 8090 	bne.w	8015c00 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6a1b      	ldr	r3, [r3, #32]
 8015ae4:	781b      	ldrb	r3, [r3, #0]
 8015ae6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015ae8:	7dbb      	ldrb	r3, [r7, #22]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d102      	bne.n	8015af4 <dir_find+0x60>
 8015aee:	2304      	movs	r3, #4
 8015af0:	75fb      	strb	r3, [r7, #23]
 8015af2:	e08a      	b.n	8015c0a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6a1b      	ldr	r3, [r3, #32]
 8015af8:	330b      	adds	r3, #11
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b00:	73fb      	strb	r3, [r7, #15]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	7bfa      	ldrb	r2, [r7, #15]
 8015b06:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015b08:	7dbb      	ldrb	r3, [r7, #22]
 8015b0a:	2be5      	cmp	r3, #229	; 0xe5
 8015b0c:	d007      	beq.n	8015b1e <dir_find+0x8a>
 8015b0e:	7bfb      	ldrb	r3, [r7, #15]
 8015b10:	f003 0308 	and.w	r3, r3, #8
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d009      	beq.n	8015b2c <dir_find+0x98>
 8015b18:	7bfb      	ldrb	r3, [r7, #15]
 8015b1a:	2b0f      	cmp	r3, #15
 8015b1c:	d006      	beq.n	8015b2c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015b1e:	23ff      	movs	r3, #255	; 0xff
 8015b20:	757b      	strb	r3, [r7, #21]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	f04f 32ff 	mov.w	r2, #4294967295
 8015b28:	631a      	str	r2, [r3, #48]	; 0x30
 8015b2a:	e05e      	b.n	8015bea <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8015b2c:	7bfb      	ldrb	r3, [r7, #15]
 8015b2e:	2b0f      	cmp	r3, #15
 8015b30:	d136      	bne.n	8015ba0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d154      	bne.n	8015bea <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015b40:	7dbb      	ldrb	r3, [r7, #22]
 8015b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d00d      	beq.n	8015b66 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	6a1b      	ldr	r3, [r3, #32]
 8015b4e:	7b5b      	ldrb	r3, [r3, #13]
 8015b50:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8015b52:	7dbb      	ldrb	r3, [r7, #22]
 8015b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015b58:	75bb      	strb	r3, [r7, #22]
 8015b5a:	7dbb      	ldrb	r3, [r7, #22]
 8015b5c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	695a      	ldr	r2, [r3, #20]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015b66:	7dba      	ldrb	r2, [r7, #22]
 8015b68:	7d7b      	ldrb	r3, [r7, #21]
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d115      	bne.n	8015b9a <dir_find+0x106>
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	6a1b      	ldr	r3, [r3, #32]
 8015b72:	330d      	adds	r3, #13
 8015b74:	781b      	ldrb	r3, [r3, #0]
 8015b76:	7d3a      	ldrb	r2, [r7, #20]
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	d10e      	bne.n	8015b9a <dir_find+0x106>
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	68da      	ldr	r2, [r3, #12]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6a1b      	ldr	r3, [r3, #32]
 8015b84:	4619      	mov	r1, r3
 8015b86:	4610      	mov	r0, r2
 8015b88:	f7ff fcdc 	bl	8015544 <cmp_lfn>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d003      	beq.n	8015b9a <dir_find+0x106>
 8015b92:	7d7b      	ldrb	r3, [r7, #21]
 8015b94:	3b01      	subs	r3, #1
 8015b96:	b2db      	uxtb	r3, r3
 8015b98:	e000      	b.n	8015b9c <dir_find+0x108>
 8015b9a:	23ff      	movs	r3, #255	; 0xff
 8015b9c:	757b      	strb	r3, [r7, #21]
 8015b9e:	e024      	b.n	8015bea <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015ba0:	7d7b      	ldrb	r3, [r7, #21]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d109      	bne.n	8015bba <dir_find+0x126>
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	6a1b      	ldr	r3, [r3, #32]
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7ff feaa 	bl	8015904 <sum_sfn>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	461a      	mov	r2, r3
 8015bb4:	7d3b      	ldrb	r3, [r7, #20]
 8015bb6:	4293      	cmp	r3, r2
 8015bb8:	d024      	beq.n	8015c04 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015bc0:	f003 0301 	and.w	r3, r3, #1
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d10a      	bne.n	8015bde <dir_find+0x14a>
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	6a18      	ldr	r0, [r3, #32]
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	3324      	adds	r3, #36	; 0x24
 8015bd0:	220b      	movs	r2, #11
 8015bd2:	4619      	mov	r1, r3
 8015bd4:	f7fe fd80 	bl	80146d8 <mem_cmp>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d014      	beq.n	8015c08 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015bde:	23ff      	movs	r3, #255	; 0xff
 8015be0:	757b      	strb	r3, [r7, #21]
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f04f 32ff 	mov.w	r2, #4294967295
 8015be8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015bea:	2100      	movs	r1, #0
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f7ff fb5e 	bl	80152ae <dir_next>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015bf6:	7dfb      	ldrb	r3, [r7, #23]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	f43f af65 	beq.w	8015ac8 <dir_find+0x34>
 8015bfe:	e004      	b.n	8015c0a <dir_find+0x176>
		if (res != FR_OK) break;
 8015c00:	bf00      	nop
 8015c02:	e002      	b.n	8015c0a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015c04:	bf00      	nop
 8015c06:	e000      	b.n	8015c0a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015c08:	bf00      	nop

	return res;
 8015c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	3718      	adds	r7, #24
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}

08015c14 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b08c      	sub	sp, #48	; 0x30
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015c28:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d001      	beq.n	8015c34 <dir_register+0x20>
 8015c30:	2306      	movs	r3, #6
 8015c32:	e0e0      	b.n	8015df6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015c34:	2300      	movs	r3, #0
 8015c36:	627b      	str	r3, [r7, #36]	; 0x24
 8015c38:	e002      	b.n	8015c40 <dir_register+0x2c>
 8015c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3c:	3301      	adds	r3, #1
 8015c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8015c40:	69fb      	ldr	r3, [r7, #28]
 8015c42:	68da      	ldr	r2, [r3, #12]
 8015c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c46:	005b      	lsls	r3, r3, #1
 8015c48:	4413      	add	r3, r2
 8015c4a:	881b      	ldrh	r3, [r3, #0]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d1f4      	bne.n	8015c3a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8015c56:	f107 030c 	add.w	r3, r7, #12
 8015c5a:	220c      	movs	r2, #12
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f7fe fcff 	bl	8014660 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8015c62:	7dfb      	ldrb	r3, [r7, #23]
 8015c64:	f003 0301 	and.w	r3, r3, #1
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d032      	beq.n	8015cd2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2240      	movs	r2, #64	; 0x40
 8015c70:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8015c74:	2301      	movs	r3, #1
 8015c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c78:	e016      	b.n	8015ca8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8015c80:	69fb      	ldr	r3, [r7, #28]
 8015c82:	68da      	ldr	r2, [r3, #12]
 8015c84:	f107 010c 	add.w	r1, r7, #12
 8015c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8a:	f7ff fd97 	bl	80157bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f7ff ff00 	bl	8015a94 <dir_find>
 8015c94:	4603      	mov	r3, r0
 8015c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8015c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d106      	bne.n	8015cb0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8015ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca4:	3301      	adds	r3, #1
 8015ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015caa:	2b63      	cmp	r3, #99	; 0x63
 8015cac:	d9e5      	bls.n	8015c7a <dir_register+0x66>
 8015cae:	e000      	b.n	8015cb2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8015cb0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb4:	2b64      	cmp	r3, #100	; 0x64
 8015cb6:	d101      	bne.n	8015cbc <dir_register+0xa8>
 8015cb8:	2307      	movs	r3, #7
 8015cba:	e09c      	b.n	8015df6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015cc0:	2b04      	cmp	r3, #4
 8015cc2:	d002      	beq.n	8015cca <dir_register+0xb6>
 8015cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015cc8:	e095      	b.n	8015df6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015cca:	7dfa      	ldrb	r2, [r7, #23]
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015cd2:	7dfb      	ldrb	r3, [r7, #23]
 8015cd4:	f003 0302 	and.w	r3, r3, #2
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d007      	beq.n	8015cec <dir_register+0xd8>
 8015cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cde:	330c      	adds	r3, #12
 8015ce0:	4a47      	ldr	r2, [pc, #284]	; (8015e00 <dir_register+0x1ec>)
 8015ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8015ce6:	089b      	lsrs	r3, r3, #2
 8015ce8:	3301      	adds	r3, #1
 8015cea:	e000      	b.n	8015cee <dir_register+0xda>
 8015cec:	2301      	movs	r3, #1
 8015cee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015cf0:	6a39      	ldr	r1, [r7, #32]
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f7ff fba0 	bl	8015438 <dir_alloc>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d148      	bne.n	8015d98 <dir_register+0x184>
 8015d06:	6a3b      	ldr	r3, [r7, #32]
 8015d08:	3b01      	subs	r3, #1
 8015d0a:	623b      	str	r3, [r7, #32]
 8015d0c:	6a3b      	ldr	r3, [r7, #32]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d042      	beq.n	8015d98 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	695a      	ldr	r2, [r3, #20]
 8015d16:	6a3b      	ldr	r3, [r7, #32]
 8015d18:	015b      	lsls	r3, r3, #5
 8015d1a:	1ad3      	subs	r3, r2, r3
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f7ff fa4a 	bl	80151b8 <dir_sdi>
 8015d24:	4603      	mov	r3, r0
 8015d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d132      	bne.n	8015d98 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	3324      	adds	r3, #36	; 0x24
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7ff fde4 	bl	8015904 <sum_sfn>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	69db      	ldr	r3, [r3, #28]
 8015d44:	4619      	mov	r1, r3
 8015d46:	69f8      	ldr	r0, [r7, #28]
 8015d48:	f7fe feb8 	bl	8014abc <move_window>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8015d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d11d      	bne.n	8015d96 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015d5a:	69fb      	ldr	r3, [r7, #28]
 8015d5c:	68d8      	ldr	r0, [r3, #12]
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6a19      	ldr	r1, [r3, #32]
 8015d62:	6a3b      	ldr	r3, [r7, #32]
 8015d64:	b2da      	uxtb	r2, r3
 8015d66:	7efb      	ldrb	r3, [r7, #27]
 8015d68:	f7ff fcc0 	bl	80156ec <put_lfn>
				fs->wflag = 1;
 8015d6c:	69fb      	ldr	r3, [r7, #28]
 8015d6e:	2201      	movs	r2, #1
 8015d70:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015d72:	2100      	movs	r1, #0
 8015d74:	6878      	ldr	r0, [r7, #4]
 8015d76:	f7ff fa9a 	bl	80152ae <dir_next>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015d80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d107      	bne.n	8015d98 <dir_register+0x184>
 8015d88:	6a3b      	ldr	r3, [r7, #32]
 8015d8a:	3b01      	subs	r3, #1
 8015d8c:	623b      	str	r3, [r7, #32]
 8015d8e:	6a3b      	ldr	r3, [r7, #32]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d1d5      	bne.n	8015d40 <dir_register+0x12c>
 8015d94:	e000      	b.n	8015d98 <dir_register+0x184>
				if (res != FR_OK) break;
 8015d96:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d128      	bne.n	8015df2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	69db      	ldr	r3, [r3, #28]
 8015da4:	4619      	mov	r1, r3
 8015da6:	69f8      	ldr	r0, [r7, #28]
 8015da8:	f7fe fe88 	bl	8014abc <move_window>
 8015dac:	4603      	mov	r3, r0
 8015dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d11b      	bne.n	8015df2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	6a1b      	ldr	r3, [r3, #32]
 8015dbe:	2220      	movs	r2, #32
 8015dc0:	2100      	movs	r1, #0
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7fe fc6d 	bl	80146a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	6a18      	ldr	r0, [r3, #32]
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	3324      	adds	r3, #36	; 0x24
 8015dd0:	220b      	movs	r2, #11
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	f7fe fc44 	bl	8014660 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	6a1b      	ldr	r3, [r3, #32]
 8015de2:	330c      	adds	r3, #12
 8015de4:	f002 0218 	and.w	r2, r2, #24
 8015de8:	b2d2      	uxtb	r2, r2
 8015dea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	2201      	movs	r2, #1
 8015df0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3730      	adds	r7, #48	; 0x30
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop
 8015e00:	4ec4ec4f 	.word	0x4ec4ec4f

08015e04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b08a      	sub	sp, #40	; 0x28
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
 8015e0c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	613b      	str	r3, [r7, #16]
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	68db      	ldr	r3, [r3, #12]
 8015e1a:	60fb      	str	r3, [r7, #12]
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	617b      	str	r3, [r7, #20]
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8015e24:	69bb      	ldr	r3, [r7, #24]
 8015e26:	1c5a      	adds	r2, r3, #1
 8015e28:	61ba      	str	r2, [r7, #24]
 8015e2a:	693a      	ldr	r2, [r7, #16]
 8015e2c:	4413      	add	r3, r2
 8015e2e:	781b      	ldrb	r3, [r3, #0]
 8015e30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8015e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e34:	2b1f      	cmp	r3, #31
 8015e36:	d96a      	bls.n	8015f0e <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e3a:	2b2f      	cmp	r3, #47	; 0x2f
 8015e3c:	d006      	beq.n	8015e4c <create_name+0x48>
 8015e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e40:	2b5c      	cmp	r3, #92	; 0x5c
 8015e42:	d110      	bne.n	8015e66 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015e44:	e002      	b.n	8015e4c <create_name+0x48>
 8015e46:	69bb      	ldr	r3, [r7, #24]
 8015e48:	3301      	adds	r3, #1
 8015e4a:	61bb      	str	r3, [r7, #24]
 8015e4c:	693a      	ldr	r2, [r7, #16]
 8015e4e:	69bb      	ldr	r3, [r7, #24]
 8015e50:	4413      	add	r3, r2
 8015e52:	781b      	ldrb	r3, [r3, #0]
 8015e54:	2b2f      	cmp	r3, #47	; 0x2f
 8015e56:	d0f6      	beq.n	8015e46 <create_name+0x42>
 8015e58:	693a      	ldr	r2, [r7, #16]
 8015e5a:	69bb      	ldr	r3, [r7, #24]
 8015e5c:	4413      	add	r3, r2
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	2b5c      	cmp	r3, #92	; 0x5c
 8015e62:	d0f0      	beq.n	8015e46 <create_name+0x42>
			break;
 8015e64:	e054      	b.n	8015f10 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8015e66:	697b      	ldr	r3, [r7, #20]
 8015e68:	2bfe      	cmp	r3, #254	; 0xfe
 8015e6a:	d901      	bls.n	8015e70 <create_name+0x6c>
 8015e6c:	2306      	movs	r3, #6
 8015e6e:	e1bf      	b.n	80161f0 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 8015e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e72:	b2db      	uxtb	r3, r3
 8015e74:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8015e76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e78:	b2db      	uxtb	r3, r3
 8015e7a:	2b80      	cmp	r3, #128	; 0x80
 8015e7c:	d925      	bls.n	8015eca <create_name+0xc6>
 8015e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	2bff      	cmp	r3, #255	; 0xff
 8015e84:	d021      	beq.n	8015eca <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8015e86:	69bb      	ldr	r3, [r7, #24]
 8015e88:	1c5a      	adds	r2, r3, #1
 8015e8a:	61ba      	str	r2, [r7, #24]
 8015e8c:	693a      	ldr	r2, [r7, #16]
 8015e8e:	4413      	add	r3, r2
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 8015e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e98:	021b      	lsls	r3, r3, #8
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ea0:	b29b      	uxth	r3, r3
 8015ea2:	4413      	add	r3, r2
 8015ea4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 8015ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015eaa:	2b3f      	cmp	r3, #63	; 0x3f
 8015eac:	d903      	bls.n	8015eb6 <create_name+0xb2>
 8015eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015eb2:	2b7e      	cmp	r3, #126	; 0x7e
 8015eb4:	d909      	bls.n	8015eca <create_name+0xc6>
 8015eb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	da03      	bge.n	8015ec6 <create_name+0xc2>
 8015ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ec2:	2bff      	cmp	r3, #255	; 0xff
 8015ec4:	d101      	bne.n	8015eca <create_name+0xc6>
 8015ec6:	2306      	movs	r3, #6
 8015ec8:	e192      	b.n	80161f0 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8015eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ecc:	2101      	movs	r1, #1
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f001 fd20 	bl	8017914 <ff_convert>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d101      	bne.n	8015ee2 <create_name+0xde>
 8015ede:	2306      	movs	r3, #6
 8015ee0:	e186      	b.n	80161f0 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8015ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8015ee6:	d809      	bhi.n	8015efc <create_name+0xf8>
 8015ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015eea:	4619      	mov	r1, r3
 8015eec:	489a      	ldr	r0, [pc, #616]	; (8016158 <create_name+0x354>)
 8015eee:	f7fe fc1a 	bl	8014726 <chk_chr>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d001      	beq.n	8015efc <create_name+0xf8>
 8015ef8:	2306      	movs	r3, #6
 8015efa:	e179      	b.n	80161f0 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	1c5a      	adds	r2, r3, #1
 8015f00:	617a      	str	r2, [r7, #20]
 8015f02:	005b      	lsls	r3, r3, #1
 8015f04:	68fa      	ldr	r2, [r7, #12]
 8015f06:	4413      	add	r3, r2
 8015f08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015f0a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8015f0c:	e78a      	b.n	8015e24 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8015f0e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8015f10:	693a      	ldr	r2, [r7, #16]
 8015f12:	69bb      	ldr	r3, [r7, #24]
 8015f14:	441a      	add	r2, r3
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f1c:	2b1f      	cmp	r3, #31
 8015f1e:	d801      	bhi.n	8015f24 <create_name+0x120>
 8015f20:	2304      	movs	r3, #4
 8015f22:	e000      	b.n	8015f26 <create_name+0x122>
 8015f24:	2300      	movs	r3, #0
 8015f26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015f2a:	e011      	b.n	8015f50 <create_name+0x14c>
		w = lfn[di - 1];
 8015f2c:	697a      	ldr	r2, [r7, #20]
 8015f2e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015f32:	4413      	add	r3, r2
 8015f34:	005b      	lsls	r3, r3, #1
 8015f36:	68fa      	ldr	r2, [r7, #12]
 8015f38:	4413      	add	r3, r2
 8015f3a:	881b      	ldrh	r3, [r3, #0]
 8015f3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8015f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f40:	2b20      	cmp	r3, #32
 8015f42:	d002      	beq.n	8015f4a <create_name+0x146>
 8015f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f46:	2b2e      	cmp	r3, #46	; 0x2e
 8015f48:	d106      	bne.n	8015f58 <create_name+0x154>
		di--;
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	3b01      	subs	r3, #1
 8015f4e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d1ea      	bne.n	8015f2c <create_name+0x128>
 8015f56:	e000      	b.n	8015f5a <create_name+0x156>
		if (w != ' ' && w != '.') break;
 8015f58:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	005b      	lsls	r3, r3, #1
 8015f5e:	68fa      	ldr	r2, [r7, #12]
 8015f60:	4413      	add	r3, r2
 8015f62:	2200      	movs	r2, #0
 8015f64:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d101      	bne.n	8015f70 <create_name+0x16c>
 8015f6c:	2306      	movs	r3, #6
 8015f6e:	e13f      	b.n	80161f0 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	3324      	adds	r3, #36	; 0x24
 8015f74:	220b      	movs	r2, #11
 8015f76:	2120      	movs	r1, #32
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f7fe fb92 	bl	80146a2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015f7e:	2300      	movs	r3, #0
 8015f80:	61bb      	str	r3, [r7, #24]
 8015f82:	e002      	b.n	8015f8a <create_name+0x186>
 8015f84:	69bb      	ldr	r3, [r7, #24]
 8015f86:	3301      	adds	r3, #1
 8015f88:	61bb      	str	r3, [r7, #24]
 8015f8a:	69bb      	ldr	r3, [r7, #24]
 8015f8c:	005b      	lsls	r3, r3, #1
 8015f8e:	68fa      	ldr	r2, [r7, #12]
 8015f90:	4413      	add	r3, r2
 8015f92:	881b      	ldrh	r3, [r3, #0]
 8015f94:	2b20      	cmp	r3, #32
 8015f96:	d0f5      	beq.n	8015f84 <create_name+0x180>
 8015f98:	69bb      	ldr	r3, [r7, #24]
 8015f9a:	005b      	lsls	r3, r3, #1
 8015f9c:	68fa      	ldr	r2, [r7, #12]
 8015f9e:	4413      	add	r3, r2
 8015fa0:	881b      	ldrh	r3, [r3, #0]
 8015fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8015fa4:	d0ee      	beq.n	8015f84 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015fa6:	69bb      	ldr	r3, [r7, #24]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d009      	beq.n	8015fc0 <create_name+0x1bc>
 8015fac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015fb0:	f043 0303 	orr.w	r3, r3, #3
 8015fb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015fb8:	e002      	b.n	8015fc0 <create_name+0x1bc>
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	3b01      	subs	r3, #1
 8015fbe:	617b      	str	r3, [r7, #20]
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d009      	beq.n	8015fda <create_name+0x1d6>
 8015fc6:	697a      	ldr	r2, [r7, #20]
 8015fc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015fcc:	4413      	add	r3, r2
 8015fce:	005b      	lsls	r3, r3, #1
 8015fd0:	68fa      	ldr	r2, [r7, #12]
 8015fd2:	4413      	add	r3, r2
 8015fd4:	881b      	ldrh	r3, [r3, #0]
 8015fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8015fd8:	d1ef      	bne.n	8015fba <create_name+0x1b6>

	i = b = 0; ni = 8;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	623b      	str	r3, [r7, #32]
 8015fe4:	2308      	movs	r3, #8
 8015fe6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8015fe8:	69bb      	ldr	r3, [r7, #24]
 8015fea:	1c5a      	adds	r2, r3, #1
 8015fec:	61ba      	str	r2, [r7, #24]
 8015fee:	005b      	lsls	r3, r3, #1
 8015ff0:	68fa      	ldr	r2, [r7, #12]
 8015ff2:	4413      	add	r3, r2
 8015ff4:	881b      	ldrh	r3, [r3, #0]
 8015ff6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8015ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	f000 80aa 	beq.w	8016154 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8016000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016002:	2b20      	cmp	r3, #32
 8016004:	d006      	beq.n	8016014 <create_name+0x210>
 8016006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016008:	2b2e      	cmp	r3, #46	; 0x2e
 801600a:	d10a      	bne.n	8016022 <create_name+0x21e>
 801600c:	69ba      	ldr	r2, [r7, #24]
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	429a      	cmp	r2, r3
 8016012:	d006      	beq.n	8016022 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 8016014:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016018:	f043 0303 	orr.w	r3, r3, #3
 801601c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016020:	e097      	b.n	8016152 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8016022:	6a3a      	ldr	r2, [r7, #32]
 8016024:	69fb      	ldr	r3, [r7, #28]
 8016026:	429a      	cmp	r2, r3
 8016028:	d203      	bcs.n	8016032 <create_name+0x22e>
 801602a:	69ba      	ldr	r2, [r7, #24]
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	429a      	cmp	r2, r3
 8016030:	d123      	bne.n	801607a <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 8016032:	69fb      	ldr	r3, [r7, #28]
 8016034:	2b0b      	cmp	r3, #11
 8016036:	d106      	bne.n	8016046 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 8016038:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801603c:	f043 0303 	orr.w	r3, r3, #3
 8016040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016044:	e08d      	b.n	8016162 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8016046:	69ba      	ldr	r2, [r7, #24]
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	429a      	cmp	r2, r3
 801604c:	d005      	beq.n	801605a <create_name+0x256>
 801604e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016052:	f043 0303 	orr.w	r3, r3, #3
 8016056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 801605a:	69ba      	ldr	r2, [r7, #24]
 801605c:	697b      	ldr	r3, [r7, #20]
 801605e:	429a      	cmp	r2, r3
 8016060:	d87e      	bhi.n	8016160 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016062:	697b      	ldr	r3, [r7, #20]
 8016064:	61bb      	str	r3, [r7, #24]
 8016066:	2308      	movs	r3, #8
 8016068:	623b      	str	r3, [r7, #32]
 801606a:	230b      	movs	r3, #11
 801606c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801606e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016072:	009b      	lsls	r3, r3, #2
 8016074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016078:	e06b      	b.n	8016152 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801607a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801607c:	2b7f      	cmp	r3, #127	; 0x7f
 801607e:	d910      	bls.n	80160a2 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8016080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016082:	4618      	mov	r0, r3
 8016084:	f001 fca4 	bl	80179d0 <ff_wtoupper>
 8016088:	4603      	mov	r3, r0
 801608a:	2100      	movs	r1, #0
 801608c:	4618      	mov	r0, r3
 801608e:	f001 fc41 	bl	8017914 <ff_convert>
 8016092:	4603      	mov	r3, r0
 8016094:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8016096:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801609a:	f043 0302 	orr.w	r3, r3, #2
 801609e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 80160a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160a4:	2bff      	cmp	r3, #255	; 0xff
 80160a6:	d91a      	bls.n	80160de <create_name+0x2da>
			if (i >= ni - 1) {
 80160a8:	69fb      	ldr	r3, [r7, #28]
 80160aa:	3b01      	subs	r3, #1
 80160ac:	6a3a      	ldr	r2, [r7, #32]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d308      	bcc.n	80160c4 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 80160b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160b6:	f043 0303 	orr.w	r3, r3, #3
 80160ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80160be:	69fb      	ldr	r3, [r7, #28]
 80160c0:	623b      	str	r3, [r7, #32]
 80160c2:	e046      	b.n	8016152 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 80160c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160c6:	0a1b      	lsrs	r3, r3, #8
 80160c8:	b299      	uxth	r1, r3
 80160ca:	6a3b      	ldr	r3, [r7, #32]
 80160cc:	1c5a      	adds	r2, r3, #1
 80160ce:	623a      	str	r2, [r7, #32]
 80160d0:	b2c9      	uxtb	r1, r1
 80160d2:	687a      	ldr	r2, [r7, #4]
 80160d4:	4413      	add	r3, r2
 80160d6:	460a      	mov	r2, r1
 80160d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80160dc:	e02f      	b.n	801613e <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80160de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d007      	beq.n	80160f4 <create_name+0x2f0>
 80160e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160e6:	4619      	mov	r1, r3
 80160e8:	481c      	ldr	r0, [pc, #112]	; (801615c <create_name+0x358>)
 80160ea:	f7fe fb1c 	bl	8014726 <chk_chr>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d008      	beq.n	8016106 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80160f4:	235f      	movs	r3, #95	; 0x5f
 80160f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80160f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160fc:	f043 0303 	orr.w	r3, r3, #3
 8016100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016104:	e01b      	b.n	801613e <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8016106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016108:	2b40      	cmp	r3, #64	; 0x40
 801610a:	d909      	bls.n	8016120 <create_name+0x31c>
 801610c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801610e:	2b5a      	cmp	r3, #90	; 0x5a
 8016110:	d806      	bhi.n	8016120 <create_name+0x31c>
					b |= 2;
 8016112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016116:	f043 0302 	orr.w	r3, r3, #2
 801611a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801611e:	e00e      	b.n	801613e <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8016120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016122:	2b60      	cmp	r3, #96	; 0x60
 8016124:	d90b      	bls.n	801613e <create_name+0x33a>
 8016126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016128:	2b7a      	cmp	r3, #122	; 0x7a
 801612a:	d808      	bhi.n	801613e <create_name+0x33a>
						b |= 1; w -= 0x20;
 801612c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016130:	f043 0301 	orr.w	r3, r3, #1
 8016134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801613a:	3b20      	subs	r3, #32
 801613c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801613e:	6a3b      	ldr	r3, [r7, #32]
 8016140:	1c5a      	adds	r2, r3, #1
 8016142:	623a      	str	r2, [r7, #32]
 8016144:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016146:	b2d1      	uxtb	r1, r2
 8016148:	687a      	ldr	r2, [r7, #4]
 801614a:	4413      	add	r3, r2
 801614c:	460a      	mov	r2, r1
 801614e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8016152:	e749      	b.n	8015fe8 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 8016154:	bf00      	nop
 8016156:	e004      	b.n	8016162 <create_name+0x35e>
 8016158:	0801bbc8 	.word	0x0801bbc8
 801615c:	0801bbd4 	.word	0x0801bbd4
			if (si > di) break;			/* No extension */
 8016160:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016168:	2be5      	cmp	r3, #229	; 0xe5
 801616a:	d103      	bne.n	8016174 <create_name+0x370>
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2205      	movs	r2, #5
 8016170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8016174:	69fb      	ldr	r3, [r7, #28]
 8016176:	2b08      	cmp	r3, #8
 8016178:	d104      	bne.n	8016184 <create_name+0x380>
 801617a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801617e:	009b      	lsls	r3, r3, #2
 8016180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016188:	f003 030c 	and.w	r3, r3, #12
 801618c:	2b0c      	cmp	r3, #12
 801618e:	d005      	beq.n	801619c <create_name+0x398>
 8016190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016194:	f003 0303 	and.w	r3, r3, #3
 8016198:	2b03      	cmp	r3, #3
 801619a:	d105      	bne.n	80161a8 <create_name+0x3a4>
 801619c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161a0:	f043 0302 	orr.w	r3, r3, #2
 80161a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80161a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161ac:	f003 0302 	and.w	r3, r3, #2
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d117      	bne.n	80161e4 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80161b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161b8:	f003 0303 	and.w	r3, r3, #3
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d105      	bne.n	80161cc <create_name+0x3c8>
 80161c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161c4:	f043 0310 	orr.w	r3, r3, #16
 80161c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80161cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161d0:	f003 030c 	and.w	r3, r3, #12
 80161d4:	2b04      	cmp	r3, #4
 80161d6:	d105      	bne.n	80161e4 <create_name+0x3e0>
 80161d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161dc:	f043 0308 	orr.w	r3, r3, #8
 80161e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80161ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80161ee:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80161f0:	4618      	mov	r0, r3
 80161f2:	3728      	adds	r7, #40	; 0x28
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}

080161f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b086      	sub	sp, #24
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801620c:	e002      	b.n	8016214 <follow_path+0x1c>
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	3301      	adds	r3, #1
 8016212:	603b      	str	r3, [r7, #0]
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	781b      	ldrb	r3, [r3, #0]
 8016218:	2b2f      	cmp	r3, #47	; 0x2f
 801621a:	d0f8      	beq.n	801620e <follow_path+0x16>
 801621c:	683b      	ldr	r3, [r7, #0]
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	2b5c      	cmp	r3, #92	; 0x5c
 8016222:	d0f4      	beq.n	801620e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016224:	693b      	ldr	r3, [r7, #16]
 8016226:	2200      	movs	r2, #0
 8016228:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	781b      	ldrb	r3, [r3, #0]
 801622e:	2b1f      	cmp	r3, #31
 8016230:	d80a      	bhi.n	8016248 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2280      	movs	r2, #128	; 0x80
 8016236:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801623a:	2100      	movs	r1, #0
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f7fe ffbb 	bl	80151b8 <dir_sdi>
 8016242:	4603      	mov	r3, r0
 8016244:	75fb      	strb	r3, [r7, #23]
 8016246:	e043      	b.n	80162d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016248:	463b      	mov	r3, r7
 801624a:	4619      	mov	r1, r3
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f7ff fdd9 	bl	8015e04 <create_name>
 8016252:	4603      	mov	r3, r0
 8016254:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016256:	7dfb      	ldrb	r3, [r7, #23]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d134      	bne.n	80162c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801625c:	6878      	ldr	r0, [r7, #4]
 801625e:	f7ff fc19 	bl	8015a94 <dir_find>
 8016262:	4603      	mov	r3, r0
 8016264:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801626c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801626e:	7dfb      	ldrb	r3, [r7, #23]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d00a      	beq.n	801628a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016274:	7dfb      	ldrb	r3, [r7, #23]
 8016276:	2b04      	cmp	r3, #4
 8016278:	d127      	bne.n	80162ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801627a:	7afb      	ldrb	r3, [r7, #11]
 801627c:	f003 0304 	and.w	r3, r3, #4
 8016280:	2b00      	cmp	r3, #0
 8016282:	d122      	bne.n	80162ca <follow_path+0xd2>
 8016284:	2305      	movs	r3, #5
 8016286:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016288:	e01f      	b.n	80162ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801628a:	7afb      	ldrb	r3, [r7, #11]
 801628c:	f003 0304 	and.w	r3, r3, #4
 8016290:	2b00      	cmp	r3, #0
 8016292:	d11c      	bne.n	80162ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016294:	693b      	ldr	r3, [r7, #16]
 8016296:	799b      	ldrb	r3, [r3, #6]
 8016298:	f003 0310 	and.w	r3, r3, #16
 801629c:	2b00      	cmp	r3, #0
 801629e:	d102      	bne.n	80162a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80162a0:	2305      	movs	r3, #5
 80162a2:	75fb      	strb	r3, [r7, #23]
 80162a4:	e014      	b.n	80162d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	695b      	ldr	r3, [r3, #20]
 80162b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162b4:	4413      	add	r3, r2
 80162b6:	4619      	mov	r1, r3
 80162b8:	68f8      	ldr	r0, [r7, #12]
 80162ba:	f7ff f904 	bl	80154c6 <ld_clust>
 80162be:	4602      	mov	r2, r0
 80162c0:	693b      	ldr	r3, [r7, #16]
 80162c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80162c4:	e7c0      	b.n	8016248 <follow_path+0x50>
			if (res != FR_OK) break;
 80162c6:	bf00      	nop
 80162c8:	e002      	b.n	80162d0 <follow_path+0xd8>
				break;
 80162ca:	bf00      	nop
 80162cc:	e000      	b.n	80162d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80162ce:	bf00      	nop
			}
		}
	}

	return res;
 80162d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80162d2:	4618      	mov	r0, r3
 80162d4:	3718      	adds	r7, #24
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}

080162da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80162da:	b480      	push	{r7}
 80162dc:	b087      	sub	sp, #28
 80162de:	af00      	add	r7, sp, #0
 80162e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80162e2:	f04f 33ff 	mov.w	r3, #4294967295
 80162e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d031      	beq.n	8016354 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	617b      	str	r3, [r7, #20]
 80162f6:	e002      	b.n	80162fe <get_ldnumber+0x24>
 80162f8:	697b      	ldr	r3, [r7, #20]
 80162fa:	3301      	adds	r3, #1
 80162fc:	617b      	str	r3, [r7, #20]
 80162fe:	697b      	ldr	r3, [r7, #20]
 8016300:	781b      	ldrb	r3, [r3, #0]
 8016302:	2b1f      	cmp	r3, #31
 8016304:	d903      	bls.n	801630e <get_ldnumber+0x34>
 8016306:	697b      	ldr	r3, [r7, #20]
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	2b3a      	cmp	r3, #58	; 0x3a
 801630c:	d1f4      	bne.n	80162f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801630e:	697b      	ldr	r3, [r7, #20]
 8016310:	781b      	ldrb	r3, [r3, #0]
 8016312:	2b3a      	cmp	r3, #58	; 0x3a
 8016314:	d11c      	bne.n	8016350 <get_ldnumber+0x76>
			tp = *path;
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	1c5a      	adds	r2, r3, #1
 8016320:	60fa      	str	r2, [r7, #12]
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	3b30      	subs	r3, #48	; 0x30
 8016326:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016328:	68bb      	ldr	r3, [r7, #8]
 801632a:	2b09      	cmp	r3, #9
 801632c:	d80e      	bhi.n	801634c <get_ldnumber+0x72>
 801632e:	68fa      	ldr	r2, [r7, #12]
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	429a      	cmp	r2, r3
 8016334:	d10a      	bne.n	801634c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d107      	bne.n	801634c <get_ldnumber+0x72>
					vol = (int)i;
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016340:	697b      	ldr	r3, [r7, #20]
 8016342:	3301      	adds	r3, #1
 8016344:	617b      	str	r3, [r7, #20]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	697a      	ldr	r2, [r7, #20]
 801634a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801634c:	693b      	ldr	r3, [r7, #16]
 801634e:	e002      	b.n	8016356 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016350:	2300      	movs	r3, #0
 8016352:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016354:	693b      	ldr	r3, [r7, #16]
}
 8016356:	4618      	mov	r0, r3
 8016358:	371c      	adds	r7, #28
 801635a:	46bd      	mov	sp, r7
 801635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016360:	4770      	bx	lr
	...

08016364 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
 801636c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	2200      	movs	r2, #0
 8016372:	70da      	strb	r2, [r3, #3]
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	f04f 32ff 	mov.w	r2, #4294967295
 801637a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801637c:	6839      	ldr	r1, [r7, #0]
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f7fe fb9c 	bl	8014abc <move_window>
 8016384:	4603      	mov	r3, r0
 8016386:	2b00      	cmp	r3, #0
 8016388:	d001      	beq.n	801638e <check_fs+0x2a>
 801638a:	2304      	movs	r3, #4
 801638c:	e038      	b.n	8016400 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	3334      	adds	r3, #52	; 0x34
 8016392:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016396:	4618      	mov	r0, r3
 8016398:	f7fe f8e0 	bl	801455c <ld_word>
 801639c:	4603      	mov	r3, r0
 801639e:	461a      	mov	r2, r3
 80163a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d001      	beq.n	80163ac <check_fs+0x48>
 80163a8:	2303      	movs	r3, #3
 80163aa:	e029      	b.n	8016400 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80163b2:	2be9      	cmp	r3, #233	; 0xe9
 80163b4:	d009      	beq.n	80163ca <check_fs+0x66>
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80163bc:	2beb      	cmp	r3, #235	; 0xeb
 80163be:	d11e      	bne.n	80163fe <check_fs+0x9a>
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80163c6:	2b90      	cmp	r3, #144	; 0x90
 80163c8:	d119      	bne.n	80163fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	3334      	adds	r3, #52	; 0x34
 80163ce:	3336      	adds	r3, #54	; 0x36
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7fe f8db 	bl	801458c <ld_dword>
 80163d6:	4603      	mov	r3, r0
 80163d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80163dc:	4a0a      	ldr	r2, [pc, #40]	; (8016408 <check_fs+0xa4>)
 80163de:	4293      	cmp	r3, r2
 80163e0:	d101      	bne.n	80163e6 <check_fs+0x82>
 80163e2:	2300      	movs	r3, #0
 80163e4:	e00c      	b.n	8016400 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	3334      	adds	r3, #52	; 0x34
 80163ea:	3352      	adds	r3, #82	; 0x52
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7fe f8cd 	bl	801458c <ld_dword>
 80163f2:	4603      	mov	r3, r0
 80163f4:	4a05      	ldr	r2, [pc, #20]	; (801640c <check_fs+0xa8>)
 80163f6:	4293      	cmp	r3, r2
 80163f8:	d101      	bne.n	80163fe <check_fs+0x9a>
 80163fa:	2300      	movs	r3, #0
 80163fc:	e000      	b.n	8016400 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80163fe:	2302      	movs	r3, #2
}
 8016400:	4618      	mov	r0, r3
 8016402:	3708      	adds	r7, #8
 8016404:	46bd      	mov	sp, r7
 8016406:	bd80      	pop	{r7, pc}
 8016408:	00544146 	.word	0x00544146
 801640c:	33544146 	.word	0x33544146

08016410 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b096      	sub	sp, #88	; 0x58
 8016414:	af00      	add	r7, sp, #0
 8016416:	60f8      	str	r0, [r7, #12]
 8016418:	60b9      	str	r1, [r7, #8]
 801641a:	4613      	mov	r3, r2
 801641c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	2200      	movs	r2, #0
 8016422:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016424:	68f8      	ldr	r0, [r7, #12]
 8016426:	f7ff ff58 	bl	80162da <get_ldnumber>
 801642a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801642c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801642e:	2b00      	cmp	r3, #0
 8016430:	da01      	bge.n	8016436 <find_volume+0x26>
 8016432:	230b      	movs	r3, #11
 8016434:	e22d      	b.n	8016892 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016436:	4aa1      	ldr	r2, [pc, #644]	; (80166bc <find_volume+0x2ac>)
 8016438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801643a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801643e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016442:	2b00      	cmp	r3, #0
 8016444:	d101      	bne.n	801644a <find_volume+0x3a>
 8016446:	230c      	movs	r3, #12
 8016448:	e223      	b.n	8016892 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801644a:	68bb      	ldr	r3, [r7, #8]
 801644c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801644e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016450:	79fb      	ldrb	r3, [r7, #7]
 8016452:	f023 0301 	bic.w	r3, r3, #1
 8016456:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801645a:	781b      	ldrb	r3, [r3, #0]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d01a      	beq.n	8016496 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016462:	785b      	ldrb	r3, [r3, #1]
 8016464:	4618      	mov	r0, r3
 8016466:	f7fd ffdb 	bl	8014420 <disk_status>
 801646a:	4603      	mov	r3, r0
 801646c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016470:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016474:	f003 0301 	and.w	r3, r3, #1
 8016478:	2b00      	cmp	r3, #0
 801647a:	d10c      	bne.n	8016496 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801647c:	79fb      	ldrb	r3, [r7, #7]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d007      	beq.n	8016492 <find_volume+0x82>
 8016482:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016486:	f003 0304 	and.w	r3, r3, #4
 801648a:	2b00      	cmp	r3, #0
 801648c:	d001      	beq.n	8016492 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801648e:	230a      	movs	r3, #10
 8016490:	e1ff      	b.n	8016892 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8016492:	2300      	movs	r3, #0
 8016494:	e1fd      	b.n	8016892 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016498:	2200      	movs	r2, #0
 801649a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801649c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801649e:	b2da      	uxtb	r2, r3
 80164a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80164a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164a6:	785b      	ldrb	r3, [r3, #1]
 80164a8:	4618      	mov	r0, r3
 80164aa:	f7fd ffd3 	bl	8014454 <disk_initialize>
 80164ae:	4603      	mov	r3, r0
 80164b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80164b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80164b8:	f003 0301 	and.w	r3, r3, #1
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d001      	beq.n	80164c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80164c0:	2303      	movs	r3, #3
 80164c2:	e1e6      	b.n	8016892 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80164c4:	79fb      	ldrb	r3, [r7, #7]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d007      	beq.n	80164da <find_volume+0xca>
 80164ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80164ce:	f003 0304 	and.w	r3, r3, #4
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d001      	beq.n	80164da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80164d6:	230a      	movs	r3, #10
 80164d8:	e1db      	b.n	8016892 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80164da:	2300      	movs	r3, #0
 80164dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80164de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80164e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80164e2:	f7ff ff3f 	bl	8016364 <check_fs>
 80164e6:	4603      	mov	r3, r0
 80164e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80164ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80164f0:	2b02      	cmp	r3, #2
 80164f2:	d149      	bne.n	8016588 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80164f4:	2300      	movs	r3, #0
 80164f6:	643b      	str	r3, [r7, #64]	; 0x40
 80164f8:	e01e      	b.n	8016538 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80164fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016502:	011b      	lsls	r3, r3, #4
 8016504:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016508:	4413      	add	r3, r2
 801650a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801650e:	3304      	adds	r3, #4
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d006      	beq.n	8016524 <find_volume+0x114>
 8016516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016518:	3308      	adds	r3, #8
 801651a:	4618      	mov	r0, r3
 801651c:	f7fe f836 	bl	801458c <ld_dword>
 8016520:	4602      	mov	r2, r0
 8016522:	e000      	b.n	8016526 <find_volume+0x116>
 8016524:	2200      	movs	r2, #0
 8016526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016528:	009b      	lsls	r3, r3, #2
 801652a:	3358      	adds	r3, #88	; 0x58
 801652c:	443b      	add	r3, r7
 801652e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016534:	3301      	adds	r3, #1
 8016536:	643b      	str	r3, [r7, #64]	; 0x40
 8016538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801653a:	2b03      	cmp	r3, #3
 801653c:	d9dd      	bls.n	80164fa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801653e:	2300      	movs	r3, #0
 8016540:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016544:	2b00      	cmp	r3, #0
 8016546:	d002      	beq.n	801654e <find_volume+0x13e>
 8016548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801654a:	3b01      	subs	r3, #1
 801654c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801654e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016550:	009b      	lsls	r3, r3, #2
 8016552:	3358      	adds	r3, #88	; 0x58
 8016554:	443b      	add	r3, r7
 8016556:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801655a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801655e:	2b00      	cmp	r3, #0
 8016560:	d005      	beq.n	801656e <find_volume+0x15e>
 8016562:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016564:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016566:	f7ff fefd 	bl	8016364 <check_fs>
 801656a:	4603      	mov	r3, r0
 801656c:	e000      	b.n	8016570 <find_volume+0x160>
 801656e:	2303      	movs	r3, #3
 8016570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016578:	2b01      	cmp	r3, #1
 801657a:	d905      	bls.n	8016588 <find_volume+0x178>
 801657c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801657e:	3301      	adds	r3, #1
 8016580:	643b      	str	r3, [r7, #64]	; 0x40
 8016582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016584:	2b03      	cmp	r3, #3
 8016586:	d9e2      	bls.n	801654e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016588:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801658c:	2b04      	cmp	r3, #4
 801658e:	d101      	bne.n	8016594 <find_volume+0x184>
 8016590:	2301      	movs	r3, #1
 8016592:	e17e      	b.n	8016892 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016598:	2b01      	cmp	r3, #1
 801659a:	d901      	bls.n	80165a0 <find_volume+0x190>
 801659c:	230d      	movs	r3, #13
 801659e:	e178      	b.n	8016892 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80165a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a2:	3334      	adds	r3, #52	; 0x34
 80165a4:	330b      	adds	r3, #11
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7fd ffd8 	bl	801455c <ld_word>
 80165ac:	4603      	mov	r3, r0
 80165ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80165b2:	d001      	beq.n	80165b8 <find_volume+0x1a8>
 80165b4:	230d      	movs	r3, #13
 80165b6:	e16c      	b.n	8016892 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80165b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ba:	3334      	adds	r3, #52	; 0x34
 80165bc:	3316      	adds	r3, #22
 80165be:	4618      	mov	r0, r3
 80165c0:	f7fd ffcc 	bl	801455c <ld_word>
 80165c4:	4603      	mov	r3, r0
 80165c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80165c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d106      	bne.n	80165dc <find_volume+0x1cc>
 80165ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d0:	3334      	adds	r3, #52	; 0x34
 80165d2:	3324      	adds	r3, #36	; 0x24
 80165d4:	4618      	mov	r0, r3
 80165d6:	f7fd ffd9 	bl	801458c <ld_dword>
 80165da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80165dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80165e0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80165e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165e4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80165e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80165ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ee:	789b      	ldrb	r3, [r3, #2]
 80165f0:	2b01      	cmp	r3, #1
 80165f2:	d005      	beq.n	8016600 <find_volume+0x1f0>
 80165f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165f6:	789b      	ldrb	r3, [r3, #2]
 80165f8:	2b02      	cmp	r3, #2
 80165fa:	d001      	beq.n	8016600 <find_volume+0x1f0>
 80165fc:	230d      	movs	r3, #13
 80165fe:	e148      	b.n	8016892 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016602:	789b      	ldrb	r3, [r3, #2]
 8016604:	461a      	mov	r2, r3
 8016606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016608:	fb02 f303 	mul.w	r3, r2, r3
 801660c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016614:	b29a      	uxth	r2, r3
 8016616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016618:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801661c:	895b      	ldrh	r3, [r3, #10]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d008      	beq.n	8016634 <find_volume+0x224>
 8016622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016624:	895b      	ldrh	r3, [r3, #10]
 8016626:	461a      	mov	r2, r3
 8016628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801662a:	895b      	ldrh	r3, [r3, #10]
 801662c:	3b01      	subs	r3, #1
 801662e:	4013      	ands	r3, r2
 8016630:	2b00      	cmp	r3, #0
 8016632:	d001      	beq.n	8016638 <find_volume+0x228>
 8016634:	230d      	movs	r3, #13
 8016636:	e12c      	b.n	8016892 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801663a:	3334      	adds	r3, #52	; 0x34
 801663c:	3311      	adds	r3, #17
 801663e:	4618      	mov	r0, r3
 8016640:	f7fd ff8c 	bl	801455c <ld_word>
 8016644:	4603      	mov	r3, r0
 8016646:	461a      	mov	r2, r3
 8016648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801664a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801664e:	891b      	ldrh	r3, [r3, #8]
 8016650:	f003 030f 	and.w	r3, r3, #15
 8016654:	b29b      	uxth	r3, r3
 8016656:	2b00      	cmp	r3, #0
 8016658:	d001      	beq.n	801665e <find_volume+0x24e>
 801665a:	230d      	movs	r3, #13
 801665c:	e119      	b.n	8016892 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016660:	3334      	adds	r3, #52	; 0x34
 8016662:	3313      	adds	r3, #19
 8016664:	4618      	mov	r0, r3
 8016666:	f7fd ff79 	bl	801455c <ld_word>
 801666a:	4603      	mov	r3, r0
 801666c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801666e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016670:	2b00      	cmp	r3, #0
 8016672:	d106      	bne.n	8016682 <find_volume+0x272>
 8016674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016676:	3334      	adds	r3, #52	; 0x34
 8016678:	3320      	adds	r3, #32
 801667a:	4618      	mov	r0, r3
 801667c:	f7fd ff86 	bl	801458c <ld_dword>
 8016680:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016684:	3334      	adds	r3, #52	; 0x34
 8016686:	330e      	adds	r3, #14
 8016688:	4618      	mov	r0, r3
 801668a:	f7fd ff67 	bl	801455c <ld_word>
 801668e:	4603      	mov	r3, r0
 8016690:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016692:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016694:	2b00      	cmp	r3, #0
 8016696:	d101      	bne.n	801669c <find_volume+0x28c>
 8016698:	230d      	movs	r3, #13
 801669a:	e0fa      	b.n	8016892 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801669c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801669e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166a0:	4413      	add	r3, r2
 80166a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166a4:	8912      	ldrh	r2, [r2, #8]
 80166a6:	0912      	lsrs	r2, r2, #4
 80166a8:	b292      	uxth	r2, r2
 80166aa:	4413      	add	r3, r2
 80166ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80166ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80166b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b2:	429a      	cmp	r2, r3
 80166b4:	d204      	bcs.n	80166c0 <find_volume+0x2b0>
 80166b6:	230d      	movs	r3, #13
 80166b8:	e0eb      	b.n	8016892 <find_volume+0x482>
 80166ba:	bf00      	nop
 80166bc:	24000b60 	.word	0x24000b60
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80166c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80166c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166c4:	1ad3      	subs	r3, r2, r3
 80166c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166c8:	8952      	ldrh	r2, [r2, #10]
 80166ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80166ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80166d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d101      	bne.n	80166da <find_volume+0x2ca>
 80166d6:	230d      	movs	r3, #13
 80166d8:	e0db      	b.n	8016892 <find_volume+0x482>
		fmt = FS_FAT32;
 80166da:	2303      	movs	r3, #3
 80166dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80166e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80166e6:	4293      	cmp	r3, r2
 80166e8:	d802      	bhi.n	80166f0 <find_volume+0x2e0>
 80166ea:	2302      	movs	r3, #2
 80166ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80166f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d802      	bhi.n	8016700 <find_volume+0x2f0>
 80166fa:	2301      	movs	r3, #1
 80166fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016702:	1c9a      	adds	r2, r3, #2
 8016704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016706:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8016708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801670a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801670c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801670e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016712:	441a      	add	r2, r3
 8016714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016716:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8016718:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671c:	441a      	add	r2, r3
 801671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016720:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8016722:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016726:	2b03      	cmp	r3, #3
 8016728:	d11e      	bne.n	8016768 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801672c:	3334      	adds	r3, #52	; 0x34
 801672e:	332a      	adds	r3, #42	; 0x2a
 8016730:	4618      	mov	r0, r3
 8016732:	f7fd ff13 	bl	801455c <ld_word>
 8016736:	4603      	mov	r3, r0
 8016738:	2b00      	cmp	r3, #0
 801673a:	d001      	beq.n	8016740 <find_volume+0x330>
 801673c:	230d      	movs	r3, #13
 801673e:	e0a8      	b.n	8016892 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016742:	891b      	ldrh	r3, [r3, #8]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d001      	beq.n	801674c <find_volume+0x33c>
 8016748:	230d      	movs	r3, #13
 801674a:	e0a2      	b.n	8016892 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801674e:	3334      	adds	r3, #52	; 0x34
 8016750:	332c      	adds	r3, #44	; 0x2c
 8016752:	4618      	mov	r0, r3
 8016754:	f7fd ff1a 	bl	801458c <ld_dword>
 8016758:	4602      	mov	r2, r0
 801675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801675c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016760:	699b      	ldr	r3, [r3, #24]
 8016762:	009b      	lsls	r3, r3, #2
 8016764:	647b      	str	r3, [r7, #68]	; 0x44
 8016766:	e01f      	b.n	80167a8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801676a:	891b      	ldrh	r3, [r3, #8]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d101      	bne.n	8016774 <find_volume+0x364>
 8016770:	230d      	movs	r3, #13
 8016772:	e08e      	b.n	8016892 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801677a:	441a      	add	r2, r3
 801677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801677e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016784:	2b02      	cmp	r3, #2
 8016786:	d103      	bne.n	8016790 <find_volume+0x380>
 8016788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801678a:	699b      	ldr	r3, [r3, #24]
 801678c:	005b      	lsls	r3, r3, #1
 801678e:	e00a      	b.n	80167a6 <find_volume+0x396>
 8016790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016792:	699a      	ldr	r2, [r3, #24]
 8016794:	4613      	mov	r3, r2
 8016796:	005b      	lsls	r3, r3, #1
 8016798:	4413      	add	r3, r2
 801679a:	085a      	lsrs	r2, r3, #1
 801679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801679e:	699b      	ldr	r3, [r3, #24]
 80167a0:	f003 0301 	and.w	r3, r3, #1
 80167a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80167a6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80167a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167aa:	69da      	ldr	r2, [r3, #28]
 80167ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80167b2:	0a5b      	lsrs	r3, r3, #9
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d201      	bcs.n	80167bc <find_volume+0x3ac>
 80167b8:	230d      	movs	r3, #13
 80167ba:	e06a      	b.n	8016892 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80167bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167be:	f04f 32ff 	mov.w	r2, #4294967295
 80167c2:	615a      	str	r2, [r3, #20]
 80167c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c6:	695a      	ldr	r2, [r3, #20]
 80167c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80167cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ce:	2280      	movs	r2, #128	; 0x80
 80167d0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80167d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80167d6:	2b03      	cmp	r3, #3
 80167d8:	d149      	bne.n	801686e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80167da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167dc:	3334      	adds	r3, #52	; 0x34
 80167de:	3330      	adds	r3, #48	; 0x30
 80167e0:	4618      	mov	r0, r3
 80167e2:	f7fd febb 	bl	801455c <ld_word>
 80167e6:	4603      	mov	r3, r0
 80167e8:	2b01      	cmp	r3, #1
 80167ea:	d140      	bne.n	801686e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80167ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80167ee:	3301      	adds	r3, #1
 80167f0:	4619      	mov	r1, r3
 80167f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80167f4:	f7fe f962 	bl	8014abc <move_window>
 80167f8:	4603      	mov	r3, r0
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d137      	bne.n	801686e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80167fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016800:	2200      	movs	r2, #0
 8016802:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016806:	3334      	adds	r3, #52	; 0x34
 8016808:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801680c:	4618      	mov	r0, r3
 801680e:	f7fd fea5 	bl	801455c <ld_word>
 8016812:	4603      	mov	r3, r0
 8016814:	461a      	mov	r2, r3
 8016816:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801681a:	429a      	cmp	r2, r3
 801681c:	d127      	bne.n	801686e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016820:	3334      	adds	r3, #52	; 0x34
 8016822:	4618      	mov	r0, r3
 8016824:	f7fd feb2 	bl	801458c <ld_dword>
 8016828:	4603      	mov	r3, r0
 801682a:	4a1c      	ldr	r2, [pc, #112]	; (801689c <find_volume+0x48c>)
 801682c:	4293      	cmp	r3, r2
 801682e:	d11e      	bne.n	801686e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016832:	3334      	adds	r3, #52	; 0x34
 8016834:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016838:	4618      	mov	r0, r3
 801683a:	f7fd fea7 	bl	801458c <ld_dword>
 801683e:	4603      	mov	r3, r0
 8016840:	4a17      	ldr	r2, [pc, #92]	; (80168a0 <find_volume+0x490>)
 8016842:	4293      	cmp	r3, r2
 8016844:	d113      	bne.n	801686e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016848:	3334      	adds	r3, #52	; 0x34
 801684a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801684e:	4618      	mov	r0, r3
 8016850:	f7fd fe9c 	bl	801458c <ld_dword>
 8016854:	4602      	mov	r2, r0
 8016856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016858:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801685c:	3334      	adds	r3, #52	; 0x34
 801685e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016862:	4618      	mov	r0, r3
 8016864:	f7fd fe92 	bl	801458c <ld_dword>
 8016868:	4602      	mov	r2, r0
 801686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801686c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016870:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016874:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016876:	4b0b      	ldr	r3, [pc, #44]	; (80168a4 <find_volume+0x494>)
 8016878:	881b      	ldrh	r3, [r3, #0]
 801687a:	3301      	adds	r3, #1
 801687c:	b29a      	uxth	r2, r3
 801687e:	4b09      	ldr	r3, [pc, #36]	; (80168a4 <find_volume+0x494>)
 8016880:	801a      	strh	r2, [r3, #0]
 8016882:	4b08      	ldr	r3, [pc, #32]	; (80168a4 <find_volume+0x494>)
 8016884:	881a      	ldrh	r2, [r3, #0]
 8016886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016888:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801688a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801688c:	f7fe f8ae 	bl	80149ec <clear_lock>
#endif
	return FR_OK;
 8016890:	2300      	movs	r3, #0
}
 8016892:	4618      	mov	r0, r3
 8016894:	3758      	adds	r7, #88	; 0x58
 8016896:	46bd      	mov	sp, r7
 8016898:	bd80      	pop	{r7, pc}
 801689a:	bf00      	nop
 801689c:	41615252 	.word	0x41615252
 80168a0:	61417272 	.word	0x61417272
 80168a4:	24000b64 	.word	0x24000b64

080168a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b084      	sub	sp, #16
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
 80168b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80168b2:	2309      	movs	r3, #9
 80168b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d01c      	beq.n	80168f6 <validate+0x4e>
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d018      	beq.n	80168f6 <validate+0x4e>
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d013      	beq.n	80168f6 <validate+0x4e>
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	889a      	ldrh	r2, [r3, #4]
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	88db      	ldrh	r3, [r3, #6]
 80168d8:	429a      	cmp	r2, r3
 80168da:	d10c      	bne.n	80168f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	785b      	ldrb	r3, [r3, #1]
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7fd fd9c 	bl	8014420 <disk_status>
 80168e8:	4603      	mov	r3, r0
 80168ea:	f003 0301 	and.w	r3, r3, #1
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d101      	bne.n	80168f6 <validate+0x4e>
			res = FR_OK;
 80168f2:	2300      	movs	r3, #0
 80168f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80168f6:	7bfb      	ldrb	r3, [r7, #15]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d102      	bne.n	8016902 <validate+0x5a>
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	e000      	b.n	8016904 <validate+0x5c>
 8016902:	2300      	movs	r3, #0
 8016904:	683a      	ldr	r2, [r7, #0]
 8016906:	6013      	str	r3, [r2, #0]
	return res;
 8016908:	7bfb      	ldrb	r3, [r7, #15]
}
 801690a:	4618      	mov	r0, r3
 801690c:	3710      	adds	r7, #16
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}
	...

08016914 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b088      	sub	sp, #32
 8016918:	af00      	add	r7, sp, #0
 801691a:	60f8      	str	r0, [r7, #12]
 801691c:	60b9      	str	r1, [r7, #8]
 801691e:	4613      	mov	r3, r2
 8016920:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016922:	68bb      	ldr	r3, [r7, #8]
 8016924:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016926:	f107 0310 	add.w	r3, r7, #16
 801692a:	4618      	mov	r0, r3
 801692c:	f7ff fcd5 	bl	80162da <get_ldnumber>
 8016930:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	2b00      	cmp	r3, #0
 8016936:	da01      	bge.n	801693c <f_mount+0x28>
 8016938:	230b      	movs	r3, #11
 801693a:	e02b      	b.n	8016994 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801693c:	4a17      	ldr	r2, [pc, #92]	; (801699c <f_mount+0x88>)
 801693e:	69fb      	ldr	r3, [r7, #28]
 8016940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016944:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016946:	69bb      	ldr	r3, [r7, #24]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d005      	beq.n	8016958 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801694c:	69b8      	ldr	r0, [r7, #24]
 801694e:	f7fe f84d 	bl	80149ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016952:	69bb      	ldr	r3, [r7, #24]
 8016954:	2200      	movs	r2, #0
 8016956:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d002      	beq.n	8016964 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	2200      	movs	r2, #0
 8016962:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016964:	68fa      	ldr	r2, [r7, #12]
 8016966:	490d      	ldr	r1, [pc, #52]	; (801699c <f_mount+0x88>)
 8016968:	69fb      	ldr	r3, [r7, #28]
 801696a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d002      	beq.n	801697a <f_mount+0x66>
 8016974:	79fb      	ldrb	r3, [r7, #7]
 8016976:	2b01      	cmp	r3, #1
 8016978:	d001      	beq.n	801697e <f_mount+0x6a>
 801697a:	2300      	movs	r3, #0
 801697c:	e00a      	b.n	8016994 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801697e:	f107 010c 	add.w	r1, r7, #12
 8016982:	f107 0308 	add.w	r3, r7, #8
 8016986:	2200      	movs	r2, #0
 8016988:	4618      	mov	r0, r3
 801698a:	f7ff fd41 	bl	8016410 <find_volume>
 801698e:	4603      	mov	r3, r0
 8016990:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016992:	7dfb      	ldrb	r3, [r7, #23]
}
 8016994:	4618      	mov	r0, r3
 8016996:	3720      	adds	r7, #32
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}
 801699c:	24000b60 	.word	0x24000b60

080169a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80169a6:	af00      	add	r7, sp, #0
 80169a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80169ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80169b0:	6018      	str	r0, [r3, #0]
 80169b2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80169b6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80169ba:	6019      	str	r1, [r3, #0]
 80169bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80169c0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80169c4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80169c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80169ca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d101      	bne.n	80169d8 <f_open+0x38>
 80169d4:	2309      	movs	r3, #9
 80169d6:	e295      	b.n	8016f04 <f_open+0x564>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80169d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80169dc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80169e0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80169e4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80169e8:	7812      	ldrb	r2, [r2, #0]
 80169ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80169ee:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80169f0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80169f4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80169f8:	781a      	ldrb	r2, [r3, #0]
 80169fa:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80169fe:	f107 0308 	add.w	r3, r7, #8
 8016a02:	4618      	mov	r0, r3
 8016a04:	f7ff fd04 	bl	8016410 <find_volume>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8016a0e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	f040 8269 	bne.w	8016eea <f_open+0x54a>
		dj.obj.fs = fs;
 8016a18:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016a1c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8016a20:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016a24:	f107 0214 	add.w	r2, r7, #20
 8016a28:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8016a2a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a2e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8016a32:	681a      	ldr	r2, [r3, #0]
 8016a34:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016a38:	4611      	mov	r1, r2
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7ff fbdc 	bl	80161f8 <follow_path>
 8016a40:	4603      	mov	r3, r0
 8016a42:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016a46:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d11e      	bne.n	8016a8c <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016a4e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8016a52:	b25b      	sxtb	r3, r3
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	da03      	bge.n	8016a60 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8016a58:	2306      	movs	r3, #6
 8016a5a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016a5e:	e015      	b.n	8016a8c <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016a60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a64:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	f023 0301 	bic.w	r3, r3, #1
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	bf14      	ite	ne
 8016a72:	2301      	movne	r3, #1
 8016a74:	2300      	moveq	r3, #0
 8016a76:	b2db      	uxtb	r3, r3
 8016a78:	461a      	mov	r2, r3
 8016a7a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016a7e:	4611      	mov	r1, r2
 8016a80:	4618      	mov	r0, r3
 8016a82:	f7fd fe6b 	bl	801475c <chk_lock>
 8016a86:	4603      	mov	r3, r0
 8016a88:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016a8c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016a90:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016a94:	781b      	ldrb	r3, [r3, #0]
 8016a96:	f003 031c 	and.w	r3, r3, #28
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	f000 80a7 	beq.w	8016bee <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8016aa0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d01f      	beq.n	8016ae8 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016aa8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016aac:	2b04      	cmp	r3, #4
 8016aae:	d10e      	bne.n	8016ace <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016ab0:	f7fd feb0 	bl	8014814 <enq_lock>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d006      	beq.n	8016ac8 <f_open+0x128>
 8016aba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016abe:	4618      	mov	r0, r3
 8016ac0:	f7ff f8a8 	bl	8015c14 <dir_register>
 8016ac4:	4603      	mov	r3, r0
 8016ac6:	e000      	b.n	8016aca <f_open+0x12a>
 8016ac8:	2312      	movs	r3, #18
 8016aca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016ace:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016ad2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016ad6:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016ada:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016ade:	7812      	ldrb	r2, [r2, #0]
 8016ae0:	f042 0208 	orr.w	r2, r2, #8
 8016ae4:	701a      	strb	r2, [r3, #0]
 8016ae6:	e015      	b.n	8016b14 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016ae8:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8016aec:	f003 0311 	and.w	r3, r3, #17
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d003      	beq.n	8016afc <f_open+0x15c>
					res = FR_DENIED;
 8016af4:	2307      	movs	r3, #7
 8016af6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016afa:	e00b      	b.n	8016b14 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016afc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016b00:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016b04:	781b      	ldrb	r3, [r3, #0]
 8016b06:	f003 0304 	and.w	r3, r3, #4
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d002      	beq.n	8016b14 <f_open+0x174>
 8016b0e:	2308      	movs	r3, #8
 8016b10:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016b14:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	f040 8088 	bne.w	8016c2e <f_open+0x28e>
 8016b1e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016b22:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016b26:	781b      	ldrb	r3, [r3, #0]
 8016b28:	f003 0308 	and.w	r3, r3, #8
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d07e      	beq.n	8016c2e <f_open+0x28e>
				dw = GET_FATTIME();
 8016b30:	f7f8 ff34 	bl	800f99c <get_fattime>
 8016b34:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016b38:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016b3c:	330e      	adds	r3, #14
 8016b3e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8016b42:	4618      	mov	r0, r3
 8016b44:	f7fd fd60 	bl	8014608 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016b48:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016b4c:	3316      	adds	r3, #22
 8016b4e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8016b52:	4618      	mov	r0, r3
 8016b54:	f7fd fd58 	bl	8014608 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016b58:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016b5c:	330b      	adds	r3, #11
 8016b5e:	2220      	movs	r2, #32
 8016b60:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016b62:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016b66:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8016b6a:	4611      	mov	r1, r2
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7fe fcaa 	bl	80154c6 <ld_clust>
 8016b72:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016b76:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016b7a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8016b7e:	2200      	movs	r2, #0
 8016b80:	4618      	mov	r0, r3
 8016b82:	f7fe fcbf 	bl	8015504 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016b86:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016b8a:	331c      	adds	r3, #28
 8016b8c:	2100      	movs	r1, #0
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7fd fd3a 	bl	8014608 <st_dword>
					fs->wflag = 1;
 8016b94:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016b98:	2201      	movs	r2, #1
 8016b9a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016b9c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d044      	beq.n	8016c2e <f_open+0x28e>
						dw = fs->winsect;
 8016ba4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016baa:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8016bae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7fe f9cc 	bl	8014f56 <remove_chain>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8016bc4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d130      	bne.n	8016c2e <f_open+0x28e>
							res = move_window(fs, dw);
 8016bcc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016bd0:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7fd ff71 	bl	8014abc <move_window>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016be0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016be4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8016be8:	3a01      	subs	r2, #1
 8016bea:	611a      	str	r2, [r3, #16]
 8016bec:	e01f      	b.n	8016c2e <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016bee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d11b      	bne.n	8016c2e <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016bf6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8016bfa:	f003 0310 	and.w	r3, r3, #16
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d003      	beq.n	8016c0a <f_open+0x26a>
					res = FR_NO_FILE;
 8016c02:	2304      	movs	r3, #4
 8016c04:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016c08:	e011      	b.n	8016c2e <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016c0a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c0e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	f003 0302 	and.w	r3, r3, #2
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d008      	beq.n	8016c2e <f_open+0x28e>
 8016c1c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8016c20:	f003 0301 	and.w	r3, r3, #1
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d002      	beq.n	8016c2e <f_open+0x28e>
						res = FR_DENIED;
 8016c28:	2307      	movs	r3, #7
 8016c2a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8016c2e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d14a      	bne.n	8016ccc <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016c36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c3a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	f003 0308 	and.w	r3, r3, #8
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d00b      	beq.n	8016c60 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8016c48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c4c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016c50:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016c54:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016c58:	7812      	ldrb	r2, [r2, #0]
 8016c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016c5e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016c60:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016c66:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c6a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016c72:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8016c76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c7a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016c82:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016c86:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016c8a:	781b      	ldrb	r3, [r3, #0]
 8016c8c:	f023 0301 	bic.w	r3, r3, #1
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	bf14      	ite	ne
 8016c94:	2301      	movne	r3, #1
 8016c96:	2300      	moveq	r3, #0
 8016c98:	b2db      	uxtb	r3, r3
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016ca0:	4611      	mov	r1, r2
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7fd fdd8 	bl	8014858 <inc_lock>
 8016ca8:	4602      	mov	r2, r0
 8016caa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016cb6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	691b      	ldr	r3, [r3, #16]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d102      	bne.n	8016ccc <f_open+0x32c>
 8016cc6:	2302      	movs	r3, #2
 8016cc8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016ccc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	f040 810a 	bne.w	8016eea <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016cd6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016cda:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8016cde:	4611      	mov	r1, r2
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	f7fe fbf0 	bl	80154c6 <ld_clust>
 8016ce6:	4602      	mov	r2, r0
 8016ce8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016cec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016cf4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016cf8:	331c      	adds	r3, #28
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7fd fc46 	bl	801458c <ld_dword>
 8016d00:	4602      	mov	r2, r0
 8016d02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d06:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016d0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d12:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016d1c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8016d20:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d24:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016d2c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016d30:	88da      	ldrh	r2, [r3, #6]
 8016d32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016d3e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d42:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8016d4c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8016d50:	7812      	ldrb	r2, [r2, #0]
 8016d52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016d54:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d58:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	2200      	movs	r2, #0
 8016d60:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016d62:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d66:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016d70:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d74:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016d7e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d82:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	3330      	adds	r3, #48	; 0x30
 8016d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d8e:	2100      	movs	r1, #0
 8016d90:	4618      	mov	r0, r3
 8016d92:	f7fd fc86 	bl	80146a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016d96:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016d9a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	f003 0320 	and.w	r3, r3, #32
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	f000 80a0 	beq.w	8016eea <f_open+0x54a>
 8016daa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016dae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	68db      	ldr	r3, [r3, #12]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	f000 8097 	beq.w	8016eea <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016dbc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016dc0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	68da      	ldr	r2, [r3, #12]
 8016dc8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016dcc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016dd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016dd8:	895b      	ldrh	r3, [r3, #10]
 8016dda:	025b      	lsls	r3, r3, #9
 8016ddc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016de0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016de4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	689b      	ldr	r3, [r3, #8]
 8016dec:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016df0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016df4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	68db      	ldr	r3, [r3, #12]
 8016dfc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8016e00:	e021      	b.n	8016e46 <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 8016e02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e06:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7fd ff0e 	bl	8014c32 <get_fat>
 8016e16:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8016e1a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016e1e:	2b01      	cmp	r3, #1
 8016e20:	d802      	bhi.n	8016e28 <f_open+0x488>
 8016e22:	2302      	movs	r3, #2
 8016e24:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016e28:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e30:	d102      	bne.n	8016e38 <f_open+0x498>
 8016e32:	2301      	movs	r3, #1
 8016e34:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016e38:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8016e3c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016e40:	1ad3      	subs	r3, r2, r3
 8016e42:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8016e46:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d105      	bne.n	8016e5a <f_open+0x4ba>
 8016e4e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8016e52:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016e56:	429a      	cmp	r2, r3
 8016e58:	d8d3      	bhi.n	8016e02 <f_open+0x462>
				}
				fp->clust = clst;
 8016e5a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016e5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8016e68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016e6a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d13b      	bne.n	8016eea <f_open+0x54a>
 8016e72:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d035      	beq.n	8016eea <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016e7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016e82:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8016e86:	4618      	mov	r0, r3
 8016e88:	f7fd feb4 	bl	8014bf4 <clust2sect>
 8016e8c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8016e90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d103      	bne.n	8016ea0 <f_open+0x500>
						res = FR_INT_ERR;
 8016e98:	2302      	movs	r3, #2
 8016e9a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8016e9e:	e024      	b.n	8016eea <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016ea0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016ea4:	0a5a      	lsrs	r2, r3, #9
 8016ea6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8016eaa:	441a      	add	r2, r3
 8016eac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016eb0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016eb8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8016ebc:	7858      	ldrb	r0, [r3, #1]
 8016ebe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016ec2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016ecc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016ed0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	6a1a      	ldr	r2, [r3, #32]
 8016ed8:	2301      	movs	r3, #1
 8016eda:	f7fd fae1 	bl	80144a0 <disk_read>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d002      	beq.n	8016eea <f_open+0x54a>
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016eea:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d006      	beq.n	8016f00 <f_open+0x560>
 8016ef2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8016ef6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	2200      	movs	r2, #0
 8016efe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016f00:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8016f04:	4618      	mov	r0, r3
 8016f06:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd80      	pop	{r7, pc}

08016f0e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8016f0e:	b580      	push	{r7, lr}
 8016f10:	b08e      	sub	sp, #56	; 0x38
 8016f12:	af00      	add	r7, sp, #0
 8016f14:	60f8      	str	r0, [r7, #12]
 8016f16:	60b9      	str	r1, [r7, #8]
 8016f18:	607a      	str	r2, [r7, #4]
 8016f1a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	2200      	movs	r2, #0
 8016f24:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	f107 0214 	add.w	r2, r7, #20
 8016f2c:	4611      	mov	r1, r2
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7ff fcba 	bl	80168a8 <validate>
 8016f34:	4603      	mov	r3, r0
 8016f36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d107      	bne.n	8016f52 <f_read+0x44>
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	7d5b      	ldrb	r3, [r3, #21]
 8016f46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d002      	beq.n	8016f58 <f_read+0x4a>
 8016f52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f56:	e115      	b.n	8017184 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	7d1b      	ldrb	r3, [r3, #20]
 8016f5c:	f003 0301 	and.w	r3, r3, #1
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d101      	bne.n	8016f68 <f_read+0x5a>
 8016f64:	2307      	movs	r3, #7
 8016f66:	e10d      	b.n	8017184 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	68da      	ldr	r2, [r3, #12]
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	699b      	ldr	r3, [r3, #24]
 8016f70:	1ad3      	subs	r3, r2, r3
 8016f72:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8016f74:	687a      	ldr	r2, [r7, #4]
 8016f76:	6a3b      	ldr	r3, [r7, #32]
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	f240 80fe 	bls.w	801717a <f_read+0x26c>
 8016f7e:	6a3b      	ldr	r3, [r7, #32]
 8016f80:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8016f82:	e0fa      	b.n	801717a <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	699b      	ldr	r3, [r3, #24]
 8016f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	f040 80c6 	bne.w	801711e <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	699b      	ldr	r3, [r3, #24]
 8016f96:	0a5b      	lsrs	r3, r3, #9
 8016f98:	697a      	ldr	r2, [r7, #20]
 8016f9a:	8952      	ldrh	r2, [r2, #10]
 8016f9c:	3a01      	subs	r2, #1
 8016f9e:	4013      	ands	r3, r2
 8016fa0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8016fa2:	69fb      	ldr	r3, [r7, #28]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d12f      	bne.n	8017008 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	699b      	ldr	r3, [r3, #24]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d103      	bne.n	8016fb8 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	689b      	ldr	r3, [r3, #8]
 8016fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8016fb6:	e013      	b.n	8016fe0 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d007      	beq.n	8016fd0 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	699b      	ldr	r3, [r3, #24]
 8016fc4:	4619      	mov	r1, r3
 8016fc6:	68f8      	ldr	r0, [r7, #12]
 8016fc8:	f7fe f8c2 	bl	8015150 <clmt_clust>
 8016fcc:	6338      	str	r0, [r7, #48]	; 0x30
 8016fce:	e007      	b.n	8016fe0 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8016fd0:	68fa      	ldr	r2, [r7, #12]
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	69db      	ldr	r3, [r3, #28]
 8016fd6:	4619      	mov	r1, r3
 8016fd8:	4610      	mov	r0, r2
 8016fda:	f7fd fe2a 	bl	8014c32 <get_fat>
 8016fde:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8016fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fe2:	2b01      	cmp	r3, #1
 8016fe4:	d804      	bhi.n	8016ff0 <f_read+0xe2>
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	2202      	movs	r2, #2
 8016fea:	755a      	strb	r2, [r3, #21]
 8016fec:	2302      	movs	r3, #2
 8016fee:	e0c9      	b.n	8017184 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ff6:	d104      	bne.n	8017002 <f_read+0xf4>
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	2201      	movs	r2, #1
 8016ffc:	755a      	strb	r2, [r3, #21]
 8016ffe:	2301      	movs	r3, #1
 8017000:	e0c0      	b.n	8017184 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017006:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017008:	697a      	ldr	r2, [r7, #20]
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	69db      	ldr	r3, [r3, #28]
 801700e:	4619      	mov	r1, r3
 8017010:	4610      	mov	r0, r2
 8017012:	f7fd fdef 	bl	8014bf4 <clust2sect>
 8017016:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017018:	69bb      	ldr	r3, [r7, #24]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d104      	bne.n	8017028 <f_read+0x11a>
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	2202      	movs	r2, #2
 8017022:	755a      	strb	r2, [r3, #21]
 8017024:	2302      	movs	r3, #2
 8017026:	e0ad      	b.n	8017184 <f_read+0x276>
			sect += csect;
 8017028:	69ba      	ldr	r2, [r7, #24]
 801702a:	69fb      	ldr	r3, [r7, #28]
 801702c:	4413      	add	r3, r2
 801702e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	0a5b      	lsrs	r3, r3, #9
 8017034:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8017036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017038:	2b00      	cmp	r3, #0
 801703a:	d039      	beq.n	80170b0 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801703c:	69fa      	ldr	r2, [r7, #28]
 801703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017040:	4413      	add	r3, r2
 8017042:	697a      	ldr	r2, [r7, #20]
 8017044:	8952      	ldrh	r2, [r2, #10]
 8017046:	4293      	cmp	r3, r2
 8017048:	d905      	bls.n	8017056 <f_read+0x148>
					cc = fs->csize - csect;
 801704a:	697b      	ldr	r3, [r7, #20]
 801704c:	895b      	ldrh	r3, [r3, #10]
 801704e:	461a      	mov	r2, r3
 8017050:	69fb      	ldr	r3, [r7, #28]
 8017052:	1ad3      	subs	r3, r2, r3
 8017054:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	7858      	ldrb	r0, [r3, #1]
 801705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801705c:	69ba      	ldr	r2, [r7, #24]
 801705e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017060:	f7fd fa1e 	bl	80144a0 <disk_read>
 8017064:	4603      	mov	r3, r0
 8017066:	2b00      	cmp	r3, #0
 8017068:	d004      	beq.n	8017074 <f_read+0x166>
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	2201      	movs	r2, #1
 801706e:	755a      	strb	r2, [r3, #21]
 8017070:	2301      	movs	r3, #1
 8017072:	e087      	b.n	8017184 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	7d1b      	ldrb	r3, [r3, #20]
 8017078:	b25b      	sxtb	r3, r3
 801707a:	2b00      	cmp	r3, #0
 801707c:	da14      	bge.n	80170a8 <f_read+0x19a>
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	6a1a      	ldr	r2, [r3, #32]
 8017082:	69bb      	ldr	r3, [r7, #24]
 8017084:	1ad3      	subs	r3, r2, r3
 8017086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017088:	429a      	cmp	r2, r3
 801708a:	d90d      	bls.n	80170a8 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	6a1a      	ldr	r2, [r3, #32]
 8017090:	69bb      	ldr	r3, [r7, #24]
 8017092:	1ad3      	subs	r3, r2, r3
 8017094:	025b      	lsls	r3, r3, #9
 8017096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017098:	18d0      	adds	r0, r2, r3
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	3330      	adds	r3, #48	; 0x30
 801709e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80170a2:	4619      	mov	r1, r3
 80170a4:	f7fd fadc 	bl	8014660 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80170a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170aa:	025b      	lsls	r3, r3, #9
 80170ac:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80170ae:	e050      	b.n	8017152 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	6a1b      	ldr	r3, [r3, #32]
 80170b4:	69ba      	ldr	r2, [r7, #24]
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d02e      	beq.n	8017118 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	7d1b      	ldrb	r3, [r3, #20]
 80170be:	b25b      	sxtb	r3, r3
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	da18      	bge.n	80170f6 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80170c4:	697b      	ldr	r3, [r7, #20]
 80170c6:	7858      	ldrb	r0, [r3, #1]
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	6a1a      	ldr	r2, [r3, #32]
 80170d2:	2301      	movs	r3, #1
 80170d4:	f7fd fa04 	bl	80144e0 <disk_write>
 80170d8:	4603      	mov	r3, r0
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d004      	beq.n	80170e8 <f_read+0x1da>
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	2201      	movs	r2, #1
 80170e2:	755a      	strb	r2, [r3, #21]
 80170e4:	2301      	movs	r3, #1
 80170e6:	e04d      	b.n	8017184 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	7d1b      	ldrb	r3, [r3, #20]
 80170ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80170f0:	b2da      	uxtb	r2, r3
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80170f6:	697b      	ldr	r3, [r7, #20]
 80170f8:	7858      	ldrb	r0, [r3, #1]
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017100:	2301      	movs	r3, #1
 8017102:	69ba      	ldr	r2, [r7, #24]
 8017104:	f7fd f9cc 	bl	80144a0 <disk_read>
 8017108:	4603      	mov	r3, r0
 801710a:	2b00      	cmp	r3, #0
 801710c:	d004      	beq.n	8017118 <f_read+0x20a>
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	2201      	movs	r2, #1
 8017112:	755a      	strb	r2, [r3, #21]
 8017114:	2301      	movs	r3, #1
 8017116:	e035      	b.n	8017184 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	69ba      	ldr	r2, [r7, #24]
 801711c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	699b      	ldr	r3, [r3, #24]
 8017122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017126:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801712a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801712c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	429a      	cmp	r2, r3
 8017132:	d901      	bls.n	8017138 <f_read+0x22a>
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	699b      	ldr	r3, [r3, #24]
 8017142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017146:	4413      	add	r3, r2
 8017148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801714a:	4619      	mov	r1, r3
 801714c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801714e:	f7fd fa87 	bl	8014660 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017156:	4413      	add	r3, r2
 8017158:	627b      	str	r3, [r7, #36]	; 0x24
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	699a      	ldr	r2, [r3, #24]
 801715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017160:	441a      	add	r2, r3
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	619a      	str	r2, [r3, #24]
 8017166:	683b      	ldr	r3, [r7, #0]
 8017168:	681a      	ldr	r2, [r3, #0]
 801716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801716c:	441a      	add	r2, r3
 801716e:	683b      	ldr	r3, [r7, #0]
 8017170:	601a      	str	r2, [r3, #0]
 8017172:	687a      	ldr	r2, [r7, #4]
 8017174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017176:	1ad3      	subs	r3, r2, r3
 8017178:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	2b00      	cmp	r3, #0
 801717e:	f47f af01 	bne.w	8016f84 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8017182:	2300      	movs	r3, #0
}
 8017184:	4618      	mov	r0, r3
 8017186:	3738      	adds	r7, #56	; 0x38
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}

0801718c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801718c:	b580      	push	{r7, lr}
 801718e:	b08c      	sub	sp, #48	; 0x30
 8017190:	af00      	add	r7, sp, #0
 8017192:	60f8      	str	r0, [r7, #12]
 8017194:	60b9      	str	r1, [r7, #8]
 8017196:	607a      	str	r2, [r7, #4]
 8017198:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	2200      	movs	r2, #0
 80171a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	f107 0210 	add.w	r2, r7, #16
 80171aa:	4611      	mov	r1, r2
 80171ac:	4618      	mov	r0, r3
 80171ae:	f7ff fb7b 	bl	80168a8 <validate>
 80171b2:	4603      	mov	r3, r0
 80171b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80171b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d107      	bne.n	80171d0 <f_write+0x44>
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	7d5b      	ldrb	r3, [r3, #21]
 80171c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80171c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d002      	beq.n	80171d6 <f_write+0x4a>
 80171d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80171d4:	e14b      	b.n	801746e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	7d1b      	ldrb	r3, [r3, #20]
 80171da:	f003 0302 	and.w	r3, r3, #2
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d101      	bne.n	80171e6 <f_write+0x5a>
 80171e2:	2307      	movs	r3, #7
 80171e4:	e143      	b.n	801746e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	699a      	ldr	r2, [r3, #24]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	441a      	add	r2, r3
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	699b      	ldr	r3, [r3, #24]
 80171f2:	429a      	cmp	r2, r3
 80171f4:	f080 812d 	bcs.w	8017452 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	699b      	ldr	r3, [r3, #24]
 80171fc:	43db      	mvns	r3, r3
 80171fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8017200:	e127      	b.n	8017452 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	699b      	ldr	r3, [r3, #24]
 8017206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801720a:	2b00      	cmp	r3, #0
 801720c:	f040 80e3 	bne.w	80173d6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	699b      	ldr	r3, [r3, #24]
 8017214:	0a5b      	lsrs	r3, r3, #9
 8017216:	693a      	ldr	r2, [r7, #16]
 8017218:	8952      	ldrh	r2, [r2, #10]
 801721a:	3a01      	subs	r2, #1
 801721c:	4013      	ands	r3, r2
 801721e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8017220:	69bb      	ldr	r3, [r7, #24]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d143      	bne.n	80172ae <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	699b      	ldr	r3, [r3, #24]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d10c      	bne.n	8017248 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	689b      	ldr	r3, [r3, #8]
 8017232:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8017234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017236:	2b00      	cmp	r3, #0
 8017238:	d11a      	bne.n	8017270 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	2100      	movs	r1, #0
 801723e:	4618      	mov	r0, r3
 8017240:	f7fd feee 	bl	8015020 <create_chain>
 8017244:	62b8      	str	r0, [r7, #40]	; 0x28
 8017246:	e013      	b.n	8017270 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801724c:	2b00      	cmp	r3, #0
 801724e:	d007      	beq.n	8017260 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	699b      	ldr	r3, [r3, #24]
 8017254:	4619      	mov	r1, r3
 8017256:	68f8      	ldr	r0, [r7, #12]
 8017258:	f7fd ff7a 	bl	8015150 <clmt_clust>
 801725c:	62b8      	str	r0, [r7, #40]	; 0x28
 801725e:	e007      	b.n	8017270 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017260:	68fa      	ldr	r2, [r7, #12]
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	69db      	ldr	r3, [r3, #28]
 8017266:	4619      	mov	r1, r3
 8017268:	4610      	mov	r0, r2
 801726a:	f7fd fed9 	bl	8015020 <create_chain>
 801726e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017272:	2b00      	cmp	r3, #0
 8017274:	f000 80f2 	beq.w	801745c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801727a:	2b01      	cmp	r3, #1
 801727c:	d104      	bne.n	8017288 <f_write+0xfc>
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	2202      	movs	r2, #2
 8017282:	755a      	strb	r2, [r3, #21]
 8017284:	2302      	movs	r3, #2
 8017286:	e0f2      	b.n	801746e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801728a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801728e:	d104      	bne.n	801729a <f_write+0x10e>
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	2201      	movs	r2, #1
 8017294:	755a      	strb	r2, [r3, #21]
 8017296:	2301      	movs	r3, #1
 8017298:	e0e9      	b.n	801746e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801729e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	689b      	ldr	r3, [r3, #8]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d102      	bne.n	80172ae <f_write+0x122>
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172ac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	7d1b      	ldrb	r3, [r3, #20]
 80172b2:	b25b      	sxtb	r3, r3
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	da18      	bge.n	80172ea <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80172b8:	693b      	ldr	r3, [r7, #16]
 80172ba:	7858      	ldrb	r0, [r3, #1]
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	6a1a      	ldr	r2, [r3, #32]
 80172c6:	2301      	movs	r3, #1
 80172c8:	f7fd f90a 	bl	80144e0 <disk_write>
 80172cc:	4603      	mov	r3, r0
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d004      	beq.n	80172dc <f_write+0x150>
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	2201      	movs	r2, #1
 80172d6:	755a      	strb	r2, [r3, #21]
 80172d8:	2301      	movs	r3, #1
 80172da:	e0c8      	b.n	801746e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	7d1b      	ldrb	r3, [r3, #20]
 80172e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80172e4:	b2da      	uxtb	r2, r3
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80172ea:	693a      	ldr	r2, [r7, #16]
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	69db      	ldr	r3, [r3, #28]
 80172f0:	4619      	mov	r1, r3
 80172f2:	4610      	mov	r0, r2
 80172f4:	f7fd fc7e 	bl	8014bf4 <clust2sect>
 80172f8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80172fa:	697b      	ldr	r3, [r7, #20]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d104      	bne.n	801730a <f_write+0x17e>
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	2202      	movs	r2, #2
 8017304:	755a      	strb	r2, [r3, #21]
 8017306:	2302      	movs	r3, #2
 8017308:	e0b1      	b.n	801746e <f_write+0x2e2>
			sect += csect;
 801730a:	697a      	ldr	r2, [r7, #20]
 801730c:	69bb      	ldr	r3, [r7, #24]
 801730e:	4413      	add	r3, r2
 8017310:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	0a5b      	lsrs	r3, r3, #9
 8017316:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8017318:	6a3b      	ldr	r3, [r7, #32]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d03c      	beq.n	8017398 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801731e:	69ba      	ldr	r2, [r7, #24]
 8017320:	6a3b      	ldr	r3, [r7, #32]
 8017322:	4413      	add	r3, r2
 8017324:	693a      	ldr	r2, [r7, #16]
 8017326:	8952      	ldrh	r2, [r2, #10]
 8017328:	4293      	cmp	r3, r2
 801732a:	d905      	bls.n	8017338 <f_write+0x1ac>
					cc = fs->csize - csect;
 801732c:	693b      	ldr	r3, [r7, #16]
 801732e:	895b      	ldrh	r3, [r3, #10]
 8017330:	461a      	mov	r2, r3
 8017332:	69bb      	ldr	r3, [r7, #24]
 8017334:	1ad3      	subs	r3, r2, r3
 8017336:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017338:	693b      	ldr	r3, [r7, #16]
 801733a:	7858      	ldrb	r0, [r3, #1]
 801733c:	6a3b      	ldr	r3, [r7, #32]
 801733e:	697a      	ldr	r2, [r7, #20]
 8017340:	69f9      	ldr	r1, [r7, #28]
 8017342:	f7fd f8cd 	bl	80144e0 <disk_write>
 8017346:	4603      	mov	r3, r0
 8017348:	2b00      	cmp	r3, #0
 801734a:	d004      	beq.n	8017356 <f_write+0x1ca>
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	2201      	movs	r2, #1
 8017350:	755a      	strb	r2, [r3, #21]
 8017352:	2301      	movs	r3, #1
 8017354:	e08b      	b.n	801746e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	6a1a      	ldr	r2, [r3, #32]
 801735a:	697b      	ldr	r3, [r7, #20]
 801735c:	1ad3      	subs	r3, r2, r3
 801735e:	6a3a      	ldr	r2, [r7, #32]
 8017360:	429a      	cmp	r2, r3
 8017362:	d915      	bls.n	8017390 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	6a1a      	ldr	r2, [r3, #32]
 801736e:	697b      	ldr	r3, [r7, #20]
 8017370:	1ad3      	subs	r3, r2, r3
 8017372:	025b      	lsls	r3, r3, #9
 8017374:	69fa      	ldr	r2, [r7, #28]
 8017376:	4413      	add	r3, r2
 8017378:	f44f 7200 	mov.w	r2, #512	; 0x200
 801737c:	4619      	mov	r1, r3
 801737e:	f7fd f96f 	bl	8014660 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	7d1b      	ldrb	r3, [r3, #20]
 8017386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801738a:	b2da      	uxtb	r2, r3
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017390:	6a3b      	ldr	r3, [r7, #32]
 8017392:	025b      	lsls	r3, r3, #9
 8017394:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017396:	e03f      	b.n	8017418 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	6a1b      	ldr	r3, [r3, #32]
 801739c:	697a      	ldr	r2, [r7, #20]
 801739e:	429a      	cmp	r2, r3
 80173a0:	d016      	beq.n	80173d0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	699a      	ldr	r2, [r3, #24]
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80173aa:	429a      	cmp	r2, r3
 80173ac:	d210      	bcs.n	80173d0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80173ae:	693b      	ldr	r3, [r7, #16]
 80173b0:	7858      	ldrb	r0, [r3, #1]
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80173b8:	2301      	movs	r3, #1
 80173ba:	697a      	ldr	r2, [r7, #20]
 80173bc:	f7fd f870 	bl	80144a0 <disk_read>
 80173c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d004      	beq.n	80173d0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	2201      	movs	r2, #1
 80173ca:	755a      	strb	r2, [r3, #21]
 80173cc:	2301      	movs	r3, #1
 80173ce:	e04e      	b.n	801746e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	697a      	ldr	r2, [r7, #20]
 80173d4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	699b      	ldr	r3, [r3, #24]
 80173da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80173de:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80173e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80173e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d901      	bls.n	80173f0 <f_write+0x264>
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	699b      	ldr	r3, [r3, #24]
 80173fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80173fe:	4413      	add	r3, r2
 8017400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017402:	69f9      	ldr	r1, [r7, #28]
 8017404:	4618      	mov	r0, r3
 8017406:	f7fd f92b 	bl	8014660 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	7d1b      	ldrb	r3, [r3, #20]
 801740e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017412:	b2da      	uxtb	r2, r3
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017418:	69fa      	ldr	r2, [r7, #28]
 801741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801741c:	4413      	add	r3, r2
 801741e:	61fb      	str	r3, [r7, #28]
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	699a      	ldr	r2, [r3, #24]
 8017424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017426:	441a      	add	r2, r3
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	619a      	str	r2, [r3, #24]
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	68da      	ldr	r2, [r3, #12]
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	699b      	ldr	r3, [r3, #24]
 8017434:	429a      	cmp	r2, r3
 8017436:	bf38      	it	cc
 8017438:	461a      	movcc	r2, r3
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	60da      	str	r2, [r3, #12]
 801743e:	683b      	ldr	r3, [r7, #0]
 8017440:	681a      	ldr	r2, [r3, #0]
 8017442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017444:	441a      	add	r2, r3
 8017446:	683b      	ldr	r3, [r7, #0]
 8017448:	601a      	str	r2, [r3, #0]
 801744a:	687a      	ldr	r2, [r7, #4]
 801744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801744e:	1ad3      	subs	r3, r2, r3
 8017450:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	2b00      	cmp	r3, #0
 8017456:	f47f aed4 	bne.w	8017202 <f_write+0x76>
 801745a:	e000      	b.n	801745e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801745c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	7d1b      	ldrb	r3, [r3, #20]
 8017462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017466:	b2da      	uxtb	r2, r3
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801746c:	2300      	movs	r3, #0
}
 801746e:	4618      	mov	r0, r3
 8017470:	3730      	adds	r7, #48	; 0x30
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}

08017476 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017476:	b580      	push	{r7, lr}
 8017478:	b086      	sub	sp, #24
 801747a:	af00      	add	r7, sp, #0
 801747c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	f107 0208 	add.w	r2, r7, #8
 8017484:	4611      	mov	r1, r2
 8017486:	4618      	mov	r0, r3
 8017488:	f7ff fa0e 	bl	80168a8 <validate>
 801748c:	4603      	mov	r3, r0
 801748e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017490:	7dfb      	ldrb	r3, [r7, #23]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d168      	bne.n	8017568 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	7d1b      	ldrb	r3, [r3, #20]
 801749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d062      	beq.n	8017568 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	7d1b      	ldrb	r3, [r3, #20]
 80174a6:	b25b      	sxtb	r3, r3
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	da15      	bge.n	80174d8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80174ac:	68bb      	ldr	r3, [r7, #8]
 80174ae:	7858      	ldrb	r0, [r3, #1]
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6a1a      	ldr	r2, [r3, #32]
 80174ba:	2301      	movs	r3, #1
 80174bc:	f7fd f810 	bl	80144e0 <disk_write>
 80174c0:	4603      	mov	r3, r0
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d001      	beq.n	80174ca <f_sync+0x54>
 80174c6:	2301      	movs	r3, #1
 80174c8:	e04f      	b.n	801756a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	7d1b      	ldrb	r3, [r3, #20]
 80174ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80174d2:	b2da      	uxtb	r2, r3
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80174d8:	f7f8 fa60 	bl	800f99c <get_fattime>
 80174dc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80174de:	68ba      	ldr	r2, [r7, #8]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174e4:	4619      	mov	r1, r3
 80174e6:	4610      	mov	r0, r2
 80174e8:	f7fd fae8 	bl	8014abc <move_window>
 80174ec:	4603      	mov	r3, r0
 80174ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80174f0:	7dfb      	ldrb	r3, [r7, #23]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d138      	bne.n	8017568 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	330b      	adds	r3, #11
 8017500:	781a      	ldrb	r2, [r3, #0]
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	330b      	adds	r3, #11
 8017506:	f042 0220 	orr.w	r2, r2, #32
 801750a:	b2d2      	uxtb	r2, r2
 801750c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	6818      	ldr	r0, [r3, #0]
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	689b      	ldr	r3, [r3, #8]
 8017516:	461a      	mov	r2, r3
 8017518:	68f9      	ldr	r1, [r7, #12]
 801751a:	f7fd fff3 	bl	8015504 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	f103 021c 	add.w	r2, r3, #28
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	68db      	ldr	r3, [r3, #12]
 8017528:	4619      	mov	r1, r3
 801752a:	4610      	mov	r0, r2
 801752c:	f7fd f86c 	bl	8014608 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	3316      	adds	r3, #22
 8017534:	6939      	ldr	r1, [r7, #16]
 8017536:	4618      	mov	r0, r3
 8017538:	f7fd f866 	bl	8014608 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	3312      	adds	r3, #18
 8017540:	2100      	movs	r1, #0
 8017542:	4618      	mov	r0, r3
 8017544:	f7fd f845 	bl	80145d2 <st_word>
					fs->wflag = 1;
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	2201      	movs	r2, #1
 801754c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	4618      	mov	r0, r3
 8017552:	f7fd fae1 	bl	8014b18 <sync_fs>
 8017556:	4603      	mov	r3, r0
 8017558:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	7d1b      	ldrb	r3, [r3, #20]
 801755e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017562:	b2da      	uxtb	r2, r3
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017568:	7dfb      	ldrb	r3, [r7, #23]
}
 801756a:	4618      	mov	r0, r3
 801756c:	3718      	adds	r7, #24
 801756e:	46bd      	mov	sp, r7
 8017570:	bd80      	pop	{r7, pc}

08017572 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017572:	b580      	push	{r7, lr}
 8017574:	b084      	sub	sp, #16
 8017576:	af00      	add	r7, sp, #0
 8017578:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801757a:	6878      	ldr	r0, [r7, #4]
 801757c:	f7ff ff7b 	bl	8017476 <f_sync>
 8017580:	4603      	mov	r3, r0
 8017582:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017584:	7bfb      	ldrb	r3, [r7, #15]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d118      	bne.n	80175bc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	f107 0208 	add.w	r2, r7, #8
 8017590:	4611      	mov	r1, r2
 8017592:	4618      	mov	r0, r3
 8017594:	f7ff f988 	bl	80168a8 <validate>
 8017598:	4603      	mov	r3, r0
 801759a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801759c:	7bfb      	ldrb	r3, [r7, #15]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d10c      	bne.n	80175bc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	691b      	ldr	r3, [r3, #16]
 80175a6:	4618      	mov	r0, r3
 80175a8:	f7fd f9e4 	bl	8014974 <dec_lock>
 80175ac:	4603      	mov	r3, r0
 80175ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80175b0:	7bfb      	ldrb	r3, [r7, #15]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d102      	bne.n	80175bc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	2200      	movs	r2, #0
 80175ba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80175bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3710      	adds	r7, #16
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}
	...

080175c8 <f_setlabel>:
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Pointer to the volume label to set */
)
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b09a      	sub	sp, #104	; 0x68
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
	WCHAR w;
	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";


	/* Get logical drive */
	res = find_volume(&label, &fs, FA_WRITE);
 80175d0:	f107 0120 	add.w	r1, r7, #32
 80175d4:	1d3b      	adds	r3, r7, #4
 80175d6:	2202      	movs	r2, #2
 80175d8:	4618      	mov	r0, r3
 80175da:	f7fe ff19 	bl	8016410 <find_volume>
 80175de:	4603      	mov	r3, r0
 80175e0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if (res != FR_OK) LEAVE_FF(fs, res);
 80175e4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d002      	beq.n	80175f2 <f_setlabel+0x2a>
 80175ec:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80175f0:	e12d      	b.n	801784e <f_setlabel+0x286>
	dj.obj.fs = fs;
 80175f2:	6a3b      	ldr	r3, [r7, #32]
 80175f4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Get length of given volume label */
	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
 80175f6:	2300      	movs	r3, #0
 80175f8:	667b      	str	r3, [r7, #100]	; 0x64
 80175fa:	e002      	b.n	8017602 <f_setlabel+0x3a>
 80175fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80175fe:	3301      	adds	r3, #1
 8017600:	667b      	str	r3, [r7, #100]	; 0x64
 8017602:	687a      	ldr	r2, [r7, #4]
 8017604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017606:	4413      	add	r3, r2
 8017608:	781b      	ldrb	r3, [r3, #0]
 801760a:	2b1f      	cmp	r3, #31
 801760c:	d8f6      	bhi.n	80175fc <f_setlabel+0x34>
		}
		slen = j;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
 801760e:	e002      	b.n	8017616 <f_setlabel+0x4e>
 8017610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017612:	3b01      	subs	r3, #1
 8017614:	667b      	str	r3, [r7, #100]	; 0x64
 8017616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017618:	2b00      	cmp	r3, #0
 801761a:	d006      	beq.n	801762a <f_setlabel+0x62>
 801761c:	687a      	ldr	r2, [r7, #4]
 801761e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017620:	3b01      	subs	r3, #1
 8017622:	4413      	add	r3, r2
 8017624:	781b      	ldrb	r3, [r3, #0]
 8017626:	2b20      	cmp	r3, #32
 8017628:	d0f2      	beq.n	8017610 <f_setlabel+0x48>
		if (slen) {		/* Is there a volume label to be set? */
 801762a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801762c:	2b00      	cmp	r3, #0
 801762e:	f000 80a5 	beq.w	801777c <f_setlabel+0x1b4>
			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
 8017632:	2300      	movs	r3, #0
 8017634:	723b      	strb	r3, [r7, #8]
 8017636:	2300      	movs	r3, #0
 8017638:	65bb      	str	r3, [r7, #88]	; 0x58
 801763a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801763c:	65fb      	str	r3, [r7, #92]	; 0x5c
			do {
#if _LFN_UNICODE
				w = ff_convert(ff_wtoupper(label[i++]), 0);
#else
				w = (BYTE)label[i++];
 801763e:	687a      	ldr	r2, [r7, #4]
 8017640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017642:	1c59      	adds	r1, r3, #1
 8017644:	65f9      	str	r1, [r7, #92]	; 0x5c
 8017646:	4413      	add	r3, r2
 8017648:	781b      	ldrb	r3, [r3, #0]
 801764a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				if (IsDBCS1(w)) {
 801764e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8017652:	b2db      	uxtb	r3, r3
 8017654:	2b80      	cmp	r3, #128	; 0x80
 8017656:	d936      	bls.n	80176c6 <f_setlabel+0xfe>
 8017658:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801765c:	b2db      	uxtb	r3, r3
 801765e:	2bff      	cmp	r3, #255	; 0xff
 8017660:	d031      	beq.n	80176c6 <f_setlabel+0xfe>
					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
 8017662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017664:	2b09      	cmp	r3, #9
 8017666:	d82b      	bhi.n	80176c0 <f_setlabel+0xf8>
 8017668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801766a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801766c:	429a      	cmp	r2, r3
 801766e:	d227      	bcs.n	80176c0 <f_setlabel+0xf8>
 8017670:	687a      	ldr	r2, [r7, #4]
 8017672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017674:	4413      	add	r3, r2
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	2b3f      	cmp	r3, #63	; 0x3f
 801767a:	d905      	bls.n	8017688 <f_setlabel+0xc0>
 801767c:	687a      	ldr	r2, [r7, #4]
 801767e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017680:	4413      	add	r3, r2
 8017682:	781b      	ldrb	r3, [r3, #0]
 8017684:	2b7e      	cmp	r3, #126	; 0x7e
 8017686:	d90c      	bls.n	80176a2 <f_setlabel+0xda>
 8017688:	687a      	ldr	r2, [r7, #4]
 801768a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801768c:	4413      	add	r3, r2
 801768e:	781b      	ldrb	r3, [r3, #0]
 8017690:	b25b      	sxtb	r3, r3
 8017692:	2b00      	cmp	r3, #0
 8017694:	da14      	bge.n	80176c0 <f_setlabel+0xf8>
 8017696:	687a      	ldr	r2, [r7, #4]
 8017698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801769a:	4413      	add	r3, r2
 801769c:	781b      	ldrb	r3, [r3, #0]
 801769e:	2bff      	cmp	r3, #255	; 0xff
 80176a0:	d00e      	beq.n	80176c0 <f_setlabel+0xf8>
 80176a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80176a6:	021b      	lsls	r3, r3, #8
 80176a8:	b21a      	sxth	r2, r3
 80176aa:	6879      	ldr	r1, [r7, #4]
 80176ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80176ae:	1c58      	adds	r0, r3, #1
 80176b0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80176b2:	440b      	add	r3, r1
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	b21b      	sxth	r3, r3
 80176b8:	4313      	orrs	r3, r2
 80176ba:	b21b      	sxth	r3, r3
 80176bc:	b29b      	uxth	r3, r3
 80176be:	e000      	b.n	80176c2 <f_setlabel+0xfa>
 80176c0:	2300      	movs	r3, #0
 80176c2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				}
#if _USE_LFN != 0
				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
 80176c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80176ca:	2101      	movs	r1, #1
 80176cc:	4618      	mov	r0, r3
 80176ce:	f000 f921 	bl	8017914 <ff_convert>
 80176d2:	4603      	mov	r3, r0
 80176d4:	4618      	mov	r0, r3
 80176d6:	f000 f97b 	bl	80179d0 <ff_wtoupper>
 80176da:	4603      	mov	r3, r0
 80176dc:	2100      	movs	r1, #0
 80176de:	4618      	mov	r0, r3
 80176e0:	f000 f918 	bl	8017914 <ff_convert>
 80176e4:	4603      	mov	r3, r0
 80176e6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
#else
				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
#endif
				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 80176ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d012      	beq.n	8017718 <f_setlabel+0x150>
 80176f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80176f6:	4619      	mov	r1, r3
 80176f8:	4857      	ldr	r0, [pc, #348]	; (8017858 <f_setlabel+0x290>)
 80176fa:	f7fd f814 	bl	8014726 <chk_chr>
 80176fe:	4603      	mov	r3, r0
 8017700:	2b00      	cmp	r3, #0
 8017702:	d109      	bne.n	8017718 <f_setlabel+0x150>
 8017704:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8017708:	2bff      	cmp	r3, #255	; 0xff
 801770a:	d901      	bls.n	8017710 <f_setlabel+0x148>
 801770c:	220a      	movs	r2, #10
 801770e:	e000      	b.n	8017712 <f_setlabel+0x14a>
 8017710:	220b      	movs	r2, #11
 8017712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017714:	429a      	cmp	r2, r3
 8017716:	d801      	bhi.n	801771c <f_setlabel+0x154>
					LEAVE_FF(fs, FR_INVALID_NAME);
 8017718:	2306      	movs	r3, #6
 801771a:	e098      	b.n	801784e <f_setlabel+0x286>
				}
				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
 801771c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8017720:	2bff      	cmp	r3, #255	; 0xff
 8017722:	d90b      	bls.n	801773c <f_setlabel+0x174>
 8017724:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8017728:	0a1b      	lsrs	r3, r3, #8
 801772a:	b299      	uxth	r1, r3
 801772c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801772e:	1c5a      	adds	r2, r3, #1
 8017730:	65ba      	str	r2, [r7, #88]	; 0x58
 8017732:	b2ca      	uxtb	r2, r1
 8017734:	3368      	adds	r3, #104	; 0x68
 8017736:	443b      	add	r3, r7
 8017738:	f803 2c60 	strb.w	r2, [r3, #-96]
				dirvn[j++] = (BYTE)w;
 801773c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801773e:	1c5a      	adds	r2, r3, #1
 8017740:	65ba      	str	r2, [r7, #88]	; 0x58
 8017742:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8017746:	b2d2      	uxtb	r2, r2
 8017748:	3368      	adds	r3, #104	; 0x68
 801774a:	443b      	add	r3, r7
 801774c:	f803 2c60 	strb.w	r2, [r3, #-96]
			} while (i < slen);
 8017750:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017754:	429a      	cmp	r2, r3
 8017756:	f4ff af72 	bcc.w	801763e <f_setlabel+0x76>
			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
 801775a:	e007      	b.n	801776c <f_setlabel+0x1a4>
 801775c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801775e:	1c5a      	adds	r2, r3, #1
 8017760:	65ba      	str	r2, [r7, #88]	; 0x58
 8017762:	3368      	adds	r3, #104	; 0x68
 8017764:	443b      	add	r3, r7
 8017766:	2220      	movs	r2, #32
 8017768:	f803 2c60 	strb.w	r2, [r3, #-96]
 801776c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801776e:	2b0a      	cmp	r3, #10
 8017770:	d9f4      	bls.n	801775c <f_setlabel+0x194>
			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 8017772:	7a3b      	ldrb	r3, [r7, #8]
 8017774:	2be5      	cmp	r3, #229	; 0xe5
 8017776:	d101      	bne.n	801777c <f_setlabel+0x1b4>
 8017778:	2306      	movs	r3, #6
 801777a:	e068      	b.n	801784e <f_setlabel+0x286>
		}
	}

	/* Set volume label */
	dj.obj.sclust = 0;		/* Open root directory */
 801777c:	2300      	movs	r3, #0
 801777e:	62fb      	str	r3, [r7, #44]	; 0x2c
	res = dir_sdi(&dj, 0);
 8017780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017784:	2100      	movs	r1, #0
 8017786:	4618      	mov	r0, r3
 8017788:	f7fd fd16 	bl	80151b8 <dir_sdi>
 801778c:	4603      	mov	r3, r0
 801778e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if (res == FR_OK) {
 8017792:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017796:	2b00      	cmp	r3, #0
 8017798:	d157      	bne.n	801784a <f_setlabel+0x282>
		res = dir_read(&dj, 1);	/* Get volume label entry */
 801779a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801779e:	2101      	movs	r1, #1
 80177a0:	4618      	mov	r0, r3
 80177a2:	f7fe f8d0 	bl	8015946 <dir_read>
 80177a6:	4603      	mov	r3, r0
 80177a8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		if (res == FR_OK) {
 80177ac:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d118      	bne.n	80177e6 <f_setlabel+0x21e>
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
			} else {
				if (slen) {
 80177b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d007      	beq.n	80177ca <f_setlabel+0x202>
					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
 80177ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177bc:	f107 0108 	add.w	r1, r7, #8
 80177c0:	220b      	movs	r2, #11
 80177c2:	4618      	mov	r0, r3
 80177c4:	f7fc ff4c 	bl	8014660 <mem_cpy>
 80177c8:	e002      	b.n	80177d0 <f_setlabel+0x208>
				} else {
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 80177ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177cc:	22e5      	movs	r2, #229	; 0xe5
 80177ce:	701a      	strb	r2, [r3, #0]
				}
			}
			fs->wflag = 1;
 80177d0:	6a3b      	ldr	r3, [r7, #32]
 80177d2:	2201      	movs	r2, #1
 80177d4:	70da      	strb	r2, [r3, #3]
			res = sync_fs(fs);
 80177d6:	6a3b      	ldr	r3, [r7, #32]
 80177d8:	4618      	mov	r0, r3
 80177da:	f7fd f99d 	bl	8014b18 <sync_fs>
 80177de:	4603      	mov	r3, r0
 80177e0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80177e4:	e031      	b.n	801784a <f_setlabel+0x282>
		} else {			/* No volume label entry is found or error */
			if (res == FR_NO_FILE) {
 80177e6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80177ea:	2b04      	cmp	r3, #4
 80177ec:	d12d      	bne.n	801784a <f_setlabel+0x282>
				res = FR_OK;
 80177ee:	2300      	movs	r3, #0
 80177f0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				if (slen) {	/* Create a volume label entry */
 80177f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d027      	beq.n	801784a <f_setlabel+0x282>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 80177fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80177fe:	2101      	movs	r1, #1
 8017800:	4618      	mov	r0, r3
 8017802:	f7fd fe19 	bl	8015438 <dir_alloc>
 8017806:	4603      	mov	r3, r0
 8017808:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
					if (res == FR_OK) {
 801780c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017810:	2b00      	cmp	r3, #0
 8017812:	d11a      	bne.n	801784a <f_setlabel+0x282>
						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
 8017814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017816:	2220      	movs	r2, #32
 8017818:	2100      	movs	r1, #0
 801781a:	4618      	mov	r0, r3
 801781c:	f7fc ff41 	bl	80146a2 <mem_set>
						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
						} else {
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 8017820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017822:	330b      	adds	r3, #11
 8017824:	2208      	movs	r2, #8
 8017826:	701a      	strb	r2, [r3, #0]
							mem_cpy(dj.dir, dirvn, 11);
 8017828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801782a:	f107 0108 	add.w	r1, r7, #8
 801782e:	220b      	movs	r2, #11
 8017830:	4618      	mov	r0, r3
 8017832:	f7fc ff15 	bl	8014660 <mem_cpy>
						}
						fs->wflag = 1;
 8017836:	6a3b      	ldr	r3, [r7, #32]
 8017838:	2201      	movs	r2, #1
 801783a:	70da      	strb	r2, [r3, #3]
						res = sync_fs(fs);
 801783c:	6a3b      	ldr	r3, [r7, #32]
 801783e:	4618      	mov	r0, r3
 8017840:	f7fd f96a 	bl	8014b18 <sync_fs>
 8017844:	4603      	mov	r3, r0
 8017846:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801784a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
}
 801784e:	4618      	mov	r0, r3
 8017850:	3768      	adds	r7, #104	; 0x68
 8017852:	46bd      	mov	sp, r7
 8017854:	bd80      	pop	{r7, pc}
 8017856:	bf00      	nop
 8017858:	0801bd00 	.word	0x0801bd00

0801785c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801785c:	b480      	push	{r7}
 801785e:	b087      	sub	sp, #28
 8017860:	af00      	add	r7, sp, #0
 8017862:	60f8      	str	r0, [r7, #12]
 8017864:	60b9      	str	r1, [r7, #8]
 8017866:	4613      	mov	r3, r2
 8017868:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801786a:	2301      	movs	r3, #1
 801786c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801786e:	2300      	movs	r3, #0
 8017870:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017872:	4b1f      	ldr	r3, [pc, #124]	; (80178f0 <FATFS_LinkDriverEx+0x94>)
 8017874:	7a5b      	ldrb	r3, [r3, #9]
 8017876:	b2db      	uxtb	r3, r3
 8017878:	2b00      	cmp	r3, #0
 801787a:	d131      	bne.n	80178e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801787c:	4b1c      	ldr	r3, [pc, #112]	; (80178f0 <FATFS_LinkDriverEx+0x94>)
 801787e:	7a5b      	ldrb	r3, [r3, #9]
 8017880:	b2db      	uxtb	r3, r3
 8017882:	461a      	mov	r2, r3
 8017884:	4b1a      	ldr	r3, [pc, #104]	; (80178f0 <FATFS_LinkDriverEx+0x94>)
 8017886:	2100      	movs	r1, #0
 8017888:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801788a:	4b19      	ldr	r3, [pc, #100]	; (80178f0 <FATFS_LinkDriverEx+0x94>)
 801788c:	7a5b      	ldrb	r3, [r3, #9]
 801788e:	b2db      	uxtb	r3, r3
 8017890:	4a17      	ldr	r2, [pc, #92]	; (80178f0 <FATFS_LinkDriverEx+0x94>)
 8017892:	009b      	lsls	r3, r3, #2
 8017894:	4413      	add	r3, r2
 8017896:	68fa      	ldr	r2, [r7, #12]
 8017898:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801789a:	4b15      	ldr	r3, [pc, #84]	; (80178f0 <FATFS_LinkDriverEx+0x94>)
 801789c:	7a5b      	ldrb	r3, [r3, #9]
 801789e:	b2db      	uxtb	r3, r3
 80178a0:	461a      	mov	r2, r3
 80178a2:	4b13      	ldr	r3, [pc, #76]	; (80178f0 <FATFS_LinkDriverEx+0x94>)
 80178a4:	4413      	add	r3, r2
 80178a6:	79fa      	ldrb	r2, [r7, #7]
 80178a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80178aa:	4b11      	ldr	r3, [pc, #68]	; (80178f0 <FATFS_LinkDriverEx+0x94>)
 80178ac:	7a5b      	ldrb	r3, [r3, #9]
 80178ae:	b2db      	uxtb	r3, r3
 80178b0:	1c5a      	adds	r2, r3, #1
 80178b2:	b2d1      	uxtb	r1, r2
 80178b4:	4a0e      	ldr	r2, [pc, #56]	; (80178f0 <FATFS_LinkDriverEx+0x94>)
 80178b6:	7251      	strb	r1, [r2, #9]
 80178b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80178ba:	7dbb      	ldrb	r3, [r7, #22]
 80178bc:	3330      	adds	r3, #48	; 0x30
 80178be:	b2da      	uxtb	r2, r3
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80178c4:	68bb      	ldr	r3, [r7, #8]
 80178c6:	3301      	adds	r3, #1
 80178c8:	223a      	movs	r2, #58	; 0x3a
 80178ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80178cc:	68bb      	ldr	r3, [r7, #8]
 80178ce:	3302      	adds	r3, #2
 80178d0:	222f      	movs	r2, #47	; 0x2f
 80178d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80178d4:	68bb      	ldr	r3, [r7, #8]
 80178d6:	3303      	adds	r3, #3
 80178d8:	2200      	movs	r2, #0
 80178da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80178dc:	2300      	movs	r3, #0
 80178de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80178e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80178e2:	4618      	mov	r0, r3
 80178e4:	371c      	adds	r7, #28
 80178e6:	46bd      	mov	sp, r7
 80178e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ec:	4770      	bx	lr
 80178ee:	bf00      	nop
 80178f0:	24000b88 	.word	0x24000b88

080178f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b082      	sub	sp, #8
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
 80178fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80178fe:	2200      	movs	r2, #0
 8017900:	6839      	ldr	r1, [r7, #0]
 8017902:	6878      	ldr	r0, [r7, #4]
 8017904:	f7ff ffaa 	bl	801785c <FATFS_LinkDriverEx>
 8017908:	4603      	mov	r3, r0
}
 801790a:	4618      	mov	r0, r3
 801790c:	3708      	adds	r7, #8
 801790e:	46bd      	mov	sp, r7
 8017910:	bd80      	pop	{r7, pc}
	...

08017914 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8017914:	b480      	push	{r7}
 8017916:	b089      	sub	sp, #36	; 0x24
 8017918:	af00      	add	r7, sp, #0
 801791a:	4603      	mov	r3, r0
 801791c:	6039      	str	r1, [r7, #0]
 801791e:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 8017920:	88fb      	ldrh	r3, [r7, #6]
 8017922:	2b7f      	cmp	r3, #127	; 0x7f
 8017924:	d802      	bhi.n	801792c <ff_convert+0x18>
		c = chr;
 8017926:	88fb      	ldrh	r3, [r7, #6]
 8017928:	837b      	strh	r3, [r7, #26]
 801792a:	e046      	b.n	80179ba <ff_convert+0xa6>
	} else {
		if (dir) {		/* OEM code to unicode */
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d005      	beq.n	801793e <ff_convert+0x2a>
			p = oem2uni;
 8017932:	4b25      	ldr	r3, [pc, #148]	; (80179c8 <ff_convert+0xb4>)
 8017934:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 8017936:	f245 5320 	movw	r3, #21792	; 0x5520
 801793a:	60bb      	str	r3, [r7, #8]
 801793c:	e004      	b.n	8017948 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 801793e:	4b23      	ldr	r3, [pc, #140]	; (80179cc <ff_convert+0xb8>)
 8017940:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 8017942:	f245 5320 	movw	r3, #21792	; 0x5520
 8017946:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 8017948:	2300      	movs	r3, #0
 801794a:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 801794c:	2310      	movs	r3, #16
 801794e:	613b      	str	r3, [r7, #16]
 8017950:	e022      	b.n	8017998 <ff_convert+0x84>
			i = li + (hi - li) / 2;
 8017952:	68ba      	ldr	r2, [r7, #8]
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	1ad3      	subs	r3, r2, r3
 8017958:	2b00      	cmp	r3, #0
 801795a:	da00      	bge.n	801795e <ff_convert+0x4a>
 801795c:	3301      	adds	r3, #1
 801795e:	105b      	asrs	r3, r3, #1
 8017960:	461a      	mov	r2, r3
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	4413      	add	r3, r2
 8017966:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 8017968:	697b      	ldr	r3, [r7, #20]
 801796a:	009b      	lsls	r3, r3, #2
 801796c:	69fa      	ldr	r2, [r7, #28]
 801796e:	4413      	add	r3, r2
 8017970:	881b      	ldrh	r3, [r3, #0]
 8017972:	88fa      	ldrh	r2, [r7, #6]
 8017974:	429a      	cmp	r2, r3
 8017976:	d013      	beq.n	80179a0 <ff_convert+0x8c>
			if (chr > p[i * 2])
 8017978:	697b      	ldr	r3, [r7, #20]
 801797a:	009b      	lsls	r3, r3, #2
 801797c:	69fa      	ldr	r2, [r7, #28]
 801797e:	4413      	add	r3, r2
 8017980:	881b      	ldrh	r3, [r3, #0]
 8017982:	88fa      	ldrh	r2, [r7, #6]
 8017984:	429a      	cmp	r2, r3
 8017986:	d902      	bls.n	801798e <ff_convert+0x7a>
				li = i;
 8017988:	697b      	ldr	r3, [r7, #20]
 801798a:	60fb      	str	r3, [r7, #12]
 801798c:	e001      	b.n	8017992 <ff_convert+0x7e>
			else
				hi = i;
 801798e:	697b      	ldr	r3, [r7, #20]
 8017990:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 8017992:	693b      	ldr	r3, [r7, #16]
 8017994:	3b01      	subs	r3, #1
 8017996:	613b      	str	r3, [r7, #16]
 8017998:	693b      	ldr	r3, [r7, #16]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d1d9      	bne.n	8017952 <ff_convert+0x3e>
 801799e:	e000      	b.n	80179a2 <ff_convert+0x8e>
			if (chr == p[i * 2]) break;
 80179a0:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 80179a2:	693b      	ldr	r3, [r7, #16]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d006      	beq.n	80179b6 <ff_convert+0xa2>
 80179a8:	697b      	ldr	r3, [r7, #20]
 80179aa:	009b      	lsls	r3, r3, #2
 80179ac:	3302      	adds	r3, #2
 80179ae:	69fa      	ldr	r2, [r7, #28]
 80179b0:	4413      	add	r3, r2
 80179b2:	881b      	ldrh	r3, [r3, #0]
 80179b4:	e000      	b.n	80179b8 <ff_convert+0xa4>
 80179b6:	2300      	movs	r3, #0
 80179b8:	837b      	strh	r3, [r7, #26]
	}

	return c;
 80179ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80179bc:	4618      	mov	r0, r3
 80179be:	3724      	adds	r7, #36	; 0x24
 80179c0:	46bd      	mov	sp, r7
 80179c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c6:	4770      	bx	lr
 80179c8:	08031194 	.word	0x08031194
 80179cc:	0801bd10 	.word	0x0801bd10

080179d0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80179d0:	b480      	push	{r7}
 80179d2:	b087      	sub	sp, #28
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	4603      	mov	r3, r0
 80179d8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80179da:	88fb      	ldrh	r3, [r7, #6]
 80179dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80179e0:	d201      	bcs.n	80179e6 <ff_wtoupper+0x16>
 80179e2:	4b3e      	ldr	r3, [pc, #248]	; (8017adc <ff_wtoupper+0x10c>)
 80179e4:	e000      	b.n	80179e8 <ff_wtoupper+0x18>
 80179e6:	4b3e      	ldr	r3, [pc, #248]	; (8017ae0 <ff_wtoupper+0x110>)
 80179e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80179ea:	697b      	ldr	r3, [r7, #20]
 80179ec:	1c9a      	adds	r2, r3, #2
 80179ee:	617a      	str	r2, [r7, #20]
 80179f0:	881b      	ldrh	r3, [r3, #0]
 80179f2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80179f4:	8a7b      	ldrh	r3, [r7, #18]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d068      	beq.n	8017acc <ff_wtoupper+0xfc>
 80179fa:	88fa      	ldrh	r2, [r7, #6]
 80179fc:	8a7b      	ldrh	r3, [r7, #18]
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d364      	bcc.n	8017acc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8017a02:	697b      	ldr	r3, [r7, #20]
 8017a04:	1c9a      	adds	r2, r3, #2
 8017a06:	617a      	str	r2, [r7, #20]
 8017a08:	881b      	ldrh	r3, [r3, #0]
 8017a0a:	823b      	strh	r3, [r7, #16]
 8017a0c:	8a3b      	ldrh	r3, [r7, #16]
 8017a0e:	0a1b      	lsrs	r3, r3, #8
 8017a10:	81fb      	strh	r3, [r7, #14]
 8017a12:	8a3b      	ldrh	r3, [r7, #16]
 8017a14:	b2db      	uxtb	r3, r3
 8017a16:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8017a18:	88fa      	ldrh	r2, [r7, #6]
 8017a1a:	8a79      	ldrh	r1, [r7, #18]
 8017a1c:	8a3b      	ldrh	r3, [r7, #16]
 8017a1e:	440b      	add	r3, r1
 8017a20:	429a      	cmp	r2, r3
 8017a22:	da49      	bge.n	8017ab8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8017a24:	89fb      	ldrh	r3, [r7, #14]
 8017a26:	2b08      	cmp	r3, #8
 8017a28:	d84f      	bhi.n	8017aca <ff_wtoupper+0xfa>
 8017a2a:	a201      	add	r2, pc, #4	; (adr r2, 8017a30 <ff_wtoupper+0x60>)
 8017a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a30:	08017a55 	.word	0x08017a55
 8017a34:	08017a67 	.word	0x08017a67
 8017a38:	08017a7d 	.word	0x08017a7d
 8017a3c:	08017a85 	.word	0x08017a85
 8017a40:	08017a8d 	.word	0x08017a8d
 8017a44:	08017a95 	.word	0x08017a95
 8017a48:	08017a9d 	.word	0x08017a9d
 8017a4c:	08017aa5 	.word	0x08017aa5
 8017a50:	08017aad 	.word	0x08017aad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017a54:	88fa      	ldrh	r2, [r7, #6]
 8017a56:	8a7b      	ldrh	r3, [r7, #18]
 8017a58:	1ad3      	subs	r3, r2, r3
 8017a5a:	005b      	lsls	r3, r3, #1
 8017a5c:	697a      	ldr	r2, [r7, #20]
 8017a5e:	4413      	add	r3, r2
 8017a60:	881b      	ldrh	r3, [r3, #0]
 8017a62:	80fb      	strh	r3, [r7, #6]
 8017a64:	e027      	b.n	8017ab6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017a66:	88fa      	ldrh	r2, [r7, #6]
 8017a68:	8a7b      	ldrh	r3, [r7, #18]
 8017a6a:	1ad3      	subs	r3, r2, r3
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	f003 0301 	and.w	r3, r3, #1
 8017a72:	b29b      	uxth	r3, r3
 8017a74:	88fa      	ldrh	r2, [r7, #6]
 8017a76:	1ad3      	subs	r3, r2, r3
 8017a78:	80fb      	strh	r3, [r7, #6]
 8017a7a:	e01c      	b.n	8017ab6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017a7c:	88fb      	ldrh	r3, [r7, #6]
 8017a7e:	3b10      	subs	r3, #16
 8017a80:	80fb      	strh	r3, [r7, #6]
 8017a82:	e018      	b.n	8017ab6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017a84:	88fb      	ldrh	r3, [r7, #6]
 8017a86:	3b20      	subs	r3, #32
 8017a88:	80fb      	strh	r3, [r7, #6]
 8017a8a:	e014      	b.n	8017ab6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017a8c:	88fb      	ldrh	r3, [r7, #6]
 8017a8e:	3b30      	subs	r3, #48	; 0x30
 8017a90:	80fb      	strh	r3, [r7, #6]
 8017a92:	e010      	b.n	8017ab6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8017a94:	88fb      	ldrh	r3, [r7, #6]
 8017a96:	3b1a      	subs	r3, #26
 8017a98:	80fb      	strh	r3, [r7, #6]
 8017a9a:	e00c      	b.n	8017ab6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8017a9c:	88fb      	ldrh	r3, [r7, #6]
 8017a9e:	3308      	adds	r3, #8
 8017aa0:	80fb      	strh	r3, [r7, #6]
 8017aa2:	e008      	b.n	8017ab6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8017aa4:	88fb      	ldrh	r3, [r7, #6]
 8017aa6:	3b50      	subs	r3, #80	; 0x50
 8017aa8:	80fb      	strh	r3, [r7, #6]
 8017aaa:	e004      	b.n	8017ab6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8017aac:	88fb      	ldrh	r3, [r7, #6]
 8017aae:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8017ab2:	80fb      	strh	r3, [r7, #6]
 8017ab4:	bf00      	nop
			}
			break;
 8017ab6:	e008      	b.n	8017aca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8017ab8:	89fb      	ldrh	r3, [r7, #14]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d195      	bne.n	80179ea <ff_wtoupper+0x1a>
 8017abe:	8a3b      	ldrh	r3, [r7, #16]
 8017ac0:	005b      	lsls	r3, r3, #1
 8017ac2:	697a      	ldr	r2, [r7, #20]
 8017ac4:	4413      	add	r3, r2
 8017ac6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8017ac8:	e78f      	b.n	80179ea <ff_wtoupper+0x1a>
			break;
 8017aca:	bf00      	nop
	}

	return chr;
 8017acc:	88fb      	ldrh	r3, [r7, #6]
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	371c      	adds	r7, #28
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad8:	4770      	bx	lr
 8017ada:	bf00      	nop
 8017adc:	08046618 	.word	0x08046618
 8017ae0:	0804680c 	.word	0x0804680c

08017ae4 <FatFs_read_Check>:
UINT MyFile_Num;
BYTE ReadBuffer[100] = {0};
BYTE WriteBuffer[] = "STM32H7 SD test fatfs"; // 要写入的数据

void FatFs_read_Check(void) // 判断FatFs是否挂载成功
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b082      	sub	sp, #8
 8017ae8:	af02      	add	r7, sp, #8
	//在外部 SD 卡挂载文件系统，文件系统挂载时会对 SD 卡初始化
	MyFile_Res = f_mount(&fs, "0:", 1); //	挂载SD卡
 8017aea:	2201      	movs	r2, #1
 8017aec:	491a      	ldr	r1, [pc, #104]	; (8017b58 <FatFs_read_Check+0x74>)
 8017aee:	481b      	ldr	r0, [pc, #108]	; (8017b5c <FatFs_read_Check+0x78>)
 8017af0:	f7fe ff10 	bl	8016914 <f_mount>
 8017af4:	4603      	mov	r3, r0
 8017af6:	461a      	mov	r2, r3
 8017af8:	4b19      	ldr	r3, [pc, #100]	; (8017b60 <FatFs_read_Check+0x7c>)
 8017afa:	701a      	strb	r2, [r3, #0]

	if (MyFile_Res == FR_OK) // 判断是否挂载成功
 8017afc:	4b18      	ldr	r3, [pc, #96]	; (8017b60 <FatFs_read_Check+0x7c>)
 8017afe:	781b      	ldrb	r3, [r3, #0]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d126      	bne.n	8017b52 <FatFs_read_Check+0x6e>
	{
		f_setlabel("SD");  //修改磁盘标签
 8017b04:	4817      	ldr	r0, [pc, #92]	; (8017b64 <FatFs_read_Check+0x80>)
 8017b06:	f7ff fd5f 	bl	80175c8 <f_setlabel>
		MyFile_Res = f_open(&file, "0:SD_test.txt", FA_OPEN_EXISTING | FA_READ);
 8017b0a:	2201      	movs	r2, #1
 8017b0c:	4916      	ldr	r1, [pc, #88]	; (8017b68 <FatFs_read_Check+0x84>)
 8017b0e:	4817      	ldr	r0, [pc, #92]	; (8017b6c <FatFs_read_Check+0x88>)
 8017b10:	f7fe ff46 	bl	80169a0 <f_open>
 8017b14:	4603      	mov	r3, r0
 8017b16:	461a      	mov	r2, r3
 8017b18:	4b11      	ldr	r3, [pc, #68]	; (8017b60 <FatFs_read_Check+0x7c>)
 8017b1a:	701a      	strb	r2, [r3, #0]
		if (MyFile_Res == FR_OK)
 8017b1c:	4b10      	ldr	r3, [pc, #64]	; (8017b60 <FatFs_read_Check+0x7c>)
 8017b1e:	781b      	ldrb	r3, [r3, #0]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d116      	bne.n	8017b52 <FatFs_read_Check+0x6e>
		{
		 MyFile_Res = f_read(&file, ReadBuffer, 100, &MyFile_Num); // 读取文件
 8017b24:	4b12      	ldr	r3, [pc, #72]	; (8017b70 <FatFs_read_Check+0x8c>)
 8017b26:	2264      	movs	r2, #100	; 0x64
 8017b28:	4912      	ldr	r1, [pc, #72]	; (8017b74 <FatFs_read_Check+0x90>)
 8017b2a:	4810      	ldr	r0, [pc, #64]	; (8017b6c <FatFs_read_Check+0x88>)
 8017b2c:	f7ff f9ef 	bl	8016f0e <f_read>
 8017b30:	4603      	mov	r3, r0
 8017b32:	461a      	mov	r2, r3
 8017b34:	4b0a      	ldr	r3, [pc, #40]	; (8017b60 <FatFs_read_Check+0x7c>)
 8017b36:	701a      	strb	r2, [r3, #0]
		 LCD_ShowString(0, 0, 160, 128, 16, ReadBuffer); //lcd上显示出来读取的文件内容
 8017b38:	4b0e      	ldr	r3, [pc, #56]	; (8017b74 <FatFs_read_Check+0x90>)
 8017b3a:	9301      	str	r3, [sp, #4]
 8017b3c:	2310      	movs	r3, #16
 8017b3e:	9300      	str	r3, [sp, #0]
 8017b40:	2380      	movs	r3, #128	; 0x80
 8017b42:	22a0      	movs	r2, #160	; 0xa0
 8017b44:	2100      	movs	r1, #0
 8017b46:	2000      	movs	r0, #0
 8017b48:	f000 f9f2 	bl	8017f30 <LCD_ShowString>
		 f_close(&file);
 8017b4c:	4807      	ldr	r0, [pc, #28]	; (8017b6c <FatFs_read_Check+0x88>)
 8017b4e:	f7ff fd10 	bl	8017572 <f_close>
		}
	}

}
 8017b52:	bf00      	nop
 8017b54:	46bd      	mov	sp, r7
 8017b56:	bd80      	pop	{r7, pc}
 8017b58:	0801bc10 	.word	0x0801bc10
 8017b5c:	24000b94 	.word	0x24000b94
 8017b60:	24000dc8 	.word	0x24000dc8
 8017b64:	0801bc14 	.word	0x0801bc14
 8017b68:	0801bc18 	.word	0x0801bc18
 8017b6c:	24000dcc 	.word	0x24000dcc
 8017b70:	24000ffc 	.word	0x24000ffc
 8017b74:	24001000 	.word	0x24001000

08017b78 <FatFs_write_Check>:

void FatFs_write_Check(void)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b082      	sub	sp, #8
 8017b7c:	af02      	add	r7, sp, #8

  MyFile_Res = f_mount(&fs, "0:", 1);
 8017b7e:	2201      	movs	r2, #1
 8017b80:	4932      	ldr	r1, [pc, #200]	; (8017c4c <FatFs_write_Check+0xd4>)
 8017b82:	4833      	ldr	r0, [pc, #204]	; (8017c50 <FatFs_write_Check+0xd8>)
 8017b84:	f7fe fec6 	bl	8016914 <f_mount>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	461a      	mov	r2, r3
 8017b8c:	4b31      	ldr	r3, [pc, #196]	; (8017c54 <FatFs_write_Check+0xdc>)
 8017b8e:	701a      	strb	r2, [r3, #0]

  MyFile_Res = f_open(&file, "0:write_test.txt",FA_CREATE_ALWAYS | FA_WRITE); // 打开文件，若不存在则创建该文件
 8017b90:	220a      	movs	r2, #10
 8017b92:	4931      	ldr	r1, [pc, #196]	; (8017c58 <FatFs_write_Check+0xe0>)
 8017b94:	4831      	ldr	r0, [pc, #196]	; (8017c5c <FatFs_write_Check+0xe4>)
 8017b96:	f7fe ff03 	bl	80169a0 <f_open>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	461a      	mov	r2, r3
 8017b9e:	4b2d      	ldr	r3, [pc, #180]	; (8017c54 <FatFs_write_Check+0xdc>)
 8017ba0:	701a      	strb	r2, [r3, #0]
  if (MyFile_Res == FR_OK)
 8017ba2:	4b2c      	ldr	r3, [pc, #176]	; (8017c54 <FatFs_write_Check+0xdc>)
 8017ba4:	781b      	ldrb	r3, [r3, #0]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d118      	bne.n	8017bdc <FatFs_write_Check+0x64>
  {
     MyFile_Res = f_write(&file, WriteBuffer,sizeof(WriteBuffer), &MyFile_Num); // 向文件写入数据
 8017baa:	4b2d      	ldr	r3, [pc, #180]	; (8017c60 <FatFs_write_Check+0xe8>)
 8017bac:	2216      	movs	r2, #22
 8017bae:	492d      	ldr	r1, [pc, #180]	; (8017c64 <FatFs_write_Check+0xec>)
 8017bb0:	482a      	ldr	r0, [pc, #168]	; (8017c5c <FatFs_write_Check+0xe4>)
 8017bb2:	f7ff faeb 	bl	801718c <f_write>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	461a      	mov	r2, r3
 8017bba:	4b26      	ldr	r3, [pc, #152]	; (8017c54 <FatFs_write_Check+0xdc>)
 8017bbc:	701a      	strb	r2, [r3, #0]
     if (MyFile_Res == FR_OK)
 8017bbe:	4b25      	ldr	r3, [pc, #148]	; (8017c54 <FatFs_write_Check+0xdc>)
 8017bc0:	781b      	ldrb	r3, [r3, #0]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d118      	bne.n	8017bf8 <FatFs_write_Check+0x80>
     {
    	 LCD_ShowString(0, 32, 160, 128, 16, "write ok"); //lcd上显示出来读取的文件内容
 8017bc6:	4b28      	ldr	r3, [pc, #160]	; (8017c68 <FatFs_write_Check+0xf0>)
 8017bc8:	9301      	str	r3, [sp, #4]
 8017bca:	2310      	movs	r3, #16
 8017bcc:	9300      	str	r3, [sp, #0]
 8017bce:	2380      	movs	r3, #128	; 0x80
 8017bd0:	22a0      	movs	r2, #160	; 0xa0
 8017bd2:	2120      	movs	r1, #32
 8017bd4:	2000      	movs	r0, #0
 8017bd6:	f000 f9ab 	bl	8017f30 <LCD_ShowString>
 8017bda:	e00d      	b.n	8017bf8 <FatFs_write_Check+0x80>
     }
  }
  else if(MyFile_Res == FR_INVALID_NAME)
 8017bdc:	4b1d      	ldr	r3, [pc, #116]	; (8017c54 <FatFs_write_Check+0xdc>)
 8017bde:	781b      	ldrb	r3, [r3, #0]
 8017be0:	2b06      	cmp	r3, #6
 8017be2:	d109      	bne.n	8017bf8 <FatFs_write_Check+0x80>
  {
	  LCD_ShowString(0, 32, 160, 128, 16, "FR_INVALID_NAME"); //lcd上显示出来读取的文件内容
 8017be4:	4b21      	ldr	r3, [pc, #132]	; (8017c6c <FatFs_write_Check+0xf4>)
 8017be6:	9301      	str	r3, [sp, #4]
 8017be8:	2310      	movs	r3, #16
 8017bea:	9300      	str	r3, [sp, #0]
 8017bec:	2380      	movs	r3, #128	; 0x80
 8017bee:	22a0      	movs	r2, #160	; 0xa0
 8017bf0:	2120      	movs	r1, #32
 8017bf2:	2000      	movs	r0, #0
 8017bf4:	f000 f99c 	bl	8017f30 <LCD_ShowString>
  }
  f_close(&file);
 8017bf8:	4818      	ldr	r0, [pc, #96]	; (8017c5c <FatFs_write_Check+0xe4>)
 8017bfa:	f7ff fcba 	bl	8017572 <f_close>

  MyFile_Res = f_open(&file, "0:write_test.txt", FA_OPEN_EXISTING | FA_READ);
 8017bfe:	2201      	movs	r2, #1
 8017c00:	4915      	ldr	r1, [pc, #84]	; (8017c58 <FatFs_write_Check+0xe0>)
 8017c02:	4816      	ldr	r0, [pc, #88]	; (8017c5c <FatFs_write_Check+0xe4>)
 8017c04:	f7fe fecc 	bl	80169a0 <f_open>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	461a      	mov	r2, r3
 8017c0c:	4b11      	ldr	r3, [pc, #68]	; (8017c54 <FatFs_write_Check+0xdc>)
 8017c0e:	701a      	strb	r2, [r3, #0]
  if (MyFile_Res == FR_OK)
 8017c10:	4b10      	ldr	r3, [pc, #64]	; (8017c54 <FatFs_write_Check+0xdc>)
 8017c12:	781b      	ldrb	r3, [r3, #0]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d116      	bne.n	8017c46 <FatFs_write_Check+0xce>
	{
	 MyFile_Res = f_read(&file, ReadBuffer, 100, &MyFile_Num); // 读取文件
 8017c18:	4b11      	ldr	r3, [pc, #68]	; (8017c60 <FatFs_write_Check+0xe8>)
 8017c1a:	2264      	movs	r2, #100	; 0x64
 8017c1c:	4914      	ldr	r1, [pc, #80]	; (8017c70 <FatFs_write_Check+0xf8>)
 8017c1e:	480f      	ldr	r0, [pc, #60]	; (8017c5c <FatFs_write_Check+0xe4>)
 8017c20:	f7ff f975 	bl	8016f0e <f_read>
 8017c24:	4603      	mov	r3, r0
 8017c26:	461a      	mov	r2, r3
 8017c28:	4b0a      	ldr	r3, [pc, #40]	; (8017c54 <FatFs_write_Check+0xdc>)
 8017c2a:	701a      	strb	r2, [r3, #0]
	 LCD_ShowString(0, 48, 160, 128, 16, ReadBuffer); //lcd上显示出来读取的文件内容
 8017c2c:	4b10      	ldr	r3, [pc, #64]	; (8017c70 <FatFs_write_Check+0xf8>)
 8017c2e:	9301      	str	r3, [sp, #4]
 8017c30:	2310      	movs	r3, #16
 8017c32:	9300      	str	r3, [sp, #0]
 8017c34:	2380      	movs	r3, #128	; 0x80
 8017c36:	22a0      	movs	r2, #160	; 0xa0
 8017c38:	2130      	movs	r1, #48	; 0x30
 8017c3a:	2000      	movs	r0, #0
 8017c3c:	f000 f978 	bl	8017f30 <LCD_ShowString>
	 f_close(&file);
 8017c40:	4806      	ldr	r0, [pc, #24]	; (8017c5c <FatFs_write_Check+0xe4>)
 8017c42:	f7ff fc96 	bl	8017572 <f_close>
	}
}
 8017c46:	bf00      	nop
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	0801bc10 	.word	0x0801bc10
 8017c50:	24000b94 	.word	0x24000b94
 8017c54:	24000dc8 	.word	0x24000dc8
 8017c58:	0801bc28 	.word	0x0801bc28
 8017c5c:	24000dcc 	.word	0x24000dcc
 8017c60:	24000ffc 	.word	0x24000ffc
 8017c64:	24000194 	.word	0x24000194
 8017c68:	0801bc3c 	.word	0x0801bc3c
 8017c6c:	0801bc48 	.word	0x0801bc48
 8017c70:	24001000 	.word	0x24001000

08017c74 <SD_GetCardInfo>:

//得到卡信息
//cardinfo:卡信息存储区
//返回值:错误状态
uint8_t SD_GetCardInfo(HAL_SD_CardInfoTypeDef *cardinfo)
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b084      	sub	sp, #16
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
    uint8_t sta;
	sta=HAL_SD_GetCardInfo(&hsd1,cardinfo);
 8017c7c:	6879      	ldr	r1, [r7, #4]
 8017c7e:	4805      	ldr	r0, [pc, #20]	; (8017c94 <SD_GetCardInfo+0x20>)
 8017c80:	f7f4 fa1e 	bl	800c0c0 <HAL_SD_GetCardInfo>
 8017c84:	4603      	mov	r3, r0
 8017c86:	73fb      	strb	r3, [r7, #15]
    return sta;
 8017c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	3710      	adds	r7, #16
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}
 8017c92:	bf00      	nop
 8017c94:	240009d0 	.word	0x240009d0

08017c98 <SD_GetCardState>:

//判断SD卡是否可以传输(读写)数据
//返回值:SD_TRANSFER_OK 传输完成，可以继续下一次传输
//		 SD_TRANSFER_BUSY SD卡正忙，不可以进行下一次传输
uint8_t SD_GetCardState(void)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&hsd1)==HAL_SD_CARD_TRANSFER )?SD_TRANSFER_OK:SD_TRANSFER_BUSY);
 8017c9c:	4805      	ldr	r0, [pc, #20]	; (8017cb4 <SD_GetCardState+0x1c>)
 8017c9e:	f7f4 fb4d 	bl	800c33c <HAL_SD_GetCardState>
 8017ca2:	4603      	mov	r3, r0
 8017ca4:	2b04      	cmp	r3, #4
 8017ca6:	bf14      	ite	ne
 8017ca8:	2301      	movne	r3, #1
 8017caa:	2300      	moveq	r3, #0
 8017cac:	b2db      	uxtb	r3, r3
}
 8017cae:	4618      	mov	r0, r3
 8017cb0:	bd80      	pop	{r7, pc}
 8017cb2:	bf00      	nop
 8017cb4:	240009d0 	.word	0x240009d0

08017cb8 <SD_ReadDisk>:
//buf:读数据缓存区
//sector:扇区地址
//cnt:扇区个数
//返回值:错误状态;0,正常;其他,错误代码;
uint8_t SD_ReadDisk(uint8_t* buf,uint32_t sector,uint32_t cnt)
{
 8017cb8:	b5b0      	push	{r4, r5, r7, lr}
 8017cba:	b08a      	sub	sp, #40	; 0x28
 8017cbc:	af02      	add	r7, sp, #8
 8017cbe:	60f8      	str	r0, [r7, #12]
 8017cc0:	60b9      	str	r1, [r7, #8]
 8017cc2:	607a      	str	r2, [r7, #4]
    uint8_t sta=HAL_OK;
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout=SD_TIMEOUT;
 8017cc8:	4b14      	ldr	r3, [pc, #80]	; (8017d1c <SD_ReadDisk+0x64>)
 8017cca:	61bb      	str	r3, [r7, #24]
    long long lsector=sector;
 8017ccc:	68bb      	ldr	r3, [r7, #8]
 8017cce:	2200      	movs	r2, #0
 8017cd0:	461c      	mov	r4, r3
 8017cd2:	4615      	mov	r5, r2
 8017cd4:	e9c7 4504 	strd	r4, r5, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017cd8:	b672      	cpsid	i
}
 8017cda:	bf00      	nop
    __disable_irq();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
	sta=HAL_SD_ReadBlocks(&hsd1, (uint8_t*)buf,lsector,cnt,SD_TIMEOUT);//多个sector的读操作
 8017cdc:	693a      	ldr	r2, [r7, #16]
 8017cde:	4b0f      	ldr	r3, [pc, #60]	; (8017d1c <SD_ReadDisk+0x64>)
 8017ce0:	9300      	str	r3, [sp, #0]
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	68f9      	ldr	r1, [r7, #12]
 8017ce6:	480e      	ldr	r0, [pc, #56]	; (8017d20 <SD_ReadDisk+0x68>)
 8017ce8:	f7f3 fc70 	bl	800b5cc <HAL_SD_ReadBlocks>
 8017cec:	4603      	mov	r3, r0
 8017cee:	77fb      	strb	r3, [r7, #31]

	//等待SD卡读完
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8017cf0:	e007      	b.n	8017d02 <SD_ReadDisk+0x4a>
    {
		if(timeout-- == 0)
 8017cf2:	69bb      	ldr	r3, [r7, #24]
 8017cf4:	1e5a      	subs	r2, r3, #1
 8017cf6:	61ba      	str	r2, [r7, #24]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d102      	bne.n	8017d02 <SD_ReadDisk+0x4a>
		{
			sta=SD_TRANSFER_BUSY;
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	77fb      	strb	r3, [r7, #31]
            break;
 8017d00:	e004      	b.n	8017d0c <SD_ReadDisk+0x54>
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8017d02:	f7ff ffc9 	bl	8017c98 <SD_GetCardState>
 8017d06:	4603      	mov	r3, r0
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d1f2      	bne.n	8017cf2 <SD_ReadDisk+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8017d0c:	b662      	cpsie	i
}
 8017d0e:	bf00      	nop
		}
    }
	__enable_irq();//开启总中断
    return sta;
 8017d10:	7ffb      	ldrb	r3, [r7, #31]
}
 8017d12:	4618      	mov	r0, r3
 8017d14:	3720      	adds	r7, #32
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bdb0      	pop	{r4, r5, r7, pc}
 8017d1a:	bf00      	nop
 8017d1c:	05f5e100 	.word	0x05f5e100
 8017d20:	240009d0 	.word	0x240009d0

08017d24 <SD_WriteDisk>:
//buf:写数据缓存区
//sector:扇区地址
//cnt:扇区个数
//返回值:错误状态;0,正常;其他,错误代码;
uint8_t SD_WriteDisk(uint8_t *buf,uint32_t sector,uint32_t cnt)
{
 8017d24:	b5b0      	push	{r4, r5, r7, lr}
 8017d26:	b08a      	sub	sp, #40	; 0x28
 8017d28:	af02      	add	r7, sp, #8
 8017d2a:	60f8      	str	r0, [r7, #12]
 8017d2c:	60b9      	str	r1, [r7, #8]
 8017d2e:	607a      	str	r2, [r7, #4]
    uint8_t sta=HAL_OK;
 8017d30:	2300      	movs	r3, #0
 8017d32:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout=SD_TIMEOUT;
 8017d34:	4b14      	ldr	r3, [pc, #80]	; (8017d88 <SD_WriteDisk+0x64>)
 8017d36:	61bb      	str	r3, [r7, #24]
    long long lsector=sector;
 8017d38:	68bb      	ldr	r3, [r7, #8]
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	461c      	mov	r4, r3
 8017d3e:	4615      	mov	r5, r2
 8017d40:	e9c7 4504 	strd	r4, r5, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017d44:	b672      	cpsid	i
}
 8017d46:	bf00      	nop
    __disable_irq();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
	sta=HAL_SD_WriteBlocks(&hsd1,(uint8_t*)buf,lsector,cnt,SD_TIMEOUT);//多个sector的写操作
 8017d48:	693a      	ldr	r2, [r7, #16]
 8017d4a:	4b0f      	ldr	r3, [pc, #60]	; (8017d88 <SD_WriteDisk+0x64>)
 8017d4c:	9300      	str	r3, [sp, #0]
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	68f9      	ldr	r1, [r7, #12]
 8017d52:	480e      	ldr	r0, [pc, #56]	; (8017d8c <SD_WriteDisk+0x68>)
 8017d54:	f7f3 fdc4 	bl	800b8e0 <HAL_SD_WriteBlocks>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	77fb      	strb	r3, [r7, #31]

	//等待SD卡写完
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8017d5c:	e007      	b.n	8017d6e <SD_WriteDisk+0x4a>
    {
		if(timeout-- == 0)
 8017d5e:	69bb      	ldr	r3, [r7, #24]
 8017d60:	1e5a      	subs	r2, r3, #1
 8017d62:	61ba      	str	r2, [r7, #24]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d102      	bne.n	8017d6e <SD_WriteDisk+0x4a>
		{
			sta=SD_TRANSFER_BUSY;
 8017d68:	2301      	movs	r3, #1
 8017d6a:	77fb      	strb	r3, [r7, #31]
            break;
 8017d6c:	e004      	b.n	8017d78 <SD_WriteDisk+0x54>
	while(SD_GetCardState()!=SD_TRANSFER_OK)
 8017d6e:	f7ff ff93 	bl	8017c98 <SD_GetCardState>
 8017d72:	4603      	mov	r3, r0
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d1f2      	bne.n	8017d5e <SD_WriteDisk+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8017d78:	b662      	cpsie	i
}
 8017d7a:	bf00      	nop
		}
    }
	__enable_irq();//开启总中断
    return sta;
 8017d7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8017d7e:	4618      	mov	r0, r3
 8017d80:	3720      	adds	r7, #32
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bdb0      	pop	{r4, r5, r7, pc}
 8017d86:	bf00      	nop
 8017d88:	05f5e100 	.word	0x05f5e100
 8017d8c:	240009d0 	.word	0x240009d0

08017d90 <lcd_display_image>:
#include "fonts.h"



void lcd_display_image(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t *image)
{
 8017d90:	b590      	push	{r4, r7, lr}
 8017d92:	b085      	sub	sp, #20
 8017d94:	af02      	add	r7, sp, #8
 8017d96:	4604      	mov	r4, r0
 8017d98:	4608      	mov	r0, r1
 8017d9a:	4611      	mov	r1, r2
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	4623      	mov	r3, r4
 8017da0:	80fb      	strh	r3, [r7, #6]
 8017da2:	4603      	mov	r3, r0
 8017da4:	80bb      	strh	r3, [r7, #4]
 8017da6:	460b      	mov	r3, r1
 8017da8:	807b      	strh	r3, [r7, #2]
 8017daa:	4613      	mov	r3, r2
 8017dac:	803b      	strh	r3, [r7, #0]
	ST7735_DrawImage(x,y,width,height,image);
 8017dae:	883c      	ldrh	r4, [r7, #0]
 8017db0:	887a      	ldrh	r2, [r7, #2]
 8017db2:	88b9      	ldrh	r1, [r7, #4]
 8017db4:	88f8      	ldrh	r0, [r7, #6]
 8017db6:	69bb      	ldr	r3, [r7, #24]
 8017db8:	9300      	str	r3, [sp, #0]
 8017dba:	4623      	mov	r3, r4
 8017dbc:	f000 fbbe 	bl	801853c <ST7735_DrawImage>

}
 8017dc0:	bf00      	nop
 8017dc2:	370c      	adds	r7, #12
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	bd90      	pop	{r4, r7, pc}

08017dc8 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size, uint8_t mode)
{
 8017dc8:	b590      	push	{r4, r7, lr}
 8017dca:	b085      	sub	sp, #20
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	4604      	mov	r4, r0
 8017dd0:	4608      	mov	r0, r1
 8017dd2:	4611      	mov	r1, r2
 8017dd4:	461a      	mov	r2, r3
 8017dd6:	4623      	mov	r3, r4
 8017dd8:	80fb      	strh	r3, [r7, #6]
 8017dda:	4603      	mov	r3, r0
 8017ddc:	80bb      	strh	r3, [r7, #4]
 8017dde:	460b      	mov	r3, r1
 8017de0:	70fb      	strb	r3, [r7, #3]
 8017de2:	4613      	mov	r3, r2
 8017de4:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8017de6:	88bb      	ldrh	r3, [r7, #4]
 8017de8:	817b      	strh	r3, [r7, #10]
    uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);		//得到字体一个字符对应点阵集所占的字节数
 8017dea:	78bb      	ldrb	r3, [r7, #2]
 8017dec:	08db      	lsrs	r3, r3, #3
 8017dee:	b2db      	uxtb	r3, r3
 8017df0:	461a      	mov	r2, r3
 8017df2:	78bb      	ldrb	r3, [r7, #2]
 8017df4:	f003 0307 	and.w	r3, r3, #7
 8017df8:	b2db      	uxtb	r3, r3
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	bf14      	ite	ne
 8017dfe:	2301      	movne	r3, #1
 8017e00:	2300      	moveq	r3, #0
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	4413      	add	r3, r2
 8017e06:	b2da      	uxtb	r2, r3
 8017e08:	78bb      	ldrb	r3, [r7, #2]
 8017e0a:	085b      	lsrs	r3, r3, #1
 8017e0c:	b2db      	uxtb	r3, r3
 8017e0e:	fb12 f303 	smulbb	r3, r2, r3
 8017e12:	727b      	strb	r3, [r7, #9]
    num = num - ' '; //得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8017e14:	78fb      	ldrb	r3, [r7, #3]
 8017e16:	3b20      	subs	r3, #32
 8017e18:	70fb      	strb	r3, [r7, #3]

    for (t = 0; t < csize; t++)
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	737b      	strb	r3, [r7, #13]
 8017e1e:	e073      	b.n	8017f08 <LCD_ShowChar+0x140>
    {
        if (size == 12)temp = asc2_1206[num][t]; 	 	//调用1206字体
 8017e20:	78bb      	ldrb	r3, [r7, #2]
 8017e22:	2b0c      	cmp	r3, #12
 8017e24:	d10b      	bne.n	8017e3e <LCD_ShowChar+0x76>
 8017e26:	78fa      	ldrb	r2, [r7, #3]
 8017e28:	7b79      	ldrb	r1, [r7, #13]
 8017e2a:	483d      	ldr	r0, [pc, #244]	; (8017f20 <LCD_ShowChar+0x158>)
 8017e2c:	4613      	mov	r3, r2
 8017e2e:	005b      	lsls	r3, r3, #1
 8017e30:	4413      	add	r3, r2
 8017e32:	009b      	lsls	r3, r3, #2
 8017e34:	4403      	add	r3, r0
 8017e36:	440b      	add	r3, r1
 8017e38:	781b      	ldrb	r3, [r3, #0]
 8017e3a:	73fb      	strb	r3, [r7, #15]
 8017e3c:	e025      	b.n	8017e8a <LCD_ShowChar+0xc2>
        else if (size == 16)temp = asc2_1608[num][t];	//调用1608字体
 8017e3e:	78bb      	ldrb	r3, [r7, #2]
 8017e40:	2b10      	cmp	r3, #16
 8017e42:	d108      	bne.n	8017e56 <LCD_ShowChar+0x8e>
 8017e44:	78fa      	ldrb	r2, [r7, #3]
 8017e46:	7b7b      	ldrb	r3, [r7, #13]
 8017e48:	4936      	ldr	r1, [pc, #216]	; (8017f24 <LCD_ShowChar+0x15c>)
 8017e4a:	0112      	lsls	r2, r2, #4
 8017e4c:	440a      	add	r2, r1
 8017e4e:	4413      	add	r3, r2
 8017e50:	781b      	ldrb	r3, [r3, #0]
 8017e52:	73fb      	strb	r3, [r7, #15]
 8017e54:	e019      	b.n	8017e8a <LCD_ShowChar+0xc2>
        else if (size == 24)temp = asc2_2412[num][t];	//调用2412字体
 8017e56:	78bb      	ldrb	r3, [r7, #2]
 8017e58:	2b18      	cmp	r3, #24
 8017e5a:	d10b      	bne.n	8017e74 <LCD_ShowChar+0xac>
 8017e5c:	78fa      	ldrb	r2, [r7, #3]
 8017e5e:	7b79      	ldrb	r1, [r7, #13]
 8017e60:	4831      	ldr	r0, [pc, #196]	; (8017f28 <LCD_ShowChar+0x160>)
 8017e62:	4613      	mov	r3, r2
 8017e64:	00db      	lsls	r3, r3, #3
 8017e66:	4413      	add	r3, r2
 8017e68:	009b      	lsls	r3, r3, #2
 8017e6a:	4403      	add	r3, r0
 8017e6c:	440b      	add	r3, r1
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	73fb      	strb	r3, [r7, #15]
 8017e72:	e00a      	b.n	8017e8a <LCD_ShowChar+0xc2>
        else if (size == 32)temp = asc2_3216[num][t];	//调用3216字体
 8017e74:	78bb      	ldrb	r3, [r7, #2]
 8017e76:	2b20      	cmp	r3, #32
 8017e78:	d14b      	bne.n	8017f12 <LCD_ShowChar+0x14a>
 8017e7a:	78fa      	ldrb	r2, [r7, #3]
 8017e7c:	7b7b      	ldrb	r3, [r7, #13]
 8017e7e:	492b      	ldr	r1, [pc, #172]	; (8017f2c <LCD_ShowChar+0x164>)
 8017e80:	01d2      	lsls	r2, r2, #7
 8017e82:	440a      	add	r2, r1
 8017e84:	4413      	add	r3, r2
 8017e86:	781b      	ldrb	r3, [r3, #0]
 8017e88:	73fb      	strb	r3, [r7, #15]
        else return;								//没有的字库

        for (t1 = 0; t1 < 8; t1++)
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	73bb      	strb	r3, [r7, #14]
 8017e8e:	e033      	b.n	8017ef8 <LCD_ShowChar+0x130>
        {
            if (temp & 0x80)ST7735_DrawPixel(x, y, RED);
 8017e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	da07      	bge.n	8017ea8 <LCD_ShowChar+0xe0>
 8017e98:	88b9      	ldrh	r1, [r7, #4]
 8017e9a:	88fb      	ldrh	r3, [r7, #6]
 8017e9c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f000 fb07 	bl	80184b4 <ST7735_DrawPixel>
 8017ea6:	e00a      	b.n	8017ebe <LCD_ShowChar+0xf6>
            else if (mode == 0)ST7735_DrawPixel(x, y, WHITE);
 8017ea8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d106      	bne.n	8017ebe <LCD_ShowChar+0xf6>
 8017eb0:	88b9      	ldrh	r1, [r7, #4]
 8017eb2:	88fb      	ldrh	r3, [r7, #6]
 8017eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f000 fafb 	bl	80184b4 <ST7735_DrawPixel>

            temp <<= 1;
 8017ebe:	7bfb      	ldrb	r3, [r7, #15]
 8017ec0:	005b      	lsls	r3, r3, #1
 8017ec2:	73fb      	strb	r3, [r7, #15]
            y++;
 8017ec4:	88bb      	ldrh	r3, [r7, #4]
 8017ec6:	3301      	adds	r3, #1
 8017ec8:	80bb      	strh	r3, [r7, #4]

            if (y >= 600)return;		//超区域了
 8017eca:	88bb      	ldrh	r3, [r7, #4]
 8017ecc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8017ed0:	d221      	bcs.n	8017f16 <LCD_ShowChar+0x14e>

            if ((y - y0) == size)
 8017ed2:	88ba      	ldrh	r2, [r7, #4]
 8017ed4:	897b      	ldrh	r3, [r7, #10]
 8017ed6:	1ad2      	subs	r2, r2, r3
 8017ed8:	78bb      	ldrb	r3, [r7, #2]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d109      	bne.n	8017ef2 <LCD_ShowChar+0x12a>
            {
                y = y0;
 8017ede:	897b      	ldrh	r3, [r7, #10]
 8017ee0:	80bb      	strh	r3, [r7, #4]
                x++;
 8017ee2:	88fb      	ldrh	r3, [r7, #6]
 8017ee4:	3301      	adds	r3, #1
 8017ee6:	80fb      	strh	r3, [r7, #6]

                if (x >= 1024)return;	//超区域了
 8017ee8:	88fb      	ldrh	r3, [r7, #6]
 8017eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017eee:	d307      	bcc.n	8017f00 <LCD_ShowChar+0x138>
 8017ef0:	e012      	b.n	8017f18 <LCD_ShowChar+0x150>
        for (t1 = 0; t1 < 8; t1++)
 8017ef2:	7bbb      	ldrb	r3, [r7, #14]
 8017ef4:	3301      	adds	r3, #1
 8017ef6:	73bb      	strb	r3, [r7, #14]
 8017ef8:	7bbb      	ldrb	r3, [r7, #14]
 8017efa:	2b07      	cmp	r3, #7
 8017efc:	d9c8      	bls.n	8017e90 <LCD_ShowChar+0xc8>
 8017efe:	e000      	b.n	8017f02 <LCD_ShowChar+0x13a>

                break;
 8017f00:	bf00      	nop
    for (t = 0; t < csize; t++)
 8017f02:	7b7b      	ldrb	r3, [r7, #13]
 8017f04:	3301      	adds	r3, #1
 8017f06:	737b      	strb	r3, [r7, #13]
 8017f08:	7b7a      	ldrb	r2, [r7, #13]
 8017f0a:	7a7b      	ldrb	r3, [r7, #9]
 8017f0c:	429a      	cmp	r2, r3
 8017f0e:	d387      	bcc.n	8017e20 <LCD_ShowChar+0x58>
 8017f10:	e002      	b.n	8017f18 <LCD_ShowChar+0x150>
        else return;								//没有的字库
 8017f12:	bf00      	nop
 8017f14:	e000      	b.n	8017f18 <LCD_ShowChar+0x150>
            if (y >= 600)return;		//超区域了
 8017f16:	bf00      	nop
            }
        }
    }
}
 8017f18:	3714      	adds	r7, #20
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd90      	pop	{r4, r7, pc}
 8017f1e:	bf00      	nop
 8017f20:	080468c8 	.word	0x080468c8
 8017f24:	08046d3c 	.word	0x08046d3c
 8017f28:	0804732c 	.word	0x0804732c
 8017f2c:	08048088 	.word	0x08048088

08017f30 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, uint8_t *p)
{
 8017f30:	b590      	push	{r4, r7, lr}
 8017f32:	b087      	sub	sp, #28
 8017f34:	af02      	add	r7, sp, #8
 8017f36:	4604      	mov	r4, r0
 8017f38:	4608      	mov	r0, r1
 8017f3a:	4611      	mov	r1, r2
 8017f3c:	461a      	mov	r2, r3
 8017f3e:	4623      	mov	r3, r4
 8017f40:	80fb      	strh	r3, [r7, #6]
 8017f42:	4603      	mov	r3, r0
 8017f44:	80bb      	strh	r3, [r7, #4]
 8017f46:	460b      	mov	r3, r1
 8017f48:	807b      	strh	r3, [r7, #2]
 8017f4a:	4613      	mov	r3, r2
 8017f4c:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8017f4e:	88fb      	ldrh	r3, [r7, #6]
 8017f50:	73fb      	strb	r3, [r7, #15]
    width += x;
 8017f52:	887a      	ldrh	r2, [r7, #2]
 8017f54:	88fb      	ldrh	r3, [r7, #6]
 8017f56:	4413      	add	r3, r2
 8017f58:	807b      	strh	r3, [r7, #2]
    height += y;
 8017f5a:	883a      	ldrh	r2, [r7, #0]
 8017f5c:	88bb      	ldrh	r3, [r7, #4]
 8017f5e:	4413      	add	r3, r2
 8017f60:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' ')) //判断是不是非法字符!
 8017f62:	e024      	b.n	8017fae <LCD_ShowString+0x7e>
    {
        if (x >= width)
 8017f64:	88fa      	ldrh	r2, [r7, #6]
 8017f66:	887b      	ldrh	r3, [r7, #2]
 8017f68:	429a      	cmp	r2, r3
 8017f6a:	d307      	bcc.n	8017f7c <LCD_ShowString+0x4c>
        {
            x = x0;
 8017f6c:	7bfb      	ldrb	r3, [r7, #15]
 8017f6e:	80fb      	strh	r3, [r7, #6]
            y += size;
 8017f70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017f74:	b29a      	uxth	r2, r3
 8017f76:	88bb      	ldrh	r3, [r7, #4]
 8017f78:	4413      	add	r3, r2
 8017f7a:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break; //退出
 8017f7c:	88ba      	ldrh	r2, [r7, #4]
 8017f7e:	883b      	ldrh	r3, [r7, #0]
 8017f80:	429a      	cmp	r2, r3
 8017f82:	d21d      	bcs.n	8017fc0 <LCD_ShowString+0x90>

        LCD_ShowChar(x, y, *p, size, 0);
 8017f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f86:	781a      	ldrb	r2, [r3, #0]
 8017f88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017f8c:	88b9      	ldrh	r1, [r7, #4]
 8017f8e:	88f8      	ldrh	r0, [r7, #6]
 8017f90:	2400      	movs	r4, #0
 8017f92:	9400      	str	r4, [sp, #0]
 8017f94:	f7ff ff18 	bl	8017dc8 <LCD_ShowChar>
        x += size / 2;
 8017f98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017f9c:	085b      	lsrs	r3, r3, #1
 8017f9e:	b2db      	uxtb	r3, r3
 8017fa0:	b29a      	uxth	r2, r3
 8017fa2:	88fb      	ldrh	r3, [r7, #6]
 8017fa4:	4413      	add	r3, r2
 8017fa6:	80fb      	strh	r3, [r7, #6]
        p++;
 8017fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017faa:	3301      	adds	r3, #1
 8017fac:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' ')) //判断是不是非法字符!
 8017fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb0:	781b      	ldrb	r3, [r3, #0]
 8017fb2:	2b7e      	cmp	r3, #126	; 0x7e
 8017fb4:	d805      	bhi.n	8017fc2 <LCD_ShowString+0x92>
 8017fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb8:	781b      	ldrb	r3, [r3, #0]
 8017fba:	2b1f      	cmp	r3, #31
 8017fbc:	d8d2      	bhi.n	8017f64 <LCD_ShowString+0x34>
    }
}
 8017fbe:	e000      	b.n	8017fc2 <LCD_ShowString+0x92>
        if (y >= height)break; //退出
 8017fc0:	bf00      	nop
}
 8017fc2:	bf00      	nop
 8017fc4:	3714      	adds	r7, #20
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	bd90      	pop	{r4, r7, pc}
	...

08017fcc <lcd_init>:

void lcd_init(void)
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	af00      	add	r7, sp, #0
	uint32_t i;
	HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8017fd0:	2201      	movs	r2, #1
 8017fd2:	2120      	movs	r1, #32
 8017fd4:	4810      	ldr	r0, [pc, #64]	; (8018018 <lcd_init+0x4c>)
 8017fd6:	f7ed fb25 	bl	8005624 <HAL_GPIO_WritePin>
	ST7735_Init();
 8017fda:	f000 f8dd 	bl	8018198 <ST7735_Init>
	ST7735_FillScreen(RED);
 8017fde:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8017fe2:	f000 fa9a 	bl	801851a <ST7735_FillScreen>
	HAL_Delay(200);
 8017fe6:	20c8      	movs	r0, #200	; 0xc8
 8017fe8:	f7e9 f9fc 	bl	80013e4 <HAL_Delay>
	ST7735_FillScreen(GREEN);
 8017fec:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8017ff0:	f000 fa93 	bl	801851a <ST7735_FillScreen>
	HAL_Delay(200);
 8017ff4:	20c8      	movs	r0, #200	; 0xc8
 8017ff6:	f7e9 f9f5 	bl	80013e4 <HAL_Delay>
	ST7735_FillScreen(BLUE);
 8017ffa:	201f      	movs	r0, #31
 8017ffc:	f000 fa8d 	bl	801851a <ST7735_FillScreen>
	HAL_Delay(200);
 8018000:	20c8      	movs	r0, #200	; 0xc8
 8018002:	f7e9 f9ef 	bl	80013e4 <HAL_Delay>
	ST7735_FillScreen(WHITE);
 8018006:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801800a:	f000 fa86 	bl	801851a <ST7735_FillScreen>
	HAL_Delay(200);
 801800e:	20c8      	movs	r0, #200	; 0xc8
 8018010:	f7e9 f9e8 	bl	80013e4 <HAL_Delay>
//	LCD_ShowString(0, 0, 160, 128, 16, " lcd display test ");
//    for(i=0;i<100;i++)
//    {
//    	ST7735_DrawPixel(i,i,RED);
//    }
}
 8018014:	bf00      	nop
 8018016:	bd80      	pop	{r7, pc}
 8018018:	58020000 	.word	0x58020000

0801801c <ST7735_Reset>:
#define ST7735_MADCTL_MY  0x80
#define ST7735_MADCTL_MV  0x20
#define ST7735_MADCTL_RGB 0x00

void ST7735_Reset(void)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8018020:	2200      	movs	r2, #0
 8018022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018026:	4808      	ldr	r0, [pc, #32]	; (8018048 <ST7735_Reset+0x2c>)
 8018028:	f7ed fafc 	bl	8005624 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 801802c:	2064      	movs	r0, #100	; 0x64
 801802e:	f7e9 f9d9 	bl	80013e4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8018032:	2201      	movs	r2, #1
 8018034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018038:	4803      	ldr	r0, [pc, #12]	; (8018048 <ST7735_Reset+0x2c>)
 801803a:	f7ed faf3 	bl	8005624 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 801803e:	2064      	movs	r0, #100	; 0x64
 8018040:	f7e9 f9d0 	bl	80013e4 <HAL_Delay>
}
 8018044:	bf00      	nop
 8018046:	bd80      	pop	{r7, pc}
 8018048:	58020c00 	.word	0x58020c00

0801804c <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	4603      	mov	r3, r0
 8018054:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8018056:	2200      	movs	r2, #0
 8018058:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801805c:	480c      	ldr	r0, [pc, #48]	; (8018090 <ST7735_WriteCommand+0x44>)
 801805e:	f7ed fae1 	bl	8005624 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8018062:	2200      	movs	r2, #0
 8018064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018068:	480a      	ldr	r0, [pc, #40]	; (8018094 <ST7735_WriteCommand+0x48>)
 801806a:	f7ed fadb 	bl	8005624 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, 100);
 801806e:	1df9      	adds	r1, r7, #7
 8018070:	2364      	movs	r3, #100	; 0x64
 8018072:	2201      	movs	r2, #1
 8018074:	4808      	ldr	r0, [pc, #32]	; (8018098 <ST7735_WriteCommand+0x4c>)
 8018076:	f7f4 fe5f 	bl	800cd38 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi2, &cmd, 1);
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 801807a:	2201      	movs	r2, #1
 801807c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018080:	4804      	ldr	r0, [pc, #16]	; (8018094 <ST7735_WriteCommand+0x48>)
 8018082:	f7ed facf 	bl	8005624 <HAL_GPIO_WritePin>
}
 8018086:	bf00      	nop
 8018088:	3708      	adds	r7, #8
 801808a:	46bd      	mov	sp, r7
 801808c:	bd80      	pop	{r7, pc}
 801808e:	bf00      	nop
 8018090:	58020c00 	.word	0x58020c00
 8018094:	58020400 	.word	0x58020400
 8018098:	24000a4c 	.word	0x24000a4c

0801809c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t data)
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b082      	sub	sp, #8
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	4603      	mov	r3, r0
 80180a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80180a6:	2201      	movs	r2, #1
 80180a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80180ac:	480c      	ldr	r0, [pc, #48]	; (80180e0 <ST7735_WriteData+0x44>)
 80180ae:	f7ed fab9 	bl	8005624 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80180b2:	2200      	movs	r2, #0
 80180b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80180b8:	480a      	ldr	r0, [pc, #40]	; (80180e4 <ST7735_WriteData+0x48>)
 80180ba:	f7ed fab3 	bl	8005624 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80180be:	1df9      	adds	r1, r7, #7
 80180c0:	2364      	movs	r3, #100	; 0x64
 80180c2:	2201      	movs	r2, #1
 80180c4:	4808      	ldr	r0, [pc, #32]	; (80180e8 <ST7735_WriteData+0x4c>)
 80180c6:	f7f4 fe37 	bl	800cd38 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80180ca:	2201      	movs	r2, #1
 80180cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80180d0:	4804      	ldr	r0, [pc, #16]	; (80180e4 <ST7735_WriteData+0x48>)
 80180d2:	f7ed faa7 	bl	8005624 <HAL_GPIO_WritePin>
}
 80180d6:	bf00      	nop
 80180d8:	3708      	adds	r7, #8
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}
 80180de:	bf00      	nop
 80180e0:	58020c00 	.word	0x58020c00
 80180e4:	58020400 	.word	0x58020400
 80180e8:	24000a4c 	.word	0x24000a4c

080180ec <ST7735_WriteBuf>:

void ST7735_WriteBuf(uint8_t* data,uint16_t len)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b082      	sub	sp, #8
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	460b      	mov	r3, r1
 80180f6:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80180f8:	2201      	movs	r2, #1
 80180fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80180fe:	480c      	ldr	r0, [pc, #48]	; (8018130 <ST7735_WriteBuf+0x44>)
 8018100:	f7ed fa90 	bl	8005624 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8018104:	2200      	movs	r2, #0
 8018106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801810a:	480a      	ldr	r0, [pc, #40]	; (8018134 <ST7735_WriteBuf+0x48>)
 801810c:	f7ed fa8a 	bl	8005624 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, len, 100);
 8018110:	887a      	ldrh	r2, [r7, #2]
 8018112:	2364      	movs	r3, #100	; 0x64
 8018114:	6879      	ldr	r1, [r7, #4]
 8018116:	4808      	ldr	r0, [pc, #32]	; (8018138 <ST7735_WriteBuf+0x4c>)
 8018118:	f7f4 fe0e 	bl	800cd38 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 801811c:	2201      	movs	r2, #1
 801811e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018122:	4804      	ldr	r0, [pc, #16]	; (8018134 <ST7735_WriteBuf+0x48>)
 8018124:	f7ed fa7e 	bl	8005624 <HAL_GPIO_WritePin>
}
 8018128:	bf00      	nop
 801812a:	3708      	adds	r7, #8
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}
 8018130:	58020c00 	.word	0x58020c00
 8018134:	58020400 	.word	0x58020400
 8018138:	24000a4c 	.word	0x24000a4c

0801813c <ST7735_SetRotation>:


void ST7735_SetRotation(uint8_t rotation)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b084      	sub	sp, #16
 8018140:	af00      	add	r7, sp, #0
 8018142:	4603      	mov	r3, r0
 8018144:	71fb      	strb	r3, [r7, #7]
    uint8_t madctl = 0;
 8018146:	2300      	movs	r3, #0
 8018148:	73fb      	strb	r3, [r7, #15]

    switch (rotation)
 801814a:	79fb      	ldrb	r3, [r7, #7]
 801814c:	2b03      	cmp	r3, #3
 801814e:	d817      	bhi.n	8018180 <ST7735_SetRotation+0x44>
 8018150:	a201      	add	r2, pc, #4	; (adr r2, 8018158 <ST7735_SetRotation+0x1c>)
 8018152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018156:	bf00      	nop
 8018158:	08018169 	.word	0x08018169
 801815c:	0801816f 	.word	0x0801816f
 8018160:	08018175 	.word	0x08018175
 8018164:	0801817b 	.word	0x0801817b
    {
        case 0:
            madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8018168:	23c0      	movs	r3, #192	; 0xc0
 801816a:	73fb      	strb	r3, [r7, #15]
            break;
 801816c:	e008      	b.n	8018180 <ST7735_SetRotation+0x44>
        case 1:
            madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 801816e:	23a0      	movs	r3, #160	; 0xa0
 8018170:	73fb      	strb	r3, [r7, #15]
            break;
 8018172:	e005      	b.n	8018180 <ST7735_SetRotation+0x44>
        case 2:
            madctl = ST7735_MADCTL_RGB;
 8018174:	2300      	movs	r3, #0
 8018176:	73fb      	strb	r3, [r7, #15]
            break;
 8018178:	e002      	b.n	8018180 <ST7735_SetRotation+0x44>
        case 3:
            madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 801817a:	2360      	movs	r3, #96	; 0x60
 801817c:	73fb      	strb	r3, [r7, #15]
            break;
 801817e:	bf00      	nop
    }

    ST7735_WriteCommand(ST7735_MADCTL);
 8018180:	2036      	movs	r0, #54	; 0x36
 8018182:	f7ff ff63 	bl	801804c <ST7735_WriteCommand>
    ST7735_WriteData(madctl);
 8018186:	7bfb      	ldrb	r3, [r7, #15]
 8018188:	4618      	mov	r0, r3
 801818a:	f7ff ff87 	bl	801809c <ST7735_WriteData>
}
 801818e:	bf00      	nop
 8018190:	3710      	adds	r7, #16
 8018192:	46bd      	mov	sp, r7
 8018194:	bd80      	pop	{r7, pc}
 8018196:	bf00      	nop

08018198 <ST7735_Init>:

void ST7735_Init(void) {
 8018198:	b580      	push	{r7, lr}
 801819a:	af00      	add	r7, sp, #0
  // Initialize the display
  ST7735_Reset();
 801819c:	f7ff ff3e 	bl	801801c <ST7735_Reset>
  ST7735_WriteCommand(ST7735_SLPOUT);
 80181a0:	2011      	movs	r0, #17
 80181a2:	f7ff ff53 	bl	801804c <ST7735_WriteCommand>
  HAL_Delay(120);
 80181a6:	2078      	movs	r0, #120	; 0x78
 80181a8:	f7e9 f91c 	bl	80013e4 <HAL_Delay>
  ST7735_WriteCommand(ST7735_FRMCTR1);
 80181ac:	20b1      	movs	r0, #177	; 0xb1
 80181ae:	f7ff ff4d 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 80181b2:	2001      	movs	r0, #1
 80181b4:	f7ff ff72 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 80181b8:	202c      	movs	r0, #44	; 0x2c
 80181ba:	f7ff ff6f 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 80181be:	202d      	movs	r0, #45	; 0x2d
 80181c0:	f7ff ff6c 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_FRMCTR2);
 80181c4:	20b2      	movs	r0, #178	; 0xb2
 80181c6:	f7ff ff41 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 80181ca:	2001      	movs	r0, #1
 80181cc:	f7ff ff66 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 80181d0:	202c      	movs	r0, #44	; 0x2c
 80181d2:	f7ff ff63 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 80181d6:	202d      	movs	r0, #45	; 0x2d
 80181d8:	f7ff ff60 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_FRMCTR3);
 80181dc:	20b3      	movs	r0, #179	; 0xb3
 80181de:	f7ff ff35 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 80181e2:	2001      	movs	r0, #1
 80181e4:	f7ff ff5a 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 80181e8:	202c      	movs	r0, #44	; 0x2c
 80181ea:	f7ff ff57 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 80181ee:	202d      	movs	r0, #45	; 0x2d
 80181f0:	f7ff ff54 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x01);
 80181f4:	2001      	movs	r0, #1
 80181f6:	f7ff ff51 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 80181fa:	202c      	movs	r0, #44	; 0x2c
 80181fc:	f7ff ff4e 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 8018200:	202d      	movs	r0, #45	; 0x2d
 8018202:	f7ff ff4b 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_INVCTR);
 8018206:	20b4      	movs	r0, #180	; 0xb4
 8018208:	f7ff ff20 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x07);
 801820c:	2007      	movs	r0, #7
 801820e:	f7ff ff45 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR1);
 8018212:	20c0      	movs	r0, #192	; 0xc0
 8018214:	f7ff ff1a 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0xA2);
 8018218:	20a2      	movs	r0, #162	; 0xa2
 801821a:	f7ff ff3f 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x02);
 801821e:	2002      	movs	r0, #2
 8018220:	f7ff ff3c 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x84);
 8018224:	2084      	movs	r0, #132	; 0x84
 8018226:	f7ff ff39 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR2);
 801822a:	20c1      	movs	r0, #193	; 0xc1
 801822c:	f7ff ff0e 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0xC5);
 8018230:	20c5      	movs	r0, #197	; 0xc5
 8018232:	f7ff ff33 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR3);
 8018236:	20c2      	movs	r0, #194	; 0xc2
 8018238:	f7ff ff08 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x0A);
 801823c:	200a      	movs	r0, #10
 801823e:	f7ff ff2d 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8018242:	2000      	movs	r0, #0
 8018244:	f7ff ff2a 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR4);
 8018248:	20c3      	movs	r0, #195	; 0xc3
 801824a:	f7ff feff 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x8A);
 801824e:	208a      	movs	r0, #138	; 0x8a
 8018250:	f7ff ff24 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2A);
 8018254:	202a      	movs	r0, #42	; 0x2a
 8018256:	f7ff ff21 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR5);
 801825a:	20c4      	movs	r0, #196	; 0xc4
 801825c:	f7ff fef6 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x8A);
 8018260:	208a      	movs	r0, #138	; 0x8a
 8018262:	f7ff ff1b 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0xEE);
 8018266:	20ee      	movs	r0, #238	; 0xee
 8018268:	f7ff ff18 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_VMCTR1);
 801826c:	20c5      	movs	r0, #197	; 0xc5
 801826e:	f7ff feed 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x0E);
 8018272:	200e      	movs	r0, #14
 8018274:	f7ff ff12 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_INVOFF);
 8018278:	2020      	movs	r0, #32
 801827a:	f7ff fee7 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteCommand(ST7735_COLMOD);
 801827e:	203a      	movs	r0, #58	; 0x3a
 8018280:	f7ff fee4 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x05);
 8018284:	2005      	movs	r0, #5
 8018286:	f7ff ff09 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_CASET);
 801828a:	202a      	movs	r0, #42	; 0x2a
 801828c:	f7ff fede 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8018290:	2000      	movs	r0, #0
 8018292:	f7ff ff03 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8018296:	2000      	movs	r0, #0
 8018298:	f7ff ff00 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x00);
 801829c:	2000      	movs	r0, #0
 801829e:	f7ff fefd 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x7F);
 80182a2:	207f      	movs	r0, #127	; 0x7f
 80182a4:	f7ff fefa 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_RASET);
 80182a8:	202b      	movs	r0, #43	; 0x2b
 80182aa:	f7ff fecf 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 80182ae:	2000      	movs	r0, #0
 80182b0:	f7ff fef4 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80182b4:	2000      	movs	r0, #0
 80182b6:	f7ff fef1 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80182ba:	2000      	movs	r0, #0
 80182bc:	f7ff feee 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x9F);
 80182c0:	209f      	movs	r0, #159	; 0x9f
 80182c2:	f7ff feeb 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_GMCTRP1);
 80182c6:	20e0      	movs	r0, #224	; 0xe0
 80182c8:	f7ff fec0 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x02);
 80182cc:	2002      	movs	r0, #2
 80182ce:	f7ff fee5 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x1C);
 80182d2:	201c      	movs	r0, #28
 80182d4:	f7ff fee2 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x07);
 80182d8:	2007      	movs	r0, #7
 80182da:	f7ff fedf 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x12);
 80182de:	2012      	movs	r0, #18
 80182e0:	f7ff fedc 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x37);
 80182e4:	2037      	movs	r0, #55	; 0x37
 80182e6:	f7ff fed9 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x32);
 80182ea:	2032      	movs	r0, #50	; 0x32
 80182ec:	f7ff fed6 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x29);
 80182f0:	2029      	movs	r0, #41	; 0x29
 80182f2:	f7ff fed3 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 80182f6:	202d      	movs	r0, #45	; 0x2d
 80182f8:	f7ff fed0 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x29);
 80182fc:	2029      	movs	r0, #41	; 0x29
 80182fe:	f7ff fecd 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x25);
 8018302:	2025      	movs	r0, #37	; 0x25
 8018304:	f7ff feca 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2B);
 8018308:	202b      	movs	r0, #43	; 0x2b
 801830a:	f7ff fec7 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x39);
 801830e:	2039      	movs	r0, #57	; 0x39
 8018310:	f7ff fec4 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8018314:	2000      	movs	r0, #0
 8018316:	f7ff fec1 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x01);
 801831a:	2001      	movs	r0, #1
 801831c:	f7ff febe 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x03);
 8018320:	2003      	movs	r0, #3
 8018322:	f7ff febb 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x10);
 8018326:	2010      	movs	r0, #16
 8018328:	f7ff feb8 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_GMCTRN1);
 801832c:	20e1      	movs	r0, #225	; 0xe1
 801832e:	f7ff fe8d 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x03);
 8018332:	2003      	movs	r0, #3
 8018334:	f7ff feb2 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x1D);
 8018338:	201d      	movs	r0, #29
 801833a:	f7ff feaf 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x07);
 801833e:	2007      	movs	r0, #7
 8018340:	f7ff feac 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x06);
 8018344:	2006      	movs	r0, #6
 8018346:	f7ff fea9 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 801834a:	202e      	movs	r0, #46	; 0x2e
 801834c:	f7ff fea6 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 8018350:	202c      	movs	r0, #44	; 0x2c
 8018352:	f7ff fea3 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x29);
 8018356:	2029      	movs	r0, #41	; 0x29
 8018358:	f7ff fea0 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 801835c:	202d      	movs	r0, #45	; 0x2d
 801835e:	f7ff fe9d 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 8018362:	202e      	movs	r0, #46	; 0x2e
 8018364:	f7ff fe9a 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 8018368:	202e      	movs	r0, #46	; 0x2e
 801836a:	f7ff fe97 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x37);
 801836e:	2037      	movs	r0, #55	; 0x37
 8018370:	f7ff fe94 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x3F);
 8018374:	203f      	movs	r0, #63	; 0x3f
 8018376:	f7ff fe91 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x00);
 801837a:	2000      	movs	r0, #0
 801837c:	f7ff fe8e 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8018380:	2000      	movs	r0, #0
 8018382:	f7ff fe8b 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x02);
 8018386:	2002      	movs	r0, #2
 8018388:	f7ff fe88 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x10);
 801838c:	2010      	movs	r0, #16
 801838e:	f7ff fe85 	bl	801809c <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_NORON);
 8018392:	2013      	movs	r0, #19
 8018394:	f7ff fe5a 	bl	801804c <ST7735_WriteCommand>
  HAL_Delay(10);
 8018398:	200a      	movs	r0, #10
 801839a:	f7e9 f823 	bl	80013e4 <HAL_Delay>
  ST7735_WriteCommand(ST7735_DISPON);
 801839e:	2029      	movs	r0, #41	; 0x29
 80183a0:	f7ff fe54 	bl	801804c <ST7735_WriteCommand>
  HAL_Delay(10);
 80183a4:	200a      	movs	r0, #10
 80183a6:	f7e9 f81d 	bl	80013e4 <HAL_Delay>

  ST7735_SetRotation(ST7735_ROTATION);
 80183aa:	2000      	movs	r0, #0
 80183ac:	f7ff fec6 	bl	801813c <ST7735_SetRotation>
  ST7735_FillScreen(WHITE);
 80183b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80183b4:	f000 f8b1 	bl	801851a <ST7735_FillScreen>
}
 80183b8:	bf00      	nop
 80183ba:	bd80      	pop	{r7, pc}

080183bc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80183bc:	b590      	push	{r4, r7, lr}
 80183be:	b083      	sub	sp, #12
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	4604      	mov	r4, r0
 80183c4:	4608      	mov	r0, r1
 80183c6:	4611      	mov	r1, r2
 80183c8:	461a      	mov	r2, r3
 80183ca:	4623      	mov	r3, r4
 80183cc:	71fb      	strb	r3, [r7, #7]
 80183ce:	4603      	mov	r3, r0
 80183d0:	71bb      	strb	r3, [r7, #6]
 80183d2:	460b      	mov	r3, r1
 80183d4:	717b      	strb	r3, [r7, #5]
 80183d6:	4613      	mov	r3, r2
 80183d8:	713b      	strb	r3, [r7, #4]
  y0 += ST7735_YSTART;

  x1 += ST7735_XSTART;
  y1 += ST7735_YSTART;

  ST7735_WriteCommand(ST7735_CASET);
 80183da:	202a      	movs	r0, #42	; 0x2a
 80183dc:	f7ff fe36 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 80183e0:	2000      	movs	r0, #0
 80183e2:	f7ff fe5b 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(x0 + ST7735_XSTART);
 80183e6:	79fb      	ldrb	r3, [r7, #7]
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7ff fe57 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x00);
 80183ee:	2000      	movs	r0, #0
 80183f0:	f7ff fe54 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(x1 + ST7735_XSTART);
 80183f4:	797b      	ldrb	r3, [r7, #5]
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7ff fe50 	bl	801809c <ST7735_WriteData>

  ST7735_WriteCommand(ST7735_RASET);
 80183fc:	202b      	movs	r0, #43	; 0x2b
 80183fe:	f7ff fe25 	bl	801804c <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 8018402:	2000      	movs	r0, #0
 8018404:	f7ff fe4a 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(y0 + ST7735_YSTART);
 8018408:	79bb      	ldrb	r3, [r7, #6]
 801840a:	4618      	mov	r0, r3
 801840c:	f7ff fe46 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(0x00);
 8018410:	2000      	movs	r0, #0
 8018412:	f7ff fe43 	bl	801809c <ST7735_WriteData>
  ST7735_WriteData(y1 + ST7735_YSTART);
 8018416:	793b      	ldrb	r3, [r7, #4]
 8018418:	4618      	mov	r0, r3
 801841a:	f7ff fe3f 	bl	801809c <ST7735_WriteData>
}
 801841e:	bf00      	nop
 8018420:	370c      	adds	r7, #12
 8018422:	46bd      	mov	sp, r7
 8018424:	bd90      	pop	{r4, r7, pc}

08018426 <ST7735_DrawRectangle>:

void ST7735_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8018426:	b590      	push	{r4, r7, lr}
 8018428:	b085      	sub	sp, #20
 801842a:	af00      	add	r7, sp, #0
 801842c:	4604      	mov	r4, r0
 801842e:	4608      	mov	r0, r1
 8018430:	4611      	mov	r1, r2
 8018432:	461a      	mov	r2, r3
 8018434:	4623      	mov	r3, r4
 8018436:	80fb      	strh	r3, [r7, #6]
 8018438:	4603      	mov	r3, r0
 801843a:	80bb      	strh	r3, [r7, #4]
 801843c:	460b      	mov	r3, r1
 801843e:	807b      	strh	r3, [r7, #2]
 8018440:	4613      	mov	r3, r2
 8018442:	803b      	strh	r3, [r7, #0]
  ST7735_SetAddressWindow(x, y, x + width - 1, y + height - 1);
 8018444:	88fb      	ldrh	r3, [r7, #6]
 8018446:	b2d8      	uxtb	r0, r3
 8018448:	88bb      	ldrh	r3, [r7, #4]
 801844a:	b2d9      	uxtb	r1, r3
 801844c:	88fb      	ldrh	r3, [r7, #6]
 801844e:	b2da      	uxtb	r2, r3
 8018450:	887b      	ldrh	r3, [r7, #2]
 8018452:	b2db      	uxtb	r3, r3
 8018454:	4413      	add	r3, r2
 8018456:	b2db      	uxtb	r3, r3
 8018458:	3b01      	subs	r3, #1
 801845a:	b2dc      	uxtb	r4, r3
 801845c:	88bb      	ldrh	r3, [r7, #4]
 801845e:	b2da      	uxtb	r2, r3
 8018460:	883b      	ldrh	r3, [r7, #0]
 8018462:	b2db      	uxtb	r3, r3
 8018464:	4413      	add	r3, r2
 8018466:	b2db      	uxtb	r3, r3
 8018468:	3b01      	subs	r3, #1
 801846a:	b2db      	uxtb	r3, r3
 801846c:	4622      	mov	r2, r4
 801846e:	f7ff ffa5 	bl	80183bc <ST7735_SetAddressWindow>
  ST7735_WriteCommand(ST7735_RAMWR);
 8018472:	202c      	movs	r0, #44	; 0x2c
 8018474:	f7ff fdea 	bl	801804c <ST7735_WriteCommand>
  // Write the color data
  for (uint16_t i = 0; i < width * height; i++)
 8018478:	2300      	movs	r3, #0
 801847a:	81fb      	strh	r3, [r7, #14]
 801847c:	e00e      	b.n	801849c <ST7735_DrawRectangle+0x76>
  {
    ST7735_WriteData(color >> 8);
 801847e:	8c3b      	ldrh	r3, [r7, #32]
 8018480:	0a1b      	lsrs	r3, r3, #8
 8018482:	b29b      	uxth	r3, r3
 8018484:	b2db      	uxtb	r3, r3
 8018486:	4618      	mov	r0, r3
 8018488:	f7ff fe08 	bl	801809c <ST7735_WriteData>
    ST7735_WriteData(color & 0xFF);
 801848c:	8c3b      	ldrh	r3, [r7, #32]
 801848e:	b2db      	uxtb	r3, r3
 8018490:	4618      	mov	r0, r3
 8018492:	f7ff fe03 	bl	801809c <ST7735_WriteData>
  for (uint16_t i = 0; i < width * height; i++)
 8018496:	89fb      	ldrh	r3, [r7, #14]
 8018498:	3301      	adds	r3, #1
 801849a:	81fb      	strh	r3, [r7, #14]
 801849c:	89fa      	ldrh	r2, [r7, #14]
 801849e:	887b      	ldrh	r3, [r7, #2]
 80184a0:	8839      	ldrh	r1, [r7, #0]
 80184a2:	fb01 f303 	mul.w	r3, r1, r3
 80184a6:	429a      	cmp	r2, r3
 80184a8:	dbe9      	blt.n	801847e <ST7735_DrawRectangle+0x58>
  }
}
 80184aa:	bf00      	nop
 80184ac:	bf00      	nop
 80184ae:	3714      	adds	r7, #20
 80184b0:	46bd      	mov	sp, r7
 80184b2:	bd90      	pop	{r4, r7, pc}

080184b4 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b084      	sub	sp, #16
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	4603      	mov	r3, r0
 80184bc:	80fb      	strh	r3, [r7, #6]
 80184be:	460b      	mov	r3, r1
 80184c0:	80bb      	strh	r3, [r7, #4]
 80184c2:	4613      	mov	r3, r2
 80184c4:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 80184c6:	88fb      	ldrh	r3, [r7, #6]
 80184c8:	2b7f      	cmp	r3, #127	; 0x7f
 80184ca:	d822      	bhi.n	8018512 <ST7735_DrawPixel+0x5e>
 80184cc:	88bb      	ldrh	r3, [r7, #4]
 80184ce:	2b9f      	cmp	r3, #159	; 0x9f
 80184d0:	d81f      	bhi.n	8018512 <ST7735_DrawPixel+0x5e>
        return;

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80184d2:	88fb      	ldrh	r3, [r7, #6]
 80184d4:	b2d8      	uxtb	r0, r3
 80184d6:	88bb      	ldrh	r3, [r7, #4]
 80184d8:	b2d9      	uxtb	r1, r3
 80184da:	88fb      	ldrh	r3, [r7, #6]
 80184dc:	b2db      	uxtb	r3, r3
 80184de:	3301      	adds	r3, #1
 80184e0:	b2da      	uxtb	r2, r3
 80184e2:	88bb      	ldrh	r3, [r7, #4]
 80184e4:	b2db      	uxtb	r3, r3
 80184e6:	3301      	adds	r3, #1
 80184e8:	b2db      	uxtb	r3, r3
 80184ea:	f7ff ff67 	bl	80183bc <ST7735_SetAddressWindow>
    ST7735_WriteCommand(ST7735_RAMWR);
 80184ee:	202c      	movs	r0, #44	; 0x2c
 80184f0:	f7ff fdac 	bl	801804c <ST7735_WriteCommand>
	data[0] = color >> 8;
 80184f4:	887b      	ldrh	r3, [r7, #2]
 80184f6:	0a1b      	lsrs	r3, r3, #8
 80184f8:	b29b      	uxth	r3, r3
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	733b      	strb	r3, [r7, #12]
	data[1] = color & 0xFF;
 80184fe:	887b      	ldrh	r3, [r7, #2]
 8018500:	b2db      	uxtb	r3, r3
 8018502:	737b      	strb	r3, [r7, #13]
	ST7735_WriteBuf(data,2);
 8018504:	f107 030c 	add.w	r3, r7, #12
 8018508:	2102      	movs	r1, #2
 801850a:	4618      	mov	r0, r3
 801850c:	f7ff fdee 	bl	80180ec <ST7735_WriteBuf>
 8018510:	e000      	b.n	8018514 <ST7735_DrawPixel+0x60>
        return;
 8018512:	bf00      	nop

}
 8018514:	3710      	adds	r7, #16
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}

0801851a <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 801851a:	b580      	push	{r7, lr}
 801851c:	b084      	sub	sp, #16
 801851e:	af02      	add	r7, sp, #8
 8018520:	4603      	mov	r3, r0
 8018522:	80fb      	strh	r3, [r7, #6]
  ST7735_DrawRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8018524:	88fb      	ldrh	r3, [r7, #6]
 8018526:	9300      	str	r3, [sp, #0]
 8018528:	23a0      	movs	r3, #160	; 0xa0
 801852a:	2280      	movs	r2, #128	; 0x80
 801852c:	2100      	movs	r1, #0
 801852e:	2000      	movs	r0, #0
 8018530:	f7ff ff79 	bl	8018426 <ST7735_DrawRectangle>
}
 8018534:	bf00      	nop
 8018536:	3708      	adds	r7, #8
 8018538:	46bd      	mov	sp, r7
 801853a:	bd80      	pop	{r7, pc}

0801853c <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t width, uint16_t height,  uint16_t *image)
{
 801853c:	b5b0      	push	{r4, r5, r7, lr}
 801853e:	f5ad 4d20 	sub.w	sp, sp, #40960	; 0xa000
 8018542:	b084      	sub	sp, #16
 8018544:	af00      	add	r7, sp, #0
 8018546:	4605      	mov	r5, r0
 8018548:	460c      	mov	r4, r1
 801854a:	4610      	mov	r0, r2
 801854c:	4619      	mov	r1, r3
 801854e:	f107 0310 	add.w	r3, r7, #16
 8018552:	462a      	mov	r2, r5
 8018554:	f823 2c0a 	strh.w	r2, [r3, #-10]
 8018558:	f107 0310 	add.w	r3, r7, #16
 801855c:	4622      	mov	r2, r4
 801855e:	f823 2c0c 	strh.w	r2, [r3, #-12]
 8018562:	f107 0310 	add.w	r3, r7, #16
 8018566:	4602      	mov	r2, r0
 8018568:	f823 2c0e 	strh.w	r2, [r3, #-14]
 801856c:	f107 0310 	add.w	r3, r7, #16
 8018570:	460a      	mov	r2, r1
 8018572:	f823 2c10 	strh.w	r2, [r3, #-16]
  uint8_t frame_tmp[160*128*2] = {0};
 8018576:	f107 0310 	add.w	r3, r7, #16
 801857a:	461a      	mov	r2, r3
 801857c:	2300      	movs	r3, #0
 801857e:	f842 3c04 	str.w	r3, [r2, #-4]
 8018582:	4610      	mov	r0, r2
 8018584:	f649 73fc 	movw	r3, #40956	; 0x9ffc
 8018588:	461a      	mov	r2, r3
 801858a:	2100      	movs	r1, #0
 801858c:	f002 fdbe 	bl	801b10c <memset>

   //大小端数据转换
    for (uint32_t i = 0; i < width * height; i++)
 8018590:	2300      	movs	r3, #0
 8018592:	f24a 020c 	movw	r2, #40972	; 0xa00c
 8018596:	443a      	add	r2, r7
 8018598:	6013      	str	r3, [r2, #0]
 801859a:	e037      	b.n	801860c <ST7735_DrawImage+0xd0>
    {
    	frame_tmp[2*i] = (image[i] >> 8);
 801859c:	f24a 030c 	movw	r3, #40972	; 0xa00c
 80185a0:	443b      	add	r3, r7
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	005b      	lsls	r3, r3, #1
 80185a6:	f24a 0220 	movw	r2, #40992	; 0xa020
 80185aa:	443a      	add	r2, r7
 80185ac:	6812      	ldr	r2, [r2, #0]
 80185ae:	4413      	add	r3, r2
 80185b0:	881b      	ldrh	r3, [r3, #0]
 80185b2:	0a1b      	lsrs	r3, r3, #8
 80185b4:	b29a      	uxth	r2, r3
 80185b6:	f24a 030c 	movw	r3, #40972	; 0xa00c
 80185ba:	443b      	add	r3, r7
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	005b      	lsls	r3, r3, #1
 80185c0:	b2d2      	uxtb	r2, r2
 80185c2:	f107 0110 	add.w	r1, r7, #16
 80185c6:	440b      	add	r3, r1
 80185c8:	f803 2c04 	strb.w	r2, [r3, #-4]
    	frame_tmp[2*i+1] =(image[i] & 0xFF);
 80185cc:	f24a 030c 	movw	r3, #40972	; 0xa00c
 80185d0:	443b      	add	r3, r7
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	005b      	lsls	r3, r3, #1
 80185d6:	f24a 0220 	movw	r2, #40992	; 0xa020
 80185da:	443a      	add	r2, r7
 80185dc:	6812      	ldr	r2, [r2, #0]
 80185de:	4413      	add	r3, r2
 80185e0:	881a      	ldrh	r2, [r3, #0]
 80185e2:	f24a 030c 	movw	r3, #40972	; 0xa00c
 80185e6:	443b      	add	r3, r7
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	005b      	lsls	r3, r3, #1
 80185ec:	3301      	adds	r3, #1
 80185ee:	b2d2      	uxtb	r2, r2
 80185f0:	f107 0110 	add.w	r1, r7, #16
 80185f4:	440b      	add	r3, r1
 80185f6:	f803 2c04 	strb.w	r2, [r3, #-4]
    for (uint32_t i = 0; i < width * height; i++)
 80185fa:	f24a 030c 	movw	r3, #40972	; 0xa00c
 80185fe:	443b      	add	r3, r7
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	3301      	adds	r3, #1
 8018604:	f24a 020c 	movw	r2, #40972	; 0xa00c
 8018608:	443a      	add	r2, r7
 801860a:	6013      	str	r3, [r2, #0]
 801860c:	f107 0310 	add.w	r3, r7, #16
 8018610:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 8018614:	f107 0210 	add.w	r2, r7, #16
 8018618:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 801861c:	fb02 f303 	mul.w	r3, r2, r3
 8018620:	461a      	mov	r2, r3
 8018622:	f24a 030c 	movw	r3, #40972	; 0xa00c
 8018626:	443b      	add	r3, r7
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	4293      	cmp	r3, r2
 801862c:	d3b6      	bcc.n	801859c <ST7735_DrawImage+0x60>
    }
    ST7735_SetAddressWindow(x, y, x + width - 1, y + height - 1);
 801862e:	f107 0310 	add.w	r3, r7, #16
 8018632:	f833 3c0a 	ldrh.w	r3, [r3, #-10]
 8018636:	b2d8      	uxtb	r0, r3
 8018638:	f107 0310 	add.w	r3, r7, #16
 801863c:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8018640:	b2d9      	uxtb	r1, r3
 8018642:	f107 0310 	add.w	r3, r7, #16
 8018646:	f833 3c0a 	ldrh.w	r3, [r3, #-10]
 801864a:	b2da      	uxtb	r2, r3
 801864c:	f107 0310 	add.w	r3, r7, #16
 8018650:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 8018654:	b2db      	uxtb	r3, r3
 8018656:	4413      	add	r3, r2
 8018658:	b2db      	uxtb	r3, r3
 801865a:	3b01      	subs	r3, #1
 801865c:	b2dc      	uxtb	r4, r3
 801865e:	f107 0310 	add.w	r3, r7, #16
 8018662:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8018666:	b2da      	uxtb	r2, r3
 8018668:	f107 0310 	add.w	r3, r7, #16
 801866c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8018670:	b2db      	uxtb	r3, r3
 8018672:	4413      	add	r3, r2
 8018674:	b2db      	uxtb	r3, r3
 8018676:	3b01      	subs	r3, #1
 8018678:	b2db      	uxtb	r3, r3
 801867a:	4622      	mov	r2, r4
 801867c:	f7ff fe9e 	bl	80183bc <ST7735_SetAddressWindow>

    ST7735_WriteCommand(ST7735_RAMWR);
 8018680:	202c      	movs	r0, #44	; 0x2c
 8018682:	f7ff fce3 	bl	801804c <ST7735_WriteCommand>
    ST7735_WriteBuf((uint8_t*)frame_tmp,width*height*2);
 8018686:	f107 0310 	add.w	r3, r7, #16
 801868a:	461a      	mov	r2, r3
 801868c:	f107 0310 	add.w	r3, r7, #16
 8018690:	f832 2c0e 	ldrh.w	r2, [r2, #-14]
 8018694:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8018698:	fb12 f303 	smulbb	r3, r2, r3
 801869c:	b29b      	uxth	r3, r3
 801869e:	005b      	lsls	r3, r3, #1
 80186a0:	b29a      	uxth	r2, r3
 80186a2:	4b08      	ldr	r3, [pc, #32]	; (80186c4 <ST7735_DrawImage+0x188>)
 80186a4:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80186a8:	f103 0310 	add.w	r3, r3, #16
 80186ac:	443b      	add	r3, r7
 80186ae:	4611      	mov	r1, r2
 80186b0:	4618      	mov	r0, r3
 80186b2:	f7ff fd1b 	bl	80180ec <ST7735_WriteBuf>

}
 80186b6:	bf00      	nop
 80186b8:	f507 4720 	add.w	r7, r7, #40960	; 0xa000
 80186bc:	3710      	adds	r7, #16
 80186be:	46bd      	mov	sp, r7
 80186c0:	bdb0      	pop	{r4, r5, r7, pc}
 80186c2:	bf00      	nop
 80186c4:	ffff5ffc 	.word	0xffff5ffc

080186c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  /* USER CODE END USB_DEVICE_Init_PreTreatment usbCmpsitFS_Desc*/

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80186cc:	2200      	movs	r2, #0
 80186ce:	491e      	ldr	r1, [pc, #120]	; (8018748 <MX_USB_DEVICE_Init+0x80>)
 80186d0:	481e      	ldr	r0, [pc, #120]	; (801874c <MX_USB_DEVICE_Init+0x84>)
 80186d2:	f7fa f9d4 	bl	8012a7e <USBD_Init>
 80186d6:	4603      	mov	r3, r0
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d001      	beq.n	80186e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80186dc:	f7e8 fa64 	bl	8000ba8 <Error_Handler>
  }

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80186e0:	491b      	ldr	r1, [pc, #108]	; (8018750 <MX_USB_DEVICE_Init+0x88>)
 80186e2:	481a      	ldr	r0, [pc, #104]	; (801874c <MX_USB_DEVICE_Init+0x84>)
 80186e4:	f7f7 fd7d 	bl	80101e2 <USBD_CDC_RegisterInterface>
 80186e8:	4603      	mov	r3, r0
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d001      	beq.n	80186f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80186ee:	f7e8 fa5b 	bl	8000ba8 <Error_Handler>
  }

  if(USBD_RegisterClassComposite(&hUsbDeviceFS, &USBD_CDC,CLASS_TYPE_CDC,0) != USBD_OK)
 80186f2:	2300      	movs	r3, #0
 80186f4:	2202      	movs	r2, #2
 80186f6:	4917      	ldr	r1, [pc, #92]	; (8018754 <MX_USB_DEVICE_Init+0x8c>)
 80186f8:	4814      	ldr	r0, [pc, #80]	; (801874c <MX_USB_DEVICE_Init+0x84>)
 80186fa:	f7fa fa11 	bl	8012b20 <USBD_RegisterClassComposite>
 80186fe:	4603      	mov	r3, r0
 8018700:	2b00      	cmp	r3, #0
 8018702:	d001      	beq.n	8018708 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8018704:	f7e8 fa50 	bl	8000ba8 <Error_Handler>
  }

  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8018708:	4913      	ldr	r1, [pc, #76]	; (8018758 <MX_USB_DEVICE_Init+0x90>)
 801870a:	4810      	ldr	r0, [pc, #64]	; (801874c <MX_USB_DEVICE_Init+0x84>)
 801870c:	f7f8 faa6 	bl	8010c5c <USBD_MSC_RegisterStorage>
 8018710:	4603      	mov	r3, r0
 8018712:	2b00      	cmp	r3, #0
 8018714:	d001      	beq.n	801871a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8018716:	f7e8 fa47 	bl	8000ba8 <Error_Handler>
  }

  if(USBD_RegisterClassComposite(&hUsbDeviceFS, &USBD_MSC,CLASS_TYPE_MSC,0) != USBD_OK)
 801871a:	2300      	movs	r3, #0
 801871c:	2203      	movs	r2, #3
 801871e:	490f      	ldr	r1, [pc, #60]	; (801875c <MX_USB_DEVICE_Init+0x94>)
 8018720:	480a      	ldr	r0, [pc, #40]	; (801874c <MX_USB_DEVICE_Init+0x84>)
 8018722:	f7fa f9fd 	bl	8012b20 <USBD_RegisterClassComposite>
 8018726:	4603      	mov	r3, r0
 8018728:	2b00      	cmp	r3, #0
 801872a:	d001      	beq.n	8018730 <MX_USB_DEVICE_Init+0x68>
  {
    Error_Handler();
 801872c:	f7e8 fa3c 	bl	8000ba8 <Error_Handler>
  }

  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018730:	4806      	ldr	r0, [pc, #24]	; (801874c <MX_USB_DEVICE_Init+0x84>)
 8018732:	f7fa fa51 	bl	8012bd8 <USBD_Start>
 8018736:	4603      	mov	r3, r0
 8018738:	2b00      	cmp	r3, #0
 801873a:	d001      	beq.n	8018740 <MX_USB_DEVICE_Init+0x78>
  {
    Error_Handler();
 801873c:	f7e8 fa34 	bl	8000ba8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018740:	f7ef f8dc 	bl	80078fc <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018744:	bf00      	nop
 8018746:	bd80      	pop	{r7, pc}
 8018748:	240001c0 	.word	0x240001c0
 801874c:	24001088 	.word	0x24001088
 8018750:	240001ac 	.word	0x240001ac
 8018754:	24000024 	.word	0x24000024
 8018758:	24000214 	.word	0x24000214
 801875c:	24000114 	.word	0x24000114

08018760 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b082      	sub	sp, #8
 8018764:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
  return (USBD_OK);
#else
  USBD_HandleTypeDef *pdev = &hUsbDeviceFS;
 8018766:	4b0b      	ldr	r3, [pc, #44]	; (8018794 <CDC_Init_FS+0x34>)
 8018768:	607b      	str	r3, [r7, #4]
  uint8_t idx = USBD_CoreFindEP(pdev, CDC_IN_EP);
 801876a:	2181      	movs	r1, #129	; 0x81
 801876c:	6878      	ldr	r0, [r7, #4]
 801876e:	f7fa fe72 	bl	8013456 <USBD_CoreFindEP>
 8018772:	4603      	mov	r3, r0
 8018774:	70fb      	strb	r3, [r7, #3]
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0,idx);
 8018776:	78fb      	ldrb	r3, [r7, #3]
 8018778:	2200      	movs	r2, #0
 801877a:	4907      	ldr	r1, [pc, #28]	; (8018798 <CDC_Init_FS+0x38>)
 801877c:	4805      	ldr	r0, [pc, #20]	; (8018794 <CDC_Init_FS+0x34>)
 801877e:	f7f7 fd4a 	bl	8010216 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018782:	4906      	ldr	r1, [pc, #24]	; (801879c <CDC_Init_FS+0x3c>)
 8018784:	4803      	ldr	r0, [pc, #12]	; (8018794 <CDC_Init_FS+0x34>)
 8018786:	f7f7 fd68 	bl	801025a <USBD_CDC_SetRxBuffer>
#endif
return (USBD_OK);
 801878a:	2300      	movs	r3, #0


  /* USER CODE END 3 */
}
 801878c:	4618      	mov	r0, r3
 801878e:	3708      	adds	r7, #8
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}
 8018794:	24001088 	.word	0x24001088
 8018798:	24001c68 	.word	0x24001c68
 801879c:	24001468 	.word	0x24001468

080187a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80187a0:	b480      	push	{r7}
 80187a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80187a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80187a6:	4618      	mov	r0, r3
 80187a8:	46bd      	mov	sp, r7
 80187aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ae:	4770      	bx	lr

080187b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80187b0:	b480      	push	{r7}
 80187b2:	b083      	sub	sp, #12
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	4603      	mov	r3, r0
 80187b8:	6039      	str	r1, [r7, #0]
 80187ba:	71fb      	strb	r3, [r7, #7]
 80187bc:	4613      	mov	r3, r2
 80187be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80187c0:	79fb      	ldrb	r3, [r7, #7]
 80187c2:	2b23      	cmp	r3, #35	; 0x23
 80187c4:	d84a      	bhi.n	801885c <CDC_Control_FS+0xac>
 80187c6:	a201      	add	r2, pc, #4	; (adr r2, 80187cc <CDC_Control_FS+0x1c>)
 80187c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187cc:	0801885d 	.word	0x0801885d
 80187d0:	0801885d 	.word	0x0801885d
 80187d4:	0801885d 	.word	0x0801885d
 80187d8:	0801885d 	.word	0x0801885d
 80187dc:	0801885d 	.word	0x0801885d
 80187e0:	0801885d 	.word	0x0801885d
 80187e4:	0801885d 	.word	0x0801885d
 80187e8:	0801885d 	.word	0x0801885d
 80187ec:	0801885d 	.word	0x0801885d
 80187f0:	0801885d 	.word	0x0801885d
 80187f4:	0801885d 	.word	0x0801885d
 80187f8:	0801885d 	.word	0x0801885d
 80187fc:	0801885d 	.word	0x0801885d
 8018800:	0801885d 	.word	0x0801885d
 8018804:	0801885d 	.word	0x0801885d
 8018808:	0801885d 	.word	0x0801885d
 801880c:	0801885d 	.word	0x0801885d
 8018810:	0801885d 	.word	0x0801885d
 8018814:	0801885d 	.word	0x0801885d
 8018818:	0801885d 	.word	0x0801885d
 801881c:	0801885d 	.word	0x0801885d
 8018820:	0801885d 	.word	0x0801885d
 8018824:	0801885d 	.word	0x0801885d
 8018828:	0801885d 	.word	0x0801885d
 801882c:	0801885d 	.word	0x0801885d
 8018830:	0801885d 	.word	0x0801885d
 8018834:	0801885d 	.word	0x0801885d
 8018838:	0801885d 	.word	0x0801885d
 801883c:	0801885d 	.word	0x0801885d
 8018840:	0801885d 	.word	0x0801885d
 8018844:	0801885d 	.word	0x0801885d
 8018848:	0801885d 	.word	0x0801885d
 801884c:	0801885d 	.word	0x0801885d
 8018850:	0801885d 	.word	0x0801885d
 8018854:	0801885d 	.word	0x0801885d
 8018858:	0801885d 	.word	0x0801885d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801885c:	bf00      	nop
  }

  return (USBD_OK);
 801885e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018860:	4618      	mov	r0, r3
 8018862:	370c      	adds	r7, #12
 8018864:	46bd      	mov	sp, r7
 8018866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801886a:	4770      	bx	lr

0801886c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b082      	sub	sp, #8
 8018870:	af00      	add	r7, sp, #0
 8018872:	6078      	str	r0, [r7, #4]
 8018874:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018876:	6879      	ldr	r1, [r7, #4]
 8018878:	4808      	ldr	r0, [pc, #32]	; (801889c <CDC_Receive_FS+0x30>)
 801887a:	f7f7 fcee 	bl	801025a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801887e:	4807      	ldr	r0, [pc, #28]	; (801889c <CDC_Receive_FS+0x30>)
 8018880:	f7f7 fd54 	bl	801032c <USBD_CDC_ReceivePacket>

  CDC_Transmit_FS(Buf, *Len);  //测试接收使用，将接收到的数据转发回去
 8018884:	683b      	ldr	r3, [r7, #0]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	b29b      	uxth	r3, r3
 801888a:	4619      	mov	r1, r3
 801888c:	6878      	ldr	r0, [r7, #4]
 801888e:	f000 f807 	bl	80188a0 <CDC_Transmit_FS>

  return (USBD_OK);
 8018892:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018894:	4618      	mov	r0, r3
 8018896:	3708      	adds	r7, #8
 8018898:	46bd      	mov	sp, r7
 801889a:	bd80      	pop	{r7, pc}
 801889c:	24001088 	.word	0x24001088

080188a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b086      	sub	sp, #24
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
 80188a8:	460b      	mov	r3, r1
 80188aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80188ac:	2300      	movs	r3, #0
 80188ae:	75fb      	strb	r3, [r7, #23]
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);

#else
  USBD_HandleTypeDef *pdev = &hUsbDeviceFS;
 80188b0:	4b19      	ldr	r3, [pc, #100]	; (8018918 <CDC_Transmit_FS+0x78>)
 80188b2:	613b      	str	r3, [r7, #16]
  uint8_t idx = USBD_CoreFindEP(pdev, CDC_IN_EP);
 80188b4:	2181      	movs	r1, #129	; 0x81
 80188b6:	6938      	ldr	r0, [r7, #16]
 80188b8:	f7fa fdcd 	bl	8013456 <USBD_CoreFindEP>
 80188bc:	4603      	mov	r3, r0
 80188be:	73fb      	strb	r3, [r7, #15]
  if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80188c0:	7bfb      	ldrb	r3, [r7, #15]
 80188c2:	2bff      	cmp	r3, #255	; 0xff
 80188c4:	d023      	beq.n	801890e <CDC_Transmit_FS+0x6e>
 80188c6:	7bfb      	ldrb	r3, [r7, #15]
 80188c8:	2b03      	cmp	r3, #3
 80188ca:	d820      	bhi.n	801890e <CDC_Transmit_FS+0x6e>
      {
        pdev->classId = idx;
 80188cc:	7bfa      	ldrb	r2, [r7, #15]
 80188ce:	693b      	ldr	r3, [r7, #16]
 80188d0:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

        USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassDataCmsit[pdev->classId];
 80188d4:	693b      	ldr	r3, [r7, #16]
 80188d6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80188da:	4a0f      	ldr	r2, [pc, #60]	; (8018918 <CDC_Transmit_FS+0x78>)
 80188dc:	33b2      	adds	r3, #178	; 0xb2
 80188de:	009b      	lsls	r3, r3, #2
 80188e0:	4413      	add	r3, r2
 80188e2:	685b      	ldr	r3, [r3, #4]
 80188e4:	60bb      	str	r3, [r7, #8]
        if (hcdc->TxState != 0)
 80188e6:	68bb      	ldr	r3, [r7, #8]
 80188e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d001      	beq.n	80188f4 <CDC_Transmit_FS+0x54>
        {
          return USBD_BUSY;
 80188f0:	2301      	movs	r3, #1
 80188f2:	e00d      	b.n	8018910 <CDC_Transmit_FS+0x70>
        }
        USBD_CDC_SetTxBuffer(pdev, Buf, Len, idx);
 80188f4:	887a      	ldrh	r2, [r7, #2]
 80188f6:	7bfb      	ldrb	r3, [r7, #15]
 80188f8:	6879      	ldr	r1, [r7, #4]
 80188fa:	6938      	ldr	r0, [r7, #16]
 80188fc:	f7f7 fc8b 	bl	8010216 <USBD_CDC_SetTxBuffer>
        result = USBD_CDC_TransmitPacket(pdev,idx);
 8018900:	7bfb      	ldrb	r3, [r7, #15]
 8018902:	4619      	mov	r1, r3
 8018904:	6938      	ldr	r0, [r7, #16]
 8018906:	f7f7 fcc7 	bl	8010298 <USBD_CDC_TransmitPacket>
 801890a:	4603      	mov	r3, r0
 801890c:	75fb      	strb	r3, [r7, #23]
      }
#endif
  /* USER CODE END 7 */
  return result;
 801890e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018910:	4618      	mov	r0, r3
 8018912:	3718      	adds	r7, #24
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}
 8018918:	24001088 	.word	0x24001088

0801891c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801891c:	b480      	push	{r7}
 801891e:	b087      	sub	sp, #28
 8018920:	af00      	add	r7, sp, #0
 8018922:	60f8      	str	r0, [r7, #12]
 8018924:	60b9      	str	r1, [r7, #8]
 8018926:	4613      	mov	r3, r2
 8018928:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801892a:	2300      	movs	r3, #0
 801892c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801892e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018932:	4618      	mov	r0, r3
 8018934:	371c      	adds	r7, #28
 8018936:	46bd      	mov	sp, r7
 8018938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893c:	4770      	bx	lr
	...

08018940 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018940:	b480      	push	{r7}
 8018942:	b083      	sub	sp, #12
 8018944:	af00      	add	r7, sp, #0
 8018946:	4603      	mov	r3, r0
 8018948:	6039      	str	r1, [r7, #0]
 801894a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	2212      	movs	r2, #18
 8018950:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018952:	4b03      	ldr	r3, [pc, #12]	; (8018960 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018954:	4618      	mov	r0, r3
 8018956:	370c      	adds	r7, #12
 8018958:	46bd      	mov	sp, r7
 801895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895e:	4770      	bx	lr
 8018960:	240001e0 	.word	0x240001e0

08018964 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018964:	b480      	push	{r7}
 8018966:	b083      	sub	sp, #12
 8018968:	af00      	add	r7, sp, #0
 801896a:	4603      	mov	r3, r0
 801896c:	6039      	str	r1, [r7, #0]
 801896e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018970:	683b      	ldr	r3, [r7, #0]
 8018972:	2204      	movs	r2, #4
 8018974:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018976:	4b03      	ldr	r3, [pc, #12]	; (8018984 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018978:	4618      	mov	r0, r3
 801897a:	370c      	adds	r7, #12
 801897c:	46bd      	mov	sp, r7
 801897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018982:	4770      	bx	lr
 8018984:	240001f4 	.word	0x240001f4

08018988 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018988:	b580      	push	{r7, lr}
 801898a:	b082      	sub	sp, #8
 801898c:	af00      	add	r7, sp, #0
 801898e:	4603      	mov	r3, r0
 8018990:	6039      	str	r1, [r7, #0]
 8018992:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018994:	79fb      	ldrb	r3, [r7, #7]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d105      	bne.n	80189a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801899a:	683a      	ldr	r2, [r7, #0]
 801899c:	4907      	ldr	r1, [pc, #28]	; (80189bc <USBD_FS_ProductStrDescriptor+0x34>)
 801899e:	4808      	ldr	r0, [pc, #32]	; (80189c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80189a0:	f7fb fc5e 	bl	8014260 <USBD_GetString>
 80189a4:	e004      	b.n	80189b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80189a6:	683a      	ldr	r2, [r7, #0]
 80189a8:	4904      	ldr	r1, [pc, #16]	; (80189bc <USBD_FS_ProductStrDescriptor+0x34>)
 80189aa:	4805      	ldr	r0, [pc, #20]	; (80189c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80189ac:	f7fb fc58 	bl	8014260 <USBD_GetString>
  }
  return USBD_StrDesc;
 80189b0:	4b02      	ldr	r3, [pc, #8]	; (80189bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80189b2:	4618      	mov	r0, r3
 80189b4:	3708      	adds	r7, #8
 80189b6:	46bd      	mov	sp, r7
 80189b8:	bd80      	pop	{r7, pc}
 80189ba:	bf00      	nop
 80189bc:	24002468 	.word	0x24002468
 80189c0:	0801bc58 	.word	0x0801bc58

080189c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b082      	sub	sp, #8
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	4603      	mov	r3, r0
 80189cc:	6039      	str	r1, [r7, #0]
 80189ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80189d0:	683a      	ldr	r2, [r7, #0]
 80189d2:	4904      	ldr	r1, [pc, #16]	; (80189e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80189d4:	4804      	ldr	r0, [pc, #16]	; (80189e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80189d6:	f7fb fc43 	bl	8014260 <USBD_GetString>
  return USBD_StrDesc;
 80189da:	4b02      	ldr	r3, [pc, #8]	; (80189e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80189dc:	4618      	mov	r0, r3
 80189de:	3708      	adds	r7, #8
 80189e0:	46bd      	mov	sp, r7
 80189e2:	bd80      	pop	{r7, pc}
 80189e4:	24002468 	.word	0x24002468
 80189e8:	0801bc6c 	.word	0x0801bc6c

080189ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b082      	sub	sp, #8
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	4603      	mov	r3, r0
 80189f4:	6039      	str	r1, [r7, #0]
 80189f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80189f8:	683b      	ldr	r3, [r7, #0]
 80189fa:	221a      	movs	r2, #26
 80189fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80189fe:	f000 f843 	bl	8018a88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018a02:	4b02      	ldr	r3, [pc, #8]	; (8018a0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018a04:	4618      	mov	r0, r3
 8018a06:	3708      	adds	r7, #8
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	bd80      	pop	{r7, pc}
 8018a0c:	240001f8 	.word	0x240001f8

08018a10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	4603      	mov	r3, r0
 8018a18:	6039      	str	r1, [r7, #0]
 8018a1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018a1c:	79fb      	ldrb	r3, [r7, #7]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d105      	bne.n	8018a2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018a22:	683a      	ldr	r2, [r7, #0]
 8018a24:	4907      	ldr	r1, [pc, #28]	; (8018a44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018a26:	4808      	ldr	r0, [pc, #32]	; (8018a48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018a28:	f7fb fc1a 	bl	8014260 <USBD_GetString>
 8018a2c:	e004      	b.n	8018a38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018a2e:	683a      	ldr	r2, [r7, #0]
 8018a30:	4904      	ldr	r1, [pc, #16]	; (8018a44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018a32:	4805      	ldr	r0, [pc, #20]	; (8018a48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018a34:	f7fb fc14 	bl	8014260 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a38:	4b02      	ldr	r3, [pc, #8]	; (8018a44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	3708      	adds	r7, #8
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}
 8018a42:	bf00      	nop
 8018a44:	24002468 	.word	0x24002468
 8018a48:	0801bc80 	.word	0x0801bc80

08018a4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b082      	sub	sp, #8
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	4603      	mov	r3, r0
 8018a54:	6039      	str	r1, [r7, #0]
 8018a56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a58:	79fb      	ldrb	r3, [r7, #7]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d105      	bne.n	8018a6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018a5e:	683a      	ldr	r2, [r7, #0]
 8018a60:	4907      	ldr	r1, [pc, #28]	; (8018a80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018a62:	4808      	ldr	r0, [pc, #32]	; (8018a84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018a64:	f7fb fbfc 	bl	8014260 <USBD_GetString>
 8018a68:	e004      	b.n	8018a74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018a6a:	683a      	ldr	r2, [r7, #0]
 8018a6c:	4904      	ldr	r1, [pc, #16]	; (8018a80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018a6e:	4805      	ldr	r0, [pc, #20]	; (8018a84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018a70:	f7fb fbf6 	bl	8014260 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a74:	4b02      	ldr	r3, [pc, #8]	; (8018a80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018a76:	4618      	mov	r0, r3
 8018a78:	3708      	adds	r7, #8
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd80      	pop	{r7, pc}
 8018a7e:	bf00      	nop
 8018a80:	24002468 	.word	0x24002468
 8018a84:	0801bc8c 	.word	0x0801bc8c

08018a88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b084      	sub	sp, #16
 8018a8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018a8e:	4b0f      	ldr	r3, [pc, #60]	; (8018acc <Get_SerialNum+0x44>)
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018a94:	4b0e      	ldr	r3, [pc, #56]	; (8018ad0 <Get_SerialNum+0x48>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018a9a:	4b0e      	ldr	r3, [pc, #56]	; (8018ad4 <Get_SerialNum+0x4c>)
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018aa0:	68fa      	ldr	r2, [r7, #12]
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	4413      	add	r3, r2
 8018aa6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d009      	beq.n	8018ac2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018aae:	2208      	movs	r2, #8
 8018ab0:	4909      	ldr	r1, [pc, #36]	; (8018ad8 <Get_SerialNum+0x50>)
 8018ab2:	68f8      	ldr	r0, [r7, #12]
 8018ab4:	f000 f814 	bl	8018ae0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018ab8:	2204      	movs	r2, #4
 8018aba:	4908      	ldr	r1, [pc, #32]	; (8018adc <Get_SerialNum+0x54>)
 8018abc:	68b8      	ldr	r0, [r7, #8]
 8018abe:	f000 f80f 	bl	8018ae0 <IntToUnicode>
  }
}
 8018ac2:	bf00      	nop
 8018ac4:	3710      	adds	r7, #16
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	bd80      	pop	{r7, pc}
 8018aca:	bf00      	nop
 8018acc:	1ff1e800 	.word	0x1ff1e800
 8018ad0:	1ff1e804 	.word	0x1ff1e804
 8018ad4:	1ff1e808 	.word	0x1ff1e808
 8018ad8:	240001fa 	.word	0x240001fa
 8018adc:	2400020a 	.word	0x2400020a

08018ae0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018ae0:	b480      	push	{r7}
 8018ae2:	b087      	sub	sp, #28
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	60f8      	str	r0, [r7, #12]
 8018ae8:	60b9      	str	r1, [r7, #8]
 8018aea:	4613      	mov	r3, r2
 8018aec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018aee:	2300      	movs	r3, #0
 8018af0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018af2:	2300      	movs	r3, #0
 8018af4:	75fb      	strb	r3, [r7, #23]
 8018af6:	e027      	b.n	8018b48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	0f1b      	lsrs	r3, r3, #28
 8018afc:	2b09      	cmp	r3, #9
 8018afe:	d80b      	bhi.n	8018b18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	0f1b      	lsrs	r3, r3, #28
 8018b04:	b2da      	uxtb	r2, r3
 8018b06:	7dfb      	ldrb	r3, [r7, #23]
 8018b08:	005b      	lsls	r3, r3, #1
 8018b0a:	4619      	mov	r1, r3
 8018b0c:	68bb      	ldr	r3, [r7, #8]
 8018b0e:	440b      	add	r3, r1
 8018b10:	3230      	adds	r2, #48	; 0x30
 8018b12:	b2d2      	uxtb	r2, r2
 8018b14:	701a      	strb	r2, [r3, #0]
 8018b16:	e00a      	b.n	8018b2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	0f1b      	lsrs	r3, r3, #28
 8018b1c:	b2da      	uxtb	r2, r3
 8018b1e:	7dfb      	ldrb	r3, [r7, #23]
 8018b20:	005b      	lsls	r3, r3, #1
 8018b22:	4619      	mov	r1, r3
 8018b24:	68bb      	ldr	r3, [r7, #8]
 8018b26:	440b      	add	r3, r1
 8018b28:	3237      	adds	r2, #55	; 0x37
 8018b2a:	b2d2      	uxtb	r2, r2
 8018b2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	011b      	lsls	r3, r3, #4
 8018b32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018b34:	7dfb      	ldrb	r3, [r7, #23]
 8018b36:	005b      	lsls	r3, r3, #1
 8018b38:	3301      	adds	r3, #1
 8018b3a:	68ba      	ldr	r2, [r7, #8]
 8018b3c:	4413      	add	r3, r2
 8018b3e:	2200      	movs	r2, #0
 8018b40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018b42:	7dfb      	ldrb	r3, [r7, #23]
 8018b44:	3301      	adds	r3, #1
 8018b46:	75fb      	strb	r3, [r7, #23]
 8018b48:	7dfa      	ldrb	r2, [r7, #23]
 8018b4a:	79fb      	ldrb	r3, [r7, #7]
 8018b4c:	429a      	cmp	r2, r3
 8018b4e:	d3d3      	bcc.n	8018af8 <IntToUnicode+0x18>
  }
}
 8018b50:	bf00      	nop
 8018b52:	bf00      	nop
 8018b54:	371c      	adds	r7, #28
 8018b56:	46bd      	mov	sp, r7
 8018b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5c:	4770      	bx	lr

08018b5e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8018b5e:	b480      	push	{r7}
 8018b60:	b083      	sub	sp, #12
 8018b62:	af00      	add	r7, sp, #0
 8018b64:	4603      	mov	r3, r0
 8018b66:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 //UNUSED(lun);
//	SD_Init()
  return (USBD_OK);
 8018b68:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	370c      	adds	r7, #12
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b74:	4770      	bx	lr
	...

08018b78 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b084      	sub	sp, #16
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	4603      	mov	r3, r0
 8018b80:	60b9      	str	r1, [r7, #8]
 8018b82:	607a      	str	r2, [r7, #4]
 8018b84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  //UNUSED(lun);
     SD_GetCardInfo(&SDCardInfo);
 8018b86:	4809      	ldr	r0, [pc, #36]	; (8018bac <STORAGE_GetCapacity_FS+0x34>)
 8018b88:	f7ff f874 	bl	8017c74 <SD_GetCardInfo>
     *block_num = SDCardInfo.LogBlockNbr - 1;
 8018b8c:	4b07      	ldr	r3, [pc, #28]	; (8018bac <STORAGE_GetCapacity_FS+0x34>)
 8018b8e:	699b      	ldr	r3, [r3, #24]
 8018b90:	1e5a      	subs	r2, r3, #1
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	601a      	str	r2, [r3, #0]
     *block_size = SDCardInfo.LogBlockSize;
 8018b96:	4b05      	ldr	r3, [pc, #20]	; (8018bac <STORAGE_GetCapacity_FS+0x34>)
 8018b98:	69db      	ldr	r3, [r3, #28]
 8018b9a:	b29a      	uxth	r2, r3
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8018ba0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop
 8018bac:	24001064 	.word	0x24001064

08018bb0 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8018bb0:	b480      	push	{r7}
 8018bb2:	b083      	sub	sp, #12
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  //UNUSED(lun);

  return (USBD_OK);
 8018bba:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	370c      	adds	r7, #12
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc6:	4770      	bx	lr

08018bc8 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018bc8:	b480      	push	{r7}
 8018bca:	b083      	sub	sp, #12
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	4603      	mov	r3, r0
 8018bd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  //UNUSED(lun);

  return (USBD_OK);
 8018bd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	370c      	adds	r7, #12
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bde:	4770      	bx	lr

08018be0 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b086      	sub	sp, #24
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	60b9      	str	r1, [r7, #8]
 8018be8:	607a      	str	r2, [r7, #4]
 8018bea:	461a      	mov	r2, r3
 8018bec:	4603      	mov	r3, r0
 8018bee:	73fb      	strb	r3, [r7, #15]
 8018bf0:	4613      	mov	r3, r2
 8018bf2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t res=0;
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	75fb      	strb	r3, [r7, #23]
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);

    res=SD_ReadDisk(buf,blk_addr,blk_len);
 8018bf8:	89bb      	ldrh	r3, [r7, #12]
 8018bfa:	461a      	mov	r2, r3
 8018bfc:	6879      	ldr	r1, [r7, #4]
 8018bfe:	68b8      	ldr	r0, [r7, #8]
 8018c00:	f7ff f85a 	bl	8017cb8 <SD_ReadDisk>
 8018c04:	4603      	mov	r3, r0
 8018c06:	75fb      	strb	r3, [r7, #23]

  return (res);
 8018c08:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	3718      	adds	r7, #24
 8018c10:	46bd      	mov	sp, r7
 8018c12:	bd80      	pop	{r7, pc}

08018c14 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b086      	sub	sp, #24
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	60b9      	str	r1, [r7, #8]
 8018c1c:	607a      	str	r2, [r7, #4]
 8018c1e:	461a      	mov	r2, r3
 8018c20:	4603      	mov	r3, r0
 8018c22:	73fb      	strb	r3, [r7, #15]
 8018c24:	4613      	mov	r3, r2
 8018c26:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t res=0;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	75fb      	strb	r3, [r7, #23]
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);

    res=SD_WriteDisk(buf,blk_addr,blk_len);
 8018c2c:	89bb      	ldrh	r3, [r7, #12]
 8018c2e:	461a      	mov	r2, r3
 8018c30:	6879      	ldr	r1, [r7, #4]
 8018c32:	68b8      	ldr	r0, [r7, #8]
 8018c34:	f7ff f876 	bl	8017d24 <SD_WriteDisk>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	75fb      	strb	r3, [r7, #23]


  return (res);
 8018c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018c40:	4618      	mov	r0, r3
 8018c42:	3718      	adds	r7, #24
 8018c44:	46bd      	mov	sp, r7
 8018c46:	bd80      	pop	{r7, pc}

08018c48 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018c48:	b480      	push	{r7}
 8018c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018c4c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018c4e:	4618      	mov	r0, r3
 8018c50:	46bd      	mov	sp, r7
 8018c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c56:	4770      	bx	lr

08018c58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b0ba      	sub	sp, #232	; 0xe8
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018c60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8018c64:	2200      	movs	r2, #0
 8018c66:	601a      	str	r2, [r3, #0]
 8018c68:	605a      	str	r2, [r3, #4]
 8018c6a:	609a      	str	r2, [r3, #8]
 8018c6c:	60da      	str	r2, [r3, #12]
 8018c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018c70:	f107 0310 	add.w	r3, r7, #16
 8018c74:	22c0      	movs	r2, #192	; 0xc0
 8018c76:	2100      	movs	r1, #0
 8018c78:	4618      	mov	r0, r3
 8018c7a:	f002 fa47 	bl	801b10c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	4a2c      	ldr	r2, [pc, #176]	; (8018d34 <HAL_PCD_MspInit+0xdc>)
 8018c84:	4293      	cmp	r3, r2
 8018c86:	d151      	bne.n	8018d2c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018c88:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8018c8c:	f04f 0300 	mov.w	r3, #0
 8018c90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018c94:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8018c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018c9c:	f107 0310 	add.w	r3, r7, #16
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7ef fe75 	bl	8008990 <HAL_RCCEx_PeriphCLKConfig>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d001      	beq.n	8018cb0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8018cac:	f7e7 ff7c 	bl	8000ba8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8018cb0:	f7ee fe24 	bl	80078fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018cb4:	4b20      	ldr	r3, [pc, #128]	; (8018d38 <HAL_PCD_MspInit+0xe0>)
 8018cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018cba:	4a1f      	ldr	r2, [pc, #124]	; (8018d38 <HAL_PCD_MspInit+0xe0>)
 8018cbc:	f043 0301 	orr.w	r3, r3, #1
 8018cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018cc4:	4b1c      	ldr	r3, [pc, #112]	; (8018d38 <HAL_PCD_MspInit+0xe0>)
 8018cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018cca:	f003 0301 	and.w	r3, r3, #1
 8018cce:	60fb      	str	r3, [r7, #12]
 8018cd0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8018cd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018cda:	2302      	movs	r3, #2
 8018cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8018ce6:	2302      	movs	r3, #2
 8018ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018cec:	230a      	movs	r3, #10
 8018cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018cf2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8018cf6:	4619      	mov	r1, r3
 8018cf8:	4810      	ldr	r0, [pc, #64]	; (8018d3c <HAL_PCD_MspInit+0xe4>)
 8018cfa:	f7ec fae3 	bl	80052c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018cfe:	4b0e      	ldr	r3, [pc, #56]	; (8018d38 <HAL_PCD_MspInit+0xe0>)
 8018d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018d04:	4a0c      	ldr	r2, [pc, #48]	; (8018d38 <HAL_PCD_MspInit+0xe0>)
 8018d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018d0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8018d0e:	4b0a      	ldr	r3, [pc, #40]	; (8018d38 <HAL_PCD_MspInit+0xe0>)
 8018d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018d18:	60bb      	str	r3, [r7, #8]
 8018d1a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	2102      	movs	r1, #2
 8018d20:	2065      	movs	r0, #101	; 0x65
 8018d22:	f7e8 fc6a 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018d26:	2065      	movs	r0, #101	; 0x65
 8018d28:	f7e8 fc81 	bl	800162e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018d2c:	bf00      	nop
 8018d2e:	37e8      	adds	r7, #232	; 0xe8
 8018d30:	46bd      	mov	sp, r7
 8018d32:	bd80      	pop	{r7, pc}
 8018d34:	40080000 	.word	0x40080000
 8018d38:	58024400 	.word	0x58024400
 8018d3c:	58020000 	.word	0x58020000

08018d40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b082      	sub	sp, #8
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018d54:	4619      	mov	r1, r3
 8018d56:	4610      	mov	r0, r2
 8018d58:	f7f9 ffd1 	bl	8012cfe <USBD_LL_SetupStage>
}
 8018d5c:	bf00      	nop
 8018d5e:	3708      	adds	r7, #8
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bd80      	pop	{r7, pc}

08018d64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b082      	sub	sp, #8
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
 8018d6c:	460b      	mov	r3, r1
 8018d6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018d76:	78fa      	ldrb	r2, [r7, #3]
 8018d78:	6879      	ldr	r1, [r7, #4]
 8018d7a:	4613      	mov	r3, r2
 8018d7c:	00db      	lsls	r3, r3, #3
 8018d7e:	4413      	add	r3, r2
 8018d80:	009b      	lsls	r3, r3, #2
 8018d82:	440b      	add	r3, r1
 8018d84:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8018d88:	681a      	ldr	r2, [r3, #0]
 8018d8a:	78fb      	ldrb	r3, [r7, #3]
 8018d8c:	4619      	mov	r1, r3
 8018d8e:	f7fa f80b 	bl	8012da8 <USBD_LL_DataOutStage>
}
 8018d92:	bf00      	nop
 8018d94:	3708      	adds	r7, #8
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bd80      	pop	{r7, pc}

08018d9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d9a:	b580      	push	{r7, lr}
 8018d9c:	b082      	sub	sp, #8
 8018d9e:	af00      	add	r7, sp, #0
 8018da0:	6078      	str	r0, [r7, #4]
 8018da2:	460b      	mov	r3, r1
 8018da4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018dac:	78fa      	ldrb	r2, [r7, #3]
 8018dae:	6879      	ldr	r1, [r7, #4]
 8018db0:	4613      	mov	r3, r2
 8018db2:	00db      	lsls	r3, r3, #3
 8018db4:	4413      	add	r3, r2
 8018db6:	009b      	lsls	r3, r3, #2
 8018db8:	440b      	add	r3, r1
 8018dba:	3348      	adds	r3, #72	; 0x48
 8018dbc:	681a      	ldr	r2, [r3, #0]
 8018dbe:	78fb      	ldrb	r3, [r7, #3]
 8018dc0:	4619      	mov	r1, r3
 8018dc2:	f7fa f8a4 	bl	8012f0e <USBD_LL_DataInStage>
}
 8018dc6:	bf00      	nop
 8018dc8:	3708      	adds	r7, #8
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	bd80      	pop	{r7, pc}

08018dce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dce:	b580      	push	{r7, lr}
 8018dd0:	b082      	sub	sp, #8
 8018dd2:	af00      	add	r7, sp, #0
 8018dd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f7fa f9fd 	bl	80131dc <USBD_LL_SOF>
}
 8018de2:	bf00      	nop
 8018de4:	3708      	adds	r7, #8
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bd80      	pop	{r7, pc}

08018dea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dea:	b580      	push	{r7, lr}
 8018dec:	b084      	sub	sp, #16
 8018dee:	af00      	add	r7, sp, #0
 8018df0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018df2:	2301      	movs	r3, #1
 8018df4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	691b      	ldr	r3, [r3, #16]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d102      	bne.n	8018e04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018dfe:	2300      	movs	r3, #0
 8018e00:	73fb      	strb	r3, [r7, #15]
 8018e02:	e008      	b.n	8018e16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	691b      	ldr	r3, [r3, #16]
 8018e08:	2b02      	cmp	r3, #2
 8018e0a:	d102      	bne.n	8018e12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018e0c:	2301      	movs	r3, #1
 8018e0e:	73fb      	strb	r3, [r7, #15]
 8018e10:	e001      	b.n	8018e16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018e12:	f7e7 fec9 	bl	8000ba8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018e1c:	7bfa      	ldrb	r2, [r7, #15]
 8018e1e:	4611      	mov	r1, r2
 8018e20:	4618      	mov	r0, r3
 8018e22:	f7fa f997 	bl	8013154 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	f7fa f920 	bl	8013072 <USBD_LL_Reset>
}
 8018e32:	bf00      	nop
 8018e34:	3710      	adds	r7, #16
 8018e36:	46bd      	mov	sp, r7
 8018e38:	bd80      	pop	{r7, pc}
	...

08018e3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b082      	sub	sp, #8
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7fa f992 	bl	8013174 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	687a      	ldr	r2, [r7, #4]
 8018e5c:	6812      	ldr	r2, [r2, #0]
 8018e5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018e62:	f043 0301 	orr.w	r3, r3, #1
 8018e66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	6a1b      	ldr	r3, [r3, #32]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d005      	beq.n	8018e7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018e70:	4b04      	ldr	r3, [pc, #16]	; (8018e84 <HAL_PCD_SuspendCallback+0x48>)
 8018e72:	691b      	ldr	r3, [r3, #16]
 8018e74:	4a03      	ldr	r2, [pc, #12]	; (8018e84 <HAL_PCD_SuspendCallback+0x48>)
 8018e76:	f043 0306 	orr.w	r3, r3, #6
 8018e7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018e7c:	bf00      	nop
 8018e7e:	3708      	adds	r7, #8
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd80      	pop	{r7, pc}
 8018e84:	e000ed00 	.word	0xe000ed00

08018e88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b082      	sub	sp, #8
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018e96:	4618      	mov	r0, r3
 8018e98:	f7fa f988 	bl	80131ac <USBD_LL_Resume>
}
 8018e9c:	bf00      	nop
 8018e9e:	3708      	adds	r7, #8
 8018ea0:	46bd      	mov	sp, r7
 8018ea2:	bd80      	pop	{r7, pc}

08018ea4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b082      	sub	sp, #8
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
 8018eac:	460b      	mov	r3, r1
 8018eae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018eb6:	78fa      	ldrb	r2, [r7, #3]
 8018eb8:	4611      	mov	r1, r2
 8018eba:	4618      	mov	r0, r3
 8018ebc:	f7fa f9ff 	bl	80132be <USBD_LL_IsoOUTIncomplete>
}
 8018ec0:	bf00      	nop
 8018ec2:	3708      	adds	r7, #8
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}

08018ec8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b082      	sub	sp, #8
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
 8018ed0:	460b      	mov	r3, r1
 8018ed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018eda:	78fa      	ldrb	r2, [r7, #3]
 8018edc:	4611      	mov	r1, r2
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f7fa f9bb 	bl	801325a <USBD_LL_IsoINIncomplete>
}
 8018ee4:	bf00      	nop
 8018ee6:	3708      	adds	r7, #8
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}

08018eec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b082      	sub	sp, #8
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7fa fa11 	bl	8013322 <USBD_LL_DevConnected>
}
 8018f00:	bf00      	nop
 8018f02:	3708      	adds	r7, #8
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}

08018f08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018f16:	4618      	mov	r0, r3
 8018f18:	f7fa fa0e 	bl	8013338 <USBD_LL_DevDisconnected>
}
 8018f1c:	bf00      	nop
 8018f1e:	3708      	adds	r7, #8
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd80      	pop	{r7, pc}

08018f24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b082      	sub	sp, #8
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	781b      	ldrb	r3, [r3, #0]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d140      	bne.n	8018fb6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018f34:	4a22      	ldr	r2, [pc, #136]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	4a20      	ldr	r2, [pc, #128]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f40:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018f44:	4b1e      	ldr	r3, [pc, #120]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f46:	4a1f      	ldr	r2, [pc, #124]	; (8018fc4 <USBD_LL_Init+0xa0>)
 8018f48:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018f4a:	4b1d      	ldr	r3, [pc, #116]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f4c:	2204      	movs	r2, #4
 8018f4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018f50:	4b1b      	ldr	r3, [pc, #108]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f52:	2202      	movs	r2, #2
 8018f54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018f56:	4b1a      	ldr	r3, [pc, #104]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f58:	2200      	movs	r2, #0
 8018f5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018f5c:	4b18      	ldr	r3, [pc, #96]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f5e:	2202      	movs	r2, #2
 8018f60:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018f62:	4b17      	ldr	r3, [pc, #92]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f64:	2200      	movs	r2, #0
 8018f66:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018f68:	4b15      	ldr	r3, [pc, #84]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f6a:	2200      	movs	r2, #0
 8018f6c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018f6e:	4b14      	ldr	r3, [pc, #80]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f70:	2200      	movs	r2, #0
 8018f72:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018f74:	4b12      	ldr	r3, [pc, #72]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f76:	2200      	movs	r2, #0
 8018f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018f7a:	4b11      	ldr	r3, [pc, #68]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018f80:	480f      	ldr	r0, [pc, #60]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f82:	f7ed f99a 	bl	80062ba <HAL_PCD_Init>
 8018f86:	4603      	mov	r3, r0
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d001      	beq.n	8018f90 <USBD_LL_Init+0x6c>
  {
    Error_Handler( );
 8018f8c:	f7e7 fe0c 	bl	8000ba8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018f90:	2180      	movs	r1, #128	; 0x80
 8018f92:	480b      	ldr	r0, [pc, #44]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f94:	f7ee fc37 	bl	8007806 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018f98:	2240      	movs	r2, #64	; 0x40
 8018f9a:	2100      	movs	r1, #0
 8018f9c:	4808      	ldr	r0, [pc, #32]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018f9e:	f7ee fbeb 	bl	8007778 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8018fa2:	2240      	movs	r2, #64	; 0x40
 8018fa4:	2101      	movs	r1, #1
 8018fa6:	4806      	ldr	r0, [pc, #24]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018fa8:	f7ee fbe6 	bl	8007778 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 8018fac:	2240      	movs	r2, #64	; 0x40
 8018fae:	2103      	movs	r1, #3
 8018fb0:	4803      	ldr	r0, [pc, #12]	; (8018fc0 <USBD_LL_Init+0x9c>)
 8018fb2:	f7ee fbe1 	bl	8007778 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018fb6:	2300      	movs	r3, #0
}
 8018fb8:	4618      	mov	r0, r3
 8018fba:	3708      	adds	r7, #8
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bd80      	pop	{r7, pc}
 8018fc0:	24002668 	.word	0x24002668
 8018fc4:	40080000 	.word	0x40080000

08018fc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b084      	sub	sp, #16
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8018fde:	4618      	mov	r0, r3
 8018fe0:	f7ed fa8f 	bl	8006502 <HAL_PCD_Start>
 8018fe4:	4603      	mov	r3, r0
 8018fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fe8:	7bfb      	ldrb	r3, [r7, #15]
 8018fea:	4618      	mov	r0, r3
 8018fec:	f000 f94a 	bl	8019284 <USBD_Get_USB_Status>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	3710      	adds	r7, #16
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bd80      	pop	{r7, pc}

08018ffe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018ffe:	b580      	push	{r7, lr}
 8019000:	b084      	sub	sp, #16
 8019002:	af00      	add	r7, sp, #0
 8019004:	6078      	str	r0, [r7, #4]
 8019006:	4608      	mov	r0, r1
 8019008:	4611      	mov	r1, r2
 801900a:	461a      	mov	r2, r3
 801900c:	4603      	mov	r3, r0
 801900e:	70fb      	strb	r3, [r7, #3]
 8019010:	460b      	mov	r3, r1
 8019012:	70bb      	strb	r3, [r7, #2]
 8019014:	4613      	mov	r3, r2
 8019016:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019018:	2300      	movs	r3, #0
 801901a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801901c:	2300      	movs	r3, #0
 801901e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8019026:	78bb      	ldrb	r3, [r7, #2]
 8019028:	883a      	ldrh	r2, [r7, #0]
 801902a:	78f9      	ldrb	r1, [r7, #3]
 801902c:	f7ed ff8f 	bl	8006f4e <HAL_PCD_EP_Open>
 8019030:	4603      	mov	r3, r0
 8019032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019034:	7bfb      	ldrb	r3, [r7, #15]
 8019036:	4618      	mov	r0, r3
 8019038:	f000 f924 	bl	8019284 <USBD_Get_USB_Status>
 801903c:	4603      	mov	r3, r0
 801903e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019040:	7bbb      	ldrb	r3, [r7, #14]
}
 8019042:	4618      	mov	r0, r3
 8019044:	3710      	adds	r7, #16
 8019046:	46bd      	mov	sp, r7
 8019048:	bd80      	pop	{r7, pc}

0801904a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801904a:	b580      	push	{r7, lr}
 801904c:	b084      	sub	sp, #16
 801904e:	af00      	add	r7, sp, #0
 8019050:	6078      	str	r0, [r7, #4]
 8019052:	460b      	mov	r3, r1
 8019054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019056:	2300      	movs	r3, #0
 8019058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801905a:	2300      	movs	r3, #0
 801905c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8019064:	78fa      	ldrb	r2, [r7, #3]
 8019066:	4611      	mov	r1, r2
 8019068:	4618      	mov	r0, r3
 801906a:	f7ed ffd8 	bl	800701e <HAL_PCD_EP_Close>
 801906e:	4603      	mov	r3, r0
 8019070:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019072:	7bfb      	ldrb	r3, [r7, #15]
 8019074:	4618      	mov	r0, r3
 8019076:	f000 f905 	bl	8019284 <USBD_Get_USB_Status>
 801907a:	4603      	mov	r3, r0
 801907c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801907e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019080:	4618      	mov	r0, r3
 8019082:	3710      	adds	r7, #16
 8019084:	46bd      	mov	sp, r7
 8019086:	bd80      	pop	{r7, pc}

08019088 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019088:	b580      	push	{r7, lr}
 801908a:	b084      	sub	sp, #16
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
 8019090:	460b      	mov	r3, r1
 8019092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019094:	2300      	movs	r3, #0
 8019096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019098:	2300      	movs	r3, #0
 801909a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80190a2:	78fa      	ldrb	r2, [r7, #3]
 80190a4:	4611      	mov	r1, r2
 80190a6:	4618      	mov	r0, r3
 80190a8:	f7ee f97d 	bl	80073a6 <HAL_PCD_EP_Flush>
 80190ac:	4603      	mov	r3, r0
 80190ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190b0:	7bfb      	ldrb	r3, [r7, #15]
 80190b2:	4618      	mov	r0, r3
 80190b4:	f000 f8e6 	bl	8019284 <USBD_Get_USB_Status>
 80190b8:	4603      	mov	r3, r0
 80190ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80190be:	4618      	mov	r0, r3
 80190c0:	3710      	adds	r7, #16
 80190c2:	46bd      	mov	sp, r7
 80190c4:	bd80      	pop	{r7, pc}

080190c6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80190c6:	b580      	push	{r7, lr}
 80190c8:	b084      	sub	sp, #16
 80190ca:	af00      	add	r7, sp, #0
 80190cc:	6078      	str	r0, [r7, #4]
 80190ce:	460b      	mov	r3, r1
 80190d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190d2:	2300      	movs	r3, #0
 80190d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190d6:	2300      	movs	r3, #0
 80190d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80190e0:	78fa      	ldrb	r2, [r7, #3]
 80190e2:	4611      	mov	r1, r2
 80190e4:	4618      	mov	r0, r3
 80190e6:	f7ee f873 	bl	80071d0 <HAL_PCD_EP_SetStall>
 80190ea:	4603      	mov	r3, r0
 80190ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190ee:	7bfb      	ldrb	r3, [r7, #15]
 80190f0:	4618      	mov	r0, r3
 80190f2:	f000 f8c7 	bl	8019284 <USBD_Get_USB_Status>
 80190f6:	4603      	mov	r3, r0
 80190f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80190fc:	4618      	mov	r0, r3
 80190fe:	3710      	adds	r7, #16
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}

08019104 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b084      	sub	sp, #16
 8019108:	af00      	add	r7, sp, #0
 801910a:	6078      	str	r0, [r7, #4]
 801910c:	460b      	mov	r3, r1
 801910e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019110:	2300      	movs	r3, #0
 8019112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019114:	2300      	movs	r3, #0
 8019116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801911e:	78fa      	ldrb	r2, [r7, #3]
 8019120:	4611      	mov	r1, r2
 8019122:	4618      	mov	r0, r3
 8019124:	f7ee f8b8 	bl	8007298 <HAL_PCD_EP_ClrStall>
 8019128:	4603      	mov	r3, r0
 801912a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801912c:	7bfb      	ldrb	r3, [r7, #15]
 801912e:	4618      	mov	r0, r3
 8019130:	f000 f8a8 	bl	8019284 <USBD_Get_USB_Status>
 8019134:	4603      	mov	r3, r0
 8019136:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019138:	7bbb      	ldrb	r3, [r7, #14]
}
 801913a:	4618      	mov	r0, r3
 801913c:	3710      	adds	r7, #16
 801913e:	46bd      	mov	sp, r7
 8019140:	bd80      	pop	{r7, pc}

08019142 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019142:	b480      	push	{r7}
 8019144:	b085      	sub	sp, #20
 8019146:	af00      	add	r7, sp, #0
 8019148:	6078      	str	r0, [r7, #4]
 801914a:	460b      	mov	r3, r1
 801914c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8019154:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801915a:	2b00      	cmp	r3, #0
 801915c:	da0b      	bge.n	8019176 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801915e:	78fb      	ldrb	r3, [r7, #3]
 8019160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019164:	68f9      	ldr	r1, [r7, #12]
 8019166:	4613      	mov	r3, r2
 8019168:	00db      	lsls	r3, r3, #3
 801916a:	4413      	add	r3, r2
 801916c:	009b      	lsls	r3, r3, #2
 801916e:	440b      	add	r3, r1
 8019170:	333e      	adds	r3, #62	; 0x3e
 8019172:	781b      	ldrb	r3, [r3, #0]
 8019174:	e00b      	b.n	801918e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019176:	78fb      	ldrb	r3, [r7, #3]
 8019178:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801917c:	68f9      	ldr	r1, [r7, #12]
 801917e:	4613      	mov	r3, r2
 8019180:	00db      	lsls	r3, r3, #3
 8019182:	4413      	add	r3, r2
 8019184:	009b      	lsls	r3, r3, #2
 8019186:	440b      	add	r3, r1
 8019188:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801918c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801918e:	4618      	mov	r0, r3
 8019190:	3714      	adds	r7, #20
 8019192:	46bd      	mov	sp, r7
 8019194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019198:	4770      	bx	lr

0801919a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801919a:	b580      	push	{r7, lr}
 801919c:	b084      	sub	sp, #16
 801919e:	af00      	add	r7, sp, #0
 80191a0:	6078      	str	r0, [r7, #4]
 80191a2:	460b      	mov	r3, r1
 80191a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191a6:	2300      	movs	r3, #0
 80191a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191aa:	2300      	movs	r3, #0
 80191ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80191b4:	78fa      	ldrb	r2, [r7, #3]
 80191b6:	4611      	mov	r1, r2
 80191b8:	4618      	mov	r0, r3
 80191ba:	f7ed fea3 	bl	8006f04 <HAL_PCD_SetAddress>
 80191be:	4603      	mov	r3, r0
 80191c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191c2:	7bfb      	ldrb	r3, [r7, #15]
 80191c4:	4618      	mov	r0, r3
 80191c6:	f000 f85d 	bl	8019284 <USBD_Get_USB_Status>
 80191ca:	4603      	mov	r3, r0
 80191cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80191d0:	4618      	mov	r0, r3
 80191d2:	3710      	adds	r7, #16
 80191d4:	46bd      	mov	sp, r7
 80191d6:	bd80      	pop	{r7, pc}

080191d8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b086      	sub	sp, #24
 80191dc:	af00      	add	r7, sp, #0
 80191de:	60f8      	str	r0, [r7, #12]
 80191e0:	607a      	str	r2, [r7, #4]
 80191e2:	603b      	str	r3, [r7, #0]
 80191e4:	460b      	mov	r3, r1
 80191e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191e8:	2300      	movs	r3, #0
 80191ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191ec:	2300      	movs	r3, #0
 80191ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80191f6:	7af9      	ldrb	r1, [r7, #11]
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	687a      	ldr	r2, [r7, #4]
 80191fc:	f7ed ffad 	bl	800715a <HAL_PCD_EP_Transmit>
 8019200:	4603      	mov	r3, r0
 8019202:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019204:	7dfb      	ldrb	r3, [r7, #23]
 8019206:	4618      	mov	r0, r3
 8019208:	f000 f83c 	bl	8019284 <USBD_Get_USB_Status>
 801920c:	4603      	mov	r3, r0
 801920e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019210:	7dbb      	ldrb	r3, [r7, #22]
}
 8019212:	4618      	mov	r0, r3
 8019214:	3718      	adds	r7, #24
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}

0801921a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801921a:	b580      	push	{r7, lr}
 801921c:	b086      	sub	sp, #24
 801921e:	af00      	add	r7, sp, #0
 8019220:	60f8      	str	r0, [r7, #12]
 8019222:	607a      	str	r2, [r7, #4]
 8019224:	603b      	str	r3, [r7, #0]
 8019226:	460b      	mov	r3, r1
 8019228:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801922a:	2300      	movs	r3, #0
 801922c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801922e:	2300      	movs	r3, #0
 8019230:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8019238:	7af9      	ldrb	r1, [r7, #11]
 801923a:	683b      	ldr	r3, [r7, #0]
 801923c:	687a      	ldr	r2, [r7, #4]
 801923e:	f7ed ff38 	bl	80070b2 <HAL_PCD_EP_Receive>
 8019242:	4603      	mov	r3, r0
 8019244:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019246:	7dfb      	ldrb	r3, [r7, #23]
 8019248:	4618      	mov	r0, r3
 801924a:	f000 f81b 	bl	8019284 <USBD_Get_USB_Status>
 801924e:	4603      	mov	r3, r0
 8019250:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019252:	7dbb      	ldrb	r3, [r7, #22]
}
 8019254:	4618      	mov	r0, r3
 8019256:	3718      	adds	r7, #24
 8019258:	46bd      	mov	sp, r7
 801925a:	bd80      	pop	{r7, pc}

0801925c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801925c:	b580      	push	{r7, lr}
 801925e:	b082      	sub	sp, #8
 8019260:	af00      	add	r7, sp, #0
 8019262:	6078      	str	r0, [r7, #4]
 8019264:	460b      	mov	r3, r1
 8019266:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801926e:	78fa      	ldrb	r2, [r7, #3]
 8019270:	4611      	mov	r1, r2
 8019272:	4618      	mov	r0, r3
 8019274:	f7ed ff59 	bl	800712a <HAL_PCD_EP_GetRxCount>
 8019278:	4603      	mov	r3, r0
}
 801927a:	4618      	mov	r0, r3
 801927c:	3708      	adds	r7, #8
 801927e:	46bd      	mov	sp, r7
 8019280:	bd80      	pop	{r7, pc}
	...

08019284 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019284:	b480      	push	{r7}
 8019286:	b085      	sub	sp, #20
 8019288:	af00      	add	r7, sp, #0
 801928a:	4603      	mov	r3, r0
 801928c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801928e:	2300      	movs	r3, #0
 8019290:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019292:	79fb      	ldrb	r3, [r7, #7]
 8019294:	2b03      	cmp	r3, #3
 8019296:	d817      	bhi.n	80192c8 <USBD_Get_USB_Status+0x44>
 8019298:	a201      	add	r2, pc, #4	; (adr r2, 80192a0 <USBD_Get_USB_Status+0x1c>)
 801929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801929e:	bf00      	nop
 80192a0:	080192b1 	.word	0x080192b1
 80192a4:	080192b7 	.word	0x080192b7
 80192a8:	080192bd 	.word	0x080192bd
 80192ac:	080192c3 	.word	0x080192c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80192b0:	2300      	movs	r3, #0
 80192b2:	73fb      	strb	r3, [r7, #15]
    break;
 80192b4:	e00b      	b.n	80192ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80192b6:	2303      	movs	r3, #3
 80192b8:	73fb      	strb	r3, [r7, #15]
    break;
 80192ba:	e008      	b.n	80192ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80192bc:	2301      	movs	r3, #1
 80192be:	73fb      	strb	r3, [r7, #15]
    break;
 80192c0:	e005      	b.n	80192ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80192c2:	2303      	movs	r3, #3
 80192c4:	73fb      	strb	r3, [r7, #15]
    break;
 80192c6:	e002      	b.n	80192ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80192c8:	2303      	movs	r3, #3
 80192ca:	73fb      	strb	r3, [r7, #15]
    break;
 80192cc:	bf00      	nop
  }
  return usb_status;
 80192ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80192d0:	4618      	mov	r0, r3
 80192d2:	3714      	adds	r7, #20
 80192d4:	46bd      	mov	sp, r7
 80192d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192da:	4770      	bx	lr

080192dc <camera_RGB565_init>:
uint32_t jpeg_index;
uint32_t jpeg_start_index;
uint32_t jpeg_end_index;

void camera_RGB565_init(void)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b082      	sub	sp, #8
 80192e0:	af00      	add	r7, sp, #0
	uint8_t ret;
    ret  = ov5640_init();                                               /* 初始化OV5640模块 */
 80192e2:	f001 fb53 	bl	801a98c <ov5640_init>
 80192e6:	4603      	mov	r3, r0
 80192e8:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_output_format(OV5640_OUTPUT_FORMAT_RGB565);   /* 设置OV5640输出RGB565图像数据 */
 80192ea:	2000      	movs	r0, #0
 80192ec:	f001 fa86 	bl	801a7fc <ov5640_set_output_format>
 80192f0:	4603      	mov	r3, r0
 80192f2:	461a      	mov	r2, r3
 80192f4:	79fb      	ldrb	r3, [r7, #7]
 80192f6:	4413      	add	r3, r2
 80192f8:	71fb      	strb	r3, [r7, #7]
//    ret += ov5640_auto_focus_init();                                    /* 初始化OV5640模块自动对焦 */
//    ret += ov5640_auto_focus_continuance();                             /* OV5640模块持续自动对焦 */
    ret += ov5640_set_light_mode(OV5640_LIGHT_MODE_ADVANCED_AWB);   /* 设置OV5640模块灯光模式 */
 80192fa:	2000      	movs	r0, #0
 80192fc:	f000 f9fc 	bl	80196f8 <ov5640_set_light_mode>
 8019300:	4603      	mov	r3, r0
 8019302:	461a      	mov	r2, r3
 8019304:	79fb      	ldrb	r3, [r7, #7]
 8019306:	4413      	add	r3, r2
 8019308:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_color_saturation(OV5640_COLOR_SATURATION_4);  /* 设置OV5640模块色彩饱度 */
 801930a:	2004      	movs	r0, #4
 801930c:	f000 fb2c 	bl	8019968 <ov5640_set_color_saturation>
 8019310:	4603      	mov	r3, r0
 8019312:	461a      	mov	r2, r3
 8019314:	79fb      	ldrb	r3, [r7, #7]
 8019316:	4413      	add	r3, r2
 8019318:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_brightness(OV5640_BRIGHTNESS_4);              /* 设置OV5640模块亮度 */
 801931a:	2004      	movs	r0, #4
 801931c:	f000 fc34 	bl	8019b88 <ov5640_set_brightness>
 8019320:	4603      	mov	r3, r0
 8019322:	461a      	mov	r2, r3
 8019324:	79fb      	ldrb	r3, [r7, #7]
 8019326:	4413      	add	r3, r2
 8019328:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_contrast(OV5640_CONTRAST_4);                  /* 设置OV5640模块对比度 */
 801932a:	2004      	movs	r0, #4
 801932c:	f000 fd0e 	bl	8019d4c <ov5640_set_contrast>
 8019330:	4603      	mov	r3, r0
 8019332:	461a      	mov	r2, r3
 8019334:	79fb      	ldrb	r3, [r7, #7]
 8019336:	4413      	add	r3, r2
 8019338:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_hue(OV5640_HUE_6);                            /* 设置OV5640模块色相 */
 801933a:	2006      	movs	r0, #6
 801933c:	f000 fe24 	bl	8019f88 <ov5640_set_hue>
 8019340:	4603      	mov	r3, r0
 8019342:	461a      	mov	r2, r3
 8019344:	79fb      	ldrb	r3, [r7, #7]
 8019346:	4413      	add	r3, r2
 8019348:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_special_effect(OV5640_SPECIAL_EFFECT_NORMAL); /* 设置OV5640模块特殊效果 */
 801934a:	2000      	movs	r0, #0
 801934c:	f000 ff80 	bl	801a250 <ov5640_set_special_effect>
 8019350:	4603      	mov	r3, r0
 8019352:	461a      	mov	r2, r3
 8019354:	79fb      	ldrb	r3, [r7, #7]
 8019356:	4413      	add	r3, r2
 8019358:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_exposure_level(OV5640_EXPOSURE_LEVEL_5);      /* 设置OV5640模块曝光度 */
 801935a:	2005      	movs	r0, #5
 801935c:	f001 f818 	bl	801a390 <ov5640_set_exposure_level>
 8019360:	4603      	mov	r3, r0
 8019362:	461a      	mov	r2, r3
 8019364:	79fb      	ldrb	r3, [r7, #7]
 8019366:	4413      	add	r3, r2
 8019368:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_sharpness_level(OV5640_SHARPNESS_OFF);        /* 设置OV5640模块锐度 */
 801936a:	2000      	movs	r0, #0
 801936c:	f001 f98e 	bl	801a68c <ov5640_set_sharpness_level>
 8019370:	4603      	mov	r3, r0
 8019372:	461a      	mov	r2, r3
 8019374:	79fb      	ldrb	r3, [r7, #7]
 8019376:	4413      	add	r3, r2
 8019378:	71fb      	strb	r3, [r7, #7]
//    ret += ov5640_set_mirror_flip(OV5640_MIRROR_FLIP_2);            /* 设置OV5640模块镜像/翻转 */
//    ret += ov5640_set_test_pattern(OV5640_TEST_PATTERN_OFF);        /* 设置OV5640模块测试图案 */
    ret += ov5640_set_output_size(IMAGE_WIDTH, IMAGE_HEIGHT);         /* 设置OV5640模块输出图像尺寸 */
 801937a:	21a0      	movs	r1, #160	; 0xa0
 801937c:	2080      	movs	r0, #128	; 0x80
 801937e:	f001 fa9f 	bl	801a8c0 <ov5640_set_output_size>
 8019382:	4603      	mov	r3, r0
 8019384:	461a      	mov	r2, r3
 8019386:	79fb      	ldrb	r3, [r7, #7]
 8019388:	4413      	add	r3, r2
 801938a:	71fb      	strb	r3, [r7, #7]
    if (ret != 0)
 801938c:	79fb      	ldrb	r3, [r7, #7]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d003      	beq.n	801939a <camera_RGB565_init+0xbe>
    {
        printf("OV5640 init failed!\r\n");
 8019392:	4804      	ldr	r0, [pc, #16]	; (80193a4 <camera_RGB565_init+0xc8>)
 8019394:	f001 fda0 	bl	801aed8 <puts>
        while (1)
 8019398:	e7fe      	b.n	8019398 <camera_RGB565_init+0xbc>
        {

        }
    }

}
 801939a:	bf00      	nop
 801939c:	3708      	adds	r7, #8
 801939e:	46bd      	mov	sp, r7
 80193a0:	bd80      	pop	{r7, pc}
 80193a2:	bf00      	nop
 80193a4:	0801bc9c 	.word	0x0801bc9c

080193a8 <HAL_DCMI_FrameEventCallback>:
 * @brief      DCMI接口帧中断回调函数
 * @param
 * @retval
 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b082      	sub	sp, #8
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80193b0:	b672      	cpsid	i
}
 80193b2:	bf00      	nop
	__disable_irq();
    HAL_DCMI_Suspend(hdcmi); // 拍照完成，挂起 DCMI
 80193b4:	6878      	ldr	r0, [r7, #4]
 80193b6:	f7e8 faf1 	bl	800199c <HAL_DCMI_Suspend>
//    HAL_DCMI_Stop(hdcmi);    // 拍照完成，停止 DMA传输
	cam.frame_sta = 1;  //帧中断完成标志置位
 80193ba:	4b04      	ldr	r3, [pc, #16]	; (80193cc <HAL_DCMI_FrameEventCallback+0x24>)
 80193bc:	2201      	movs	r2, #1
 80193be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80193c0:	b662      	cpsie	i
}
 80193c2:	bf00      	nop
	__enable_irq();
}
 80193c4:	bf00      	nop
 80193c6:	3708      	adds	r7, #8
 80193c8:	46bd      	mov	sp, r7
 80193ca:	bd80      	pop	{r7, pc}
 80193cc:	2400cb74 	.word	0x2400cb74

080193d0 <ov5640_dcmi_start>:
 * @param       dts_addr        : 帧数据的接收目的地址
 *              len             : 传输的帧数据大小
 * @retval      无
 */
void ov5640_dcmi_start(ov5640_output_format_t mode,uint32_t dts_addr,uint32_t len)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b084      	sub	sp, #16
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	4603      	mov	r3, r0
 80193d8:	60b9      	str	r1, [r7, #8]
 80193da:	607a      	str	r2, [r7, #4]
 80193dc:	73fb      	strb	r3, [r7, #15]
	/* 清空帧接收完成标记
	 * 使能DCMI帧接收中断
	 */
	cam.frame_sta = 0;
 80193de:	4b23      	ldr	r3, [pc, #140]	; (801946c <ov5640_dcmi_start+0x9c>)
 80193e0:	2200      	movs	r2, #0
 80193e2:	701a      	strb	r2, [r3, #0]
	if(mode==OV5640_OUTPUT_FORMAT_RGB565)
 80193e4:	7bfb      	ldrb	r3, [r7, #15]
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d118      	bne.n	801941c <ov5640_dcmi_start+0x4c>
	{
		hdcmi.DMA_Handle->Init.MemInc = DMA_MINC_ENABLE;
 80193ea:	4b21      	ldr	r3, [pc, #132]	; (8019470 <ov5640_dcmi_start+0xa0>)
 80193ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80193ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80193f2:	611a      	str	r2, [r3, #16]
		hdcmi.DMA_Handle->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80193f4:	4b1e      	ldr	r3, [pc, #120]	; (8019470 <ov5640_dcmi_start+0xa0>)
 80193f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80193f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80193fc:	619a      	str	r2, [r3, #24]
	    __HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
 80193fe:	4b1c      	ldr	r3, [pc, #112]	; (8019470 <ov5640_dcmi_start+0xa0>)
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	68da      	ldr	r2, [r3, #12]
 8019404:	4b1a      	ldr	r3, [pc, #104]	; (8019470 <ov5640_dcmi_start+0xa0>)
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	f042 0201 	orr.w	r2, r2, #1
 801940c:	60da      	str	r2, [r3, #12]
		HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, dts_addr, len);
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	68ba      	ldr	r2, [r7, #8]
 8019412:	2102      	movs	r1, #2
 8019414:	4816      	ldr	r0, [pc, #88]	; (8019470 <ov5640_dcmi_start+0xa0>)
 8019416:	f7e8 f99f 	bl	8001758 <HAL_DCMI_Start_DMA>
 801941a:	e01a      	b.n	8019452 <ov5640_dcmi_start+0x82>
	}
	else if(mode==OV5640_OUTPUT_FORMAT_JPEG)
 801941c:	7bfb      	ldrb	r3, [r7, #15]
 801941e:	2b01      	cmp	r3, #1
 8019420:	d117      	bne.n	8019452 <ov5640_dcmi_start+0x82>
	{
		hdcmi.DMA_Handle->Init.MemInc = DMA_MINC_ENABLE;
 8019422:	4b13      	ldr	r3, [pc, #76]	; (8019470 <ov5640_dcmi_start+0xa0>)
 8019424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801942a:	611a      	str	r2, [r3, #16]
		hdcmi.DMA_Handle->Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801942c:	4b10      	ldr	r3, [pc, #64]	; (8019470 <ov5640_dcmi_start+0xa0>)
 801942e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019430:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019434:	619a      	str	r2, [r3, #24]
		__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
 8019436:	4b0e      	ldr	r3, [pc, #56]	; (8019470 <ov5640_dcmi_start+0xa0>)
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	68da      	ldr	r2, [r3, #12]
 801943c:	4b0c      	ldr	r3, [pc, #48]	; (8019470 <ov5640_dcmi_start+0xa0>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	f042 0201 	orr.w	r2, r2, #1
 8019444:	60da      	str	r2, [r3, #12]

		HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)dts_addr, len);
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	68ba      	ldr	r2, [r7, #8]
 801944a:	2102      	movs	r1, #2
 801944c:	4808      	ldr	r0, [pc, #32]	; (8019470 <ov5640_dcmi_start+0xa0>)
 801944e:	f7e8 f983 	bl	8001758 <HAL_DCMI_Start_DMA>
	}

	/* 等待传输完成 */
	while (cam.frame_sta == 0);
 8019452:	bf00      	nop
 8019454:	4b05      	ldr	r3, [pc, #20]	; (801946c <ov5640_dcmi_start+0x9c>)
 8019456:	781b      	ldrb	r3, [r3, #0]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d0fb      	beq.n	8019454 <ov5640_dcmi_start+0x84>
	HAL_DCMI_Stop(&hdcmi);
 801945c:	4804      	ldr	r0, [pc, #16]	; (8019470 <ov5640_dcmi_start+0xa0>)
 801945e:	f7e8 fa3d 	bl	80018dc <HAL_DCMI_Stop>
}
 8019462:	bf00      	nop
 8019464:	3710      	adds	r7, #16
 8019466:	46bd      	mov	sp, r7
 8019468:	bd80      	pop	{r7, pc}
 801946a:	bf00      	nop
 801946c:	2400cb74 	.word	0x2400cb74
 8019470:	240008b4 	.word	0x240008b4

08019474 <TFT_LCD_RGB565_run>:
 * @brief       例程演示入口函数
 * @param       无
 * @retval      无
 */
void TFT_LCD_RGB565_run(void)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b082      	sub	sp, #8
 8019478:	af02      	add	r7, sp, #8

	/* 获取图像数据,数据存储在framebuffer中*/
    memset((void *)framebuffer, 0, IMAGE_WIDTH*IMAGE_HEIGHT*2);
 801947a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 801947e:	2100      	movs	r1, #0
 8019480:	480a      	ldr	r0, [pc, #40]	; (80194ac <TFT_LCD_RGB565_run+0x38>)
 8019482:	f001 fe43 	bl	801b10c <memset>
    ov5640_dcmi_start(OV5640_OUTPUT_FORMAT_RGB565,(uint32_t)&framebuffer,IMAGE_WIDTH*IMAGE_HEIGHT/2 );
 8019486:	4b09      	ldr	r3, [pc, #36]	; (80194ac <TFT_LCD_RGB565_run+0x38>)
 8019488:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801948c:	4619      	mov	r1, r3
 801948e:	2000      	movs	r0, #0
 8019490:	f7ff ff9e 	bl	80193d0 <ov5640_dcmi_start>
	/* 显示至LCD */
    lcd_display_image(0,0,IMAGE_WIDTH,IMAGE_HEIGHT,framebuffer);
 8019494:	4b05      	ldr	r3, [pc, #20]	; (80194ac <TFT_LCD_RGB565_run+0x38>)
 8019496:	9300      	str	r3, [sp, #0]
 8019498:	23a0      	movs	r3, #160	; 0xa0
 801949a:	2280      	movs	r2, #128	; 0x80
 801949c:	2100      	movs	r1, #0
 801949e:	2000      	movs	r0, #0
 80194a0:	f7fe fc76 	bl	8017d90 <lcd_display_image>
//		for (width_index=0; width_index<RGB565_OUTPUT_WIDTH; width_index++)
//		{
//			ST7735_DrawPixel(width_index, height_index, framebuffer[height_index * RGB565_OUTPUT_WIDTH + width_index]);
//		}
//	}
}
 80194a4:	bf00      	nop
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bd80      	pop	{r7, pc}
 80194aa:	bf00      	nop
 80194ac:	24002b74 	.word	0x24002b74

080194b0 <ov5640_write_reg>:
 * @param       reg: 寄存器地址
 *              dat: 待写入的值
 * @retval      无
 */
static void ov5640_write_reg(uint16_t reg, uint8_t dat)
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b082      	sub	sp, #8
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	4603      	mov	r3, r0
 80194b8:	460a      	mov	r2, r1
 80194ba:	80fb      	strh	r3, [r7, #6]
 80194bc:	4613      	mov	r3, r2
 80194be:	717b      	strb	r3, [r7, #5]
    BSP_I2C2_WriteReg16(OV5640_IIC_ADDR,reg,&dat,1);
 80194c0:	1d7a      	adds	r2, r7, #5
 80194c2:	88f9      	ldrh	r1, [r7, #6]
 80194c4:	2301      	movs	r3, #1
 80194c6:	2078      	movs	r0, #120	; 0x78
 80194c8:	f001 fad4 	bl	801aa74 <BSP_I2C2_WriteReg16>
}
 80194cc:	bf00      	nop
 80194ce:	3708      	adds	r7, #8
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bd80      	pop	{r7, pc}

080194d4 <ov5640_read_reg>:
 * @brief       OV5640模块读寄存器
 * @param       reg: 寄存器的地址
 * @retval      读取到的寄存器值
 */
static uint8_t ov5640_read_reg(uint16_t reg)
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b084      	sub	sp, #16
 80194d8:	af00      	add	r7, sp, #0
 80194da:	4603      	mov	r3, r0
 80194dc:	80fb      	strh	r3, [r7, #6]
    uint8_t dat = 0;
 80194de:	2300      	movs	r3, #0
 80194e0:	73fb      	strb	r3, [r7, #15]

    BSP_I2C2_ReadReg16(OV5640_IIC_ADDR,reg,&dat,1);
 80194e2:	f107 020f 	add.w	r2, r7, #15
 80194e6:	88f9      	ldrh	r1, [r7, #6]
 80194e8:	2301      	movs	r3, #1
 80194ea:	2078      	movs	r0, #120	; 0x78
 80194ec:	f001 fadf 	bl	801aaae <BSP_I2C2_ReadReg16>

    return dat;
 80194f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80194f2:	4618      	mov	r0, r3
 80194f4:	3710      	adds	r7, #16
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}
	...

080194fc <ov5640_hw_init>:
 * @brief       OV5640模块硬件初始化
 * @param       无
 * @retval      无
 */
static void ov5640_hw_init(void)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 8019500:	2201      	movs	r2, #1
 8019502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019506:	4805      	ldr	r0, [pc, #20]	; (801951c <ov5640_hw_init+0x20>)
 8019508:	f7ec f88c 	bl	8005624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 801950c:	2201      	movs	r2, #1
 801950e:	2180      	movs	r1, #128	; 0x80
 8019510:	4803      	ldr	r0, [pc, #12]	; (8019520 <ov5640_hw_init+0x24>)
 8019512:	f7ec f887 	bl	8005624 <HAL_GPIO_WritePin>

}
 8019516:	bf00      	nop
 8019518:	bd80      	pop	{r7, pc}
 801951a:	bf00      	nop
 801951c:	58020000 	.word	0x58020000
 8019520:	58020c00 	.word	0x58020c00

08019524 <ov5640_exit_power_down>:
 * @brief       OV5640模块退出掉电模式
 * @param       无
 * @retval      无
 */
static void ov5640_exit_power_down(void)
{
 8019524:	b580      	push	{r7, lr}
 8019526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 8019528:	2200      	movs	r2, #0
 801952a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801952e:	480c      	ldr	r0, [pc, #48]	; (8019560 <ov5640_exit_power_down+0x3c>)
 8019530:	f7ec f878 	bl	8005624 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8019534:	2014      	movs	r0, #20
 8019536:	f7e7 ff55 	bl	80013e4 <HAL_Delay>
    HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_RESET);
 801953a:	2200      	movs	r2, #0
 801953c:	2180      	movs	r1, #128	; 0x80
 801953e:	4809      	ldr	r0, [pc, #36]	; (8019564 <ov5640_exit_power_down+0x40>)
 8019540:	f7ec f870 	bl	8005624 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8019544:	2005      	movs	r0, #5
 8019546:	f7e7 ff4d 	bl	80013e4 <HAL_Delay>
    HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 801954a:	2201      	movs	r2, #1
 801954c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019550:	4803      	ldr	r0, [pc, #12]	; (8019560 <ov5640_exit_power_down+0x3c>)
 8019552:	f7ec f867 	bl	8005624 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8019556:	2014      	movs	r0, #20
 8019558:	f7e7 ff44 	bl	80013e4 <HAL_Delay>
}
 801955c:	bf00      	nop
 801955e:	bd80      	pop	{r7, pc}
 8019560:	58020000 	.word	0x58020000
 8019564:	58020c00 	.word	0x58020c00

08019568 <ov5640_hw_reset>:
 * @brief       OV5640模块硬件复位
 * @param       无
 * @retval      无
 */
static void ov5640_hw_reset(void)
{
 8019568:	b580      	push	{r7, lr}
 801956a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 801956c:	2200      	movs	r2, #0
 801956e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019572:	4808      	ldr	r0, [pc, #32]	; (8019594 <ov5640_hw_reset+0x2c>)
 8019574:	f7ec f856 	bl	8005624 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8019578:	2014      	movs	r0, #20
 801957a:	f7e7 ff33 	bl	80013e4 <HAL_Delay>
    HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 801957e:	2201      	movs	r2, #1
 8019580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019584:	4803      	ldr	r0, [pc, #12]	; (8019594 <ov5640_hw_reset+0x2c>)
 8019586:	f7ec f84d 	bl	8005624 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 801958a:	2014      	movs	r0, #20
 801958c:	f7e7 ff2a 	bl	80013e4 <HAL_Delay>
}
 8019590:	bf00      	nop
 8019592:	bd80      	pop	{r7, pc}
 8019594:	58020000 	.word	0x58020000

08019598 <ov5640_sw_reset>:
 * @brief       OV5640模块软件复位
 * @param       无
 * @retval      无
 */
static void ov5640_sw_reset(void)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b082      	sub	sp, #8
 801959c:	af00      	add	r7, sp, #0
    uint8_t reg3103;
    reg3103 = ov5640_read_reg(0x3103);
 801959e:	f243 1003 	movw	r0, #12547	; 0x3103
 80195a2:	f7ff ff97 	bl	80194d4 <ov5640_read_reg>
 80195a6:	4603      	mov	r3, r0
 80195a8:	71fb      	strb	r3, [r7, #7]
    reg3103 &= ~(0x01 << 1);
 80195aa:	79fb      	ldrb	r3, [r7, #7]
 80195ac:	f023 0302 	bic.w	r3, r3, #2
 80195b0:	71fb      	strb	r3, [r7, #7]
    ov5640_write_reg(0x3103, reg3103);
 80195b2:	79fb      	ldrb	r3, [r7, #7]
 80195b4:	4619      	mov	r1, r3
 80195b6:	f243 1003 	movw	r0, #12547	; 0x3103
 80195ba:	f7ff ff79 	bl	80194b0 <ov5640_write_reg>
    ov5640_write_reg(0x3008, 0x80);
 80195be:	2180      	movs	r1, #128	; 0x80
 80195c0:	f243 0008 	movw	r0, #12296	; 0x3008
 80195c4:	f7ff ff74 	bl	80194b0 <ov5640_write_reg>
    HAL_Delay(10);
 80195c8:	200a      	movs	r0, #10
 80195ca:	f7e7 ff0b 	bl	80013e4 <HAL_Delay>
}
 80195ce:	bf00      	nop
 80195d0:	3708      	adds	r7, #8
 80195d2:	46bd      	mov	sp, r7
 80195d4:	bd80      	pop	{r7, pc}

080195d6 <ov5640_get_chip_id>:
 * @brief       获取OV5640模块芯片ID
 * @param       无
 * @retval      芯片ID
 */
static uint16_t ov5640_get_chip_id(void)
{
 80195d6:	b580      	push	{r7, lr}
 80195d8:	b082      	sub	sp, #8
 80195da:	af00      	add	r7, sp, #0
    uint16_t chip_id;

    chip_id = ov5640_read_reg(0x300A) << 8;
 80195dc:	f243 000a 	movw	r0, #12298	; 0x300a
 80195e0:	f7ff ff78 	bl	80194d4 <ov5640_read_reg>
 80195e4:	4603      	mov	r3, r0
 80195e6:	b29b      	uxth	r3, r3
 80195e8:	021b      	lsls	r3, r3, #8
 80195ea:	80fb      	strh	r3, [r7, #6]
    chip_id |= ov5640_read_reg(0x300B);
 80195ec:	f243 000b 	movw	r0, #12299	; 0x300b
 80195f0:	f7ff ff70 	bl	80194d4 <ov5640_read_reg>
 80195f4:	4603      	mov	r3, r0
 80195f6:	b29a      	uxth	r2, r3
 80195f8:	88fb      	ldrh	r3, [r7, #6]
 80195fa:	4313      	orrs	r3, r2
 80195fc:	80fb      	strh	r3, [r7, #6]

    return chip_id;
 80195fe:	88fb      	ldrh	r3, [r7, #6]
}
 8019600:	4618      	mov	r0, r3
 8019602:	3708      	adds	r7, #8
 8019604:	46bd      	mov	sp, r7
 8019606:	bd80      	pop	{r7, pc}

08019608 <ov5640_init_reg>:
 * @brief       初始化OV5640寄存器配置
 * @param       无
 * @retval      无
 */
static void ov5640_init_reg(void)
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b082      	sub	sp, #8
 801960c:	af00      	add	r7, sp, #0
    uint32_t cfg_index;

    for (cfg_index=0; cfg_index<sizeof(ov5640_init_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 801960e:	2300      	movs	r3, #0
 8019610:	607b      	str	r3, [r7, #4]
 8019612:	e021      	b.n	8019658 <ov5640_init_reg+0x50>
    {
    	if(ov5640_init_cfg[cfg_index].reg==0&&ov5640_init_cfg[cfg_index].dat==0)
 8019614:	4a15      	ldr	r2, [pc, #84]	; (801966c <ov5640_init_reg+0x64>)
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d106      	bne.n	801962e <ov5640_init_reg+0x26>
 8019620:	4a12      	ldr	r2, [pc, #72]	; (801966c <ov5640_init_reg+0x64>)
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	009b      	lsls	r3, r3, #2
 8019626:	4413      	add	r3, r2
 8019628:	789b      	ldrb	r3, [r3, #2]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d010      	beq.n	8019650 <ov5640_init_reg+0x48>
    	{
    		continue;
    	}
        ov5640_write_reg(ov5640_init_cfg[cfg_index].reg, ov5640_init_cfg[cfg_index].dat);
 801962e:	4a0f      	ldr	r2, [pc, #60]	; (801966c <ov5640_init_reg+0x64>)
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8019636:	490d      	ldr	r1, [pc, #52]	; (801966c <ov5640_init_reg+0x64>)
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	009b      	lsls	r3, r3, #2
 801963c:	440b      	add	r3, r1
 801963e:	789b      	ldrb	r3, [r3, #2]
 8019640:	4619      	mov	r1, r3
 8019642:	4610      	mov	r0, r2
 8019644:	f7ff ff34 	bl	80194b0 <ov5640_write_reg>
        HAL_Delay(1);
 8019648:	2001      	movs	r0, #1
 801964a:	f7e7 fecb 	bl	80013e4 <HAL_Delay>
 801964e:	e000      	b.n	8019652 <ov5640_init_reg+0x4a>
    		continue;
 8019650:	bf00      	nop
    for (cfg_index=0; cfg_index<sizeof(ov5640_init_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	3301      	adds	r3, #1
 8019656:	607b      	str	r3, [r7, #4]
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801965e:	d3d9      	bcc.n	8019614 <ov5640_init_reg+0xc>

    }
}
 8019660:	bf00      	nop
 8019662:	bf00      	nop
 8019664:	3708      	adds	r7, #8
 8019666:	46bd      	mov	sp, r7
 8019668:	bd80      	pop	{r7, pc}
 801966a:	bf00      	nop
 801966c:	24000234 	.word	0x24000234

08019670 <ov5640_get_output_size>:
 * @brief       获取OV5640模块输出图像尺寸
 * @param       无
 * @retval      无
 */
static void ov5640_get_output_size(void)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b082      	sub	sp, #8
 8019674:	af00      	add	r7, sp, #0
    uint8_t reg380A;
    uint8_t reg380B;
    uint16_t x_output_size;
    uint16_t y_output_size;

    HAL_Delay(100);
 8019676:	2064      	movs	r0, #100	; 0x64
 8019678:	f7e7 feb4 	bl	80013e4 <HAL_Delay>

    reg3808 = ov5640_read_reg(0x3808);
 801967c:	f643 0008 	movw	r0, #14344	; 0x3808
 8019680:	f7ff ff28 	bl	80194d4 <ov5640_read_reg>
 8019684:	4603      	mov	r3, r0
 8019686:	71fb      	strb	r3, [r7, #7]
    reg3809 = ov5640_read_reg(0x3809);
 8019688:	f643 0009 	movw	r0, #14345	; 0x3809
 801968c:	f7ff ff22 	bl	80194d4 <ov5640_read_reg>
 8019690:	4603      	mov	r3, r0
 8019692:	71bb      	strb	r3, [r7, #6]
    reg380A = ov5640_read_reg(0x380A);
 8019694:	f643 000a 	movw	r0, #14346	; 0x380a
 8019698:	f7ff ff1c 	bl	80194d4 <ov5640_read_reg>
 801969c:	4603      	mov	r3, r0
 801969e:	717b      	strb	r3, [r7, #5]
    reg380B = ov5640_read_reg(0x380B);
 80196a0:	f643 000b 	movw	r0, #14347	; 0x380b
 80196a4:	f7ff ff16 	bl	80194d4 <ov5640_read_reg>
 80196a8:	4603      	mov	r3, r0
 80196aa:	713b      	strb	r3, [r7, #4]

    x_output_size = (uint16_t)((reg3808 & 0x0F) << 8) | reg3809;
 80196ac:	79fb      	ldrb	r3, [r7, #7]
 80196ae:	b29b      	uxth	r3, r3
 80196b0:	021b      	lsls	r3, r3, #8
 80196b2:	b29b      	uxth	r3, r3
 80196b4:	b21b      	sxth	r3, r3
 80196b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80196ba:	b21a      	sxth	r2, r3
 80196bc:	79bb      	ldrb	r3, [r7, #6]
 80196be:	b21b      	sxth	r3, r3
 80196c0:	4313      	orrs	r3, r2
 80196c2:	b21b      	sxth	r3, r3
 80196c4:	807b      	strh	r3, [r7, #2]
    y_output_size = (uint16_t)((reg380A & 0x07) << 8) | reg380B;
 80196c6:	797b      	ldrb	r3, [r7, #5]
 80196c8:	b29b      	uxth	r3, r3
 80196ca:	021b      	lsls	r3, r3, #8
 80196cc:	b29b      	uxth	r3, r3
 80196ce:	b21b      	sxth	r3, r3
 80196d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80196d4:	b21a      	sxth	r2, r3
 80196d6:	793b      	ldrb	r3, [r7, #4]
 80196d8:	b21b      	sxth	r3, r3
 80196da:	4313      	orrs	r3, r2
 80196dc:	b21b      	sxth	r3, r3
 80196de:	803b      	strh	r3, [r7, #0]

    ov5640_sta.output.width = x_output_size;
 80196e0:	4a04      	ldr	r2, [pc, #16]	; (80196f4 <ov5640_get_output_size+0x84>)
 80196e2:	887b      	ldrh	r3, [r7, #2]
 80196e4:	8113      	strh	r3, [r2, #8]
    ov5640_sta.output.height = y_output_size;
 80196e6:	4a03      	ldr	r2, [pc, #12]	; (80196f4 <ov5640_get_output_size+0x84>)
 80196e8:	883b      	ldrh	r3, [r7, #0]
 80196ea:	8153      	strh	r3, [r2, #10]
}
 80196ec:	bf00      	nop
 80196ee:	3708      	adds	r7, #8
 80196f0:	46bd      	mov	sp, r7
 80196f2:	bd80      	pop	{r7, pc}
 80196f4:	2400cb78 	.word	0x2400cb78

080196f8 <ov5640_set_light_mode>:
 *                    OV5640_LIGHT_MODE_MANUAL_CLOUDY: Manual cloudy
 * @retval      OV5640_EOK   : 设置OV5640模块灯光模式成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_light_mode(ov5640_light_mode_t mode)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b082      	sub	sp, #8
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	4603      	mov	r3, r0
 8019700:	71fb      	strb	r3, [r7, #7]
    switch (mode)
 8019702:	79fb      	ldrb	r3, [r7, #7]
 8019704:	2b05      	cmp	r3, #5
 8019706:	f200 8128 	bhi.w	801995a <ov5640_set_light_mode+0x262>
 801970a:	a201      	add	r2, pc, #4	; (adr r2, 8019710 <ov5640_set_light_mode+0x18>)
 801970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019710:	08019729 	.word	0x08019729
 8019714:	08019811 	.word	0x08019811
 8019718:	0801983b 	.word	0x0801983b
 801971c:	08019883 	.word	0x08019883
 8019720:	080198cb 	.word	0x080198cb
 8019724:	08019913 	.word	0x08019913
    {
        case OV5640_LIGHT_MODE_ADVANCED_AWB:
        {
            ov5640_write_reg(0x3406, 0x00);
 8019728:	2100      	movs	r1, #0
 801972a:	f243 4006 	movw	r0, #13318	; 0x3406
 801972e:	f7ff febf 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5192, 0x04);
 8019732:	2104      	movs	r1, #4
 8019734:	f245 1092 	movw	r0, #20882	; 0x5192
 8019738:	f7ff feba 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5191, 0xF8);
 801973c:	21f8      	movs	r1, #248	; 0xf8
 801973e:	f245 1091 	movw	r0, #20881	; 0x5191
 8019742:	f7ff feb5 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5193, 0x70);
 8019746:	2170      	movs	r1, #112	; 0x70
 8019748:	f245 1093 	movw	r0, #20883	; 0x5193
 801974c:	f7ff feb0 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5194, 0xF0);
 8019750:	21f0      	movs	r1, #240	; 0xf0
 8019752:	f245 1094 	movw	r0, #20884	; 0x5194
 8019756:	f7ff feab 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5195, 0xF0);
 801975a:	21f0      	movs	r1, #240	; 0xf0
 801975c:	f245 1095 	movw	r0, #20885	; 0x5195
 8019760:	f7ff fea6 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x518D, 0x3D);
 8019764:	213d      	movs	r1, #61	; 0x3d
 8019766:	f245 108d 	movw	r0, #20877	; 0x518d
 801976a:	f7ff fea1 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x518F, 0x54);
 801976e:	2154      	movs	r1, #84	; 0x54
 8019770:	f245 108f 	movw	r0, #20879	; 0x518f
 8019774:	f7ff fe9c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x518E, 0x3D);
 8019778:	213d      	movs	r1, #61	; 0x3d
 801977a:	f245 108e 	movw	r0, #20878	; 0x518e
 801977e:	f7ff fe97 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5190, 0x54);
 8019782:	2154      	movs	r1, #84	; 0x54
 8019784:	f245 1090 	movw	r0, #20880	; 0x5190
 8019788:	f7ff fe92 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x518B, 0xA8);
 801978c:	21a8      	movs	r1, #168	; 0xa8
 801978e:	f245 108b 	movw	r0, #20875	; 0x518b
 8019792:	f7ff fe8d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x518C, 0xA8);
 8019796:	21a8      	movs	r1, #168	; 0xa8
 8019798:	f245 108c 	movw	r0, #20876	; 0x518c
 801979c:	f7ff fe88 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5187, 0x18);
 80197a0:	2118      	movs	r1, #24
 80197a2:	f245 1087 	movw	r0, #20871	; 0x5187
 80197a6:	f7ff fe83 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5188, 0x18);
 80197aa:	2118      	movs	r1, #24
 80197ac:	f245 1088 	movw	r0, #20872	; 0x5188
 80197b0:	f7ff fe7e 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5189, 0x6E);
 80197b4:	216e      	movs	r1, #110	; 0x6e
 80197b6:	f245 1089 	movw	r0, #20873	; 0x5189
 80197ba:	f7ff fe79 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x518A, 0x68);
 80197be:	2168      	movs	r1, #104	; 0x68
 80197c0:	f245 108a 	movw	r0, #20874	; 0x518a
 80197c4:	f7ff fe74 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5186, 0x1C);
 80197c8:	211c      	movs	r1, #28
 80197ca:	f245 1086 	movw	r0, #20870	; 0x5186
 80197ce:	f7ff fe6f 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5181, 0x50);
 80197d2:	2150      	movs	r1, #80	; 0x50
 80197d4:	f245 1081 	movw	r0, #20865	; 0x5181
 80197d8:	f7ff fe6a 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5184, 0x25);
 80197dc:	2125      	movs	r1, #37	; 0x25
 80197de:	f245 1084 	movw	r0, #20868	; 0x5184
 80197e2:	f7ff fe65 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5182, 0x11);
 80197e6:	2111      	movs	r1, #17
 80197e8:	f245 1082 	movw	r0, #20866	; 0x5182
 80197ec:	f7ff fe60 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5183, 0x14);
 80197f0:	2114      	movs	r1, #20
 80197f2:	f245 1083 	movw	r0, #20867	; 0x5183
 80197f6:	f7ff fe5b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5184, 0x25);
 80197fa:	2125      	movs	r1, #37	; 0x25
 80197fc:	f245 1084 	movw	r0, #20868	; 0x5184
 8019800:	f7ff fe56 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5185, 0x24);
 8019804:	2124      	movs	r1, #36	; 0x24
 8019806:	f245 1085 	movw	r0, #20869	; 0x5185
 801980a:	f7ff fe51 	bl	80194b0 <ov5640_write_reg>
            break;
 801980e:	e0a6      	b.n	801995e <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_SIMPLE_AWB:
        {
            ov5640_write_reg(0x3406, 0x00);
 8019810:	2100      	movs	r1, #0
 8019812:	f243 4006 	movw	r0, #13318	; 0x3406
 8019816:	f7ff fe4b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5183, 0x94);
 801981a:	2194      	movs	r1, #148	; 0x94
 801981c:	f245 1083 	movw	r0, #20867	; 0x5183
 8019820:	f7ff fe46 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5191, 0xFF);
 8019824:	21ff      	movs	r1, #255	; 0xff
 8019826:	f245 1091 	movw	r0, #20881	; 0x5191
 801982a:	f7ff fe41 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5192, 0x00);
 801982e:	2100      	movs	r1, #0
 8019830:	f245 1092 	movw	r0, #20882	; 0x5192
 8019834:	f7ff fe3c 	bl	80194b0 <ov5640_write_reg>
            break;
 8019838:	e091      	b.n	801995e <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_DAY:
        {
            ov5640_write_reg(0x3406, 0x01);
 801983a:	2101      	movs	r1, #1
 801983c:	f243 4006 	movw	r0, #13318	; 0x3406
 8019840:	f7ff fe36 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x06);
 8019844:	2106      	movs	r1, #6
 8019846:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 801984a:	f7ff fe31 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x1C);
 801984e:	211c      	movs	r1, #28
 8019850:	f243 4001 	movw	r0, #13313	; 0x3401
 8019854:	f7ff fe2c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 8019858:	2104      	movs	r1, #4
 801985a:	f243 4002 	movw	r0, #13314	; 0x3402
 801985e:	f7ff fe27 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 8019862:	2100      	movs	r1, #0
 8019864:	f243 4003 	movw	r0, #13315	; 0x3403
 8019868:	f7ff fe22 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x04);
 801986c:	2104      	movs	r1, #4
 801986e:	f243 4004 	movw	r0, #13316	; 0x3404
 8019872:	f7ff fe1d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xF3);
 8019876:	21f3      	movs	r1, #243	; 0xf3
 8019878:	f243 4005 	movw	r0, #13317	; 0x3405
 801987c:	f7ff fe18 	bl	80194b0 <ov5640_write_reg>
            break;
 8019880:	e06d      	b.n	801995e <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_A:
        {
            ov5640_write_reg(0x3406, 0x01);
 8019882:	2101      	movs	r1, #1
 8019884:	f243 4006 	movw	r0, #13318	; 0x3406
 8019888:	f7ff fe12 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x04);
 801988c:	2104      	movs	r1, #4
 801988e:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8019892:	f7ff fe0d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x10);
 8019896:	2110      	movs	r1, #16
 8019898:	f243 4001 	movw	r0, #13313	; 0x3401
 801989c:	f7ff fe08 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 80198a0:	2104      	movs	r1, #4
 80198a2:	f243 4002 	movw	r0, #13314	; 0x3402
 80198a6:	f7ff fe03 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 80198aa:	2100      	movs	r1, #0
 80198ac:	f243 4003 	movw	r0, #13315	; 0x3403
 80198b0:	f7ff fdfe 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x08);
 80198b4:	2108      	movs	r1, #8
 80198b6:	f243 4004 	movw	r0, #13316	; 0x3404
 80198ba:	f7ff fdf9 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xB6);
 80198be:	21b6      	movs	r1, #182	; 0xb6
 80198c0:	f243 4005 	movw	r0, #13317	; 0x3405
 80198c4:	f7ff fdf4 	bl	80194b0 <ov5640_write_reg>
            break;
 80198c8:	e049      	b.n	801995e <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_CWF:
        {
            ov5640_write_reg(0x3406, 0x01);
 80198ca:	2101      	movs	r1, #1
 80198cc:	f243 4006 	movw	r0, #13318	; 0x3406
 80198d0:	f7ff fdee 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x05);
 80198d4:	2105      	movs	r1, #5
 80198d6:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 80198da:	f7ff fde9 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x48);
 80198de:	2148      	movs	r1, #72	; 0x48
 80198e0:	f243 4001 	movw	r0, #13313	; 0x3401
 80198e4:	f7ff fde4 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 80198e8:	2104      	movs	r1, #4
 80198ea:	f243 4002 	movw	r0, #13314	; 0x3402
 80198ee:	f7ff fddf 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 80198f2:	2100      	movs	r1, #0
 80198f4:	f243 4003 	movw	r0, #13315	; 0x3403
 80198f8:	f7ff fdda 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x07);
 80198fc:	2107      	movs	r1, #7
 80198fe:	f243 4004 	movw	r0, #13316	; 0x3404
 8019902:	f7ff fdd5 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xCF);
 8019906:	21cf      	movs	r1, #207	; 0xcf
 8019908:	f243 4005 	movw	r0, #13317	; 0x3405
 801990c:	f7ff fdd0 	bl	80194b0 <ov5640_write_reg>
            break;
 8019910:	e025      	b.n	801995e <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_CLOUDY:
        {
            ov5640_write_reg(0x3406, 0x01);
 8019912:	2101      	movs	r1, #1
 8019914:	f243 4006 	movw	r0, #13318	; 0x3406
 8019918:	f7ff fdca 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x06);
 801991c:	2106      	movs	r1, #6
 801991e:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8019922:	f7ff fdc5 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x48);
 8019926:	2148      	movs	r1, #72	; 0x48
 8019928:	f243 4001 	movw	r0, #13313	; 0x3401
 801992c:	f7ff fdc0 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 8019930:	2104      	movs	r1, #4
 8019932:	f243 4002 	movw	r0, #13314	; 0x3402
 8019936:	f7ff fdbb 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 801993a:	2100      	movs	r1, #0
 801993c:	f243 4003 	movw	r0, #13315	; 0x3403
 8019940:	f7ff fdb6 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x04);
 8019944:	2104      	movs	r1, #4
 8019946:	f243 4004 	movw	r0, #13316	; 0x3404
 801994a:	f7ff fdb1 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xD3);
 801994e:	21d3      	movs	r1, #211	; 0xd3
 8019950:	f243 4005 	movw	r0, #13317	; 0x3405
 8019954:	f7ff fdac 	bl	80194b0 <ov5640_write_reg>
            break;
 8019958:	e001      	b.n	801995e <ov5640_set_light_mode+0x266>
        }
        default:
        {
            return OV5640_EINVAL;
 801995a:	2302      	movs	r3, #2
 801995c:	e000      	b.n	8019960 <ov5640_set_light_mode+0x268>
        }
    }

    return OV5640_EOK;
 801995e:	2300      	movs	r3, #0
}
 8019960:	4618      	mov	r0, r3
 8019962:	3708      	adds	r7, #8
 8019964:	46bd      	mov	sp, r7
 8019966:	bd80      	pop	{r7, pc}

08019968 <ov5640_set_color_saturation>:
 *                          OV5640_COLOR_SATURATION_8: -4
 * @retval      OV5640_EOK   : 设置OV5640模块色彩饱和度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_color_saturation(ov5640_color_saturation_t saturation)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b082      	sub	sp, #8
 801996c:	af00      	add	r7, sp, #0
 801996e:	4603      	mov	r3, r0
 8019970:	71fb      	strb	r3, [r7, #7]
    switch (saturation)
 8019972:	79fb      	ldrb	r3, [r7, #7]
 8019974:	2b08      	cmp	r3, #8
 8019976:	f200 80ff 	bhi.w	8019b78 <ov5640_set_color_saturation+0x210>
 801997a:	a201      	add	r2, pc, #4	; (adr r2, 8019980 <ov5640_set_color_saturation+0x18>)
 801997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019980:	080199a5 	.word	0x080199a5
 8019984:	080199d9 	.word	0x080199d9
 8019988:	08019a0d 	.word	0x08019a0d
 801998c:	08019a41 	.word	0x08019a41
 8019990:	08019a75 	.word	0x08019a75
 8019994:	08019aa9 	.word	0x08019aa9
 8019998:	08019add 	.word	0x08019add
 801999c:	08019b11 	.word	0x08019b11
 80199a0:	08019b45 	.word	0x08019b45
    {
        case OV5640_COLOR_SATURATION_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80199a4:	21ff      	movs	r1, #255	; 0xff
 80199a6:	f245 0001 	movw	r0, #20481	; 0x5001
 80199aa:	f7ff fd81 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x80);
 80199ae:	2180      	movs	r1, #128	; 0x80
 80199b0:	f245 5083 	movw	r0, #21891	; 0x5583
 80199b4:	f7ff fd7c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x80);
 80199b8:	2180      	movs	r1, #128	; 0x80
 80199ba:	f245 5084 	movw	r0, #21892	; 0x5584
 80199be:	f7ff fd77 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 80199c2:	2102      	movs	r1, #2
 80199c4:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80199c8:	f7ff fd72 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 80199cc:	2141      	movs	r1, #65	; 0x41
 80199ce:	f245 5088 	movw	r0, #21896	; 0x5588
 80199d2:	f7ff fd6d 	bl	80194b0 <ov5640_write_reg>
            break;
 80199d6:	e0d1      	b.n	8019b7c <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80199d8:	21ff      	movs	r1, #255	; 0xff
 80199da:	f245 0001 	movw	r0, #20481	; 0x5001
 80199de:	f7ff fd67 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x70);
 80199e2:	2170      	movs	r1, #112	; 0x70
 80199e4:	f245 5083 	movw	r0, #21891	; 0x5583
 80199e8:	f7ff fd62 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x70);
 80199ec:	2170      	movs	r1, #112	; 0x70
 80199ee:	f245 5084 	movw	r0, #21892	; 0x5584
 80199f2:	f7ff fd5d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 80199f6:	2102      	movs	r1, #2
 80199f8:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80199fc:	f7ff fd58 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019a00:	2141      	movs	r1, #65	; 0x41
 8019a02:	f245 5088 	movw	r0, #21896	; 0x5588
 8019a06:	f7ff fd53 	bl	80194b0 <ov5640_write_reg>
            break;
 8019a0a:	e0b7      	b.n	8019b7c <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019a0c:	21ff      	movs	r1, #255	; 0xff
 8019a0e:	f245 0001 	movw	r0, #20481	; 0x5001
 8019a12:	f7ff fd4d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x60);
 8019a16:	2160      	movs	r1, #96	; 0x60
 8019a18:	f245 5083 	movw	r0, #21891	; 0x5583
 8019a1c:	f7ff fd48 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x60);
 8019a20:	2160      	movs	r1, #96	; 0x60
 8019a22:	f245 5084 	movw	r0, #21892	; 0x5584
 8019a26:	f7ff fd43 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019a2a:	2102      	movs	r1, #2
 8019a2c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019a30:	f7ff fd3e 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019a34:	2141      	movs	r1, #65	; 0x41
 8019a36:	f245 5088 	movw	r0, #21896	; 0x5588
 8019a3a:	f7ff fd39 	bl	80194b0 <ov5640_write_reg>
            break;
 8019a3e:	e09d      	b.n	8019b7c <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019a40:	21ff      	movs	r1, #255	; 0xff
 8019a42:	f245 0001 	movw	r0, #20481	; 0x5001
 8019a46:	f7ff fd33 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x50);
 8019a4a:	2150      	movs	r1, #80	; 0x50
 8019a4c:	f245 5083 	movw	r0, #21891	; 0x5583
 8019a50:	f7ff fd2e 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x50);
 8019a54:	2150      	movs	r1, #80	; 0x50
 8019a56:	f245 5084 	movw	r0, #21892	; 0x5584
 8019a5a:	f7ff fd29 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019a5e:	2102      	movs	r1, #2
 8019a60:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019a64:	f7ff fd24 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019a68:	2141      	movs	r1, #65	; 0x41
 8019a6a:	f245 5088 	movw	r0, #21896	; 0x5588
 8019a6e:	f7ff fd1f 	bl	80194b0 <ov5640_write_reg>
            break;
 8019a72:	e083      	b.n	8019b7c <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_4:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019a74:	21ff      	movs	r1, #255	; 0xff
 8019a76:	f245 0001 	movw	r0, #20481	; 0x5001
 8019a7a:	f7ff fd19 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x40);
 8019a7e:	2140      	movs	r1, #64	; 0x40
 8019a80:	f245 5083 	movw	r0, #21891	; 0x5583
 8019a84:	f7ff fd14 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x40);
 8019a88:	2140      	movs	r1, #64	; 0x40
 8019a8a:	f245 5084 	movw	r0, #21892	; 0x5584
 8019a8e:	f7ff fd0f 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019a92:	2102      	movs	r1, #2
 8019a94:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019a98:	f7ff fd0a 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019a9c:	2141      	movs	r1, #65	; 0x41
 8019a9e:	f245 5088 	movw	r0, #21896	; 0x5588
 8019aa2:	f7ff fd05 	bl	80194b0 <ov5640_write_reg>
            break;
 8019aa6:	e069      	b.n	8019b7c <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019aa8:	21ff      	movs	r1, #255	; 0xff
 8019aaa:	f245 0001 	movw	r0, #20481	; 0x5001
 8019aae:	f7ff fcff 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x30);
 8019ab2:	2130      	movs	r1, #48	; 0x30
 8019ab4:	f245 5083 	movw	r0, #21891	; 0x5583
 8019ab8:	f7ff fcfa 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x30);
 8019abc:	2130      	movs	r1, #48	; 0x30
 8019abe:	f245 5084 	movw	r0, #21892	; 0x5584
 8019ac2:	f7ff fcf5 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019ac6:	2102      	movs	r1, #2
 8019ac8:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019acc:	f7ff fcf0 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019ad0:	2141      	movs	r1, #65	; 0x41
 8019ad2:	f245 5088 	movw	r0, #21896	; 0x5588
 8019ad6:	f7ff fceb 	bl	80194b0 <ov5640_write_reg>
            break;
 8019ada:	e04f      	b.n	8019b7c <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019adc:	21ff      	movs	r1, #255	; 0xff
 8019ade:	f245 0001 	movw	r0, #20481	; 0x5001
 8019ae2:	f7ff fce5 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x20);
 8019ae6:	2120      	movs	r1, #32
 8019ae8:	f245 5083 	movw	r0, #21891	; 0x5583
 8019aec:	f7ff fce0 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x20);
 8019af0:	2120      	movs	r1, #32
 8019af2:	f245 5084 	movw	r0, #21892	; 0x5584
 8019af6:	f7ff fcdb 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019afa:	2102      	movs	r1, #2
 8019afc:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019b00:	f7ff fcd6 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019b04:	2141      	movs	r1, #65	; 0x41
 8019b06:	f245 5088 	movw	r0, #21896	; 0x5588
 8019b0a:	f7ff fcd1 	bl	80194b0 <ov5640_write_reg>
            break;
 8019b0e:	e035      	b.n	8019b7c <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019b10:	21ff      	movs	r1, #255	; 0xff
 8019b12:	f245 0001 	movw	r0, #20481	; 0x5001
 8019b16:	f7ff fccb 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x10);
 8019b1a:	2110      	movs	r1, #16
 8019b1c:	f245 5083 	movw	r0, #21891	; 0x5583
 8019b20:	f7ff fcc6 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x10);
 8019b24:	2110      	movs	r1, #16
 8019b26:	f245 5084 	movw	r0, #21892	; 0x5584
 8019b2a:	f7ff fcc1 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019b2e:	2102      	movs	r1, #2
 8019b30:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019b34:	f7ff fcbc 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019b38:	2141      	movs	r1, #65	; 0x41
 8019b3a:	f245 5088 	movw	r0, #21896	; 0x5588
 8019b3e:	f7ff fcb7 	bl	80194b0 <ov5640_write_reg>
            break;
 8019b42:	e01b      	b.n	8019b7c <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019b44:	21ff      	movs	r1, #255	; 0xff
 8019b46:	f245 0001 	movw	r0, #20481	; 0x5001
 8019b4a:	f7ff fcb1 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x00);
 8019b4e:	2100      	movs	r1, #0
 8019b50:	f245 5083 	movw	r0, #21891	; 0x5583
 8019b54:	f7ff fcac 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x00);
 8019b58:	2100      	movs	r1, #0
 8019b5a:	f245 5084 	movw	r0, #21892	; 0x5584
 8019b5e:	f7ff fca7 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 8019b62:	2102      	movs	r1, #2
 8019b64:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019b68:	f7ff fca2 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019b6c:	2141      	movs	r1, #65	; 0x41
 8019b6e:	f245 5088 	movw	r0, #21896	; 0x5588
 8019b72:	f7ff fc9d 	bl	80194b0 <ov5640_write_reg>
            break;
 8019b76:	e001      	b.n	8019b7c <ov5640_set_color_saturation+0x214>
        }
        default:
        {
            return OV5640_EINVAL;
 8019b78:	2302      	movs	r3, #2
 8019b7a:	e000      	b.n	8019b7e <ov5640_set_color_saturation+0x216>
        }
    }

    return OV5640_EOK;
 8019b7c:	2300      	movs	r3, #0
}
 8019b7e:	4618      	mov	r0, r3
 8019b80:	3708      	adds	r7, #8
 8019b82:	46bd      	mov	sp, r7
 8019b84:	bd80      	pop	{r7, pc}
 8019b86:	bf00      	nop

08019b88 <ov5640_set_brightness>:
 *                          OV5640_BRIGHTNESS_8: -4
 * @retval      OV5640_EOK   : 设置OV5640模块亮度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_brightness(ov5640_brightness_t brightness)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b082      	sub	sp, #8
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	4603      	mov	r3, r0
 8019b90:	71fb      	strb	r3, [r7, #7]
    switch (brightness)
 8019b92:	79fb      	ldrb	r3, [r7, #7]
 8019b94:	2b08      	cmp	r3, #8
 8019b96:	f200 80d2 	bhi.w	8019d3e <ov5640_set_brightness+0x1b6>
 8019b9a:	a201      	add	r2, pc, #4	; (adr r2, 8019ba0 <ov5640_set_brightness+0x18>)
 8019b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ba0:	08019bc5 	.word	0x08019bc5
 8019ba4:	08019bef 	.word	0x08019bef
 8019ba8:	08019c19 	.word	0x08019c19
 8019bac:	08019c43 	.word	0x08019c43
 8019bb0:	08019c6d 	.word	0x08019c6d
 8019bb4:	08019c97 	.word	0x08019c97
 8019bb8:	08019cc1 	.word	0x08019cc1
 8019bbc:	08019ceb 	.word	0x08019ceb
 8019bc0:	08019d15 	.word	0x08019d15
    {
        case OV5640_BRIGHTNESS_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019bc4:	21ff      	movs	r1, #255	; 0xff
 8019bc6:	f245 0001 	movw	r0, #20481	; 0x5001
 8019bca:	f7ff fc71 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x40);
 8019bce:	2140      	movs	r1, #64	; 0x40
 8019bd0:	f245 5087 	movw	r0, #21895	; 0x5587
 8019bd4:	f7ff fc6c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019bd8:	2104      	movs	r1, #4
 8019bda:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019bde:	f7ff fc67 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8019be2:	2101      	movs	r1, #1
 8019be4:	f245 5088 	movw	r0, #21896	; 0x5588
 8019be8:	f7ff fc62 	bl	80194b0 <ov5640_write_reg>
            break;
 8019bec:	e0a9      	b.n	8019d42 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019bee:	21ff      	movs	r1, #255	; 0xff
 8019bf0:	f245 0001 	movw	r0, #20481	; 0x5001
 8019bf4:	f7ff fc5c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x30);
 8019bf8:	2130      	movs	r1, #48	; 0x30
 8019bfa:	f245 5087 	movw	r0, #21895	; 0x5587
 8019bfe:	f7ff fc57 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019c02:	2104      	movs	r1, #4
 8019c04:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019c08:	f7ff fc52 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8019c0c:	2101      	movs	r1, #1
 8019c0e:	f245 5088 	movw	r0, #21896	; 0x5588
 8019c12:	f7ff fc4d 	bl	80194b0 <ov5640_write_reg>
            break;
 8019c16:	e094      	b.n	8019d42 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019c18:	21ff      	movs	r1, #255	; 0xff
 8019c1a:	f245 0001 	movw	r0, #20481	; 0x5001
 8019c1e:	f7ff fc47 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x20);
 8019c22:	2120      	movs	r1, #32
 8019c24:	f245 5087 	movw	r0, #21895	; 0x5587
 8019c28:	f7ff fc42 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019c2c:	2104      	movs	r1, #4
 8019c2e:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019c32:	f7ff fc3d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8019c36:	2101      	movs	r1, #1
 8019c38:	f245 5088 	movw	r0, #21896	; 0x5588
 8019c3c:	f7ff fc38 	bl	80194b0 <ov5640_write_reg>
            break;
 8019c40:	e07f      	b.n	8019d42 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019c42:	21ff      	movs	r1, #255	; 0xff
 8019c44:	f245 0001 	movw	r0, #20481	; 0x5001
 8019c48:	f7ff fc32 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x10);
 8019c4c:	2110      	movs	r1, #16
 8019c4e:	f245 5087 	movw	r0, #21895	; 0x5587
 8019c52:	f7ff fc2d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019c56:	2104      	movs	r1, #4
 8019c58:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019c5c:	f7ff fc28 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8019c60:	2101      	movs	r1, #1
 8019c62:	f245 5088 	movw	r0, #21896	; 0x5588
 8019c66:	f7ff fc23 	bl	80194b0 <ov5640_write_reg>
            break;
 8019c6a:	e06a      	b.n	8019d42 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_4:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019c6c:	21ff      	movs	r1, #255	; 0xff
 8019c6e:	f245 0001 	movw	r0, #20481	; 0x5001
 8019c72:	f7ff fc1d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x00);
 8019c76:	2100      	movs	r1, #0
 8019c78:	f245 5087 	movw	r0, #21895	; 0x5587
 8019c7c:	f7ff fc18 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019c80:	2104      	movs	r1, #4
 8019c82:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019c86:	f7ff fc13 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8019c8a:	2101      	movs	r1, #1
 8019c8c:	f245 5088 	movw	r0, #21896	; 0x5588
 8019c90:	f7ff fc0e 	bl	80194b0 <ov5640_write_reg>
            break;
 8019c94:	e055      	b.n	8019d42 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019c96:	21ff      	movs	r1, #255	; 0xff
 8019c98:	f245 0001 	movw	r0, #20481	; 0x5001
 8019c9c:	f7ff fc08 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x10);
 8019ca0:	2110      	movs	r1, #16
 8019ca2:	f245 5087 	movw	r0, #21895	; 0x5587
 8019ca6:	f7ff fc03 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019caa:	2104      	movs	r1, #4
 8019cac:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019cb0:	f7ff fbfe 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 8019cb4:	2109      	movs	r1, #9
 8019cb6:	f245 5088 	movw	r0, #21896	; 0x5588
 8019cba:	f7ff fbf9 	bl	80194b0 <ov5640_write_reg>
            break;
 8019cbe:	e040      	b.n	8019d42 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019cc0:	21ff      	movs	r1, #255	; 0xff
 8019cc2:	f245 0001 	movw	r0, #20481	; 0x5001
 8019cc6:	f7ff fbf3 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x20);
 8019cca:	2120      	movs	r1, #32
 8019ccc:	f245 5087 	movw	r0, #21895	; 0x5587
 8019cd0:	f7ff fbee 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019cd4:	2104      	movs	r1, #4
 8019cd6:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019cda:	f7ff fbe9 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 8019cde:	2109      	movs	r1, #9
 8019ce0:	f245 5088 	movw	r0, #21896	; 0x5588
 8019ce4:	f7ff fbe4 	bl	80194b0 <ov5640_write_reg>
            break;
 8019ce8:	e02b      	b.n	8019d42 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019cea:	21ff      	movs	r1, #255	; 0xff
 8019cec:	f245 0001 	movw	r0, #20481	; 0x5001
 8019cf0:	f7ff fbde 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x30);
 8019cf4:	2130      	movs	r1, #48	; 0x30
 8019cf6:	f245 5087 	movw	r0, #21895	; 0x5587
 8019cfa:	f7ff fbd9 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019cfe:	2104      	movs	r1, #4
 8019d00:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019d04:	f7ff fbd4 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 8019d08:	2109      	movs	r1, #9
 8019d0a:	f245 5088 	movw	r0, #21896	; 0x5588
 8019d0e:	f7ff fbcf 	bl	80194b0 <ov5640_write_reg>
            break;
 8019d12:	e016      	b.n	8019d42 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019d14:	21ff      	movs	r1, #255	; 0xff
 8019d16:	f245 0001 	movw	r0, #20481	; 0x5001
 8019d1a:	f7ff fbc9 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x40);
 8019d1e:	2140      	movs	r1, #64	; 0x40
 8019d20:	f245 5087 	movw	r0, #21895	; 0x5587
 8019d24:	f7ff fbc4 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019d28:	2104      	movs	r1, #4
 8019d2a:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019d2e:	f7ff fbbf 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 8019d32:	2109      	movs	r1, #9
 8019d34:	f245 5088 	movw	r0, #21896	; 0x5588
 8019d38:	f7ff fbba 	bl	80194b0 <ov5640_write_reg>
            break;
 8019d3c:	e001      	b.n	8019d42 <ov5640_set_brightness+0x1ba>
        }
        default:
        {
            return OV5640_EINVAL;
 8019d3e:	2302      	movs	r3, #2
 8019d40:	e000      	b.n	8019d44 <ov5640_set_brightness+0x1bc>
        }
    }

    return OV5640_EOK;
 8019d42:	2300      	movs	r3, #0
}
 8019d44:	4618      	mov	r0, r3
 8019d46:	3708      	adds	r7, #8
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	bd80      	pop	{r7, pc}

08019d4c <ov5640_set_contrast>:
 *                        OV5640_CONTRAST_8: -4
 * @retval      OV5640_EOK   : 设置OV5640模块对比度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_contrast(ov5640_contrast_t contrast)
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b082      	sub	sp, #8
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	4603      	mov	r3, r0
 8019d54:	71fb      	strb	r3, [r7, #7]
    switch (contrast)
 8019d56:	79fb      	ldrb	r3, [r7, #7]
 8019d58:	2b08      	cmp	r3, #8
 8019d5a:	f200 810e 	bhi.w	8019f7a <ov5640_set_contrast+0x22e>
 8019d5e:	a201      	add	r2, pc, #4	; (adr r2, 8019d64 <ov5640_set_contrast+0x18>)
 8019d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d64:	08019d89 	.word	0x08019d89
 8019d68:	08019dbd 	.word	0x08019dbd
 8019d6c:	08019df1 	.word	0x08019df1
 8019d70:	08019e25 	.word	0x08019e25
 8019d74:	08019e59 	.word	0x08019e59
 8019d78:	08019eab 	.word	0x08019eab
 8019d7c:	08019edf 	.word	0x08019edf
 8019d80:	08019f13 	.word	0x08019f13
 8019d84:	08019f47 	.word	0x08019f47
    {
        case OV5640_CONTRAST_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019d88:	21ff      	movs	r1, #255	; 0xff
 8019d8a:	f245 0001 	movw	r0, #20481	; 0x5001
 8019d8e:	f7ff fb8f 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019d92:	2104      	movs	r1, #4
 8019d94:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019d98:	f7ff fb8a 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x30);
 8019d9c:	2130      	movs	r1, #48	; 0x30
 8019d9e:	f245 5086 	movw	r0, #21894	; 0x5586
 8019da2:	f7ff fb85 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x30);
 8019da6:	2130      	movs	r1, #48	; 0x30
 8019da8:	f245 5085 	movw	r0, #21893	; 0x5585
 8019dac:	f7ff fb80 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019db0:	2141      	movs	r1, #65	; 0x41
 8019db2:	f245 5088 	movw	r0, #21896	; 0x5588
 8019db6:	f7ff fb7b 	bl	80194b0 <ov5640_write_reg>
            break;
 8019dba:	e0e0      	b.n	8019f7e <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019dbc:	21ff      	movs	r1, #255	; 0xff
 8019dbe:	f245 0001 	movw	r0, #20481	; 0x5001
 8019dc2:	f7ff fb75 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019dc6:	2104      	movs	r1, #4
 8019dc8:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019dcc:	f7ff fb70 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x2C);
 8019dd0:	212c      	movs	r1, #44	; 0x2c
 8019dd2:	f245 5086 	movw	r0, #21894	; 0x5586
 8019dd6:	f7ff fb6b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x2C);
 8019dda:	212c      	movs	r1, #44	; 0x2c
 8019ddc:	f245 5085 	movw	r0, #21893	; 0x5585
 8019de0:	f7ff fb66 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019de4:	2141      	movs	r1, #65	; 0x41
 8019de6:	f245 5088 	movw	r0, #21896	; 0x5588
 8019dea:	f7ff fb61 	bl	80194b0 <ov5640_write_reg>
            break;
 8019dee:	e0c6      	b.n	8019f7e <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019df0:	21ff      	movs	r1, #255	; 0xff
 8019df2:	f245 0001 	movw	r0, #20481	; 0x5001
 8019df6:	f7ff fb5b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019dfa:	2104      	movs	r1, #4
 8019dfc:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019e00:	f7ff fb56 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x28);
 8019e04:	2128      	movs	r1, #40	; 0x28
 8019e06:	f245 5086 	movw	r0, #21894	; 0x5586
 8019e0a:	f7ff fb51 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x28);
 8019e0e:	2128      	movs	r1, #40	; 0x28
 8019e10:	f245 5085 	movw	r0, #21893	; 0x5585
 8019e14:	f7ff fb4c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019e18:	2141      	movs	r1, #65	; 0x41
 8019e1a:	f245 5088 	movw	r0, #21896	; 0x5588
 8019e1e:	f7ff fb47 	bl	80194b0 <ov5640_write_reg>
            break;
 8019e22:	e0ac      	b.n	8019f7e <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019e24:	21ff      	movs	r1, #255	; 0xff
 8019e26:	f245 0001 	movw	r0, #20481	; 0x5001
 8019e2a:	f7ff fb41 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019e2e:	2104      	movs	r1, #4
 8019e30:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019e34:	f7ff fb3c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x24);
 8019e38:	2124      	movs	r1, #36	; 0x24
 8019e3a:	f245 5086 	movw	r0, #21894	; 0x5586
 8019e3e:	f7ff fb37 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x24);
 8019e42:	2124      	movs	r1, #36	; 0x24
 8019e44:	f245 5085 	movw	r0, #21893	; 0x5585
 8019e48:	f7ff fb32 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019e4c:	2141      	movs	r1, #65	; 0x41
 8019e4e:	f245 5088 	movw	r0, #21896	; 0x5588
 8019e52:	f7ff fb2d 	bl	80194b0 <ov5640_write_reg>
            break;
 8019e56:	e092      	b.n	8019f7e <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_4:
        {
        	ov5640_write_reg(0x3212, 0x03);
 8019e58:	2103      	movs	r1, #3
 8019e5a:	f243 2012 	movw	r0, #12818	; 0x3212
 8019e5e:	f7ff fb27 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5001, 0xFF);
 8019e62:	21ff      	movs	r1, #255	; 0xff
 8019e64:	f245 0001 	movw	r0, #20481	; 0x5001
 8019e68:	f7ff fb22 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019e6c:	2104      	movs	r1, #4
 8019e6e:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019e72:	f7ff fb1d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x20);
 8019e76:	2120      	movs	r1, #32
 8019e78:	f245 5086 	movw	r0, #21894	; 0x5586
 8019e7c:	f7ff fb18 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x20);
 8019e80:	2120      	movs	r1, #32
 8019e82:	f245 5085 	movw	r0, #21893	; 0x5585
 8019e86:	f7ff fb13 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019e8a:	2141      	movs	r1, #65	; 0x41
 8019e8c:	f245 5088 	movw	r0, #21896	; 0x5588
 8019e90:	f7ff fb0e 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3212, 0x13);
 8019e94:	2113      	movs	r1, #19
 8019e96:	f243 2012 	movw	r0, #12818	; 0x3212
 8019e9a:	f7ff fb09 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3212, 0xa3);
 8019e9e:	21a3      	movs	r1, #163	; 0xa3
 8019ea0:	f243 2012 	movw	r0, #12818	; 0x3212
 8019ea4:	f7ff fb04 	bl	80194b0 <ov5640_write_reg>
            break;
 8019ea8:	e069      	b.n	8019f7e <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019eaa:	21ff      	movs	r1, #255	; 0xff
 8019eac:	f245 0001 	movw	r0, #20481	; 0x5001
 8019eb0:	f7ff fafe 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019eb4:	2104      	movs	r1, #4
 8019eb6:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019eba:	f7ff faf9 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x1C);
 8019ebe:	211c      	movs	r1, #28
 8019ec0:	f245 5086 	movw	r0, #21894	; 0x5586
 8019ec4:	f7ff faf4 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x1C);
 8019ec8:	211c      	movs	r1, #28
 8019eca:	f245 5085 	movw	r0, #21893	; 0x5585
 8019ece:	f7ff faef 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019ed2:	2141      	movs	r1, #65	; 0x41
 8019ed4:	f245 5088 	movw	r0, #21896	; 0x5588
 8019ed8:	f7ff faea 	bl	80194b0 <ov5640_write_reg>
            break;
 8019edc:	e04f      	b.n	8019f7e <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019ede:	21ff      	movs	r1, #255	; 0xff
 8019ee0:	f245 0001 	movw	r0, #20481	; 0x5001
 8019ee4:	f7ff fae4 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019ee8:	2104      	movs	r1, #4
 8019eea:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019eee:	f7ff fadf 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x18);
 8019ef2:	2118      	movs	r1, #24
 8019ef4:	f245 5086 	movw	r0, #21894	; 0x5586
 8019ef8:	f7ff fada 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x18);
 8019efc:	2118      	movs	r1, #24
 8019efe:	f245 5085 	movw	r0, #21893	; 0x5585
 8019f02:	f7ff fad5 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019f06:	2141      	movs	r1, #65	; 0x41
 8019f08:	f245 5088 	movw	r0, #21896	; 0x5588
 8019f0c:	f7ff fad0 	bl	80194b0 <ov5640_write_reg>
            break;
 8019f10:	e035      	b.n	8019f7e <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019f12:	21ff      	movs	r1, #255	; 0xff
 8019f14:	f245 0001 	movw	r0, #20481	; 0x5001
 8019f18:	f7ff faca 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019f1c:	2104      	movs	r1, #4
 8019f1e:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019f22:	f7ff fac5 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x14);
 8019f26:	2114      	movs	r1, #20
 8019f28:	f245 5086 	movw	r0, #21894	; 0x5586
 8019f2c:	f7ff fac0 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x14);
 8019f30:	2114      	movs	r1, #20
 8019f32:	f245 5085 	movw	r0, #21893	; 0x5585
 8019f36:	f7ff fabb 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019f3a:	2141      	movs	r1, #65	; 0x41
 8019f3c:	f245 5088 	movw	r0, #21896	; 0x5588
 8019f40:	f7ff fab6 	bl	80194b0 <ov5640_write_reg>
            break;
 8019f44:	e01b      	b.n	8019f7e <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019f46:	21ff      	movs	r1, #255	; 0xff
 8019f48:	f245 0001 	movw	r0, #20481	; 0x5001
 8019f4c:	f7ff fab0 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8019f50:	2104      	movs	r1, #4
 8019f52:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019f56:	f7ff faab 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x10);
 8019f5a:	2110      	movs	r1, #16
 8019f5c:	f245 5086 	movw	r0, #21894	; 0x5586
 8019f60:	f7ff faa6 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x10);
 8019f64:	2110      	movs	r1, #16
 8019f66:	f245 5085 	movw	r0, #21893	; 0x5585
 8019f6a:	f7ff faa1 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8019f6e:	2141      	movs	r1, #65	; 0x41
 8019f70:	f245 5088 	movw	r0, #21896	; 0x5588
 8019f74:	f7ff fa9c 	bl	80194b0 <ov5640_write_reg>
            break;
 8019f78:	e001      	b.n	8019f7e <ov5640_set_contrast+0x232>
        }
        default:
        {
            return OV5640_EINVAL;
 8019f7a:	2302      	movs	r3, #2
 8019f7c:	e000      	b.n	8019f80 <ov5640_set_contrast+0x234>
        }
    }

    return OV5640_EOK;
 8019f7e:	2300      	movs	r3, #0
}
 8019f80:	4618      	mov	r0, r3
 8019f82:	3708      	adds	r7, #8
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bd80      	pop	{r7, pc}

08019f88 <ov5640_set_hue>:
 *                        OV5640_HUE_11: +150 degree
 * @retval      OV5640_EOK   : 设置OV5640模块色相成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_hue(ov5640_hue_t hue)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b082      	sub	sp, #8
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	4603      	mov	r3, r0
 8019f90:	71fb      	strb	r3, [r7, #7]
    switch (hue)
 8019f92:	79fb      	ldrb	r3, [r7, #7]
 8019f94:	2b0b      	cmp	r3, #11
 8019f96:	f200 8153 	bhi.w	801a240 <ov5640_set_hue+0x2b8>
 8019f9a:	a201      	add	r2, pc, #4	; (adr r2, 8019fa0 <ov5640_set_hue+0x18>)
 8019f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019fa0:	08019fd1 	.word	0x08019fd1
 8019fa4:	0801a005 	.word	0x0801a005
 8019fa8:	0801a039 	.word	0x0801a039
 8019fac:	0801a06d 	.word	0x0801a06d
 8019fb0:	0801a0a1 	.word	0x0801a0a1
 8019fb4:	0801a0d5 	.word	0x0801a0d5
 8019fb8:	0801a109 	.word	0x0801a109
 8019fbc:	0801a13d 	.word	0x0801a13d
 8019fc0:	0801a171 	.word	0x0801a171
 8019fc4:	0801a1a5 	.word	0x0801a1a5
 8019fc8:	0801a1d9 	.word	0x0801a1d9
 8019fcc:	0801a20d 	.word	0x0801a20d
    {
        case OV5640_HUE_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8019fd0:	21ff      	movs	r1, #255	; 0xff
 8019fd2:	f245 0001 	movw	r0, #20481	; 0x5001
 8019fd6:	f7ff fa6b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 8019fda:	2101      	movs	r1, #1
 8019fdc:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8019fe0:	f7ff fa66 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x80);
 8019fe4:	2180      	movs	r1, #128	; 0x80
 8019fe6:	f245 5081 	movw	r0, #21889	; 0x5581
 8019fea:	f7ff fa61 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x00);
 8019fee:	2100      	movs	r1, #0
 8019ff0:	f245 5082 	movw	r0, #21890	; 0x5582
 8019ff4:	f7ff fa5c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x32);
 8019ff8:	2132      	movs	r1, #50	; 0x32
 8019ffa:	f245 5088 	movw	r0, #21896	; 0x5588
 8019ffe:	f7ff fa57 	bl	80194b0 <ov5640_write_reg>
            break;
 801a002:	e11f      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a004:	21ff      	movs	r1, #255	; 0xff
 801a006:	f245 0001 	movw	r0, #20481	; 0x5001
 801a00a:	f7ff fa51 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a00e:	2101      	movs	r1, #1
 801a010:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a014:	f7ff fa4c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 801a018:	216f      	movs	r1, #111	; 0x6f
 801a01a:	f245 5081 	movw	r0, #21889	; 0x5581
 801a01e:	f7ff fa47 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 801a022:	2140      	movs	r1, #64	; 0x40
 801a024:	f245 5082 	movw	r0, #21890	; 0x5582
 801a028:	f7ff fa42 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x32);
 801a02c:	2132      	movs	r1, #50	; 0x32
 801a02e:	f245 5088 	movw	r0, #21896	; 0x5588
 801a032:	f7ff fa3d 	bl	80194b0 <ov5640_write_reg>
            break;
 801a036:	e105      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a038:	21ff      	movs	r1, #255	; 0xff
 801a03a:	f245 0001 	movw	r0, #20481	; 0x5001
 801a03e:	f7ff fa37 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a042:	2101      	movs	r1, #1
 801a044:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a048:	f7ff fa32 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 801a04c:	2140      	movs	r1, #64	; 0x40
 801a04e:	f245 5081 	movw	r0, #21889	; 0x5581
 801a052:	f7ff fa2d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 801a056:	216f      	movs	r1, #111	; 0x6f
 801a058:	f245 5082 	movw	r0, #21890	; 0x5582
 801a05c:	f7ff fa28 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x32);
 801a060:	2132      	movs	r1, #50	; 0x32
 801a062:	f245 5088 	movw	r0, #21896	; 0x5588
 801a066:	f7ff fa23 	bl	80194b0 <ov5640_write_reg>
            break;
 801a06a:	e0eb      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a06c:	21ff      	movs	r1, #255	; 0xff
 801a06e:	f245 0001 	movw	r0, #20481	; 0x5001
 801a072:	f7ff fa1d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a076:	2101      	movs	r1, #1
 801a078:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a07c:	f7ff fa18 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x00);
 801a080:	2100      	movs	r1, #0
 801a082:	f245 5081 	movw	r0, #21889	; 0x5581
 801a086:	f7ff fa13 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x80);
 801a08a:	2180      	movs	r1, #128	; 0x80
 801a08c:	f245 5082 	movw	r0, #21890	; 0x5582
 801a090:	f7ff fa0e 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x02);
 801a094:	2102      	movs	r1, #2
 801a096:	f245 5088 	movw	r0, #21896	; 0x5588
 801a09a:	f7ff fa09 	bl	80194b0 <ov5640_write_reg>
            break;
 801a09e:	e0d1      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_4:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a0a0:	21ff      	movs	r1, #255	; 0xff
 801a0a2:	f245 0001 	movw	r0, #20481	; 0x5001
 801a0a6:	f7ff fa03 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a0aa:	2101      	movs	r1, #1
 801a0ac:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a0b0:	f7ff f9fe 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 801a0b4:	2140      	movs	r1, #64	; 0x40
 801a0b6:	f245 5081 	movw	r0, #21889	; 0x5581
 801a0ba:	f7ff f9f9 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 801a0be:	216f      	movs	r1, #111	; 0x6f
 801a0c0:	f245 5082 	movw	r0, #21890	; 0x5582
 801a0c4:	f7ff f9f4 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x02);
 801a0c8:	2102      	movs	r1, #2
 801a0ca:	f245 5088 	movw	r0, #21896	; 0x5588
 801a0ce:	f7ff f9ef 	bl	80194b0 <ov5640_write_reg>
            break;
 801a0d2:	e0b7      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a0d4:	21ff      	movs	r1, #255	; 0xff
 801a0d6:	f245 0001 	movw	r0, #20481	; 0x5001
 801a0da:	f7ff f9e9 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a0de:	2101      	movs	r1, #1
 801a0e0:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a0e4:	f7ff f9e4 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 801a0e8:	216f      	movs	r1, #111	; 0x6f
 801a0ea:	f245 5081 	movw	r0, #21889	; 0x5581
 801a0ee:	f7ff f9df 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 801a0f2:	2140      	movs	r1, #64	; 0x40
 801a0f4:	f245 5082 	movw	r0, #21890	; 0x5582
 801a0f8:	f7ff f9da 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x02);
 801a0fc:	2102      	movs	r1, #2
 801a0fe:	f245 5088 	movw	r0, #21896	; 0x5588
 801a102:	f7ff f9d5 	bl	80194b0 <ov5640_write_reg>
            break;
 801a106:	e09d      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a108:	21ff      	movs	r1, #255	; 0xff
 801a10a:	f245 0001 	movw	r0, #20481	; 0x5001
 801a10e:	f7ff f9cf 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a112:	2101      	movs	r1, #1
 801a114:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a118:	f7ff f9ca 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x80);
 801a11c:	2180      	movs	r1, #128	; 0x80
 801a11e:	f245 5081 	movw	r0, #21889	; 0x5581
 801a122:	f7ff f9c5 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x00);
 801a126:	2100      	movs	r1, #0
 801a128:	f245 5082 	movw	r0, #21890	; 0x5582
 801a12c:	f7ff f9c0 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 801a130:	2101      	movs	r1, #1
 801a132:	f245 5088 	movw	r0, #21896	; 0x5588
 801a136:	f7ff f9bb 	bl	80194b0 <ov5640_write_reg>
            break;
 801a13a:	e083      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a13c:	21ff      	movs	r1, #255	; 0xff
 801a13e:	f245 0001 	movw	r0, #20481	; 0x5001
 801a142:	f7ff f9b5 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a146:	2101      	movs	r1, #1
 801a148:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a14c:	f7ff f9b0 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 801a150:	216f      	movs	r1, #111	; 0x6f
 801a152:	f245 5081 	movw	r0, #21889	; 0x5581
 801a156:	f7ff f9ab 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 801a15a:	2140      	movs	r1, #64	; 0x40
 801a15c:	f245 5082 	movw	r0, #21890	; 0x5582
 801a160:	f7ff f9a6 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 801a164:	2101      	movs	r1, #1
 801a166:	f245 5088 	movw	r0, #21896	; 0x5588
 801a16a:	f7ff f9a1 	bl	80194b0 <ov5640_write_reg>
            break;
 801a16e:	e069      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a170:	21ff      	movs	r1, #255	; 0xff
 801a172:	f245 0001 	movw	r0, #20481	; 0x5001
 801a176:	f7ff f99b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a17a:	2101      	movs	r1, #1
 801a17c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a180:	f7ff f996 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 801a184:	2140      	movs	r1, #64	; 0x40
 801a186:	f245 5081 	movw	r0, #21889	; 0x5581
 801a18a:	f7ff f991 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 801a18e:	216f      	movs	r1, #111	; 0x6f
 801a190:	f245 5082 	movw	r0, #21890	; 0x5582
 801a194:	f7ff f98c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 801a198:	2101      	movs	r1, #1
 801a19a:	f245 5088 	movw	r0, #21896	; 0x5588
 801a19e:	f7ff f987 	bl	80194b0 <ov5640_write_reg>
            break;
 801a1a2:	e04f      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_9:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a1a4:	21ff      	movs	r1, #255	; 0xff
 801a1a6:	f245 0001 	movw	r0, #20481	; 0x5001
 801a1aa:	f7ff f981 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a1ae:	2101      	movs	r1, #1
 801a1b0:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a1b4:	f7ff f97c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x00);
 801a1b8:	2100      	movs	r1, #0
 801a1ba:	f245 5081 	movw	r0, #21889	; 0x5581
 801a1be:	f7ff f977 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x80);
 801a1c2:	2180      	movs	r1, #128	; 0x80
 801a1c4:	f245 5082 	movw	r0, #21890	; 0x5582
 801a1c8:	f7ff f972 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x31);
 801a1cc:	2131      	movs	r1, #49	; 0x31
 801a1ce:	f245 5088 	movw	r0, #21896	; 0x5588
 801a1d2:	f7ff f96d 	bl	80194b0 <ov5640_write_reg>
            break;
 801a1d6:	e035      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_10:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a1d8:	21ff      	movs	r1, #255	; 0xff
 801a1da:	f245 0001 	movw	r0, #20481	; 0x5001
 801a1de:	f7ff f967 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a1e2:	2101      	movs	r1, #1
 801a1e4:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a1e8:	f7ff f962 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 801a1ec:	2140      	movs	r1, #64	; 0x40
 801a1ee:	f245 5081 	movw	r0, #21889	; 0x5581
 801a1f2:	f7ff f95d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 801a1f6:	216f      	movs	r1, #111	; 0x6f
 801a1f8:	f245 5082 	movw	r0, #21890	; 0x5582
 801a1fc:	f7ff f958 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x31);
 801a200:	2131      	movs	r1, #49	; 0x31
 801a202:	f245 5088 	movw	r0, #21896	; 0x5588
 801a206:	f7ff f953 	bl	80194b0 <ov5640_write_reg>
            break;
 801a20a:	e01b      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_11:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a20c:	21ff      	movs	r1, #255	; 0xff
 801a20e:	f245 0001 	movw	r0, #20481	; 0x5001
 801a212:	f7ff f94d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801a216:	2101      	movs	r1, #1
 801a218:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a21c:	f7ff f948 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 801a220:	216f      	movs	r1, #111	; 0x6f
 801a222:	f245 5081 	movw	r0, #21889	; 0x5581
 801a226:	f7ff f943 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 801a22a:	2140      	movs	r1, #64	; 0x40
 801a22c:	f245 5082 	movw	r0, #21890	; 0x5582
 801a230:	f7ff f93e 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x31);
 801a234:	2131      	movs	r1, #49	; 0x31
 801a236:	f245 5088 	movw	r0, #21896	; 0x5588
 801a23a:	f7ff f939 	bl	80194b0 <ov5640_write_reg>
            break;
 801a23e:	e001      	b.n	801a244 <ov5640_set_hue+0x2bc>
        }
        default:
        {
            return OV5640_EINVAL;
 801a240:	2302      	movs	r3, #2
 801a242:	e000      	b.n	801a246 <ov5640_set_hue+0x2be>
        }
    }

    return OV5640_EOK;
 801a244:	2300      	movs	r3, #0
}
 801a246:	4618      	mov	r0, r3
 801a248:	3708      	adds	r7, #8
 801a24a:	46bd      	mov	sp, r7
 801a24c:	bd80      	pop	{r7, pc}
 801a24e:	bf00      	nop

0801a250 <ov5640_set_special_effect>:
 *                        OV5640_SPECIAL_EFFECT_NEGATIVE: Negative
 * @retval      OV5640_EOK   : 设置OV5640模块特殊效果成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_special_effect(ov5640_special_effect_t effect)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b082      	sub	sp, #8
 801a254:	af00      	add	r7, sp, #0
 801a256:	4603      	mov	r3, r0
 801a258:	71fb      	strb	r3, [r7, #7]
    switch (effect)
 801a25a:	79fb      	ldrb	r3, [r7, #7]
 801a25c:	2b06      	cmp	r3, #6
 801a25e:	f200 8090 	bhi.w	801a382 <ov5640_set_special_effect+0x132>
 801a262:	a201      	add	r2, pc, #4	; (adr r2, 801a268 <ov5640_set_special_effect+0x18>)
 801a264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a268:	0801a285 	.word	0x0801a285
 801a26c:	0801a29b 	.word	0x0801a29b
 801a270:	0801a2c5 	.word	0x0801a2c5
 801a274:	0801a2ef 	.word	0x0801a2ef
 801a278:	0801a319 	.word	0x0801a319
 801a27c:	0801a343 	.word	0x0801a343
 801a280:	0801a36d 	.word	0x0801a36d
    {
        case OV5640_SPECIAL_EFFECT_NORMAL:
        {
            ov5640_write_reg(0x5001, 0x7F);
 801a284:	217f      	movs	r1, #127	; 0x7f
 801a286:	f245 0001 	movw	r0, #20481	; 0x5001
 801a28a:	f7ff f911 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x00);
 801a28e:	2100      	movs	r1, #0
 801a290:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a294:	f7ff f90c 	bl	80194b0 <ov5640_write_reg>
            break;
 801a298:	e075      	b.n	801a386 <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_BW:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a29a:	21ff      	movs	r1, #255	; 0xff
 801a29c:	f245 0001 	movw	r0, #20481	; 0x5001
 801a2a0:	f7ff f906 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 801a2a4:	2118      	movs	r1, #24
 801a2a6:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a2aa:	f7ff f901 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x80);
 801a2ae:	2180      	movs	r1, #128	; 0x80
 801a2b0:	f245 5083 	movw	r0, #21891	; 0x5583
 801a2b4:	f7ff f8fc 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x80);
 801a2b8:	2180      	movs	r1, #128	; 0x80
 801a2ba:	f245 5084 	movw	r0, #21892	; 0x5584
 801a2be:	f7ff f8f7 	bl	80194b0 <ov5640_write_reg>
            break;
 801a2c2:	e060      	b.n	801a386 <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_BLUISH:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a2c4:	21ff      	movs	r1, #255	; 0xff
 801a2c6:	f245 0001 	movw	r0, #20481	; 0x5001
 801a2ca:	f7ff f8f1 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 801a2ce:	2118      	movs	r1, #24
 801a2d0:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a2d4:	f7ff f8ec 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0xA0);
 801a2d8:	21a0      	movs	r1, #160	; 0xa0
 801a2da:	f245 5083 	movw	r0, #21891	; 0x5583
 801a2de:	f7ff f8e7 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x40);
 801a2e2:	2140      	movs	r1, #64	; 0x40
 801a2e4:	f245 5084 	movw	r0, #21892	; 0x5584
 801a2e8:	f7ff f8e2 	bl	80194b0 <ov5640_write_reg>
            break;
 801a2ec:	e04b      	b.n	801a386 <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_SEPIA:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a2ee:	21ff      	movs	r1, #255	; 0xff
 801a2f0:	f245 0001 	movw	r0, #20481	; 0x5001
 801a2f4:	f7ff f8dc 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 801a2f8:	2118      	movs	r1, #24
 801a2fa:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a2fe:	f7ff f8d7 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x40);
 801a302:	2140      	movs	r1, #64	; 0x40
 801a304:	f245 5083 	movw	r0, #21891	; 0x5583
 801a308:	f7ff f8d2 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0xA0);
 801a30c:	21a0      	movs	r1, #160	; 0xa0
 801a30e:	f245 5084 	movw	r0, #21892	; 0x5584
 801a312:	f7ff f8cd 	bl	80194b0 <ov5640_write_reg>
            break;
 801a316:	e036      	b.n	801a386 <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_REDDISH:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a318:	21ff      	movs	r1, #255	; 0xff
 801a31a:	f245 0001 	movw	r0, #20481	; 0x5001
 801a31e:	f7ff f8c7 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 801a322:	2118      	movs	r1, #24
 801a324:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a328:	f7ff f8c2 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x80);
 801a32c:	2180      	movs	r1, #128	; 0x80
 801a32e:	f245 5083 	movw	r0, #21891	; 0x5583
 801a332:	f7ff f8bd 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0xC0);
 801a336:	21c0      	movs	r1, #192	; 0xc0
 801a338:	f245 5084 	movw	r0, #21892	; 0x5584
 801a33c:	f7ff f8b8 	bl	80194b0 <ov5640_write_reg>
            break;
 801a340:	e021      	b.n	801a386 <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_GREENISH:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a342:	21ff      	movs	r1, #255	; 0xff
 801a344:	f245 0001 	movw	r0, #20481	; 0x5001
 801a348:	f7ff f8b2 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 801a34c:	2118      	movs	r1, #24
 801a34e:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a352:	f7ff f8ad 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x60);
 801a356:	2160      	movs	r1, #96	; 0x60
 801a358:	f245 5083 	movw	r0, #21891	; 0x5583
 801a35c:	f7ff f8a8 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x60);
 801a360:	2160      	movs	r1, #96	; 0x60
 801a362:	f245 5084 	movw	r0, #21892	; 0x5584
 801a366:	f7ff f8a3 	bl	80194b0 <ov5640_write_reg>
            break;
 801a36a:	e00c      	b.n	801a386 <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_NEGATIVE:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801a36c:	21ff      	movs	r1, #255	; 0xff
 801a36e:	f245 0001 	movw	r0, #20481	; 0x5001
 801a372:	f7ff f89d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x40);
 801a376:	2140      	movs	r1, #64	; 0x40
 801a378:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801a37c:	f7ff f898 	bl	80194b0 <ov5640_write_reg>
            break;
 801a380:	e001      	b.n	801a386 <ov5640_set_special_effect+0x136>
        }
        default:
        {
            return OV5640_EINVAL;
 801a382:	2302      	movs	r3, #2
 801a384:	e000      	b.n	801a388 <ov5640_set_special_effect+0x138>
        }
    }

    return OV5640_EOK;
 801a386:	2300      	movs	r3, #0
}
 801a388:	4618      	mov	r0, r3
 801a38a:	3708      	adds	r7, #8
 801a38c:	46bd      	mov	sp, r7
 801a38e:	bd80      	pop	{r7, pc}

0801a390 <ov5640_set_exposure_level>:
 *                        OV5640_EXPOSURE_LEVEL_10: 1.7EV
 * @retval      OV5640_EOK   : 设置OV5640模块曝光度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_exposure_level(ov5640_exposure_level_t level)
{
 801a390:	b580      	push	{r7, lr}
 801a392:	b082      	sub	sp, #8
 801a394:	af00      	add	r7, sp, #0
 801a396:	4603      	mov	r3, r0
 801a398:	71fb      	strb	r3, [r7, #7]
    switch (level)
 801a39a:	79fb      	ldrb	r3, [r7, #7]
 801a39c:	2b0a      	cmp	r3, #10
 801a39e:	f200 816e 	bhi.w	801a67e <ov5640_set_exposure_level+0x2ee>
 801a3a2:	a201      	add	r2, pc, #4	; (adr r2, 801a3a8 <ov5640_set_exposure_level+0x18>)
 801a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3a8:	0801a3d5 	.word	0x0801a3d5
 801a3ac:	0801a413 	.word	0x0801a413
 801a3b0:	0801a451 	.word	0x0801a451
 801a3b4:	0801a48f 	.word	0x0801a48f
 801a3b8:	0801a4cd 	.word	0x0801a4cd
 801a3bc:	0801a50b 	.word	0x0801a50b
 801a3c0:	0801a549 	.word	0x0801a549
 801a3c4:	0801a587 	.word	0x0801a587
 801a3c8:	0801a5c5 	.word	0x0801a5c5
 801a3cc:	0801a603 	.word	0x0801a603
 801a3d0:	0801a641 	.word	0x0801a641
    {
        case OV5640_EXPOSURE_LEVEL_0:
        {
            ov5640_write_reg(0x3A0F, 0x10);
 801a3d4:	2110      	movs	r1, #16
 801a3d6:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a3da:	f7ff f869 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x08);
 801a3de:	2108      	movs	r1, #8
 801a3e0:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a3e4:	f7ff f864 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x10);
 801a3e8:	2110      	movs	r1, #16
 801a3ea:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a3ee:	f7ff f85f 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x08);
 801a3f2:	2108      	movs	r1, #8
 801a3f4:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a3f8:	f7ff f85a 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x20);
 801a3fc:	2120      	movs	r1, #32
 801a3fe:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a402:	f7ff f855 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a406:	2110      	movs	r1, #16
 801a408:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a40c:	f7ff f850 	bl	80194b0 <ov5640_write_reg>
            break;
 801a410:	e137      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_1:
        {
            ov5640_write_reg(0x3A0F, 0x18);
 801a412:	2118      	movs	r1, #24
 801a414:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a418:	f7ff f84a 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x10);
 801a41c:	2110      	movs	r1, #16
 801a41e:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a422:	f7ff f845 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x18);
 801a426:	2118      	movs	r1, #24
 801a428:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a42c:	f7ff f840 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x10);
 801a430:	2110      	movs	r1, #16
 801a432:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a436:	f7ff f83b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x30);
 801a43a:	2130      	movs	r1, #48	; 0x30
 801a43c:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a440:	f7ff f836 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a444:	2110      	movs	r1, #16
 801a446:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a44a:	f7ff f831 	bl	80194b0 <ov5640_write_reg>
            break;
 801a44e:	e118      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_2:
        {
            ov5640_write_reg(0x3A0F, 0x20);
 801a450:	2120      	movs	r1, #32
 801a452:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a456:	f7ff f82b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x18);
 801a45a:	2118      	movs	r1, #24
 801a45c:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a460:	f7ff f826 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x41);
 801a464:	2141      	movs	r1, #65	; 0x41
 801a466:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a46a:	f7ff f821 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x20);
 801a46e:	2120      	movs	r1, #32
 801a470:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a474:	f7ff f81c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x18);
 801a478:	2118      	movs	r1, #24
 801a47a:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a47e:	f7ff f817 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a482:	2110      	movs	r1, #16
 801a484:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a488:	f7ff f812 	bl	80194b0 <ov5640_write_reg>
            break;
 801a48c:	e0f9      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_3:
        {
            ov5640_write_reg(0x3A0F, 0x28);
 801a48e:	2128      	movs	r1, #40	; 0x28
 801a490:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a494:	f7ff f80c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x20);
 801a498:	2120      	movs	r1, #32
 801a49a:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a49e:	f7ff f807 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x51);
 801a4a2:	2151      	movs	r1, #81	; 0x51
 801a4a4:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a4a8:	f7ff f802 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x28);
 801a4ac:	2128      	movs	r1, #40	; 0x28
 801a4ae:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a4b2:	f7fe fffd 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x20);
 801a4b6:	2120      	movs	r1, #32
 801a4b8:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a4bc:	f7fe fff8 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a4c0:	2110      	movs	r1, #16
 801a4c2:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a4c6:	f7fe fff3 	bl	80194b0 <ov5640_write_reg>
            break;
 801a4ca:	e0da      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_4:
        {
            ov5640_write_reg(0x3A0F, 0x30);
 801a4cc:	2130      	movs	r1, #48	; 0x30
 801a4ce:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a4d2:	f7fe ffed 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x28);
 801a4d6:	2128      	movs	r1, #40	; 0x28
 801a4d8:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a4dc:	f7fe ffe8 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x61);
 801a4e0:	2161      	movs	r1, #97	; 0x61
 801a4e2:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a4e6:	f7fe ffe3 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x30);
 801a4ea:	2130      	movs	r1, #48	; 0x30
 801a4ec:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a4f0:	f7fe ffde 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x28);
 801a4f4:	2128      	movs	r1, #40	; 0x28
 801a4f6:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a4fa:	f7fe ffd9 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a4fe:	2110      	movs	r1, #16
 801a500:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a504:	f7fe ffd4 	bl	80194b0 <ov5640_write_reg>
            break;
 801a508:	e0bb      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_5:
        {
            ov5640_write_reg(0x3A0F, 0x38);
 801a50a:	2138      	movs	r1, #56	; 0x38
 801a50c:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a510:	f7fe ffce 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x30);
 801a514:	2130      	movs	r1, #48	; 0x30
 801a516:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a51a:	f7fe ffc9 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x61);
 801a51e:	2161      	movs	r1, #97	; 0x61
 801a520:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a524:	f7fe ffc4 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x38);
 801a528:	2138      	movs	r1, #56	; 0x38
 801a52a:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a52e:	f7fe ffbf 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x30);
 801a532:	2130      	movs	r1, #48	; 0x30
 801a534:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a538:	f7fe ffba 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a53c:	2110      	movs	r1, #16
 801a53e:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a542:	f7fe ffb5 	bl	80194b0 <ov5640_write_reg>
            break;
 801a546:	e09c      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_6:
        {
            ov5640_write_reg(0x3A0F, 0x40);
 801a548:	2140      	movs	r1, #64	; 0x40
 801a54a:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a54e:	f7fe ffaf 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x38);
 801a552:	2138      	movs	r1, #56	; 0x38
 801a554:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a558:	f7fe ffaa 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x71);
 801a55c:	2171      	movs	r1, #113	; 0x71
 801a55e:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a562:	f7fe ffa5 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x40);
 801a566:	2140      	movs	r1, #64	; 0x40
 801a568:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a56c:	f7fe ffa0 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x38);
 801a570:	2138      	movs	r1, #56	; 0x38
 801a572:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a576:	f7fe ff9b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801a57a:	2110      	movs	r1, #16
 801a57c:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a580:	f7fe ff96 	bl	80194b0 <ov5640_write_reg>
            break;
 801a584:	e07d      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_7:
        {
            ov5640_write_reg(0x3A0F, 0x48);
 801a586:	2148      	movs	r1, #72	; 0x48
 801a588:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a58c:	f7fe ff90 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x40);
 801a590:	2140      	movs	r1, #64	; 0x40
 801a592:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a596:	f7fe ff8b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x80);
 801a59a:	2180      	movs	r1, #128	; 0x80
 801a59c:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a5a0:	f7fe ff86 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x48);
 801a5a4:	2148      	movs	r1, #72	; 0x48
 801a5a6:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a5aa:	f7fe ff81 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x40);
 801a5ae:	2140      	movs	r1, #64	; 0x40
 801a5b0:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a5b4:	f7fe ff7c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 801a5b8:	2120      	movs	r1, #32
 801a5ba:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a5be:	f7fe ff77 	bl	80194b0 <ov5640_write_reg>
            break;
 801a5c2:	e05e      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_8:
        {
            ov5640_write_reg(0x3A0F, 0x50);
 801a5c4:	2150      	movs	r1, #80	; 0x50
 801a5c6:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a5ca:	f7fe ff71 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x48);
 801a5ce:	2148      	movs	r1, #72	; 0x48
 801a5d0:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a5d4:	f7fe ff6c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x90);
 801a5d8:	2190      	movs	r1, #144	; 0x90
 801a5da:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a5de:	f7fe ff67 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x50);
 801a5e2:	2150      	movs	r1, #80	; 0x50
 801a5e4:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a5e8:	f7fe ff62 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x48);
 801a5ec:	2148      	movs	r1, #72	; 0x48
 801a5ee:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a5f2:	f7fe ff5d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 801a5f6:	2120      	movs	r1, #32
 801a5f8:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a5fc:	f7fe ff58 	bl	80194b0 <ov5640_write_reg>
            break;
 801a600:	e03f      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_9:
        {
            ov5640_write_reg(0x3A0F, 0x58);
 801a602:	2158      	movs	r1, #88	; 0x58
 801a604:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a608:	f7fe ff52 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x50);
 801a60c:	2150      	movs	r1, #80	; 0x50
 801a60e:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a612:	f7fe ff4d 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x91);
 801a616:	2191      	movs	r1, #145	; 0x91
 801a618:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a61c:	f7fe ff48 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x58);
 801a620:	2158      	movs	r1, #88	; 0x58
 801a622:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a626:	f7fe ff43 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x50);
 801a62a:	2150      	movs	r1, #80	; 0x50
 801a62c:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a630:	f7fe ff3e 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 801a634:	2120      	movs	r1, #32
 801a636:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a63a:	f7fe ff39 	bl	80194b0 <ov5640_write_reg>
            break;
 801a63e:	e020      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_10:
        {
            ov5640_write_reg(0x3A0F, 0x60);
 801a640:	2160      	movs	r1, #96	; 0x60
 801a642:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801a646:	f7fe ff33 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x58);
 801a64a:	2158      	movs	r1, #88	; 0x58
 801a64c:	f643 2010 	movw	r0, #14864	; 0x3a10
 801a650:	f7fe ff2e 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0xA0);
 801a654:	21a0      	movs	r1, #160	; 0xa0
 801a656:	f643 2011 	movw	r0, #14865	; 0x3a11
 801a65a:	f7fe ff29 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x60);
 801a65e:	2160      	movs	r1, #96	; 0x60
 801a660:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801a664:	f7fe ff24 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x58);
 801a668:	2158      	movs	r1, #88	; 0x58
 801a66a:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801a66e:	f7fe ff1f 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 801a672:	2120      	movs	r1, #32
 801a674:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801a678:	f7fe ff1a 	bl	80194b0 <ov5640_write_reg>
            break;
 801a67c:	e001      	b.n	801a682 <ov5640_set_exposure_level+0x2f2>
        }
        default:
        {
            return OV5640_EINVAL;
 801a67e:	2302      	movs	r3, #2
 801a680:	e000      	b.n	801a684 <ov5640_set_exposure_level+0x2f4>
        }
    }

    return OV5640_EOK;
 801a682:	2300      	movs	r3, #0
}
 801a684:	4618      	mov	r0, r3
 801a686:	3708      	adds	r7, #8
 801a688:	46bd      	mov	sp, r7
 801a68a:	bd80      	pop	{r7, pc}

0801a68c <ov5640_set_sharpness_level>:
 *                        OV5640_SHARPNESS_AUTO : Sharpness Auto
 * @retval      OV5640_EOK   : 设置OV5640模块锐度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_sharpness_level(ov5640_sharpness_t sharpness)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b082      	sub	sp, #8
 801a690:	af00      	add	r7, sp, #0
 801a692:	4603      	mov	r3, r0
 801a694:	71fb      	strb	r3, [r7, #7]
    switch (sharpness)
 801a696:	79fb      	ldrb	r3, [r7, #7]
 801a698:	2b09      	cmp	r3, #9
 801a69a:	f200 80a8 	bhi.w	801a7ee <ov5640_set_sharpness_level+0x162>
 801a69e:	a201      	add	r2, pc, #4	; (adr r2, 801a6a4 <ov5640_set_sharpness_level+0x18>)
 801a6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6a4:	0801a6cd 	.word	0x0801a6cd
 801a6a8:	0801a6e3 	.word	0x0801a6e3
 801a6ac:	0801a6f9 	.word	0x0801a6f9
 801a6b0:	0801a70f 	.word	0x0801a70f
 801a6b4:	0801a725 	.word	0x0801a725
 801a6b8:	0801a73b 	.word	0x0801a73b
 801a6bc:	0801a751 	.word	0x0801a751
 801a6c0:	0801a767 	.word	0x0801a767
 801a6c4:	0801a77d 	.word	0x0801a77d
 801a6c8:	0801a793 	.word	0x0801a793
    {
        case OV5640_SHARPNESS_OFF:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a6cc:	2165      	movs	r1, #101	; 0x65
 801a6ce:	f245 3008 	movw	r0, #21256	; 0x5308
 801a6d2:	f7fe feed 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x00);
 801a6d6:	2100      	movs	r1, #0
 801a6d8:	f245 3002 	movw	r0, #21250	; 0x5302
 801a6dc:	f7fe fee8 	bl	80194b0 <ov5640_write_reg>
            break;
 801a6e0:	e087      	b.n	801a7f2 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_1:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a6e2:	2165      	movs	r1, #101	; 0x65
 801a6e4:	f245 3008 	movw	r0, #21256	; 0x5308
 801a6e8:	f7fe fee2 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x02);
 801a6ec:	2102      	movs	r1, #2
 801a6ee:	f245 3002 	movw	r0, #21250	; 0x5302
 801a6f2:	f7fe fedd 	bl	80194b0 <ov5640_write_reg>
            break;
 801a6f6:	e07c      	b.n	801a7f2 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_2:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a6f8:	2165      	movs	r1, #101	; 0x65
 801a6fa:	f245 3008 	movw	r0, #21256	; 0x5308
 801a6fe:	f7fe fed7 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x04);
 801a702:	2104      	movs	r1, #4
 801a704:	f245 3002 	movw	r0, #21250	; 0x5302
 801a708:	f7fe fed2 	bl	80194b0 <ov5640_write_reg>
            break;
 801a70c:	e071      	b.n	801a7f2 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_3:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a70e:	2165      	movs	r1, #101	; 0x65
 801a710:	f245 3008 	movw	r0, #21256	; 0x5308
 801a714:	f7fe fecc 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x08);
 801a718:	2108      	movs	r1, #8
 801a71a:	f245 3002 	movw	r0, #21250	; 0x5302
 801a71e:	f7fe fec7 	bl	80194b0 <ov5640_write_reg>
            break;
 801a722:	e066      	b.n	801a7f2 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_4:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a724:	2165      	movs	r1, #101	; 0x65
 801a726:	f245 3008 	movw	r0, #21256	; 0x5308
 801a72a:	f7fe fec1 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x0C);
 801a72e:	210c      	movs	r1, #12
 801a730:	f245 3002 	movw	r0, #21250	; 0x5302
 801a734:	f7fe febc 	bl	80194b0 <ov5640_write_reg>
            break;
 801a738:	e05b      	b.n	801a7f2 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_5:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a73a:	2165      	movs	r1, #101	; 0x65
 801a73c:	f245 3008 	movw	r0, #21256	; 0x5308
 801a740:	f7fe feb6 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x10);
 801a744:	2110      	movs	r1, #16
 801a746:	f245 3002 	movw	r0, #21250	; 0x5302
 801a74a:	f7fe feb1 	bl	80194b0 <ov5640_write_reg>
            break;
 801a74e:	e050      	b.n	801a7f2 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_6:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a750:	2165      	movs	r1, #101	; 0x65
 801a752:	f245 3008 	movw	r0, #21256	; 0x5308
 801a756:	f7fe feab 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x14);
 801a75a:	2114      	movs	r1, #20
 801a75c:	f245 3002 	movw	r0, #21250	; 0x5302
 801a760:	f7fe fea6 	bl	80194b0 <ov5640_write_reg>
            break;
 801a764:	e045      	b.n	801a7f2 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_7:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a766:	2165      	movs	r1, #101	; 0x65
 801a768:	f245 3008 	movw	r0, #21256	; 0x5308
 801a76c:	f7fe fea0 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x18);
 801a770:	2118      	movs	r1, #24
 801a772:	f245 3002 	movw	r0, #21250	; 0x5302
 801a776:	f7fe fe9b 	bl	80194b0 <ov5640_write_reg>
            break;
 801a77a:	e03a      	b.n	801a7f2 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_8:
        {
            ov5640_write_reg(0x5308, 0x65);
 801a77c:	2165      	movs	r1, #101	; 0x65
 801a77e:	f245 3008 	movw	r0, #21256	; 0x5308
 801a782:	f7fe fe95 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x20);
 801a786:	2120      	movs	r1, #32
 801a788:	f245 3002 	movw	r0, #21250	; 0x5302
 801a78c:	f7fe fe90 	bl	80194b0 <ov5640_write_reg>
            break;
 801a790:	e02f      	b.n	801a7f2 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_AUTO:
        {
            ov5640_write_reg(0x5308, 0x25);
 801a792:	2125      	movs	r1, #37	; 0x25
 801a794:	f245 3008 	movw	r0, #21256	; 0x5308
 801a798:	f7fe fe8a 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5300, 0x08);
 801a79c:	2108      	movs	r1, #8
 801a79e:	f44f 40a6 	mov.w	r0, #21248	; 0x5300
 801a7a2:	f7fe fe85 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5301, 0x30);
 801a7a6:	2130      	movs	r1, #48	; 0x30
 801a7a8:	f245 3001 	movw	r0, #21249	; 0x5301
 801a7ac:	f7fe fe80 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x10);
 801a7b0:	2110      	movs	r1, #16
 801a7b2:	f245 3002 	movw	r0, #21250	; 0x5302
 801a7b6:	f7fe fe7b 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5303, 0x00);
 801a7ba:	2100      	movs	r1, #0
 801a7bc:	f245 3003 	movw	r0, #21251	; 0x5303
 801a7c0:	f7fe fe76 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x5309, 0x08);
 801a7c4:	2108      	movs	r1, #8
 801a7c6:	f245 3009 	movw	r0, #21257	; 0x5309
 801a7ca:	f7fe fe71 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x530A, 0x30);
 801a7ce:	2130      	movs	r1, #48	; 0x30
 801a7d0:	f245 300a 	movw	r0, #21258	; 0x530a
 801a7d4:	f7fe fe6c 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x530B, 0x04);
 801a7d8:	2104      	movs	r1, #4
 801a7da:	f245 300b 	movw	r0, #21259	; 0x530b
 801a7de:	f7fe fe67 	bl	80194b0 <ov5640_write_reg>
            ov5640_write_reg(0x530C, 0x06);
 801a7e2:	2106      	movs	r1, #6
 801a7e4:	f245 300c 	movw	r0, #21260	; 0x530c
 801a7e8:	f7fe fe62 	bl	80194b0 <ov5640_write_reg>
            break;
 801a7ec:	e001      	b.n	801a7f2 <ov5640_set_sharpness_level+0x166>
        }
        default:
        {
            return OV5640_EINVAL;
 801a7ee:	2302      	movs	r3, #2
 801a7f0:	e000      	b.n	801a7f4 <ov5640_set_sharpness_level+0x168>
        }
    }

    return OV5640_EOK;
 801a7f2:	2300      	movs	r3, #0
}
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	3708      	adds	r7, #8
 801a7f8:	46bd      	mov	sp, r7
 801a7fa:	bd80      	pop	{r7, pc}

0801a7fc <ov5640_set_output_format>:
 *                    OV5640_OUTPUT_FORMAT_JPEG  : JPEG
 * @retval      OV5640_EOK   : 设置OV5640模块输出图像格式成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_output_format(ov5640_output_format_t format)
{
 801a7fc:	b580      	push	{r7, lr}
 801a7fe:	b084      	sub	sp, #16
 801a800:	af00      	add	r7, sp, #0
 801a802:	4603      	mov	r3, r0
 801a804:	71fb      	strb	r3, [r7, #7]
    uint32_t cfg_index;

    switch (format)
 801a806:	79fb      	ldrb	r3, [r7, #7]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d002      	beq.n	801a812 <ov5640_set_output_format+0x16>
 801a80c:	2b01      	cmp	r3, #1
 801a80e:	d026      	beq.n	801a85e <ov5640_set_output_format+0x62>
 801a810:	e04b      	b.n	801a8aa <ov5640_set_output_format+0xae>
    {
        case OV5640_OUTPUT_FORMAT_RGB565:
        {
            for (cfg_index=0; cfg_index<sizeof(ov5640_rgb565_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 801a812:	2300      	movs	r3, #0
 801a814:	60fb      	str	r3, [r7, #12]
 801a816:	e01e      	b.n	801a856 <ov5640_set_output_format+0x5a>
            {
            	if(ov5640_rgb565_cfg[cfg_index].reg==0&&ov5640_rgb565_cfg[cfg_index].dat==0)
 801a818:	4a27      	ldr	r2, [pc, #156]	; (801a8b8 <ov5640_set_output_format+0xbc>)
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 801a820:	2b00      	cmp	r3, #0
 801a822:	d106      	bne.n	801a832 <ov5640_set_output_format+0x36>
 801a824:	4a24      	ldr	r2, [pc, #144]	; (801a8b8 <ov5640_set_output_format+0xbc>)
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	009b      	lsls	r3, r3, #2
 801a82a:	4413      	add	r3, r2
 801a82c:	789b      	ldrb	r3, [r3, #2]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d00d      	beq.n	801a84e <ov5640_set_output_format+0x52>
            	{
            		continue;
            	}
                ov5640_write_reg(ov5640_rgb565_cfg[cfg_index].reg, ov5640_rgb565_cfg[cfg_index].dat);
 801a832:	4a21      	ldr	r2, [pc, #132]	; (801a8b8 <ov5640_set_output_format+0xbc>)
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 801a83a:	491f      	ldr	r1, [pc, #124]	; (801a8b8 <ov5640_set_output_format+0xbc>)
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	009b      	lsls	r3, r3, #2
 801a840:	440b      	add	r3, r1
 801a842:	789b      	ldrb	r3, [r3, #2]
 801a844:	4619      	mov	r1, r3
 801a846:	4610      	mov	r0, r2
 801a848:	f7fe fe32 	bl	80194b0 <ov5640_write_reg>
 801a84c:	e000      	b.n	801a850 <ov5640_set_output_format+0x54>
            		continue;
 801a84e:	bf00      	nop
            for (cfg_index=0; cfg_index<sizeof(ov5640_rgb565_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	3301      	adds	r3, #1
 801a854:	60fb      	str	r3, [r7, #12]
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	2b2c      	cmp	r3, #44	; 0x2c
 801a85a:	d9dd      	bls.n	801a818 <ov5640_set_output_format+0x1c>
            }
            break;
 801a85c:	e027      	b.n	801a8ae <ov5640_set_output_format+0xb2>
        }
        case OV5640_OUTPUT_FORMAT_JPEG:
        {
            for (cfg_index=0; cfg_index<sizeof(ov5640_jpeg_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 801a85e:	2300      	movs	r3, #0
 801a860:	60fb      	str	r3, [r7, #12]
 801a862:	e01e      	b.n	801a8a2 <ov5640_set_output_format+0xa6>
            {
            	if(ov5640_jpeg_cfg[cfg_index].reg==0&&ov5640_jpeg_cfg[cfg_index].dat==0)
 801a864:	4a15      	ldr	r2, [pc, #84]	; (801a8bc <ov5640_set_output_format+0xc0>)
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d106      	bne.n	801a87e <ov5640_set_output_format+0x82>
 801a870:	4a12      	ldr	r2, [pc, #72]	; (801a8bc <ov5640_set_output_format+0xc0>)
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	009b      	lsls	r3, r3, #2
 801a876:	4413      	add	r3, r2
 801a878:	789b      	ldrb	r3, [r3, #2]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d00d      	beq.n	801a89a <ov5640_set_output_format+0x9e>
            	{
            		continue;
            	}
                ov5640_write_reg(ov5640_jpeg_cfg[cfg_index].reg, ov5640_jpeg_cfg[cfg_index].dat);
 801a87e:	4a0f      	ldr	r2, [pc, #60]	; (801a8bc <ov5640_set_output_format+0xc0>)
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 801a886:	490d      	ldr	r1, [pc, #52]	; (801a8bc <ov5640_set_output_format+0xc0>)
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	009b      	lsls	r3, r3, #2
 801a88c:	440b      	add	r3, r1
 801a88e:	789b      	ldrb	r3, [r3, #2]
 801a890:	4619      	mov	r1, r3
 801a892:	4610      	mov	r0, r2
 801a894:	f7fe fe0c 	bl	80194b0 <ov5640_write_reg>
 801a898:	e000      	b.n	801a89c <ov5640_set_output_format+0xa0>
            		continue;
 801a89a:	bf00      	nop
            for (cfg_index=0; cfg_index<sizeof(ov5640_jpeg_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 801a89c:	68fb      	ldr	r3, [r7, #12]
 801a89e:	3301      	adds	r3, #1
 801a8a0:	60fb      	str	r3, [r7, #12]
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	2b28      	cmp	r3, #40	; 0x28
 801a8a6:	d9dd      	bls.n	801a864 <ov5640_set_output_format+0x68>
            }
            break;
 801a8a8:	e001      	b.n	801a8ae <ov5640_set_output_format+0xb2>
        }
        default:
        {
            return OV5640_EINVAL;
 801a8aa:	2302      	movs	r3, #2
 801a8ac:	e000      	b.n	801a8b0 <ov5640_set_output_format+0xb4>
        }
    }

    return OV5640_EOK;
 801a8ae:	2300      	movs	r3, #0
}
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	3710      	adds	r7, #16
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	bd80      	pop	{r7, pc}
 801a8b8:	240006e4 	.word	0x240006e4
 801a8bc:	24000798 	.word	0x24000798

0801a8c0 <ov5640_set_output_size>:
 * @param       width : 实际输出图像的宽度（可能被缩放）
 *              height: 实际输出图像的高度（可能被缩放）
 * @retval      OV5640_EOK   : 设置OV5640模块输出图像窗口成功
 */
uint8_t ov5640_set_output_size(uint16_t width, uint16_t height)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b084      	sub	sp, #16
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	4603      	mov	r3, r0
 801a8c8:	460a      	mov	r2, r1
 801a8ca:	80fb      	strh	r3, [r7, #6]
 801a8cc:	4613      	mov	r3, r2
 801a8ce:	80bb      	strh	r3, [r7, #4]
    uint8_t reg3808;
    uint8_t reg3809;
    uint8_t reg380A;
    uint8_t reg380B;

    reg3808 = ov5640_read_reg(0x3808);
 801a8d0:	f643 0008 	movw	r0, #14344	; 0x3808
 801a8d4:	f7fe fdfe 	bl	80194d4 <ov5640_read_reg>
 801a8d8:	4603      	mov	r3, r0
 801a8da:	73fb      	strb	r3, [r7, #15]
    reg380A = ov5640_read_reg(0x380A);
 801a8dc:	f643 000a 	movw	r0, #14346	; 0x380a
 801a8e0:	f7fe fdf8 	bl	80194d4 <ov5640_read_reg>
 801a8e4:	4603      	mov	r3, r0
 801a8e6:	73bb      	strb	r3, [r7, #14]

    reg3808 &= ~0x0F;
 801a8e8:	7bfb      	ldrb	r3, [r7, #15]
 801a8ea:	f023 030f 	bic.w	r3, r3, #15
 801a8ee:	73fb      	strb	r3, [r7, #15]
    reg3808 |= (uint8_t)(width >> 8) & 0x0F;
 801a8f0:	88fb      	ldrh	r3, [r7, #6]
 801a8f2:	0a1b      	lsrs	r3, r3, #8
 801a8f4:	b29b      	uxth	r3, r3
 801a8f6:	b25b      	sxtb	r3, r3
 801a8f8:	f003 030f 	and.w	r3, r3, #15
 801a8fc:	b25a      	sxtb	r2, r3
 801a8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a902:	4313      	orrs	r3, r2
 801a904:	b25b      	sxtb	r3, r3
 801a906:	73fb      	strb	r3, [r7, #15]
    reg3809 = (uint8_t)width & 0xFF;
 801a908:	88fb      	ldrh	r3, [r7, #6]
 801a90a:	737b      	strb	r3, [r7, #13]
    reg380A &= ~0x07;
 801a90c:	7bbb      	ldrb	r3, [r7, #14]
 801a90e:	f023 0307 	bic.w	r3, r3, #7
 801a912:	73bb      	strb	r3, [r7, #14]
    reg380A |= (uint8_t)(height >> 8) & 0x07;
 801a914:	88bb      	ldrh	r3, [r7, #4]
 801a916:	0a1b      	lsrs	r3, r3, #8
 801a918:	b29b      	uxth	r3, r3
 801a91a:	b25b      	sxtb	r3, r3
 801a91c:	f003 0307 	and.w	r3, r3, #7
 801a920:	b25a      	sxtb	r2, r3
 801a922:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a926:	4313      	orrs	r3, r2
 801a928:	b25b      	sxtb	r3, r3
 801a92a:	73bb      	strb	r3, [r7, #14]
    reg380B = (uint8_t)height & 0xFF;
 801a92c:	88bb      	ldrh	r3, [r7, #4]
 801a92e:	733b      	strb	r3, [r7, #12]

    ov5640_write_reg(0x3212, 0x03);
 801a930:	2103      	movs	r1, #3
 801a932:	f243 2012 	movw	r0, #12818	; 0x3212
 801a936:	f7fe fdbb 	bl	80194b0 <ov5640_write_reg>
    ov5640_write_reg(0x3808, reg3808);
 801a93a:	7bfb      	ldrb	r3, [r7, #15]
 801a93c:	4619      	mov	r1, r3
 801a93e:	f643 0008 	movw	r0, #14344	; 0x3808
 801a942:	f7fe fdb5 	bl	80194b0 <ov5640_write_reg>
    ov5640_write_reg(0x3809, reg3809);
 801a946:	7b7b      	ldrb	r3, [r7, #13]
 801a948:	4619      	mov	r1, r3
 801a94a:	f643 0009 	movw	r0, #14345	; 0x3809
 801a94e:	f7fe fdaf 	bl	80194b0 <ov5640_write_reg>
    ov5640_write_reg(0x380A, reg380A);
 801a952:	7bbb      	ldrb	r3, [r7, #14]
 801a954:	4619      	mov	r1, r3
 801a956:	f643 000a 	movw	r0, #14346	; 0x380a
 801a95a:	f7fe fda9 	bl	80194b0 <ov5640_write_reg>
    ov5640_write_reg(0x380B, reg380B);
 801a95e:	7b3b      	ldrb	r3, [r7, #12]
 801a960:	4619      	mov	r1, r3
 801a962:	f643 000b 	movw	r0, #14347	; 0x380b
 801a966:	f7fe fda3 	bl	80194b0 <ov5640_write_reg>
    ov5640_write_reg(0x3212, 0x13);
 801a96a:	2113      	movs	r1, #19
 801a96c:	f243 2012 	movw	r0, #12818	; 0x3212
 801a970:	f7fe fd9e 	bl	80194b0 <ov5640_write_reg>
    ov5640_write_reg(0x3212, 0xA3);
 801a974:	21a3      	movs	r1, #163	; 0xa3
 801a976:	f243 2012 	movw	r0, #12818	; 0x3212
 801a97a:	f7fe fd99 	bl	80194b0 <ov5640_write_reg>

    ov5640_get_output_size();
 801a97e:	f7fe fe77 	bl	8019670 <ov5640_get_output_size>

    return OV5640_EOK;
 801a982:	2300      	movs	r3, #0
}
 801a984:	4618      	mov	r0, r3
 801a986:	3710      	adds	r7, #16
 801a988:	46bd      	mov	sp, r7
 801a98a:	bd80      	pop	{r7, pc}

0801a98c <ov5640_init>:
 * @retval      OV5640_EOK   : OV5640模块初始化成功
 *              OV5640_ERROR : 通讯出错，OV5640模块初始化失败
 *              OV5640_ENOMEM: 内存不足，OV5640模块初始化失败
 */
uint8_t ov5640_init(void)
{
 801a98c:	b580      	push	{r7, lr}
 801a98e:	b082      	sub	sp, #8
 801a990:	af00      	add	r7, sp, #0
    uint16_t chip_id = 0x0000;
 801a992:	2300      	movs	r3, #0
 801a994:	80fb      	strh	r3, [r7, #6]

    ov5640_hw_init();               /* OV5640模块硬件初始化 */
 801a996:	f7fe fdb1 	bl	80194fc <ov5640_hw_init>
    ov5640_exit_power_down();       /* OV5640模块退出掉电模式 */
 801a99a:	f7fe fdc3 	bl	8019524 <ov5640_exit_power_down>
    ov5640_hw_reset();              /* OV5640模块硬件复位 */
 801a99e:	f7fe fde3 	bl	8019568 <ov5640_hw_reset>
    ov5640_sw_reset();              /* OV5640模块软件复位 */
 801a9a2:	f7fe fdf9 	bl	8019598 <ov5640_sw_reset>

    chip_id = ov5640_get_chip_id(); /* 获取芯片ID */
 801a9a6:	f7fe fe16 	bl	80195d6 <ov5640_get_chip_id>
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	80fb      	strh	r3, [r7, #6]
    usb_printf("chip id is %x \r\n",chip_id);
 801a9ae:	88fb      	ldrh	r3, [r7, #6]
 801a9b0:	4619      	mov	r1, r3
 801a9b2:	480a      	ldr	r0, [pc, #40]	; (801a9dc <ov5640_init+0x50>)
 801a9b4:	f000 f898 	bl	801aae8 <usb_printf>
    if (chip_id != OV5640_CHIP_ID)
 801a9b8:	88fb      	ldrh	r3, [r7, #6]
 801a9ba:	f245 6240 	movw	r2, #22080	; 0x5640
 801a9be:	4293      	cmp	r3, r2
 801a9c0:	d004      	beq.n	801a9cc <ov5640_init+0x40>
    {
    	usb_printf("no ov5640 \r\n");
 801a9c2:	4807      	ldr	r0, [pc, #28]	; (801a9e0 <ov5640_init+0x54>)
 801a9c4:	f000 f890 	bl	801aae8 <usb_printf>
        return OV5640_ERROR;
 801a9c8:	23ff      	movs	r3, #255	; 0xff
 801a9ca:	e002      	b.n	801a9d2 <ov5640_init+0x46>
    }

    ov5640_init_reg();              /* 初始化OV5640寄存器配置 */
 801a9cc:	f7fe fe1c 	bl	8019608 <ov5640_init_reg>
    return OV5640_OK;
 801a9d0:	2300      	movs	r3, #0
}
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	3708      	adds	r7, #8
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	bd80      	pop	{r7, pc}
 801a9da:	bf00      	nop
 801a9dc:	0801bcb4 	.word	0x0801bcb4
 801a9e0:	0801bcc8 	.word	0x0801bcc8

0801a9e4 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b088      	sub	sp, #32
 801a9e8:	af04      	add	r7, sp, #16
 801a9ea:	607b      	str	r3, [r7, #4]
 801a9ec:	4603      	mov	r3, r0
 801a9ee:	81fb      	strh	r3, [r7, #14]
 801a9f0:	460b      	mov	r3, r1
 801a9f2:	81bb      	strh	r3, [r7, #12]
 801a9f4:	4613      	mov	r3, r2
 801a9f6:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 801a9f8:	8978      	ldrh	r0, [r7, #10]
 801a9fa:	89ba      	ldrh	r2, [r7, #12]
 801a9fc:	89f9      	ldrh	r1, [r7, #14]
 801a9fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801aa02:	9302      	str	r3, [sp, #8]
 801aa04:	8b3b      	ldrh	r3, [r7, #24]
 801aa06:	9301      	str	r3, [sp, #4]
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	9300      	str	r3, [sp, #0]
 801aa0c:	4603      	mov	r3, r0
 801aa0e:	4806      	ldr	r0, [pc, #24]	; (801aa28 <I2C1_WriteReg+0x44>)
 801aa10:	f7ea fed6 	bl	80057c0 <HAL_I2C_Mem_Write>
 801aa14:	4603      	mov	r3, r0
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d101      	bne.n	801aa1e <I2C1_WriteReg+0x3a>
  {
    return HAL_OK;
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	e000      	b.n	801aa20 <I2C1_WriteReg+0x3c>
  }

  return HAL_ERROR;
 801aa1e:	2301      	movs	r3, #1
}
 801aa20:	4618      	mov	r0, r3
 801aa22:	3710      	adds	r7, #16
 801aa24:	46bd      	mov	sp, r7
 801aa26:	bd80      	pop	{r7, pc}
 801aa28:	2400097c 	.word	0x2400097c

0801aa2c <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 801aa2c:	b580      	push	{r7, lr}
 801aa2e:	b088      	sub	sp, #32
 801aa30:	af04      	add	r7, sp, #16
 801aa32:	607b      	str	r3, [r7, #4]
 801aa34:	4603      	mov	r3, r0
 801aa36:	81fb      	strh	r3, [r7, #14]
 801aa38:	460b      	mov	r3, r1
 801aa3a:	81bb      	strh	r3, [r7, #12]
 801aa3c:	4613      	mov	r3, r2
 801aa3e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 801aa40:	8978      	ldrh	r0, [r7, #10]
 801aa42:	89ba      	ldrh	r2, [r7, #12]
 801aa44:	89f9      	ldrh	r1, [r7, #14]
 801aa46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801aa4a:	9302      	str	r3, [sp, #8]
 801aa4c:	8b3b      	ldrh	r3, [r7, #24]
 801aa4e:	9301      	str	r3, [sp, #4]
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	9300      	str	r3, [sp, #0]
 801aa54:	4603      	mov	r3, r0
 801aa56:	4806      	ldr	r0, [pc, #24]	; (801aa70 <I2C1_ReadReg+0x44>)
 801aa58:	f7ea ffc6 	bl	80059e8 <HAL_I2C_Mem_Read>
 801aa5c:	4603      	mov	r3, r0
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d101      	bne.n	801aa66 <I2C1_ReadReg+0x3a>
  {
    return HAL_OK;
 801aa62:	2300      	movs	r3, #0
 801aa64:	e000      	b.n	801aa68 <I2C1_ReadReg+0x3c>
  }

  return HAL_ERROR;
 801aa66:	2301      	movs	r3, #1
}
 801aa68:	4618      	mov	r0, r3
 801aa6a:	3710      	adds	r7, #16
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}
 801aa70:	2400097c 	.word	0x2400097c

0801aa74 <BSP_I2C2_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b086      	sub	sp, #24
 801aa78:	af02      	add	r7, sp, #8
 801aa7a:	60ba      	str	r2, [r7, #8]
 801aa7c:	461a      	mov	r2, r3
 801aa7e:	4603      	mov	r3, r0
 801aa80:	81fb      	strh	r3, [r7, #14]
 801aa82:	460b      	mov	r3, r1
 801aa84:	81bb      	strh	r3, [r7, #12]
 801aa86:	4613      	mov	r3, r2
 801aa88:	80fb      	strh	r3, [r7, #6]
  if(I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 801aa8a:	89b9      	ldrh	r1, [r7, #12]
 801aa8c:	89f8      	ldrh	r0, [r7, #14]
 801aa8e:	88fb      	ldrh	r3, [r7, #6]
 801aa90:	9300      	str	r3, [sp, #0]
 801aa92:	68bb      	ldr	r3, [r7, #8]
 801aa94:	2202      	movs	r2, #2
 801aa96:	f7ff ffa5 	bl	801a9e4 <I2C1_WriteReg>
 801aa9a:	4603      	mov	r3, r0
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d101      	bne.n	801aaa4 <BSP_I2C2_WriteReg16+0x30>
  {
	 return HAL_OK;
 801aaa0:	2300      	movs	r3, #0
 801aaa2:	e000      	b.n	801aaa6 <BSP_I2C2_WriteReg16+0x32>
  }
  return HAL_ERROR;
 801aaa4:	2301      	movs	r3, #1
}
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	3710      	adds	r7, #16
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	bd80      	pop	{r7, pc}

0801aaae <BSP_I2C2_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 801aaae:	b580      	push	{r7, lr}
 801aab0:	b086      	sub	sp, #24
 801aab2:	af02      	add	r7, sp, #8
 801aab4:	60ba      	str	r2, [r7, #8]
 801aab6:	461a      	mov	r2, r3
 801aab8:	4603      	mov	r3, r0
 801aaba:	81fb      	strh	r3, [r7, #14]
 801aabc:	460b      	mov	r3, r1
 801aabe:	81bb      	strh	r3, [r7, #12]
 801aac0:	4613      	mov	r3, r2
 801aac2:	80fb      	strh	r3, [r7, #6]
  if(I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 801aac4:	89b9      	ldrh	r1, [r7, #12]
 801aac6:	89f8      	ldrh	r0, [r7, #14]
 801aac8:	88fb      	ldrh	r3, [r7, #6]
 801aaca:	9300      	str	r3, [sp, #0]
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	2202      	movs	r2, #2
 801aad0:	f7ff ffac 	bl	801aa2c <I2C1_ReadReg>
 801aad4:	4603      	mov	r3, r0
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d101      	bne.n	801aade <BSP_I2C2_ReadReg16+0x30>
  {
	 return HAL_OK;
 801aada:	2300      	movs	r3, #0
 801aadc:	e000      	b.n	801aae0 <BSP_I2C2_ReadReg16+0x32>
  }
  return HAL_ERROR;
 801aade:	2301      	movs	r3, #1
}
 801aae0:	4618      	mov	r0, r3
 801aae2:	3710      	adds	r7, #16
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd80      	pop	{r7, pc}

0801aae8 <usb_printf>:
#include "usbd_cdc_if.h"

//extern uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];

void usb_printf(const char *format, ...)
{
 801aae8:	b40f      	push	{r0, r1, r2, r3}
 801aaea:	b580      	push	{r7, lr}
 801aaec:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 801aaf0:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
    uint8_t buf[APP_TX_DATA_SIZE];

    va_start(args, format);
 801aaf2:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801aaf6:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
    length = vsnprintf((char *)buf, APP_TX_DATA_SIZE, (char *)format, args);
 801aafa:	4638      	mov	r0, r7
 801aafc:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 801ab00:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 801ab04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801ab08:	f000 fa5c 	bl	801afc4 <vsniprintf>
 801ab0c:	4603      	mov	r3, r0
 801ab0e:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    va_end(args);
    CDC_Transmit_FS(buf, length);
 801ab12:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 801ab16:	b29a      	uxth	r2, r3
 801ab18:	463b      	mov	r3, r7
 801ab1a:	4611      	mov	r1, r2
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f7fd febf 	bl	80188a0 <CDC_Transmit_FS>
}
 801ab22:	bf00      	nop
 801ab24:	f607 0708 	addw	r7, r7, #2056	; 0x808
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ab2e:	b004      	add	sp, #16
 801ab30:	4770      	bx	lr
	...

0801ab34 <malloc>:
 801ab34:	4b02      	ldr	r3, [pc, #8]	; (801ab40 <malloc+0xc>)
 801ab36:	4601      	mov	r1, r0
 801ab38:	6818      	ldr	r0, [r3, #0]
 801ab3a:	f000 b82b 	b.w	801ab94 <_malloc_r>
 801ab3e:	bf00      	nop
 801ab40:	24000894 	.word	0x24000894

0801ab44 <free>:
 801ab44:	4b02      	ldr	r3, [pc, #8]	; (801ab50 <free+0xc>)
 801ab46:	4601      	mov	r1, r0
 801ab48:	6818      	ldr	r0, [r3, #0]
 801ab4a:	f000 bb6b 	b.w	801b224 <_free_r>
 801ab4e:	bf00      	nop
 801ab50:	24000894 	.word	0x24000894

0801ab54 <sbrk_aligned>:
 801ab54:	b570      	push	{r4, r5, r6, lr}
 801ab56:	4e0e      	ldr	r6, [pc, #56]	; (801ab90 <sbrk_aligned+0x3c>)
 801ab58:	460c      	mov	r4, r1
 801ab5a:	6831      	ldr	r1, [r6, #0]
 801ab5c:	4605      	mov	r5, r0
 801ab5e:	b911      	cbnz	r1, 801ab66 <sbrk_aligned+0x12>
 801ab60:	f000 fb10 	bl	801b184 <_sbrk_r>
 801ab64:	6030      	str	r0, [r6, #0]
 801ab66:	4621      	mov	r1, r4
 801ab68:	4628      	mov	r0, r5
 801ab6a:	f000 fb0b 	bl	801b184 <_sbrk_r>
 801ab6e:	1c43      	adds	r3, r0, #1
 801ab70:	d00a      	beq.n	801ab88 <sbrk_aligned+0x34>
 801ab72:	1cc4      	adds	r4, r0, #3
 801ab74:	f024 0403 	bic.w	r4, r4, #3
 801ab78:	42a0      	cmp	r0, r4
 801ab7a:	d007      	beq.n	801ab8c <sbrk_aligned+0x38>
 801ab7c:	1a21      	subs	r1, r4, r0
 801ab7e:	4628      	mov	r0, r5
 801ab80:	f000 fb00 	bl	801b184 <_sbrk_r>
 801ab84:	3001      	adds	r0, #1
 801ab86:	d101      	bne.n	801ab8c <sbrk_aligned+0x38>
 801ab88:	f04f 34ff 	mov.w	r4, #4294967295
 801ab8c:	4620      	mov	r0, r4
 801ab8e:	bd70      	pop	{r4, r5, r6, pc}
 801ab90:	2400cb88 	.word	0x2400cb88

0801ab94 <_malloc_r>:
 801ab94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab98:	1ccd      	adds	r5, r1, #3
 801ab9a:	f025 0503 	bic.w	r5, r5, #3
 801ab9e:	3508      	adds	r5, #8
 801aba0:	2d0c      	cmp	r5, #12
 801aba2:	bf38      	it	cc
 801aba4:	250c      	movcc	r5, #12
 801aba6:	2d00      	cmp	r5, #0
 801aba8:	4607      	mov	r7, r0
 801abaa:	db01      	blt.n	801abb0 <_malloc_r+0x1c>
 801abac:	42a9      	cmp	r1, r5
 801abae:	d905      	bls.n	801abbc <_malloc_r+0x28>
 801abb0:	230c      	movs	r3, #12
 801abb2:	603b      	str	r3, [r7, #0]
 801abb4:	2600      	movs	r6, #0
 801abb6:	4630      	mov	r0, r6
 801abb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ac90 <_malloc_r+0xfc>
 801abc0:	f000 f868 	bl	801ac94 <__malloc_lock>
 801abc4:	f8d8 3000 	ldr.w	r3, [r8]
 801abc8:	461c      	mov	r4, r3
 801abca:	bb5c      	cbnz	r4, 801ac24 <_malloc_r+0x90>
 801abcc:	4629      	mov	r1, r5
 801abce:	4638      	mov	r0, r7
 801abd0:	f7ff ffc0 	bl	801ab54 <sbrk_aligned>
 801abd4:	1c43      	adds	r3, r0, #1
 801abd6:	4604      	mov	r4, r0
 801abd8:	d155      	bne.n	801ac86 <_malloc_r+0xf2>
 801abda:	f8d8 4000 	ldr.w	r4, [r8]
 801abde:	4626      	mov	r6, r4
 801abe0:	2e00      	cmp	r6, #0
 801abe2:	d145      	bne.n	801ac70 <_malloc_r+0xdc>
 801abe4:	2c00      	cmp	r4, #0
 801abe6:	d048      	beq.n	801ac7a <_malloc_r+0xe6>
 801abe8:	6823      	ldr	r3, [r4, #0]
 801abea:	4631      	mov	r1, r6
 801abec:	4638      	mov	r0, r7
 801abee:	eb04 0903 	add.w	r9, r4, r3
 801abf2:	f000 fac7 	bl	801b184 <_sbrk_r>
 801abf6:	4581      	cmp	r9, r0
 801abf8:	d13f      	bne.n	801ac7a <_malloc_r+0xe6>
 801abfa:	6821      	ldr	r1, [r4, #0]
 801abfc:	1a6d      	subs	r5, r5, r1
 801abfe:	4629      	mov	r1, r5
 801ac00:	4638      	mov	r0, r7
 801ac02:	f7ff ffa7 	bl	801ab54 <sbrk_aligned>
 801ac06:	3001      	adds	r0, #1
 801ac08:	d037      	beq.n	801ac7a <_malloc_r+0xe6>
 801ac0a:	6823      	ldr	r3, [r4, #0]
 801ac0c:	442b      	add	r3, r5
 801ac0e:	6023      	str	r3, [r4, #0]
 801ac10:	f8d8 3000 	ldr.w	r3, [r8]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d038      	beq.n	801ac8a <_malloc_r+0xf6>
 801ac18:	685a      	ldr	r2, [r3, #4]
 801ac1a:	42a2      	cmp	r2, r4
 801ac1c:	d12b      	bne.n	801ac76 <_malloc_r+0xe2>
 801ac1e:	2200      	movs	r2, #0
 801ac20:	605a      	str	r2, [r3, #4]
 801ac22:	e00f      	b.n	801ac44 <_malloc_r+0xb0>
 801ac24:	6822      	ldr	r2, [r4, #0]
 801ac26:	1b52      	subs	r2, r2, r5
 801ac28:	d41f      	bmi.n	801ac6a <_malloc_r+0xd6>
 801ac2a:	2a0b      	cmp	r2, #11
 801ac2c:	d917      	bls.n	801ac5e <_malloc_r+0xca>
 801ac2e:	1961      	adds	r1, r4, r5
 801ac30:	42a3      	cmp	r3, r4
 801ac32:	6025      	str	r5, [r4, #0]
 801ac34:	bf18      	it	ne
 801ac36:	6059      	strne	r1, [r3, #4]
 801ac38:	6863      	ldr	r3, [r4, #4]
 801ac3a:	bf08      	it	eq
 801ac3c:	f8c8 1000 	streq.w	r1, [r8]
 801ac40:	5162      	str	r2, [r4, r5]
 801ac42:	604b      	str	r3, [r1, #4]
 801ac44:	4638      	mov	r0, r7
 801ac46:	f104 060b 	add.w	r6, r4, #11
 801ac4a:	f000 f829 	bl	801aca0 <__malloc_unlock>
 801ac4e:	f026 0607 	bic.w	r6, r6, #7
 801ac52:	1d23      	adds	r3, r4, #4
 801ac54:	1af2      	subs	r2, r6, r3
 801ac56:	d0ae      	beq.n	801abb6 <_malloc_r+0x22>
 801ac58:	1b9b      	subs	r3, r3, r6
 801ac5a:	50a3      	str	r3, [r4, r2]
 801ac5c:	e7ab      	b.n	801abb6 <_malloc_r+0x22>
 801ac5e:	42a3      	cmp	r3, r4
 801ac60:	6862      	ldr	r2, [r4, #4]
 801ac62:	d1dd      	bne.n	801ac20 <_malloc_r+0x8c>
 801ac64:	f8c8 2000 	str.w	r2, [r8]
 801ac68:	e7ec      	b.n	801ac44 <_malloc_r+0xb0>
 801ac6a:	4623      	mov	r3, r4
 801ac6c:	6864      	ldr	r4, [r4, #4]
 801ac6e:	e7ac      	b.n	801abca <_malloc_r+0x36>
 801ac70:	4634      	mov	r4, r6
 801ac72:	6876      	ldr	r6, [r6, #4]
 801ac74:	e7b4      	b.n	801abe0 <_malloc_r+0x4c>
 801ac76:	4613      	mov	r3, r2
 801ac78:	e7cc      	b.n	801ac14 <_malloc_r+0x80>
 801ac7a:	230c      	movs	r3, #12
 801ac7c:	603b      	str	r3, [r7, #0]
 801ac7e:	4638      	mov	r0, r7
 801ac80:	f000 f80e 	bl	801aca0 <__malloc_unlock>
 801ac84:	e797      	b.n	801abb6 <_malloc_r+0x22>
 801ac86:	6025      	str	r5, [r4, #0]
 801ac88:	e7dc      	b.n	801ac44 <_malloc_r+0xb0>
 801ac8a:	605b      	str	r3, [r3, #4]
 801ac8c:	deff      	udf	#255	; 0xff
 801ac8e:	bf00      	nop
 801ac90:	2400cb84 	.word	0x2400cb84

0801ac94 <__malloc_lock>:
 801ac94:	4801      	ldr	r0, [pc, #4]	; (801ac9c <__malloc_lock+0x8>)
 801ac96:	f000 bac2 	b.w	801b21e <__retarget_lock_acquire_recursive>
 801ac9a:	bf00      	nop
 801ac9c:	2400cccc 	.word	0x2400cccc

0801aca0 <__malloc_unlock>:
 801aca0:	4801      	ldr	r0, [pc, #4]	; (801aca8 <__malloc_unlock+0x8>)
 801aca2:	f000 babd 	b.w	801b220 <__retarget_lock_release_recursive>
 801aca6:	bf00      	nop
 801aca8:	2400cccc 	.word	0x2400cccc

0801acac <std>:
 801acac:	2300      	movs	r3, #0
 801acae:	b510      	push	{r4, lr}
 801acb0:	4604      	mov	r4, r0
 801acb2:	e9c0 3300 	strd	r3, r3, [r0]
 801acb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801acba:	6083      	str	r3, [r0, #8]
 801acbc:	8181      	strh	r1, [r0, #12]
 801acbe:	6643      	str	r3, [r0, #100]	; 0x64
 801acc0:	81c2      	strh	r2, [r0, #14]
 801acc2:	6183      	str	r3, [r0, #24]
 801acc4:	4619      	mov	r1, r3
 801acc6:	2208      	movs	r2, #8
 801acc8:	305c      	adds	r0, #92	; 0x5c
 801acca:	f000 fa1f 	bl	801b10c <memset>
 801acce:	4b0d      	ldr	r3, [pc, #52]	; (801ad04 <std+0x58>)
 801acd0:	6263      	str	r3, [r4, #36]	; 0x24
 801acd2:	4b0d      	ldr	r3, [pc, #52]	; (801ad08 <std+0x5c>)
 801acd4:	62a3      	str	r3, [r4, #40]	; 0x28
 801acd6:	4b0d      	ldr	r3, [pc, #52]	; (801ad0c <std+0x60>)
 801acd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801acda:	4b0d      	ldr	r3, [pc, #52]	; (801ad10 <std+0x64>)
 801acdc:	6323      	str	r3, [r4, #48]	; 0x30
 801acde:	4b0d      	ldr	r3, [pc, #52]	; (801ad14 <std+0x68>)
 801ace0:	6224      	str	r4, [r4, #32]
 801ace2:	429c      	cmp	r4, r3
 801ace4:	d006      	beq.n	801acf4 <std+0x48>
 801ace6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801acea:	4294      	cmp	r4, r2
 801acec:	d002      	beq.n	801acf4 <std+0x48>
 801acee:	33d0      	adds	r3, #208	; 0xd0
 801acf0:	429c      	cmp	r4, r3
 801acf2:	d105      	bne.n	801ad00 <std+0x54>
 801acf4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801acf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acfc:	f000 ba8e 	b.w	801b21c <__retarget_lock_init_recursive>
 801ad00:	bd10      	pop	{r4, pc}
 801ad02:	bf00      	nop
 801ad04:	0801aee9 	.word	0x0801aee9
 801ad08:	0801af0b 	.word	0x0801af0b
 801ad0c:	0801af43 	.word	0x0801af43
 801ad10:	0801af67 	.word	0x0801af67
 801ad14:	2400cb8c 	.word	0x2400cb8c

0801ad18 <stdio_exit_handler>:
 801ad18:	4a02      	ldr	r2, [pc, #8]	; (801ad24 <stdio_exit_handler+0xc>)
 801ad1a:	4903      	ldr	r1, [pc, #12]	; (801ad28 <stdio_exit_handler+0x10>)
 801ad1c:	4803      	ldr	r0, [pc, #12]	; (801ad2c <stdio_exit_handler+0x14>)
 801ad1e:	f000 b869 	b.w	801adf4 <_fwalk_sglue>
 801ad22:	bf00      	nop
 801ad24:	2400083c 	.word	0x2400083c
 801ad28:	0801b999 	.word	0x0801b999
 801ad2c:	24000848 	.word	0x24000848

0801ad30 <cleanup_stdio>:
 801ad30:	6841      	ldr	r1, [r0, #4]
 801ad32:	4b0c      	ldr	r3, [pc, #48]	; (801ad64 <cleanup_stdio+0x34>)
 801ad34:	4299      	cmp	r1, r3
 801ad36:	b510      	push	{r4, lr}
 801ad38:	4604      	mov	r4, r0
 801ad3a:	d001      	beq.n	801ad40 <cleanup_stdio+0x10>
 801ad3c:	f000 fe2c 	bl	801b998 <_fflush_r>
 801ad40:	68a1      	ldr	r1, [r4, #8]
 801ad42:	4b09      	ldr	r3, [pc, #36]	; (801ad68 <cleanup_stdio+0x38>)
 801ad44:	4299      	cmp	r1, r3
 801ad46:	d002      	beq.n	801ad4e <cleanup_stdio+0x1e>
 801ad48:	4620      	mov	r0, r4
 801ad4a:	f000 fe25 	bl	801b998 <_fflush_r>
 801ad4e:	68e1      	ldr	r1, [r4, #12]
 801ad50:	4b06      	ldr	r3, [pc, #24]	; (801ad6c <cleanup_stdio+0x3c>)
 801ad52:	4299      	cmp	r1, r3
 801ad54:	d004      	beq.n	801ad60 <cleanup_stdio+0x30>
 801ad56:	4620      	mov	r0, r4
 801ad58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad5c:	f000 be1c 	b.w	801b998 <_fflush_r>
 801ad60:	bd10      	pop	{r4, pc}
 801ad62:	bf00      	nop
 801ad64:	2400cb8c 	.word	0x2400cb8c
 801ad68:	2400cbf4 	.word	0x2400cbf4
 801ad6c:	2400cc5c 	.word	0x2400cc5c

0801ad70 <global_stdio_init.part.0>:
 801ad70:	b510      	push	{r4, lr}
 801ad72:	4b0b      	ldr	r3, [pc, #44]	; (801ada0 <global_stdio_init.part.0+0x30>)
 801ad74:	4c0b      	ldr	r4, [pc, #44]	; (801ada4 <global_stdio_init.part.0+0x34>)
 801ad76:	4a0c      	ldr	r2, [pc, #48]	; (801ada8 <global_stdio_init.part.0+0x38>)
 801ad78:	601a      	str	r2, [r3, #0]
 801ad7a:	4620      	mov	r0, r4
 801ad7c:	2200      	movs	r2, #0
 801ad7e:	2104      	movs	r1, #4
 801ad80:	f7ff ff94 	bl	801acac <std>
 801ad84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801ad88:	2201      	movs	r2, #1
 801ad8a:	2109      	movs	r1, #9
 801ad8c:	f7ff ff8e 	bl	801acac <std>
 801ad90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801ad94:	2202      	movs	r2, #2
 801ad96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad9a:	2112      	movs	r1, #18
 801ad9c:	f7ff bf86 	b.w	801acac <std>
 801ada0:	2400ccc4 	.word	0x2400ccc4
 801ada4:	2400cb8c 	.word	0x2400cb8c
 801ada8:	0801ad19 	.word	0x0801ad19

0801adac <__sfp_lock_acquire>:
 801adac:	4801      	ldr	r0, [pc, #4]	; (801adb4 <__sfp_lock_acquire+0x8>)
 801adae:	f000 ba36 	b.w	801b21e <__retarget_lock_acquire_recursive>
 801adb2:	bf00      	nop
 801adb4:	2400cccd 	.word	0x2400cccd

0801adb8 <__sfp_lock_release>:
 801adb8:	4801      	ldr	r0, [pc, #4]	; (801adc0 <__sfp_lock_release+0x8>)
 801adba:	f000 ba31 	b.w	801b220 <__retarget_lock_release_recursive>
 801adbe:	bf00      	nop
 801adc0:	2400cccd 	.word	0x2400cccd

0801adc4 <__sinit>:
 801adc4:	b510      	push	{r4, lr}
 801adc6:	4604      	mov	r4, r0
 801adc8:	f7ff fff0 	bl	801adac <__sfp_lock_acquire>
 801adcc:	6a23      	ldr	r3, [r4, #32]
 801adce:	b11b      	cbz	r3, 801add8 <__sinit+0x14>
 801add0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801add4:	f7ff bff0 	b.w	801adb8 <__sfp_lock_release>
 801add8:	4b04      	ldr	r3, [pc, #16]	; (801adec <__sinit+0x28>)
 801adda:	6223      	str	r3, [r4, #32]
 801addc:	4b04      	ldr	r3, [pc, #16]	; (801adf0 <__sinit+0x2c>)
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d1f5      	bne.n	801add0 <__sinit+0xc>
 801ade4:	f7ff ffc4 	bl	801ad70 <global_stdio_init.part.0>
 801ade8:	e7f2      	b.n	801add0 <__sinit+0xc>
 801adea:	bf00      	nop
 801adec:	0801ad31 	.word	0x0801ad31
 801adf0:	2400ccc4 	.word	0x2400ccc4

0801adf4 <_fwalk_sglue>:
 801adf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801adf8:	4607      	mov	r7, r0
 801adfa:	4688      	mov	r8, r1
 801adfc:	4614      	mov	r4, r2
 801adfe:	2600      	movs	r6, #0
 801ae00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ae04:	f1b9 0901 	subs.w	r9, r9, #1
 801ae08:	d505      	bpl.n	801ae16 <_fwalk_sglue+0x22>
 801ae0a:	6824      	ldr	r4, [r4, #0]
 801ae0c:	2c00      	cmp	r4, #0
 801ae0e:	d1f7      	bne.n	801ae00 <_fwalk_sglue+0xc>
 801ae10:	4630      	mov	r0, r6
 801ae12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae16:	89ab      	ldrh	r3, [r5, #12]
 801ae18:	2b01      	cmp	r3, #1
 801ae1a:	d907      	bls.n	801ae2c <_fwalk_sglue+0x38>
 801ae1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ae20:	3301      	adds	r3, #1
 801ae22:	d003      	beq.n	801ae2c <_fwalk_sglue+0x38>
 801ae24:	4629      	mov	r1, r5
 801ae26:	4638      	mov	r0, r7
 801ae28:	47c0      	blx	r8
 801ae2a:	4306      	orrs	r6, r0
 801ae2c:	3568      	adds	r5, #104	; 0x68
 801ae2e:	e7e9      	b.n	801ae04 <_fwalk_sglue+0x10>

0801ae30 <_puts_r>:
 801ae30:	6a03      	ldr	r3, [r0, #32]
 801ae32:	b570      	push	{r4, r5, r6, lr}
 801ae34:	6884      	ldr	r4, [r0, #8]
 801ae36:	4605      	mov	r5, r0
 801ae38:	460e      	mov	r6, r1
 801ae3a:	b90b      	cbnz	r3, 801ae40 <_puts_r+0x10>
 801ae3c:	f7ff ffc2 	bl	801adc4 <__sinit>
 801ae40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ae42:	07db      	lsls	r3, r3, #31
 801ae44:	d405      	bmi.n	801ae52 <_puts_r+0x22>
 801ae46:	89a3      	ldrh	r3, [r4, #12]
 801ae48:	0598      	lsls	r0, r3, #22
 801ae4a:	d402      	bmi.n	801ae52 <_puts_r+0x22>
 801ae4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ae4e:	f000 f9e6 	bl	801b21e <__retarget_lock_acquire_recursive>
 801ae52:	89a3      	ldrh	r3, [r4, #12]
 801ae54:	0719      	lsls	r1, r3, #28
 801ae56:	d513      	bpl.n	801ae80 <_puts_r+0x50>
 801ae58:	6923      	ldr	r3, [r4, #16]
 801ae5a:	b18b      	cbz	r3, 801ae80 <_puts_r+0x50>
 801ae5c:	3e01      	subs	r6, #1
 801ae5e:	68a3      	ldr	r3, [r4, #8]
 801ae60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ae64:	3b01      	subs	r3, #1
 801ae66:	60a3      	str	r3, [r4, #8]
 801ae68:	b9e9      	cbnz	r1, 801aea6 <_puts_r+0x76>
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	da2e      	bge.n	801aecc <_puts_r+0x9c>
 801ae6e:	4622      	mov	r2, r4
 801ae70:	210a      	movs	r1, #10
 801ae72:	4628      	mov	r0, r5
 801ae74:	f000 f8b4 	bl	801afe0 <__swbuf_r>
 801ae78:	3001      	adds	r0, #1
 801ae7a:	d007      	beq.n	801ae8c <_puts_r+0x5c>
 801ae7c:	250a      	movs	r5, #10
 801ae7e:	e007      	b.n	801ae90 <_puts_r+0x60>
 801ae80:	4621      	mov	r1, r4
 801ae82:	4628      	mov	r0, r5
 801ae84:	f000 f8ea 	bl	801b05c <__swsetup_r>
 801ae88:	2800      	cmp	r0, #0
 801ae8a:	d0e7      	beq.n	801ae5c <_puts_r+0x2c>
 801ae8c:	f04f 35ff 	mov.w	r5, #4294967295
 801ae90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ae92:	07da      	lsls	r2, r3, #31
 801ae94:	d405      	bmi.n	801aea2 <_puts_r+0x72>
 801ae96:	89a3      	ldrh	r3, [r4, #12]
 801ae98:	059b      	lsls	r3, r3, #22
 801ae9a:	d402      	bmi.n	801aea2 <_puts_r+0x72>
 801ae9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ae9e:	f000 f9bf 	bl	801b220 <__retarget_lock_release_recursive>
 801aea2:	4628      	mov	r0, r5
 801aea4:	bd70      	pop	{r4, r5, r6, pc}
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	da04      	bge.n	801aeb4 <_puts_r+0x84>
 801aeaa:	69a2      	ldr	r2, [r4, #24]
 801aeac:	429a      	cmp	r2, r3
 801aeae:	dc06      	bgt.n	801aebe <_puts_r+0x8e>
 801aeb0:	290a      	cmp	r1, #10
 801aeb2:	d004      	beq.n	801aebe <_puts_r+0x8e>
 801aeb4:	6823      	ldr	r3, [r4, #0]
 801aeb6:	1c5a      	adds	r2, r3, #1
 801aeb8:	6022      	str	r2, [r4, #0]
 801aeba:	7019      	strb	r1, [r3, #0]
 801aebc:	e7cf      	b.n	801ae5e <_puts_r+0x2e>
 801aebe:	4622      	mov	r2, r4
 801aec0:	4628      	mov	r0, r5
 801aec2:	f000 f88d 	bl	801afe0 <__swbuf_r>
 801aec6:	3001      	adds	r0, #1
 801aec8:	d1c9      	bne.n	801ae5e <_puts_r+0x2e>
 801aeca:	e7df      	b.n	801ae8c <_puts_r+0x5c>
 801aecc:	6823      	ldr	r3, [r4, #0]
 801aece:	250a      	movs	r5, #10
 801aed0:	1c5a      	adds	r2, r3, #1
 801aed2:	6022      	str	r2, [r4, #0]
 801aed4:	701d      	strb	r5, [r3, #0]
 801aed6:	e7db      	b.n	801ae90 <_puts_r+0x60>

0801aed8 <puts>:
 801aed8:	4b02      	ldr	r3, [pc, #8]	; (801aee4 <puts+0xc>)
 801aeda:	4601      	mov	r1, r0
 801aedc:	6818      	ldr	r0, [r3, #0]
 801aede:	f7ff bfa7 	b.w	801ae30 <_puts_r>
 801aee2:	bf00      	nop
 801aee4:	24000894 	.word	0x24000894

0801aee8 <__sread>:
 801aee8:	b510      	push	{r4, lr}
 801aeea:	460c      	mov	r4, r1
 801aeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aef0:	f000 f936 	bl	801b160 <_read_r>
 801aef4:	2800      	cmp	r0, #0
 801aef6:	bfab      	itete	ge
 801aef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801aefa:	89a3      	ldrhlt	r3, [r4, #12]
 801aefc:	181b      	addge	r3, r3, r0
 801aefe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801af02:	bfac      	ite	ge
 801af04:	6563      	strge	r3, [r4, #84]	; 0x54
 801af06:	81a3      	strhlt	r3, [r4, #12]
 801af08:	bd10      	pop	{r4, pc}

0801af0a <__swrite>:
 801af0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af0e:	461f      	mov	r7, r3
 801af10:	898b      	ldrh	r3, [r1, #12]
 801af12:	05db      	lsls	r3, r3, #23
 801af14:	4605      	mov	r5, r0
 801af16:	460c      	mov	r4, r1
 801af18:	4616      	mov	r6, r2
 801af1a:	d505      	bpl.n	801af28 <__swrite+0x1e>
 801af1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af20:	2302      	movs	r3, #2
 801af22:	2200      	movs	r2, #0
 801af24:	f000 f90a 	bl	801b13c <_lseek_r>
 801af28:	89a3      	ldrh	r3, [r4, #12]
 801af2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801af32:	81a3      	strh	r3, [r4, #12]
 801af34:	4632      	mov	r2, r6
 801af36:	463b      	mov	r3, r7
 801af38:	4628      	mov	r0, r5
 801af3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af3e:	f000 b931 	b.w	801b1a4 <_write_r>

0801af42 <__sseek>:
 801af42:	b510      	push	{r4, lr}
 801af44:	460c      	mov	r4, r1
 801af46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af4a:	f000 f8f7 	bl	801b13c <_lseek_r>
 801af4e:	1c43      	adds	r3, r0, #1
 801af50:	89a3      	ldrh	r3, [r4, #12]
 801af52:	bf15      	itete	ne
 801af54:	6560      	strne	r0, [r4, #84]	; 0x54
 801af56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801af5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801af5e:	81a3      	strheq	r3, [r4, #12]
 801af60:	bf18      	it	ne
 801af62:	81a3      	strhne	r3, [r4, #12]
 801af64:	bd10      	pop	{r4, pc}

0801af66 <__sclose>:
 801af66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af6a:	f000 b8d7 	b.w	801b11c <_close_r>

0801af6e <_vsniprintf_r>:
 801af6e:	b530      	push	{r4, r5, lr}
 801af70:	4614      	mov	r4, r2
 801af72:	2c00      	cmp	r4, #0
 801af74:	b09b      	sub	sp, #108	; 0x6c
 801af76:	4605      	mov	r5, r0
 801af78:	461a      	mov	r2, r3
 801af7a:	da05      	bge.n	801af88 <_vsniprintf_r+0x1a>
 801af7c:	238b      	movs	r3, #139	; 0x8b
 801af7e:	6003      	str	r3, [r0, #0]
 801af80:	f04f 30ff 	mov.w	r0, #4294967295
 801af84:	b01b      	add	sp, #108	; 0x6c
 801af86:	bd30      	pop	{r4, r5, pc}
 801af88:	f44f 7302 	mov.w	r3, #520	; 0x208
 801af8c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801af90:	bf14      	ite	ne
 801af92:	f104 33ff 	addne.w	r3, r4, #4294967295
 801af96:	4623      	moveq	r3, r4
 801af98:	9302      	str	r3, [sp, #8]
 801af9a:	9305      	str	r3, [sp, #20]
 801af9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801afa0:	9100      	str	r1, [sp, #0]
 801afa2:	9104      	str	r1, [sp, #16]
 801afa4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801afa8:	4669      	mov	r1, sp
 801afaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801afac:	f000 f9e0 	bl	801b370 <_svfiprintf_r>
 801afb0:	1c43      	adds	r3, r0, #1
 801afb2:	bfbc      	itt	lt
 801afb4:	238b      	movlt	r3, #139	; 0x8b
 801afb6:	602b      	strlt	r3, [r5, #0]
 801afb8:	2c00      	cmp	r4, #0
 801afba:	d0e3      	beq.n	801af84 <_vsniprintf_r+0x16>
 801afbc:	9b00      	ldr	r3, [sp, #0]
 801afbe:	2200      	movs	r2, #0
 801afc0:	701a      	strb	r2, [r3, #0]
 801afc2:	e7df      	b.n	801af84 <_vsniprintf_r+0x16>

0801afc4 <vsniprintf>:
 801afc4:	b507      	push	{r0, r1, r2, lr}
 801afc6:	9300      	str	r3, [sp, #0]
 801afc8:	4613      	mov	r3, r2
 801afca:	460a      	mov	r2, r1
 801afcc:	4601      	mov	r1, r0
 801afce:	4803      	ldr	r0, [pc, #12]	; (801afdc <vsniprintf+0x18>)
 801afd0:	6800      	ldr	r0, [r0, #0]
 801afd2:	f7ff ffcc 	bl	801af6e <_vsniprintf_r>
 801afd6:	b003      	add	sp, #12
 801afd8:	f85d fb04 	ldr.w	pc, [sp], #4
 801afdc:	24000894 	.word	0x24000894

0801afe0 <__swbuf_r>:
 801afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afe2:	460e      	mov	r6, r1
 801afe4:	4614      	mov	r4, r2
 801afe6:	4605      	mov	r5, r0
 801afe8:	b118      	cbz	r0, 801aff2 <__swbuf_r+0x12>
 801afea:	6a03      	ldr	r3, [r0, #32]
 801afec:	b90b      	cbnz	r3, 801aff2 <__swbuf_r+0x12>
 801afee:	f7ff fee9 	bl	801adc4 <__sinit>
 801aff2:	69a3      	ldr	r3, [r4, #24]
 801aff4:	60a3      	str	r3, [r4, #8]
 801aff6:	89a3      	ldrh	r3, [r4, #12]
 801aff8:	071a      	lsls	r2, r3, #28
 801affa:	d525      	bpl.n	801b048 <__swbuf_r+0x68>
 801affc:	6923      	ldr	r3, [r4, #16]
 801affe:	b31b      	cbz	r3, 801b048 <__swbuf_r+0x68>
 801b000:	6823      	ldr	r3, [r4, #0]
 801b002:	6922      	ldr	r2, [r4, #16]
 801b004:	1a98      	subs	r0, r3, r2
 801b006:	6963      	ldr	r3, [r4, #20]
 801b008:	b2f6      	uxtb	r6, r6
 801b00a:	4283      	cmp	r3, r0
 801b00c:	4637      	mov	r7, r6
 801b00e:	dc04      	bgt.n	801b01a <__swbuf_r+0x3a>
 801b010:	4621      	mov	r1, r4
 801b012:	4628      	mov	r0, r5
 801b014:	f000 fcc0 	bl	801b998 <_fflush_r>
 801b018:	b9e0      	cbnz	r0, 801b054 <__swbuf_r+0x74>
 801b01a:	68a3      	ldr	r3, [r4, #8]
 801b01c:	3b01      	subs	r3, #1
 801b01e:	60a3      	str	r3, [r4, #8]
 801b020:	6823      	ldr	r3, [r4, #0]
 801b022:	1c5a      	adds	r2, r3, #1
 801b024:	6022      	str	r2, [r4, #0]
 801b026:	701e      	strb	r6, [r3, #0]
 801b028:	6962      	ldr	r2, [r4, #20]
 801b02a:	1c43      	adds	r3, r0, #1
 801b02c:	429a      	cmp	r2, r3
 801b02e:	d004      	beq.n	801b03a <__swbuf_r+0x5a>
 801b030:	89a3      	ldrh	r3, [r4, #12]
 801b032:	07db      	lsls	r3, r3, #31
 801b034:	d506      	bpl.n	801b044 <__swbuf_r+0x64>
 801b036:	2e0a      	cmp	r6, #10
 801b038:	d104      	bne.n	801b044 <__swbuf_r+0x64>
 801b03a:	4621      	mov	r1, r4
 801b03c:	4628      	mov	r0, r5
 801b03e:	f000 fcab 	bl	801b998 <_fflush_r>
 801b042:	b938      	cbnz	r0, 801b054 <__swbuf_r+0x74>
 801b044:	4638      	mov	r0, r7
 801b046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b048:	4621      	mov	r1, r4
 801b04a:	4628      	mov	r0, r5
 801b04c:	f000 f806 	bl	801b05c <__swsetup_r>
 801b050:	2800      	cmp	r0, #0
 801b052:	d0d5      	beq.n	801b000 <__swbuf_r+0x20>
 801b054:	f04f 37ff 	mov.w	r7, #4294967295
 801b058:	e7f4      	b.n	801b044 <__swbuf_r+0x64>
	...

0801b05c <__swsetup_r>:
 801b05c:	b538      	push	{r3, r4, r5, lr}
 801b05e:	4b2a      	ldr	r3, [pc, #168]	; (801b108 <__swsetup_r+0xac>)
 801b060:	4605      	mov	r5, r0
 801b062:	6818      	ldr	r0, [r3, #0]
 801b064:	460c      	mov	r4, r1
 801b066:	b118      	cbz	r0, 801b070 <__swsetup_r+0x14>
 801b068:	6a03      	ldr	r3, [r0, #32]
 801b06a:	b90b      	cbnz	r3, 801b070 <__swsetup_r+0x14>
 801b06c:	f7ff feaa 	bl	801adc4 <__sinit>
 801b070:	89a3      	ldrh	r3, [r4, #12]
 801b072:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b076:	0718      	lsls	r0, r3, #28
 801b078:	d422      	bmi.n	801b0c0 <__swsetup_r+0x64>
 801b07a:	06d9      	lsls	r1, r3, #27
 801b07c:	d407      	bmi.n	801b08e <__swsetup_r+0x32>
 801b07e:	2309      	movs	r3, #9
 801b080:	602b      	str	r3, [r5, #0]
 801b082:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b086:	81a3      	strh	r3, [r4, #12]
 801b088:	f04f 30ff 	mov.w	r0, #4294967295
 801b08c:	e034      	b.n	801b0f8 <__swsetup_r+0x9c>
 801b08e:	0758      	lsls	r0, r3, #29
 801b090:	d512      	bpl.n	801b0b8 <__swsetup_r+0x5c>
 801b092:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b094:	b141      	cbz	r1, 801b0a8 <__swsetup_r+0x4c>
 801b096:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b09a:	4299      	cmp	r1, r3
 801b09c:	d002      	beq.n	801b0a4 <__swsetup_r+0x48>
 801b09e:	4628      	mov	r0, r5
 801b0a0:	f000 f8c0 	bl	801b224 <_free_r>
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	6363      	str	r3, [r4, #52]	; 0x34
 801b0a8:	89a3      	ldrh	r3, [r4, #12]
 801b0aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b0ae:	81a3      	strh	r3, [r4, #12]
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	6063      	str	r3, [r4, #4]
 801b0b4:	6923      	ldr	r3, [r4, #16]
 801b0b6:	6023      	str	r3, [r4, #0]
 801b0b8:	89a3      	ldrh	r3, [r4, #12]
 801b0ba:	f043 0308 	orr.w	r3, r3, #8
 801b0be:	81a3      	strh	r3, [r4, #12]
 801b0c0:	6923      	ldr	r3, [r4, #16]
 801b0c2:	b94b      	cbnz	r3, 801b0d8 <__swsetup_r+0x7c>
 801b0c4:	89a3      	ldrh	r3, [r4, #12]
 801b0c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b0ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b0ce:	d003      	beq.n	801b0d8 <__swsetup_r+0x7c>
 801b0d0:	4621      	mov	r1, r4
 801b0d2:	4628      	mov	r0, r5
 801b0d4:	f000 fcae 	bl	801ba34 <__smakebuf_r>
 801b0d8:	89a0      	ldrh	r0, [r4, #12]
 801b0da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b0de:	f010 0301 	ands.w	r3, r0, #1
 801b0e2:	d00a      	beq.n	801b0fa <__swsetup_r+0x9e>
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	60a3      	str	r3, [r4, #8]
 801b0e8:	6963      	ldr	r3, [r4, #20]
 801b0ea:	425b      	negs	r3, r3
 801b0ec:	61a3      	str	r3, [r4, #24]
 801b0ee:	6923      	ldr	r3, [r4, #16]
 801b0f0:	b943      	cbnz	r3, 801b104 <__swsetup_r+0xa8>
 801b0f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b0f6:	d1c4      	bne.n	801b082 <__swsetup_r+0x26>
 801b0f8:	bd38      	pop	{r3, r4, r5, pc}
 801b0fa:	0781      	lsls	r1, r0, #30
 801b0fc:	bf58      	it	pl
 801b0fe:	6963      	ldrpl	r3, [r4, #20]
 801b100:	60a3      	str	r3, [r4, #8]
 801b102:	e7f4      	b.n	801b0ee <__swsetup_r+0x92>
 801b104:	2000      	movs	r0, #0
 801b106:	e7f7      	b.n	801b0f8 <__swsetup_r+0x9c>
 801b108:	24000894 	.word	0x24000894

0801b10c <memset>:
 801b10c:	4402      	add	r2, r0
 801b10e:	4603      	mov	r3, r0
 801b110:	4293      	cmp	r3, r2
 801b112:	d100      	bne.n	801b116 <memset+0xa>
 801b114:	4770      	bx	lr
 801b116:	f803 1b01 	strb.w	r1, [r3], #1
 801b11a:	e7f9      	b.n	801b110 <memset+0x4>

0801b11c <_close_r>:
 801b11c:	b538      	push	{r3, r4, r5, lr}
 801b11e:	4d06      	ldr	r5, [pc, #24]	; (801b138 <_close_r+0x1c>)
 801b120:	2300      	movs	r3, #0
 801b122:	4604      	mov	r4, r0
 801b124:	4608      	mov	r0, r1
 801b126:	602b      	str	r3, [r5, #0]
 801b128:	f7e5 ffad 	bl	8001086 <_close>
 801b12c:	1c43      	adds	r3, r0, #1
 801b12e:	d102      	bne.n	801b136 <_close_r+0x1a>
 801b130:	682b      	ldr	r3, [r5, #0]
 801b132:	b103      	cbz	r3, 801b136 <_close_r+0x1a>
 801b134:	6023      	str	r3, [r4, #0]
 801b136:	bd38      	pop	{r3, r4, r5, pc}
 801b138:	2400ccc8 	.word	0x2400ccc8

0801b13c <_lseek_r>:
 801b13c:	b538      	push	{r3, r4, r5, lr}
 801b13e:	4d07      	ldr	r5, [pc, #28]	; (801b15c <_lseek_r+0x20>)
 801b140:	4604      	mov	r4, r0
 801b142:	4608      	mov	r0, r1
 801b144:	4611      	mov	r1, r2
 801b146:	2200      	movs	r2, #0
 801b148:	602a      	str	r2, [r5, #0]
 801b14a:	461a      	mov	r2, r3
 801b14c:	f7e5 ffc2 	bl	80010d4 <_lseek>
 801b150:	1c43      	adds	r3, r0, #1
 801b152:	d102      	bne.n	801b15a <_lseek_r+0x1e>
 801b154:	682b      	ldr	r3, [r5, #0]
 801b156:	b103      	cbz	r3, 801b15a <_lseek_r+0x1e>
 801b158:	6023      	str	r3, [r4, #0]
 801b15a:	bd38      	pop	{r3, r4, r5, pc}
 801b15c:	2400ccc8 	.word	0x2400ccc8

0801b160 <_read_r>:
 801b160:	b538      	push	{r3, r4, r5, lr}
 801b162:	4d07      	ldr	r5, [pc, #28]	; (801b180 <_read_r+0x20>)
 801b164:	4604      	mov	r4, r0
 801b166:	4608      	mov	r0, r1
 801b168:	4611      	mov	r1, r2
 801b16a:	2200      	movs	r2, #0
 801b16c:	602a      	str	r2, [r5, #0]
 801b16e:	461a      	mov	r2, r3
 801b170:	f7e5 ff50 	bl	8001014 <_read>
 801b174:	1c43      	adds	r3, r0, #1
 801b176:	d102      	bne.n	801b17e <_read_r+0x1e>
 801b178:	682b      	ldr	r3, [r5, #0]
 801b17a:	b103      	cbz	r3, 801b17e <_read_r+0x1e>
 801b17c:	6023      	str	r3, [r4, #0]
 801b17e:	bd38      	pop	{r3, r4, r5, pc}
 801b180:	2400ccc8 	.word	0x2400ccc8

0801b184 <_sbrk_r>:
 801b184:	b538      	push	{r3, r4, r5, lr}
 801b186:	4d06      	ldr	r5, [pc, #24]	; (801b1a0 <_sbrk_r+0x1c>)
 801b188:	2300      	movs	r3, #0
 801b18a:	4604      	mov	r4, r0
 801b18c:	4608      	mov	r0, r1
 801b18e:	602b      	str	r3, [r5, #0]
 801b190:	f7e5 ffae 	bl	80010f0 <_sbrk>
 801b194:	1c43      	adds	r3, r0, #1
 801b196:	d102      	bne.n	801b19e <_sbrk_r+0x1a>
 801b198:	682b      	ldr	r3, [r5, #0]
 801b19a:	b103      	cbz	r3, 801b19e <_sbrk_r+0x1a>
 801b19c:	6023      	str	r3, [r4, #0]
 801b19e:	bd38      	pop	{r3, r4, r5, pc}
 801b1a0:	2400ccc8 	.word	0x2400ccc8

0801b1a4 <_write_r>:
 801b1a4:	b538      	push	{r3, r4, r5, lr}
 801b1a6:	4d07      	ldr	r5, [pc, #28]	; (801b1c4 <_write_r+0x20>)
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	4608      	mov	r0, r1
 801b1ac:	4611      	mov	r1, r2
 801b1ae:	2200      	movs	r2, #0
 801b1b0:	602a      	str	r2, [r5, #0]
 801b1b2:	461a      	mov	r2, r3
 801b1b4:	f7e5 ff4b 	bl	800104e <_write>
 801b1b8:	1c43      	adds	r3, r0, #1
 801b1ba:	d102      	bne.n	801b1c2 <_write_r+0x1e>
 801b1bc:	682b      	ldr	r3, [r5, #0]
 801b1be:	b103      	cbz	r3, 801b1c2 <_write_r+0x1e>
 801b1c0:	6023      	str	r3, [r4, #0]
 801b1c2:	bd38      	pop	{r3, r4, r5, pc}
 801b1c4:	2400ccc8 	.word	0x2400ccc8

0801b1c8 <__errno>:
 801b1c8:	4b01      	ldr	r3, [pc, #4]	; (801b1d0 <__errno+0x8>)
 801b1ca:	6818      	ldr	r0, [r3, #0]
 801b1cc:	4770      	bx	lr
 801b1ce:	bf00      	nop
 801b1d0:	24000894 	.word	0x24000894

0801b1d4 <__libc_init_array>:
 801b1d4:	b570      	push	{r4, r5, r6, lr}
 801b1d6:	4d0d      	ldr	r5, [pc, #52]	; (801b20c <__libc_init_array+0x38>)
 801b1d8:	4c0d      	ldr	r4, [pc, #52]	; (801b210 <__libc_init_array+0x3c>)
 801b1da:	1b64      	subs	r4, r4, r5
 801b1dc:	10a4      	asrs	r4, r4, #2
 801b1de:	2600      	movs	r6, #0
 801b1e0:	42a6      	cmp	r6, r4
 801b1e2:	d109      	bne.n	801b1f8 <__libc_init_array+0x24>
 801b1e4:	4d0b      	ldr	r5, [pc, #44]	; (801b214 <__libc_init_array+0x40>)
 801b1e6:	4c0c      	ldr	r4, [pc, #48]	; (801b218 <__libc_init_array+0x44>)
 801b1e8:	f000 fce2 	bl	801bbb0 <_init>
 801b1ec:	1b64      	subs	r4, r4, r5
 801b1ee:	10a4      	asrs	r4, r4, #2
 801b1f0:	2600      	movs	r6, #0
 801b1f2:	42a6      	cmp	r6, r4
 801b1f4:	d105      	bne.n	801b202 <__libc_init_array+0x2e>
 801b1f6:	bd70      	pop	{r4, r5, r6, pc}
 801b1f8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1fc:	4798      	blx	r3
 801b1fe:	3601      	adds	r6, #1
 801b200:	e7ee      	b.n	801b1e0 <__libc_init_array+0xc>
 801b202:	f855 3b04 	ldr.w	r3, [r5], #4
 801b206:	4798      	blx	r3
 801b208:	3601      	adds	r6, #1
 801b20a:	e7f2      	b.n	801b1f2 <__libc_init_array+0x1e>
 801b20c:	0804b060 	.word	0x0804b060
 801b210:	0804b060 	.word	0x0804b060
 801b214:	0804b060 	.word	0x0804b060
 801b218:	0804b064 	.word	0x0804b064

0801b21c <__retarget_lock_init_recursive>:
 801b21c:	4770      	bx	lr

0801b21e <__retarget_lock_acquire_recursive>:
 801b21e:	4770      	bx	lr

0801b220 <__retarget_lock_release_recursive>:
 801b220:	4770      	bx	lr
	...

0801b224 <_free_r>:
 801b224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b226:	2900      	cmp	r1, #0
 801b228:	d044      	beq.n	801b2b4 <_free_r+0x90>
 801b22a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b22e:	9001      	str	r0, [sp, #4]
 801b230:	2b00      	cmp	r3, #0
 801b232:	f1a1 0404 	sub.w	r4, r1, #4
 801b236:	bfb8      	it	lt
 801b238:	18e4      	addlt	r4, r4, r3
 801b23a:	f7ff fd2b 	bl	801ac94 <__malloc_lock>
 801b23e:	4a1e      	ldr	r2, [pc, #120]	; (801b2b8 <_free_r+0x94>)
 801b240:	9801      	ldr	r0, [sp, #4]
 801b242:	6813      	ldr	r3, [r2, #0]
 801b244:	b933      	cbnz	r3, 801b254 <_free_r+0x30>
 801b246:	6063      	str	r3, [r4, #4]
 801b248:	6014      	str	r4, [r2, #0]
 801b24a:	b003      	add	sp, #12
 801b24c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b250:	f7ff bd26 	b.w	801aca0 <__malloc_unlock>
 801b254:	42a3      	cmp	r3, r4
 801b256:	d908      	bls.n	801b26a <_free_r+0x46>
 801b258:	6825      	ldr	r5, [r4, #0]
 801b25a:	1961      	adds	r1, r4, r5
 801b25c:	428b      	cmp	r3, r1
 801b25e:	bf01      	itttt	eq
 801b260:	6819      	ldreq	r1, [r3, #0]
 801b262:	685b      	ldreq	r3, [r3, #4]
 801b264:	1949      	addeq	r1, r1, r5
 801b266:	6021      	streq	r1, [r4, #0]
 801b268:	e7ed      	b.n	801b246 <_free_r+0x22>
 801b26a:	461a      	mov	r2, r3
 801b26c:	685b      	ldr	r3, [r3, #4]
 801b26e:	b10b      	cbz	r3, 801b274 <_free_r+0x50>
 801b270:	42a3      	cmp	r3, r4
 801b272:	d9fa      	bls.n	801b26a <_free_r+0x46>
 801b274:	6811      	ldr	r1, [r2, #0]
 801b276:	1855      	adds	r5, r2, r1
 801b278:	42a5      	cmp	r5, r4
 801b27a:	d10b      	bne.n	801b294 <_free_r+0x70>
 801b27c:	6824      	ldr	r4, [r4, #0]
 801b27e:	4421      	add	r1, r4
 801b280:	1854      	adds	r4, r2, r1
 801b282:	42a3      	cmp	r3, r4
 801b284:	6011      	str	r1, [r2, #0]
 801b286:	d1e0      	bne.n	801b24a <_free_r+0x26>
 801b288:	681c      	ldr	r4, [r3, #0]
 801b28a:	685b      	ldr	r3, [r3, #4]
 801b28c:	6053      	str	r3, [r2, #4]
 801b28e:	440c      	add	r4, r1
 801b290:	6014      	str	r4, [r2, #0]
 801b292:	e7da      	b.n	801b24a <_free_r+0x26>
 801b294:	d902      	bls.n	801b29c <_free_r+0x78>
 801b296:	230c      	movs	r3, #12
 801b298:	6003      	str	r3, [r0, #0]
 801b29a:	e7d6      	b.n	801b24a <_free_r+0x26>
 801b29c:	6825      	ldr	r5, [r4, #0]
 801b29e:	1961      	adds	r1, r4, r5
 801b2a0:	428b      	cmp	r3, r1
 801b2a2:	bf04      	itt	eq
 801b2a4:	6819      	ldreq	r1, [r3, #0]
 801b2a6:	685b      	ldreq	r3, [r3, #4]
 801b2a8:	6063      	str	r3, [r4, #4]
 801b2aa:	bf04      	itt	eq
 801b2ac:	1949      	addeq	r1, r1, r5
 801b2ae:	6021      	streq	r1, [r4, #0]
 801b2b0:	6054      	str	r4, [r2, #4]
 801b2b2:	e7ca      	b.n	801b24a <_free_r+0x26>
 801b2b4:	b003      	add	sp, #12
 801b2b6:	bd30      	pop	{r4, r5, pc}
 801b2b8:	2400cb84 	.word	0x2400cb84

0801b2bc <__ssputs_r>:
 801b2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2c0:	688e      	ldr	r6, [r1, #8]
 801b2c2:	461f      	mov	r7, r3
 801b2c4:	42be      	cmp	r6, r7
 801b2c6:	680b      	ldr	r3, [r1, #0]
 801b2c8:	4682      	mov	sl, r0
 801b2ca:	460c      	mov	r4, r1
 801b2cc:	4690      	mov	r8, r2
 801b2ce:	d82c      	bhi.n	801b32a <__ssputs_r+0x6e>
 801b2d0:	898a      	ldrh	r2, [r1, #12]
 801b2d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b2d6:	d026      	beq.n	801b326 <__ssputs_r+0x6a>
 801b2d8:	6965      	ldr	r5, [r4, #20]
 801b2da:	6909      	ldr	r1, [r1, #16]
 801b2dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b2e0:	eba3 0901 	sub.w	r9, r3, r1
 801b2e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b2e8:	1c7b      	adds	r3, r7, #1
 801b2ea:	444b      	add	r3, r9
 801b2ec:	106d      	asrs	r5, r5, #1
 801b2ee:	429d      	cmp	r5, r3
 801b2f0:	bf38      	it	cc
 801b2f2:	461d      	movcc	r5, r3
 801b2f4:	0553      	lsls	r3, r2, #21
 801b2f6:	d527      	bpl.n	801b348 <__ssputs_r+0x8c>
 801b2f8:	4629      	mov	r1, r5
 801b2fa:	f7ff fc4b 	bl	801ab94 <_malloc_r>
 801b2fe:	4606      	mov	r6, r0
 801b300:	b360      	cbz	r0, 801b35c <__ssputs_r+0xa0>
 801b302:	6921      	ldr	r1, [r4, #16]
 801b304:	464a      	mov	r2, r9
 801b306:	f000 fc0d 	bl	801bb24 <memcpy>
 801b30a:	89a3      	ldrh	r3, [r4, #12]
 801b30c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b314:	81a3      	strh	r3, [r4, #12]
 801b316:	6126      	str	r6, [r4, #16]
 801b318:	6165      	str	r5, [r4, #20]
 801b31a:	444e      	add	r6, r9
 801b31c:	eba5 0509 	sub.w	r5, r5, r9
 801b320:	6026      	str	r6, [r4, #0]
 801b322:	60a5      	str	r5, [r4, #8]
 801b324:	463e      	mov	r6, r7
 801b326:	42be      	cmp	r6, r7
 801b328:	d900      	bls.n	801b32c <__ssputs_r+0x70>
 801b32a:	463e      	mov	r6, r7
 801b32c:	6820      	ldr	r0, [r4, #0]
 801b32e:	4632      	mov	r2, r6
 801b330:	4641      	mov	r1, r8
 801b332:	f000 fbbb 	bl	801baac <memmove>
 801b336:	68a3      	ldr	r3, [r4, #8]
 801b338:	1b9b      	subs	r3, r3, r6
 801b33a:	60a3      	str	r3, [r4, #8]
 801b33c:	6823      	ldr	r3, [r4, #0]
 801b33e:	4433      	add	r3, r6
 801b340:	6023      	str	r3, [r4, #0]
 801b342:	2000      	movs	r0, #0
 801b344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b348:	462a      	mov	r2, r5
 801b34a:	f000 fbf9 	bl	801bb40 <_realloc_r>
 801b34e:	4606      	mov	r6, r0
 801b350:	2800      	cmp	r0, #0
 801b352:	d1e0      	bne.n	801b316 <__ssputs_r+0x5a>
 801b354:	6921      	ldr	r1, [r4, #16]
 801b356:	4650      	mov	r0, sl
 801b358:	f7ff ff64 	bl	801b224 <_free_r>
 801b35c:	230c      	movs	r3, #12
 801b35e:	f8ca 3000 	str.w	r3, [sl]
 801b362:	89a3      	ldrh	r3, [r4, #12]
 801b364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b368:	81a3      	strh	r3, [r4, #12]
 801b36a:	f04f 30ff 	mov.w	r0, #4294967295
 801b36e:	e7e9      	b.n	801b344 <__ssputs_r+0x88>

0801b370 <_svfiprintf_r>:
 801b370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b374:	4698      	mov	r8, r3
 801b376:	898b      	ldrh	r3, [r1, #12]
 801b378:	061b      	lsls	r3, r3, #24
 801b37a:	b09d      	sub	sp, #116	; 0x74
 801b37c:	4607      	mov	r7, r0
 801b37e:	460d      	mov	r5, r1
 801b380:	4614      	mov	r4, r2
 801b382:	d50e      	bpl.n	801b3a2 <_svfiprintf_r+0x32>
 801b384:	690b      	ldr	r3, [r1, #16]
 801b386:	b963      	cbnz	r3, 801b3a2 <_svfiprintf_r+0x32>
 801b388:	2140      	movs	r1, #64	; 0x40
 801b38a:	f7ff fc03 	bl	801ab94 <_malloc_r>
 801b38e:	6028      	str	r0, [r5, #0]
 801b390:	6128      	str	r0, [r5, #16]
 801b392:	b920      	cbnz	r0, 801b39e <_svfiprintf_r+0x2e>
 801b394:	230c      	movs	r3, #12
 801b396:	603b      	str	r3, [r7, #0]
 801b398:	f04f 30ff 	mov.w	r0, #4294967295
 801b39c:	e0d0      	b.n	801b540 <_svfiprintf_r+0x1d0>
 801b39e:	2340      	movs	r3, #64	; 0x40
 801b3a0:	616b      	str	r3, [r5, #20]
 801b3a2:	2300      	movs	r3, #0
 801b3a4:	9309      	str	r3, [sp, #36]	; 0x24
 801b3a6:	2320      	movs	r3, #32
 801b3a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b3ac:	f8cd 800c 	str.w	r8, [sp, #12]
 801b3b0:	2330      	movs	r3, #48	; 0x30
 801b3b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b558 <_svfiprintf_r+0x1e8>
 801b3b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b3ba:	f04f 0901 	mov.w	r9, #1
 801b3be:	4623      	mov	r3, r4
 801b3c0:	469a      	mov	sl, r3
 801b3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b3c6:	b10a      	cbz	r2, 801b3cc <_svfiprintf_r+0x5c>
 801b3c8:	2a25      	cmp	r2, #37	; 0x25
 801b3ca:	d1f9      	bne.n	801b3c0 <_svfiprintf_r+0x50>
 801b3cc:	ebba 0b04 	subs.w	fp, sl, r4
 801b3d0:	d00b      	beq.n	801b3ea <_svfiprintf_r+0x7a>
 801b3d2:	465b      	mov	r3, fp
 801b3d4:	4622      	mov	r2, r4
 801b3d6:	4629      	mov	r1, r5
 801b3d8:	4638      	mov	r0, r7
 801b3da:	f7ff ff6f 	bl	801b2bc <__ssputs_r>
 801b3de:	3001      	adds	r0, #1
 801b3e0:	f000 80a9 	beq.w	801b536 <_svfiprintf_r+0x1c6>
 801b3e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b3e6:	445a      	add	r2, fp
 801b3e8:	9209      	str	r2, [sp, #36]	; 0x24
 801b3ea:	f89a 3000 	ldrb.w	r3, [sl]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	f000 80a1 	beq.w	801b536 <_svfiprintf_r+0x1c6>
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	f04f 32ff 	mov.w	r2, #4294967295
 801b3fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b3fe:	f10a 0a01 	add.w	sl, sl, #1
 801b402:	9304      	str	r3, [sp, #16]
 801b404:	9307      	str	r3, [sp, #28]
 801b406:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b40a:	931a      	str	r3, [sp, #104]	; 0x68
 801b40c:	4654      	mov	r4, sl
 801b40e:	2205      	movs	r2, #5
 801b410:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b414:	4850      	ldr	r0, [pc, #320]	; (801b558 <_svfiprintf_r+0x1e8>)
 801b416:	f7e4 ff63 	bl	80002e0 <memchr>
 801b41a:	9a04      	ldr	r2, [sp, #16]
 801b41c:	b9d8      	cbnz	r0, 801b456 <_svfiprintf_r+0xe6>
 801b41e:	06d0      	lsls	r0, r2, #27
 801b420:	bf44      	itt	mi
 801b422:	2320      	movmi	r3, #32
 801b424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b428:	0711      	lsls	r1, r2, #28
 801b42a:	bf44      	itt	mi
 801b42c:	232b      	movmi	r3, #43	; 0x2b
 801b42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b432:	f89a 3000 	ldrb.w	r3, [sl]
 801b436:	2b2a      	cmp	r3, #42	; 0x2a
 801b438:	d015      	beq.n	801b466 <_svfiprintf_r+0xf6>
 801b43a:	9a07      	ldr	r2, [sp, #28]
 801b43c:	4654      	mov	r4, sl
 801b43e:	2000      	movs	r0, #0
 801b440:	f04f 0c0a 	mov.w	ip, #10
 801b444:	4621      	mov	r1, r4
 801b446:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b44a:	3b30      	subs	r3, #48	; 0x30
 801b44c:	2b09      	cmp	r3, #9
 801b44e:	d94d      	bls.n	801b4ec <_svfiprintf_r+0x17c>
 801b450:	b1b0      	cbz	r0, 801b480 <_svfiprintf_r+0x110>
 801b452:	9207      	str	r2, [sp, #28]
 801b454:	e014      	b.n	801b480 <_svfiprintf_r+0x110>
 801b456:	eba0 0308 	sub.w	r3, r0, r8
 801b45a:	fa09 f303 	lsl.w	r3, r9, r3
 801b45e:	4313      	orrs	r3, r2
 801b460:	9304      	str	r3, [sp, #16]
 801b462:	46a2      	mov	sl, r4
 801b464:	e7d2      	b.n	801b40c <_svfiprintf_r+0x9c>
 801b466:	9b03      	ldr	r3, [sp, #12]
 801b468:	1d19      	adds	r1, r3, #4
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	9103      	str	r1, [sp, #12]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	bfbb      	ittet	lt
 801b472:	425b      	neglt	r3, r3
 801b474:	f042 0202 	orrlt.w	r2, r2, #2
 801b478:	9307      	strge	r3, [sp, #28]
 801b47a:	9307      	strlt	r3, [sp, #28]
 801b47c:	bfb8      	it	lt
 801b47e:	9204      	strlt	r2, [sp, #16]
 801b480:	7823      	ldrb	r3, [r4, #0]
 801b482:	2b2e      	cmp	r3, #46	; 0x2e
 801b484:	d10c      	bne.n	801b4a0 <_svfiprintf_r+0x130>
 801b486:	7863      	ldrb	r3, [r4, #1]
 801b488:	2b2a      	cmp	r3, #42	; 0x2a
 801b48a:	d134      	bne.n	801b4f6 <_svfiprintf_r+0x186>
 801b48c:	9b03      	ldr	r3, [sp, #12]
 801b48e:	1d1a      	adds	r2, r3, #4
 801b490:	681b      	ldr	r3, [r3, #0]
 801b492:	9203      	str	r2, [sp, #12]
 801b494:	2b00      	cmp	r3, #0
 801b496:	bfb8      	it	lt
 801b498:	f04f 33ff 	movlt.w	r3, #4294967295
 801b49c:	3402      	adds	r4, #2
 801b49e:	9305      	str	r3, [sp, #20]
 801b4a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b568 <_svfiprintf_r+0x1f8>
 801b4a4:	7821      	ldrb	r1, [r4, #0]
 801b4a6:	2203      	movs	r2, #3
 801b4a8:	4650      	mov	r0, sl
 801b4aa:	f7e4 ff19 	bl	80002e0 <memchr>
 801b4ae:	b138      	cbz	r0, 801b4c0 <_svfiprintf_r+0x150>
 801b4b0:	9b04      	ldr	r3, [sp, #16]
 801b4b2:	eba0 000a 	sub.w	r0, r0, sl
 801b4b6:	2240      	movs	r2, #64	; 0x40
 801b4b8:	4082      	lsls	r2, r0
 801b4ba:	4313      	orrs	r3, r2
 801b4bc:	3401      	adds	r4, #1
 801b4be:	9304      	str	r3, [sp, #16]
 801b4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4c4:	4825      	ldr	r0, [pc, #148]	; (801b55c <_svfiprintf_r+0x1ec>)
 801b4c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b4ca:	2206      	movs	r2, #6
 801b4cc:	f7e4 ff08 	bl	80002e0 <memchr>
 801b4d0:	2800      	cmp	r0, #0
 801b4d2:	d038      	beq.n	801b546 <_svfiprintf_r+0x1d6>
 801b4d4:	4b22      	ldr	r3, [pc, #136]	; (801b560 <_svfiprintf_r+0x1f0>)
 801b4d6:	bb1b      	cbnz	r3, 801b520 <_svfiprintf_r+0x1b0>
 801b4d8:	9b03      	ldr	r3, [sp, #12]
 801b4da:	3307      	adds	r3, #7
 801b4dc:	f023 0307 	bic.w	r3, r3, #7
 801b4e0:	3308      	adds	r3, #8
 801b4e2:	9303      	str	r3, [sp, #12]
 801b4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4e6:	4433      	add	r3, r6
 801b4e8:	9309      	str	r3, [sp, #36]	; 0x24
 801b4ea:	e768      	b.n	801b3be <_svfiprintf_r+0x4e>
 801b4ec:	fb0c 3202 	mla	r2, ip, r2, r3
 801b4f0:	460c      	mov	r4, r1
 801b4f2:	2001      	movs	r0, #1
 801b4f4:	e7a6      	b.n	801b444 <_svfiprintf_r+0xd4>
 801b4f6:	2300      	movs	r3, #0
 801b4f8:	3401      	adds	r4, #1
 801b4fa:	9305      	str	r3, [sp, #20]
 801b4fc:	4619      	mov	r1, r3
 801b4fe:	f04f 0c0a 	mov.w	ip, #10
 801b502:	4620      	mov	r0, r4
 801b504:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b508:	3a30      	subs	r2, #48	; 0x30
 801b50a:	2a09      	cmp	r2, #9
 801b50c:	d903      	bls.n	801b516 <_svfiprintf_r+0x1a6>
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d0c6      	beq.n	801b4a0 <_svfiprintf_r+0x130>
 801b512:	9105      	str	r1, [sp, #20]
 801b514:	e7c4      	b.n	801b4a0 <_svfiprintf_r+0x130>
 801b516:	fb0c 2101 	mla	r1, ip, r1, r2
 801b51a:	4604      	mov	r4, r0
 801b51c:	2301      	movs	r3, #1
 801b51e:	e7f0      	b.n	801b502 <_svfiprintf_r+0x192>
 801b520:	ab03      	add	r3, sp, #12
 801b522:	9300      	str	r3, [sp, #0]
 801b524:	462a      	mov	r2, r5
 801b526:	4b0f      	ldr	r3, [pc, #60]	; (801b564 <_svfiprintf_r+0x1f4>)
 801b528:	a904      	add	r1, sp, #16
 801b52a:	4638      	mov	r0, r7
 801b52c:	f3af 8000 	nop.w
 801b530:	1c42      	adds	r2, r0, #1
 801b532:	4606      	mov	r6, r0
 801b534:	d1d6      	bne.n	801b4e4 <_svfiprintf_r+0x174>
 801b536:	89ab      	ldrh	r3, [r5, #12]
 801b538:	065b      	lsls	r3, r3, #25
 801b53a:	f53f af2d 	bmi.w	801b398 <_svfiprintf_r+0x28>
 801b53e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b540:	b01d      	add	sp, #116	; 0x74
 801b542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b546:	ab03      	add	r3, sp, #12
 801b548:	9300      	str	r3, [sp, #0]
 801b54a:	462a      	mov	r2, r5
 801b54c:	4b05      	ldr	r3, [pc, #20]	; (801b564 <_svfiprintf_r+0x1f4>)
 801b54e:	a904      	add	r1, sp, #16
 801b550:	4638      	mov	r0, r7
 801b552:	f000 f879 	bl	801b648 <_printf_i>
 801b556:	e7eb      	b.n	801b530 <_svfiprintf_r+0x1c0>
 801b558:	0804b02c 	.word	0x0804b02c
 801b55c:	0804b036 	.word	0x0804b036
 801b560:	00000000 	.word	0x00000000
 801b564:	0801b2bd 	.word	0x0801b2bd
 801b568:	0804b032 	.word	0x0804b032

0801b56c <_printf_common>:
 801b56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b570:	4616      	mov	r6, r2
 801b572:	4699      	mov	r9, r3
 801b574:	688a      	ldr	r2, [r1, #8]
 801b576:	690b      	ldr	r3, [r1, #16]
 801b578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b57c:	4293      	cmp	r3, r2
 801b57e:	bfb8      	it	lt
 801b580:	4613      	movlt	r3, r2
 801b582:	6033      	str	r3, [r6, #0]
 801b584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b588:	4607      	mov	r7, r0
 801b58a:	460c      	mov	r4, r1
 801b58c:	b10a      	cbz	r2, 801b592 <_printf_common+0x26>
 801b58e:	3301      	adds	r3, #1
 801b590:	6033      	str	r3, [r6, #0]
 801b592:	6823      	ldr	r3, [r4, #0]
 801b594:	0699      	lsls	r1, r3, #26
 801b596:	bf42      	ittt	mi
 801b598:	6833      	ldrmi	r3, [r6, #0]
 801b59a:	3302      	addmi	r3, #2
 801b59c:	6033      	strmi	r3, [r6, #0]
 801b59e:	6825      	ldr	r5, [r4, #0]
 801b5a0:	f015 0506 	ands.w	r5, r5, #6
 801b5a4:	d106      	bne.n	801b5b4 <_printf_common+0x48>
 801b5a6:	f104 0a19 	add.w	sl, r4, #25
 801b5aa:	68e3      	ldr	r3, [r4, #12]
 801b5ac:	6832      	ldr	r2, [r6, #0]
 801b5ae:	1a9b      	subs	r3, r3, r2
 801b5b0:	42ab      	cmp	r3, r5
 801b5b2:	dc26      	bgt.n	801b602 <_printf_common+0x96>
 801b5b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b5b8:	1e13      	subs	r3, r2, #0
 801b5ba:	6822      	ldr	r2, [r4, #0]
 801b5bc:	bf18      	it	ne
 801b5be:	2301      	movne	r3, #1
 801b5c0:	0692      	lsls	r2, r2, #26
 801b5c2:	d42b      	bmi.n	801b61c <_printf_common+0xb0>
 801b5c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b5c8:	4649      	mov	r1, r9
 801b5ca:	4638      	mov	r0, r7
 801b5cc:	47c0      	blx	r8
 801b5ce:	3001      	adds	r0, #1
 801b5d0:	d01e      	beq.n	801b610 <_printf_common+0xa4>
 801b5d2:	6823      	ldr	r3, [r4, #0]
 801b5d4:	6922      	ldr	r2, [r4, #16]
 801b5d6:	f003 0306 	and.w	r3, r3, #6
 801b5da:	2b04      	cmp	r3, #4
 801b5dc:	bf02      	ittt	eq
 801b5de:	68e5      	ldreq	r5, [r4, #12]
 801b5e0:	6833      	ldreq	r3, [r6, #0]
 801b5e2:	1aed      	subeq	r5, r5, r3
 801b5e4:	68a3      	ldr	r3, [r4, #8]
 801b5e6:	bf0c      	ite	eq
 801b5e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b5ec:	2500      	movne	r5, #0
 801b5ee:	4293      	cmp	r3, r2
 801b5f0:	bfc4      	itt	gt
 801b5f2:	1a9b      	subgt	r3, r3, r2
 801b5f4:	18ed      	addgt	r5, r5, r3
 801b5f6:	2600      	movs	r6, #0
 801b5f8:	341a      	adds	r4, #26
 801b5fa:	42b5      	cmp	r5, r6
 801b5fc:	d11a      	bne.n	801b634 <_printf_common+0xc8>
 801b5fe:	2000      	movs	r0, #0
 801b600:	e008      	b.n	801b614 <_printf_common+0xa8>
 801b602:	2301      	movs	r3, #1
 801b604:	4652      	mov	r2, sl
 801b606:	4649      	mov	r1, r9
 801b608:	4638      	mov	r0, r7
 801b60a:	47c0      	blx	r8
 801b60c:	3001      	adds	r0, #1
 801b60e:	d103      	bne.n	801b618 <_printf_common+0xac>
 801b610:	f04f 30ff 	mov.w	r0, #4294967295
 801b614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b618:	3501      	adds	r5, #1
 801b61a:	e7c6      	b.n	801b5aa <_printf_common+0x3e>
 801b61c:	18e1      	adds	r1, r4, r3
 801b61e:	1c5a      	adds	r2, r3, #1
 801b620:	2030      	movs	r0, #48	; 0x30
 801b622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b626:	4422      	add	r2, r4
 801b628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b62c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b630:	3302      	adds	r3, #2
 801b632:	e7c7      	b.n	801b5c4 <_printf_common+0x58>
 801b634:	2301      	movs	r3, #1
 801b636:	4622      	mov	r2, r4
 801b638:	4649      	mov	r1, r9
 801b63a:	4638      	mov	r0, r7
 801b63c:	47c0      	blx	r8
 801b63e:	3001      	adds	r0, #1
 801b640:	d0e6      	beq.n	801b610 <_printf_common+0xa4>
 801b642:	3601      	adds	r6, #1
 801b644:	e7d9      	b.n	801b5fa <_printf_common+0x8e>
	...

0801b648 <_printf_i>:
 801b648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b64c:	7e0f      	ldrb	r7, [r1, #24]
 801b64e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b650:	2f78      	cmp	r7, #120	; 0x78
 801b652:	4691      	mov	r9, r2
 801b654:	4680      	mov	r8, r0
 801b656:	460c      	mov	r4, r1
 801b658:	469a      	mov	sl, r3
 801b65a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b65e:	d807      	bhi.n	801b670 <_printf_i+0x28>
 801b660:	2f62      	cmp	r7, #98	; 0x62
 801b662:	d80a      	bhi.n	801b67a <_printf_i+0x32>
 801b664:	2f00      	cmp	r7, #0
 801b666:	f000 80d4 	beq.w	801b812 <_printf_i+0x1ca>
 801b66a:	2f58      	cmp	r7, #88	; 0x58
 801b66c:	f000 80c0 	beq.w	801b7f0 <_printf_i+0x1a8>
 801b670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b678:	e03a      	b.n	801b6f0 <_printf_i+0xa8>
 801b67a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b67e:	2b15      	cmp	r3, #21
 801b680:	d8f6      	bhi.n	801b670 <_printf_i+0x28>
 801b682:	a101      	add	r1, pc, #4	; (adr r1, 801b688 <_printf_i+0x40>)
 801b684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b688:	0801b6e1 	.word	0x0801b6e1
 801b68c:	0801b6f5 	.word	0x0801b6f5
 801b690:	0801b671 	.word	0x0801b671
 801b694:	0801b671 	.word	0x0801b671
 801b698:	0801b671 	.word	0x0801b671
 801b69c:	0801b671 	.word	0x0801b671
 801b6a0:	0801b6f5 	.word	0x0801b6f5
 801b6a4:	0801b671 	.word	0x0801b671
 801b6a8:	0801b671 	.word	0x0801b671
 801b6ac:	0801b671 	.word	0x0801b671
 801b6b0:	0801b671 	.word	0x0801b671
 801b6b4:	0801b7f9 	.word	0x0801b7f9
 801b6b8:	0801b721 	.word	0x0801b721
 801b6bc:	0801b7b3 	.word	0x0801b7b3
 801b6c0:	0801b671 	.word	0x0801b671
 801b6c4:	0801b671 	.word	0x0801b671
 801b6c8:	0801b81b 	.word	0x0801b81b
 801b6cc:	0801b671 	.word	0x0801b671
 801b6d0:	0801b721 	.word	0x0801b721
 801b6d4:	0801b671 	.word	0x0801b671
 801b6d8:	0801b671 	.word	0x0801b671
 801b6dc:	0801b7bb 	.word	0x0801b7bb
 801b6e0:	682b      	ldr	r3, [r5, #0]
 801b6e2:	1d1a      	adds	r2, r3, #4
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	602a      	str	r2, [r5, #0]
 801b6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b6ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b6f0:	2301      	movs	r3, #1
 801b6f2:	e09f      	b.n	801b834 <_printf_i+0x1ec>
 801b6f4:	6820      	ldr	r0, [r4, #0]
 801b6f6:	682b      	ldr	r3, [r5, #0]
 801b6f8:	0607      	lsls	r7, r0, #24
 801b6fa:	f103 0104 	add.w	r1, r3, #4
 801b6fe:	6029      	str	r1, [r5, #0]
 801b700:	d501      	bpl.n	801b706 <_printf_i+0xbe>
 801b702:	681e      	ldr	r6, [r3, #0]
 801b704:	e003      	b.n	801b70e <_printf_i+0xc6>
 801b706:	0646      	lsls	r6, r0, #25
 801b708:	d5fb      	bpl.n	801b702 <_printf_i+0xba>
 801b70a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b70e:	2e00      	cmp	r6, #0
 801b710:	da03      	bge.n	801b71a <_printf_i+0xd2>
 801b712:	232d      	movs	r3, #45	; 0x2d
 801b714:	4276      	negs	r6, r6
 801b716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b71a:	485a      	ldr	r0, [pc, #360]	; (801b884 <_printf_i+0x23c>)
 801b71c:	230a      	movs	r3, #10
 801b71e:	e012      	b.n	801b746 <_printf_i+0xfe>
 801b720:	682b      	ldr	r3, [r5, #0]
 801b722:	6820      	ldr	r0, [r4, #0]
 801b724:	1d19      	adds	r1, r3, #4
 801b726:	6029      	str	r1, [r5, #0]
 801b728:	0605      	lsls	r5, r0, #24
 801b72a:	d501      	bpl.n	801b730 <_printf_i+0xe8>
 801b72c:	681e      	ldr	r6, [r3, #0]
 801b72e:	e002      	b.n	801b736 <_printf_i+0xee>
 801b730:	0641      	lsls	r1, r0, #25
 801b732:	d5fb      	bpl.n	801b72c <_printf_i+0xe4>
 801b734:	881e      	ldrh	r6, [r3, #0]
 801b736:	4853      	ldr	r0, [pc, #332]	; (801b884 <_printf_i+0x23c>)
 801b738:	2f6f      	cmp	r7, #111	; 0x6f
 801b73a:	bf0c      	ite	eq
 801b73c:	2308      	moveq	r3, #8
 801b73e:	230a      	movne	r3, #10
 801b740:	2100      	movs	r1, #0
 801b742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b746:	6865      	ldr	r5, [r4, #4]
 801b748:	60a5      	str	r5, [r4, #8]
 801b74a:	2d00      	cmp	r5, #0
 801b74c:	bfa2      	ittt	ge
 801b74e:	6821      	ldrge	r1, [r4, #0]
 801b750:	f021 0104 	bicge.w	r1, r1, #4
 801b754:	6021      	strge	r1, [r4, #0]
 801b756:	b90e      	cbnz	r6, 801b75c <_printf_i+0x114>
 801b758:	2d00      	cmp	r5, #0
 801b75a:	d04b      	beq.n	801b7f4 <_printf_i+0x1ac>
 801b75c:	4615      	mov	r5, r2
 801b75e:	fbb6 f1f3 	udiv	r1, r6, r3
 801b762:	fb03 6711 	mls	r7, r3, r1, r6
 801b766:	5dc7      	ldrb	r7, [r0, r7]
 801b768:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b76c:	4637      	mov	r7, r6
 801b76e:	42bb      	cmp	r3, r7
 801b770:	460e      	mov	r6, r1
 801b772:	d9f4      	bls.n	801b75e <_printf_i+0x116>
 801b774:	2b08      	cmp	r3, #8
 801b776:	d10b      	bne.n	801b790 <_printf_i+0x148>
 801b778:	6823      	ldr	r3, [r4, #0]
 801b77a:	07de      	lsls	r6, r3, #31
 801b77c:	d508      	bpl.n	801b790 <_printf_i+0x148>
 801b77e:	6923      	ldr	r3, [r4, #16]
 801b780:	6861      	ldr	r1, [r4, #4]
 801b782:	4299      	cmp	r1, r3
 801b784:	bfde      	ittt	le
 801b786:	2330      	movle	r3, #48	; 0x30
 801b788:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b78c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b790:	1b52      	subs	r2, r2, r5
 801b792:	6122      	str	r2, [r4, #16]
 801b794:	f8cd a000 	str.w	sl, [sp]
 801b798:	464b      	mov	r3, r9
 801b79a:	aa03      	add	r2, sp, #12
 801b79c:	4621      	mov	r1, r4
 801b79e:	4640      	mov	r0, r8
 801b7a0:	f7ff fee4 	bl	801b56c <_printf_common>
 801b7a4:	3001      	adds	r0, #1
 801b7a6:	d14a      	bne.n	801b83e <_printf_i+0x1f6>
 801b7a8:	f04f 30ff 	mov.w	r0, #4294967295
 801b7ac:	b004      	add	sp, #16
 801b7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7b2:	6823      	ldr	r3, [r4, #0]
 801b7b4:	f043 0320 	orr.w	r3, r3, #32
 801b7b8:	6023      	str	r3, [r4, #0]
 801b7ba:	4833      	ldr	r0, [pc, #204]	; (801b888 <_printf_i+0x240>)
 801b7bc:	2778      	movs	r7, #120	; 0x78
 801b7be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b7c2:	6823      	ldr	r3, [r4, #0]
 801b7c4:	6829      	ldr	r1, [r5, #0]
 801b7c6:	061f      	lsls	r7, r3, #24
 801b7c8:	f851 6b04 	ldr.w	r6, [r1], #4
 801b7cc:	d402      	bmi.n	801b7d4 <_printf_i+0x18c>
 801b7ce:	065f      	lsls	r7, r3, #25
 801b7d0:	bf48      	it	mi
 801b7d2:	b2b6      	uxthmi	r6, r6
 801b7d4:	07df      	lsls	r7, r3, #31
 801b7d6:	bf48      	it	mi
 801b7d8:	f043 0320 	orrmi.w	r3, r3, #32
 801b7dc:	6029      	str	r1, [r5, #0]
 801b7de:	bf48      	it	mi
 801b7e0:	6023      	strmi	r3, [r4, #0]
 801b7e2:	b91e      	cbnz	r6, 801b7ec <_printf_i+0x1a4>
 801b7e4:	6823      	ldr	r3, [r4, #0]
 801b7e6:	f023 0320 	bic.w	r3, r3, #32
 801b7ea:	6023      	str	r3, [r4, #0]
 801b7ec:	2310      	movs	r3, #16
 801b7ee:	e7a7      	b.n	801b740 <_printf_i+0xf8>
 801b7f0:	4824      	ldr	r0, [pc, #144]	; (801b884 <_printf_i+0x23c>)
 801b7f2:	e7e4      	b.n	801b7be <_printf_i+0x176>
 801b7f4:	4615      	mov	r5, r2
 801b7f6:	e7bd      	b.n	801b774 <_printf_i+0x12c>
 801b7f8:	682b      	ldr	r3, [r5, #0]
 801b7fa:	6826      	ldr	r6, [r4, #0]
 801b7fc:	6961      	ldr	r1, [r4, #20]
 801b7fe:	1d18      	adds	r0, r3, #4
 801b800:	6028      	str	r0, [r5, #0]
 801b802:	0635      	lsls	r5, r6, #24
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	d501      	bpl.n	801b80c <_printf_i+0x1c4>
 801b808:	6019      	str	r1, [r3, #0]
 801b80a:	e002      	b.n	801b812 <_printf_i+0x1ca>
 801b80c:	0670      	lsls	r0, r6, #25
 801b80e:	d5fb      	bpl.n	801b808 <_printf_i+0x1c0>
 801b810:	8019      	strh	r1, [r3, #0]
 801b812:	2300      	movs	r3, #0
 801b814:	6123      	str	r3, [r4, #16]
 801b816:	4615      	mov	r5, r2
 801b818:	e7bc      	b.n	801b794 <_printf_i+0x14c>
 801b81a:	682b      	ldr	r3, [r5, #0]
 801b81c:	1d1a      	adds	r2, r3, #4
 801b81e:	602a      	str	r2, [r5, #0]
 801b820:	681d      	ldr	r5, [r3, #0]
 801b822:	6862      	ldr	r2, [r4, #4]
 801b824:	2100      	movs	r1, #0
 801b826:	4628      	mov	r0, r5
 801b828:	f7e4 fd5a 	bl	80002e0 <memchr>
 801b82c:	b108      	cbz	r0, 801b832 <_printf_i+0x1ea>
 801b82e:	1b40      	subs	r0, r0, r5
 801b830:	6060      	str	r0, [r4, #4]
 801b832:	6863      	ldr	r3, [r4, #4]
 801b834:	6123      	str	r3, [r4, #16]
 801b836:	2300      	movs	r3, #0
 801b838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b83c:	e7aa      	b.n	801b794 <_printf_i+0x14c>
 801b83e:	6923      	ldr	r3, [r4, #16]
 801b840:	462a      	mov	r2, r5
 801b842:	4649      	mov	r1, r9
 801b844:	4640      	mov	r0, r8
 801b846:	47d0      	blx	sl
 801b848:	3001      	adds	r0, #1
 801b84a:	d0ad      	beq.n	801b7a8 <_printf_i+0x160>
 801b84c:	6823      	ldr	r3, [r4, #0]
 801b84e:	079b      	lsls	r3, r3, #30
 801b850:	d413      	bmi.n	801b87a <_printf_i+0x232>
 801b852:	68e0      	ldr	r0, [r4, #12]
 801b854:	9b03      	ldr	r3, [sp, #12]
 801b856:	4298      	cmp	r0, r3
 801b858:	bfb8      	it	lt
 801b85a:	4618      	movlt	r0, r3
 801b85c:	e7a6      	b.n	801b7ac <_printf_i+0x164>
 801b85e:	2301      	movs	r3, #1
 801b860:	4632      	mov	r2, r6
 801b862:	4649      	mov	r1, r9
 801b864:	4640      	mov	r0, r8
 801b866:	47d0      	blx	sl
 801b868:	3001      	adds	r0, #1
 801b86a:	d09d      	beq.n	801b7a8 <_printf_i+0x160>
 801b86c:	3501      	adds	r5, #1
 801b86e:	68e3      	ldr	r3, [r4, #12]
 801b870:	9903      	ldr	r1, [sp, #12]
 801b872:	1a5b      	subs	r3, r3, r1
 801b874:	42ab      	cmp	r3, r5
 801b876:	dcf2      	bgt.n	801b85e <_printf_i+0x216>
 801b878:	e7eb      	b.n	801b852 <_printf_i+0x20a>
 801b87a:	2500      	movs	r5, #0
 801b87c:	f104 0619 	add.w	r6, r4, #25
 801b880:	e7f5      	b.n	801b86e <_printf_i+0x226>
 801b882:	bf00      	nop
 801b884:	0804b03d 	.word	0x0804b03d
 801b888:	0804b04e 	.word	0x0804b04e

0801b88c <__sflush_r>:
 801b88c:	898a      	ldrh	r2, [r1, #12]
 801b88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b892:	4605      	mov	r5, r0
 801b894:	0710      	lsls	r0, r2, #28
 801b896:	460c      	mov	r4, r1
 801b898:	d458      	bmi.n	801b94c <__sflush_r+0xc0>
 801b89a:	684b      	ldr	r3, [r1, #4]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	dc05      	bgt.n	801b8ac <__sflush_r+0x20>
 801b8a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	dc02      	bgt.n	801b8ac <__sflush_r+0x20>
 801b8a6:	2000      	movs	r0, #0
 801b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b8ae:	2e00      	cmp	r6, #0
 801b8b0:	d0f9      	beq.n	801b8a6 <__sflush_r+0x1a>
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b8b8:	682f      	ldr	r7, [r5, #0]
 801b8ba:	6a21      	ldr	r1, [r4, #32]
 801b8bc:	602b      	str	r3, [r5, #0]
 801b8be:	d032      	beq.n	801b926 <__sflush_r+0x9a>
 801b8c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b8c2:	89a3      	ldrh	r3, [r4, #12]
 801b8c4:	075a      	lsls	r2, r3, #29
 801b8c6:	d505      	bpl.n	801b8d4 <__sflush_r+0x48>
 801b8c8:	6863      	ldr	r3, [r4, #4]
 801b8ca:	1ac0      	subs	r0, r0, r3
 801b8cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b8ce:	b10b      	cbz	r3, 801b8d4 <__sflush_r+0x48>
 801b8d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b8d2:	1ac0      	subs	r0, r0, r3
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	4602      	mov	r2, r0
 801b8d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b8da:	6a21      	ldr	r1, [r4, #32]
 801b8dc:	4628      	mov	r0, r5
 801b8de:	47b0      	blx	r6
 801b8e0:	1c43      	adds	r3, r0, #1
 801b8e2:	89a3      	ldrh	r3, [r4, #12]
 801b8e4:	d106      	bne.n	801b8f4 <__sflush_r+0x68>
 801b8e6:	6829      	ldr	r1, [r5, #0]
 801b8e8:	291d      	cmp	r1, #29
 801b8ea:	d82b      	bhi.n	801b944 <__sflush_r+0xb8>
 801b8ec:	4a29      	ldr	r2, [pc, #164]	; (801b994 <__sflush_r+0x108>)
 801b8ee:	410a      	asrs	r2, r1
 801b8f0:	07d6      	lsls	r6, r2, #31
 801b8f2:	d427      	bmi.n	801b944 <__sflush_r+0xb8>
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	6062      	str	r2, [r4, #4]
 801b8f8:	04d9      	lsls	r1, r3, #19
 801b8fa:	6922      	ldr	r2, [r4, #16]
 801b8fc:	6022      	str	r2, [r4, #0]
 801b8fe:	d504      	bpl.n	801b90a <__sflush_r+0x7e>
 801b900:	1c42      	adds	r2, r0, #1
 801b902:	d101      	bne.n	801b908 <__sflush_r+0x7c>
 801b904:	682b      	ldr	r3, [r5, #0]
 801b906:	b903      	cbnz	r3, 801b90a <__sflush_r+0x7e>
 801b908:	6560      	str	r0, [r4, #84]	; 0x54
 801b90a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b90c:	602f      	str	r7, [r5, #0]
 801b90e:	2900      	cmp	r1, #0
 801b910:	d0c9      	beq.n	801b8a6 <__sflush_r+0x1a>
 801b912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b916:	4299      	cmp	r1, r3
 801b918:	d002      	beq.n	801b920 <__sflush_r+0x94>
 801b91a:	4628      	mov	r0, r5
 801b91c:	f7ff fc82 	bl	801b224 <_free_r>
 801b920:	2000      	movs	r0, #0
 801b922:	6360      	str	r0, [r4, #52]	; 0x34
 801b924:	e7c0      	b.n	801b8a8 <__sflush_r+0x1c>
 801b926:	2301      	movs	r3, #1
 801b928:	4628      	mov	r0, r5
 801b92a:	47b0      	blx	r6
 801b92c:	1c41      	adds	r1, r0, #1
 801b92e:	d1c8      	bne.n	801b8c2 <__sflush_r+0x36>
 801b930:	682b      	ldr	r3, [r5, #0]
 801b932:	2b00      	cmp	r3, #0
 801b934:	d0c5      	beq.n	801b8c2 <__sflush_r+0x36>
 801b936:	2b1d      	cmp	r3, #29
 801b938:	d001      	beq.n	801b93e <__sflush_r+0xb2>
 801b93a:	2b16      	cmp	r3, #22
 801b93c:	d101      	bne.n	801b942 <__sflush_r+0xb6>
 801b93e:	602f      	str	r7, [r5, #0]
 801b940:	e7b1      	b.n	801b8a6 <__sflush_r+0x1a>
 801b942:	89a3      	ldrh	r3, [r4, #12]
 801b944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b948:	81a3      	strh	r3, [r4, #12]
 801b94a:	e7ad      	b.n	801b8a8 <__sflush_r+0x1c>
 801b94c:	690f      	ldr	r7, [r1, #16]
 801b94e:	2f00      	cmp	r7, #0
 801b950:	d0a9      	beq.n	801b8a6 <__sflush_r+0x1a>
 801b952:	0793      	lsls	r3, r2, #30
 801b954:	680e      	ldr	r6, [r1, #0]
 801b956:	bf08      	it	eq
 801b958:	694b      	ldreq	r3, [r1, #20]
 801b95a:	600f      	str	r7, [r1, #0]
 801b95c:	bf18      	it	ne
 801b95e:	2300      	movne	r3, #0
 801b960:	eba6 0807 	sub.w	r8, r6, r7
 801b964:	608b      	str	r3, [r1, #8]
 801b966:	f1b8 0f00 	cmp.w	r8, #0
 801b96a:	dd9c      	ble.n	801b8a6 <__sflush_r+0x1a>
 801b96c:	6a21      	ldr	r1, [r4, #32]
 801b96e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b970:	4643      	mov	r3, r8
 801b972:	463a      	mov	r2, r7
 801b974:	4628      	mov	r0, r5
 801b976:	47b0      	blx	r6
 801b978:	2800      	cmp	r0, #0
 801b97a:	dc06      	bgt.n	801b98a <__sflush_r+0xfe>
 801b97c:	89a3      	ldrh	r3, [r4, #12]
 801b97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b982:	81a3      	strh	r3, [r4, #12]
 801b984:	f04f 30ff 	mov.w	r0, #4294967295
 801b988:	e78e      	b.n	801b8a8 <__sflush_r+0x1c>
 801b98a:	4407      	add	r7, r0
 801b98c:	eba8 0800 	sub.w	r8, r8, r0
 801b990:	e7e9      	b.n	801b966 <__sflush_r+0xda>
 801b992:	bf00      	nop
 801b994:	dfbffffe 	.word	0xdfbffffe

0801b998 <_fflush_r>:
 801b998:	b538      	push	{r3, r4, r5, lr}
 801b99a:	690b      	ldr	r3, [r1, #16]
 801b99c:	4605      	mov	r5, r0
 801b99e:	460c      	mov	r4, r1
 801b9a0:	b913      	cbnz	r3, 801b9a8 <_fflush_r+0x10>
 801b9a2:	2500      	movs	r5, #0
 801b9a4:	4628      	mov	r0, r5
 801b9a6:	bd38      	pop	{r3, r4, r5, pc}
 801b9a8:	b118      	cbz	r0, 801b9b2 <_fflush_r+0x1a>
 801b9aa:	6a03      	ldr	r3, [r0, #32]
 801b9ac:	b90b      	cbnz	r3, 801b9b2 <_fflush_r+0x1a>
 801b9ae:	f7ff fa09 	bl	801adc4 <__sinit>
 801b9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d0f3      	beq.n	801b9a2 <_fflush_r+0xa>
 801b9ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b9bc:	07d0      	lsls	r0, r2, #31
 801b9be:	d404      	bmi.n	801b9ca <_fflush_r+0x32>
 801b9c0:	0599      	lsls	r1, r3, #22
 801b9c2:	d402      	bmi.n	801b9ca <_fflush_r+0x32>
 801b9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9c6:	f7ff fc2a 	bl	801b21e <__retarget_lock_acquire_recursive>
 801b9ca:	4628      	mov	r0, r5
 801b9cc:	4621      	mov	r1, r4
 801b9ce:	f7ff ff5d 	bl	801b88c <__sflush_r>
 801b9d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b9d4:	07da      	lsls	r2, r3, #31
 801b9d6:	4605      	mov	r5, r0
 801b9d8:	d4e4      	bmi.n	801b9a4 <_fflush_r+0xc>
 801b9da:	89a3      	ldrh	r3, [r4, #12]
 801b9dc:	059b      	lsls	r3, r3, #22
 801b9de:	d4e1      	bmi.n	801b9a4 <_fflush_r+0xc>
 801b9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9e2:	f7ff fc1d 	bl	801b220 <__retarget_lock_release_recursive>
 801b9e6:	e7dd      	b.n	801b9a4 <_fflush_r+0xc>

0801b9e8 <__swhatbuf_r>:
 801b9e8:	b570      	push	{r4, r5, r6, lr}
 801b9ea:	460c      	mov	r4, r1
 801b9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9f0:	2900      	cmp	r1, #0
 801b9f2:	b096      	sub	sp, #88	; 0x58
 801b9f4:	4615      	mov	r5, r2
 801b9f6:	461e      	mov	r6, r3
 801b9f8:	da0d      	bge.n	801ba16 <__swhatbuf_r+0x2e>
 801b9fa:	89a3      	ldrh	r3, [r4, #12]
 801b9fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ba00:	f04f 0100 	mov.w	r1, #0
 801ba04:	bf0c      	ite	eq
 801ba06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ba0a:	2340      	movne	r3, #64	; 0x40
 801ba0c:	2000      	movs	r0, #0
 801ba0e:	6031      	str	r1, [r6, #0]
 801ba10:	602b      	str	r3, [r5, #0]
 801ba12:	b016      	add	sp, #88	; 0x58
 801ba14:	bd70      	pop	{r4, r5, r6, pc}
 801ba16:	466a      	mov	r2, sp
 801ba18:	f000 f862 	bl	801bae0 <_fstat_r>
 801ba1c:	2800      	cmp	r0, #0
 801ba1e:	dbec      	blt.n	801b9fa <__swhatbuf_r+0x12>
 801ba20:	9901      	ldr	r1, [sp, #4]
 801ba22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801ba26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801ba2a:	4259      	negs	r1, r3
 801ba2c:	4159      	adcs	r1, r3
 801ba2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ba32:	e7eb      	b.n	801ba0c <__swhatbuf_r+0x24>

0801ba34 <__smakebuf_r>:
 801ba34:	898b      	ldrh	r3, [r1, #12]
 801ba36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ba38:	079d      	lsls	r5, r3, #30
 801ba3a:	4606      	mov	r6, r0
 801ba3c:	460c      	mov	r4, r1
 801ba3e:	d507      	bpl.n	801ba50 <__smakebuf_r+0x1c>
 801ba40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ba44:	6023      	str	r3, [r4, #0]
 801ba46:	6123      	str	r3, [r4, #16]
 801ba48:	2301      	movs	r3, #1
 801ba4a:	6163      	str	r3, [r4, #20]
 801ba4c:	b002      	add	sp, #8
 801ba4e:	bd70      	pop	{r4, r5, r6, pc}
 801ba50:	ab01      	add	r3, sp, #4
 801ba52:	466a      	mov	r2, sp
 801ba54:	f7ff ffc8 	bl	801b9e8 <__swhatbuf_r>
 801ba58:	9900      	ldr	r1, [sp, #0]
 801ba5a:	4605      	mov	r5, r0
 801ba5c:	4630      	mov	r0, r6
 801ba5e:	f7ff f899 	bl	801ab94 <_malloc_r>
 801ba62:	b948      	cbnz	r0, 801ba78 <__smakebuf_r+0x44>
 801ba64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba68:	059a      	lsls	r2, r3, #22
 801ba6a:	d4ef      	bmi.n	801ba4c <__smakebuf_r+0x18>
 801ba6c:	f023 0303 	bic.w	r3, r3, #3
 801ba70:	f043 0302 	orr.w	r3, r3, #2
 801ba74:	81a3      	strh	r3, [r4, #12]
 801ba76:	e7e3      	b.n	801ba40 <__smakebuf_r+0xc>
 801ba78:	89a3      	ldrh	r3, [r4, #12]
 801ba7a:	6020      	str	r0, [r4, #0]
 801ba7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ba80:	81a3      	strh	r3, [r4, #12]
 801ba82:	9b00      	ldr	r3, [sp, #0]
 801ba84:	6163      	str	r3, [r4, #20]
 801ba86:	9b01      	ldr	r3, [sp, #4]
 801ba88:	6120      	str	r0, [r4, #16]
 801ba8a:	b15b      	cbz	r3, 801baa4 <__smakebuf_r+0x70>
 801ba8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ba90:	4630      	mov	r0, r6
 801ba92:	f000 f837 	bl	801bb04 <_isatty_r>
 801ba96:	b128      	cbz	r0, 801baa4 <__smakebuf_r+0x70>
 801ba98:	89a3      	ldrh	r3, [r4, #12]
 801ba9a:	f023 0303 	bic.w	r3, r3, #3
 801ba9e:	f043 0301 	orr.w	r3, r3, #1
 801baa2:	81a3      	strh	r3, [r4, #12]
 801baa4:	89a3      	ldrh	r3, [r4, #12]
 801baa6:	431d      	orrs	r5, r3
 801baa8:	81a5      	strh	r5, [r4, #12]
 801baaa:	e7cf      	b.n	801ba4c <__smakebuf_r+0x18>

0801baac <memmove>:
 801baac:	4288      	cmp	r0, r1
 801baae:	b510      	push	{r4, lr}
 801bab0:	eb01 0402 	add.w	r4, r1, r2
 801bab4:	d902      	bls.n	801babc <memmove+0x10>
 801bab6:	4284      	cmp	r4, r0
 801bab8:	4623      	mov	r3, r4
 801baba:	d807      	bhi.n	801bacc <memmove+0x20>
 801babc:	1e43      	subs	r3, r0, #1
 801babe:	42a1      	cmp	r1, r4
 801bac0:	d008      	beq.n	801bad4 <memmove+0x28>
 801bac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801baca:	e7f8      	b.n	801babe <memmove+0x12>
 801bacc:	4402      	add	r2, r0
 801bace:	4601      	mov	r1, r0
 801bad0:	428a      	cmp	r2, r1
 801bad2:	d100      	bne.n	801bad6 <memmove+0x2a>
 801bad4:	bd10      	pop	{r4, pc}
 801bad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bade:	e7f7      	b.n	801bad0 <memmove+0x24>

0801bae0 <_fstat_r>:
 801bae0:	b538      	push	{r3, r4, r5, lr}
 801bae2:	4d07      	ldr	r5, [pc, #28]	; (801bb00 <_fstat_r+0x20>)
 801bae4:	2300      	movs	r3, #0
 801bae6:	4604      	mov	r4, r0
 801bae8:	4608      	mov	r0, r1
 801baea:	4611      	mov	r1, r2
 801baec:	602b      	str	r3, [r5, #0]
 801baee:	f7e5 fad6 	bl	800109e <_fstat>
 801baf2:	1c43      	adds	r3, r0, #1
 801baf4:	d102      	bne.n	801bafc <_fstat_r+0x1c>
 801baf6:	682b      	ldr	r3, [r5, #0]
 801baf8:	b103      	cbz	r3, 801bafc <_fstat_r+0x1c>
 801bafa:	6023      	str	r3, [r4, #0]
 801bafc:	bd38      	pop	{r3, r4, r5, pc}
 801bafe:	bf00      	nop
 801bb00:	2400ccc8 	.word	0x2400ccc8

0801bb04 <_isatty_r>:
 801bb04:	b538      	push	{r3, r4, r5, lr}
 801bb06:	4d06      	ldr	r5, [pc, #24]	; (801bb20 <_isatty_r+0x1c>)
 801bb08:	2300      	movs	r3, #0
 801bb0a:	4604      	mov	r4, r0
 801bb0c:	4608      	mov	r0, r1
 801bb0e:	602b      	str	r3, [r5, #0]
 801bb10:	f7e5 fad5 	bl	80010be <_isatty>
 801bb14:	1c43      	adds	r3, r0, #1
 801bb16:	d102      	bne.n	801bb1e <_isatty_r+0x1a>
 801bb18:	682b      	ldr	r3, [r5, #0]
 801bb1a:	b103      	cbz	r3, 801bb1e <_isatty_r+0x1a>
 801bb1c:	6023      	str	r3, [r4, #0]
 801bb1e:	bd38      	pop	{r3, r4, r5, pc}
 801bb20:	2400ccc8 	.word	0x2400ccc8

0801bb24 <memcpy>:
 801bb24:	440a      	add	r2, r1
 801bb26:	4291      	cmp	r1, r2
 801bb28:	f100 33ff 	add.w	r3, r0, #4294967295
 801bb2c:	d100      	bne.n	801bb30 <memcpy+0xc>
 801bb2e:	4770      	bx	lr
 801bb30:	b510      	push	{r4, lr}
 801bb32:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bb36:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bb3a:	4291      	cmp	r1, r2
 801bb3c:	d1f9      	bne.n	801bb32 <memcpy+0xe>
 801bb3e:	bd10      	pop	{r4, pc}

0801bb40 <_realloc_r>:
 801bb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb44:	4680      	mov	r8, r0
 801bb46:	4614      	mov	r4, r2
 801bb48:	460e      	mov	r6, r1
 801bb4a:	b921      	cbnz	r1, 801bb56 <_realloc_r+0x16>
 801bb4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb50:	4611      	mov	r1, r2
 801bb52:	f7ff b81f 	b.w	801ab94 <_malloc_r>
 801bb56:	b92a      	cbnz	r2, 801bb64 <_realloc_r+0x24>
 801bb58:	f7ff fb64 	bl	801b224 <_free_r>
 801bb5c:	4625      	mov	r5, r4
 801bb5e:	4628      	mov	r0, r5
 801bb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb64:	f000 f81b 	bl	801bb9e <_malloc_usable_size_r>
 801bb68:	4284      	cmp	r4, r0
 801bb6a:	4607      	mov	r7, r0
 801bb6c:	d802      	bhi.n	801bb74 <_realloc_r+0x34>
 801bb6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bb72:	d812      	bhi.n	801bb9a <_realloc_r+0x5a>
 801bb74:	4621      	mov	r1, r4
 801bb76:	4640      	mov	r0, r8
 801bb78:	f7ff f80c 	bl	801ab94 <_malloc_r>
 801bb7c:	4605      	mov	r5, r0
 801bb7e:	2800      	cmp	r0, #0
 801bb80:	d0ed      	beq.n	801bb5e <_realloc_r+0x1e>
 801bb82:	42bc      	cmp	r4, r7
 801bb84:	4622      	mov	r2, r4
 801bb86:	4631      	mov	r1, r6
 801bb88:	bf28      	it	cs
 801bb8a:	463a      	movcs	r2, r7
 801bb8c:	f7ff ffca 	bl	801bb24 <memcpy>
 801bb90:	4631      	mov	r1, r6
 801bb92:	4640      	mov	r0, r8
 801bb94:	f7ff fb46 	bl	801b224 <_free_r>
 801bb98:	e7e1      	b.n	801bb5e <_realloc_r+0x1e>
 801bb9a:	4635      	mov	r5, r6
 801bb9c:	e7df      	b.n	801bb5e <_realloc_r+0x1e>

0801bb9e <_malloc_usable_size_r>:
 801bb9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bba2:	1f18      	subs	r0, r3, #4
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	bfbc      	itt	lt
 801bba8:	580b      	ldrlt	r3, [r1, r0]
 801bbaa:	18c0      	addlt	r0, r0, r3
 801bbac:	4770      	bx	lr
	...

0801bbb0 <_init>:
 801bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbb2:	bf00      	nop
 801bbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bbb6:	bc08      	pop	{r3}
 801bbb8:	469e      	mov	lr, r3
 801bbba:	4770      	bx	lr

0801bbbc <_fini>:
 801bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbbe:	bf00      	nop
 801bbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bbc2:	bc08      	pop	{r3}
 801bbc4:	469e      	mov	lr, r3
 801bbc6:	4770      	bx	lr
